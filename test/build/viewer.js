(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

var _utils = require("../utils");

var treedFromFile = _utils.treedFromFile;
var initFormatters = _utils.initFormatters;
var Ticker = _utils.Ticker;

var ticks = new Ticker();

var React = _interopRequire(require("react/addons"));

ticks.add("load:react");

var Treed = _interopRequire(require("treed/classy"));

var MemPL = _interopRequire(require("treed/pl/mem"));

ticks.add("load:treed");

var DocViewer = _interopRequire(require("../../app/components/doc-viewer"));

ticks.add("load:component");

var IJS = require("itreed/lib/kernels/js");
ticks.add("load:ijs");
var itreed = require("itreed");
ticks.add("load:itreed");

var plugins = [require("treed/plugins/undo"), require("treed/plugins/todo"), require("treed/plugins/image"), require("treed/plugins/types"), require("treed/plugins/collapse"), require("treed/plugins/clipboard"), require("treed/plugins/lists"), require("treed/plugins/rebase"), require("../../treed-plugins/custom-css"), itreed({
  type: "ijs",
  language: "javascript",
  remote: false,
  title: "Javascript",
  kernel: IJS })];

ticks.add("load:plugins");

var pl = new MemPL();

treedFromFile(Treed, FIXTURE, plugins, pl, function (err, _ref) {
  var treed = _ref.treed;
  var file = _ref.file;

  treed.keyManager.listen(window);
  var el = React.createElement(DocViewer, {
    saveWindowConfig: function (a, b) {
      b();
    },
    keys: treed.keyManager,
    treed: treed,
    file: file });

  React.addons.Perf.start();
  ticks.add("treedFromFile");

  React.render(el, document.body, function (err) {
    ticks.add("render");

    ticks.show();
    React.addons.Perf.stop();
  });
});
//React.addons.Perf.getLastMeasurements()

},{"../../app/components/doc-viewer":3,"../../treed-plugins/custom-css":210,"../utils":208,"itreed":30,"itreed/lib/kernels/js":35,"react/addons":"react/addons","treed/classy":111,"treed/pl/mem":157,"treed/plugins/clipboard":158,"treed/plugins/collapse":159,"treed/plugins/image":164,"treed/plugins/lists":166,"treed/plugins/rebase":168,"treed/plugins/todo":172,"treed/plugins/types":173,"treed/plugins/undo":174}],2:[function(require,module,exports){
"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

var React = _interopRequire(require("react"));

var TypeSwitcher = _interopRequire(require("./type-switcher"));

var PT = React.PropTypes;
module.exports = React.createClass({
  displayName: "doc-pane",

  propTypes: {
    type: PT.string,
    viewTypes: PT.object,
    value: PT.object },
  _onRebase: function _onRebase() {
    var store = this.props.value.config.store;
    this.props.onRebase(this.props.value.id, store.view.root);
  },
  componentDidMount: function componentDidMount() {
    var view = this.props.value.config.store;
    view.on(view.events.rootChanged(), this._onRebase);
  },
  componentWillUnmount: function componentWillUnmount() {
    var view = this.props.value.config.store;
    view.on(view.events.rootChanged(), this._onRebase);
  },
  render: function render() {
    var props = this.props.value.config;
    var statusbar = [];
    props.plugins.map(function (plugin) {
      if (!plugin.statusbar) return;
      statusbar.push(plugin.statusbar(props.store));
    });
    props.skipMix = ["top"];
    var View = this.props.viewTypes[this.props.value.type];
    if (!View) {
      View = this.props.viewTypes.list;
    }
    return React.createElement(
      "div",
      { className: "App_pane App_pane-" + this.props.value.type },
      React.createElement(
        "div",
        { className: "App_pane_top" },
        statusbar,
        React.createElement(
          "div",
          { className: "App_pane_splitters" },
          React.createElement(
            "button",
            { onClick: this.props.onSplit.bind(null, this.props.pos, "horiz") },
            "||"
          ),
          React.createElement(
            "button",
            { onClick: this.props.onSplit.bind(null, this.props.pos, "vert") },
            " = "
          ),
          React.createElement(
            "button",
            { onClick: this.props.onRemove.bind(null, this.props.pos) },
            "x"
          )
        ),
        React.createElement(TypeSwitcher, {
          types: this.props.viewTypes,
          type: this.props.value.type,
          onChange: this.props.changeViewType.bind(null, this.props.value.id) })
      ),
      React.createElement(
        "div",
        { className: "App_pane_scroll" },
        React.createElement(View, props)
      )
    );
  }
});

},{"./type-switcher":11,"react":"react"}],3:[function(require,module,exports){
"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

var Pane = _interopRequire(require("./doc-pane"));

var React = require("react"),
    KeysMixin = require("../keys-mixin"),
    SplitManager = require("./split-manager"),
    SearchPopper = require("./search-popper"),
    KeyboardHelper = require("./keyboard-helper"),
    uuid = require("../../lib/uuid"),
    PT = React.PropTypes,
    windowJump = require("./window-jump");

function windowPos(windows, fn, pos) {
  pos = pos || [];
  if (windows.leaf) {
    if (fn(windows.value)) {
      return pos;
    }return false;
  }
  var first = windowPos(windows.value.first, fn, pos.concat(["first"]));
  if (first) {
    return first;
  }var second = windowPos(windows.value.second, fn, pos.concat(["second"]));
  if (second) {
    return second;
  }
}

function hydrateWindows(windows, treed, windowMap, viewTypes) {
  var id, view;
  if (windows.first.leaf) {
    view = viewTypes[windows.first.value.type || "list"] || viewTypes.list;
    windows.first.value.config = treed.addView({
      root: windows.first.value.root,
      actions: view.actions,
      keys: view.keys });
    id = uuid();
    windows.first.value.id = id;
    windowMap[id] = windows.first.value;
  } else {
    hydrateWindows(windows.first.value, treed, windowMap, viewTypes);
  }
  if (windows.second.leaf) {
    view = viewTypes[windows.second.value.type || "list"] || viewTypes.list;
    windows.second.value.config = treed.addView({
      root: windows.second.value.root,
      actions: view.actions,
      keys: view.keys });
    id = uuid();
    windows.second.value.id = id;
    windowMap[id] = windows.second.value;
  } else {
    hydrateWindows(windows.second.value, treed, windowMap, viewTypes);
  }
}

function hydrateInitialWindows(windows, treed, viewTypes) {
  var windowMap = {};
  if (windows.leaf) {
    var id = uuid(),
        view = viewTypes[windows.value.type || "list"] || viewTypes.list;
    windows.value.config = treed.addView({
      root: windows.value.root,
      actions: view.actions,
      keys: view.keys });
    windows.value.id = id;
    windowMap[id] = windows.value;
    return windowMap;
  }
  hydrateWindows(windows.value, treed, windowMap, viewTypes);
  return windowMap;
}

var DocViewer = React.createClass({
  displayName: "DocViewer",

  mixins: [KeysMixin],

  statics: {
    keys: function keys() {
      return {
        "w l, w right": this._windowJump.bind(null, "right"),
        "w j, w down": this._windowJump.bind(null, "down"),
        "w k, w up": this._windowJump.bind(null, "up"),
        "w h, w left": this._windowJump.bind(null, "left"),
        "shift+; v s": this._split.bind(null, "horiz"),
        "shift+; s p": this._split.bind(null, "vert"),
        "shift+; q": this._remove,
        "/": this._startSearching };
    } },

  propTypes: {
    treed: PT.object,
    file: PT.object,
    keys: PT.object,
    viewTypes: PT.object,
    saveWindowConfig: PT.func },

  _onError: function _onError(err) {
    this.setState({ loading: false, error: err });
  },

  getInitialState: function getInitialState() {
    var windowConfig = this.props.file.windows || {
      leaf: true,
      ratio: 0.5,
      value: {
        root: null,
        type: "list" } };
    var windowMap = hydrateInitialWindows(windowConfig, this.props.treed, this.props.viewTypes);
    return {
      windowConfig: windowConfig,
      windowMap: windowMap,
      searching: false };
  },

  getDefaultProps: function getDefaultProps() {
    return {
      viewTypes: {
        // pdf: require('treed/views/pdf'),
        list: require("treed/views/list"),
        mindmap: require("treed/views/mindmap"),
        paper: require("treed/views/paper"),
        focus: require("treed/views/focus") }
    };
  },

  findCurrentPane: function findCurrentPane() {
    var vid = this.props.treed.store.activeView;
    return windowPos(this.state.windowConfig, function (value) {
      return value.config.store.view.id === vid;
    });
  },

  _split: function _split(orient) {
    var config = SplitManager.split(this.findCurrentPane(), orient, this.state.windowConfig, this.getNewWindowConfig);
    this._changeWindowConfig(config);
  },

  _remove: function _remove() {
    var result = SplitManager.remove(this.findCurrentPane(), this.state.windowConfig);
    if (!result) {
      return;
    }this._onRemovedWindow(result.removed);
    this._changeWindowConfig(result.config);
  },

  _windowJump: function _windowJump(direction) {
    var currentView = this.props.treed.store.activeView;
    if (this.props.treed.store.views[currentView].mode === "insert") {
      return true;
    }var nextId = windowJump(this.state.windowConfig, currentView, direction);
    if (false === nextId) {
      return false;
    }this.props.treed.store.activeView = nextId;
    this.props.treed.store.changed(this.props.treed.store.events.activeViewChanged());
  },

  getNewWindowConfig: function getNewWindowConfig(currentConfig) {

    var view = this.props.viewTypes[currentConfig.type || "list"] || this.props.viewTypes.list;
    var config = this.props.treed.addView({
      root: currentConfig.root,
      actions: view.actions,
      keys: view.keys }),
        id = uuid(),
        value = {
      config: config,
      type: currentConfig.type,
      id: id,
      root: currentConfig.root
    };
    this.state.windowMap[id] = value;
    return value;
  },

  _onRemovedWindow: function _onRemovedWindow(window) {
    var id = window.config.store.view.id;
    this.props.treed.store.unregisterView(id);
  },

  _changeWindowConfig: function _changeWindowConfig(windowConfig) {
    var _this = this;

    this.props.saveWindowConfig(windowConfig, function () {
      return _this.setState({ windowConfig: windowConfig });
    });
  },

  _rebaseView: function _rebaseView(wid, root) {
    var wmap = this.state.windowMap;
    wmap[wid].root = root;
    this.props.saveWindowConfig(this.state.windowConfig);
  },

  _changeViewType: function _changeViewType(wid, type) {
    var wmap = this.state.windowMap,
        view = this.props.viewTypes[type || "list"] || this.props.viewTypes.list,
        isActive = this.props.treed.store.activeView === wmap[wid].config.store.id;
    this.props.treed.removeView(wmap[wid].config.id);

    wmap[wid].type = type || "list";
    var config = wmap[wid].config = this.props.treed.addView({
      root: wmap[wid].root,
      actions: view.actions,
      keys: view.keys });

    if (isActive) {
      config.store.actions.setActiveView();
    }

    this.setState({ windowMap: wmap });
    this.props.saveWindowConfig(this.state.windowConfig, function () {
      return null;
    });
  },

  componentDidMount: function componentDidMount() {
    // TODO: need to abstract out the logic from browse.js
    // not sure what this means now...
    window.addEventListener("keydown", this._keyDown);
  },

  componentWillUnmount: function componentWillUnmount() {
    window.removeEventListener("keydown", this._keyDown);
  },

  _startSearching: function _startSearching() {
    if (this.props.treed.store.views[this.props.treed.store.activeView].mode === "insert") {
      return true;
    }this.setState({ searching: true });
  },

  _searchItems: function _searchItems(needle) {
    var store = this.props.treed.store,
        blackTypes = [] //'ipython', 'code-playground'] // TODO have plugins declare this, as "nosearch" or something
    ,
        view = store.views[store.activeView],
        root = view.root,
        db = store.db;

    var frontier = [root],
        found = [];
    while (frontier.length && found.length < 20) {
      var next = db.nodes[frontier.shift()];
      if (next.content.trim().length && blackTypes.indexOf(next.type) === -1 && (!needle || next.content.match(needle))) {
        found.push(next);
      }
      if (next.children) {
        frontier = frontier.concat(next.children);
      }
    }
    return found;
  },

  _onSearchSelect: function _onSearchSelect(item, jump) {
    var actions = this.props.treed.store.currentViewActions();
    // TODO think about what should be the default behavior. Should it be to
    // rebase, or to scroll + open?
    if (jump) {
      actions.rebase(item.id);
    } else {
      actions.expandToAndSelect(item.id);
    }
    this.setState({ searching: false });
  },

  _canGrabKeyboard: function _canGrabKeyboard(e) {
    return this.props.treed.store.views[this.props.treed.store.activeView].mode !== "insert" && ["INPUT", "TEXTAREA"].indexOf(e.target.nodeName) === -1;
  },

  render: function render() {
    var _this = this;

    var _props = this.props;
    var treed = _props.treed;
    var plugins = _props.plugins;
    var keys = _props.keys;
    var viewTypes = _props.viewTypes;

    return React.createElement(
      "div",
      { className: "DocViewer" },
      React.createElement(SplitManager, {
        cprops: {
          viewTypes: viewTypes,
          changeViewType: this._changeViewType,
          onRebase: this._rebaseView },
        comp: Pane,
        config: this.state.windowConfig,
        getNew: this.getNewWindowConfig,
        onRemove: this._onRemovedWindow,
        onChange: this._changeWindowConfig }),
      this.state.searching && React.createElement(SearchPopper, {
        matchItems: this._searchItems,
        onClose: function () {
          return _this.setState({ searching: false });
        },
        onSelect: this._onSearchSelect }),
      React.createElement(KeyboardHelper, { canGrabKeyboard: this._canGrabKeyboard, keys: keys, plugins: treed.options.plugins })
    );
  }
});

module.exports = DocViewer;

},{"../../lib/uuid":15,"../keys-mixin":13,"./doc-pane":2,"./keyboard-helper":4,"./search-popper":7,"./split-manager":9,"./window-jump":12,"react":"react","treed/views/focus":191,"treed/views/list":194,"treed/views/mindmap":200,"treed/views/paper":206}],4:[function(require,module,exports){
"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * Pops up when you type "?" in normal / visual mode.
 */

var React = require("react"),
    viewKeys = require("treed/views/list/keys"),
    KeysMixin = require("../keys-mixin"),
    KeyboardPopup = require("./keyboard-popup"),
    PT = React.PropTypes;

var KeyboardHelper = React.createClass({
  displayName: "KeyboardHelper",

  mixins: [KeysMixin],

  statics: {
    keys: function keys() {
      return {
        "shift+/": this.showKey };
    } },

  propTypes: {
    canGrabKeyboard: PT.func.isRequired,
    plugins: PT.arrayOf(PT.object).isRequired,
    keys: PT.object.isRequired },

  getInitialState: function getInitialState() {
    return { open: false };
  },

  showKey: function showKey(e) {
    if (!this.props.canGrabKeyboard(e)) {
      return true;
    }this.show();
  },

  show: function show() {
    this.setState({ open: true });
  },
  hide: function hide() {
    this.setState({ open: false });
  },

  mainPage: function mainPage() {
    return Object.keys(viewKeys).map(function (title) {
      return {
        title: title,
        actions: viewKeys[title] };
    });
  },

  pluginsPage: function pluginsPage() {
    var _this = this;

    return this.props.plugins.reduce(function (sections, plugin) {
      if (!plugin.keys) return sections;
      var keys = plugin.keys;
      if ("function" === typeof keys) {
        keys = keys(_this.props.plugins);
      }
      sections.push({
        title: plugin.title,
        actions: keys
      });
      return sections;
    }, []);
  },

  render: function render() {
    if (!this.state.open) {
      return React.createElement(
        Toaster,
        { onClick: this.show },
        "Press ? for keyboard shortcuts"
      );
    }
    return React.createElement(KeyboardPopup, {
      keys: this.props.keys,
      pages: {
        Main: this.mainPage(),
        Plugins: this.pluginsPage() },
      onClose: this.hide });
  } });

var Toaster = React.createClass({
  displayName: "Toaster",

  getInitialState: function getInitialState() {
    return { toasted: false };
  },
  componentDidMount: function componentDidMount() {
    var _this = this;

    setTimeout(function () {
      return _this.setState({ toasted: true });
    }, 100);
  },
  render: function render() {
    var cls = "Toaster " + (this.state.toasted ? "Toaster-toasted" : "");
    return React.createElement(
      "div",
      _extends({ className: cls }, this.props),
      this.props.children
    );
  } });

module.exports = KeyboardHelper;

},{"../keys-mixin":13,"./keyboard-popup":5,"react":"react","treed/views/list/keys":196}],5:[function(require,module,exports){
"use strict";

/**
 * Pops up when you type "?" in normal / visual mode.
 */

var React = require("react"),
    PT = React.PropTypes;

var KeyboardPopup = React.createClass({
  displayName: "KeyboardPopup",

  propTypes: {
    onClose: PT.func.isRequired,
    pages: PT.objectOf(PT.arrayOf(PT.shape({
      title: PT.string,
      actions: PT.objectOf(PT.objectOf(PT.string)) }))).isRequired },

  getInitialState: function getInitialState() {
    return {
      pageIndex: 0,
      fadeIn: false };
  },

  componentDidMount: function componentDidMount() {
    this._resize();
    this.props.keys.disable();
    window.addEventListener("keydown", this._onKeyDown);
    this.setState({ fadeIn: true });
  },

  componentWillUnmount: function componentWillUnmount() {
    this.props.keys.enable();
    window.removeEventListener("keydown", this._onKeyDown);
  },

  _onClose: function _onClose() {
    var _this = this;

    this.setState({ fadeIn: false });
    setTimeout(function () {
      return _this.props.onClose();
    }, 150);
  },

  _onKeyDown: function _onKeyDown(e) {
    if (e.keyCode === 27) {
      return this._onClose();
    }if (e.keyCode !== 9) {
      return null;
    }e.preventDefault();
    var selection = this.state.pageIndex,
        pages = Object.keys(this.props.pages);
    if (e.shiftKey) {
      selection -= 1;
      if (selection < 0) selection = pages.length - 1;
    } else {
      selection += 1;
      if (selection > pages.length - 1) selection = 0;
    }
    this.setState({ pageIndex: selection });
  },

  _resize: function _resize() {
    var node = this.refs.body.getDOMNode();
    node.style.width = node.scrollWidth + "px";
    for (var i = 0; i < 10 && node.scrollWidth > node.offsetWidth; i++) {
      node.style.width = node.scrollWidth + "px";
    }
  },

  renderRow: function renderRow(action, bindings) {
    var text = bindings.text || bindings.normal || bindings.visual || bindings.insert;
    if (!text) {
      return null;
    }return React.createElement(
      "tr",
      { key: action },
      React.createElement(
        "td",
        { className: "KeyboardPopup_bindings" },
        text.split(", ").map(function (binding) {
          return React.createElement(
            "span",
            { key: binding },
            binding
          );
        })
      ),
      React.createElement(
        "td",
        { className: "KeyboardPopup_action" },
        bindings.title || action
      )
    );
  },

  render: function render() {
    var _this = this;

    var pageNames = Object.keys(this.props.pages),
        currentName = pageNames[this.state.pageIndex],
        page = this.props.pages[currentName];
    return React.createElement(
      "div",
      { className: "KeyboardPopup" + (this.state.fadeIn ? " KeyboardPopup-fade-in" : ""), onClick: this._onClose },
      React.createElement(
        "div",
        { className: "KeyboardPopup_body", onClick: function (e) {
            return e.stopPropagation();
          } },
        React.createElement(
          "div",
          { className: "KeyboardPopup_title" },
          "Notablemind Keyboard Shortcuts"
        ),
        React.createElement(
          "div",
          { className: "KeyboardPopup_pages" },
          pageNames.map(function (name, i) {
            return React.createElement(
              "button",
              { key: i, disabled: i === _this.state.pageIndex, onClick: function () {
                  return _this.setState({ pageIndex: i });
                } },
              name
            );
          })
        ),
        React.createElement(
          "div",
          { ref: "body", className: "KeyboardPopup_sections" },
          page.map(function (section, i) {
            return React.createElement(
              "div",
              { key: i, className: "KeyboardPopup_section" },
              React.createElement(
                "div",
                { className: "KeyboardPopup_section_title" },
                section.title
              ),
              React.createElement(
                "table",
                null,
                React.createElement(
                  "tbody",
                  null,
                  Object.keys(section.actions).map(function (action) {
                    return _this.renderRow(action, section.actions[action]);
                  })
                )
              )
            );
          })
        )
      )
    );
  } });

module.exports = KeyboardPopup;

},{"react":"react"}],6:[function(require,module,exports){
"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

var React = _interopRequire(require("react"));

var ensureInView = _interopRequire(require("treed/util/ensure-in-view"));

var classnames = _interopRequire(require("classnames"));

var highlight = require("./search-utils").highlight;

var PT = React.PropTypes;
module.exports = React.createClass({
  displayName: "search-body",

  propTypes: {
    items: PT.array,
    onSelect: PT.func },

  getInitialState: function getInitialState() {
    return {
      selected: 0 };
  },

  handleEnter: function handleEnter(jump) {
    return this.props.onSelect(this.props.items[this.state.selected], jump);
  },

  handleGoUp: function handleGoUp() {
    if (this.state.selected < this.props.items.length - 1) {
      this.setState({ selected: this.state.selected + 1 });
    }
  },

  handleGoDown: function handleGoDown() {
    if (this.state.selected > 0) {
      this.setState({ selected: this.state.selected - 1 });
    }
  },

  componentWillReceiveProps: function componentWillReceiveProps() {
    this.setState({ selected: 0 });
  },

  componentDidMount: function componentDidMount() {
    if (!this.refs || !this.refs.selected) {
      return;
    }var node = this.refs.selected.getDOMNode();
    node.offsetParent.scrollTop = node.offsetParent.scrollHeight;
  },

  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
    if (!this.refs || !this.refs.selected) {
      return;
    }var node = this.refs.selected.getDOMNode();
    if (prevState.selected !== this.state.selected) {
      ensureInView(node);
    } else {
      node.offsetParent.scrollTop = node.offsetParent.scrollHeight;
    }
  },

  render: function render() {
    var items = [];
    for (var i = this.props.items.length - 1; i >= 0; i--) {
      var item = this.props.items[i];
      items.push(React.createElement(
        "li",
        { className: classnames({
            SearchPopper_result: true,
            "SearchPopper_result-selected": i === this.state.selected }),
          ref: i === this.state.selected ? "selected" : undefined,
          onClick: this.props.onSelect.bind(null, item, false),
          key: i },
        highlight(item.content, this.props.needle, 200)
      ));
    }

    return React.createElement(
      "ul",
      null,
      items
    );
  } });

},{"./search-utils":8,"classnames":17,"react":"react","treed/util/ensure-in-view":181}],7:[function(require,module,exports){
"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

var SearchBody = _interopRequire(require("./search-body"));

var toReg = require("./search-utils").toReg;

var React = _interopRequire(require("react"));

var PT = React.PropTypes;

var SearchPopper = React.createClass({
  displayName: "SearchPopper",

  propTypes: {
    matchItems: PT.func.isRequired,
    onSelect: PT.func.isRequired,
    onClose: PT.func.isRequired },

  getInitialState: function getInitialState() {
    return {
      needle: "" };
  },

  componentDidMount: function componentDidMount() {
    this.refs.input.getDOMNode().focus();
  },

  onChange: function onChange(e) {
    var needle = e.target.value;
    this.setState({
      needle: needle });
  },

  onKeyDown: function onKeyDown(e) {
    e.stopPropagation();
    if (e.key === "Enter") {
      e.preventDefault();
      this.refs.list.handleEnter(!!e.altKey);
    }
    if (e.key === "ArrowUp") {
      e.preventDefault();
      this.refs.list.handleGoUp();
    }
    if (e.key === "ArrowDown") {
      e.preventDefault();
      this.refs.list.handleGoDown();
    }
    if (e.key === "Escape") {
      this.props.onClose();
    }
  },

  render: function render() {
    return React.createElement(
      "div",
      { className: "SearchPopper" },
      React.createElement(SearchBody, {
        ref: "list",
        onSelect: this.props.onSelect,
        needle: this.state.needle,
        items: this.props.matchItems(toReg(this.state.needle)) }),
      React.createElement(
        "div",
        { className: "SearchPopper_input" },
        React.createElement("input", {
          ref: "input",
          autoFocus: true,
          value: this.state.needle,
          placeholder: "search",
          onKeyDown: this.onKeyDown,
          onChange: this.onChange })
      )
    );
  }
});

module.exports = SearchPopper;

},{"./search-body":6,"./search-utils":8,"react":"react"}],8:[function(require,module,exports){
"use strict";

exports.toReg = toReg;
exports.highlight = highlight;

function toReg(needle) {
  return new RegExp(needle.replace(".", "\\.").replace("*", ".*?"), "gi");
}

function highlight(text, needle, maxSize) {
  var rx = toReg(needle);

  var items = [];
  var last = 0;
  text.replace(rx, function (matched, pos, full) {
    items.push(full.slice(last, pos));
    items.push(React.createElement(
      "strong",
      null,
      matched
    ));
    last = pos + matched.length;
  });
  items.push(text.slice(last));
  if (text.length > maxSize) {
    var ln = 0;
    if (items[0].length > maxSize / 2) {
      items[0] = items[0].slice(-maxSize / 2);
    }
    ln = items[0].length;
    for (var i = 2; i < items.length; i += 2) {
      if (ln + items[i].length > maxSize) {
        items[i] = items[i].slice(maxSize - ln);
        return items.slice(0, i + 1);
      }
      ln += items[i].length;
    }
  }
  return items;
}
Object.defineProperty(exports, "__esModule", {
  value: true
});

},{}],9:[function(require,module,exports){
"use strict";

var React = require("react"),
    Splitter = require("./splitter"),
    PT = React.PropTypes;

function r() {
  for (var a = ""; a.length < 5; a += "abcdefg"[parseInt(Math.random() * 7)]);
  return a;
}

function cloneShallow(s) {
  var o = {};
  for (var a in s) {
    o[a] = s[a];
  }
  return o;
}

var SplitManager = React.createClass({
  displayName: "SplitManager",

  propTypes: {
    config: PT.object,
    comp: PT.oneOfType([PT.object, PT.func]),
    getNew: PT.func,
    onRemove: PT.func,
    onChange: PT.func,
    cprops: PT.object },

  statics: {
    split: function split(pos, orient, config, getNew) {
      pos = pos.slice();
      if (config.leaf) {
        return {
          leaf: false,
          value: {
            orient: orient,
            first: { leaf: true, value: config.value },
            second: { leaf: true, value: getNew(config.value) }
          }
        };
      }
      var last = pos.pop();
      var line = pos.reduce(function (cvalue, i) {
        return cvalue[i].value = cloneShallow(cvalue[i].value);
      }, config.value);
      line[last] = {
        leaf: false,
        ratio: 0.5,
        value: {
          orient: orient,
          first: { leaf: true, value: line[last].value },
          second: { leaf: true, value: getNew(line[last].value) }
        }
      };
      return config;
    },

    remove: function remove(pos, config) {
      pos = pos.slice();
      if (config.leaf) {
        return;
      }var removed;
      if (pos.length === 1) {
        removed = config.value[pos[0]].value;
        config = config.value[pos[0] === "first" ? "second" : "first"];
      } else {
        config = cloneShallow(config);
        var last = pos.pop(),
            sec = pos.pop();
        var line = pos.reduce(function (cvalue, i) {
          return cvalue[i].value = cloneShallow(cvalue[i].value);
        }, config.value);
        removed = line[sec].value[last].value;
        line[sec] = line[sec].value[last === "first" ? "second" : "first"];
      }
      return { removed: removed, config: config };
    }
  },

  getDefaultProps: function getDefaultProps() {
    return {
      getNew: function getNew() {
        return r();
      }
    };
  },

  changeRatio: function changeRatio(pos, ratio, done) {
    var config = this.props.config;
    var line = pos.reduce(function (config, i) {
      return config[i].value = cloneShallow(config[i].value);
    }, config.value);
    line.ratio = ratio;
    this.props.onChange(config);
    done();
  },

  split: function split(pos, orient) {
    var config = SplitManager.split(pos, orient, this.props.config, this.props.getNew);
    this.props.onChange(config);
  },

  remove: function remove(pos) {
    var result = SplitManager.remove(pos, this.props.config);
    if (!result) {
      return;
    }this.props.onRemove(result.removed);
    this.props.onChange(result.config);
  },

  render: function render() {
    var cprops = cloneShallow(this.props.cprops);
    cprops.onSplit = this.split;
    cprops.onRemove = this.remove;
    cprops.onChangeRatio = this.changeRatio;
    return React.createElement(Splitter, {
      config: this.props.config,
      comp: this.props.comp,
      onChangeRatio: this.changeRatio,
      cprops: cprops });
  }
});

module.exports = SplitManager;

},{"./splitter":10,"react":"react"}],10:[function(require,module,exports){
"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require("react/addons"),
    cx = React.addons.classSet,
    PT = React.PropTypes;

var Splitter = React.createClass({
  displayName: "Splitter",

  propTypes: {
    onChangeRatio: PT.func,
    config: PT.object,
    pos: PT.object,
    comp: PT.element,
    cprops: PT.object },

  getInitialState: function getInitialState() {
    return { ratio: this.props.config.value.ratio || 0.5, moving: null };
  },
  getDefaultProps: function getDefaultProps() {
    return { pos: [] };
  },
  _onMouseDown: function _onMouseDown(e) {
    e.preventDefault();
    this.setState({ moving: true });
  },
  _mouseMove: function _mouseMove(e) {
    var full = this.getDOMNode().getBoundingClientRect(),
        span,
        perc;
    if (this.props.config.value.orient === "horiz") {
      span = full.right - full.left;
      perc = (e.clientX - full.left) / span;
    } else {
      span = full.bottom - full.top;
      perc = (e.clientY - full.top) / span;
    }
    if (perc < 0 || perc > 1) {
      return;
    } // if you get within ten pixels, snap.
    var dist = 10 / span;
    if (Math.abs(perc - 0.33) < dist) perc = 0.33;
    if (Math.abs(perc - 0.67) < dist) perc = 0.67;
    if (Math.abs(perc - 0.5) < dist) perc = 0.5;

    this.setState({ ratio: perc });
  },
  _mouseUp: function _mouseUp() {
    var _this = this;

    this.props.onChangeRatio(this.props.pos, this.state.ratio, function () {
      return _this.setState({ moving: false });
    });
  },
  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
    var doc = this.getDOMNode().ownerDocument;
    if (prevState.moving && !this.state.moving) {
      doc.removeEventListener("mousemove", this._mouseMove);
      doc.removeEventListener("mouseup", this._mouseUp);
    } else if (this.state.moving && !prevState.moving) {
      doc.addEventListener("mousemove", this._mouseMove);
      doc.addEventListener("mouseup", this._mouseUp);
    }
  },

  render: function render() {
    var config = this.props.config,
        pos = this.props.pos || [],
        Comp = this.props.comp;
    var children;
    if (config.leaf) {
      children = React.createElement(
        "div",
        { className: "Splitter_only", style: { flex: 1 } },
        React.createElement(Comp, _extends({}, this.props.cprops, {
          key: config.value.config.store.view.id,
          pos: pos.concat(["first"]),
          value: config.value }))
      );
    } else {
      var ratio = this.state.moving ? this.state.ratio : config.value.ratio || 0.5;
      children = [React.createElement(
        "div",
        { className: "Splitter_first", style: { flex: ratio } },
        !config.value.first.leaf ? React.createElement(Splitter, _extends({}, this.props, {
          pos: pos.concat(["first"]),
          config: config.value.first })) : React.createElement(Comp, _extends({}, this.props.cprops, {
          key: config.value.first.value.config.store.view.id,
          pos: pos.concat(["first"]),
          value: config.value.first.value }))
      ), React.createElement("div", { className: "Splitter_div", onMouseDown: this._onMouseDown }), React.createElement(
        "div",
        { className: "Splitter_second", style: { flex: 1 - ratio } },
        !config.value.second.leaf ? React.createElement(Splitter, _extends({}, this.props, {
          pos: pos.concat(["second"]),
          config: config.value.second })) : React.createElement(Comp, _extends({}, this.props.cprops, {
          key: config.value.second.value.config.store.view.id,
          pos: pos.concat(["second"]),
          value: config.value.second.value }))
      )];
    }
    return React.createElement(
      "div",
      { className: cx({
          Splitter: true,
          "Splitter-moving": this.state.moving }) + " Splitter-" + config.value.orient },
      children
    );
  }
});

module.exports = Splitter;

},{"react/addons":"react/addons"}],11:[function(require,module,exports){
"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

var React = _interopRequire(require("react"));

module.exports = React.createClass({
  displayName: "type-switcher",

  propTypes: {
    types: React.PropTypes.object },

  getInitialState: function getInitialState() {
    return {
      open: false };
  },

  _toggleOpen: function _toggleOpen() {
    this.setState({ open: !this.state.open });
  },

  _onSelect: function _onSelect(key) {
    this.setState({ open: false });
    this.props.onChange(key);
  },

  render: function render() {
    var _this = this;

    var keys = Object.keys(this.props.types),
        current = this.props.type;
    return React.createElement(
      "div",
      { className: "TypeSwitcher" },
      React.createElement(
        "div",
        {
          onClick: this._toggleOpen,
          className: "TypeSwitcher_icon TypeSwitcher_icon-" + current },
        current
      ),
      this.state.open && React.createElement(
        "ul",
        { className: "TypeSwitcher_dropdown" },
        keys.map(function (key) {
          return key !== current && React.createElement(
            "li",
            { className: "TypeSwitcher_item TypeSwitcher_item-" + key,
              onClick: _this._onSelect.bind(null, key),
              key: key },
            key
          );
        })
      )
    );
  }
});

},{"react":"react"}],12:[function(require,module,exports){
"use strict";

module.exports = findNextActiveId;

function findNextActiveId(windows, currentActiveView, direction) {
  var boxes = windowBoxes(windows, { x: 0, y: 0, w: 1000, h: 1000 });
  var boxMap = {};boxes.forEach(function (box) {
    return boxMap[box.id] = box.box;
  });
  return go(direction, currentActiveView, boxMap);
}

function windowBoxes(windows, container) {
  if (windows.leaf) {
    return [{ box: container, id: windows.value.config.store.view.id }];
  }
  var split = splitBox(container, windows.value.orient, windows.value.ratio || 0.5);
  return windowBoxes(windows.value.first, split.first).concat(windowBoxes(windows.value.second, split.second));
}

function splitBox(box, orient, ratio) {
  var w = box.w,
      h = box.h;
  if (orient === "horiz") {
    return {
      first: {
        x: box.x,
        y: box.y,
        w: w * ratio,
        h: box.h },
      second: {
        x: box.x + w * ratio,
        y: box.y,
        w: w * (1 - ratio),
        h: box.h }
    };
  } else {
    return {
      first: {
        x: box.x,
        y: box.y,
        h: h * ratio,
        w: box.w },
      second: {
        y: box.y + h * ratio,
        x: box.x,
        h: h * (1 - ratio),
        w: box.w }
    };
  }
}

function go(dir, id, boxMap) {
  var x0 = dir === "up" || dir === "down" ? "y" : "x",
      x1 = x0 === "x" ? "y" : "x",
      d0 = ({ x: "w", y: "h" })[x0],
      d1 = ({ x: "w", y: "h" })[x1],
      dr = dir === "down" || dir === "right";

  var box = boxMap[id],
      pos = {};

  pos[x0] = box[x0] + (dr ? box[d0] : 0);
  pos[x1] = box[x1] + box[d1] / 2;

  for (var oid in boxMap) {
    if (oid == id) continue;
    var obox = boxMap[oid];
    if (pos[x0] === obox[x0] + (dr ? 0 : obox[d0]) && obox[x1] < pos[x1] && pos[x1] <= obox[x1] + obox[d1]) {
      return +oid;
    }
  }
  return false;
}

},{}],13:[function(require,module,exports){
"use strict";

/**
 * Automatically register and deregister keys for a component.
 */

/**
 * Example usage
 *
 *  var MyComponent = React.createClass({
 *      mixins: [KeysMixin],
 *
 *      statics: {
 *          keys: function () { // this is the component
 *              return {
 *                  'k': this.hireKoala,
 *                  'q': this.onQuit,
 *              }
 *          },
 *      },
 *  })
 */

module.exports = {
  _registerKeys: function _registerKeys(keys, config) {
    if (!arguments.length) keys = this.props.keys;
    if (!config && this.constructor.keys) {
      config = this.constructor.keys.call(this);
    }
    if (!keys || !config) {
      return;
    }
    this._keys_id = keys.add(config);
  },

  _unregisterKeys: function _unregisterKeys(kid) {
    if (!this.props.keys || !kid) {
      return;
    }
    this.props.keys.remove(kid);
  },

  componentDidMount: function componentDidMount() {
    this._registerKeys();
  },
  componentWillUnmount: function componentWillUnmount() {
    this._unregisterKeys(this._keys_id);
    delete this._keys_id;
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.keys !== this.props.keys) {
      this._unregisterKeys(this._keys_id);
      delete this._keys_id;
      this._registerKeys(nextProps.keys);
    }
  }
};

},{}],14:[function(require,module,exports){
"use strict";

var React = require("react"),
    PT = React.PropTypes;

var Modal = React.createClass({
  displayName: "Modal",

  propTypes: {
    title: PT.string.isRequired,
    onClose: PT.func.isRequired,
    initialState: PT.object,
    buttons: PT.object,
    render: PT.func },
  getInitialState: function getInitialState() {
    return this.props.initialState;
  },
  onClose: function onClose() {
    this.props.onClose(null, this.state);
  },
  onCancel: function onCancel() {
    this.props.onClose(new Error("Modal cancelled"));
  },

  set: function set(name, value) {
    var up = {};
    up[name] = value;
    this.setState(up);
  },
  setEvt: function setEvt(name, e) {
    var up = {};
    up[name] = e.target.value;
    this.setState(up);
  },

  _onChangeEvt: function _onChangeEvt(name, e) {
    var up = {};
    up[name] = e.target.value;
    this.setState(up);
  },
  _onChange: function _onChange(name, value) {
    var up = {};
    up[name] = value;
    this.setState(up);
  },

  render: function render() {
    var _this = this;

    var style = undefined;
    if (this.props.width) {
      style = {
        width: this.props.width + "px",
        marginLeft: -this.props.width / 2 + "px"
      };
    }
    var set = function (name, evt) {
      if (evt) {
        return _this.setEvt.bind(null, name);
      }
      if ("string" === typeof name) {
        return _this.set.bind(null, name);
      }
      _this.setState(name);
    };
    return React.createElement(
      "div",
      { className: "Modal-container" },
      React.createElement("div", { className: "Modal_back", onClick: this.onCancel }),
      React.createElement(
        "div",
        { className: "Modal_popup", style: style },
        React.createElement(
          "div",
          { className: "Modal_title" },
          this.props.title
        ),
        React.createElement(
          "div",
          { className: "Modal_close", onClick: this.props.onClose },
          "×"
        ),
        React.createElement(
          "div",
          { className: "Modal_body" },
          this.props.renderBody.call(this, this.state, set, this.onClose, this.onCancel)
        ),
        this.props.buttons ? React.createElement(
          "div",
          { className: "Modal_buttons" },
          Object.keys(this.props.buttons).map(function (name) {
            return React.createElement(
              "button",
              { onClick: _this.props.buttons[name].bind(_this) },
              name
            );
          })
        ) : null
      )
    );
  }
});

Modal.show = function (config) {
  var parent = config.parent || document,
      node = document.createElement("div");
  parent.body.appendChild(node);

  var onClose = function onClose(err) {
    node.parentNode.removeChild(node);
    config.done.apply(null, arguments);
  };

  React.render(React.createElement(Modal, {
    initialState: config.initialState || {},
    title: config.title || "Modal",
    onClose: onClose,
    width: config.width,
    buttons: config.buttons,
    renderBody: config.renderBody || config.body }), node);
};

module.exports = Modal;

},{"react":"react"}],15:[function(require,module,exports){
"use strict";

module.exports = uuid;

var CHARS = "0123456789abcdefghijklmnopqrstuvwxyz";
function uuid(ln) {
  ln = ln || 32;
  var id = "";
  for (var i = 0; i < ln; i++) {
    id += CHARS[parseInt(Math.random() * CHARS.length)];
  }
  return id;
}

},{}],16:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;

function drainQueue() {
    if (draining) {
        return;
    }
    draining = true;
    var currentQueue;
    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        var i = -1;
        while (++i < len) {
            currentQueue[i]();
        }
        len = queue.length;
    }
    draining = false;
}
process.nextTick = function (fun) {
    queue.push(fun);
    if (!draining) {
        setTimeout(drainQueue, 0);
    }
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],17:[function(require,module,exports){
function classNames() {
	var classes = '';
	var arg;

	for (var i = 0; i < arguments.length; i++) {
		arg = arguments[i];
		if (!arg) {
			continue;
		}

		if ('string' === typeof arg || 'number' === typeof arg) {
			classes += ' ' + arg;
		} else if (Object.prototype.toString.call(arg) === '[object Array]') {
			classes += ' ' + classNames.apply(null, arg);
		} else if ('object' === typeof arg) {
			for (var key in arg) {
				if (!arg.hasOwnProperty(key) || !arg[key]) {
					continue;
				}
				classes += ' ' + key;
			}
		}
	}
	return classes.substr(1);
}

// safely export classNames in case the script is included directly on a page
if (typeof module !== 'undefined' && module.exports) {
	module.exports = classNames;
}

},{}],18:[function(require,module,exports){
"use strict";

var React = require("react"),
    uuid = require("../lib/uuid"),
    _objs = {};

module.exports = {
  mime: "js/dom",

  format: function format(obj, window) {
    if (obj instanceof window.HTMLElement) {
      var id = uuid();
      _objs[id] = obj;
      return id;
    }
  },

  display: function display(id) {
    if (!_objs[id]) {
      return React.createElement(
        "em",
        null,
        "Re-evaluate this block to see the DOM element"
      );
    }return React.createElement(DomViewer, { value: _objs[id] });
  } };

function clean(node) {
  while (node.lastChild) node.removeChild(node.lastChild);
}

var DomViewer = React.createClass({
  displayName: "DomViewer",

  componentDidMount: function componentDidMount() {
    this.inject();
  },
  componentDidUpdate: function componentDidUpdate(prevProps) {
    this.inject();
  },
  inject: function inject() {
    var node = this.getDOMNode();
    clean(node);
    //if (this.props.value.parentNode) {
    //node.innerHTML = '<em>DOM Node already used elsewhere</em>'
    //} else {
    node.appendChild(this.props.value);
  },
  render: function render() {
    return React.createElement("div", null);
  } });
//}

},{"../lib/uuid":56,"react":"react"}],19:[function(require,module,exports){
"use strict";

module.exports = getAllProperties;

function getAllProperties(obj) {
  var allProps = [],
      curr = obj;

  if (Array.isArray(obj)) {
    for (var i = 0; i < obj.length; i++) {
      allProps.push(i);
    }
    allProps.push("length");
    return allProps;
  }

  do {
    var props = Object.getOwnPropertyNames(curr);
    props.forEach(function (prop) {
      if (allProps.indexOf(prop) === -1) allProps.push(prop);
    });
  } while ((curr = Object.getPrototypeOf(curr)) && Object.getPrototypeOf(curr));

  return allProps;
}

},{}],20:[function(require,module,exports){
"use strict";

module.exports = makeGorilla;

function makeGorilla(data, nextid) {
  var rich = {};
  nextid = nextid || 0;
  if (data.type === "vega") {
    var id = nextid++;
    rich[id] = data;
    return ["<span class=\"rich-" + id + "\"></span>", nextid, rich];
  }
  if (data.type === "html") {
    return [data.content, nextid, {}];
  }
  if (data.type !== "list-like") {
    return [escape(data.value), nextid, {}];
  }

  var items = data.items.map(function (item) {
    var data = makeGorilla(item, nextid);
    nextid = data[1];
    for (var id in data[2]) {
      rich[id] = data[2][id];
    }
    return data[0];
  });
  var html = data.open + items.join(data.separator) + data.close;
  return [html, nextid, rich];
}

},{}],21:[function(require,module,exports){
"use strict";

var getAllProperties = require("./get-all-properties");

module.exports = isComplex;

function isComplex(value, path) {
  if (path.indexOf(value) !== -1) {
    return true;
  }var npath = path.concat([value]);
  if (Array.isArray(value)) {
    return value.some(function (sub) {
      return isComplex(sub, npath);
    });
  }

  if ("function" === typeof value) {
    return false;
  }if ("object" === typeof value && value) {
    if (null !== Object.getPrototypeOf(value) && "object" === typeof Object.getPrototypeOf(value) && Object.getPrototypeOf(Object.getPrototypeOf(value))) {
      return true;
    }
    return getAllProperties(value).some(function (key) {
      return isComplex(value[key], npath);
    });
  }

  return false;
}

},{"./get-all-properties":19}],22:[function(require,module,exports){
"use strict";

var React = require("react"),
    isComplex = require("./is-complex"),
    getAllProperties = require("./get-all-properties"),
    uuid = require("../lib/uuid");

var _objs = {};

module.exports = {
  mime: "js/obj",

  format: function format(obj) {
    if (isComplex(obj, [], window)) {
      var id = uuid();
      _objs[id] = obj;
      return id;
    }
  },

  display: function display(id) {
    if (!_objs[id]) {
      return false;
    }return React.createElement(ObjViewer, { value: _objs[id] });
  } };

function viewValue(value) {
  if (value && "object" === typeof value) {
    return ObjViewer({ value: value });
  }try {
    return JSON.stringify(value, null, 2) || value + "";
  } catch (e) {}
  try {
    return value + "";
  } catch (e) {}
  return "Undisplayable";
}

function objName(val) {
  return Array.isArray(val) ? "Array" : val.constructor ? val.constructor.name : "Object";
}

var ObjViewer = React.createClass({
  displayName: "ObjViewer",

  getInitialState: function getInitialState() {
    return {
      open: false
    };
  },
  _onToggle: function _onToggle() {
    this.setState({ open: !this.state.open });
  },
  render: function render() {
    var val = this.props.value;
    return React.createElement(
      "div",
      { className: "ObjViewer" },
      React.createElement(
        "div",
        { className: "ObjViewer_head", onClick: this._onToggle },
        React.createElement(
          "span",
          { className: "ObjViewer_name" },
          objName(val)
        ),
        !this.state.open && summary(val)
      ),
      this.state.open && React.createElement(
        "table",
        { className: "ObjViewer_props" },
        React.createElement(
          "tbody",
          null,
          getAllProperties(val).sort().map(function (name) {
            return React.createElement(
              "tr",
              { className: "ObjViewer_prop" },
              React.createElement(
                "td",
                { className: "ObjViewer_attr" },
                name
              ),
              React.createElement(
                "td",
                { className: "ObjViewer_val" },
                viewValue(val[name])
              )
            );
          })
        )
      )
    );
  } });

function summary(obj) {
  var names = Object.getOwnPropertyNames(obj);
  return React.createElement(
    "span",
    { className: "ObjViewer_smallprops" },
    " { ",
    names.slice(0, 5).map(function (name) {
      return name + ": " + small(obj[name]);
    }).join(", "),
    names.length > 5 && "...",
    " }"
  );
}

function small(val) {
  if ("number" === typeof val) {
    return "" + val;
  }if ("function" === typeof val) {
    return (val.name || "fn") + "(){...}";
  }if (Array.isArray(val)) {
    var text = val.map(function (e) {
      return e + "";
    }).join(", ");
    if (text.length < 20) {
      return "[" + text + "]";
    }return "[..]";
  }
  if (!val) {
    return val + "";
  }if ("string" === typeof val) {
    return JSON.stringify(val.slice(0, 20) + (val.length > 20 ? "..." : ""));
  }
  if ("object" === typeof val && val.constructor) {
    return val.constructor.name;
  }
  return "unknown type";
}

},{"../lib/uuid":56,"./get-all-properties":19,"./is-complex":21,"react":"react"}],23:[function(require,module,exports){
"use strict";

var React = require("react");
var katex = require("katex");

var LatexViewer = React.createClass({
  displayName: "LatexViewer",

  getInitialState: function getInitialState() {
    return { error: null };
  },
  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
    return nextProps.data !== this.props.data || nextState.error !== this.state.error;
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.data !== this.props.date) {
      this.setState({ error: false });
    }
  },
  componentDidMount: function componentDidMount() {
    this._renderKatex();
  },
  componentDidUpdate: function componentDidUpdate() {
    this._renderKatex();
  },
  _renderKatex: function _renderKatex() {
    try {
      katex.render(this.props.data, this.getDOMNode());
    } catch (e) {
      this.setState({ error: e });
    }
  },
  render: function render() {
    if (this.state.error) {
      return React.createElement(
        "div",
        { className: "m_IPython_output m_IPython_output_latex" },
        "Error while rendering latex."
      );
    }
    return React.createElement("div", { className: "m_IPython_output m_IPython_output_latex" });
  }
});

module.exports = {
  mime: "text/latex",

  display: function display(value, store) {
    return React.createElement(LatexViewer, { data: value });
  }
};

},{"katex":58,"react":"react"}],24:[function(require,module,exports){
"use strict";

var React = require("react"),
    makeGorilla = require("./gorilla");

module.exports = {
  mime: "json/list-like",

  display: function display(value, meta) {
    return React.createElement(ListLikeViewer, { data: value });
  } };

var ListLikeViewer = React.createClass({
  displayName: "ListLikeViewer",

  componentDidMount: function componentDidMount() {
    this.doThings(this.props.data);
  },
  doThings: function doThings(data) {
    var parts = makeGorilla(data, 0);
    var node = this.getDOMNode();
    node.innerHTML = parts[0];
    var rich = parts[2];
    for (var id in rich) {
      var dest = node.getElementsByClassName("rich-" + id)[0];
      var renderer = ({
        vega: renderVega
      })[rich[id].type];
      if (!renderer) {
        console.warn("skipping the render of", rich[id].type, rich[id]);
        continue;
      }
      renderer(rich[id].content, dest);
    }
  },
  render: function render() {
    return React.createElement("div", { className: "m_IPython_output_list-like" });
  }
});

function renderVega(data, node) {
  vg.parse.spec(data, function (chart) {
    chart({
      el: node,
      renderer: "svg" }).update();
  });
}

},{"./gorilla":20,"react":"react"}],25:[function(require,module,exports){
"use strict";

var React = require("react");

var LiveButton = React.createClass({
  displayName: "LiveButton",

  _onClick: function _onClick(e) {
    e.preventDefault();
    this.props.store.globals.kernel.sendLive(this.props.live_id, true);
  },
  render: function render() {
    return React.createElement(
      "button",
      { onClick: this._onClick },
      this.props.label
    );
  } });

module.exports = {
  mime: "live/button",

  display: function display(value, store, meta) {
    return LiveButton({ label: value.label, store: store, live_id: meta && meta.live_id });
  } };

},{"react":"react"}],26:[function(require,module,exports){
"use strict";

var React = require("react"),
    PT = React.PropTypes,
    format = require("../lib/plugin/format");

var LiveWatcher = React.createClass({
  displayName: "LiveWatcher",

  propTypes: {
    id: PT.string },

  /*
  componentDidMount: function () {
    var k = window.store._globals.kernel
    k.on(this.props.id + ':live_update', this.update)
  },
  componentWillUnmount: function () {
    var k = window.store._globals.kernel
    k.off(this.props.id + ':live_update', this.update)
  },
   componentWillReceiveProps: function (nextProps) {
    var k = window.store._globals.kernel
    k.off(this.props.id + ':live_update', this.update)
    k.on(nextProps.id + ':live_update', this.update)
    this.setState({value: nextProps.value})
  },
   getInitialState: function () {
    return {
      value: this.props.value
    }
  },
   update: function (message) {
    this.setState({value: message.content})
  },
  */

  render: function render() {
    return React.createElement(
      "div",
      { className: "LiveWatcher" },
      format.display(null, this.props.value, this.props.store, { live_id: this.props.id })
    );
  } });

module.exports = {
  mime: "json/live",

  display: function display(value, store) {
    var id = value.id;
    return LiveWatcher({ id: value.id, store: store, value: value.value });
  } };

},{"../lib/plugin/format":44,"react":"react"}],27:[function(require,module,exports){
"use strict";

var React = require("react"),
    uuid = require("../lib/uuid"),
    _cache = {};

module.exports = {
  mime: "js/react",

  display: function display(value, meta) {
    if (_cache[value]) {
      return React.createElement(Sandbox, { comp: _cache[value] });
    }
    return React.createElement(
      "em",
      null,
      "Evaluate to see React Component"
    );
  },

  format: function format(value) {
    if (React.isValidComponent(value)) {
      var id = uuid();
      _cache[id] = value;
      return id;
    }
  } };

var Sandbox = React.createClass({
  displayName: "Sandbox",

  getInitialState: function getInitialState() {
    return { error: null };
  },
  componentDidMount: function componentDidMount() {
    this._renderSandbox();
  },
  componentDidUpdate: function componentDidUpdate(prevProps) {
    if (prevProps.comp === this.props.comp) {
      return;
    }this._renderSandbox();
  },
  _renderSandbox: function _renderSandbox() {
    try {
      React.render(this.props.comp, this.refs.sandbox.getDOMNode());
    } catch (e) {
      return this.setState({ error: "Failed to render component: " + e.message + "\n" + e.stack });
    }
    this.setState({ error: null });
  },
  render: function render() {
    return React.createElement(
      "div",
      { className: "sandbox" },
      React.createElement("div", { ref: "sandbox" }),
      this.state.error && React.createElement(
        "div",
        { className: "sandbox_error" },
        this.state.error
      )
    );
  }
});

},{"../lib/uuid":56,"react":"react"}],28:[function(require,module,exports){
"use strict";

var React = require("react"),
    format = require("../lib/plugin/format");

module.exports = {
  mime: "json/table",
  display: function display(value, store) {
    if (!value.rows) {
      value = { header: null, rows: value };
    }
    return React.createElement(TableViewer, { data: value, store: store });
  }
};

function show(value, store) {
  return format.display(null, value, store);
}

var TableViewer = React.createClass({
  displayName: "TableViewer",

  componentDidMount: function componentDidMount() {},
  render: function render() {
    var data = this.props.data,
        store = this.props.store,
        header = data.header,
        rows = data.rows;
    return React.createElement(
      "table",
      null,
      header && React.createElement(
        "thead",
        null,
        React.createElement(
          "tr",
          null,
          header.map(function (item) {
            return React.createElement(
              "th",
              null,
              show(item, store)
            );
          })
        )
      ),
      React.createElement(
        "tbody",
        null,
        rows.map(function (row) {
          return React.createElement(
            "tr",
            null,
            row.map(function (item) {
              return React.createElement(
                "td",
                null,
                show(item, store)
              );
            })
          );
        })
      )
    );
  }
});

},{"../lib/plugin/format":44,"react":"react"}],29:[function(require,module,exports){
"use strict";

var React = require("react");

module.exports = {
  mime: "json/vega",

  display: function display(value, meta) {
    return React.createElement(VegaViewer, { data: value });
  },

  format: function format(value) {}
};

var VegaViewer = React.createClass({
  displayName: "VegaViewer",

  componentDidMount: function componentDidMount() {
    this._vegaRender();
  },

  componentDidUpdate: function componentDidUpdate() {
    this._vegaRender();
  },

  _vegaRender: function _vegaRender() {
    var node = this.getDOMNode();
    vg.parse.spec(this.props.data, function (chart) {
      chart({
        el: node,
        renderer: "svg" }).update();
    });
  },

  render: function render() {
    return React.createElement("div", { className: "m_IPython_output m_IPython_output-vega" });
  }
});

// TODO something here?

},{"react":"react"}],30:[function(require,module,exports){
"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

var plugin = _interopRequire(require("./lib/plugin"));

module.exports = plugin;

},{"./lib/plugin":45}],31:[function(require,module,exports){
"use strict";

module.exports = extend;

function extend(dest) {
  for (var i = 1; i < arguments.length; i++) {
    for (var name in arguments[i]) {
      dest[name] = arguments[i][name];
    }
  }
  return dest;
}

},{}],32:[function(require,module,exports){
"use strict";

module.exports = {
  post: send.bind(null, "POST"),
  patch: send.bind(null, "PATCH"),
  get: function get(url, headers, done) {
    if (arguments.length === 2) {
      done = headers;
      headers = {};
    }
    send("GET", url, headers, null, done);
  } };

function send(method, url, headers, data, done) {
  var x = new XMLHttpRequest();
  x.open(method, url);
  for (var name in headers) {
    x.setRequestHeader(name, headers[name]);
  }
  x.onreadystatechange = function () {
    if (this.readyState !== 4) return;
    var data,
        mime = this.getResponseHeader("content-type");
    if (mime && (mime.indexOf("json") !== -1 || mime.indexOf("notablemind") !== -1)) {
      try {
        data = JSON.parse(this.responseText);
      } catch (e) {
        return done(new Error("Unexpected server response"));
      }
    } else {
      data = this.responseText;
    }
    done(null, data);
  };
  x.onerror = function () {
    done(new Error("Failed to connect"));
  };
  x.onabort = function () {
    done(new Error("Connection cancelled"));
  };
  if (data) {
    x.send(typeof data === "string" ? data : JSON.stringify(data));
  } else {
    x.send();
  }
}

},{}],33:[function(require,module,exports){
"use strict";

var // esprima = require('esprima')
// , escodegen = require('escodegen')
jsx = require("./jsx")

// , uniquity = require('./uniquity')
,
    makeOutput = require("./make-output");

module.exports = execute;

function outError(e) {
  return {
    type: "error",
    name: e.name,
    message: e.message,
    traceback: e.stack
  };
}

function goAndDo(content, window, callbacks, local) {
  window._wwEval(local ? window.lworker : window.worker, callbacks.output, content, function (result) {
    callbacks.output(makeOutput(result, window));
    callbacks.end();
  }, function () {
    callbacks.end();
  });
}

function injectCSS(content, window) {
  var div = document.createElement("div");
  div.innerHTML = "<style>" + content + "</style>";
  div.firstChild.className = "injected-magic";
  window.document.head.appendChild(div.firstChild);
}

function execute(content, window, callbacks) {
  var num = window._ih.length;
  window._ih.push(content);
  callbacks.start();

  var firstLine = content.split("\n", 1)[0];
  if (firstLine.slice(0, 2) === "%%") {
    var magic = firstLine.slice(2).trim().toLowerCase();
    if (magic === "work" || magic === "ww") {
      return goAndDo(content.slice(firstLine.length + 1), window, callbacks);
    } else if (magic === "lwork" || magic === "lww") {
      return goAndDo(content.slice(firstLine.length + 1), window, callbacks, true);
    } else if (magic === "jsx") {
      // pass, ignore
      content = content.slice(firstLine.length + 1);
    } else if (magic === "css") {
      window.addInjectCSS(content.slice(firstLine.length + 1));
      // injectCSS(content.slice(firstLine.length + 1), window)
      callbacks.end();
      return;
    } else if (magic === "html") {
      callbacks.output(makeOutput(content.slice(firstLine.length + 1), window, "text/html"));
      callbacks.end();
      return;
    } else {
      callbacks.output({
        type: "error",
        name: "SyntaxError",
        message: "Invalid magic: " + magic,
        traceback: "Invalid magic: " + magic });
      callbacks.end();
      return;
    }
  }

  try {
    content = jsx(content);
  } catch (e) {
    callbacks.output(outError(e));
    callbacks.end();
    return;
  }

  var body = content;

  /*
  try {
    var body = preprocess(content, window, callbacks, num)
  } catch (e) {
    callbacks.output(outError(e))
    callbacks.end()
    return
  }
  */

  window._output = callbacks.output.bind(callbacks);
  window.display = function (what, mime) {
    return callbacks.output(makeOutput(what, window, mime));
  }, window.console = {
    log: function log() {
      callbacks.output({
        type: "output",
        suppressable: false,
        "json/log": [].map.call(arguments, function (arg) {
          return makeOutput(arg, window);
        }) });
    }
  };

  try {
    var res = window.eval(body);
  } catch (e) {
    callbacks.output(outError(e));
    callbacks.end();
    return;
  }

  // update the magic vars
  if (undefined !== res) {
    window._oh[num] = res;
    window.___ = window.__;
    window.__ = window._;
    window._ = res;
    callbacks.output(makeOutput(res, window));
  }

  callbacks.end();
}

/*
function inject(tree, window, suffix, injecting) {
  var replace = {}
  for (var name in injecting) {
    replace[name] = name + suffix
  }
  var needed = uniquity(tree, replace)
  needed.forEach(name => {
    window[replace[name]] = injecting[name]
  })
}

function preprocess(content, window, callbacks, num) {
  var tree = esprima.parse(content)

  inject(tree, window, '$' + num, {
    lwork: window._work.bind(null, window.lworker, callbacks.output),
    lwwEval: window._wwEval.bind(null, window.lworker, callbacks.output),

    work: window._work.bind(null, window.worker, callbacks.output),
    wwEval: window._wwEval.bind(null, window.worker, callbacks.output),

    loadJS: window._loadJS.bind(null, window, callbacks.output),
    loadParentJS: window._loadJS.bind(null, window.parent, callbacks.output),
    loadCSS: window._loadCSS.bind(null, window, callbacks.output),
    loadParentCSS: window._loadCSS.bind(null, window.parent, callbacks.output),

    display$: (what, mime) => callbacks.output(makeOutput(what, window, mime)),
    console$: {
      log: function () {
        callbacks.output(makeOutput([].slice.call(arguments), window))
      }
    }
  })

  return escodegen.generate(tree)
}
*/

},{"./jsx":37,"./make-output":38}],34:[function(require,module,exports){
"use strict";

/**
 * Create iframes for sandboxedish execution contexts.
 */

var _frames = {},
    uuid = require("../../uuid");

module.exports = getFrame;

function getFrame(id) {
  if (!_frames[id]) {
    _frames[id] = newFrame();
  }
  return _frames[id];
}

function initWorker(window) {
  var worker = new window.Worker("/bootworker.js");
  worker._cbs = {};
  worker._i = 0;

  worker.onmessage = function (evt) {
    var message = evt.data,
        data = message.data;
    if (data.error) {
      worker._cbs[data.id].out({
        type: "error",
        name: data.error.name,
        message: data.error.message,
        traceback: data.error.stack });
      worker._cbs[data.id].onerr && worker._cbs[data.id].onerr();
      return;
    }
    if (message.name === "out") {
      worker._cbs[data.id].out({
        type: "output",
        "text/plain": JSON.stringify(data.display, null, 2)
      });
      return;
    }
    if (message.name === "go") {
      worker._cbs[data.id].fns[data.fn].apply(null, data.args);
    } else if (message.name === "eval") {
      worker._cbs[data.id].done.call(null, data.result);
    }
  };
  return worker;
}

function newFrame() {
  var frame = document.createElement("iframe");
  frame.className = "m_IPython_js_frame";
  frame.session = uuid();
  document.body.appendChild(frame);
  var w = frame.contentWindow;
  w._ih = [];
  w._oh = {};
  w.jsx = require("./jsx");
  w.esprima = require("jstransform/node_modules/esprima-fb");

  // live updating

  // from user -> frame
  w._liveLocal = {};
  w._sendLive = function (id, args) {
    if (!w._liveLocal[id]) return;
    w._liveLocal[id].forEach(function (fn) {
      return fn.apply(null, args);
    });
  };

  // from frame -> user
  w._liveCB = {};
  w.sendLive = function (lid, value) {
    if (!w._liveCB[lid]) return;
    w._liveCB[lid].forEach(function (fn) {
      return fn(value);
    });
  };

  w._loadCSS = function (window, output, filenames, done) {
    output = output || w._output;
    if (!Array.isArray(filenames)) {
      filenames = [filenames];
    }
    filenames.forEach(function (src) {
      var node = window.document.createElement("link");
      node.href = src;
      node.rel = "stylesheet";
      node.onload = function () {
        output({ "text/plain": "loaded css! " + src });
      };
      window.document.head.appendChild(node);
    });
  };

  w._loadJS = function (window, output, filenames, done) {
    output = output || w._output;
    if (!Array.isArray(filenames)) {
      filenames = [filenames];
    }
    filenames.forEach(function (src) {
      var node = window.document.createElement("script");
      node.src = src;
      node.onload = function () {
        output({ "text/plain": "loaded js! " + src });
      };
      window.document.head.appendChild(node);
    });
  };

  w._inject_css = "";
  w.addInjectCSS = function (text) {
    w._inject_css += "\n" + text;
    w._inject_listeners.forEach(function (fn) {
      return fn(w._inject_css);
    });
  };
  w.clearInjectCSS = function () {
    w._inject_css = "";
    w._inject_listeners.forEach(function (fn) {
      return fn(w._inject_css);
    });
  };
  w._inject_listeners = [];
  w.addInjectListener = function (fn) {
    if (w._inject_listeners.indexOf(fn) !== -1) return;
    w._inject_listeners.push(fn);
  };
  w.removeInjectListener = function (fn) {
    if (w._inject_listeners) {
      var ix = w._inject_listeners.indexOf(fn);
      if (ix === -1) return false;
      w._inject_listeners.splice(ix, 1);
    }
  };

  w.Isolate = require("./isolate");
  w.Stater = require("./stater");
  w.React = require("react");
  w.ajax = require("./ajax");

  w.showFrame = function () {
    frame.classList.add("show");
  };
  w.hideFrame = function () {
    frame.classList.remove("show");
  };

  if (window.Worker && window.location.protocol !== "file:") {
    // Async things
    w.worker = initWorker(window);
    w.lworker = initWorker(w);
    w.restartLWorker = function () {
      if (w.lworker) w.lworker.terminate();
      w.lworker = initWorker(w);
    };
    w.restartWorker = function () {
      if (w.worker) w.worker.terminate();
      w.worker = initWorker(window);
    };

    w._work = function (worker, output, fn) {
      output = output || w._output;
      if ("function" !== typeof fn) {
        var e = new Error("work takes a function");
        return output({
          type: "error",
          name: "ValueError",
          message: e.message,
          traceback: e.stack
        });
      }

      return function () {
        var args = [].slice.call(arguments);
        var fns = {};
        for (var i = 0; i < args.length; i++) {
          if ("function" === typeof args[i]) {
            fns[i] = args[i];
            args[i] = null;
          }
        }
        var id = worker._i++;
        worker._cbs[id] = {
          fns: fns,
          out: output
        };
        worker.postMessage({
          name: "go",
          data: {
            id: id,
            fns: Object.keys(fns),
            args: args,
            what: fn + ""
          }
        });
      };
    };

    w._wwEval = function (worker, output, what, done, onerr) {
      var id = worker._i++;
      worker._cbs[id] = {
        done: done,
        onerr: onerr,
        out: output || w._output
      };
      worker.postMessage({
        name: "eval",
        data: {
          id: id,
          text: what + ""
        }
      });
    };
  } else {
    w._work = function () {
      throw new Error("Webworkers not supported in this browser");
    };
    w._wwEval = function () {
      throw new Error("Webworkers not supported in this browser");
    };
  }

  w.work = w._work.bind(null, w.worker, null);
  w.lwork = w._work.bind(null, w.lworker, null);
  w.wwEval = w._wwEval.bind(null, w.worker, null);
  w.lwwEval = w._wwEval.bind(null, w.lworker, null);
  w.loadJS = w._loadJS.bind(null, w, null);
  w.loadCSS = w._loadCSS.bind(null, w, null);
  w.loadParentCSS = w._loadCSS.bind(null, window, null);

  return frame;
}

},{"../../uuid":56,"./ajax":32,"./isolate":36,"./jsx":37,"./stater":40,"jstransform/node_modules/esprima-fb":57,"react":"react"}],35:[function(require,module,exports){
"use strict";

var getFrame = require("./get-frame"),
    exec = require("./exec"),
    extend = require("../../extend"),
    EventEmitter = require("eventemitter3"),
    CodeMirror = require("codemirror");

module.exports = JsKernel;

function JsKernel(docid) {
  this.frame = getFrame(docid);
  this.frame.style.display = "block";
  this.w = this.frame.contentWindow;
  this.session = this.frame.session;

  this.status = "done";
  this.type = "ijs";
}

JsKernel.prototype = extend(Object.create(EventEmitter.prototype), {
  init: function init(host, done) {
    done();
  },

  asyncComplete: false,

  cmComplete: function cmComplete(cm) {
    return CodeMirror.hint.javascript(cm, { globalScope: this.w, additionalContext: this.w });
  },

  teardown: function teardown() {
    this.frame.style.display = "none";
  },

  onLive: function onLive(lid, handler) {
    if (!this.w._liveCB[lid]) {
      this.w._liveCB[lid] = [handler];
    } else if (this.w._liveCB[lid].indexOf(handler) === -1) {
      this.w._liveCB[lid].push(handler);
    }
  },

  sendLive: function sendLive(lid) {
    this.w._sendLive(lid, [].slice.call(arguments, 1));
  },

  sendShell: function sendShell(content, callbacks) {
    exec(content, this.w, callbacks);
  } });

JsKernel.prototype.constructor = JsKernel;

},{"../../extend":31,"./exec":33,"./get-frame":34,"codemirror":"codemirror","eventemitter3":"eventemitter3"}],36:[function(require,module,exports){
"use strict";

var React = require("react"),
    PT = React.PropTypes;

var Isolate = React.createClass({
  displayName: "Isolate",

  propTypes: {
    children: PT.any.isRequired,

    autoSize: PT.bool,
    stylesheets: PT.oneOfType([PT.string, PT.array]),
    className: PT.string,
    style: PT.object },

  getDefaultProps: function getDefaultProps() {
    return {
      className: "Isolate" };
  },

  componentDidMount: function componentDidMount() {
    this.loadChild();
  },

  componentDidUpdate: function componentDidUpdate() {
    this.loadChild();
  },

  shouldComponentUpdate: function shouldComponentUpdate(nextProps) {
    return nextProps.children !== this.props.children;
  },

  loadChild: function loadChild() {
    var _this = this;

    var frame = this.getDOMNode();
    var doc = frame.contentDocument.body;
    if (this.props.stylesheets) {
      loadCSS(this.props.stylesheets, frame.contentDocument);
    }
    React.renderComponent(React.createElement("div", { children: this.props.children }), doc, function () {
      if (_this.props.autoSize) {
        frame.style.height = "auto";
        frame.style.width = "auto";
        frame.style.height = doc.scrollHeight + "px";
        frame.style.width = doc.scrollWidth + "px";
      }
    });
  },

  render: function render() {
    return React.createElement("iframe", { className: this.props.className, style: this.props.style });
  } });

function loadCSS(sheets, doc) {
  if ("string" === typeof sheets) {
    sheets = [sheets];
  }
  sheets.forEach(function (sheet) {
    var node = doc.createElement("link");
    node.rel = "stylesheet";
    node.href = sheet;
    doc.head.appendChild(node);
  });
}

module.exports = Isolate;

},{"react":"react"}],37:[function(require,module,exports){
"use strict";

var babel = require("babel");

module.exports = function (code) {
  return babel.transform(code).code.slice("\"use strict\";\n".length);
};

},{"babel":"babel"}],38:[function(require,module,exports){
"use strict";

var safeString = require("./safe-string"),
    React = require("react"),
    format = require("../../plugin/format");

module.exports = function (value, window, mime) {
  var out = format.format(value, window);
  if (mime) {
    out[mime] = value;
  }

  out.type = "output";
  out.suppressable = false;
  if (!out["text/plain"]) {
    out["text/plain"] = safeString(value);
  }

  return out;
};

},{"../../plugin/format":44,"./safe-string":39,"react":"react"}],39:[function(require,module,exports){
"use strict";

module.exports = function (res) {
  if ("undefined" === typeof res) return "undefined";
  if ("number" === typeof res && isNaN(res)) return "NaN";
  try {
    return JSON.stringify(res, null, 2) || res + "";
  } catch (e) {}
  try {
    return res + "";
  } catch (e) {}
  return "<cannot display object>";
};

},{}],40:[function(require,module,exports){
"use strict";

var React = require("react"),
    PT = React.PropTypes;

function stringify(value) {
  try {
    return JSON.stringify(value);
  } catch (e) {}
  try {
    return value + "";
  } catch (e) {} // security error
  return "Could not display value due to a security error";
}

var Stater = React.createClass({
  displayName: "Stater",

  propTypes: {
    attr: PT.string,
    cb: PT.string,
    initial: PT.any,
    extra: PT.object,
    comp: PT.component,
    show: PT.bool },
  getDefaultProps: function getDefaultProps() {
    return {
      attr: "value",
      cb: "onChange",
      initial: "",
      extra: {},
      show: false };
  },
  getInitialState: function getInitialState() {
    return { value: this.props.initial };
  },
  render: function render() {
    var _this = this;

    var C = this.props.comp,
        props = this.props.extra;
    props[this.props.attr] = this.state.value;
    props[this.props.cb] = function (value) {
      return _this.setState({ value: value });
    };
    var el = React.createElement(C, props, this.props.children);
    if (this.props.show) {
      return React.createElement(
        "div",
        null,
        el,
        React.createElement(
          "pre",
          null,
          stringify(this.state.value)
        )
      );
    }
    return el;
  }
});

module.exports = Stater;

},{"react":"react"}],41:[function(require,module,exports){
"use strict";

// Notifications!!
var html5notify = false;
if (window.Notification && window.Notification.requestPermission) {
  if (window.Notification.permission === "granted") {
    html5notify = true;
  }
  /* TODO ask this via the kernel config
  window.Notification.requestPermission(permission => {
    if (permission === 'granted') html5notify = true
  })
  */
}

function showDoneNotification(text, time) {
  var secs = time / 1000;
  var stime = parseInt(secs / 60) + ":" + secs % 60;
  var n = new window.Notification("Code finished after " + stime + "s", {
    body: text.slice(0, 100) });
  setTimeout(function () {
    return n.close();
  }, 10000);
}

module.exports = function (type, language) {
  return {
    toggleDisplayCollapse: function toggleDisplayCollapse(id) {
      if (!arguments.length) id = this.view.active;
      this.set(id, "display_collapsed", !this.db.nodes[id].display_collapsed);
    },

    toggleEditorCollapse: function toggleEditorCollapse(id) {
      if (!arguments.length) id = this.view.active;
      this.set(id, "editor_collapsed", !this.db.nodes[id].editor_collapsed);
    },

    executeDeep: function executeDeep(id) {
      var _this = this;

      if (!arguments.length && this.view.mode === "visual") {
        return this.executeManyDeep();
      }
      if (!arguments.length) id = this.view.active;
      var node = this.db.nodes[id];
      node.children.forEach(function (id) {
        _this.execute(id);
        _this.executeDeep(id);
      });
    },

    executeMany: function executeMany() {
      var _this = this;

      if (this.view.mode !== "visual") {
        return;
      }this.startTransaction();
      this.view.selection.forEach(function (id) {
        return _this.execute(id);
      });
      this.stopTransaction();
      this.setMode("normal");
    },

    executeManyDeep: function executeManyDeep() {
      if (this.view.mode !== "visual") {
        return;
      }this.startTransaction();
      this.view.selection.forEach(this.executeDeep.bind(this));
      this.stopTransaction();
      this.setMode("normal");
    },

    clearKernelError: function clearKernelError() {
      this.globals.kernelError = false;
      this.changed(this.events.kernelError());
    },

    executeAndAdd: function executeAndAdd(id) {
      this.execute(id);
      this.createAfter(id);
      this.edit();
    },

    execute: function execute(id, histIx) {
      var _this = this;

      if (!arguments.length && this.view.mode === "visual") {
        return this.executeMany();
      }
      if (!arguments.length) id = this.view.active;
      var node = this.db.nodes[id];
      if (node.type !== "ipython") {
        return;
      }if (!this.globals.kernel) {
        this.globals.kernelError = "kernel not configured";
        this.changed(this.events.kernelError());
        return console.warn("kernel not set");
      }
      if (!this.globals.kernel.session) {
        this.globals.kernelError = "kernel disconnected";
        this.changed("kernel-error");
        return console.warn("kernel not connected");
      }

      // track where to refocus
      var refocus;
      if (this.view.mode === "insert") {
        refocus = document.activeElement;
        document.activeElement.blur();
      }

      // TODO grab the ID from here
      if ("number" == typeof histIx) {
        this.update(id, {
          waiting: true }, histIx);
      } else {
        histIx = this.update(id, {
          waiting: true });
      }

      var content = node.content;
      var cleared = false;
      this.globals.kernel.sendShell(content, {
        start: function () {
          _this.update(id, {
            started: Date.now(),
            session: _this.globals.kernel.session,
            executed: content,
            finished: null,
            waiting: false,
            display_collapsed: false }, histIx);
        },
        output: function (output) {
          var orig = _this.db.nodes[id].outputs;
          if (!cleared || !orig) {
            orig = [];
            cleared = true;
          }
          var outputs = orig.concat([output]);
          _this.set(id, "outputs", outputs, histIx); // , true /* squash commit */)

          if (output["json/live"]) {
            var lid = output["json/live"].id;

            _this.globals.kernel.onLive(lid, function (value) {
              var outputs = _this.db.nodes[id].outputs;
              for (var i = 0; i < outputs.length; i++) {
                if (outputs[i]["json/live"] && outputs[i]["json/live"].id === lid) {
                  outputs[i]["json/live"].value = value;
                }
              }
              _this.set(id, "outputs", outputs, histIx);
            });
          }
        },
        end: function () {
          var finished = Date.now(),
              time = finished - _this.db.nodes[id].started;
          if (html5notify && document.hidden) {
            showDoneNotification(content, time);
          }
          var updater = {
            finished: finished,
            waiting: false };
          if (!cleared) {
            updater.outputs = [];
          }
          _this.update(id, updater, histIx);
        }
      });

      if (refocus) {
        refocus.focus();
        this.setMode("insert");
      }
      return histIx;
    } };
};

// outputs: [],
// , true /* squash commit */)

},{}],42:[function(require,module,exports){
"use strict";

var React = require("react/addons"),
    CodeMirror = require("codemirror"),
    cx = React.addons.classSet,
    PT = React.PropTypes;

require("codemirror/mode/javascript/javascript");
require("codemirror/mode/clojure/clojure");
require("codemirror/mode/python/python");
require("codemirror/mode/julia/julia");
require("codemirror/mode/rust/rust");
require("codemirror/mode/css/css");

require("codemirror/addon/fold/foldcode");
require("codemirror/addon/fold/foldgutter");
require("codemirror/addon/fold/brace-fold");
require("codemirror/addon/fold/xml-fold");
require("codemirror/addon/fold/comment-fold");

require("codemirror/addon/edit/closebrackets");
require("codemirror/addon/edit/matchbrackets");

require("codemirror/addon/hint/javascript-hint");
require("codemirror/addon/hint/show-hint");

var CodeEditor = React.createClass({
  displayName: "CodeEditor",

  propTypes: {
    node: PT.object,
    value: PT.string,
    blurred: PT.bool,
    onBlur: PT.func,
    onFocus: PT.func,
    onChange: PT.func,
    onFOcus: PT.func,
    onComplete: PT.func,
    goDown: PT.func,
    goUp: PT.func },

  isFocused: function isFocused() {
    return this._cm.hasFocus();
  },

  focus: function focus(at) {
    if (!this._cm.hasFocus()) {
      this._cm.focus();
      if (at === "end" || !at) {
        this._cm.setCursor(this._cm.lineCount(), 0);
      } else if (at !== "start") {
        console.warn("Selecting in the middle not supported");
        this._cm.setCursor(this._cm.lineCount(), 0);
      } else {
        this._cm.setCursor(0, 0);
      }
    }
  },

  _onKeyDown: function _onKeyDown(editor, e) {
    if (!this.isMounted()) {
      return;
    }if (this.props.blurred && this.props.onFocus) {
      this.props.onFocus();
    }
    if (editor.state.completionActive && e.keyCode !== 27) {
      e.stopPropagation();
      return;
    }
    if (e.keyCode === 9) {
      return e.stopPropagation();
    } // ctrl + return
    if (e.keyCode === 13 && e.ctrlKey) {
      var curs = editor.getCursor(),
          text = editor.getValue(),
          pos = text.split("\n").slice(0, curs.line).join("\n").length + curs.ch + 1;
      if (pos < text.length) {
        var pre = text.slice(0, pos),
            post = text.slice(pos);
        this.props.onChange(pre);
        editor.setValue(pre);
        this.props.createAfter(null, pre, post);
      } else {
        this.props.createAfter();
      }
      e.preventDefault();
      e.stopPropagation();
      return;
    }
    if (e.shiftKey || e.ctrlKey || e.altKey || e.metaKey) {
      return;
    }
    if (e.keyCode === 38) {
      // up
      // if (editor.getCursor().line === 0) {
      var curs = editor.getCursor();
      if (curs.line === 0 && curs.ch === 0) {
        return this.props.goUp();
      }
    } else if (e.keyCode === 37) {
      // left
      var curs = editor.getCursor();
      if (curs.line === 0 && curs.ch === 0) {
        return this.props.goUp();
      }
    } else if (e.keyCode === 40) {
      // down
      // if (editor.getCursor().line === editor.lineCount() - 1) {
      var curs = editor.getCursor();
      if (curs.line === editor.lineCount() - 1 && curs.ch === editor.getLine(curs.line).length) {
        return this.props.goDown();
      }
    } else if (e.keyCode === 39) {
      // right
      var curs = editor.getCursor();
      if (curs.line === editor.lineCount() - 1 && curs.ch === editor.getLine(curs.line).length) {
        return this.props.goDown(true);
      }
    }
  },

  componentDidMount: function componentDidMount() {
    var _this = this;

    var betterTab = (function (cm) {
      if (cm.somethingSelected()) {
        return cm.indentSelection("add");
      }
      // var onComplete = this.props.onComplete
      var cursor = cm.getCursor(),
          line = cm.getLine(cursor.line),
          pos = { line: cursor.line, ch: cursor.ch };
      if (cursor.ch > 0 && line[cursor.ch - 1] !== " ") {
        return cm.showHint({ hint: this.props.onComplete });
      }
      cm.replaceSelection(Array(cm.getOption("indentUnit") + 1).join(" "), "end", "+input");
    }).bind(this);

    function betterShiftTab(cm) {
      cm.execCommand("indentLess");
    }

    var minLengthForLinos = 10;

    var lang = this.props.language || this.props.node.language;
    this._cm = CodeMirror(this.getDOMNode(), {
      value: this.props.value,
      lineNumbers: this.props.value.split("\n").length > minLengthForLinos,
      matchBrackets: true,
      autoCloseBrackets: "()[]{}\"\"",
      indentUnit: 2,
      indentWithTabs: false,
      smartIndent: lang !== "javascript",
      tabSize: 2,
      lineWrapping: true,
      mode: lang,
      viewportMargin: Infinity,
      extraKeys: {
        Tab: betterTab,
        "Shift-Tab": betterShiftTab } });

    this._cm.on("keydown", this._onKeyDown);
    this._cm.on("change", function (editor) {
      if (!_this.isMounted()) return;
      var value = editor.getValue();
      if (_this.props.onChange) _this.props.onChange(value);
      if (value.split("\n").length > minLengthForLinos) {
        _this._cm.setOption("lineNumbers", true);
      } else {
        _this._cm.setOption("lineNumbers", false);
      }
    });
    this._cm.on("focus", function () {
      if (!_this.isMounted()) return;
      if (_this.props.onFocus && _this.props.blurred) _this.props.onFocus();
    });
    this._cm.on("blur", function () {
      if (!_this.isMounted()) return;
      if (_this.props.onBlur && !_this.props.blurred) {
        var value = _this._cm.getValue();
        if (_this.props.value !== value) {
          _this.props.onChange(value);
        }
        _this.props.onBlur();
      }
    });
    if (!this.props.blurred) {
      this._cm.focus();
    }
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (this._cm.getValue() !== nextProps.value && this.props.blurred) {
      this._cm.setValue(nextProps.value);
    }
  },

  render: function render() {
    return React.createElement(
      "div",
      { className: "ITreedCodeEditor" },
      React.createElement("div", { onClick: this.props.onExecute, className: "ITreedRunButton" })
    );
  }
});

module.exports = CodeEditor;

},{"codemirror":"codemirror","codemirror/addon/edit/closebrackets":"codemirror/addon/edit/closebrackets","codemirror/addon/edit/matchbrackets":"codemirror/addon/edit/matchbrackets","codemirror/addon/fold/brace-fold":"codemirror/addon/fold/brace-fold","codemirror/addon/fold/comment-fold":"codemirror/addon/fold/comment-fold","codemirror/addon/fold/foldcode":"codemirror/addon/fold/foldcode","codemirror/addon/fold/foldgutter":"codemirror/addon/fold/foldgutter","codemirror/addon/fold/xml-fold":"codemirror/addon/fold/xml-fold","codemirror/addon/hint/javascript-hint":"codemirror/addon/hint/javascript-hint","codemirror/addon/hint/show-hint":"codemirror/addon/hint/show-hint","codemirror/mode/clojure/clojure":"codemirror/mode/clojure/clojure","codemirror/mode/css/css":"codemirror/mode/css/css","codemirror/mode/javascript/javascript":"codemirror/mode/javascript/javascript","codemirror/mode/julia/julia":"codemirror/mode/julia/julia","codemirror/mode/python/python":"codemirror/mode/python/python","codemirror/mode/rust/rust":"codemirror/mode/rust/rust","react/addons":"react/addons"}],43:[function(require,module,exports){
"use strict";

var React = require("react"),
    PT = React.PropTypes,
    CodeMirror = require("codemirror");

function px(val) {
  if ("number" === typeof val) {
    return val + "px";
  }return val;
}

function reactStyle(node, style) {
  var nopx = "opacity,z-index,zIndex".split(",");
  for (var name in style) {
    if (nopx.indexOf(name) !== -1) {
      node.style[name] = style[name];
    } else {
      node.style[name] = px(style[name]);
    }
  }
}

var CodeMirrorRx = React.createClass({
  displayName: "CodeMirrorRx",

  propTypes: {
    onChange: PT.func,
    onFocus: PT.func },

  getDefaultProps: function getDefaultProps() {
    return {
      mode: "javascript" };
  },

  componentDidMount: function componentDidMount() {
    var _this = this;

    this._cm = new CodeMirror(this.getDOMNode(), this.props);
    this._cm.on("keydown", this.onKeyDown);
    this._cm.on("change", function (doc) {
      return _this.isMounted() && _this.props.onChange && _this.props.onChange(doc.getValue());
    });
    this._cm.on("focus", function () {
      if (!_this.isMounted()) return;
      if (_this.props.onFocus && _this.props.blurred) _this.props.onFocus();
    });
    this._cm.on("blur", function () {
      _this.isMounted() && _this.props.onBlur && _this.props.onBlur();
    });
    var node = this._cm.getWrapperElement();
    if (this.props.style) {
      reactStyle(node, this.props.style);
      this._cm.refresh();
    }
    setTimeout(function () {
      return _this._cm.refresh();
    }, 1000);
  },

  componentDidUpdate: function componentDidUpdate(prevProps) {
    var same = true;
    for (var name in this.props) {
      if (this.props[name] !== prevProps[name]) {
        if (name === "value" && this._cm.getValue() === this.props[name]) continue;
        this._cm.setOption(name, this.props[name] || "");
      }
    }
    var node = this._cm.getWrapperElement();
    if (this.props.style) {
      reactStyle(node, this.props.style);
      this._cm.refresh();
    }
  },

  onFocus: function onFocus() {
    if (this.props.blurred && this.props.onFocus) {
      this.props.onFocus();
    }
  },

  onKeyDown: function onKeyDown(editor, e) {
    if (!this.isMounted()) {
      return;
    }if (this.props.blurred && this.props.onFocus) {
      this.props.onFocus();
    }
    if (editor.state.completionActive && e.keyCode !== 27) {
      e.stopPropagation();
      return;
    }
    if (e.keyCode === 9) {
      return e.stopPropagation();
    }if (e.shiftKey || e.ctrlKey || e.altKey || e.metaKey) {
      return;
    }
    if (e.keyCode === 38) {
      // up
      // if (editor.getCursor().line === 0) {
      var curs = editor.getCursor();
      if (curs.line === 0 && curs.ch === 0) {
        return this.props.goUp && this.props.goUp();
      }
    } else if (e.keyCode === 37) {
      // left
      var curs = editor.getCursor();
      if (curs.line === 0 && curs.ch === 0) {
        return this.props.goUp && this.props.goUp();
      }
    } else if (e.keyCode === 40) {
      // down
      // if (editor.getCursor().line === editor.lineCount() - 1) {
      var curs = editor.getCursor();
      if (curs.line === editor.lineCount() - 1 && curs.ch === editor.getLine(curs.line).length) {
        return this.props.goDown && this.props.goDown();
      }
    } else if (e.keyCode === 39) {
      // right
      var curs = editor.getCursor();
      if (curs.line === editor.lineCount() - 1 && curs.ch === editor.getLine(curs.line).length) {
        return this.props.goDown && this.props.goDown(true);
      }
    }
  },

  focus: function focus() {
    this._cm.focus();
  },

  isFocused: function isFocused() {
    return this._cm.hasFocus();
  },

  render: function render() {
    return React.createElement("div", { className: "CodeMirrorRx" });
  }
});

module.exports = CodeMirrorRx;

},{"codemirror":"codemirror","react":"react"}],44:[function(require,module,exports){
"use strict";

var React = require("react"),
    safeString = require("../../kernels/js/safe-string"),
    Convert = require("ansi-to-html"),
    convert = new Convert();

var handlers = {
  default_mime: {
    "json/link": function (value) {
      return React.createElement(
        "a",
        { href: value.href || value, title: value.title, target: "_blank" },
        value.text || value
      );
    },
    "text/html": function (value) {
      return React.createElement("div", { className: "m_IPython_output_html",
        dangerouslySetInnerHTML: {
          __html: /*'DEPRECATE text/html;' + */value
        } });
    },
    "json/log": function (value, store) {
      return React.createElement(
        "ul",
        { className: "m_IPython_output_log", style: { padding: 0, margin: 0, "list-style": "none" } },
        value.map(function (item, i) {
          return React.createElement(
            "li",
            { style: { display: "inline-block", padding: "0 5px" } },
            display(i, item, store)
          );
        })
      );
    },
    "json/figure": function (value) {
      return React.createElement(
        "div",
        { style: { textAlign: "center", display: "inline-block" } },
        React.createElement("img", { src: value.src }),
        React.createElement(
          "div",
          { style: { textAlign: "center" } },
          value.title
        )
      );
    },
    "image/png": function (value, s, m, mdata) {
      return React.createElement("img", { className: "m_IPython_output_png",
        width: mdata && mdata.width,
        height: mdata && mdata.height,
        src: "data:image/png;base64," + value });
    },
    "image/jpeg": function (value, s, m, mdata) {
      return React.createElement("img", { className: "m_IPython_output_jpeg",
        width: mdata && mdata.width,
        height: mdata && mdata.height,
        src: "data:image/jpeg;base64," + value });
    },
    "text/ansi": function (value) {
      return React.createElement("div", { className: "m_IPython_output_ansi",
        dangerouslySetInnerHTML: {
          __html: convert.toHtml(escape(value))
        } });
    },
    "text/plain": function (value) {
      return React.createElement(
        "div",
        { className: "m_IPython_output_plain" },
        value
      );
    } },
  formatters: [],
  mime: {}
};

/*
function handleImage(fmt, value, store, meta, mdata) {
  let props = {
    src: value
  }
  if (mdata) {
    if (mdata.width) props.width = mdata.width
    if (mdata.height) props.height = mdata.height
  }
  let cls = 
}
*/

function escape(text) {
  return text ? text.replace("&", "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;") : "null";
}

module.exports = {
  display: display,
  format: format,
  handlers: handlers,
  displayer: displayer,
  formatter: formatter };

function display(key, value, store, meta) {
  for (var name in handlers.mime) {
    if (value[name]) {
      var res = handlers.mime[name](value[name], store, meta, value.metadata && value.metadata[name]);
      return React.createElement(
        "div",
        { className: "m_IPython_output m_IPython_output-" + name.replace("/", "-"), key: key },
        res
      );
    }
  }
  for (var name in handlers.default_mime) {
    if (value[name]) {
      var res = handlers.default_mime[name](value[name], store, meta, value.metadata && value.metadata[name]);
      return React.createElement(
        "div",
        { className: "m_IPython_output m_IPython_output-" + name.replace("/", "-"), key: key },
        res
      );
    }
  }
  return React.createElement(
    "div",
    { className: "m_IPython_output", key: key },
    React.createElement(
      "em",
      null,
      "Unknown mime type"
    )
  );
}

function format(value, window) {
  var result = {
    "text/plain": safeString(value) };
  handlers.formatters.some(function (fm) {
    var res = fm[0](value, window);
    if (res === undefined) return false;
    result[fm[1]] = res;
    return true;
  });
  return result;
}

function displayer(handler, mime) {
  handlers.mime[mime] = handler;
}

function formatter(handler, mime) {
  handlers.formatters.push([handler, mime]);
}

},{"../../kernels/js/safe-string":39,"ansi-to-html":"ansi-to-html","react":"react"}],45:[function(require,module,exports){
"use strict";

var React = require("react"),
    Listener = require("treed/listener"),
    KernelController = require("./kernel-controller");

module.exports = function (kernelConfig, config) {
  return {
    title: "Code REPL",

    types: {
      "code-playground": {
        title: "Code Playground",
        shortcut: "p" },
      ipython: {
        title: "Code Block",
        shortcut: "c",
        update: { language: kernelConfig.language } }
    },

    keys: {
      execute: {
        type: "ipython",
        normal: "shift+enter",
        insert: "shift+enter",
        visual: "shift+enter" },
      "execute deep": {
        normal: "ctrl+shift+enter",
        insert: "ctrl+shift+enter",
        visual: "ctrl+shift+enter" },
      "toggle display collapse": {
        title: "(un) collapse code output",
        normal: "space" },
      "execute and add": {
        type: "ipython",
        title: "execute and add a node after",
        normal: "alt+enter",
        insert: "alt+enter" },
      "toggle editor collapse": {
        title: "(un) collapse code editor",
        normal: "shift+space" } },

    contextMenu: function contextMenu(node, state) {
      if (!node || node.type !== "ipython") {
        return;
      }return [{
        title: "Run Block",
        action: "execute" }, {
        title: "Toggle Output",
        action: "toggleDisplayCollapse" }, {
        title: "Toggle Code",
        action: "toggleEditorCollapse" }];
    },

    app: {
      blocks: {
        icon: function icon(actions, state, store) {},

        bar: function bar(actions, state, store) {
          return React.createElement(KernelController, { store: store, type: kernelConfig.type });
        } } },

    view: {
      global: function global(store) {
        return React.createElement(KernelController, {
          key: "itreed-controller",
          store: store,
          type: kernelConfig.type,
          remote: kernelConfig.remote
        });
      } },

    db: {
      addNewNodeAttrs: function addNewNodeAttrs(node) {
        if (node.type === "ipython") {
          node.language = kernelConfig.language;
        }
      } },

    store: {
      init: function init(store) {
        var K = kernelConfig.kernel;

        var kernel = store._globals.kernel = new K(store.db.root, null, kernelConfig.language);
        var host = config && config.hosts && config.hosts[kernel.type];
        store._globals.kernelError = false;
        kernel.on("session", function () {
          store.changed(store.events.kernelSession());
        });
        kernel.on("status", function () {
          store.changed(store.events.kernelStatus());
        });
        if (host || !kernelConfig.remote) {
          if (host && host.indexOf(":") === -1) {
            host = "localhost:" + host;
          }
          setTimeout(function () {
            kernel.init(host, function () {});
          }, 0);
        }
      },

      teardown: function teardown(store) {
        store._globals.kernel.teardown && store._globals.kernel.teardown();
      },

      actions: require("./actions")(kernelConfig.type, kernelConfig.language),
      getters: {
        kernelStatus: function kernelStatus() {
          return this.globals.kernel && this.globals.kernel.status;
        },
        kernelHost: function kernelHost() {
          return this.globals.kernel && this.globals.kernel.host;
        },
        kernelSession: function kernelSession() {
          return this.globals.kernel && this.globals.kernel.session;
        },
        kernelError: function kernelError() {
          return this.globals.kernelError;
        },
        kernelsAvailable: function kernelsAvailable() {
          return this.globals.kernel && this.globals.kernel.available_kernels;
        } },

      events: {
        kernelSession: function () {
          return "kernel-session";
        },
        kernelStatus: function () {
          return "kernel-status";
        },
        kernelError: function () {
          return "kernel-error";
        } }
    },

    node: require("./node") };
};

},{"./actions":41,"./kernel-controller":47,"./node":50,"react":"react","treed/listener":73}],46:[function(require,module,exports){
"use strict";

var React = require("react");

var KernelChanger = React.createClass({
  displayName: "KernelChanger",

  getInitialState: function getInitialState() {
    return {
      host: this.props.initialValue || "localhost:8002",
      type: this.props.initialType };
  },
  _onChange: function _onChange(e) {
    this.setState({ host: e.target.value });
  },
  _setType: function _setType(type) {
    this.setState({ type: type });
  },
  _onDone: function _onDone() {
    this.props.onDone(this.state.host);
  },
  _onKeyDown: function _onKeyDown(e) {
    if (e.key === "Enter") {
      this._onDone();
    }
  },
  render: function render() {
    return React.createElement(
      "div",
      { className: "m_IPythonKernel_changer" },
      React.createElement("input", {
        placeholder: (this.props.type === "ipython" ? "iPython" : "Gorilla-repl") + " host",
        value: this.state.host,
        onChange: this._onChange,
        onKeyDown: this._onKeyDown }),
      React.createElement(
        "span",
        { className: "m_IPythonKernel_changer_btn", onClick: this._onDone, style: {
            color: "green" } },
        "✔"
      ),
      React.createElement(
        "span",
        { className: "m_IPythonKernel_changer_btn", onClick: this.props.onCancel, style: {
            color: "red" } },
        "✗"
      )
    );
  }
});

module.exports = KernelChanger;
/** not going to use this
<span
 className={
   'm_IPythonKernel_changer_btn' + (type==='ipython' ? ' m_IPythonKernel_changer_btn-active' : '')
 }
 onClick={this._setType.bind(null, 'ipython')}>
 P
</span>
<span
 className={
   'm_IPythonKernel_changer_btn' + (type==='gorilla' ? ' m_IPythonKernel_changer_btn-active' : '')
 }
 onClick={this._setType.bind(null, 'gorilla')}>
 G
</span>
**/

},{"react":"react"}],47:[function(require,module,exports){
"use strict";

var React = require("react"),
    Listener = require("treed/listener"),
    KernelIndicator = require("./kernel-indicator"),
    KernelChanger = require("./kernel-changer");

var KernelController = React.createClass({
  displayName: "KernelController",

  propTypes: {
    remote: React.PropTypes.bool },

  mixins: [Listener({
    storeAttrs: function storeAttrs(getters, props) {
      return {
        kernelHost: getters.kernelHost(),
        kernelStatus: getters.kernelStatus(),
        kernelSession: getters.kernelSession(),
        kernelError: getters.kernelError(),
        kernelsAvailable: getters.kernelsAvailable() };
    },

    getListeners: function getListeners(props, events) {
      return [events.kernelStatus(), events.kernelSession(), events.kernelError()];
    } })],

  getInitialState: function getInitialState() {
    return {
      changing: false
    };
  },

  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
    var _this = this;

    if (!prevState.kernelError && this.state.kernelError) {
      if (this._tout) {
        clearTimeout(this._tout);
      }
      this._tout = setTimeout(function () {
        _this.props.store.actions.clearKernelError();
        _this._tout = null;
      }, 2000);
    }
  },

  contextTypes: {
    updatePlugin: React.PropTypes.func,
    getPluginConfig: React.PropTypes.func },

  _onConnect: function _onConnect(host) {
    var _this = this;

    this.setState({ changing: false });
    var k = this.props.store.globals.kernel;
    k.disconnect();
    k.init(host, function (err) {
      var hosts = _this.context.getPluginConfig("itreed").hosts || {};
      hosts[k.type] = host;

      _this.context.updatePlugin("itreed", { hosts: hosts });
    });
  },

  _onInterrupt: function _onInterrupt(e) {
    if (e) {
      e.stopPropagation();
      e.preventDefault();
    }
    var k = this.props.store.globals.kernel;
    k.interrupt();
  },

  _onReconnect: function _onReconnect(e) {
    if (e) {
      e.stopPropagation();
      e.preventDefault();
    }
    this._onConnect(this.state.kernelHost);
  },

  _onChange: function _onChange(e) {
    if (e) {
      e.stopPropagation();
      e.preventDefault();
    }
    this.setState({ changing: true });
  },

  _onCancel: function _onCancel(e) {
    if (e) {
      e.stopPropagation();
      e.preventDefault();
    }
    this.setState({ changing: false });
  },

  _onChooseKernel: function _onChooseKernel(kernel) {
    var k = this.props.store.globals.kernel;
    if (!kernel) {
      k.newKernel();
    } else {
      k.useKernel(kernel);
    }
  },

  render: function render() {
    return React.createElement(
      "div",
      { className: "m_IPythonKernel m_IPythonKernel-" + this.state.kernelStatus },
      this.state.kernelError && React.createElement(
        "div",
        { className: "m_IPythonKernel_error" },
        this.state.kernelError
      ),
      this.state.changing ? React.createElement(KernelChanger, {
        initialValue: this.state.kernelHost,
        type: this.props.type,
        onCancel: this._onCancel,
        onDone: this._onConnect }) : React.createElement(KernelIndicator, {
        remote: this.props.remote,
        onReconnect: this._onReconnect,
        onInterrupt: this._onInterrupt,
        onChange: this._onChange,
        type: this.props.type,
        host: this.state.kernelHost,
        status: this.state.kernelStatus,
        kernels: this.state.kernelsAvailable,
        onChooseKernel: this._onChooseKernel,
        session: this.state.kernelSession })
    );
  } });

module.exports = KernelController;
// do something on error?

},{"./kernel-changer":46,"./kernel-indicator":48,"react":"react","treed/listener":73}],48:[function(require,module,exports){
"use strict";

var React = require("react"),
    PT = React.PropTypes;

var KernelPicker = require("./kernel-picker");

var KernelIndicator = React.createClass({
  displayName: "KernelIndicator",

  propTypes: {
    type: PT.string,
    onChange: PT.func,
    onReconnect: PT.func,
    onChooseKernel: PT.func,
    host: PT.string,
    status: PT.string,
    kernels: PT.array,
    session: PT.string },

  render: function render() {
    if (this.props.status === "error") {
      return React.createElement(
        "div",
        { className: "m_IPythonKernel_indicator m_IPythonKernel_indicator-error" },
        "Error connecting to ",
        this.props.host,
        "!",
        React.createElement(
          "button",
          { onClick: this.props.onReconnect },
          "Reconnect"
        ),
        React.createElement(
          "button",
          { onClick: this.props.onChange },
          "Change Host"
        )
      );
    }

    if (this.props.status === "available-kernels") {
      return React.createElement(KernelPicker, {
        onPick: this.props.onChooseKernel,
        onCancel: this.props.onChange,
        kernels: this.props.kernels });
    }

    if (!this.props.host && this.props.remote) {
      return React.createElement(
        "div",
        {
          onClick: this.props.onChange,
          className: "m_IPythonKernel_indicator m_IPythonKernel_indicator-disconnected" },
        "Set the repl host"
      );
    }

    return React.createElement(
      "div",
      {
        onClick: this.props.host && this.props.onChange,
        className: "m_IPythonKernel_indicator m_IPythonKernel_indicator-" + this.props.status },
      this.props.host || "Local",
      this.props.status === "running" && React.createElement(
        "span",
        {
          onClick: this.props.onInterrupt,
          title: "interrupt",
          className: "m_IPythonKernel_indicator_interrupt" },
        "×"
      ),
      React.createElement("span", { className: "m_IPythonKernel_indicator_icon m_IPythonKernel_indicator_icon-" + this.props.status }),
      this.props.status === "disconnected" && React.createElement(
        "button",
        { onClick: this.props.onReconnect },
        "Reconnect"
      ),
      this.props.status === "disconnected" && React.createElement(
        "button",
        { onClick: this.props.onChange },
        "Change Host"
      )
    );
  }
});

module.exports = KernelIndicator;

},{"./kernel-picker":49,"react":"react"}],49:[function(require,module,exports){
"use strict";

var React = require("react"),
    PT = React.PropTypes;

var KernelPicker = React.createClass({
  displayName: "KernelPicker",

  propTypes: {
    onCancel: PT.func,
    onPick: PT.func,
    kernels: PT.array },

  getInitialState: function getInitialState() {
    return {
      open: false };
  },

  _toggleOpen: function _toggleOpen() {
    this.setState({ open: !this.state.open });
  },

  render: function render() {
    var _this = this;

    return React.createElement(
      "div",
      { className: "KernelPicker" },
      React.createElement(
        "span",
        {
          onClick: this._toggleOpen,
          className: "KernelPicker_label" },
        "Choose kernel",
        React.createElement(
          "span",
          { className: "KernelPicker_close", onClick: this.props.onCancel },
          "×"
        )
      ),
      this.state.open && React.createElement(
        "ul",
        { className: "KernelPicker_list" },
        this.props.kernels.map(function (kernel) {
          return React.createElement(
            "li",
            {
              onClick: _this.props.onPick.bind(null, kernel.kernel),
              className: "KernelPicker_item" },
            kernel.kernel.id
          );
        }),
        React.createElement(
          "li",
          { onClick: this.props.onPick.bind(null, false), className: "KernelPicker_item" },
          "New Kernel"
        )
      )
    );
  }
});

module.exports = KernelPicker;

},{"react":"react"}],50:[function(require,module,exports){
"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require("react/addons"),
    cx = React.addons.classSet,
    Convert = require("ansi-to-html"),
    convert = new Convert(),
    Playground = require("./playground"),
    CodeEditor = require("./code-editor"),
    Output = require("./output");

function codeOutput(node, actions, state, store) {
  if (node.type !== "ipython") {
    return;
  }var kernelW = store.globals.kernel && store.globals.kernel.w,
      style = kernelW && kernelW._inject_css,
      addListener = kernelW && kernelW.addInjectListener,
      removeListener = kernelW && kernelW.removeInjectListener;
  return React.createElement(Output, {
    node: node,
    key: "code-output",
    ref: "ipython_view",
    styles: style,
    addInjectListener: addListener,
    removeInjectListener: removeListener,
    setActive: actions.setActive.bind(actions, node.id),
    kernelSession: state.kernelSession,
    store: store });
}

module.exports = {
  classes: function classes(node, state) {
    if (node.type !== "ipython") {
      return;
    }return cx({
      "TreeItem-ipython-disabled": !state.kernelSession,
      "TreeItem-ipython-collapsed": node.display_collapsed,
      "TreeItem-ipython-stale": state.kernelSession !== node.session,
      "TreeItem-ipython-running": node.started && !node.finished,
      "TreeItem-ipython-waiting": node.waiting,
      "TreeItem-ipython-dirty": node.executed !== node.content });
  },

  blocks: {
    belowbody: codeOutput,
    "focus-pane": codeOutput },

  bodies: {
    ipython: {
      renderer: function renderer() {
        var _this = this;

        if (this.props.node.editor_collapsed) {
          return React.createElement(
            "div",
            { onClick: function (_) {
                return _this.props.actions.toggleEditorCollapse(_this.props.node.id);
              } },
            "Editor Collapsed"
          );
        }
        return React.createElement(CodeEditor, {
          ref: "text",
          blurred: true,
          node: this.props.node,
          value: this.props.node.content,
          onExecute: function () {
            return _this.props.actions.execute(_this.props.node.id);
          },
          onFocus: this._onClick
        });
      },
      editor: function editor(props) {
        if (props.node.editor_collapsed) {
          return React.createElement(
            "div",
            { onClick: function (_) {
                return props.actions.toggleEditorCollapse(props.node.id);
              } },
            "Editor Collapsed"
          );
        }
        var kernel = props.store.globals.kernel;
        if (kernel && (kernel.complete || kernel.cmComplete)) {
          props.onComplete = kernelComplete(kernel);
        }
        props.onExecute = function () {
          return props.actions.execute(props.node.id);
        };
        return React.createElement(CodeEditor, props);
      } },

    "code-playground": {
      renderer: function renderer() {
        return React.createElement(Playground, {
          ref: "text",
          blurred: true,
          value: this.props.node.content,
          onFocus: this._onClick,
          onChange: this._onChange,
          store: this.props.store,
          node: this.props.node });
      },
      editor: function editor(props) {
        return React.createElement(Playground, _extends({ ref: "text" }, props));
      } } },

  listener: {
    changes: ["kernel-session"],
    updateStoreState: function updateStoreState(state, getters) {
      return { kernelSession: getters.kernelSession() };
    } } };

function kernelComplete(kernel) {
  var func;
  if (kernel.cmComplete) {
    func = function (cm, done) {
      return kernel.cmComplete(cm);
    };
  } else if (kernel.complete) {
    func = function (cm, done) {
      var cursor = cm.getCursor(),
          line = cm.getLine(cursor.line),
          pos = { line: cursor.line, ch: cursor.ch };
      return kernel.complete(line, pos, done);
    };
  } else {
    return function (cm) {
      return CodeMirror.hint.auto(cm);
    };
  }

  if (kernel.asyncComplete) {
    func.async = true;
  }

  return func;
}

},{"./code-editor":42,"./output":51,"./playground":53,"ansi-to-html":"ansi-to-html","react/addons":"react/addons"}],51:[function(require,module,exports){
"use strict";

var showTimes = require("./timer"),
    make_outputs = require("./view"),
    React = require("react"),
    cx = React.addons.classSet;

var Output = React.createClass({
  displayName: "Output",

  getInitialState: function getInitialState() {
    return {
      popout: false };
  },

  _onPopout: function _onPopout() {
    var _this = this;

    var box = this.refs.outputs.getDOMNode().getBoundingClientRect(),
        w = window.open("party.html", "Popped out output", "location=no,menubar=no,height=" + (box.height + 20) + ",width=" + (box.width + 20));
    w.onbeforeunload = this._onClose;
    w.onload = function () {
      w.document.body.className = "m_IPython_popout-body";
      var style = w.document.createElement("style");
      style.innerHTML = _this.props.styles;
      w.style = style;
      w.document.head.appendChild(style);
      _this.setState({
        popout: w });
    };
    if (this.props.addInjectListener) {
      this.props.addInjectListener(this._updateStyle);
    }
  },

  _updateStyle: function _updateStyle(style) {
    if (!this.state.popout) {
      return;
    }this.state.popout.style.innerHTML = style;
  },

  _onClose: function _onClose() {
    if (!this.isMounted()) {
      return;
    }this.setState({
      popout: false
    });
  },

  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
    if (!this.state.popout) {
      if (prevState.popout && !prevState.popout.closed) {
        prevState.popout.onbeforeunload = null;
        prevState.popout.close();
      }
      return;
    }

    this.state.popout.style.innerHTML = this.props.styles;

    var outputs = make_outputs(this.props.node.outputs, this.props.store),
        container = React.createElement(
      "div",
      { className: "m_IPython m_IPython_popout-wrapper" },
      outputs
    );
    React.render(container, this.state.popout.document.body);
  },

  componentWillUnmount: function componentWillUnmount() {
    if (this.state.popout && !this.state.popout.closed) {
      this.state.popout.onbeforeunload = null;
      this.state.popout.close();
    }
    if (this.props.removeInjectListener) {
      this.props.removeInjectListener(this._updateStyle);
    }
  },

  render: function render() {
    var node = this.props.node,
        store = this.props.store;
    var className = cx({
      m_IPython: true,
      "m_IPython-hiding": node.display_collapsed,
      "m_IPython-empty": !(node.output && node.output.length) });
    // TODO: indicate node.language somewhere
    return React.createElement(
      "div",
      { className: className, ref: "ipython_view", onClick: this.props.setActive },
      React.createElement(
        "div",
        { ref: "outputs", className: "m_IPython_outputs" },
        !this.state.popout && React.createElement(
          "span",
          { onClick: this._onPopout, className: "m_IPython_popout-button" },
          React.createElement("i", { className: "fa fa-external-link-square" })
        ),
        this.state.popout ? React.createElement(
          "div",
          { onClick: this._onClose, className: "m_IPython_popped-message" },
          "Output has been popped out into a separate window. Click to get it back"
        ) : make_outputs(node.outputs, store)
      ),
      showTimes(node, this.props.kernelSession)
    );
  } });

module.exports = Output;

},{"./timer":54,"./view":55,"react":"react"}],52:[function(require,module,exports){
"use strict";

var React = require("react/addons"),
    cx = React.addons.classSet;

var DEFAULT_STYLE = "\nhtml {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  align-content: center;\n  flex: 1;\n  min-height: 100%;\n  background-color: white;\n}\nhtml.focused {\n  box-shadow: 0 0 10px blue inset;\n}\nhtml.focused:before {\n  color: #ddd;\n  content: \"this frame has focus!\";\n  font-family: sans-serif;\n  font-size: 30px;\n  font-weight: bold;\n  padding: 5px;\n  position: absolute;\n  right: 10px;\n  top: 0;\n  z-index: -10;\n}\nbody {\n  margin: 0;\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n";

module.exports = function (frame, onFocus) {
  var doc = frame.contentDocument,
      style = doc.createElement("style"),
      custom = doc.createElement("style"),
      win = frame.contentWindow;
  style.innerHTML = DEFAULT_STYLE;
  doc.head.appendChild(style);
  doc.head.appendChild(custom);

  win.React = React;
  win.cx = cx;
  win.addEventListener("focus", function () {
    doc.body.parentNode.classList.add("focused");
    onFocus();
  });
  win.addEventListener("blur", function () {
    return doc.body.parentNode.classList.remove("focused");
  });
  // TODO are there other things I want exposed on this window?
  return custom;
};

},{"react/addons":"react/addons"}],53:[function(require,module,exports){
"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require("react/addons"),
    cx = React.addons.classSet,
    less = require("less"),
    jsx = require("../kernels/js/jsx"),
    CodeMirrorRx = require("./codemirror-rx"),
    initFrame = require("./play-frame");

var cache = { jsx: {}, less: {} };

var SEP = "\n// @playground-split\n";

var Playground = React.createClass({
  displayName: "Playground",

  getInitialState: function getInitialState() {
    return {
      jserror: null,
      csserror: null };
  },

  componentDidMount: function componentDidMount() {
    var frame = this.refs.out.getDOMNode();
    this._styler = initFrame(frame, this.onSelect);

    var parts = this.props.value.split(SEP);
    this.updateJSX(parts[0] || "");
    this.updateCSS(parts[1] || "");
    this._resize();

    if (!this.props.blurred) {
      var parts = this.props.value.split(SEP);
      this.refs.jsx.focus();
    }
  },

  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
    var prev = prevProps.value.split(SEP),
        now = this.props.value.split(SEP);
    if (prev[0] !== now[0]) {
      this.updateJSX(now[0] || "");
    }
    if (prev[1] !== now[1]) {
      this.updateCSS(now[1] || "");
    }
    var frame = this.refs.out.getDOMNode();
    this._resize();
  },

  _resize: function _resize() {
    var frame = this.refs.out.getDOMNode();
    var el = frame.contentDocument.body.firstElementChild;
    if (!el) {
      return;
    }var st = window.getComputedStyle(el),
        margin = parseInt(st.marginTop) + parseInt(st.marginBottom);
    frame.style.height = el.offsetHeight + 20 + margin + "px";
  },

  onSelect: function onSelect() {
    this.props.store.actions.setMode("normal");
    this.props.store.actions.setActive(this.props.node.id);
  },

  updateJSX: function updateJSX(val) {
    var frame = this.refs.out.getDOMNode();
    try {
      var js = cache[val] || jsx(val);
      cache[val] = js;
    } catch (e) {
      return this.setState({ jserror: e });
    }
    try {
      var jsel = frame.contentWindow.eval(js);
      if (jsel) React.render(jsel, frame.contentDocument.body);
      if (this.state.jserror) this.setState({ jserror: null });
    } catch (e) {
      this.setState({ jserror: e });
    }
  },

  updateCSS: function updateCSS(val) {
    var _this = this;

    var frame = this.refs.out.getDOMNode();
    if (cache[val]) {
      return this._styler.innerHTML = cache[val];
    }
    less.render(val, {}, function (error, css) {
      if (error) return _this.setState({ csserror: error });
      cache[val] = css.css;
      _this._styler.innerHTML = css.css;
      if (_this.state.csserror) _this.setState({ csserror: null });
      _this._resize();
    });
  },

  setJSX: function setJSX(val) {
    var parts = this.props.value.split(SEP);
    parts[0] = val;
    this.props.onChange(parts.join(SEP));
  },

  setLess: function setLess(val) {
    var parts = this.props.value.split(SEP);
    parts[1] = val;
    this.props.onChange(parts.join(SEP));
  },

  focus: function focus() {
    this.refs.jsx.focus();
  },

  isFocused: function isFocused() {
    return this.refs.jsx && (this.refs.jsx.isFocused() || this.refs.less.isFocused());
  },

  _toggleCollapse: function _toggleCollapse() {
    this.props.store.actions.toggleEditorCollapse(this.props.node.id);
  },

  render: function render() {
    var _this = this;

    if (this.props.node.editor_collapsed && this.props.blurred) {
      return React.createElement(
        "div",
        { className: "Playground Playground-collapsed" },
        React.createElement("div", { key: "collapse", className: "Playground_collapse", onClick: this._toggleCollapse }),
        React.createElement(
          "div",
          { key: "out", className: "Playground_out" },
          React.createElement("iframe", { ref: "out" })
        )
      );
    }
    var parts = this.props.value.split(SEP),
        cmProps = {
      style: {},
      indentWidth: 2,
      indentWithTabs: false,
      matchBrackets: true,
      lineNumbers: true,
      tabSize: 2,
      foldGutter: true,
      lineWrapping: true,
      viewportMargin: Infinity,
      blurred: this.props.blurred,
      gutters: ["CodeMirror-linenumbers", "CodeMirror-foldgutter"],
      onFocus: function () {
        return _this.props.onFocus();
      } };
    return React.createElement(
      "div",
      { className: "Playground" },
      React.createElement("div", { key: "collapse", className: "Playground_collapse", onClick: this._toggleCollapse }),
      React.createElement(
        "div",
        { className: "Playground_code" },
        React.createElement(CodeMirrorRx, _extends({
          ref: "jsx",
          mode: "javascript",
          smartIndent: false,
          value: parts[0] || "",
          onBlur: this.props.onBlur,
          goDown: function () {
            return _this.refs.less.focus();
          },
          onChange: this.setJSX }, cmProps)),
        React.createElement(CodeMirrorRx, _extends({
          ref: "less",
          mode: "css",
          smartIndent: true,
          value: parts[1] || "",
          onBlur: this.props.onBlur,
          goUp: function () {
            return _this.refs.jsx.focus();
          },
          onFocus: function () {
            return _this.props.onFocus();
          },
          onChange: this.setLess }, cmProps)),
        React.createElement(
          "div",
          { className: "Playground_error" },
          this.state.jserror,
          this.state.csserror
        )
      ),
      React.createElement(
        "div",
        { key: "out", className: "Playground_out" },
        React.createElement("iframe", { ref: "out" })
      )
    );
  } });

module.exports = Playground;

},{"../kernels/js/jsx":37,"./codemirror-rx":43,"./play-frame":52,"less":"less","react/addons":"react/addons"}],54:[function(require,module,exports){
"use strict";

var React = require("react/addons");

module.exports = showTimes;

function mmss(time) {
  var d = new Date(time);
  var s = d.getSeconds();
  if (s < 10) s = "0" + s;
  return d.getMinutes() + ":" + s + "s";
}

function mmssSSS(time) {
  var d = new Date(time);
  var s = d.getSeconds();
  var ms = d.getMilliseconds();
  if (s < 10) s = "0" + s;
  if (ms < 10) ms = "00" + ms;else if (ms < 100) ms = "0" + ms;
  return d.getMinutes() + ":" + s + "." + ms + "s";
}

function hmmssa(time) {
  var d = new Date(time);
  var m = d.getMinutes();
  if (m < 10) m = "0" + m;
  var s = d.getSeconds();
  if (s < 10) s = "0" + s;
  var a = d.getHours() > 11 ? "pm" : "am";
  var h = d.getHours();
  if (h > 12) h -= 12;
  return "" + h + ":" + m + ":" + s + "" + a;
}

function showTimes(node, kernelSession) {
  var thisSession = kernelSession === node.session;
  if (!node.started || !node.finished && !thisSession) {
    return;
  } // not evaluated this 'session'
  if (!node.finished) {
    return React.createElement(CountingTimer, {
      time: node.started,
      className: "m_IPython_time m_IPython_time-loading" });
  }
  var duration = node.finished - node.started;
  var className = "m_IPython_time" + (thisSession ? "" : " m_IPython_time-stale");
  return React.createElement(
    "div",
    { className: className },
    !thisSession && React.createElement(
      "em",
      null,
      "stale "
    ),
    hmmssa(node.finished),
    React.createElement("br", null),
    mmssSSS(duration)
  );
}

var CountingTimer = React.createClass({
  displayName: "CountingTimer",

  getInitialState: function getInitialState() {
    return {
      duration: Date.now() - this.props.time
    };
  },
  componentDidMount: function componentDidMount() {
    var _this = this;

    this._interval = setInterval(function () {
      _this.setState({ duration: Date.now() - _this.props.time });
    }, 200);
  },
  componentWillUnmount: function componentWillUnmount() {
    clearInterval(this._interval);
  },
  render: function render() {
    return this.transferPropsTo(React.createElement(
      "div",
      null,
      mmss(this.state.duration)
    ));
  }
});

},{"react/addons":"react/addons"}],55:[function(require,module,exports){
"use strict";

var Convert = require("ansi-to-html"),
    convert = new Convert(),
    format = require("./format"),
    React = require("react");

module.exports = make_outputs;

/**
 * format a list of outputs, displaying the highest ranking output type that
 * has a renderer registered.
 *
 * Output channels:
 * - log stream (stdout/stderr)
 * - error
 * - output (b/c it gets assigned to the _i variables, etc.). I think there
 *   ought to be only one of these
 * - display (out of band displayage)
 */
function make_outputs(outputs, store) {
  if (!outputs || !outputs.length) {
    return;
  }var org = organizeOutputs(outputs);
  var items = [];
  if (org.streams.stdout) {
    items.push(React.createElement(
      "div",
      { key: "stdout",
        className: "m_IPython_output m_IPython_output-stdout" },
      ansiHtml(org.streams.stdout)
    ));
  }

  if (org.streams.stderr) {
    items.push(React.createElement(
      "div",
      { key: "stderr",
        className: "m_IPython_output m_IPython_output-stderr" },
      ansiHtml(org.streams.stderr)
    ));
  }

  return items.concat(org.normal.map(showOutput.bind(null, store)));
}

function organizeOutputs(outputs) {
  var streams = {
    stdout: null,
    stderr: null };
  var normal = [];
  outputs.forEach(function (output, i) {
    if (output.type !== "stream") {
      if (output.suppressable && i !== outputs.length - 1) {
        return;
      }
      return normal.push(output);
    }
    if (streams[output.stream]) {
      streams[output.stream] += output.text;
    } else {
      streams[output.stream] = output.text;
    }
  });
  return { streams: streams, normal: normal };
}

function formatTraceback(traceback, ansi) {
  if (!traceback) {
    return;
  }if (ansi) {
    return ansiHtml(traceback.join("\n"));
  }return traceback;
}

function escape(text) {
  return text ? text.replace("&", "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;") : "null";
}

function ansiHtml(text) {
  return React.createElement("pre", { dangerouslySetInnerHTML: {
      __html: convert.toHtml(escape(text))
    } });
}

function showOutput(store, output, i) {
  if (output.type === "error") {
    return React.createElement(
      "div",
      { className: "m_IPython_output m_IPython_output-error", key: i },
      React.createElement(
        "div",
        { className: "m_IPython_error_trace" },
        formatTraceback(output.traceback, output.format === "ansi")
      )
    );
  }

  return format.display(i, output, store);
}

},{"./format":44,"ansi-to-html":"ansi-to-html","react":"react"}],56:[function(require,module,exports){
"use strict";

module.exports = uuid;

var CHARS = "0123456789abcdefghijklmnopqrstuvwxyz";
function uuid(ln) {
  ln = ln || 32;
  var id = "";
  for (var i = 0; i < ln; i++) {
    id += CHARS[parseInt(Math.random() * CHARS.length)];
  }
  return id;
}

},{}],57:[function(require,module,exports){
/*
  Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>
  Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>
  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>
  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>
  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>
  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>
  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>
  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>
  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*jslint bitwise:true plusplus:true */
/*global esprima:true, define:true, exports:true, window: true,
throwError: true, generateStatement: true, peek: true,
parseAssignmentExpression: true, parseBlock: true,
parseClassExpression: true, parseClassDeclaration: true, parseExpression: true,
parseForStatement: true,
parseFunctionDeclaration: true, parseFunctionExpression: true,
parseFunctionSourceElements: true, parseVariableIdentifier: true,
parseImportSpecifier: true,
parseLeftHandSideExpression: true, parseParams: true, validateParam: true,
parseSpreadOrAssignmentExpression: true,
parseStatement: true, parseSourceElement: true, parseModuleBlock: true, parseConciseBody: true,
advanceXJSChild: true, isXJSIdentifierStart: true, isXJSIdentifierPart: true,
scanXJSStringLiteral: true, scanXJSIdentifier: true,
parseXJSAttributeValue: true, parseXJSChild: true, parseXJSElement: true, parseXJSExpressionContainer: true, parseXJSEmptyExpression: true,
parseTypeAnnotation: true, parseTypeAnnotatableIdentifier: true,
parseYieldExpression: true
*/

(function (root, factory) {
    'use strict';

    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,
    // Rhino, and plain browser loading.
    if (typeof define === 'function' && define.amd) {
        define(['exports'], factory);
    } else if (typeof exports !== 'undefined') {
        factory(exports);
    } else {
        factory((root.esprima = {}));
    }
}(this, function (exports) {
    'use strict';

    var Token,
        TokenName,
        FnExprTokens,
        Syntax,
        PropertyKind,
        Messages,
        Regex,
        SyntaxTreeDelegate,
        XHTMLEntities,
        ClassPropertyType,
        source,
        strict,
        index,
        lineNumber,
        lineStart,
        length,
        delegate,
        lookahead,
        state,
        extra;

    Token = {
        BooleanLiteral: 1,
        EOF: 2,
        Identifier: 3,
        Keyword: 4,
        NullLiteral: 5,
        NumericLiteral: 6,
        Punctuator: 7,
        StringLiteral: 8,
        RegularExpression: 9,
        Template: 10,
        XJSIdentifier: 11,
        XJSText: 12
    };

    TokenName = {};
    TokenName[Token.BooleanLiteral] = 'Boolean';
    TokenName[Token.EOF] = '<end>';
    TokenName[Token.Identifier] = 'Identifier';
    TokenName[Token.Keyword] = 'Keyword';
    TokenName[Token.NullLiteral] = 'Null';
    TokenName[Token.NumericLiteral] = 'Numeric';
    TokenName[Token.Punctuator] = 'Punctuator';
    TokenName[Token.StringLiteral] = 'String';
    TokenName[Token.XJSIdentifier] = 'XJSIdentifier';
    TokenName[Token.XJSText] = 'XJSText';
    TokenName[Token.RegularExpression] = 'RegularExpression';

    // A function following one of those tokens is an expression.
    FnExprTokens = ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',
                    'return', 'case', 'delete', 'throw', 'void',
                    // assignment operators
                    '=', '+=', '-=', '*=', '/=', '%=', '<<=', '>>=', '>>>=',
                    '&=', '|=', '^=', ',',
                    // binary/unary operators
                    '+', '-', '*', '/', '%', '++', '--', '<<', '>>', '>>>', '&',
                    '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',
                    '<=', '<', '>', '!=', '!=='];

    Syntax = {
        ArrayExpression: 'ArrayExpression',
        ArrayPattern: 'ArrayPattern',
        ArrowFunctionExpression: 'ArrowFunctionExpression',
        AssignmentExpression: 'AssignmentExpression',
        BinaryExpression: 'BinaryExpression',
        BlockStatement: 'BlockStatement',
        BreakStatement: 'BreakStatement',
        CallExpression: 'CallExpression',
        CatchClause: 'CatchClause',
        ClassBody: 'ClassBody',
        ClassDeclaration: 'ClassDeclaration',
        ClassExpression: 'ClassExpression',
        ClassProperty: 'ClassProperty',
        ComprehensionBlock: 'ComprehensionBlock',
        ComprehensionExpression: 'ComprehensionExpression',
        ConditionalExpression: 'ConditionalExpression',
        ContinueStatement: 'ContinueStatement',
        DebuggerStatement: 'DebuggerStatement',
        DoWhileStatement: 'DoWhileStatement',
        EmptyStatement: 'EmptyStatement',
        ExportDeclaration: 'ExportDeclaration',
        ExportBatchSpecifier: 'ExportBatchSpecifier',
        ExportSpecifier: 'ExportSpecifier',
        ExpressionStatement: 'ExpressionStatement',
        ForInStatement: 'ForInStatement',
        ForOfStatement: 'ForOfStatement',
        ForStatement: 'ForStatement',
        FunctionDeclaration: 'FunctionDeclaration',
        FunctionExpression: 'FunctionExpression',
        Identifier: 'Identifier',
        IfStatement: 'IfStatement',
        ImportDeclaration: 'ImportDeclaration',
        ImportSpecifier: 'ImportSpecifier',
        LabeledStatement: 'LabeledStatement',
        Literal: 'Literal',
        LogicalExpression: 'LogicalExpression',
        MemberExpression: 'MemberExpression',
        MethodDefinition: 'MethodDefinition',
        ModuleDeclaration: 'ModuleDeclaration',
        NewExpression: 'NewExpression',
        ObjectExpression: 'ObjectExpression',
        ObjectPattern: 'ObjectPattern',
        ObjectTypeAnnotation: 'ObjectTypeAnnotation',
        OptionalParameter: 'OptionalParameter',
        ParametricTypeAnnotation: 'ParametricTypeAnnotation',
        ParametricallyTypedIdentifier: 'ParametricallyTypedIdentifier',
        Program: 'Program',
        Property: 'Property',
        ReturnStatement: 'ReturnStatement',
        SequenceExpression: 'SequenceExpression',
        SpreadElement: 'SpreadElement',
        SpreadProperty: 'SpreadProperty',
        SwitchCase: 'SwitchCase',
        SwitchStatement: 'SwitchStatement',
        TaggedTemplateExpression: 'TaggedTemplateExpression',
        TemplateElement: 'TemplateElement',
        TemplateLiteral: 'TemplateLiteral',
        ThisExpression: 'ThisExpression',
        ThrowStatement: 'ThrowStatement',
        TryStatement: 'TryStatement',
        TypeAnnotatedIdentifier: 'TypeAnnotatedIdentifier',
        TypeAnnotation: 'TypeAnnotation',
        UnaryExpression: 'UnaryExpression',
        UpdateExpression: 'UpdateExpression',
        VariableDeclaration: 'VariableDeclaration',
        VariableDeclarator: 'VariableDeclarator',
        VoidTypeAnnotation: 'VoidTypeAnnotation',
        WhileStatement: 'WhileStatement',
        WithStatement: 'WithStatement',
        XJSIdentifier: 'XJSIdentifier',
        XJSNamespacedName: 'XJSNamespacedName',
        XJSMemberExpression: 'XJSMemberExpression',
        XJSEmptyExpression: 'XJSEmptyExpression',
        XJSExpressionContainer: 'XJSExpressionContainer',
        XJSElement: 'XJSElement',
        XJSClosingElement: 'XJSClosingElement',
        XJSOpeningElement: 'XJSOpeningElement',
        XJSAttribute: 'XJSAttribute',
        XJSSpreadAttribute: 'XJSSpreadAttribute',
        XJSText: 'XJSText',
        YieldExpression: 'YieldExpression'
    };

    PropertyKind = {
        Data: 1,
        Get: 2,
        Set: 4
    };

    ClassPropertyType = {
        'static': 'static',
        prototype: 'prototype'
    };

    // Error messages should be identical to V8.
    Messages = {
        UnexpectedToken:  'Unexpected token %0',
        UnexpectedNumber:  'Unexpected number',
        UnexpectedString:  'Unexpected string',
        UnexpectedIdentifier:  'Unexpected identifier',
        UnexpectedReserved:  'Unexpected reserved word',
        UnexpectedTemplate:  'Unexpected quasi %0',
        UnexpectedEOS:  'Unexpected end of input',
        NewlineAfterThrow:  'Illegal newline after throw',
        InvalidRegExp: 'Invalid regular expression',
        UnterminatedRegExp:  'Invalid regular expression: missing /',
        InvalidLHSInAssignment:  'Invalid left-hand side in assignment',
        InvalidLHSInFormalsList:  'Invalid left-hand side in formals list',
        InvalidLHSInForIn:  'Invalid left-hand side in for-in',
        MultipleDefaultsInSwitch: 'More than one default clause in switch statement',
        NoCatchOrFinally:  'Missing catch or finally after try',
        UnknownLabel: 'Undefined label \'%0\'',
        Redeclaration: '%0 \'%1\' has already been declared',
        IllegalContinue: 'Illegal continue statement',
        IllegalBreak: 'Illegal break statement',
        IllegalDuplicateClassProperty: 'Illegal duplicate property in class definition',
        IllegalReturn: 'Illegal return statement',
        IllegalYield: 'Illegal yield expression',
        IllegalSpread: 'Illegal spread element',
        StrictModeWith:  'Strict mode code may not include a with statement',
        StrictCatchVariable:  'Catch variable may not be eval or arguments in strict mode',
        StrictVarName:  'Variable name may not be eval or arguments in strict mode',
        StrictParamName:  'Parameter name eval or arguments is not allowed in strict mode',
        StrictParamDupe: 'Strict mode function may not have duplicate parameter names',
        ParameterAfterRestParameter: 'Rest parameter must be final parameter of an argument list',
        DefaultRestParameter: 'Rest parameter can not have a default value',
        ElementAfterSpreadElement: 'Spread must be the final element of an element list',
        PropertyAfterSpreadProperty: 'A rest property must be the final property of an object literal',
        ObjectPatternAsRestParameter: 'Invalid rest parameter',
        ObjectPatternAsSpread: 'Invalid spread argument',
        StrictFunctionName:  'Function name may not be eval or arguments in strict mode',
        StrictOctalLiteral:  'Octal literals are not allowed in strict mode.',
        StrictDelete:  'Delete of an unqualified identifier in strict mode.',
        StrictDuplicateProperty:  'Duplicate data property in object literal not allowed in strict mode',
        AccessorDataProperty:  'Object literal may not have data and accessor property with the same name',
        AccessorGetSet:  'Object literal may not have multiple get/set accessors with the same name',
        StrictLHSAssignment:  'Assignment to eval or arguments is not allowed in strict mode',
        StrictLHSPostfix:  'Postfix increment/decrement may not have eval or arguments operand in strict mode',
        StrictLHSPrefix:  'Prefix increment/decrement may not have eval or arguments operand in strict mode',
        StrictReservedWord:  'Use of future reserved word in strict mode',
        NewlineAfterModule:  'Illegal newline after module',
        NoFromAfterImport: 'Missing from after import',
        InvalidModuleSpecifier: 'Invalid module specifier',
        NestedModule: 'Module declaration can not be nested',
        NoUnintializedConst: 'Const must be initialized',
        ComprehensionRequiresBlock: 'Comprehension must have at least one block',
        ComprehensionError:  'Comprehension Error',
        EachNotAllowed:  'Each is not supported',
        InvalidXJSAttributeValue: 'XJS value should be either an expression or a quoted XJS text',
        ExpectedXJSClosingTag: 'Expected corresponding XJS closing tag for %0',
        AdjacentXJSElements: 'Adjacent XJS elements must be wrapped in an enclosing tag'
    };

    // See also tools/generate-unicode-regex.py.
    Regex = {
        NonAsciiIdentifierStart: new RegExp('[\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc]'),
        NonAsciiIdentifierPart: new RegExp('[\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0300-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u0483-\u0487\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u05d0-\u05ea\u05f0-\u05f2\u0610-\u061a\u0620-\u0669\u066e-\u06d3\u06d5-\u06dc\u06df-\u06e8\u06ea-\u06fc\u06ff\u0710-\u074a\u074d-\u07b1\u07c0-\u07f5\u07fa\u0800-\u082d\u0840-\u085b\u08a0\u08a2-\u08ac\u08e4-\u08fe\u0900-\u0963\u0966-\u096f\u0971-\u0977\u0979-\u097f\u0981-\u0983\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bc-\u09c4\u09c7\u09c8\u09cb-\u09ce\u09d7\u09dc\u09dd\u09df-\u09e3\u09e6-\u09f1\u0a01-\u0a03\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a59-\u0a5c\u0a5e\u0a66-\u0a75\u0a81-\u0a83\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abc-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ad0\u0ae0-\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3c-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b5c\u0b5d\u0b5f-\u0b63\u0b66-\u0b6f\u0b71\u0b82\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd0\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c58\u0c59\u0c60-\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbc-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0cde\u0ce0-\u0ce3\u0ce6-\u0cef\u0cf1\u0cf2\u0d02\u0d03\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d-\u0d44\u0d46-\u0d48\u0d4a-\u0d4e\u0d57\u0d60-\u0d63\u0d66-\u0d6f\u0d7a-\u0d7f\u0d82\u0d83\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e01-\u0e3a\u0e40-\u0e4e\u0e50-\u0e59\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb9\u0ebb-\u0ebd\u0ec0-\u0ec4\u0ec6\u0ec8-\u0ecd\u0ed0-\u0ed9\u0edc-\u0edf\u0f00\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e-\u0f47\u0f49-\u0f6c\u0f71-\u0f84\u0f86-\u0f97\u0f99-\u0fbc\u0fc6\u1000-\u1049\u1050-\u109d\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u135d-\u135f\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176c\u176e-\u1770\u1772\u1773\u1780-\u17d3\u17d7\u17dc\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u1820-\u1877\u1880-\u18aa\u18b0-\u18f5\u1900-\u191c\u1920-\u192b\u1930-\u193b\u1946-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u19d0-\u19d9\u1a00-\u1a1b\u1a20-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1aa7\u1b00-\u1b4b\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1bf3\u1c00-\u1c37\u1c40-\u1c49\u1c4d-\u1c7d\u1cd0-\u1cd2\u1cd4-\u1cf6\u1d00-\u1de6\u1dfc-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u200c\u200d\u203f\u2040\u2054\u2071\u207f\u2090-\u209c\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d7f-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2de0-\u2dff\u2e2f\u3005-\u3007\u3021-\u302f\u3031-\u3035\u3038-\u303c\u3041-\u3096\u3099\u309a\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua62b\ua640-\ua66f\ua674-\ua67d\ua67f-\ua697\ua69f-\ua6f1\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua827\ua840-\ua873\ua880-\ua8c4\ua8d0-\ua8d9\ua8e0-\ua8f7\ua8fb\ua900-\ua92d\ua930-\ua953\ua960-\ua97c\ua980-\ua9c0\ua9cf-\ua9d9\uaa00-\uaa36\uaa40-\uaa4d\uaa50-\uaa59\uaa60-\uaa76\uaa7a\uaa7b\uaa80-\uaac2\uaadb-\uaadd\uaae0-\uaaef\uaaf2-\uaaf6\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabea\uabec\uabed\uabf0-\uabf9\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\ufe70-\ufe74\ufe76-\ufefc\uff10-\uff19\uff21-\uff3a\uff3f\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc]')
    };

    // Ensure the condition is true, otherwise throw an error.
    // This is only to have a better contract semantic, i.e. another safety net
    // to catch a logic error. The condition shall be fulfilled in normal case.
    // Do NOT use this to enforce a certain condition on any user input.

    function assert(condition, message) {
        if (!condition) {
            throw new Error('ASSERT: ' + message);
        }
    }

    function isDecimalDigit(ch) {
        return (ch >= 48 && ch <= 57);   // 0..9
    }

    function isHexDigit(ch) {
        return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;
    }

    function isOctalDigit(ch) {
        return '01234567'.indexOf(ch) >= 0;
    }


    // 7.2 White Space

    function isWhiteSpace(ch) {
        return (ch === 32) ||  // space
            (ch === 9) ||      // tab
            (ch === 0xB) ||
            (ch === 0xC) ||
            (ch === 0xA0) ||
            (ch >= 0x1680 && '\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\uFEFF'.indexOf(String.fromCharCode(ch)) > 0);
    }

    // 7.3 Line Terminators

    function isLineTerminator(ch) {
        return (ch === 10) || (ch === 13) || (ch === 0x2028) || (ch === 0x2029);
    }

    // 7.6 Identifier Names and Identifiers

    function isIdentifierStart(ch) {
        return (ch === 36) || (ch === 95) ||  // $ (dollar) and _ (underscore)
            (ch >= 65 && ch <= 90) ||         // A..Z
            (ch >= 97 && ch <= 122) ||        // a..z
            (ch === 92) ||                    // \ (backslash)
            ((ch >= 0x80) && Regex.NonAsciiIdentifierStart.test(String.fromCharCode(ch)));
    }

    function isIdentifierPart(ch) {
        return (ch === 36) || (ch === 95) ||  // $ (dollar) and _ (underscore)
            (ch >= 65 && ch <= 90) ||         // A..Z
            (ch >= 97 && ch <= 122) ||        // a..z
            (ch >= 48 && ch <= 57) ||         // 0..9
            (ch === 92) ||                    // \ (backslash)
            ((ch >= 0x80) && Regex.NonAsciiIdentifierPart.test(String.fromCharCode(ch)));
    }

    // 7.6.1.2 Future Reserved Words

    function isFutureReservedWord(id) {
        switch (id) {
        case 'class':
        case 'enum':
        case 'export':
        case 'extends':
        case 'import':
        case 'super':
            return true;
        default:
            return false;
        }
    }

    function isStrictModeReservedWord(id) {
        switch (id) {
        case 'implements':
        case 'interface':
        case 'package':
        case 'private':
        case 'protected':
        case 'public':
        case 'static':
        case 'yield':
        case 'let':
            return true;
        default:
            return false;
        }
    }

    function isRestrictedWord(id) {
        return id === 'eval' || id === 'arguments';
    }

    // 7.6.1.1 Keywords

    function isKeyword(id) {
        if (strict && isStrictModeReservedWord(id)) {
            return true;
        }

        // 'const' is specialized as Keyword in V8.
        // 'yield' is only treated as a keyword in strict mode.
        // 'let' is for compatiblity with SpiderMonkey and ES.next.
        // Some others are from future reserved words.

        switch (id.length) {
        case 2:
            return (id === 'if') || (id === 'in') || (id === 'do');
        case 3:
            return (id === 'var') || (id === 'for') || (id === 'new') ||
                (id === 'try') || (id === 'let');
        case 4:
            return (id === 'this') || (id === 'else') || (id === 'case') ||
                (id === 'void') || (id === 'with') || (id === 'enum');
        case 5:
            return (id === 'while') || (id === 'break') || (id === 'catch') ||
                (id === 'throw') || (id === 'const') ||
                (id === 'class') || (id === 'super');
        case 6:
            return (id === 'return') || (id === 'typeof') || (id === 'delete') ||
                (id === 'switch') || (id === 'export') || (id === 'import');
        case 7:
            return (id === 'default') || (id === 'finally') || (id === 'extends');
        case 8:
            return (id === 'function') || (id === 'continue') || (id === 'debugger');
        case 10:
            return (id === 'instanceof');
        default:
            return false;
        }
    }

    // 7.4 Comments

    function skipComment() {
        var ch, blockComment, lineComment;

        blockComment = false;
        lineComment = false;

        while (index < length) {
            ch = source.charCodeAt(index);

            if (lineComment) {
                ++index;
                if (isLineTerminator(ch)) {
                    lineComment = false;
                    if (ch === 13 && source.charCodeAt(index) === 10) {
                        ++index;
                    }
                    ++lineNumber;
                    lineStart = index;
                }
            } else if (blockComment) {
                if (isLineTerminator(ch)) {
                    if (ch === 13) {
                        ++index;
                    }
                    if (ch !== 13 || source.charCodeAt(index) === 10) {
                        ++lineNumber;
                        ++index;
                        lineStart = index;
                        if (index >= length) {
                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                        }
                    }
                } else {
                    ch = source.charCodeAt(index++);
                    if (index >= length) {
                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                    }
                    // Block comment ends with '*/' (char #42, char #47).
                    if (ch === 42) {
                        ch = source.charCodeAt(index);
                        if (ch === 47) {
                            ++index;
                            blockComment = false;
                        }
                    }
                }
            } else if (ch === 47) {
                ch = source.charCodeAt(index + 1);
                // Line comment starts with '//' (char #47, char #47).
                if (ch === 47) {
                    index += 2;
                    lineComment = true;
                } else if (ch === 42) {
                    // Block comment starts with '/*' (char #47, char #42).
                    index += 2;
                    blockComment = true;
                    if (index >= length) {
                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                    }
                } else {
                    break;
                }
            } else if (isWhiteSpace(ch)) {
                ++index;
            } else if (isLineTerminator(ch)) {
                ++index;
                if (ch === 13 && source.charCodeAt(index) === 10) {
                    ++index;
                }
                ++lineNumber;
                lineStart = index;
            } else {
                break;
            }
        }
    }

    function scanHexEscape(prefix) {
        var i, len, ch, code = 0;

        len = (prefix === 'u') ? 4 : 2;
        for (i = 0; i < len; ++i) {
            if (index < length && isHexDigit(source[index])) {
                ch = source[index++];
                code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
            } else {
                return '';
            }
        }
        return String.fromCharCode(code);
    }

    function scanUnicodeCodePointEscape() {
        var ch, code, cu1, cu2;

        ch = source[index];
        code = 0;

        // At least, one hex digit is required.
        if (ch === '}') {
            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
        }

        while (index < length) {
            ch = source[index++];
            if (!isHexDigit(ch)) {
                break;
            }
            code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
        }

        if (code > 0x10FFFF || ch !== '}') {
            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
        }

        // UTF-16 Encoding
        if (code <= 0xFFFF) {
            return String.fromCharCode(code);
        }
        cu1 = ((code - 0x10000) >> 10) + 0xD800;
        cu2 = ((code - 0x10000) & 1023) + 0xDC00;
        return String.fromCharCode(cu1, cu2);
    }

    function getEscapedIdentifier() {
        var ch, id;

        ch = source.charCodeAt(index++);
        id = String.fromCharCode(ch);

        // '\u' (char #92, char #117) denotes an escaped character.
        if (ch === 92) {
            if (source.charCodeAt(index) !== 117) {
                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
            }
            ++index;
            ch = scanHexEscape('u');
            if (!ch || ch === '\\' || !isIdentifierStart(ch.charCodeAt(0))) {
                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
            }
            id = ch;
        }

        while (index < length) {
            ch = source.charCodeAt(index);
            if (!isIdentifierPart(ch)) {
                break;
            }
            ++index;
            id += String.fromCharCode(ch);

            // '\u' (char #92, char #117) denotes an escaped character.
            if (ch === 92) {
                id = id.substr(0, id.length - 1);
                if (source.charCodeAt(index) !== 117) {
                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                }
                ++index;
                ch = scanHexEscape('u');
                if (!ch || ch === '\\' || !isIdentifierPart(ch.charCodeAt(0))) {
                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                }
                id += ch;
            }
        }

        return id;
    }

    function getIdentifier() {
        var start, ch;

        start = index++;
        while (index < length) {
            ch = source.charCodeAt(index);
            if (ch === 92) {
                // Blackslash (char #92) marks Unicode escape sequence.
                index = start;
                return getEscapedIdentifier();
            }
            if (isIdentifierPart(ch)) {
                ++index;
            } else {
                break;
            }
        }

        return source.slice(start, index);
    }

    function scanIdentifier() {
        var start, id, type;

        start = index;

        // Backslash (char #92) starts an escaped character.
        id = (source.charCodeAt(index) === 92) ? getEscapedIdentifier() : getIdentifier();

        // There is no keyword or literal with only one character.
        // Thus, it must be an identifier.
        if (id.length === 1) {
            type = Token.Identifier;
        } else if (isKeyword(id)) {
            type = Token.Keyword;
        } else if (id === 'null') {
            type = Token.NullLiteral;
        } else if (id === 'true' || id === 'false') {
            type = Token.BooleanLiteral;
        } else {
            type = Token.Identifier;
        }

        return {
            type: type,
            value: id,
            lineNumber: lineNumber,
            lineStart: lineStart,
            range: [start, index]
        };
    }


    // 7.7 Punctuators

    function scanPunctuator() {
        var start = index,
            code = source.charCodeAt(index),
            code2,
            ch1 = source[index],
            ch2,
            ch3,
            ch4;

        switch (code) {
        // Check for most common single-character punctuators.
        case 40:   // ( open bracket
        case 41:   // ) close bracket
        case 59:   // ; semicolon
        case 44:   // , comma
        case 123:  // { open curly brace
        case 125:  // } close curly brace
        case 91:   // [
        case 93:   // ]
        case 58:   // :
        case 63:   // ?
        case 126:  // ~
            ++index;
            if (extra.tokenize) {
                if (code === 40) {
                    extra.openParenToken = extra.tokens.length;
                } else if (code === 123) {
                    extra.openCurlyToken = extra.tokens.length;
                }
            }
            return {
                type: Token.Punctuator,
                value: String.fromCharCode(code),
                lineNumber: lineNumber,
                lineStart: lineStart,
                range: [start, index]
            };

        default:
            code2 = source.charCodeAt(index + 1);

            // '=' (char #61) marks an assignment or comparison operator.
            if (code2 === 61) {
                switch (code) {
                case 37:  // %
                case 38:  // &
                case 42:  // *:
                case 43:  // +
                case 45:  // -
                case 47:  // /
                case 60:  // <
                case 62:  // >
                case 94:  // ^
                case 124: // |
                    index += 2;
                    return {
                        type: Token.Punctuator,
                        value: String.fromCharCode(code) + String.fromCharCode(code2),
                        lineNumber: lineNumber,
                        lineStart: lineStart,
                        range: [start, index]
                    };

                case 33: // !
                case 61: // =
                    index += 2;

                    // !== and ===
                    if (source.charCodeAt(index) === 61) {
                        ++index;
                    }
                    return {
                        type: Token.Punctuator,
                        value: source.slice(start, index),
                        lineNumber: lineNumber,
                        lineStart: lineStart,
                        range: [start, index]
                    };
                default:
                    break;
                }
            }
            break;
        }

        // Peek more characters.

        ch2 = source[index + 1];
        ch3 = source[index + 2];
        ch4 = source[index + 3];

        // 4-character punctuator: >>>=

        if (ch1 === '>' && ch2 === '>' && ch3 === '>') {
            if (ch4 === '=') {
                index += 4;
                return {
                    type: Token.Punctuator,
                    value: '>>>=',
                    lineNumber: lineNumber,
                    lineStart: lineStart,
                    range: [start, index]
                };
            }
        }

        // 3-character punctuators: === !== >>> <<= >>=

        if (ch1 === '>' && ch2 === '>' && ch3 === '>') {
            index += 3;
            return {
                type: Token.Punctuator,
                value: '>>>',
                lineNumber: lineNumber,
                lineStart: lineStart,
                range: [start, index]
            };
        }

        if (ch1 === '<' && ch2 === '<' && ch3 === '=') {
            index += 3;
            return {
                type: Token.Punctuator,
                value: '<<=',
                lineNumber: lineNumber,
                lineStart: lineStart,
                range: [start, index]
            };
        }

        if (ch1 === '>' && ch2 === '>' && ch3 === '=') {
            index += 3;
            return {
                type: Token.Punctuator,
                value: '>>=',
                lineNumber: lineNumber,
                lineStart: lineStart,
                range: [start, index]
            };
        }

        if (ch1 === '.' && ch2 === '.' && ch3 === '.') {
            index += 3;
            return {
                type: Token.Punctuator,
                value: '...',
                lineNumber: lineNumber,
                lineStart: lineStart,
                range: [start, index]
            };
        }

        // Other 2-character punctuators: ++ -- << >> && ||

        if (ch1 === ch2 && ('+-<>&|'.indexOf(ch1) >= 0)) {
            index += 2;
            return {
                type: Token.Punctuator,
                value: ch1 + ch2,
                lineNumber: lineNumber,
                lineStart: lineStart,
                range: [start, index]
            };
        }

        if (ch1 === '=' && ch2 === '>') {
            index += 2;
            return {
                type: Token.Punctuator,
                value: '=>',
                lineNumber: lineNumber,
                lineStart: lineStart,
                range: [start, index]
            };
        }

        if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {
            ++index;
            return {
                type: Token.Punctuator,
                value: ch1,
                lineNumber: lineNumber,
                lineStart: lineStart,
                range: [start, index]
            };
        }

        if (ch1 === '.') {
            ++index;
            return {
                type: Token.Punctuator,
                value: ch1,
                lineNumber: lineNumber,
                lineStart: lineStart,
                range: [start, index]
            };
        }

        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
    }

    // 7.8.3 Numeric Literals

    function scanHexLiteral(start) {
        var number = '';

        while (index < length) {
            if (!isHexDigit(source[index])) {
                break;
            }
            number += source[index++];
        }

        if (number.length === 0) {
            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
        }

        if (isIdentifierStart(source.charCodeAt(index))) {
            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
        }

        return {
            type: Token.NumericLiteral,
            value: parseInt('0x' + number, 16),
            lineNumber: lineNumber,
            lineStart: lineStart,
            range: [start, index]
        };
    }

    function scanOctalLiteral(prefix, start) {
        var number, octal;

        if (isOctalDigit(prefix)) {
            octal = true;
            number = '0' + source[index++];
        } else {
            octal = false;
            ++index;
            number = '';
        }

        while (index < length) {
            if (!isOctalDigit(source[index])) {
                break;
            }
            number += source[index++];
        }

        if (!octal && number.length === 0) {
            // only 0o or 0O
            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
        }

        if (isIdentifierStart(source.charCodeAt(index)) || isDecimalDigit(source.charCodeAt(index))) {
            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
        }

        return {
            type: Token.NumericLiteral,
            value: parseInt(number, 8),
            octal: octal,
            lineNumber: lineNumber,
            lineStart: lineStart,
            range: [start, index]
        };
    }

    function scanNumericLiteral() {
        var number, start, ch, octal;

        ch = source[index];
        assert(isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'),
            'Numeric literal must start with a decimal digit or a decimal point');

        start = index;
        number = '';
        if (ch !== '.') {
            number = source[index++];
            ch = source[index];

            // Hex number starts with '0x'.
            // Octal number starts with '0'.
            // Octal number in ES6 starts with '0o'.
            // Binary number in ES6 starts with '0b'.
            if (number === '0') {
                if (ch === 'x' || ch === 'X') {
                    ++index;
                    return scanHexLiteral(start);
                }
                if (ch === 'b' || ch === 'B') {
                    ++index;
                    number = '';

                    while (index < length) {
                        ch = source[index];
                        if (ch !== '0' && ch !== '1') {
                            break;
                        }
                        number += source[index++];
                    }

                    if (number.length === 0) {
                        // only 0b or 0B
                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                    }

                    if (index < length) {
                        ch = source.charCodeAt(index);
                        if (isIdentifierStart(ch) || isDecimalDigit(ch)) {
                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                        }
                    }
                    return {
                        type: Token.NumericLiteral,
                        value: parseInt(number, 2),
                        lineNumber: lineNumber,
                        lineStart: lineStart,
                        range: [start, index]
                    };
                }
                if (ch === 'o' || ch === 'O' || isOctalDigit(ch)) {
                    return scanOctalLiteral(ch, start);
                }
                // decimal number starts with '0' such as '09' is illegal.
                if (ch && isDecimalDigit(ch.charCodeAt(0))) {
                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                }
            }

            while (isDecimalDigit(source.charCodeAt(index))) {
                number += source[index++];
            }
            ch = source[index];
        }

        if (ch === '.') {
            number += source[index++];
            while (isDecimalDigit(source.charCodeAt(index))) {
                number += source[index++];
            }
            ch = source[index];
        }

        if (ch === 'e' || ch === 'E') {
            number += source[index++];

            ch = source[index];
            if (ch === '+' || ch === '-') {
                number += source[index++];
            }
            if (isDecimalDigit(source.charCodeAt(index))) {
                while (isDecimalDigit(source.charCodeAt(index))) {
                    number += source[index++];
                }
            } else {
                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
            }
        }

        if (isIdentifierStart(source.charCodeAt(index))) {
            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
        }

        return {
            type: Token.NumericLiteral,
            value: parseFloat(number),
            lineNumber: lineNumber,
            lineStart: lineStart,
            range: [start, index]
        };
    }

    // 7.8.4 String Literals

    function scanStringLiteral() {
        var str = '', quote, start, ch, code, unescaped, restore, octal = false;

        quote = source[index];
        assert((quote === '\'' || quote === '"'),
            'String literal must starts with a quote');

        start = index;
        ++index;

        while (index < length) {
            ch = source[index++];

            if (ch === quote) {
                quote = '';
                break;
            } else if (ch === '\\') {
                ch = source[index++];
                if (!ch || !isLineTerminator(ch.charCodeAt(0))) {
                    switch (ch) {
                    case 'n':
                        str += '\n';
                        break;
                    case 'r':
                        str += '\r';
                        break;
                    case 't':
                        str += '\t';
                        break;
                    case 'u':
                    case 'x':
                        if (source[index] === '{') {
                            ++index;
                            str += scanUnicodeCodePointEscape();
                        } else {
                            restore = index;
                            unescaped = scanHexEscape(ch);
                            if (unescaped) {
                                str += unescaped;
                            } else {
                                index = restore;
                                str += ch;
                            }
                        }
                        break;
                    case 'b':
                        str += '\b';
                        break;
                    case 'f':
                        str += '\f';
                        break;
                    case 'v':
                        str += '\x0B';
                        break;

                    default:
                        if (isOctalDigit(ch)) {
                            code = '01234567'.indexOf(ch);

                            // \0 is not octal escape sequence
                            if (code !== 0) {
                                octal = true;
                            }

                            if (index < length && isOctalDigit(source[index])) {
                                octal = true;
                                code = code * 8 + '01234567'.indexOf(source[index++]);

                                // 3 digits are only allowed when string starts
                                // with 0, 1, 2, 3
                                if ('0123'.indexOf(ch) >= 0 &&
                                        index < length &&
                                        isOctalDigit(source[index])) {
                                    code = code * 8 + '01234567'.indexOf(source[index++]);
                                }
                            }
                            str += String.fromCharCode(code);
                        } else {
                            str += ch;
                        }
                        break;
                    }
                } else {
                    ++lineNumber;
                    if (ch ===  '\r' && source[index] === '\n') {
                        ++index;
                    }
                    lineStart = index;
                }
            } else if (isLineTerminator(ch.charCodeAt(0))) {
                break;
            } else {
                str += ch;
            }
        }

        if (quote !== '') {
            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
        }

        return {
            type: Token.StringLiteral,
            value: str,
            octal: octal,
            lineNumber: lineNumber,
            lineStart: lineStart,
            range: [start, index]
        };
    }

    function scanTemplate() {
        var cooked = '', ch, start, terminated, tail, restore, unescaped, code, octal;

        terminated = false;
        tail = false;
        start = index;

        ++index;

        while (index < length) {
            ch = source[index++];
            if (ch === '`') {
                tail = true;
                terminated = true;
                break;
            } else if (ch === '$') {
                if (source[index] === '{') {
                    ++index;
                    terminated = true;
                    break;
                }
                cooked += ch;
            } else if (ch === '\\') {
                ch = source[index++];
                if (!isLineTerminator(ch.charCodeAt(0))) {
                    switch (ch) {
                    case 'n':
                        cooked += '\n';
                        break;
                    case 'r':
                        cooked += '\r';
                        break;
                    case 't':
                        cooked += '\t';
                        break;
                    case 'u':
                    case 'x':
                        if (source[index] === '{') {
                            ++index;
                            cooked += scanUnicodeCodePointEscape();
                        } else {
                            restore = index;
                            unescaped = scanHexEscape(ch);
                            if (unescaped) {
                                cooked += unescaped;
                            } else {
                                index = restore;
                                cooked += ch;
                            }
                        }
                        break;
                    case 'b':
                        cooked += '\b';
                        break;
                    case 'f':
                        cooked += '\f';
                        break;
                    case 'v':
                        cooked += '\v';
                        break;

                    default:
                        if (isOctalDigit(ch)) {
                            code = '01234567'.indexOf(ch);

                            // \0 is not octal escape sequence
                            if (code !== 0) {
                                octal = true;
                            }

                            if (index < length && isOctalDigit(source[index])) {
                                octal = true;
                                code = code * 8 + '01234567'.indexOf(source[index++]);

                                // 3 digits are only allowed when string starts
                                // with 0, 1, 2, 3
                                if ('0123'.indexOf(ch) >= 0 &&
                                        index < length &&
                                        isOctalDigit(source[index])) {
                                    code = code * 8 + '01234567'.indexOf(source[index++]);
                                }
                            }
                            cooked += String.fromCharCode(code);
                        } else {
                            cooked += ch;
                        }
                        break;
                    }
                } else {
                    ++lineNumber;
                    if (ch ===  '\r' && source[index] === '\n') {
                        ++index;
                    }
                    lineStart = index;
                }
            } else if (isLineTerminator(ch.charCodeAt(0))) {
                ++lineNumber;
                if (ch ===  '\r' && source[index] === '\n') {
                    ++index;
                }
                lineStart = index;
                cooked += '\n';
            } else {
                cooked += ch;
            }
        }

        if (!terminated) {
            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
        }

        return {
            type: Token.Template,
            value: {
                cooked: cooked,
                raw: source.slice(start + 1, index - ((tail) ? 1 : 2))
            },
            tail: tail,
            octal: octal,
            lineNumber: lineNumber,
            lineStart: lineStart,
            range: [start, index]
        };
    }

    function scanTemplateElement(option) {
        var startsWith, template;

        lookahead = null;
        skipComment();

        startsWith = (option.head) ? '`' : '}';

        if (source[index] !== startsWith) {
            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
        }

        template = scanTemplate();

        peek();

        return template;
    }

    function scanRegExp() {
        var str, ch, start, pattern, flags, value, classMarker = false, restore, terminated = false;

        lookahead = null;
        skipComment();

        start = index;
        ch = source[index];
        assert(ch === '/', 'Regular expression literal must start with a slash');
        str = source[index++];

        while (index < length) {
            ch = source[index++];
            str += ch;
            if (classMarker) {
                if (ch === ']') {
                    classMarker = false;
                }
            } else {
                if (ch === '\\') {
                    ch = source[index++];
                    // ECMA-262 7.8.5
                    if (isLineTerminator(ch.charCodeAt(0))) {
                        throwError({}, Messages.UnterminatedRegExp);
                    }
                    str += ch;
                } else if (ch === '/') {
                    terminated = true;
                    break;
                } else if (ch === '[') {
                    classMarker = true;
                } else if (isLineTerminator(ch.charCodeAt(0))) {
                    throwError({}, Messages.UnterminatedRegExp);
                }
            }
        }

        if (!terminated) {
            throwError({}, Messages.UnterminatedRegExp);
        }

        // Exclude leading and trailing slash.
        pattern = str.substr(1, str.length - 2);

        flags = '';
        while (index < length) {
            ch = source[index];
            if (!isIdentifierPart(ch.charCodeAt(0))) {
                break;
            }

            ++index;
            if (ch === '\\' && index < length) {
                ch = source[index];
                if (ch === 'u') {
                    ++index;
                    restore = index;
                    ch = scanHexEscape('u');
                    if (ch) {
                        flags += ch;
                        for (str += '\\u'; restore < index; ++restore) {
                            str += source[restore];
                        }
                    } else {
                        index = restore;
                        flags += 'u';
                        str += '\\u';
                    }
                } else {
                    str += '\\';
                }
            } else {
                flags += ch;
                str += ch;
            }
        }

        try {
            value = new RegExp(pattern, flags);
        } catch (e) {
            throwError({}, Messages.InvalidRegExp);
        }

        peek();


        if (extra.tokenize) {
            return {
                type: Token.RegularExpression,
                value: value,
                lineNumber: lineNumber,
                lineStart: lineStart,
                range: [start, index]
            };
        }
        return {
            literal: str,
            value: value,
            range: [start, index]
        };
    }

    function isIdentifierName(token) {
        return token.type === Token.Identifier ||
            token.type === Token.Keyword ||
            token.type === Token.BooleanLiteral ||
            token.type === Token.NullLiteral;
    }

    function advanceSlash() {
        var prevToken,
            checkToken;
        // Using the following algorithm:
        // https://github.com/mozilla/sweet.js/wiki/design
        prevToken = extra.tokens[extra.tokens.length - 1];
        if (!prevToken) {
            // Nothing before that: it cannot be a division.
            return scanRegExp();
        }
        if (prevToken.type === 'Punctuator') {
            if (prevToken.value === ')') {
                checkToken = extra.tokens[extra.openParenToken - 1];
                if (checkToken &&
                        checkToken.type === 'Keyword' &&
                        (checkToken.value === 'if' ||
                         checkToken.value === 'while' ||
                         checkToken.value === 'for' ||
                         checkToken.value === 'with')) {
                    return scanRegExp();
                }
                return scanPunctuator();
            }
            if (prevToken.value === '}') {
                // Dividing a function by anything makes little sense,
                // but we have to check for that.
                if (extra.tokens[extra.openCurlyToken - 3] &&
                        extra.tokens[extra.openCurlyToken - 3].type === 'Keyword') {
                    // Anonymous function.
                    checkToken = extra.tokens[extra.openCurlyToken - 4];
                    if (!checkToken) {
                        return scanPunctuator();
                    }
                } else if (extra.tokens[extra.openCurlyToken - 4] &&
                        extra.tokens[extra.openCurlyToken - 4].type === 'Keyword') {
                    // Named function.
                    checkToken = extra.tokens[extra.openCurlyToken - 5];
                    if (!checkToken) {
                        return scanRegExp();
                    }
                } else {
                    return scanPunctuator();
                }
                // checkToken determines whether the function is
                // a declaration or an expression.
                if (FnExprTokens.indexOf(checkToken.value) >= 0) {
                    // It is an expression.
                    return scanPunctuator();
                }
                // It is a declaration.
                return scanRegExp();
            }
            return scanRegExp();
        }
        if (prevToken.type === 'Keyword') {
            return scanRegExp();
        }
        return scanPunctuator();
    }

    function advance() {
        var ch;

        if (!state.inXJSChild) {
            skipComment();
        }

        if (index >= length) {
            return {
                type: Token.EOF,
                lineNumber: lineNumber,
                lineStart: lineStart,
                range: [index, index]
            };
        }

        if (state.inXJSChild) {
            return advanceXJSChild();
        }

        ch = source.charCodeAt(index);

        // Very common: ( and ) and ;
        if (ch === 40 || ch === 41 || ch === 58) {
            return scanPunctuator();
        }

        // String literal starts with single quote (#39) or double quote (#34).
        if (ch === 39 || ch === 34) {
            if (state.inXJSTag) {
                return scanXJSStringLiteral();
            }
            return scanStringLiteral();
        }

        if (state.inXJSTag && isXJSIdentifierStart(ch)) {
            return scanXJSIdentifier();
        }

        if (ch === 96) {
            return scanTemplate();
        }
        if (isIdentifierStart(ch)) {
            return scanIdentifier();
        }

        // Dot (.) char #46 can also start a floating-point number, hence the need
        // to check the next character.
        if (ch === 46) {
            if (isDecimalDigit(source.charCodeAt(index + 1))) {
                return scanNumericLiteral();
            }
            return scanPunctuator();
        }

        if (isDecimalDigit(ch)) {
            return scanNumericLiteral();
        }

        // Slash (/) char #47 can also start a regex.
        if (extra.tokenize && ch === 47) {
            return advanceSlash();
        }

        return scanPunctuator();
    }

    function lex() {
        var token;

        token = lookahead;
        index = token.range[1];
        lineNumber = token.lineNumber;
        lineStart = token.lineStart;

        lookahead = advance();

        index = token.range[1];
        lineNumber = token.lineNumber;
        lineStart = token.lineStart;

        return token;
    }

    function peek() {
        var pos, line, start;

        pos = index;
        line = lineNumber;
        start = lineStart;
        lookahead = advance();
        index = pos;
        lineNumber = line;
        lineStart = start;
    }

    function lookahead2() {
        var adv, pos, line, start, result;

        // If we are collecting the tokens, don't grab the next one yet.
        adv = (typeof extra.advance === 'function') ? extra.advance : advance;

        pos = index;
        line = lineNumber;
        start = lineStart;

        // Scan for the next immediate token.
        if (lookahead === null) {
            lookahead = adv();
        }
        index = lookahead.range[1];
        lineNumber = lookahead.lineNumber;
        lineStart = lookahead.lineStart;

        // Grab the token right after.
        result = adv();
        index = pos;
        lineNumber = line;
        lineStart = start;

        return result;
    }

    function markerCreate() {
        if (!extra.loc && !extra.range) {
            return undefined;
        }
        skipComment();
        return {offset: index, line: lineNumber, col: index - lineStart};
    }

    function markerCreatePreserveWhitespace() {
        if (!extra.loc && !extra.range) {
            return undefined;
        }
        return {offset: index, line: lineNumber, col: index - lineStart};
    }

    function processComment(node) {
        var lastChild,
            trailingComments,
            bottomRight = extra.bottomRightStack,
            last = bottomRight[bottomRight.length - 1];

        if (node.type === Syntax.Program) {
            if (node.body.length > 0) {
                return;
            }
        }

        if (extra.trailingComments.length > 0) {
            if (extra.trailingComments[0].range[0] >= node.range[1]) {
                trailingComments = extra.trailingComments;
                extra.trailingComments = [];
            } else {
                extra.trailingComments.length = 0;
            }
        } else {
            if (last && last.trailingComments && last.trailingComments[0].range[0] >= node.range[1]) {
                trailingComments = last.trailingComments;
                delete last.trailingComments;
            }
        }

        // Eating the stack.
        if (last) {
            while (last && last.range[0] >= node.range[0]) {
                lastChild = last;
                last = bottomRight.pop();
            }
        }

        if (lastChild) {
            if (lastChild.leadingComments && lastChild.leadingComments[lastChild.leadingComments.length - 1].range[1] <= node.range[0]) {
                node.leadingComments = lastChild.leadingComments;
                delete lastChild.leadingComments;
            }
        } else if (extra.leadingComments.length > 0 && extra.leadingComments[extra.leadingComments.length - 1].range[1] <= node.range[0]) {
            node.leadingComments = extra.leadingComments;
            extra.leadingComments = [];
        }

        if (trailingComments) {
            node.trailingComments = trailingComments;
        }

        bottomRight.push(node);
    }

    function markerApply(marker, node) {
        if (extra.range) {
            node.range = [marker.offset, index];
        }
        if (extra.loc) {
            node.loc = {
                start: {
                    line: marker.line,
                    column: marker.col
                },
                end: {
                    line: lineNumber,
                    column: index - lineStart
                }
            };
            node = delegate.postProcess(node);
        }
        if (extra.attachComment) {
            processComment(node);
        }
        return node;
    }

    SyntaxTreeDelegate = {

        name: 'SyntaxTree',

        postProcess: function (node) {
            return node;
        },

        createArrayExpression: function (elements) {
            return {
                type: Syntax.ArrayExpression,
                elements: elements
            };
        },

        createAssignmentExpression: function (operator, left, right) {
            return {
                type: Syntax.AssignmentExpression,
                operator: operator,
                left: left,
                right: right
            };
        },

        createBinaryExpression: function (operator, left, right) {
            var type = (operator === '||' || operator === '&&') ? Syntax.LogicalExpression :
                        Syntax.BinaryExpression;
            return {
                type: type,
                operator: operator,
                left: left,
                right: right
            };
        },

        createBlockStatement: function (body) {
            return {
                type: Syntax.BlockStatement,
                body: body
            };
        },

        createBreakStatement: function (label) {
            return {
                type: Syntax.BreakStatement,
                label: label
            };
        },

        createCallExpression: function (callee, args) {
            return {
                type: Syntax.CallExpression,
                callee: callee,
                'arguments': args
            };
        },

        createCatchClause: function (param, body) {
            return {
                type: Syntax.CatchClause,
                param: param,
                body: body
            };
        },

        createConditionalExpression: function (test, consequent, alternate) {
            return {
                type: Syntax.ConditionalExpression,
                test: test,
                consequent: consequent,
                alternate: alternate
            };
        },

        createContinueStatement: function (label) {
            return {
                type: Syntax.ContinueStatement,
                label: label
            };
        },

        createDebuggerStatement: function () {
            return {
                type: Syntax.DebuggerStatement
            };
        },

        createDoWhileStatement: function (body, test) {
            return {
                type: Syntax.DoWhileStatement,
                body: body,
                test: test
            };
        },

        createEmptyStatement: function () {
            return {
                type: Syntax.EmptyStatement
            };
        },

        createExpressionStatement: function (expression) {
            return {
                type: Syntax.ExpressionStatement,
                expression: expression
            };
        },

        createForStatement: function (init, test, update, body) {
            return {
                type: Syntax.ForStatement,
                init: init,
                test: test,
                update: update,
                body: body
            };
        },

        createForInStatement: function (left, right, body) {
            return {
                type: Syntax.ForInStatement,
                left: left,
                right: right,
                body: body,
                each: false
            };
        },

        createForOfStatement: function (left, right, body) {
            return {
                type: Syntax.ForOfStatement,
                left: left,
                right: right,
                body: body
            };
        },

        createFunctionDeclaration: function (id, params, defaults, body, rest, generator, expression,
                                             returnType, parametricType) {
            return {
                type: Syntax.FunctionDeclaration,
                id: id,
                params: params,
                defaults: defaults,
                body: body,
                rest: rest,
                generator: generator,
                expression: expression,
                returnType: returnType,
                parametricType: parametricType
            };
        },

        createFunctionExpression: function (id, params, defaults, body, rest, generator, expression,
                                            returnType, parametricType) {
            return {
                type: Syntax.FunctionExpression,
                id: id,
                params: params,
                defaults: defaults,
                body: body,
                rest: rest,
                generator: generator,
                expression: expression,
                returnType: returnType,
                parametricType: parametricType
            };
        },

        createIdentifier: function (name) {
            return {
                type: Syntax.Identifier,
                name: name,
                // Only here to initialize the shape of the object to ensure
                // that the 'typeAnnotation' key is ordered before others that
                // are added later (like 'loc' and 'range'). This just helps
                // keep the shape of Identifier nodes consistent with everything
                // else.
                typeAnnotation: undefined
            };
        },

        createTypeAnnotation: function (typeIdentifier, parametricType, params, returnType, nullable) {
            return {
                type: Syntax.TypeAnnotation,
                id: typeIdentifier,
                parametricType: parametricType,
                params: params,
                returnType: returnType,
                nullable: nullable
            };
        },

        createParametricTypeAnnotation: function (parametricTypes) {
            return {
                type: Syntax.ParametricTypeAnnotation,
                params: parametricTypes
            };
        },

        createVoidTypeAnnotation: function () {
            return {
                type: Syntax.VoidTypeAnnotation
            };
        },

        createObjectTypeAnnotation: function (properties, nullable) {
            return {
                type: Syntax.ObjectTypeAnnotation,
                properties: properties,
                nullable: nullable
            };
        },

        createTypeAnnotatedIdentifier: function (identifier, annotation, isOptionalParam) {
            return {
                type: Syntax.TypeAnnotatedIdentifier,
                id: identifier,
                annotation: annotation
            };
        },

        createOptionalParameter: function (identifier) {
            return {
                type: Syntax.OptionalParameter,
                id: identifier
            };
        },

        createXJSAttribute: function (name, value) {
            return {
                type: Syntax.XJSAttribute,
                name: name,
                value: value || null
            };
        },

        createXJSSpreadAttribute: function (argument) {
            return {
                type: Syntax.XJSSpreadAttribute,
                argument: argument
            };
        },

        createXJSIdentifier: function (name) {
            return {
                type: Syntax.XJSIdentifier,
                name: name
            };
        },

        createXJSNamespacedName: function (namespace, name) {
            return {
                type: Syntax.XJSNamespacedName,
                namespace: namespace,
                name: name
            };
        },

        createXJSMemberExpression: function (object, property) {
            return {
                type: Syntax.XJSMemberExpression,
                object: object,
                property: property
            };
        },

        createXJSElement: function (openingElement, closingElement, children) {
            return {
                type: Syntax.XJSElement,
                openingElement: openingElement,
                closingElement: closingElement,
                children: children
            };
        },

        createXJSEmptyExpression: function () {
            return {
                type: Syntax.XJSEmptyExpression
            };
        },

        createXJSExpressionContainer: function (expression) {
            return {
                type: Syntax.XJSExpressionContainer,
                expression: expression
            };
        },

        createXJSOpeningElement: function (name, attributes, selfClosing) {
            return {
                type: Syntax.XJSOpeningElement,
                name: name,
                selfClosing: selfClosing,
                attributes: attributes
            };
        },

        createXJSClosingElement: function (name) {
            return {
                type: Syntax.XJSClosingElement,
                name: name
            };
        },

        createIfStatement: function (test, consequent, alternate) {
            return {
                type: Syntax.IfStatement,
                test: test,
                consequent: consequent,
                alternate: alternate
            };
        },

        createLabeledStatement: function (label, body) {
            return {
                type: Syntax.LabeledStatement,
                label: label,
                body: body
            };
        },

        createLiteral: function (token) {
            return {
                type: Syntax.Literal,
                value: token.value,
                raw: source.slice(token.range[0], token.range[1])
            };
        },

        createMemberExpression: function (accessor, object, property) {
            return {
                type: Syntax.MemberExpression,
                computed: accessor === '[',
                object: object,
                property: property
            };
        },

        createNewExpression: function (callee, args) {
            return {
                type: Syntax.NewExpression,
                callee: callee,
                'arguments': args
            };
        },

        createObjectExpression: function (properties) {
            return {
                type: Syntax.ObjectExpression,
                properties: properties
            };
        },

        createPostfixExpression: function (operator, argument) {
            return {
                type: Syntax.UpdateExpression,
                operator: operator,
                argument: argument,
                prefix: false
            };
        },

        createProgram: function (body) {
            return {
                type: Syntax.Program,
                body: body
            };
        },

        createProperty: function (kind, key, value, method, shorthand, computed) {
            return {
                type: Syntax.Property,
                key: key,
                value: value,
                kind: kind,
                method: method,
                shorthand: shorthand,
                computed: computed
            };
        },

        createReturnStatement: function (argument) {
            return {
                type: Syntax.ReturnStatement,
                argument: argument
            };
        },

        createSequenceExpression: function (expressions) {
            return {
                type: Syntax.SequenceExpression,
                expressions: expressions
            };
        },

        createSwitchCase: function (test, consequent) {
            return {
                type: Syntax.SwitchCase,
                test: test,
                consequent: consequent
            };
        },

        createSwitchStatement: function (discriminant, cases) {
            return {
                type: Syntax.SwitchStatement,
                discriminant: discriminant,
                cases: cases
            };
        },

        createThisExpression: function () {
            return {
                type: Syntax.ThisExpression
            };
        },

        createThrowStatement: function (argument) {
            return {
                type: Syntax.ThrowStatement,
                argument: argument
            };
        },

        createTryStatement: function (block, guardedHandlers, handlers, finalizer) {
            return {
                type: Syntax.TryStatement,
                block: block,
                guardedHandlers: guardedHandlers,
                handlers: handlers,
                finalizer: finalizer
            };
        },

        createUnaryExpression: function (operator, argument) {
            if (operator === '++' || operator === '--') {
                return {
                    type: Syntax.UpdateExpression,
                    operator: operator,
                    argument: argument,
                    prefix: true
                };
            }
            return {
                type: Syntax.UnaryExpression,
                operator: operator,
                argument: argument,
                prefix: true
            };
        },

        createVariableDeclaration: function (declarations, kind) {
            return {
                type: Syntax.VariableDeclaration,
                declarations: declarations,
                kind: kind
            };
        },

        createVariableDeclarator: function (id, init) {
            return {
                type: Syntax.VariableDeclarator,
                id: id,
                init: init
            };
        },

        createWhileStatement: function (test, body) {
            return {
                type: Syntax.WhileStatement,
                test: test,
                body: body
            };
        },

        createWithStatement: function (object, body) {
            return {
                type: Syntax.WithStatement,
                object: object,
                body: body
            };
        },

        createTemplateElement: function (value, tail) {
            return {
                type: Syntax.TemplateElement,
                value: value,
                tail: tail
            };
        },

        createTemplateLiteral: function (quasis, expressions) {
            return {
                type: Syntax.TemplateLiteral,
                quasis: quasis,
                expressions: expressions
            };
        },

        createSpreadElement: function (argument) {
            return {
                type: Syntax.SpreadElement,
                argument: argument
            };
        },

        createSpreadProperty: function (argument) {
            return {
                type: Syntax.SpreadProperty,
                argument: argument
            };
        },

        createTaggedTemplateExpression: function (tag, quasi) {
            return {
                type: Syntax.TaggedTemplateExpression,
                tag: tag,
                quasi: quasi
            };
        },

        createArrowFunctionExpression: function (params, defaults, body, rest, expression) {
            return {
                type: Syntax.ArrowFunctionExpression,
                id: null,
                params: params,
                defaults: defaults,
                body: body,
                rest: rest,
                generator: false,
                expression: expression
            };
        },

        createMethodDefinition: function (propertyType, kind, key, value) {
            return {
                type: Syntax.MethodDefinition,
                key: key,
                value: value,
                kind: kind,
                'static': propertyType === ClassPropertyType.static
            };
        },

        createClassProperty: function (propertyIdentifier) {
            return {
                type: Syntax.ClassProperty,
                id: propertyIdentifier
            };
        },

        createClassBody: function (body) {
            return {
                type: Syntax.ClassBody,
                body: body
            };
        },

        createClassExpression: function (id, superClass, body, parametricType) {
            return {
                type: Syntax.ClassExpression,
                id: id,
                superClass: superClass,
                body: body,
                parametricType: parametricType
            };
        },

        createClassDeclaration: function (id, superClass, body, parametricType, superParametricType) {
            return {
                type: Syntax.ClassDeclaration,
                id: id,
                superClass: superClass,
                body: body,
                parametricType: parametricType,
                superParametricType: superParametricType
            };
        },

        createExportSpecifier: function (id, name) {
            return {
                type: Syntax.ExportSpecifier,
                id: id,
                name: name
            };
        },

        createExportBatchSpecifier: function () {
            return {
                type: Syntax.ExportBatchSpecifier
            };
        },

        createExportDeclaration: function (declaration, specifiers, source) {
            return {
                type: Syntax.ExportDeclaration,
                declaration: declaration,
                specifiers: specifiers,
                source: source
            };
        },

        createImportSpecifier: function (id, name) {
            return {
                type: Syntax.ImportSpecifier,
                id: id,
                name: name
            };
        },

        createImportDeclaration: function (specifiers, kind, source) {
            return {
                type: Syntax.ImportDeclaration,
                specifiers: specifiers,
                kind: kind,
                source: source
            };
        },

        createYieldExpression: function (argument, delegate) {
            return {
                type: Syntax.YieldExpression,
                argument: argument,
                delegate: delegate
            };
        },

        createModuleDeclaration: function (id, source, body) {
            return {
                type: Syntax.ModuleDeclaration,
                id: id,
                source: source,
                body: body
            };
        },

        createComprehensionExpression: function (filter, blocks, body) {
            return {
                type: Syntax.ComprehensionExpression,
                filter: filter,
                blocks: blocks,
                body: body
            };
        }

    };

    // Return true if there is a line terminator before the next token.

    function peekLineTerminator() {
        var pos, line, start, found;

        pos = index;
        line = lineNumber;
        start = lineStart;
        skipComment();
        found = lineNumber !== line;
        index = pos;
        lineNumber = line;
        lineStart = start;

        return found;
    }

    // Throw an exception

    function throwError(token, messageFormat) {
        var error,
            args = Array.prototype.slice.call(arguments, 2),
            msg = messageFormat.replace(
                /%(\d)/g,
                function (whole, index) {
                    assert(index < args.length, 'Message reference must be in range');
                    return args[index];
                }
            );

        if (typeof token.lineNumber === 'number') {
            error = new Error('Line ' + token.lineNumber + ': ' + msg);
            error.index = token.range[0];
            error.lineNumber = token.lineNumber;
            error.column = token.range[0] - lineStart + 1;
        } else {
            error = new Error('Line ' + lineNumber + ': ' + msg);
            error.index = index;
            error.lineNumber = lineNumber;
            error.column = index - lineStart + 1;
        }

        error.description = msg;
        throw error;
    }

    function throwErrorTolerant() {
        try {
            throwError.apply(null, arguments);
        } catch (e) {
            if (extra.errors) {
                extra.errors.push(e);
            } else {
                throw e;
            }
        }
    }


    // Throw an exception because of the token.

    function throwUnexpected(token) {
        if (token.type === Token.EOF) {
            throwError(token, Messages.UnexpectedEOS);
        }

        if (token.type === Token.NumericLiteral) {
            throwError(token, Messages.UnexpectedNumber);
        }

        if (token.type === Token.StringLiteral || token.type === Token.XJSText) {
            throwError(token, Messages.UnexpectedString);
        }

        if (token.type === Token.Identifier) {
            throwError(token, Messages.UnexpectedIdentifier);
        }

        if (token.type === Token.Keyword) {
            if (isFutureReservedWord(token.value)) {
                throwError(token, Messages.UnexpectedReserved);
            } else if (strict && isStrictModeReservedWord(token.value)) {
                throwErrorTolerant(token, Messages.StrictReservedWord);
                return;
            }
            throwError(token, Messages.UnexpectedToken, token.value);
        }

        if (token.type === Token.Template) {
            throwError(token, Messages.UnexpectedTemplate, token.value.raw);
        }

        // BooleanLiteral, NullLiteral, or Punctuator.
        throwError(token, Messages.UnexpectedToken, token.value);
    }

    // Expect the next token to match the specified punctuator.
    // If not, an exception will be thrown.

    function expect(value) {
        var token = lex();
        if (token.type !== Token.Punctuator || token.value !== value) {
            throwUnexpected(token);
        }
    }

    // Expect the next token to match the specified keyword.
    // If not, an exception will be thrown.

    function expectKeyword(keyword) {
        var token = lex();
        if (token.type !== Token.Keyword || token.value !== keyword) {
            throwUnexpected(token);
        }
    }

    // Return true if the next token matches the specified punctuator.

    function match(value) {
        return lookahead.type === Token.Punctuator && lookahead.value === value;
    }

    // Return true if the next token matches the specified keyword

    function matchKeyword(keyword) {
        return lookahead.type === Token.Keyword && lookahead.value === keyword;
    }


    // Return true if the next token matches the specified contextual keyword

    function matchContextualKeyword(keyword) {
        return lookahead.type === Token.Identifier && lookahead.value === keyword;
    }

    // Return true if the next token is an assignment operator

    function matchAssign() {
        var op;

        if (lookahead.type !== Token.Punctuator) {
            return false;
        }
        op = lookahead.value;
        return op === '=' ||
            op === '*=' ||
            op === '/=' ||
            op === '%=' ||
            op === '+=' ||
            op === '-=' ||
            op === '<<=' ||
            op === '>>=' ||
            op === '>>>=' ||
            op === '&=' ||
            op === '^=' ||
            op === '|=';
    }

    function consumeSemicolon() {
        var line, oldIndex = index, oldLineNumber = lineNumber,
            oldLineStart = lineStart, oldLookahead = lookahead;

        // Catch the very common case first: immediately a semicolon (char #59).
        if (source.charCodeAt(index) === 59) {
            lex();
            return;
        }

        line = lineNumber;
        skipComment();
        if (lineNumber !== line) {
            index = oldIndex;
            lineNumber = oldLineNumber;
            lineStart = oldLineStart;
            lookahead = oldLookahead;
            return;
        }

        if (match(';')) {
            lex();
            return;
        }

        if (lookahead.type !== Token.EOF && !match('}')) {
            throwUnexpected(lookahead);
        }
    }

    // Return true if provided expression is LeftHandSideExpression

    function isLeftHandSide(expr) {
        return expr.type === Syntax.Identifier || expr.type === Syntax.MemberExpression;
    }

    function isAssignableLeftHandSide(expr) {
        return isLeftHandSide(expr) || expr.type === Syntax.ObjectPattern || expr.type === Syntax.ArrayPattern;
    }

    // 11.1.4 Array Initialiser

    function parseArrayInitialiser() {
        var elements = [], blocks = [], filter = null, tmp, possiblecomprehension = true, body,
            marker = markerCreate();

        expect('[');
        while (!match(']')) {
            if (lookahead.value === 'for' &&
                    lookahead.type === Token.Keyword) {
                if (!possiblecomprehension) {
                    throwError({}, Messages.ComprehensionError);
                }
                matchKeyword('for');
                tmp = parseForStatement({ignoreBody: true});
                tmp.of = tmp.type === Syntax.ForOfStatement;
                tmp.type = Syntax.ComprehensionBlock;
                if (tmp.left.kind) { // can't be let or const
                    throwError({}, Messages.ComprehensionError);
                }
                blocks.push(tmp);
            } else if (lookahead.value === 'if' &&
                           lookahead.type === Token.Keyword) {
                if (!possiblecomprehension) {
                    throwError({}, Messages.ComprehensionError);
                }
                expectKeyword('if');
                expect('(');
                filter = parseExpression();
                expect(')');
            } else if (lookahead.value === ',' &&
                           lookahead.type === Token.Punctuator) {
                possiblecomprehension = false; // no longer allowed.
                lex();
                elements.push(null);
            } else {
                tmp = parseSpreadOrAssignmentExpression();
                elements.push(tmp);
                if (tmp && tmp.type === Syntax.SpreadElement) {
                    if (!match(']')) {
                        throwError({}, Messages.ElementAfterSpreadElement);
                    }
                } else if (!(match(']') || matchKeyword('for') || matchKeyword('if'))) {
                    expect(','); // this lexes.
                    possiblecomprehension = false;
                }
            }
        }

        expect(']');

        if (filter && !blocks.length) {
            throwError({}, Messages.ComprehensionRequiresBlock);
        }

        if (blocks.length) {
            if (elements.length !== 1) {
                throwError({}, Messages.ComprehensionError);
            }
            return markerApply(marker, delegate.createComprehensionExpression(filter, blocks, elements[0]));
        }
        return markerApply(marker, delegate.createArrayExpression(elements));
    }

    // 11.1.5 Object Initialiser

    function parsePropertyFunction(options) {
        var previousStrict, previousYieldAllowed, params, defaults, body,
            marker = markerCreate();

        previousStrict = strict;
        previousYieldAllowed = state.yieldAllowed;
        state.yieldAllowed = options.generator;
        params = options.params || [];
        defaults = options.defaults || [];

        body = parseConciseBody();
        if (options.name && strict && isRestrictedWord(params[0].name)) {
            throwErrorTolerant(options.name, Messages.StrictParamName);
        }
        strict = previousStrict;
        state.yieldAllowed = previousYieldAllowed;

        return markerApply(marker, delegate.createFunctionExpression(
            null,
            params,
            defaults,
            body,
            options.rest || null,
            options.generator,
            body.type !== Syntax.BlockStatement,
            options.returnType,
            options.parametricType
        ));
    }


    function parsePropertyMethodFunction(options) {
        var previousStrict, tmp, method;

        previousStrict = strict;
        strict = true;

        tmp = parseParams();

        if (tmp.stricted) {
            throwErrorTolerant(tmp.stricted, tmp.message);
        }


        method = parsePropertyFunction({
            params: tmp.params,
            defaults: tmp.defaults,
            rest: tmp.rest,
            generator: options.generator,
            returnType: tmp.returnType,
            parametricType: options.parametricType
        });

        strict = previousStrict;

        return method;
    }


    function parseObjectPropertyKey() {
        var marker = markerCreate(),
            token = lex(),
            propertyKey,
            result;

        // Note: This function is called only from parseObjectProperty(), where
        // EOF and Punctuator tokens are already filtered out.

        if (token.type === Token.StringLiteral || token.type === Token.NumericLiteral) {
            if (strict && token.octal) {
                throwErrorTolerant(token, Messages.StrictOctalLiteral);
            }
            return markerApply(marker, delegate.createLiteral(token));
        }

        if (token.type === Token.Punctuator && token.value === '[') {
            // For computed properties we should skip the [ and ], and
            // capture in marker only the assignment expression itself.
            marker = markerCreate();
            propertyKey = parseAssignmentExpression();
            result = markerApply(marker, propertyKey);
            expect(']');
            return result;
        }

        return markerApply(marker, delegate.createIdentifier(token.value));
    }

    function parseObjectProperty() {
        var token, key, id, value, param, expr, computed,
            marker = markerCreate();

        token = lookahead;
        computed = (token.value === '[');

        if (token.type === Token.Identifier || computed) {

            id = parseObjectPropertyKey();

            // Property Assignment: Getter and Setter.

            if (token.value === 'get' && !(match(':') || match('('))) {
                computed = (lookahead.value === '[');
                key = parseObjectPropertyKey();
                expect('(');
                expect(')');
                return markerApply(marker, delegate.createProperty('get', key, parsePropertyFunction({ generator: false }), false, false, computed));
            }
            if (token.value === 'set' && !(match(':') || match('('))) {
                computed = (lookahead.value === '[');
                key = parseObjectPropertyKey();
                expect('(');
                token = lookahead;
                param = [ parseTypeAnnotatableIdentifier() ];
                expect(')');
                return markerApply(marker, delegate.createProperty('set', key, parsePropertyFunction({ params: param, generator: false, name: token }), false, false, computed));
            }
            if (match(':')) {
                lex();
                return markerApply(marker, delegate.createProperty('init', id, parseAssignmentExpression(), false, false, computed));
            }
            if (match('(')) {
                return markerApply(marker, delegate.createProperty('init', id, parsePropertyMethodFunction({ generator: false }), true, false, computed));
            }
            if (computed) {
                // Computed properties can only be used with full notation.
                throwUnexpected(lookahead);
            }
            return markerApply(marker, delegate.createProperty('init', id, id, false, true, false));
        }
        if (token.type === Token.EOF || token.type === Token.Punctuator) {
            if (!match('*')) {
                throwUnexpected(token);
            }
            lex();

            computed = (lookahead.type === Token.Punctuator && lookahead.value === '[');

            id = parseObjectPropertyKey();

            if (!match('(')) {
                throwUnexpected(lex());
            }

            return markerApply(marker, delegate.createProperty('init', id, parsePropertyMethodFunction({ generator: true }), true, false, computed));
        }
        key = parseObjectPropertyKey();
        if (match(':')) {
            lex();
            return markerApply(marker, delegate.createProperty('init', key, parseAssignmentExpression(), false, false, false));
        }
        if (match('(')) {
            return markerApply(marker, delegate.createProperty('init', key, parsePropertyMethodFunction({ generator: false }), true, false, false));
        }
        throwUnexpected(lex());
    }

    function parseObjectSpreadProperty() {
        var marker = markerCreate();
        expect('...');
        return markerApply(marker, delegate.createSpreadProperty(parseAssignmentExpression()));
    }

    function parseObjectInitialiser() {
        var properties = [], property, name, key, kind, map = {}, toString = String,
            marker = markerCreate();

        expect('{');

        while (!match('}')) {
            if (match('...')) {
                property = parseObjectSpreadProperty();
            } else {
                property = parseObjectProperty();

                if (property.key.type === Syntax.Identifier) {
                    name = property.key.name;
                } else {
                    name = toString(property.key.value);
                }
                kind = (property.kind === 'init') ? PropertyKind.Data : (property.kind === 'get') ? PropertyKind.Get : PropertyKind.Set;

                key = '$' + name;
                if (Object.prototype.hasOwnProperty.call(map, key)) {
                    if (map[key] === PropertyKind.Data) {
                        if (strict && kind === PropertyKind.Data) {
                            throwErrorTolerant({}, Messages.StrictDuplicateProperty);
                        } else if (kind !== PropertyKind.Data) {
                            throwErrorTolerant({}, Messages.AccessorDataProperty);
                        }
                    } else {
                        if (kind === PropertyKind.Data) {
                            throwErrorTolerant({}, Messages.AccessorDataProperty);
                        } else if (map[key] & kind) {
                            throwErrorTolerant({}, Messages.AccessorGetSet);
                        }
                    }
                    map[key] |= kind;
                } else {
                    map[key] = kind;
                }
            }

            properties.push(property);

            if (!match('}')) {
                expect(',');
            }
        }

        expect('}');

        return markerApply(marker, delegate.createObjectExpression(properties));
    }

    function parseTemplateElement(option) {
        var marker = markerCreate(),
            token = scanTemplateElement(option);
        if (strict && token.octal) {
            throwError(token, Messages.StrictOctalLiteral);
        }
        return markerApply(marker, delegate.createTemplateElement({ raw: token.value.raw, cooked: token.value.cooked }, token.tail));
    }

    function parseTemplateLiteral() {
        var quasi, quasis, expressions, marker = markerCreate();

        quasi = parseTemplateElement({ head: true });
        quasis = [ quasi ];
        expressions = [];

        while (!quasi.tail) {
            expressions.push(parseExpression());
            quasi = parseTemplateElement({ head: false });
            quasis.push(quasi);
        }

        return markerApply(marker, delegate.createTemplateLiteral(quasis, expressions));
    }

    // 11.1.6 The Grouping Operator

    function parseGroupExpression() {
        var expr;

        expect('(');

        ++state.parenthesizedCount;

        expr = parseExpression();

        expect(')');

        return expr;
    }


    // 11.1 Primary Expressions

    function parsePrimaryExpression() {
        var marker, type, token, expr;

        type = lookahead.type;

        if (type === Token.Identifier) {
            marker = markerCreate();
            return markerApply(marker, delegate.createIdentifier(lex().value));
        }

        if (type === Token.StringLiteral || type === Token.NumericLiteral) {
            if (strict && lookahead.octal) {
                throwErrorTolerant(lookahead, Messages.StrictOctalLiteral);
            }
            marker = markerCreate();
            return markerApply(marker, delegate.createLiteral(lex()));
        }

        if (type === Token.Keyword) {
            if (matchKeyword('this')) {
                marker = markerCreate();
                lex();
                return markerApply(marker, delegate.createThisExpression());
            }

            if (matchKeyword('function')) {
                return parseFunctionExpression();
            }

            if (matchKeyword('class')) {
                return parseClassExpression();
            }

            if (matchKeyword('super')) {
                marker = markerCreate();
                lex();
                return markerApply(marker, delegate.createIdentifier('super'));
            }
        }

        if (type === Token.BooleanLiteral) {
            marker = markerCreate();
            token = lex();
            token.value = (token.value === 'true');
            return markerApply(marker, delegate.createLiteral(token));
        }

        if (type === Token.NullLiteral) {
            marker = markerCreate();
            token = lex();
            token.value = null;
            return markerApply(marker, delegate.createLiteral(token));
        }

        if (match('[')) {
            return parseArrayInitialiser();
        }

        if (match('{')) {
            return parseObjectInitialiser();
        }

        if (match('(')) {
            return parseGroupExpression();
        }

        if (match('/') || match('/=')) {
            marker = markerCreate();
            return markerApply(marker, delegate.createLiteral(scanRegExp()));
        }

        if (type === Token.Template) {
            return parseTemplateLiteral();
        }

        if (match('<')) {
            return parseXJSElement();
        }

        throwUnexpected(lex());
    }

    // 11.2 Left-Hand-Side Expressions

    function parseArguments() {
        var args = [], arg;

        expect('(');

        if (!match(')')) {
            while (index < length) {
                arg = parseSpreadOrAssignmentExpression();
                args.push(arg);

                if (match(')')) {
                    break;
                } else if (arg.type === Syntax.SpreadElement) {
                    throwError({}, Messages.ElementAfterSpreadElement);
                }

                expect(',');
            }
        }

        expect(')');

        return args;
    }

    function parseSpreadOrAssignmentExpression() {
        if (match('...')) {
            var marker = markerCreate();
            lex();
            return markerApply(marker, delegate.createSpreadElement(parseAssignmentExpression()));
        }
        return parseAssignmentExpression();
    }

    function parseNonComputedProperty() {
        var marker = markerCreate(),
            token = lex();

        if (!isIdentifierName(token)) {
            throwUnexpected(token);
        }

        return markerApply(marker, delegate.createIdentifier(token.value));
    }

    function parseNonComputedMember() {
        expect('.');

        return parseNonComputedProperty();
    }

    function parseComputedMember() {
        var expr;

        expect('[');

        expr = parseExpression();

        expect(']');

        return expr;
    }

    function parseNewExpression() {
        var callee, args, marker = markerCreate();

        expectKeyword('new');
        callee = parseLeftHandSideExpression();
        args = match('(') ? parseArguments() : [];

        return markerApply(marker, delegate.createNewExpression(callee, args));
    }

    function parseLeftHandSideExpressionAllowCall() {
        var expr, args, marker = markerCreate();

        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();

        while (match('.') || match('[') || match('(') || lookahead.type === Token.Template) {
            if (match('(')) {
                args = parseArguments();
                expr = markerApply(marker, delegate.createCallExpression(expr, args));
            } else if (match('[')) {
                expr = markerApply(marker, delegate.createMemberExpression('[', expr, parseComputedMember()));
            } else if (match('.')) {
                expr = markerApply(marker, delegate.createMemberExpression('.', expr, parseNonComputedMember()));
            } else {
                expr = markerApply(marker, delegate.createTaggedTemplateExpression(expr, parseTemplateLiteral()));
            }
        }

        return expr;
    }

    function parseLeftHandSideExpression() {
        var expr, marker = markerCreate();

        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();

        while (match('.') || match('[') || lookahead.type === Token.Template) {
            if (match('[')) {
                expr = markerApply(marker, delegate.createMemberExpression('[', expr, parseComputedMember()));
            } else if (match('.')) {
                expr = markerApply(marker, delegate.createMemberExpression('.', expr, parseNonComputedMember()));
            } else {
                expr = markerApply(marker, delegate.createTaggedTemplateExpression(expr, parseTemplateLiteral()));
            }
        }

        return expr;
    }

    // 11.3 Postfix Expressions

    function parsePostfixExpression() {
        var marker = markerCreate(),
            expr = parseLeftHandSideExpressionAllowCall(),
            token;

        if (lookahead.type !== Token.Punctuator) {
            return expr;
        }

        if ((match('++') || match('--')) && !peekLineTerminator()) {
            // 11.3.1, 11.3.2
            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {
                throwErrorTolerant({}, Messages.StrictLHSPostfix);
            }

            if (!isLeftHandSide(expr)) {
                throwError({}, Messages.InvalidLHSInAssignment);
            }

            token = lex();
            expr = markerApply(marker, delegate.createPostfixExpression(token.value, expr));
        }

        return expr;
    }

    // 11.4 Unary Operators

    function parseUnaryExpression() {
        var marker, token, expr;

        if (lookahead.type !== Token.Punctuator && lookahead.type !== Token.Keyword) {
            return parsePostfixExpression();
        }

        if (match('++') || match('--')) {
            marker = markerCreate();
            token = lex();
            expr = parseUnaryExpression();
            // 11.4.4, 11.4.5
            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {
                throwErrorTolerant({}, Messages.StrictLHSPrefix);
            }

            if (!isLeftHandSide(expr)) {
                throwError({}, Messages.InvalidLHSInAssignment);
            }

            return markerApply(marker, delegate.createUnaryExpression(token.value, expr));
        }

        if (match('+') || match('-') || match('~') || match('!')) {
            marker = markerCreate();
            token = lex();
            expr = parseUnaryExpression();
            return markerApply(marker, delegate.createUnaryExpression(token.value, expr));
        }

        if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {
            marker = markerCreate();
            token = lex();
            expr = parseUnaryExpression();
            expr = markerApply(marker, delegate.createUnaryExpression(token.value, expr));
            if (strict && expr.operator === 'delete' && expr.argument.type === Syntax.Identifier) {
                throwErrorTolerant({}, Messages.StrictDelete);
            }
            return expr;
        }

        return parsePostfixExpression();
    }

    function binaryPrecedence(token, allowIn) {
        var prec = 0;

        if (token.type !== Token.Punctuator && token.type !== Token.Keyword) {
            return 0;
        }

        switch (token.value) {
        case '||':
            prec = 1;
            break;

        case '&&':
            prec = 2;
            break;

        case '|':
            prec = 3;
            break;

        case '^':
            prec = 4;
            break;

        case '&':
            prec = 5;
            break;

        case '==':
        case '!=':
        case '===':
        case '!==':
            prec = 6;
            break;

        case '<':
        case '>':
        case '<=':
        case '>=':
        case 'instanceof':
            prec = 7;
            break;

        case 'in':
            prec = allowIn ? 7 : 0;
            break;

        case '<<':
        case '>>':
        case '>>>':
            prec = 8;
            break;

        case '+':
        case '-':
            prec = 9;
            break;

        case '*':
        case '/':
        case '%':
            prec = 11;
            break;

        default:
            break;
        }

        return prec;
    }

    // 11.5 Multiplicative Operators
    // 11.6 Additive Operators
    // 11.7 Bitwise Shift Operators
    // 11.8 Relational Operators
    // 11.9 Equality Operators
    // 11.10 Binary Bitwise Operators
    // 11.11 Binary Logical Operators

    function parseBinaryExpression() {
        var expr, token, prec, previousAllowIn, stack, right, operator, left, i,
            marker, markers;

        previousAllowIn = state.allowIn;
        state.allowIn = true;

        marker = markerCreate();
        left = parseUnaryExpression();

        token = lookahead;
        prec = binaryPrecedence(token, previousAllowIn);
        if (prec === 0) {
            return left;
        }
        token.prec = prec;
        lex();

        markers = [marker, markerCreate()];
        right = parseUnaryExpression();

        stack = [left, token, right];

        while ((prec = binaryPrecedence(lookahead, previousAllowIn)) > 0) {

            // Reduce: make a binary expression from the three topmost entries.
            while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {
                right = stack.pop();
                operator = stack.pop().value;
                left = stack.pop();
                expr = delegate.createBinaryExpression(operator, left, right);
                markers.pop();
                marker = markers.pop();
                markerApply(marker, expr);
                stack.push(expr);
                markers.push(marker);
            }

            // Shift.
            token = lex();
            token.prec = prec;
            stack.push(token);
            markers.push(markerCreate());
            expr = parseUnaryExpression();
            stack.push(expr);
        }

        state.allowIn = previousAllowIn;

        // Final reduce to clean-up the stack.
        i = stack.length - 1;
        expr = stack[i];
        markers.pop();
        while (i > 1) {
            expr = delegate.createBinaryExpression(stack[i - 1].value, stack[i - 2], expr);
            i -= 2;
            marker = markers.pop();
            markerApply(marker, expr);
        }

        return expr;
    }


    // 11.12 Conditional Operator

    function parseConditionalExpression() {
        var expr, previousAllowIn, consequent, alternate, marker = markerCreate();
        expr = parseBinaryExpression();

        if (match('?')) {
            lex();
            previousAllowIn = state.allowIn;
            state.allowIn = true;
            consequent = parseAssignmentExpression();
            state.allowIn = previousAllowIn;
            expect(':');
            alternate = parseAssignmentExpression();

            expr = markerApply(marker, delegate.createConditionalExpression(expr, consequent, alternate));
        }

        return expr;
    }

    // 11.13 Assignment Operators

    function reinterpretAsAssignmentBindingPattern(expr) {
        var i, len, property, element;

        if (expr.type === Syntax.ObjectExpression) {
            expr.type = Syntax.ObjectPattern;
            for (i = 0, len = expr.properties.length; i < len; i += 1) {
                property = expr.properties[i];
                if (property.type === Syntax.SpreadProperty) {
                    if (i < len - 1) {
                        throwError({}, Messages.PropertyAfterSpreadProperty);
                    }
                    reinterpretAsAssignmentBindingPattern(property.argument);
                } else {
                    if (property.kind !== 'init') {
                        throwError({}, Messages.InvalidLHSInAssignment);
                    }
                    reinterpretAsAssignmentBindingPattern(property.value);
                }
            }
        } else if (expr.type === Syntax.ArrayExpression) {
            expr.type = Syntax.ArrayPattern;
            for (i = 0, len = expr.elements.length; i < len; i += 1) {
                element = expr.elements[i];
                if (element) {
                    reinterpretAsAssignmentBindingPattern(element);
                }
            }
        } else if (expr.type === Syntax.Identifier) {
            if (isRestrictedWord(expr.name)) {
                throwError({}, Messages.InvalidLHSInAssignment);
            }
        } else if (expr.type === Syntax.SpreadElement) {
            reinterpretAsAssignmentBindingPattern(expr.argument);
            if (expr.argument.type === Syntax.ObjectPattern) {
                throwError({}, Messages.ObjectPatternAsSpread);
            }
        } else {
            if (expr.type !== Syntax.MemberExpression && expr.type !== Syntax.CallExpression && expr.type !== Syntax.NewExpression) {
                throwError({}, Messages.InvalidLHSInAssignment);
            }
        }
    }


    function reinterpretAsDestructuredParameter(options, expr) {
        var i, len, property, element;

        if (expr.type === Syntax.ObjectExpression) {
            expr.type = Syntax.ObjectPattern;
            for (i = 0, len = expr.properties.length; i < len; i += 1) {
                property = expr.properties[i];
                if (property.type === Syntax.SpreadProperty) {
                    if (i < len - 1) {
                        throwError({}, Messages.PropertyAfterSpreadProperty);
                    }
                    reinterpretAsDestructuredParameter(options, property.argument);
                } else {
                    if (property.kind !== 'init') {
                        throwError({}, Messages.InvalidLHSInFormalsList);
                    }
                    reinterpretAsDestructuredParameter(options, property.value);
                }
            }
        } else if (expr.type === Syntax.ArrayExpression) {
            expr.type = Syntax.ArrayPattern;
            for (i = 0, len = expr.elements.length; i < len; i += 1) {
                element = expr.elements[i];
                if (element) {
                    reinterpretAsDestructuredParameter(options, element);
                }
            }
        } else if (expr.type === Syntax.Identifier) {
            validateParam(options, expr, expr.name);
        } else {
            if (expr.type !== Syntax.MemberExpression) {
                throwError({}, Messages.InvalidLHSInFormalsList);
            }
        }
    }

    function reinterpretAsCoverFormalsList(expressions) {
        var i, len, param, params, defaults, defaultCount, options, rest;

        params = [];
        defaults = [];
        defaultCount = 0;
        rest = null;
        options = {
            paramSet: {}
        };

        for (i = 0, len = expressions.length; i < len; i += 1) {
            param = expressions[i];
            if (param.type === Syntax.Identifier) {
                params.push(param);
                defaults.push(null);
                validateParam(options, param, param.name);
            } else if (param.type === Syntax.ObjectExpression || param.type === Syntax.ArrayExpression) {
                reinterpretAsDestructuredParameter(options, param);
                params.push(param);
                defaults.push(null);
            } else if (param.type === Syntax.SpreadElement) {
                assert(i === len - 1, 'It is guaranteed that SpreadElement is last element by parseExpression');
                reinterpretAsDestructuredParameter(options, param.argument);
                rest = param.argument;
            } else if (param.type === Syntax.AssignmentExpression) {
                params.push(param.left);
                defaults.push(param.right);
                ++defaultCount;
                validateParam(options, param.left, param.left.name);
            } else {
                return null;
            }
        }

        if (options.message === Messages.StrictParamDupe) {
            throwError(
                strict ? options.stricted : options.firstRestricted,
                options.message
            );
        }

        if (defaultCount === 0) {
            defaults = [];
        }

        return {
            params: params,
            defaults: defaults,
            rest: rest,
            stricted: options.stricted,
            firstRestricted: options.firstRestricted,
            message: options.message
        };
    }

    function parseArrowFunctionExpression(options, marker) {
        var previousStrict, previousYieldAllowed, body;

        expect('=>');

        previousStrict = strict;
        previousYieldAllowed = state.yieldAllowed;
        state.yieldAllowed = false;
        body = parseConciseBody();

        if (strict && options.firstRestricted) {
            throwError(options.firstRestricted, options.message);
        }
        if (strict && options.stricted) {
            throwErrorTolerant(options.stricted, options.message);
        }

        strict = previousStrict;
        state.yieldAllowed = previousYieldAllowed;

        return markerApply(marker, delegate.createArrowFunctionExpression(
            options.params,
            options.defaults,
            body,
            options.rest,
            body.type !== Syntax.BlockStatement
        ));
    }

    function parseAssignmentExpression() {
        var marker, expr, token, params, oldParenthesizedCount;

        // Note that 'yield' is treated as a keyword in strict mode, but a
        // contextual keyword (identifier) in non-strict mode, so we need
        // to use matchKeyword and matchContextualKeyword appropriately.
        if ((state.yieldAllowed && matchContextualKeyword('yield')) || (strict && matchKeyword('yield'))) {
            return parseYieldExpression();
        }

        oldParenthesizedCount = state.parenthesizedCount;

        marker = markerCreate();

        if (match('(')) {
            token = lookahead2();
            if ((token.type === Token.Punctuator && token.value === ')') || token.value === '...') {
                params = parseParams();
                if (!match('=>')) {
                    throwUnexpected(lex());
                }
                return parseArrowFunctionExpression(params, marker);
            }
        }

        token = lookahead;
        expr = parseConditionalExpression();

        if (match('=>') &&
                (state.parenthesizedCount === oldParenthesizedCount ||
                state.parenthesizedCount === (oldParenthesizedCount + 1))) {
            if (expr.type === Syntax.Identifier) {
                params = reinterpretAsCoverFormalsList([ expr ]);
            } else if (expr.type === Syntax.SequenceExpression) {
                params = reinterpretAsCoverFormalsList(expr.expressions);
            }
            if (params) {
                return parseArrowFunctionExpression(params, marker);
            }
        }

        if (matchAssign()) {
            // 11.13.1
            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {
                throwErrorTolerant(token, Messages.StrictLHSAssignment);
            }

            // ES.next draf 11.13 Runtime Semantics step 1
            if (match('=') && (expr.type === Syntax.ObjectExpression || expr.type === Syntax.ArrayExpression)) {
                reinterpretAsAssignmentBindingPattern(expr);
            } else if (!isLeftHandSide(expr)) {
                throwError({}, Messages.InvalidLHSInAssignment);
            }

            expr = markerApply(marker, delegate.createAssignmentExpression(lex().value, expr, parseAssignmentExpression()));
        }

        return expr;
    }

    // 11.14 Comma Operator

    function parseExpression() {
        var marker, expr, expressions, sequence, coverFormalsList, spreadFound, oldParenthesizedCount;

        oldParenthesizedCount = state.parenthesizedCount;

        marker = markerCreate();
        expr = parseAssignmentExpression();
        expressions = [ expr ];

        if (match(',')) {
            while (index < length) {
                if (!match(',')) {
                    break;
                }

                lex();
                expr = parseSpreadOrAssignmentExpression();
                expressions.push(expr);

                if (expr.type === Syntax.SpreadElement) {
                    spreadFound = true;
                    if (!match(')')) {
                        throwError({}, Messages.ElementAfterSpreadElement);
                    }
                    break;
                }
            }

            sequence = markerApply(marker, delegate.createSequenceExpression(expressions));
        }

        if (match('=>')) {
            // Do not allow nested parentheses on the LHS of the =>.
            if (state.parenthesizedCount === oldParenthesizedCount || state.parenthesizedCount === (oldParenthesizedCount + 1)) {
                expr = expr.type === Syntax.SequenceExpression ? expr.expressions : expressions;
                coverFormalsList = reinterpretAsCoverFormalsList(expr);
                if (coverFormalsList) {
                    return parseArrowFunctionExpression(coverFormalsList, marker);
                }
            }
            throwUnexpected(lex());
        }

        if (spreadFound && lookahead2().value !== '=>') {
            throwError({}, Messages.IllegalSpread);
        }

        return sequence || expr;
    }

    // 12.1 Block

    function parseStatementList() {
        var list = [],
            statement;

        while (index < length) {
            if (match('}')) {
                break;
            }
            statement = parseSourceElement();
            if (typeof statement === 'undefined') {
                break;
            }
            list.push(statement);
        }

        return list;
    }

    function parseBlock() {
        var block, marker = markerCreate();

        expect('{');

        block = parseStatementList();

        expect('}');

        return markerApply(marker, delegate.createBlockStatement(block));
    }

    // 12.2 Variable Statement

    function parseObjectTypeAnnotation(nullable) {
        var isMethod, marker, properties = [], property, propertyKey,
            propertyTypeAnnotation;

        expect('{');

        while (!match('}')) {
            marker = markerCreate();
            propertyKey = parseObjectPropertyKey();
            isMethod = match('(');
            propertyTypeAnnotation = parseTypeAnnotation();
            properties.push(markerApply(marker, delegate.createProperty(
                'init',
                propertyKey,
                propertyTypeAnnotation,
                isMethod,
                false
            )));

            if (!match('}')) {
                if (match(',') || match(';')) {
                    lex();
                } else {
                    throwUnexpected(lookahead);
                }
            }
        }

        expect('}');

        return delegate.createObjectTypeAnnotation(properties, nullable);
    }

    function parseVoidTypeAnnotation() {
        var marker = markerCreate();
        expectKeyword('void');
        return markerApply(marker, delegate.createVoidTypeAnnotation());
    }

    function parseParametricTypeAnnotation() {
        var marker = markerCreate(), typeIdentifier, paramTypes = [];

        expect('<');
        while (!match('>')) {
            paramTypes.push(parseVariableIdentifier());
            if (!match('>')) {
                expect(',');
            }
        }
        expect('>');

        return markerApply(marker, delegate.createParametricTypeAnnotation(
            paramTypes
        ));
    }

    function parseTypeAnnotation(dontExpectColon) {
        var typeIdentifier = null, params = null, returnType = null,
            nullable = false, marker = markerCreate(), returnTypeMarker = null,
            parametricType, annotation;

        if (!dontExpectColon) {
            expect(':');
        }

        if (match('?')) {
            lex();
            nullable = true;
        }

        if (match('{')) {
            return markerApply(marker, parseObjectTypeAnnotation(nullable));
        }

        if (lookahead.type === Token.Identifier) {
            typeIdentifier = parseVariableIdentifier();
            if (match('<')) {
                parametricType = parseParametricTypeAnnotation();
            }
        } else if (match('(')) {
            lex();
            params = [];
            while (lookahead.type === Token.Identifier || match('?')) {
                params.push(parseTypeAnnotatableIdentifier(
                    true, /* requireTypeAnnotation */
                    true /* canBeOptionalParam */
                ));
                if (!match(')')) {
                    expect(',');
                }
            }
            expect(')');

            returnTypeMarker = markerCreate();
            expect('=>');

            returnType = parseTypeAnnotation(true);
        } else {
            if (!matchKeyword('void')) {
                throwUnexpected(lookahead);
            } else {
                return markerApply(marker, parseVoidTypeAnnotation());
            }
        }

        return markerApply(marker, delegate.createTypeAnnotation(
            typeIdentifier,
            parametricType,
            params,
            returnType,
            nullable
        ));
    }

    function parseVariableIdentifier() {
        var marker = markerCreate(),
            token = lex();

        if (token.type !== Token.Identifier) {
            throwUnexpected(token);
        }

        return markerApply(marker, delegate.createIdentifier(token.value));
    }

    function parseTypeAnnotatableIdentifier(requireTypeAnnotation, canBeOptionalParam) {
        var marker = markerCreate(),
            ident = parseVariableIdentifier(),
            isOptionalParam = false;

        if (canBeOptionalParam && match('?')) {
            expect('?');
            isOptionalParam = true;
        }

        if (requireTypeAnnotation || match(':')) {
            ident = markerApply(marker, delegate.createTypeAnnotatedIdentifier(
                ident,
                parseTypeAnnotation()
            ));
        }

        if (isOptionalParam) {
            ident = markerApply(marker, delegate.createOptionalParameter(ident));
        }

        return ident;
    }

    function parseVariableDeclaration(kind) {
        var id,
            marker = markerCreate(),
            init = null;
        if (match('{')) {
            id = parseObjectInitialiser();
            reinterpretAsAssignmentBindingPattern(id);
        } else if (match('[')) {
            id = parseArrayInitialiser();
            reinterpretAsAssignmentBindingPattern(id);
        } else {
            id = state.allowKeyword ? parseNonComputedProperty() : parseTypeAnnotatableIdentifier();
            // 12.2.1
            if (strict && isRestrictedWord(id.name)) {
                throwErrorTolerant({}, Messages.StrictVarName);
            }
        }

        if (kind === 'const') {
            if (!match('=')) {
                throwError({}, Messages.NoUnintializedConst);
            }
            expect('=');
            init = parseAssignmentExpression();
        } else if (match('=')) {
            lex();
            init = parseAssignmentExpression();
        }

        return markerApply(marker, delegate.createVariableDeclarator(id, init));
    }

    function parseVariableDeclarationList(kind) {
        var list = [];

        do {
            list.push(parseVariableDeclaration(kind));
            if (!match(',')) {
                break;
            }
            lex();
        } while (index < length);

        return list;
    }

    function parseVariableStatement() {
        var declarations, marker = markerCreate();

        expectKeyword('var');

        declarations = parseVariableDeclarationList();

        consumeSemicolon();

        return markerApply(marker, delegate.createVariableDeclaration(declarations, 'var'));
    }

    // kind may be `const` or `let`
    // Both are experimental and not in the specification yet.
    // see http://wiki.ecmascript.org/doku.php?id=harmony:const
    // and http://wiki.ecmascript.org/doku.php?id=harmony:let
    function parseConstLetDeclaration(kind) {
        var declarations, marker = markerCreate();

        expectKeyword(kind);

        declarations = parseVariableDeclarationList(kind);

        consumeSemicolon();

        return markerApply(marker, delegate.createVariableDeclaration(declarations, kind));
    }

    // http://wiki.ecmascript.org/doku.php?id=harmony:modules

    function parseModuleDeclaration() {
        var id, src, body, marker = markerCreate();

        lex();   // 'module'

        if (peekLineTerminator()) {
            throwError({}, Messages.NewlineAfterModule);
        }

        switch (lookahead.type) {

        case Token.StringLiteral:
            id = parsePrimaryExpression();
            body = parseModuleBlock();
            src = null;
            break;

        case Token.Identifier:
            id = parseVariableIdentifier();
            body = null;
            if (!matchContextualKeyword('from')) {
                throwUnexpected(lex());
            }
            lex();
            src = parsePrimaryExpression();
            if (src.type !== Syntax.Literal) {
                throwError({}, Messages.InvalidModuleSpecifier);
            }
            break;
        }

        consumeSemicolon();
        return markerApply(marker, delegate.createModuleDeclaration(id, src, body));
    }

    function parseExportBatchSpecifier() {
        var marker = markerCreate();
        expect('*');
        return markerApply(marker, delegate.createExportBatchSpecifier());
    }

    function parseExportSpecifier() {
        var id, name = null, marker = markerCreate();

        id = parseVariableIdentifier();
        if (matchContextualKeyword('as')) {
            lex();
            name = parseNonComputedProperty();
        }

        return markerApply(marker, delegate.createExportSpecifier(id, name));
    }

    function parseExportDeclaration() {
        var previousAllowKeyword, decl, def, src, specifiers,
            marker = markerCreate();

        expectKeyword('export');

        if (lookahead.type === Token.Keyword) {
            switch (lookahead.value) {
            case 'let':
            case 'const':
            case 'var':
            case 'class':
            case 'function':
                return markerApply(marker, delegate.createExportDeclaration(parseSourceElement(), null, null));
            }
        }

        if (isIdentifierName(lookahead)) {
            previousAllowKeyword = state.allowKeyword;
            state.allowKeyword = true;
            decl = parseVariableDeclarationList('let');
            state.allowKeyword = previousAllowKeyword;
            return markerApply(marker, delegate.createExportDeclaration(decl, null, null));
        }

        specifiers = [];
        src = null;

        if (match('*')) {
            specifiers.push(parseExportBatchSpecifier());
        } else {
            expect('{');
            do {
                specifiers.push(parseExportSpecifier());
            } while (match(',') && lex());
            expect('}');
        }

        if (matchContextualKeyword('from')) {
            lex();
            src = parsePrimaryExpression();
            if (src.type !== Syntax.Literal) {
                throwError({}, Messages.InvalidModuleSpecifier);
            }
        }

        consumeSemicolon();

        return markerApply(marker, delegate.createExportDeclaration(null, specifiers, src));
    }

    function parseImportDeclaration() {
        var specifiers, kind, src, marker = markerCreate();

        expectKeyword('import');
        specifiers = [];

        if (isIdentifierName(lookahead)) {
            kind = 'default';
            specifiers.push(parseImportSpecifier());

            if (!matchContextualKeyword('from')) {
                throwError({}, Messages.NoFromAfterImport);
            }
            lex();
        } else if (match('{')) {
            kind = 'named';
            lex();
            do {
                specifiers.push(parseImportSpecifier());
            } while (match(',') && lex());
            expect('}');

            if (!matchContextualKeyword('from')) {
                throwError({}, Messages.NoFromAfterImport);
            }
            lex();
        }

        src = parsePrimaryExpression();
        if (src.type !== Syntax.Literal) {
            throwError({}, Messages.InvalidModuleSpecifier);
        }

        consumeSemicolon();

        return markerApply(marker, delegate.createImportDeclaration(specifiers, kind, src));
    }

    function parseImportSpecifier() {
        var id, name = null, marker = markerCreate();

        id = parseNonComputedProperty();
        if (matchContextualKeyword('as')) {
            lex();
            name = parseVariableIdentifier();
        }

        return markerApply(marker, delegate.createImportSpecifier(id, name));
    }

    // 12.3 Empty Statement

    function parseEmptyStatement() {
        var marker = markerCreate();
        expect(';');
        return markerApply(marker, delegate.createEmptyStatement());
    }

    // 12.4 Expression Statement

    function parseExpressionStatement() {
        var marker = markerCreate(), expr = parseExpression();
        consumeSemicolon();
        return markerApply(marker, delegate.createExpressionStatement(expr));
    }

    // 12.5 If statement

    function parseIfStatement() {
        var test, consequent, alternate, marker = markerCreate();

        expectKeyword('if');

        expect('(');

        test = parseExpression();

        expect(')');

        consequent = parseStatement();

        if (matchKeyword('else')) {
            lex();
            alternate = parseStatement();
        } else {
            alternate = null;
        }

        return markerApply(marker, delegate.createIfStatement(test, consequent, alternate));
    }

    // 12.6 Iteration Statements

    function parseDoWhileStatement() {
        var body, test, oldInIteration, marker = markerCreate();

        expectKeyword('do');

        oldInIteration = state.inIteration;
        state.inIteration = true;

        body = parseStatement();

        state.inIteration = oldInIteration;

        expectKeyword('while');

        expect('(');

        test = parseExpression();

        expect(')');

        if (match(';')) {
            lex();
        }

        return markerApply(marker, delegate.createDoWhileStatement(body, test));
    }

    function parseWhileStatement() {
        var test, body, oldInIteration, marker = markerCreate();

        expectKeyword('while');

        expect('(');

        test = parseExpression();

        expect(')');

        oldInIteration = state.inIteration;
        state.inIteration = true;

        body = parseStatement();

        state.inIteration = oldInIteration;

        return markerApply(marker, delegate.createWhileStatement(test, body));
    }

    function parseForVariableDeclaration() {
        var marker = markerCreate(),
            token = lex(),
            declarations = parseVariableDeclarationList();

        return markerApply(marker, delegate.createVariableDeclaration(declarations, token.value));
    }

    function parseForStatement(opts) {
        var init, test, update, left, right, body, operator, oldInIteration,
            marker = markerCreate();
        init = test = update = null;
        expectKeyword('for');

        // http://wiki.ecmascript.org/doku.php?id=proposals:iterators_and_generators&s=each
        if (matchContextualKeyword('each')) {
            throwError({}, Messages.EachNotAllowed);
        }

        expect('(');

        if (match(';')) {
            lex();
        } else {
            if (matchKeyword('var') || matchKeyword('let') || matchKeyword('const')) {
                state.allowIn = false;
                init = parseForVariableDeclaration();
                state.allowIn = true;

                if (init.declarations.length === 1) {
                    if (matchKeyword('in') || matchContextualKeyword('of')) {
                        operator = lookahead;
                        if (!((operator.value === 'in' || init.kind !== 'var') && init.declarations[0].init)) {
                            lex();
                            left = init;
                            right = parseExpression();
                            init = null;
                        }
                    }
                }
            } else {
                state.allowIn = false;
                init = parseExpression();
                state.allowIn = true;

                if (matchContextualKeyword('of')) {
                    operator = lex();
                    left = init;
                    right = parseExpression();
                    init = null;
                } else if (matchKeyword('in')) {
                    // LeftHandSideExpression
                    if (!isAssignableLeftHandSide(init)) {
                        throwError({}, Messages.InvalidLHSInForIn);
                    }
                    operator = lex();
                    left = init;
                    right = parseExpression();
                    init = null;
                }
            }

            if (typeof left === 'undefined') {
                expect(';');
            }
        }

        if (typeof left === 'undefined') {

            if (!match(';')) {
                test = parseExpression();
            }
            expect(';');

            if (!match(')')) {
                update = parseExpression();
            }
        }

        expect(')');

        oldInIteration = state.inIteration;
        state.inIteration = true;

        if (!(opts !== undefined && opts.ignoreBody)) {
            body = parseStatement();
        }

        state.inIteration = oldInIteration;

        if (typeof left === 'undefined') {
            return markerApply(marker, delegate.createForStatement(init, test, update, body));
        }

        if (operator.value === 'in') {
            return markerApply(marker, delegate.createForInStatement(left, right, body));
        }
        return markerApply(marker, delegate.createForOfStatement(left, right, body));
    }

    // 12.7 The continue statement

    function parseContinueStatement() {
        var label = null, key, marker = markerCreate();

        expectKeyword('continue');

        // Optimize the most common form: 'continue;'.
        if (source.charCodeAt(index) === 59) {
            lex();

            if (!state.inIteration) {
                throwError({}, Messages.IllegalContinue);
            }

            return markerApply(marker, delegate.createContinueStatement(null));
        }

        if (peekLineTerminator()) {
            if (!state.inIteration) {
                throwError({}, Messages.IllegalContinue);
            }

            return markerApply(marker, delegate.createContinueStatement(null));
        }

        if (lookahead.type === Token.Identifier) {
            label = parseVariableIdentifier();

            key = '$' + label.name;
            if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
                throwError({}, Messages.UnknownLabel, label.name);
            }
        }

        consumeSemicolon();

        if (label === null && !state.inIteration) {
            throwError({}, Messages.IllegalContinue);
        }

        return markerApply(marker, delegate.createContinueStatement(label));
    }

    // 12.8 The break statement

    function parseBreakStatement() {
        var label = null, key, marker = markerCreate();

        expectKeyword('break');

        // Catch the very common case first: immediately a semicolon (char #59).
        if (source.charCodeAt(index) === 59) {
            lex();

            if (!(state.inIteration || state.inSwitch)) {
                throwError({}, Messages.IllegalBreak);
            }

            return markerApply(marker, delegate.createBreakStatement(null));
        }

        if (peekLineTerminator()) {
            if (!(state.inIteration || state.inSwitch)) {
                throwError({}, Messages.IllegalBreak);
            }

            return markerApply(marker, delegate.createBreakStatement(null));
        }

        if (lookahead.type === Token.Identifier) {
            label = parseVariableIdentifier();

            key = '$' + label.name;
            if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
                throwError({}, Messages.UnknownLabel, label.name);
            }
        }

        consumeSemicolon();

        if (label === null && !(state.inIteration || state.inSwitch)) {
            throwError({}, Messages.IllegalBreak);
        }

        return markerApply(marker, delegate.createBreakStatement(label));
    }

    // 12.9 The return statement

    function parseReturnStatement() {
        var argument = null, marker = markerCreate();

        expectKeyword('return');

        if (!state.inFunctionBody) {
            throwErrorTolerant({}, Messages.IllegalReturn);
        }

        // 'return' followed by a space and an identifier is very common.
        if (source.charCodeAt(index) === 32) {
            if (isIdentifierStart(source.charCodeAt(index + 1))) {
                argument = parseExpression();
                consumeSemicolon();
                return markerApply(marker, delegate.createReturnStatement(argument));
            }
        }

        if (peekLineTerminator()) {
            return markerApply(marker, delegate.createReturnStatement(null));
        }

        if (!match(';')) {
            if (!match('}') && lookahead.type !== Token.EOF) {
                argument = parseExpression();
            }
        }

        consumeSemicolon();

        return markerApply(marker, delegate.createReturnStatement(argument));
    }

    // 12.10 The with statement

    function parseWithStatement() {
        var object, body, marker = markerCreate();

        if (strict) {
            throwErrorTolerant({}, Messages.StrictModeWith);
        }

        expectKeyword('with');

        expect('(');

        object = parseExpression();

        expect(')');

        body = parseStatement();

        return markerApply(marker, delegate.createWithStatement(object, body));
    }

    // 12.10 The swith statement

    function parseSwitchCase() {
        var test,
            consequent = [],
            sourceElement,
            marker = markerCreate();

        if (matchKeyword('default')) {
            lex();
            test = null;
        } else {
            expectKeyword('case');
            test = parseExpression();
        }
        expect(':');

        while (index < length) {
            if (match('}') || matchKeyword('default') || matchKeyword('case')) {
                break;
            }
            sourceElement = parseSourceElement();
            if (typeof sourceElement === 'undefined') {
                break;
            }
            consequent.push(sourceElement);
        }

        return markerApply(marker, delegate.createSwitchCase(test, consequent));
    }

    function parseSwitchStatement() {
        var discriminant, cases, clause, oldInSwitch, defaultFound, marker = markerCreate();

        expectKeyword('switch');

        expect('(');

        discriminant = parseExpression();

        expect(')');

        expect('{');

        cases = [];

        if (match('}')) {
            lex();
            return markerApply(marker, delegate.createSwitchStatement(discriminant, cases));
        }

        oldInSwitch = state.inSwitch;
        state.inSwitch = true;
        defaultFound = false;

        while (index < length) {
            if (match('}')) {
                break;
            }
            clause = parseSwitchCase();
            if (clause.test === null) {
                if (defaultFound) {
                    throwError({}, Messages.MultipleDefaultsInSwitch);
                }
                defaultFound = true;
            }
            cases.push(clause);
        }

        state.inSwitch = oldInSwitch;

        expect('}');

        return markerApply(marker, delegate.createSwitchStatement(discriminant, cases));
    }

    // 12.13 The throw statement

    function parseThrowStatement() {
        var argument, marker = markerCreate();

        expectKeyword('throw');

        if (peekLineTerminator()) {
            throwError({}, Messages.NewlineAfterThrow);
        }

        argument = parseExpression();

        consumeSemicolon();

        return markerApply(marker, delegate.createThrowStatement(argument));
    }

    // 12.14 The try statement

    function parseCatchClause() {
        var param, body, marker = markerCreate();

        expectKeyword('catch');

        expect('(');
        if (match(')')) {
            throwUnexpected(lookahead);
        }

        param = parseExpression();
        // 12.14.1
        if (strict && param.type === Syntax.Identifier && isRestrictedWord(param.name)) {
            throwErrorTolerant({}, Messages.StrictCatchVariable);
        }

        expect(')');
        body = parseBlock();
        return markerApply(marker, delegate.createCatchClause(param, body));
    }

    function parseTryStatement() {
        var block, handlers = [], finalizer = null, marker = markerCreate();

        expectKeyword('try');

        block = parseBlock();

        if (matchKeyword('catch')) {
            handlers.push(parseCatchClause());
        }

        if (matchKeyword('finally')) {
            lex();
            finalizer = parseBlock();
        }

        if (handlers.length === 0 && !finalizer) {
            throwError({}, Messages.NoCatchOrFinally);
        }

        return markerApply(marker, delegate.createTryStatement(block, [], handlers, finalizer));
    }

    // 12.15 The debugger statement

    function parseDebuggerStatement() {
        var marker = markerCreate();
        expectKeyword('debugger');

        consumeSemicolon();

        return markerApply(marker, delegate.createDebuggerStatement());
    }

    // 12 Statements

    function parseStatement() {
        var type = lookahead.type,
            marker,
            expr,
            labeledBody,
            key;

        if (type === Token.EOF) {
            throwUnexpected(lookahead);
        }

        if (type === Token.Punctuator) {
            switch (lookahead.value) {
            case ';':
                return parseEmptyStatement();
            case '{':
                return parseBlock();
            case '(':
                return parseExpressionStatement();
            default:
                break;
            }
        }

        if (type === Token.Keyword) {
            switch (lookahead.value) {
            case 'break':
                return parseBreakStatement();
            case 'continue':
                return parseContinueStatement();
            case 'debugger':
                return parseDebuggerStatement();
            case 'do':
                return parseDoWhileStatement();
            case 'for':
                return parseForStatement();
            case 'function':
                return parseFunctionDeclaration();
            case 'class':
                return parseClassDeclaration();
            case 'if':
                return parseIfStatement();
            case 'return':
                return parseReturnStatement();
            case 'switch':
                return parseSwitchStatement();
            case 'throw':
                return parseThrowStatement();
            case 'try':
                return parseTryStatement();
            case 'var':
                return parseVariableStatement();
            case 'while':
                return parseWhileStatement();
            case 'with':
                return parseWithStatement();
            default:
                break;
            }
        }

        marker = markerCreate();
        expr = parseExpression();

        // 12.12 Labelled Statements
        if ((expr.type === Syntax.Identifier) && match(':')) {
            lex();

            key = '$' + expr.name;
            if (Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
                throwError({}, Messages.Redeclaration, 'Label', expr.name);
            }

            state.labelSet[key] = true;
            labeledBody = parseStatement();
            delete state.labelSet[key];
            return markerApply(marker, delegate.createLabeledStatement(expr, labeledBody));
        }

        consumeSemicolon();

        return markerApply(marker, delegate.createExpressionStatement(expr));
    }

    // 13 Function Definition

    function parseConciseBody() {
        if (match('{')) {
            return parseFunctionSourceElements();
        }
        return parseAssignmentExpression();
    }

    function parseFunctionSourceElements() {
        var sourceElement, sourceElements = [], token, directive, firstRestricted,
            oldLabelSet, oldInIteration, oldInSwitch, oldInFunctionBody, oldParenthesizedCount,
            marker = markerCreate();

        expect('{');

        while (index < length) {
            if (lookahead.type !== Token.StringLiteral) {
                break;
            }
            token = lookahead;

            sourceElement = parseSourceElement();
            sourceElements.push(sourceElement);
            if (sourceElement.expression.type !== Syntax.Literal) {
                // this is not directive
                break;
            }
            directive = source.slice(token.range[0] + 1, token.range[1] - 1);
            if (directive === 'use strict') {
                strict = true;
                if (firstRestricted) {
                    throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);
                }
            } else {
                if (!firstRestricted && token.octal) {
                    firstRestricted = token;
                }
            }
        }

        oldLabelSet = state.labelSet;
        oldInIteration = state.inIteration;
        oldInSwitch = state.inSwitch;
        oldInFunctionBody = state.inFunctionBody;
        oldParenthesizedCount = state.parenthesizedCount;

        state.labelSet = {};
        state.inIteration = false;
        state.inSwitch = false;
        state.inFunctionBody = true;
        state.parenthesizedCount = 0;

        while (index < length) {
            if (match('}')) {
                break;
            }
            sourceElement = parseSourceElement();
            if (typeof sourceElement === 'undefined') {
                break;
            }
            sourceElements.push(sourceElement);
        }

        expect('}');

        state.labelSet = oldLabelSet;
        state.inIteration = oldInIteration;
        state.inSwitch = oldInSwitch;
        state.inFunctionBody = oldInFunctionBody;
        state.parenthesizedCount = oldParenthesizedCount;

        return markerApply(marker, delegate.createBlockStatement(sourceElements));
    }

    function validateParam(options, param, name) {
        var key = '$' + name;
        if (strict) {
            if (isRestrictedWord(name)) {
                options.stricted = param;
                options.message = Messages.StrictParamName;
            }
            if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
                options.stricted = param;
                options.message = Messages.StrictParamDupe;
            }
        } else if (!options.firstRestricted) {
            if (isRestrictedWord(name)) {
                options.firstRestricted = param;
                options.message = Messages.StrictParamName;
            } else if (isStrictModeReservedWord(name)) {
                options.firstRestricted = param;
                options.message = Messages.StrictReservedWord;
            } else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
                options.firstRestricted = param;
                options.message = Messages.StrictParamDupe;
            }
        }
        options.paramSet[key] = true;
    }

    function parseParam(options) {
        var token, rest, param, def;

        token = lookahead;
        if (token.value === '...') {
            token = lex();
            rest = true;
        }

        if (match('[')) {
            param = parseArrayInitialiser();
            reinterpretAsDestructuredParameter(options, param);
        } else if (match('{')) {
            if (rest) {
                throwError({}, Messages.ObjectPatternAsRestParameter);
            }
            param = parseObjectInitialiser();
            reinterpretAsDestructuredParameter(options, param);
        } else {
            // Typing rest params is awkward, so punting on that for now
            param =
                rest
                ? parseVariableIdentifier()
                : parseTypeAnnotatableIdentifier(
                    false, /* requireTypeAnnotation */
                    true /* canBeOptionalParam */
                );

            validateParam(options, token, token.value);
        }

        if (match('=')) {
            if (rest) {
                throwErrorTolerant(lookahead, Messages.DefaultRestParameter);
            }
            lex();
            def = parseAssignmentExpression();
            ++options.defaultCount;
        }

        if (rest) {
            if (!match(')')) {
                throwError({}, Messages.ParameterAfterRestParameter);
            }
            options.rest = param;
            return false;
        }

        options.params.push(param);
        options.defaults.push(def);
        return !match(')');
    }

    function parseParams(firstRestricted) {
        var options, marker = markerCreate();

        options = {
            params: [],
            defaultCount: 0,
            defaults: [],
            rest: null,
            firstRestricted: firstRestricted
        };

        expect('(');

        if (!match(')')) {
            options.paramSet = {};
            while (index < length) {
                if (!parseParam(options)) {
                    break;
                }
                expect(',');
            }
        }

        expect(')');

        if (options.defaultCount === 0) {
            options.defaults = [];
        }

        if (match(':')) {
            options.returnType = parseTypeAnnotation();
        }

        return markerApply(marker, options);
    }

    function parseFunctionDeclaration() {
        var id, body, token, tmp, firstRestricted, message, previousStrict, previousYieldAllowed, generator,
            marker = markerCreate(), parametricType;

        expectKeyword('function');

        generator = false;
        if (match('*')) {
            lex();
            generator = true;
        }

        token = lookahead;

        id = parseVariableIdentifier();

        if (match('<')) {
            parametricType = parseParametricTypeAnnotation();
        }

        if (strict) {
            if (isRestrictedWord(token.value)) {
                throwErrorTolerant(token, Messages.StrictFunctionName);
            }
        } else {
            if (isRestrictedWord(token.value)) {
                firstRestricted = token;
                message = Messages.StrictFunctionName;
            } else if (isStrictModeReservedWord(token.value)) {
                firstRestricted = token;
                message = Messages.StrictReservedWord;
            }
        }

        tmp = parseParams(firstRestricted);
        firstRestricted = tmp.firstRestricted;
        if (tmp.message) {
            message = tmp.message;
        }

        previousStrict = strict;
        previousYieldAllowed = state.yieldAllowed;
        state.yieldAllowed = generator;

        body = parseFunctionSourceElements();

        if (strict && firstRestricted) {
            throwError(firstRestricted, message);
        }
        if (strict && tmp.stricted) {
            throwErrorTolerant(tmp.stricted, message);
        }
        strict = previousStrict;
        state.yieldAllowed = previousYieldAllowed;

        return markerApply(marker, delegate.createFunctionDeclaration(id, tmp.params, tmp.defaults, body, tmp.rest, generator, false,
            tmp.returnType, parametricType));
    }

    function parseFunctionExpression() {
        var token, id = null, firstRestricted, message, tmp, body, previousStrict, previousYieldAllowed, generator,
            marker = markerCreate(), parametricType;

        expectKeyword('function');

        generator = false;

        if (match('*')) {
            lex();
            generator = true;
        }

        if (!match('(')) {
            if (!match('<')) {
                token = lookahead;
                id = parseVariableIdentifier();

                if (strict) {
                    if (isRestrictedWord(token.value)) {
                        throwErrorTolerant(token, Messages.StrictFunctionName);
                    }
                } else {
                    if (isRestrictedWord(token.value)) {
                        firstRestricted = token;
                        message = Messages.StrictFunctionName;
                    } else if (isStrictModeReservedWord(token.value)) {
                        firstRestricted = token;
                        message = Messages.StrictReservedWord;
                    }
                }
            }

            if (match('<')) {
                parametricType = parseParametricTypeAnnotation();
            }
        }

        tmp = parseParams(firstRestricted);
        firstRestricted = tmp.firstRestricted;
        if (tmp.message) {
            message = tmp.message;
        }

        previousStrict = strict;
        previousYieldAllowed = state.yieldAllowed;
        state.yieldAllowed = generator;

        body = parseFunctionSourceElements();

        if (strict && firstRestricted) {
            throwError(firstRestricted, message);
        }
        if (strict && tmp.stricted) {
            throwErrorTolerant(tmp.stricted, message);
        }
        strict = previousStrict;
        state.yieldAllowed = previousYieldAllowed;

        return markerApply(marker, delegate.createFunctionExpression(id, tmp.params, tmp.defaults, body, tmp.rest, generator, false,
            tmp.returnType, parametricType));
    }

    function parseYieldExpression() {
        var yieldToken, delegateFlag, expr, marker = markerCreate();

        yieldToken = lex();
        assert(yieldToken.value === 'yield', 'Called parseYieldExpression with non-yield lookahead.');

        if (!state.yieldAllowed) {
            throwErrorTolerant({}, Messages.IllegalYield);
        }

        delegateFlag = false;
        if (match('*')) {
            lex();
            delegateFlag = true;
        }

        expr = parseAssignmentExpression();

        return markerApply(marker, delegate.createYieldExpression(expr, delegateFlag));
    }

    // 14 Classes

    function parseMethodDefinition(existingPropNames) {
        var token, key, param, propType, isValidDuplicateProp = false,
            marker = markerCreate(), token2, parametricType,
            parametricTypeMarker, annotationMarker;

        if (lookahead.value === 'static') {
            propType = ClassPropertyType.static;
            lex();
        } else {
            propType = ClassPropertyType.prototype;
        }

        if (match('*')) {
            lex();
            return markerApply(marker, delegate.createMethodDefinition(
                propType,
                '',
                parseObjectPropertyKey(),
                parsePropertyMethodFunction({ generator: true })
            ));
        }

        token = lookahead;
        //parametricTypeMarker = markerCreate();
        key = parseObjectPropertyKey();

        if (token.value === 'get' && !match('(')) {
            key = parseObjectPropertyKey();

            // It is a syntax error if any other properties have a name
            // duplicating this one unless they are a setter
            if (existingPropNames[propType].hasOwnProperty(key.name)) {
                isValidDuplicateProp =
                    // There isn't already a getter for this prop
                    existingPropNames[propType][key.name].get === undefined
                    // There isn't already a data prop by this name
                    && existingPropNames[propType][key.name].data === undefined
                    // The only existing prop by this name is a setter
                    && existingPropNames[propType][key.name].set !== undefined;
                if (!isValidDuplicateProp) {
                    throwError(key, Messages.IllegalDuplicateClassProperty);
                }
            } else {
                existingPropNames[propType][key.name] = {};
            }
            existingPropNames[propType][key.name].get = true;

            expect('(');
            expect(')');
            return markerApply(marker, delegate.createMethodDefinition(
                propType,
                'get',
                key,
                parsePropertyFunction({ generator: false })
            ));
        }
        if (token.value === 'set' && !match('(')) {
            key = parseObjectPropertyKey();

            // It is a syntax error if any other properties have a name
            // duplicating this one unless they are a getter
            if (existingPropNames[propType].hasOwnProperty(key.name)) {
                isValidDuplicateProp =
                    // There isn't already a setter for this prop
                    existingPropNames[propType][key.name].set === undefined
                    // There isn't already a data prop by this name
                    && existingPropNames[propType][key.name].data === undefined
                    // The only existing prop by this name is a getter
                    && existingPropNames[propType][key.name].get !== undefined;
                if (!isValidDuplicateProp) {
                    throwError(key, Messages.IllegalDuplicateClassProperty);
                }
            } else {
                existingPropNames[propType][key.name] = {};
            }
            existingPropNames[propType][key.name].set = true;

            expect('(');
            token = lookahead;
            param = [ parseTypeAnnotatableIdentifier() ];
            expect(')');
            return markerApply(marker, delegate.createMethodDefinition(
                propType,
                'set',
                key,
                parsePropertyFunction({ params: param, generator: false, name: token })
            ));
        }

        if (match('<')) {
            parametricType = parseParametricTypeAnnotation();
        }

        // It is a syntax error if any other properties have the same name as a
        // non-getter, non-setter method
        if (existingPropNames[propType].hasOwnProperty(key.name)) {
            throwError(key, Messages.IllegalDuplicateClassProperty);
        } else {
            existingPropNames[propType][key.name] = {};
        }
        existingPropNames[propType][key.name].data = true;

        return markerApply(marker, delegate.createMethodDefinition(
            propType,
            '',
            key,
            parsePropertyMethodFunction({
                generator: false,
                parametricType: parametricType
            })
        ));
    }

    function parseClassProperty(existingPropNames) {
        var marker = markerCreate(), propertyIdentifier;

        propertyIdentifier = parseTypeAnnotatableIdentifier();
        expect(';');

        return markerApply(marker, delegate.createClassProperty(
            propertyIdentifier
        ));
    }

    function parseClassElement(existingProps) {
        if (match(';')) {
            lex();
            return;
        }

        var doubleLookahead = lookahead2();
        if (doubleLookahead.type === Token.Punctuator) {
            if (doubleLookahead.value === ':') {
                return parseClassProperty(existingProps);
            }
        }

        return parseMethodDefinition(existingProps);
    }

    function parseClassBody() {
        var classElement, classElements = [], existingProps = {}, marker = markerCreate();

        existingProps[ClassPropertyType.static] = {};
        existingProps[ClassPropertyType.prototype] = {};

        expect('{');

        while (index < length) {
            if (match('}')) {
                break;
            }
            classElement = parseClassElement(existingProps);

            if (typeof classElement !== 'undefined') {
                classElements.push(classElement);
            }
        }

        expect('}');

        return markerApply(marker, delegate.createClassBody(classElements));
    }

    function parseClassExpression() {
        var id, previousYieldAllowed, superClass = null, marker = markerCreate(),
            parametricType;

        expectKeyword('class');

        if (!matchKeyword('extends') && !match('{')) {
            id = parseVariableIdentifier();
        }

        if (match('<')) {
            parametricType = parseParametricTypeAnnotation();
        }

        if (matchKeyword('extends')) {
            expectKeyword('extends');
            previousYieldAllowed = state.yieldAllowed;
            state.yieldAllowed = false;
            superClass = parseAssignmentExpression();
            state.yieldAllowed = previousYieldAllowed;
        }

        return markerApply(marker, delegate.createClassExpression(id, superClass, parseClassBody(), parametricType));
    }

    function parseClassDeclaration() {
        var id, previousYieldAllowed, superClass = null, marker = markerCreate(),
            parametricType, superParametricType;

        expectKeyword('class');

        id = parseVariableIdentifier();

        if (match('<')) {
            parametricType = parseParametricTypeAnnotation();
        }

        if (matchKeyword('extends')) {
            expectKeyword('extends');
            previousYieldAllowed = state.yieldAllowed;
            state.yieldAllowed = false;
            superClass = parseAssignmentExpression();
            state.yieldAllowed = previousYieldAllowed;
        }

        return markerApply(marker, delegate.createClassDeclaration(id, superClass, parseClassBody(), parametricType, superParametricType));
    }

    // 15 Program

    function matchModuleDeclaration() {
        var id;
        if (matchContextualKeyword('module')) {
            id = lookahead2();
            return id.type === Token.StringLiteral || id.type === Token.Identifier;
        }
        return false;
    }

    function parseSourceElement() {
        if (lookahead.type === Token.Keyword) {
            switch (lookahead.value) {
            case 'const':
            case 'let':
                return parseConstLetDeclaration(lookahead.value);
            case 'function':
                return parseFunctionDeclaration();
            case 'export':
                return parseExportDeclaration();
            case 'import':
                return parseImportDeclaration();
            default:
                return parseStatement();
            }
        }

        if (matchModuleDeclaration()) {
            throwError({}, Messages.NestedModule);
        }

        if (lookahead.type !== Token.EOF) {
            return parseStatement();
        }
    }

    function parseProgramElement() {
        if (lookahead.type === Token.Keyword) {
            switch (lookahead.value) {
            case 'export':
                return parseExportDeclaration();
            case 'import':
                return parseImportDeclaration();
            }
        }

        if (matchModuleDeclaration()) {
            return parseModuleDeclaration();
        }

        return parseSourceElement();
    }

    function parseProgramElements() {
        var sourceElement, sourceElements = [], token, directive, firstRestricted;

        while (index < length) {
            token = lookahead;
            if (token.type !== Token.StringLiteral) {
                break;
            }

            sourceElement = parseProgramElement();
            sourceElements.push(sourceElement);
            if (sourceElement.expression.type !== Syntax.Literal) {
                // this is not directive
                break;
            }
            directive = source.slice(token.range[0] + 1, token.range[1] - 1);
            if (directive === 'use strict') {
                strict = true;
                if (firstRestricted) {
                    throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);
                }
            } else {
                if (!firstRestricted && token.octal) {
                    firstRestricted = token;
                }
            }
        }

        while (index < length) {
            sourceElement = parseProgramElement();
            if (typeof sourceElement === 'undefined') {
                break;
            }
            sourceElements.push(sourceElement);
        }
        return sourceElements;
    }

    function parseModuleElement() {
        return parseSourceElement();
    }

    function parseModuleElements() {
        var list = [],
            statement;

        while (index < length) {
            if (match('}')) {
                break;
            }
            statement = parseModuleElement();
            if (typeof statement === 'undefined') {
                break;
            }
            list.push(statement);
        }

        return list;
    }

    function parseModuleBlock() {
        var block, marker = markerCreate();

        expect('{');

        block = parseModuleElements();

        expect('}');

        return markerApply(marker, delegate.createBlockStatement(block));
    }

    function parseProgram() {
        var body, marker = markerCreate();
        strict = false;
        peek();
        body = parseProgramElements();
        return markerApply(marker, delegate.createProgram(body));
    }

    // The following functions are needed only when the option to preserve
    // the comments is active.

    function addComment(type, value, start, end, loc) {
        var comment;

        assert(typeof start === 'number', 'Comment must have valid position');

        // Because the way the actual token is scanned, often the comments
        // (if any) are skipped twice during the lexical analysis.
        // Thus, we need to skip adding a comment if the comment array already
        // handled it.
        if (state.lastCommentStart >= start) {
            return;
        }
        state.lastCommentStart = start;

        comment = {
            type: type,
            value: value
        };
        if (extra.range) {
            comment.range = [start, end];
        }
        if (extra.loc) {
            comment.loc = loc;
        }
        extra.comments.push(comment);
        if (extra.attachComment) {
            extra.leadingComments.push(comment);
            extra.trailingComments.push(comment);
        }
    }

    function scanComment() {
        var comment, ch, loc, start, blockComment, lineComment;

        comment = '';
        blockComment = false;
        lineComment = false;

        while (index < length) {
            ch = source[index];

            if (lineComment) {
                ch = source[index++];
                if (isLineTerminator(ch.charCodeAt(0))) {
                    loc.end = {
                        line: lineNumber,
                        column: index - lineStart - 1
                    };
                    lineComment = false;
                    addComment('Line', comment, start, index - 1, loc);
                    if (ch === '\r' && source[index] === '\n') {
                        ++index;
                    }
                    ++lineNumber;
                    lineStart = index;
                    comment = '';
                } else if (index >= length) {
                    lineComment = false;
                    comment += ch;
                    loc.end = {
                        line: lineNumber,
                        column: length - lineStart
                    };
                    addComment('Line', comment, start, length, loc);
                } else {
                    comment += ch;
                }
            } else if (blockComment) {
                if (isLineTerminator(ch.charCodeAt(0))) {
                    if (ch === '\r') {
                        ++index;
                        comment += '\r';
                    }
                    if (ch !== '\r' || source[index] === '\n') {
                        comment += source[index];
                        ++lineNumber;
                        ++index;
                        lineStart = index;
                        if (index >= length) {
                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                        }
                    }
                } else {
                    ch = source[index++];
                    if (index >= length) {
                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                    }
                    comment += ch;
                    if (ch === '*') {
                        ch = source[index];
                        if (ch === '/') {
                            comment = comment.substr(0, comment.length - 1);
                            blockComment = false;
                            ++index;
                            loc.end = {
                                line: lineNumber,
                                column: index - lineStart
                            };
                            addComment('Block', comment, start, index, loc);
                            comment = '';
                        }
                    }
                }
            } else if (ch === '/') {
                ch = source[index + 1];
                if (ch === '/') {
                    loc = {
                        start: {
                            line: lineNumber,
                            column: index - lineStart
                        }
                    };
                    start = index;
                    index += 2;
                    lineComment = true;
                    if (index >= length) {
                        loc.end = {
                            line: lineNumber,
                            column: index - lineStart
                        };
                        lineComment = false;
                        addComment('Line', comment, start, index, loc);
                    }
                } else if (ch === '*') {
                    start = index;
                    index += 2;
                    blockComment = true;
                    loc = {
                        start: {
                            line: lineNumber,
                            column: index - lineStart - 2
                        }
                    };
                    if (index >= length) {
                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                    }
                } else {
                    break;
                }
            } else if (isWhiteSpace(ch.charCodeAt(0))) {
                ++index;
            } else if (isLineTerminator(ch.charCodeAt(0))) {
                ++index;
                if (ch ===  '\r' && source[index] === '\n') {
                    ++index;
                }
                ++lineNumber;
                lineStart = index;
            } else {
                break;
            }
        }
    }

    // 16 XJS

    XHTMLEntities = {
        quot: '\u0022',
        amp: '&',
        apos: '\u0027',
        lt: '<',
        gt: '>',
        nbsp: '\u00A0',
        iexcl: '\u00A1',
        cent: '\u00A2',
        pound: '\u00A3',
        curren: '\u00A4',
        yen: '\u00A5',
        brvbar: '\u00A6',
        sect: '\u00A7',
        uml: '\u00A8',
        copy: '\u00A9',
        ordf: '\u00AA',
        laquo: '\u00AB',
        not: '\u00AC',
        shy: '\u00AD',
        reg: '\u00AE',
        macr: '\u00AF',
        deg: '\u00B0',
        plusmn: '\u00B1',
        sup2: '\u00B2',
        sup3: '\u00B3',
        acute: '\u00B4',
        micro: '\u00B5',
        para: '\u00B6',
        middot: '\u00B7',
        cedil: '\u00B8',
        sup1: '\u00B9',
        ordm: '\u00BA',
        raquo: '\u00BB',
        frac14: '\u00BC',
        frac12: '\u00BD',
        frac34: '\u00BE',
        iquest: '\u00BF',
        Agrave: '\u00C0',
        Aacute: '\u00C1',
        Acirc: '\u00C2',
        Atilde: '\u00C3',
        Auml: '\u00C4',
        Aring: '\u00C5',
        AElig: '\u00C6',
        Ccedil: '\u00C7',
        Egrave: '\u00C8',
        Eacute: '\u00C9',
        Ecirc: '\u00CA',
        Euml: '\u00CB',
        Igrave: '\u00CC',
        Iacute: '\u00CD',
        Icirc: '\u00CE',
        Iuml: '\u00CF',
        ETH: '\u00D0',
        Ntilde: '\u00D1',
        Ograve: '\u00D2',
        Oacute: '\u00D3',
        Ocirc: '\u00D4',
        Otilde: '\u00D5',
        Ouml: '\u00D6',
        times: '\u00D7',
        Oslash: '\u00D8',
        Ugrave: '\u00D9',
        Uacute: '\u00DA',
        Ucirc: '\u00DB',
        Uuml: '\u00DC',
        Yacute: '\u00DD',
        THORN: '\u00DE',
        szlig: '\u00DF',
        agrave: '\u00E0',
        aacute: '\u00E1',
        acirc: '\u00E2',
        atilde: '\u00E3',
        auml: '\u00E4',
        aring: '\u00E5',
        aelig: '\u00E6',
        ccedil: '\u00E7',
        egrave: '\u00E8',
        eacute: '\u00E9',
        ecirc: '\u00EA',
        euml: '\u00EB',
        igrave: '\u00EC',
        iacute: '\u00ED',
        icirc: '\u00EE',
        iuml: '\u00EF',
        eth: '\u00F0',
        ntilde: '\u00F1',
        ograve: '\u00F2',
        oacute: '\u00F3',
        ocirc: '\u00F4',
        otilde: '\u00F5',
        ouml: '\u00F6',
        divide: '\u00F7',
        oslash: '\u00F8',
        ugrave: '\u00F9',
        uacute: '\u00FA',
        ucirc: '\u00FB',
        uuml: '\u00FC',
        yacute: '\u00FD',
        thorn: '\u00FE',
        yuml: '\u00FF',
        OElig: '\u0152',
        oelig: '\u0153',
        Scaron: '\u0160',
        scaron: '\u0161',
        Yuml: '\u0178',
        fnof: '\u0192',
        circ: '\u02C6',
        tilde: '\u02DC',
        Alpha: '\u0391',
        Beta: '\u0392',
        Gamma: '\u0393',
        Delta: '\u0394',
        Epsilon: '\u0395',
        Zeta: '\u0396',
        Eta: '\u0397',
        Theta: '\u0398',
        Iota: '\u0399',
        Kappa: '\u039A',
        Lambda: '\u039B',
        Mu: '\u039C',
        Nu: '\u039D',
        Xi: '\u039E',
        Omicron: '\u039F',
        Pi: '\u03A0',
        Rho: '\u03A1',
        Sigma: '\u03A3',
        Tau: '\u03A4',
        Upsilon: '\u03A5',
        Phi: '\u03A6',
        Chi: '\u03A7',
        Psi: '\u03A8',
        Omega: '\u03A9',
        alpha: '\u03B1',
        beta: '\u03B2',
        gamma: '\u03B3',
        delta: '\u03B4',
        epsilon: '\u03B5',
        zeta: '\u03B6',
        eta: '\u03B7',
        theta: '\u03B8',
        iota: '\u03B9',
        kappa: '\u03BA',
        lambda: '\u03BB',
        mu: '\u03BC',
        nu: '\u03BD',
        xi: '\u03BE',
        omicron: '\u03BF',
        pi: '\u03C0',
        rho: '\u03C1',
        sigmaf: '\u03C2',
        sigma: '\u03C3',
        tau: '\u03C4',
        upsilon: '\u03C5',
        phi: '\u03C6',
        chi: '\u03C7',
        psi: '\u03C8',
        omega: '\u03C9',
        thetasym: '\u03D1',
        upsih: '\u03D2',
        piv: '\u03D6',
        ensp: '\u2002',
        emsp: '\u2003',
        thinsp: '\u2009',
        zwnj: '\u200C',
        zwj: '\u200D',
        lrm: '\u200E',
        rlm: '\u200F',
        ndash: '\u2013',
        mdash: '\u2014',
        lsquo: '\u2018',
        rsquo: '\u2019',
        sbquo: '\u201A',
        ldquo: '\u201C',
        rdquo: '\u201D',
        bdquo: '\u201E',
        dagger: '\u2020',
        Dagger: '\u2021',
        bull: '\u2022',
        hellip: '\u2026',
        permil: '\u2030',
        prime: '\u2032',
        Prime: '\u2033',
        lsaquo: '\u2039',
        rsaquo: '\u203A',
        oline: '\u203E',
        frasl: '\u2044',
        euro: '\u20AC',
        image: '\u2111',
        weierp: '\u2118',
        real: '\u211C',
        trade: '\u2122',
        alefsym: '\u2135',
        larr: '\u2190',
        uarr: '\u2191',
        rarr: '\u2192',
        darr: '\u2193',
        harr: '\u2194',
        crarr: '\u21B5',
        lArr: '\u21D0',
        uArr: '\u21D1',
        rArr: '\u21D2',
        dArr: '\u21D3',
        hArr: '\u21D4',
        forall: '\u2200',
        part: '\u2202',
        exist: '\u2203',
        empty: '\u2205',
        nabla: '\u2207',
        isin: '\u2208',
        notin: '\u2209',
        ni: '\u220B',
        prod: '\u220F',
        sum: '\u2211',
        minus: '\u2212',
        lowast: '\u2217',
        radic: '\u221A',
        prop: '\u221D',
        infin: '\u221E',
        ang: '\u2220',
        and: '\u2227',
        or: '\u2228',
        cap: '\u2229',
        cup: '\u222A',
        'int': '\u222B',
        there4: '\u2234',
        sim: '\u223C',
        cong: '\u2245',
        asymp: '\u2248',
        ne: '\u2260',
        equiv: '\u2261',
        le: '\u2264',
        ge: '\u2265',
        sub: '\u2282',
        sup: '\u2283',
        nsub: '\u2284',
        sube: '\u2286',
        supe: '\u2287',
        oplus: '\u2295',
        otimes: '\u2297',
        perp: '\u22A5',
        sdot: '\u22C5',
        lceil: '\u2308',
        rceil: '\u2309',
        lfloor: '\u230A',
        rfloor: '\u230B',
        lang: '\u2329',
        rang: '\u232A',
        loz: '\u25CA',
        spades: '\u2660',
        clubs: '\u2663',
        hearts: '\u2665',
        diams: '\u2666'
    };

    function getQualifiedXJSName(object) {
        if (object.type === Syntax.XJSIdentifier) {
            return object.name;
        }
        if (object.type === Syntax.XJSNamespacedName) {
            return object.namespace.name + ':' + object.name.name;
        }
        if (object.type === Syntax.XJSMemberExpression) {
            return (
                getQualifiedXJSName(object.object) + '.' +
                getQualifiedXJSName(object.property)
            );
        }
    }

    function isXJSIdentifierStart(ch) {
        // exclude backslash (\)
        return (ch !== 92) && isIdentifierStart(ch);
    }

    function isXJSIdentifierPart(ch) {
        // exclude backslash (\) and add hyphen (-)
        return (ch !== 92) && (ch === 45 || isIdentifierPart(ch));
    }

    function scanXJSIdentifier() {
        var ch, start, value = '';

        start = index;
        while (index < length) {
            ch = source.charCodeAt(index);
            if (!isXJSIdentifierPart(ch)) {
                break;
            }
            value += source[index++];
        }

        return {
            type: Token.XJSIdentifier,
            value: value,
            lineNumber: lineNumber,
            lineStart: lineStart,
            range: [start, index]
        };
    }

    function scanXJSEntity() {
        var ch, str = '', count = 0, entity;
        ch = source[index];
        assert(ch === '&', 'Entity must start with an ampersand');
        index++;
        while (index < length && count++ < 10) {
            ch = source[index++];
            if (ch === ';') {
                break;
            }
            str += ch;
        }

        if (str[0] === '#' && str[1] === 'x') {
            entity = String.fromCharCode(parseInt(str.substr(2), 16));
        } else if (str[0] === '#') {
            entity = String.fromCharCode(parseInt(str.substr(1), 10));
        } else {
            entity = XHTMLEntities[str];
        }
        return entity;
    }

    function scanXJSText(stopChars) {
        var ch, str = '', start;
        start = index;
        while (index < length) {
            ch = source[index];
            if (stopChars.indexOf(ch) !== -1) {
                break;
            }
            if (ch === '&') {
                str += scanXJSEntity();
            } else {
                index++;
                if (ch === '\r' && source[index] === '\n') {
                    str += ch;
                    ch = source[index];
                    index++;
                }
                if (isLineTerminator(ch.charCodeAt(0))) {
                    ++lineNumber;
                    lineStart = index;
                }
                str += ch;
            }
        }
        return {
            type: Token.XJSText,
            value: str,
            lineNumber: lineNumber,
            lineStart: lineStart,
            range: [start, index]
        };
    }

    function scanXJSStringLiteral() {
        var innerToken, quote, start;

        quote = source[index];
        assert((quote === '\'' || quote === '"'),
            'String literal must starts with a quote');

        start = index;
        ++index;

        innerToken = scanXJSText([quote]);

        if (quote !== source[index]) {
            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
        }

        ++index;

        innerToken.range = [start, index];

        return innerToken;
    }

    /**
     * Between XJS opening and closing tags (e.g. <foo>HERE</foo>), anything that
     * is not another XJS tag and is not an expression wrapped by {} is text.
     */
    function advanceXJSChild() {
        var ch = source.charCodeAt(index);

        // { (123) and < (60)
        if (ch !== 123 && ch !== 60) {
            return scanXJSText(['<', '{']);
        }

        return scanPunctuator();
    }

    function parseXJSIdentifier() {
        var token, marker = markerCreate();

        if (lookahead.type !== Token.XJSIdentifier) {
            throwUnexpected(lookahead);
        }

        token = lex();
        return markerApply(marker, delegate.createXJSIdentifier(token.value));
    }

    function parseXJSNamespacedName() {
        var namespace, name, marker = markerCreate();

        namespace = parseXJSIdentifier();
        expect(':');
        name = parseXJSIdentifier();

        return markerApply(marker, delegate.createXJSNamespacedName(namespace, name));
    }

    function parseXJSMemberExpression() {
        var marker = markerCreate(),
            expr = parseXJSIdentifier();

        while (match('.')) {
            lex();
            expr = markerApply(marker, delegate.createXJSMemberExpression(expr, parseXJSIdentifier()));
        }

        return expr;
    }

    function parseXJSElementName() {
        if (lookahead2().value === ':') {
            return parseXJSNamespacedName();
        }
        if (lookahead2().value === '.') {
            return parseXJSMemberExpression();
        }

        return parseXJSIdentifier();
    }

    function parseXJSAttributeName() {
        if (lookahead2().value === ':') {
            return parseXJSNamespacedName();
        }

        return parseXJSIdentifier();
    }

    function parseXJSAttributeValue() {
        var value, marker;
        if (match('{')) {
            value = parseXJSExpressionContainer();
            if (value.expression.type === Syntax.XJSEmptyExpression) {
                throwError(
                    value,
                    'XJS attributes must only be assigned a non-empty ' +
                        'expression'
                );
            }
        } else if (match('<')) {
            value = parseXJSElement();
        } else if (lookahead.type === Token.XJSText) {
            marker = markerCreate();
            value = markerApply(marker, delegate.createLiteral(lex()));
        } else {
            throwError({}, Messages.InvalidXJSAttributeValue);
        }
        return value;
    }

    function parseXJSEmptyExpression() {
        var marker = markerCreatePreserveWhitespace();
        while (source.charAt(index) !== '}') {
            index++;
        }
        return markerApply(marker, delegate.createXJSEmptyExpression());
    }

    function parseXJSExpressionContainer() {
        var expression, origInXJSChild, origInXJSTag, marker = markerCreate();

        origInXJSChild = state.inXJSChild;
        origInXJSTag = state.inXJSTag;
        state.inXJSChild = false;
        state.inXJSTag = false;

        expect('{');

        if (match('}')) {
            expression = parseXJSEmptyExpression();
        } else {
            expression = parseExpression();
        }

        state.inXJSChild = origInXJSChild;
        state.inXJSTag = origInXJSTag;

        expect('}');

        return markerApply(marker, delegate.createXJSExpressionContainer(expression));
    }

    function parseXJSSpreadAttribute() {
        var expression, origInXJSChild, origInXJSTag, marker = markerCreate();

        origInXJSChild = state.inXJSChild;
        origInXJSTag = state.inXJSTag;
        state.inXJSChild = false;
        state.inXJSTag = false;

        expect('{');
        expect('...');

        expression = parseAssignmentExpression();

        state.inXJSChild = origInXJSChild;
        state.inXJSTag = origInXJSTag;

        expect('}');

        return markerApply(marker, delegate.createXJSSpreadAttribute(expression));
    }

    function parseXJSAttribute() {
        var name, marker;

        if (match('{')) {
            return parseXJSSpreadAttribute();
        }

        marker = markerCreate();

        name = parseXJSAttributeName();

        // HTML empty attribute
        if (match('=')) {
            lex();
            return markerApply(marker, delegate.createXJSAttribute(name, parseXJSAttributeValue()));
        }

        return markerApply(marker, delegate.createXJSAttribute(name));
    }

    function parseXJSChild() {
        var token, marker;
        if (match('{')) {
            token = parseXJSExpressionContainer();
        } else if (lookahead.type === Token.XJSText) {
            marker = markerCreatePreserveWhitespace();
            token = markerApply(marker, delegate.createLiteral(lex()));
        } else {
            token = parseXJSElement();
        }
        return token;
    }

    function parseXJSClosingElement() {
        var name, origInXJSChild, origInXJSTag, marker = markerCreate();
        origInXJSChild = state.inXJSChild;
        origInXJSTag = state.inXJSTag;
        state.inXJSChild = false;
        state.inXJSTag = true;
        expect('<');
        expect('/');
        name = parseXJSElementName();
        // Because advance() (called by lex() called by expect()) expects there
        // to be a valid token after >, it needs to know whether to look for a
        // standard JS token or an XJS text node
        state.inXJSChild = origInXJSChild;
        state.inXJSTag = origInXJSTag;
        expect('>');
        return markerApply(marker, delegate.createXJSClosingElement(name));
    }

    function parseXJSOpeningElement() {
        var name, attribute, attributes = [], selfClosing = false, origInXJSChild, origInXJSTag, marker = markerCreate();

        origInXJSChild = state.inXJSChild;
        origInXJSTag = state.inXJSTag;
        state.inXJSChild = false;
        state.inXJSTag = true;

        expect('<');

        name = parseXJSElementName();

        while (index < length &&
                lookahead.value !== '/' &&
                lookahead.value !== '>') {
            attributes.push(parseXJSAttribute());
        }

        state.inXJSTag = origInXJSTag;

        if (lookahead.value === '/') {
            expect('/');
            // Because advance() (called by lex() called by expect()) expects
            // there to be a valid token after >, it needs to know whether to
            // look for a standard JS token or an XJS text node
            state.inXJSChild = origInXJSChild;
            expect('>');
            selfClosing = true;
        } else {
            state.inXJSChild = true;
            expect('>');
        }
        return markerApply(marker, delegate.createXJSOpeningElement(name, attributes, selfClosing));
    }

    function parseXJSElement() {
        var openingElement, closingElement = null, children = [], origInXJSChild, origInXJSTag, marker = markerCreate();

        origInXJSChild = state.inXJSChild;
        origInXJSTag = state.inXJSTag;
        openingElement = parseXJSOpeningElement();

        if (!openingElement.selfClosing) {
            while (index < length) {
                state.inXJSChild = false; // Call lookahead2() with inXJSChild = false because </ should not be considered in the child
                if (lookahead.value === '<' && lookahead2().value === '/') {
                    break;
                }
                state.inXJSChild = true;
                children.push(parseXJSChild());
            }
            state.inXJSChild = origInXJSChild;
            state.inXJSTag = origInXJSTag;
            closingElement = parseXJSClosingElement();
            if (getQualifiedXJSName(closingElement.name) !== getQualifiedXJSName(openingElement.name)) {
                throwError({}, Messages.ExpectedXJSClosingTag, getQualifiedXJSName(openingElement.name));
            }
        }

        // When (erroneously) writing two adjacent tags like
        //
        //     var x = <div>one</div><div>two</div>;
        //
        // the default error message is a bit incomprehensible. Since it's
        // rarely (never?) useful to write a less-than sign after an XJS
        // element, we disallow it here in the parser in order to provide a
        // better error message. (In the rare case that the less-than operator
        // was intended, the left tag can be wrapped in parentheses.)
        if (!origInXJSChild && match('<')) {
            throwError(lookahead, Messages.AdjacentXJSElements);
        }

        return markerApply(marker, delegate.createXJSElement(openingElement, closingElement, children));
    }

    function collectToken() {
        var start, loc, token, range, value;

        if (!state.inXJSChild) {
            skipComment();
        }

        start = index;
        loc = {
            start: {
                line: lineNumber,
                column: index - lineStart
            }
        };

        token = extra.advance();
        loc.end = {
            line: lineNumber,
            column: index - lineStart
        };

        if (token.type !== Token.EOF) {
            range = [token.range[0], token.range[1]];
            value = source.slice(token.range[0], token.range[1]);
            extra.tokens.push({
                type: TokenName[token.type],
                value: value,
                range: range,
                loc: loc
            });
        }

        return token;
    }

    function collectRegex() {
        var pos, loc, regex, token;

        skipComment();

        pos = index;
        loc = {
            start: {
                line: lineNumber,
                column: index - lineStart
            }
        };

        regex = extra.scanRegExp();
        loc.end = {
            line: lineNumber,
            column: index - lineStart
        };

        if (!extra.tokenize) {
            // Pop the previous token, which is likely '/' or '/='
            if (extra.tokens.length > 0) {
                token = extra.tokens[extra.tokens.length - 1];
                if (token.range[0] === pos && token.type === 'Punctuator') {
                    if (token.value === '/' || token.value === '/=') {
                        extra.tokens.pop();
                    }
                }
            }

            extra.tokens.push({
                type: 'RegularExpression',
                value: regex.literal,
                range: [pos, index],
                loc: loc
            });
        }

        return regex;
    }

    function filterTokenLocation() {
        var i, entry, token, tokens = [];

        for (i = 0; i < extra.tokens.length; ++i) {
            entry = extra.tokens[i];
            token = {
                type: entry.type,
                value: entry.value
            };
            if (extra.range) {
                token.range = entry.range;
            }
            if (extra.loc) {
                token.loc = entry.loc;
            }
            tokens.push(token);
        }

        extra.tokens = tokens;
    }

    function patch() {
        if (extra.comments) {
            extra.skipComment = skipComment;
            skipComment = scanComment;
        }

        if (typeof extra.tokens !== 'undefined') {
            extra.advance = advance;
            extra.scanRegExp = scanRegExp;

            advance = collectToken;
            scanRegExp = collectRegex;
        }
    }

    function unpatch() {
        if (typeof extra.skipComment === 'function') {
            skipComment = extra.skipComment;
        }

        if (typeof extra.scanRegExp === 'function') {
            advance = extra.advance;
            scanRegExp = extra.scanRegExp;
        }
    }

    // This is used to modify the delegate.

    function extend(object, properties) {
        var entry, result = {};

        for (entry in object) {
            if (object.hasOwnProperty(entry)) {
                result[entry] = object[entry];
            }
        }

        for (entry in properties) {
            if (properties.hasOwnProperty(entry)) {
                result[entry] = properties[entry];
            }
        }

        return result;
    }

    function tokenize(code, options) {
        var toString,
            token,
            tokens;

        toString = String;
        if (typeof code !== 'string' && !(code instanceof String)) {
            code = toString(code);
        }

        delegate = SyntaxTreeDelegate;
        source = code;
        index = 0;
        lineNumber = (source.length > 0) ? 1 : 0;
        lineStart = 0;
        length = source.length;
        lookahead = null;
        state = {
            allowKeyword: true,
            allowIn: true,
            labelSet: {},
            inFunctionBody: false,
            inIteration: false,
            inSwitch: false,
            lastCommentStart: -1
        };

        extra = {};

        // Options matching.
        options = options || {};

        // Of course we collect tokens here.
        options.tokens = true;
        extra.tokens = [];
        extra.tokenize = true;
        // The following two fields are necessary to compute the Regex tokens.
        extra.openParenToken = -1;
        extra.openCurlyToken = -1;

        extra.range = (typeof options.range === 'boolean') && options.range;
        extra.loc = (typeof options.loc === 'boolean') && options.loc;

        if (typeof options.comment === 'boolean' && options.comment) {
            extra.comments = [];
        }
        if (typeof options.tolerant === 'boolean' && options.tolerant) {
            extra.errors = [];
        }

        if (length > 0) {
            if (typeof source[0] === 'undefined') {
                // Try first to convert to a string. This is good as fast path
                // for old IE which understands string indexing for string
                // literals only and not for string object.
                if (code instanceof String) {
                    source = code.valueOf();
                }
            }
        }

        patch();

        try {
            peek();
            if (lookahead.type === Token.EOF) {
                return extra.tokens;
            }

            token = lex();
            while (lookahead.type !== Token.EOF) {
                try {
                    token = lex();
                } catch (lexError) {
                    token = lookahead;
                    if (extra.errors) {
                        extra.errors.push(lexError);
                        // We have to break on the first error
                        // to avoid infinite loops.
                        break;
                    } else {
                        throw lexError;
                    }
                }
            }

            filterTokenLocation();
            tokens = extra.tokens;
            if (typeof extra.comments !== 'undefined') {
                tokens.comments = extra.comments;
            }
            if (typeof extra.errors !== 'undefined') {
                tokens.errors = extra.errors;
            }
        } catch (e) {
            throw e;
        } finally {
            unpatch();
            extra = {};
        }
        return tokens;
    }

    function parse(code, options) {
        var program, toString;

        toString = String;
        if (typeof code !== 'string' && !(code instanceof String)) {
            code = toString(code);
        }

        delegate = SyntaxTreeDelegate;
        source = code;
        index = 0;
        lineNumber = (source.length > 0) ? 1 : 0;
        lineStart = 0;
        length = source.length;
        lookahead = null;
        state = {
            allowKeyword: false,
            allowIn: true,
            labelSet: {},
            parenthesizedCount: 0,
            inFunctionBody: false,
            inIteration: false,
            inSwitch: false,
            inXJSChild: false,
            inXJSTag: false,
            lastCommentStart: -1,
            yieldAllowed: false
        };

        extra = {};
        if (typeof options !== 'undefined') {
            extra.range = (typeof options.range === 'boolean') && options.range;
            extra.loc = (typeof options.loc === 'boolean') && options.loc;
            extra.attachComment = (typeof options.attachComment === 'boolean') && options.attachComment;

            if (extra.loc && options.source !== null && options.source !== undefined) {
                delegate = extend(delegate, {
                    'postProcess': function (node) {
                        node.loc.source = toString(options.source);
                        return node;
                    }
                });
            }

            if (typeof options.tokens === 'boolean' && options.tokens) {
                extra.tokens = [];
            }
            if (typeof options.comment === 'boolean' && options.comment) {
                extra.comments = [];
            }
            if (typeof options.tolerant === 'boolean' && options.tolerant) {
                extra.errors = [];
            }
            if (extra.attachComment) {
                extra.range = true;
                extra.comments = [];
                extra.bottomRightStack = [];
                extra.trailingComments = [];
                extra.leadingComments = [];
            }
        }

        if (length > 0) {
            if (typeof source[0] === 'undefined') {
                // Try first to convert to a string. This is good as fast path
                // for old IE which understands string indexing for string
                // literals only and not for string object.
                if (code instanceof String) {
                    source = code.valueOf();
                }
            }
        }

        patch();
        try {
            program = parseProgram();
            if (typeof extra.comments !== 'undefined') {
                program.comments = extra.comments;
            }
            if (typeof extra.tokens !== 'undefined') {
                filterTokenLocation();
                program.tokens = extra.tokens;
            }
            if (typeof extra.errors !== 'undefined') {
                program.errors = extra.errors;
            }
        } catch (e) {
            throw e;
        } finally {
            unpatch();
            extra = {};
        }

        return program;
    }

    // Sync with *.json manifests.
    exports.version = '6001.0001.0000-dev-harmony-fb';

    exports.tokenize = tokenize;

    exports.parse = parse;

    // Deep copy.
    exports.Syntax = (function () {
        var name, types = {};

        if (typeof Object.create === 'function') {
            types = Object.create(null);
        }

        for (name in Syntax) {
            if (Syntax.hasOwnProperty(name)) {
                types[name] = Syntax[name];
            }
        }

        if (typeof Object.freeze === 'function') {
            Object.freeze(types);
        }

        return types;
    }());

}));
/* vim: set sw=4 ts=4 et tw=80 : */

},{}],58:[function(require,module,exports){
/**
 * This is the main entry point for KaTeX. Here, we expose functions for
 * rendering expressions either to DOM nodes or to markup strings.
 *
 * We also expose the ParseError class to check if errors thrown from KaTeX are
 * errors in the expression, or errors in javascript handling.
 */

var ParseError = require("./src/ParseError");

var buildTree = require("./src/buildTree");
var parseTree = require("./src/parseTree");
var utils = require("./src/utils");

/**
 * Parse and build an expression, and place that expression in the DOM node
 * given.
 */
var render = function(toParse, baseNode) {
    utils.clearNode(baseNode);

    var tree = parseTree(toParse);
    var node = buildTree(tree).toNode();

    baseNode.appendChild(node);
};

// KaTeX's styles don't work properly in quirks mode. Print out an error, and
// disable rendering.
if (typeof document !== "undefined") {
    if (document.compatMode !== "CSS1Compat") {
        typeof console !== "undefined" && console.warn(
            "Warning: KaTeX doesn't work in quirks mode. Make sure your " +
                "website has a suitable doctype.");

        render = function() {
            throw new ParseError("KaTeX doesn't work in quirks mode.");
        };
    }
}

/**
 * Parse and build an expression, and return the markup for that.
 */
var renderToString = function(toParse) {
    var tree = parseTree(toParse);
    return buildTree(tree).toMarkup();
};

module.exports = {
    render: render,
    renderToString: renderToString,
    ParseError: ParseError
};

},{"./src/ParseError":61,"./src/buildTree":65,"./src/parseTree":70,"./src/utils":72}],59:[function(require,module,exports){
/**
 * The Lexer class handles tokenizing the input in various ways. Since our
 * parser expects us to be able to backtrack, the lexer allows lexing from any
 * given starting point.
 *
 * Its main exposed function is the `lex` function, which takes a position to
 * lex from and a type of token to lex. It defers to the appropriate `_innerLex`
 * function.
 *
 * The various `_innerLex` functions perform the actual lexing of different
 * kinds.
 */

var ParseError = require("./ParseError");

// The main lexer class
function Lexer(input) {
    this._input = input;
}

// The resulting token returned from `lex`.
function Token(text, data, position) {
    this.text = text;
    this.data = data;
    this.position = position;
}

// "normal" types of tokens. These are tokens which can be matched by a simple
// regex
var mathNormals = [
    /^[/|@.""`0-9a-zA-Z]/, // ords
    /^[*+-]/, // bins
    /^[=<>:]/, // rels
    /^[,;]/, // punctuation
    /^['\^_{}]/, // misc
    /^[(\[]/, // opens
    /^[)\]?!]/, // closes
    /^~/ // spacing
];

// These are "normal" tokens like above, but should instead be parsed in text
// mode.
var textNormals = [
    /^[a-zA-Z0-9`!@*()-=+\[\]'";:?\/.,]/, // ords
    /^[{}]/, // grouping
    /^~/ // spacing
];

// Regexes for matching whitespace
var whitespaceRegex = /^\s*/;
var whitespaceConcatRegex = /^( +|\\  +)/;

// This regex matches any other TeX function, which is a backslash followed by a
// word or a single symbol
var anyFunc = /^\\(?:[a-zA-Z]+|.)/;

/**
 * This function lexes a single normal token. It takes a position, a list of
 * "normal" tokens to try, and whether it should completely ignore whitespace or
 * not.
 */
Lexer.prototype._innerLex = function(pos, normals, ignoreWhitespace) {
    var input = this._input.slice(pos);
    var whitespace;

    if (ignoreWhitespace) {
        // Get rid of whitespace.
        whitespace = input.match(whitespaceRegex)[0];
        pos += whitespace.length;
        input = input.slice(whitespace.length);
    } else {
        // Do the funky concatenation of whitespace that happens in text mode.
        whitespace = input.match(whitespaceConcatRegex);
        if (whitespace !== null) {
            return new Token(" ", null, pos + whitespace[0].length);
        }
    }

    // If there's no more input to parse, return an EOF token
    if (input.length === 0) {
        return new Token("EOF", null, pos);
    }

    var match;
    if ((match = input.match(anyFunc))) {
        // If we match a function token, return it
        return new Token(match[0], null, pos + match[0].length);
    } else {
        // Otherwise, we look through the normal token regexes and see if it's
        // one of them.
        for (var i = 0; i < normals.length; i++) {
            var normal = normals[i];

            if ((match = input.match(normal))) {
                // If it is, return it
                return new Token(
                    match[0], null, pos + match[0].length);
            }
        }
    }

    throw new ParseError("Unexpected character: '" + input[0] +
        "'", this, pos);
};

// A regex to match a CSS color (like #ffffff or BlueViolet)
var cssColor = /^(#[a-z0-9]+|[a-z]+)/i;

/**
 * This function lexes a CSS color.
 */
Lexer.prototype._innerLexColor = function(pos) {
    var input = this._input.slice(pos);

    // Ignore whitespace
    var whitespace = input.match(whitespaceRegex)[0];
    pos += whitespace.length;
    input = input.slice(whitespace.length);

    var match;
    if ((match = input.match(cssColor))) {
        // If we look like a color, return a color
        return new Token(match[0], null, pos + match[0].length);
    } else {
        throw new ParseError("Invalid color", this, pos);
    }
};

// A regex to match a dimension. Dimensions look like
// "1.2em" or ".4pt" or "1 ex"
var sizeRegex = /^(-?)\s*(\d+(?:\.\d*)?|\.\d+)\s*([a-z]{2})/;

/**
 * This function lexes a dimension.
 */
Lexer.prototype._innerLexSize = function(pos) {
    var input = this._input.slice(pos);

    // Ignore whitespace
    var whitespace = input.match(whitespaceRegex)[0];
    pos += whitespace.length;
    input = input.slice(whitespace.length);

    var match;
    if ((match = input.match(sizeRegex))) {
        var unit = match[3];
        // We only currently handle "em" and "ex" units
        if (unit !== "em" && unit !== "ex") {
            throw new ParseError("Invalid unit: '" + unit + "'", this, pos);
        }
        return new Token(match[0], {
                number: +(match[1] + match[2]),
                unit: unit
            }, pos + match[0].length);
    }

    throw new ParseError("Invalid size", this, pos);
};

/**
 * This function lexes a string of whitespace.
 */
Lexer.prototype._innerLexWhitespace = function(pos) {
    var input = this._input.slice(pos);

    var whitespace = input.match(whitespaceRegex)[0];
    pos += whitespace.length;

    return new Token(whitespace, null, pos);
};

/**
 * This function lexes a single token starting at `pos` and of the given mode.
 * Based on the mode, we defer to one of the `_innerLex` functions.
 */
Lexer.prototype.lex = function(pos, mode) {
    if (mode === "math") {
        return this._innerLex(pos, mathNormals, true);
    } else if (mode === "text") {
        return this._innerLex(pos, textNormals, false);
    } else if (mode === "color") {
        return this._innerLexColor(pos);
    } else if (mode === "size") {
        return this._innerLexSize(pos);
    } else if (mode === "whitespace") {
        return this._innerLexWhitespace(pos);
    }
};

module.exports = Lexer;

},{"./ParseError":61}],60:[function(require,module,exports){
/**
 * This file contains information about the options that the Parser carries
 * around with it while parsing. Data is held in an `Options` object, and when
 * recursing, a new `Options` object can be created with the `.with*` and
 * `.reset` functions.
 */

/**
 * This is the main options class. It contains the style, size, and color of the
 * current parse level. It also contains the style and size of the parent parse
 * level, so size changes can be handled efficiently.
 *
 * Each of the `.with*` and `.reset` functions passes its current style and size
 * as the parentStyle and parentSize of the new options class, so parent
 * handling is taken care of automatically.
 */
function Options(style, size, color, parentStyle, parentSize) {
    this.style = style;
    this.color = color;
    this.size = size;

    if (parentStyle === undefined) {
        parentStyle = style;
    }
    this.parentStyle = parentStyle;

    if (parentSize === undefined) {
        parentSize = size;
    }
    this.parentSize = parentSize;
}

/**
 * Create a new options object with the given style.
 */
Options.prototype.withStyle = function(style) {
    return new Options(style, this.size, this.color, this.style, this.size);
};

/**
 * Create a new options object with the given size.
 */
Options.prototype.withSize = function(size) {
    return new Options(this.style, size, this.color, this.style, this.size);
};

/**
 * Create a new options object with the given color.
 */
Options.prototype.withColor = function(color) {
    return new Options(this.style, this.size, color, this.style, this.size);
};

/**
 * Create a new options object with the same style, size, and color. This is
 * used so that parent style and size changes are handled correctly.
 */
Options.prototype.reset = function() {
    return new Options(
        this.style, this.size, this.color, this.style, this.size);
};

/**
 * A map of color names to CSS colors.
 * TODO(emily): Remove this when we have real macros
 */
var colorMap = {
    "katex-blue": "#6495ed",
    "katex-orange": "#ffa500",
    "katex-pink": "#ff00af",
    "katex-red": "#df0030",
    "katex-green": "#28ae7b",
    "katex-gray": "gray",
    "katex-purple": "#9d38bd"
};

/**
 * Gets the CSS color of the current options object, accounting for the
 * `colorMap`.
 */
Options.prototype.getColor = function() {
    return colorMap[this.color] || this.color;
};

module.exports = Options;

},{}],61:[function(require,module,exports){
/**
 * This is the ParseError class, which is the main error thrown by KaTeX
 * functions when something has gone wrong. This is used to distinguish internal
 * errors from errors in the expression that the user provided.
 */
function ParseError(message, lexer, position) {
    var error = "KaTeX parse error: " + message;

    if (lexer !== undefined && position !== undefined) {
        // If we have the input and a position, make the error a bit fancier

        // Prepend some information
        error += " at position " + position + ": ";

        // Get the input
        var input = lexer._input;
        // Insert a combining underscore at the correct position
        input = input.slice(0, position) + "\u0332" +
            input.slice(position);

        // Extract some context from the input and add it to the error
        var begin = Math.max(0, position - 15);
        var end = position + 15;
        error += input.slice(begin, end);
    }

    // Some hackery to make ParseError a prototype of Error
    // See http://stackoverflow.com/a/8460753
    var self = new Error(error);
    self.name = "ParseError";
    self.__proto__ = ParseError.prototype;

    self.position = position;
    return self;
}

// More hackery
ParseError.prototype.__proto__ = Error.prototype;

module.exports = ParseError;

},{}],62:[function(require,module,exports){
var functions = require("./functions");
var Lexer = require("./Lexer");
var symbols = require("./symbols");
var utils = require("./utils");

var ParseError = require("./ParseError");

/**
 * This file contains the parser used to parse out a TeX expression from the
 * input. Since TeX isn't context-free, standard parsers don't work particularly
 * well.
 *
 * The strategy of this parser is as such:
 *
 * The main functions (the `.parse...` ones) take a position in the current
 * parse string to parse tokens from. The lexer (found in Lexer.js, stored at
 * this.lexer) also supports pulling out tokens at arbitrary places. When
 * individual tokens are needed at a position, the lexer is called to pull out a
 * token, which is then used.
 *
 * The main functions also take a mode that the parser is currently in
 * (currently "math" or "text"), which denotes whether the current environment
 * is a math-y one or a text-y one (e.g. inside \text). Currently, this serves
 * to limit the functions which can be used in text mode.
 *
 * The main functions then return an object which contains the useful data that
 * was parsed at its given point, and a new position at the end of the parsed
 * data. The main functions can call each other and continue the parsing by
 * using the returned position as a new starting point.
 *
 * There are also extra `.handle...` functions, which pull out some reused
 * functionality into self-contained functions.
 *
 * The earlier functions return `ParseResult`s, which contain a ParseNode and a
 * new position.
 *
 * The later functions (which are called deeper in the parse) sometimes return
 * ParseFuncOrArgument, which contain a ParseResult as well as some data about
 * whether the parsed object is a function which is missing some arguments, or a
 * standalone object which can be used as an argument to another function.
 */

/**
 * Main Parser class
 */
function Parser(input) {
    // Make a new lexer
    this.lexer = new Lexer(input);
}

/**
 * The resulting parse tree nodes of the parse tree.
 */
function ParseNode(type, value, mode) {
    this.type = type;
    this.value = value;
    this.mode = mode;
}

/**
 * A result and final position returned by the `.parse...` functions.
 */
function ParseResult(result, newPosition) {
    this.result = result;
    this.position = newPosition;
}

/**
 * An initial function (without its arguments), or an argument to a function.
 * The `result` argument should be a ParseResult.
 */
function ParseFuncOrArgument(result, isFunction, allowedInText, numArgs, numOptionalArgs, argTypes) {
    this.result = result;
    // Is this a function (i.e. is it something defined in functions.js)?
    this.isFunction = isFunction;
    // Is it allowed in text mode?
    this.allowedInText = allowedInText;
    // How many arguments?
    this.numArgs = numArgs;
    // How many optional arguments?
    this.numOptionalArgs = numOptionalArgs;
    // What types of arguments?
    this.argTypes = argTypes;
}

/**
 * Checks a result to make sure it has the right type, and throws an
 * appropriate error otherwise.
 */
Parser.prototype.expect = function(result, text) {
    if (result.text !== text) {
        throw new ParseError(
            "Expected '" + text + "', got '" + result.text + "'",
            this.lexer, result.position
        );
    }
};

/**
 * Main parsing function, which parses an entire input.
 *
 * @return {?Array.<ParseNode>}
 */
Parser.prototype.parse = function(input) {
    // Try to parse the input
    var parse = this.parseInput(0, "math");
    return parse.result;
};

/**
 * Parses an entire input tree.
 */
Parser.prototype.parseInput = function(pos, mode) {
    // Parse an expression
    var expression = this.parseExpression(pos, mode, false, null);
    // If we succeeded, make sure there's an EOF at the end
    var EOF = this.lexer.lex(expression.position, mode);
    this.expect(EOF, "EOF");
    return expression;
};

/**
 * Parses an "expression", which is a list of atoms.
 *
 * @param {boolean} breakOnInfix Should the parsing stop when we hit infix
 *                  nodes? This happens when functions have higher precendence
 *                  than infix nodes in implicit parses.
 *
 * @param {?string} breakOnToken The token that the expression should end with,
 *                  or `null` if something else should end the expression.
 *
 * @return {ParseResult}
 */
Parser.prototype.parseExpression = function(pos, mode, breakOnInfix, breakOnToken) {
    var body = [];
    // Keep adding atoms to the body until we can't parse any more atoms (either
    // we reached the end, a }, or a \right)
    while (true) {
        var lex = this.lexer.lex(pos, mode);
        if (breakOnToken != null && lex.text === breakOnToken) {
            break;
        }
        var atom = this.parseAtom(pos, mode);
        if (!atom) {
            break;
        }
        if (breakOnInfix && atom.result.type === "infix") {
            break;
        }
        body.push(atom.result);
        pos = atom.position;
    }
    return new ParseResult(this.handleInfixNodes(body, mode), pos);
};

/**
 * Rewrites infix operators such as \over with corresponding commands such
 * as \frac.
 *
 * There can only be one infix operator per group.  If there's more than one
 * then the expression is ambiguous.  This can be resolved by adding {}.
 *
 * @returns {Array}
 */
Parser.prototype.handleInfixNodes = function (body, mode) {
    var overIndex = -1;
    var func;
    var funcName;

    for (var i = 0; i < body.length; i++) {
        var node = body[i];
        if (node.type === "infix") {
            if (overIndex !== -1) {
                throw new ParseError("only one infix operator per group",
                    this.lexer, -1);
            }
            overIndex = i;
            funcName = node.value.replaceWith;
            func = functions.funcs[funcName];
        }
    }

    if (overIndex !== -1) {
        var numerNode, denomNode;

        var numerBody = body.slice(0, overIndex);
        var denomBody = body.slice(overIndex + 1);

        if (numerBody.length === 1 && numerBody[0].type === "ordgroup") {
            numerNode = numerBody[0];
        } else {
            numerNode = new ParseNode("ordgroup", numerBody, mode);
        }

        if (denomBody.length === 1 && denomBody[0].type === "ordgroup") {
            denomNode = denomBody[0];
        } else {
            denomNode = new ParseNode("ordgroup", denomBody, mode);
        }

        var value = func.handler(funcName, numerNode, denomNode);
        return [new ParseNode(value.type, value, mode)];
    } else {
        return body;
    }
};

// The greediness of a superscript or subscript
var SUPSUB_GREEDINESS = 1;

/**
 * Handle a subscript or superscript with nice errors.
 */
Parser.prototype.handleSupSubscript = function(pos, mode, symbol, name) {
    var group = this.parseGroup(pos, mode);

    if (!group) {
        throw new ParseError(
            "Expected group after '" + symbol + "'", this.lexer, pos);
    } else if (group.numArgs > 0) {
        // ^ and _ have a greediness, so handle interactions with functions'
        // greediness
        var funcGreediness = functions.getGreediness(group.result.result);
        if (funcGreediness > SUPSUB_GREEDINESS) {
            return this.parseFunction(pos, mode);
        } else {
            throw new ParseError(
                "Got function '" + group.result.result + "' with no arguments " +
                    "as " + name,
                this.lexer, pos);
        }
    } else {
        return group.result;
    }
};

/**
 * Parses a group with optional super/subscripts.
 *
 * @return {?ParseResult}
 */
Parser.prototype.parseAtom = function(pos, mode) {
    // The body of an atom is an implicit group, so that things like
    // \left(x\right)^2 work correctly.
    var base = this.parseImplicitGroup(pos, mode);

    // In text mode, we don't have superscripts or subscripts
    if (mode === "text") {
        return base;
    }

    // Handle an empty base
    var currPos;
    if (!base) {
        currPos = pos;
        base = undefined;
    } else {
        currPos = base.position;
    }

    var superscript;
    var subscript;
    var result;
    while (true) {
        // Lex the first token
        var lex = this.lexer.lex(currPos, mode);

        if (lex.text === "^") {
            // We got a superscript start
            if (superscript) {
                throw new ParseError(
                    "Double superscript", this.lexer, currPos);
            }
            result = this.handleSupSubscript(
                lex.position, mode, lex.text, "superscript");
            currPos = result.position;
            superscript = result.result;
        } else if (lex.text === "_") {
            // We got a subscript start
            if (subscript) {
                throw new ParseError(
                    "Double subscript", this.lexer, currPos);
            }
            result = this.handleSupSubscript(
                lex.position, mode, lex.text, "subscript");
            currPos = result.position;
            subscript = result.result;
        } else if (lex.text === "'") {
            // We got a prime
            var prime = new ParseNode("textord", "\\prime", mode);

            // Many primes can be grouped together, so we handle this here
            var primes = [prime];
            currPos = lex.position;
            // Keep lexing tokens until we get something that's not a prime
            while ((lex = this.lexer.lex(currPos, mode)).text === "'") {
                // For each one, add another prime to the list
                primes.push(prime);
                currPos = lex.position;
            }
            // Put them into an ordgroup as the superscript
            superscript = new ParseNode("ordgroup", primes, mode);
        } else {
            // If it wasn't ^, _, or ', stop parsing super/subscripts
            break;
        }
    }

    if (superscript || subscript) {
        // If we got either a superscript or subscript, create a supsub
        return new ParseResult(
            new ParseNode("supsub", {
                base: base && base.result,
                sup: superscript,
                sub: subscript
            }, mode),
            currPos);
    } else {
        // Otherwise return the original body
        return base;
    }
};

// A list of the size-changing functions, for use in parseImplicitGroup
var sizeFuncs = [
    "\\tiny", "\\scriptsize", "\\footnotesize", "\\small", "\\normalsize",
    "\\large", "\\Large", "\\LARGE", "\\huge", "\\Huge"
];

// A list of the style-changing functions, for use in parseImplicitGroup
var styleFuncs = [
    "\\displaystyle", "\\textstyle", "\\scriptstyle", "\\scriptscriptstyle"
];

/**
 * Parses an implicit group, which is a group that starts at the end of a
 * specified, and ends right before a higher explicit group ends, or at EOL. It
 * is used for functions that appear to affect the current style, like \Large or
 * \textrm, where instead of keeping a style we just pretend that there is an
 * implicit grouping after it until the end of the group. E.g.
 *   small text {\Large large text} small text again
 * It is also used for \left and \right to get the correct grouping.
 *
 * @return {?ParseResult}
 */
Parser.prototype.parseImplicitGroup = function(pos, mode) {
    var start = this.parseSymbol(pos, mode);

    if (!start || !start.result) {
        // If we didn't get anything we handle, fall back to parseFunction
        return this.parseFunction(pos, mode);
    }

    var func = start.result.result;
    var body;

    if (func === "\\left") {
        // If we see a left:
        // Parse the entire left function (including the delimiter)
        var left = this.parseFunction(pos, mode);
        // Parse out the implicit body
        body = this.parseExpression(left.position, mode, false, "}");
        // Check the next token
        var rightLex = this.parseSymbol(body.position, mode);

        if (rightLex && rightLex.result.result === "\\right") {
            // If it's a \right, parse the entire right function (including the delimiter)
            var right = this.parseFunction(body.position, mode);

            return new ParseResult(
                new ParseNode("leftright", {
                    body: body.result,
                    left: left.result.value.value,
                    right: right.result.value.value
                }, mode),
                right.position);
        } else {
            throw new ParseError("Missing \\right", this.lexer, body.position);
        }
    } else if (func === "\\right") {
        // If we see a right, explicitly fail the parsing here so the \left
        // handling ends the group
        return null;
    } else if (utils.contains(sizeFuncs, func)) {
        // If we see a sizing function, parse out the implict body
        body = this.parseExpression(start.result.position, mode, false, "}");
        return new ParseResult(
            new ParseNode("sizing", {
                // Figure out what size to use based on the list of functions above
                size: "size" + (utils.indexOf(sizeFuncs, func) + 1),
                value: body.result
            }, mode),
            body.position);
    } else if (utils.contains(styleFuncs, func)) {
        // If we see a styling function, parse out the implict body
        body = this.parseExpression(start.result.position, mode, true, "}");
        return new ParseResult(
            new ParseNode("styling", {
                // Figure out what style to use by pulling out the style from
                // the function name
                style: func.slice(1, func.length - 5),
                value: body.result
            }, mode),
            body.position);
    } else {
        // Defer to parseFunction if it's not a function we handle
        return this.parseFunction(pos, mode);
    }
};

/**
 * Parses an entire function, including its base and all of its arguments
 *
 * @return {?ParseResult}
 */
Parser.prototype.parseFunction = function(pos, mode) {
    var baseGroup = this.parseGroup(pos, mode);

    if (baseGroup) {
        if (baseGroup.isFunction) {
            var func = baseGroup.result.result;
            if (mode === "text" && !baseGroup.allowedInText) {
                throw new ParseError(
                    "Can't use function '" + func + "' in text mode",
                    this.lexer, baseGroup.position);
            }

            var newPos = baseGroup.result.position;
            var result;

            var totalArgs = baseGroup.numArgs + baseGroup.numOptionalArgs;

            if (totalArgs > 0) {
                var baseGreediness = functions.getGreediness(func);
                var args = [func];
                var positions = [newPos];

                for (var i = 0; i < totalArgs; i++) {
                    var argType = baseGroup.argTypes && baseGroup.argTypes[i];
                    var arg;
                    if (i < baseGroup.numOptionalArgs) {
                        if (argType) {
                            arg = this.parseSpecialGroup(newPos, argType, mode, true);
                        } else {
                            arg = this.parseOptionalGroup(newPos, mode);
                        }
                        if (!arg) {
                            args.push(null);
                            positions.push(newPos);
                            continue;
                        }
                    } else {
                        if (argType) {
                            arg = this.parseSpecialGroup(newPos, argType, mode);
                        } else {
                            arg = this.parseGroup(newPos, mode);
                        }
                        if (!arg) {
                            throw new ParseError(
                                "Expected group after '" + baseGroup.result.result +
                                    "'",
                                this.lexer, newPos);
                        }
                    }
                    var argNode;
                    if (arg.numArgs > 0) {
                        var argGreediness = functions.getGreediness(arg.result.result);
                        if (argGreediness > baseGreediness) {
                            argNode = this.parseFunction(newPos, mode);
                        } else {
                            throw new ParseError(
                                "Got function '" + arg.result.result + "' as " +
                                    "argument to function '" +
                                    baseGroup.result.result + "'",
                                this.lexer, arg.result.position - 1);
                        }
                    } else {
                        argNode = arg.result;
                    }
                    args.push(argNode.result);
                    positions.push(argNode.position);
                    newPos = argNode.position;
                }

                args.push(positions);

                result = functions.funcs[func].handler.apply(this, args);
            } else {
                result = functions.funcs[func].handler.apply(this, [func]);
            }

            return new ParseResult(
                new ParseNode(result.type, result, mode),
                newPos);
        } else {
            return baseGroup.result;
        }
    } else {
        return null;
    }
};

/**
 * Parses a group when the mode is changing. Takes a position, a new mode, and
 * an outer mode that is used to parse the outside.
 *
 * @return {?ParseFuncOrArgument}
 */
Parser.prototype.parseSpecialGroup = function(pos, mode, outerMode, optional) {
    if (mode === "color" || mode === "size") {
        // color and size modes are special because they should have braces and
        // should only lex a single symbol inside
        var openBrace = this.lexer.lex(pos, outerMode);
        if (optional && openBrace.text !== "[") {
            // optional arguments should return null if they don't exist
            return null;
        }
        this.expect(openBrace, optional ? "[" : "{");
        var inner = this.lexer.lex(openBrace.position, mode);
        var data;
        if (mode === "color") {
            data = inner.text;
        } else {
            data = inner.data;
        }
        var closeBrace = this.lexer.lex(inner.position, outerMode);
        this.expect(closeBrace, optional ? "]" : "}");
        return new ParseFuncOrArgument(
            new ParseResult(
                new ParseNode(mode, data, outerMode),
                closeBrace.position),
            false);
    } else if (mode === "text") {
        // text mode is special because it should ignore the whitespace before
        // it
        var whitespace = this.lexer.lex(pos, "whitespace");
        pos = whitespace.position;
    }

    if (optional) {
        return this.parseOptionalGroup(pos, mode);
    } else {
        return this.parseGroup(pos, mode);
    }
};

/**
 * Parses a group, which is either a single nucleus (like "x") or an expression
 * in braces (like "{x+y}")
 *
 * @return {?ParseFuncOrArgument}
 */
Parser.prototype.parseGroup = function(pos, mode) {
    var start = this.lexer.lex(pos, mode);
    // Try to parse an open brace
    if (start.text === "{") {
        // If we get a brace, parse an expression
        var expression = this.parseExpression(start.position, mode, false, "}");
        // Make sure we get a close brace
        var closeBrace = this.lexer.lex(expression.position, mode);
        this.expect(closeBrace, "}");
        return new ParseFuncOrArgument(
            new ParseResult(
                new ParseNode("ordgroup", expression.result, mode),
                closeBrace.position),
            false);
    } else {
        // Otherwise, just return a nucleus
        return this.parseSymbol(pos, mode);
    }
};

/**
 * Parses a group, which is an expression in brackets (like "[x+y]")
 *
 * @return {?ParseFuncOrArgument}
 */
Parser.prototype.parseOptionalGroup = function(pos, mode) {
    var start = this.lexer.lex(pos, mode);
    // Try to parse an open bracket
    if (start.text === "[") {
        // If we get a brace, parse an expression
        var expression = this.parseExpression(start.position, mode, false, "]");
        // Make sure we get a close bracket
        var closeBracket = this.lexer.lex(expression.position, mode);
        this.expect(closeBracket, "]");
        return new ParseFuncOrArgument(
            new ParseResult(
                new ParseNode("ordgroup", expression.result, mode),
                closeBracket.position),
            false);
    } else {
        // Otherwise, return null,
        return null;
    }
};

/**
 * Parse a single symbol out of the string. Here, we handle both the functions
 * we have defined, as well as the single character symbols
 *
 * @return {?ParseFuncOrArgument}
 */
Parser.prototype.parseSymbol = function(pos, mode) {
    var nucleus = this.lexer.lex(pos, mode);

    if (functions.funcs[nucleus.text]) {
        // If there is a function with this name, we use its data
        var func = functions.funcs[nucleus.text];

        // Here, we replace "original" argTypes with the current mode
        var argTypes = func.argTypes;
        if (argTypes) {
            argTypes = argTypes.slice();
            for (var i = 0; i < argTypes.length; i++) {
                if (argTypes[i] === "original") {
                    argTypes[i] = mode;
                }
            }
        }

        return new ParseFuncOrArgument(
            new ParseResult(nucleus.text, nucleus.position),
            true, func.allowedInText, func.numArgs, func.numOptionalArgs, argTypes);
    } else if (symbols[mode][nucleus.text]) {
        // Otherwise if this is a no-argument function, find the type it
        // corresponds to in the symbols map
        return new ParseFuncOrArgument(
            new ParseResult(
                new ParseNode(symbols[mode][nucleus.text].group,
                              nucleus.text, mode),
                nucleus.position),
            false);
    } else {
        return null;
    }
};

module.exports = Parser;

},{"./Lexer":59,"./ParseError":61,"./functions":69,"./symbols":71,"./utils":72}],63:[function(require,module,exports){
/**
 * This file contains information and classes for the various kinds of styles
 * used in TeX. It provides a generic `Style` class, which holds information
 * about a specific style. It then provides instances of all the different kinds
 * of styles possible, and provides functions to move between them and get
 * information about them.
 */

/**
 * The main style class. Contains a unique id for the style, a size (which is
 * the same for cramped and uncramped version of a style), a cramped flag, and a
 * size multiplier, which gives the size difference between a style and
 * textstyle.
 */
function Style(id, size, multiplier, cramped) {
    this.id = id;
    this.size = size;
    this.cramped = cramped;
    this.sizeMultiplier = multiplier;
}

/**
 * Get the style of a superscript given a base in the current style.
 */
Style.prototype.sup = function() {
    return styles[sup[this.id]];
};

/**
 * Get the style of a subscript given a base in the current style.
 */
Style.prototype.sub = function() {
    return styles[sub[this.id]];
};

/**
 * Get the style of a fraction numerator given the fraction in the current
 * style.
 */
Style.prototype.fracNum = function() {
    return styles[fracNum[this.id]];
};

/**
 * Get the style of a fraction denominator given the fraction in the current
 * style.
 */
Style.prototype.fracDen = function() {
    return styles[fracDen[this.id]];
};

/**
 * Get the cramped version of a style (in particular, cramping a cramped style
 * doesn't change the style).
 */
Style.prototype.cramp = function() {
    return styles[cramp[this.id]];
};

/**
 * HTML class name, like "displaystyle cramped"
 */
Style.prototype.cls = function() {
    return sizeNames[this.size] + (this.cramped ? " cramped" : " uncramped");
};

/**
 * HTML Reset class name, like "reset-textstyle"
 */
Style.prototype.reset = function() {
    return resetNames[this.size];
};

// IDs of the different styles
var D = 0;
var Dc = 1;
var T = 2;
var Tc = 3;
var S = 4;
var Sc = 5;
var SS = 6;
var SSc = 7;

// String names for the different sizes
var sizeNames = [
    "displaystyle textstyle",
    "textstyle",
    "scriptstyle",
    "scriptscriptstyle"
];

// Reset names for the different sizes
var resetNames = [
    "reset-textstyle",
    "reset-textstyle",
    "reset-scriptstyle",
    "reset-scriptscriptstyle"
];

// Instances of the different styles
var styles = [
    new Style(D, 0, 1.0, false),
    new Style(Dc, 0, 1.0, true),
    new Style(T, 1, 1.0, false),
    new Style(Tc, 1, 1.0, true),
    new Style(S, 2, 0.7, false),
    new Style(Sc, 2, 0.7, true),
    new Style(SS, 3, 0.5, false),
    new Style(SSc, 3, 0.5, true)
];

// Lookup tables for switching from one style to another
var sup = [S, Sc, S, Sc, SS, SSc, SS, SSc];
var sub = [Sc, Sc, Sc, Sc, SSc, SSc, SSc, SSc];
var fracNum = [T, Tc, S, Sc, SS, SSc, SS, SSc];
var fracDen = [Tc, Tc, Sc, Sc, SSc, SSc, SSc, SSc];
var cramp = [Dc, Dc, Tc, Tc, Sc, Sc, SSc, SSc];

// We only export some of the styles. Also, we don't export the `Style` class so
// no more styles can be generated.
module.exports = {
    DISPLAY: styles[D],
    TEXT: styles[T],
    SCRIPT: styles[S],
    SCRIPTSCRIPT: styles[SS]
};

},{}],64:[function(require,module,exports){
/**
 * This module contains general functions that can be used for building
 * different kinds of domTree nodes in a consistent manner.
 */

var domTree = require("./domTree");
var fontMetrics = require("./fontMetrics");
var symbols = require("./symbols");

/**
 * Makes a symbolNode after translation via the list of symbols in symbols.js.
 * Correctly pulls out metrics for the character, and optionally takes a list of
 * classes to be attached to the node.
 */
var makeSymbol = function(value, style, mode, color, classes) {
    // Replace the value with its replaced value from symbol.js
    if (symbols[mode][value] && symbols[mode][value].replace) {
        value = symbols[mode][value].replace;
    }

    var metrics = fontMetrics.getCharacterMetrics(value, style);

    var symbolNode;
    if (metrics) {
        symbolNode = new domTree.symbolNode(
            value, metrics.height, metrics.depth, metrics.italic, metrics.skew,
            classes);
    } else {
        // TODO(emily): Figure out a good way to only print this in development
        typeof console !== "undefined" && console.warn(
            "No character metrics for '" + value + "' in style '" +
                style + "'");
        symbolNode = new domTree.symbolNode(value, 0, 0, 0, 0, classes);
    }

    if (color) {
        symbolNode.style.color = color;
    }

    return symbolNode;
};

/**
 * Makes a symbol in the italic math font.
 */
var mathit = function(value, mode, color, classes) {
    return makeSymbol(
        value, "Math-Italic", mode, color, classes.concat(["mathit"]));
};

/**
 * Makes a symbol in the upright roman font.
 */
var mathrm = function(value, mode, color, classes) {
    // Decide what font to render the symbol in by its entry in the symbols
    // table.
    if (symbols[mode][value].font === "main") {
        return makeSymbol(value, "Main-Regular", mode, color, classes);
    } else {
        return makeSymbol(
            value, "AMS-Regular", mode, color, classes.concat(["amsrm"]));
    }
};

/**
 * Calculate the height, depth, and maxFontSize of an element based on its
 * children.
 */
var sizeElementFromChildren = function(elem) {
    var height = 0;
    var depth = 0;
    var maxFontSize = 0;

    if (elem.children) {
        for (var i = 0; i < elem.children.length; i++) {
            if (elem.children[i].height > height) {
                height = elem.children[i].height;
            }
            if (elem.children[i].depth > depth) {
                depth = elem.children[i].depth;
            }
            if (elem.children[i].maxFontSize > maxFontSize) {
                maxFontSize = elem.children[i].maxFontSize;
            }
        }
    }

    elem.height = height;
    elem.depth = depth;
    elem.maxFontSize = maxFontSize;
};

/**
 * Makes a span with the given list of classes, list of children, and color.
 */
var makeSpan = function(classes, children, color) {
    var span = new domTree.span(classes, children);

    sizeElementFromChildren(span);

    if (color) {
        span.style.color = color;
    }

    return span;
};

/**
 * Makes a document fragment with the given list of children.
 */
var makeFragment = function(children) {
    var fragment = new domTree.documentFragment(children);

    sizeElementFromChildren(fragment);

    return fragment;
};

/**
 * Makes an element placed in each of the vlist elements to ensure that each
 * element has the same max font size. To do this, we create a zero-width space
 * with the correct font size.
 */
var makeFontSizer = function(options, fontSize) {
    var fontSizeInner = makeSpan([], [new domTree.symbolNode("\u200b")]);
    fontSizeInner.style.fontSize = (fontSize / options.style.sizeMultiplier) + "em";

    var fontSizer = makeSpan(
        ["fontsize-ensurer", "reset-" + options.size, "size5"],
        [fontSizeInner]);

    return fontSizer;
};

/**
 * Makes a vertical list by stacking elements and kerns on top of each other.
 * Allows for many different ways of specifying the positioning method.
 *
 * Arguments:
 *  - children: A list of child or kern nodes to be stacked on top of each other
 *              (i.e. the first element will be at the bottom, and the last at
 *              the top). Element nodes are specified as
 *                {type: "elem", elem: node}
 *              while kern nodes are specified as
 *                {type: "kern", size: size}
 *  - positionType: The method by which the vlist should be positioned. Valid
 *                  values are:
 *                   - "individualShift": The children list only contains elem
 *                                        nodes, and each node contains an extra
 *                                        "shift" value of how much it should be
 *                                        shifted (note that shifting is always
 *                                        moving downwards). positionData is
 *                                        ignored.
 *                   - "top": The positionData specifies the topmost point of
 *                            the vlist (note this is expected to be a height,
 *                            so positive values move up)
 *                   - "bottom": The positionData specifies the bottommost point
 *                               of the vlist (note this is expected to be a
 *                               depth, so positive values move down
 *                   - "shift": The vlist will be positioned such that its
 *                              baseline is positionData away from the baseline
 *                              of the first child. Positive values move
 *                              downwards.
 *                   - "firstBaseline": The vlist will be positioned such that
 *                                      its baseline is aligned with the
 *                                      baseline of the first child.
 *                                      positionData is ignored. (this is
 *                                      equivalent to "shift" with
 *                                      positionData=0)
 *  - positionData: Data used in different ways depending on positionType
 *  - options: An Options object
 *
 */
var makeVList = function(children, positionType, positionData, options) {
    var depth;
    var currPos;
    var i;
    if (positionType === "individualShift") {
        var oldChildren = children;
        children = [oldChildren[0]];

        // Add in kerns to the list of children to get each element to be
        // shifted to the correct specified shift
        depth = -oldChildren[0].shift - oldChildren[0].elem.depth;
        currPos = depth;
        for (i = 1; i < oldChildren.length; i++) {
            var diff = -oldChildren[i].shift - currPos -
                oldChildren[i].elem.depth;
            var size = diff -
                (oldChildren[i - 1].elem.height +
                 oldChildren[i - 1].elem.depth);

            currPos = currPos + diff;

            children.push({type: "kern", size: size});
            children.push(oldChildren[i]);
        }
    } else if (positionType === "top") {
        // We always start at the bottom, so calculate the bottom by adding up
        // all the sizes
        var bottom = positionData;
        for (i = 0; i < children.length; i++) {
            if (children[i].type === "kern") {
                bottom -= children[i].size;
            } else {
                bottom -= children[i].elem.height + children[i].elem.depth;
            }
        }
        depth = bottom;
    } else if (positionType === "bottom") {
        depth = -positionData;
    } else if (positionType === "shift") {
        depth = -children[0].elem.depth - positionData;
    } else if (positionType === "firstBaseline") {
        depth = -children[0].elem.depth;
    } else {
        depth = 0;
    }

    // Make the fontSizer
    var maxFontSize = 0;
    for (i = 0; i < children.length; i++) {
        if (children[i].type === "elem") {
            maxFontSize = Math.max(maxFontSize, children[i].elem.maxFontSize);
        }
    }
    var fontSizer = makeFontSizer(options, maxFontSize);

    // Create a new list of actual children at the correct offsets
    var realChildren = [];
    currPos = depth;
    for (i = 0; i < children.length; i++) {
        if (children[i].type === "kern") {
            currPos += children[i].size;
        } else {
            var child = children[i].elem;

            var shift = -child.depth - currPos;
            currPos += child.height + child.depth;

            var childWrap = makeSpan([], [fontSizer, child]);
            childWrap.height -= shift;
            childWrap.depth += shift;
            childWrap.style.top = shift + "em";

            realChildren.push(childWrap);
        }
    }

    // Add in an element at the end with no offset to fix the calculation of
    // baselines in some browsers (namely IE, sometimes safari)
    var baselineFix = makeSpan(
        ["baseline-fix"], [fontSizer, new domTree.symbolNode("\u200b")]);
    realChildren.push(baselineFix);

    var vlist = makeSpan(["vlist"], realChildren);
    // Fix the final height and depth, in case there were kerns at the ends
    // since the makeSpan calculation won't take that in to account.
    vlist.height = Math.max(currPos, vlist.height);
    vlist.depth = Math.max(-depth, vlist.depth);
    return vlist;
};

module.exports = {
    makeSymbol: makeSymbol,
    mathit: mathit,
    mathrm: mathrm,
    makeSpan: makeSpan,
    makeFragment: makeFragment,
    makeVList: makeVList
};

},{"./domTree":67,"./fontMetrics":68,"./symbols":71}],65:[function(require,module,exports){
/**
 * This file does the main work of building a domTree structure from a parse
 * tree. The entry point is the `buildTree` function, which takes a parse tree.
 * Then, the buildExpression, buildGroup, and various groupTypes functions are
 * called, to produce a final tree.
 */

var Options = require("./Options");
var ParseError = require("./ParseError");
var Style = require("./Style");

var buildCommon = require("./buildCommon");
var delimiter = require("./delimiter");
var domTree = require("./domTree");
var fontMetrics = require("./fontMetrics");
var utils = require("./utils");

var makeSpan = buildCommon.makeSpan;

/**
 * Take a list of nodes, build them in order, and return a list of the built
 * nodes. This function handles the `prev` node correctly, and passes the
 * previous element from the list as the prev of the next element.
 */
var buildExpression = function(expression, options, prev) {
    var groups = [];
    for (var i = 0; i < expression.length; i++) {
        var group = expression[i];
        groups.push(buildGroup(group, options, prev));
        prev = group;
    }
    return groups;
};

// List of types used by getTypeOfGroup
var groupToType = {
    mathord: "mord",
    textord: "mord",
    bin: "mbin",
    rel: "mrel",
    text: "mord",
    open: "mopen",
    close: "mclose",
    inner: "minner",
    frac: "minner",
    spacing: "mord",
    punct: "mpunct",
    ordgroup: "mord",
    op: "mop",
    katex: "mord",
    overline: "mord",
    rule: "mord",
    leftright: "minner",
    sqrt: "mord",
    accent: "mord"
};

/**
 * Gets the final math type of an expression, given its group type. This type is
 * used to determine spacing between elements, and affects bin elements by
 * causing them to change depending on what types are around them. This type
 * must be attached to the outermost node of an element as a CSS class so that
 * spacing with its surrounding elements works correctly.
 *
 * Some elements can be mapped one-to-one from group type to math type, and
 * those are listed in the `groupToType` table.
 *
 * Others (usually elements that wrap around other elements) often have
 * recursive definitions, and thus call `getTypeOfGroup` on their inner
 * elements.
 */
var getTypeOfGroup = function(group) {
    if (group == null) {
        // Like when typesetting $^3$
        return groupToType.mathord;
    } else if (group.type === "supsub") {
        return getTypeOfGroup(group.value.base);
    } else if (group.type === "llap" || group.type === "rlap") {
        return getTypeOfGroup(group.value);
    } else if (group.type === "color") {
        return getTypeOfGroup(group.value.value);
    } else if (group.type === "sizing") {
        return getTypeOfGroup(group.value.value);
    } else if (group.type === "styling") {
        return getTypeOfGroup(group.value.value);
    } else if (group.type === "delimsizing") {
        return groupToType[group.value.delimType];
    } else {
        return groupToType[group.type];
    }
};

/**
 * Sometimes, groups perform special rules when they have superscripts or
 * subscripts attached to them. This function lets the `supsub` group know that
 * its inner element should handle the superscripts and subscripts instead of
 * handling them itself.
 */
var shouldHandleSupSub = function(group, options) {
    if (!group) {
        return false;
    } else if (group.type === "op") {
        // Operators handle supsubs differently when they have limits
        // (e.g. `\displaystyle\sum_2^3`)
        return group.value.limits && options.style.size === Style.DISPLAY.size;
    } else if (group.type === "accent") {
        return isCharacterBox(group.value.base);
    } else {
        return null;
    }
};

/**
 * Sometimes we want to pull out the innermost element of a group. In most
 * cases, this will just be the group itself, but when ordgroups and colors have
 * a single element, we want to pull that out.
 */
var getBaseElem = function(group) {
    if (!group) {
        return false;
    } else if (group.type === "ordgroup") {
        if (group.value.length === 1) {
            return getBaseElem(group.value[0]);
        } else {
            return group;
        }
    } else if (group.type === "color") {
        if (group.value.value.length === 1) {
            return getBaseElem(group.value.value[0]);
        } else {
            return group;
        }
    } else {
        return group;
    }
};

/**
 * TeXbook algorithms often reference "character boxes", which are simply groups
 * with a single character in them. To decide if something is a character box,
 * we find its innermost group, and see if it is a single character.
 */
var isCharacterBox = function(group) {
    var baseElem = getBaseElem(group);

    // These are all they types of groups which hold single characters
    return baseElem.type === "mathord" ||
        baseElem.type === "textord" ||
        baseElem.type === "bin" ||
        baseElem.type === "rel" ||
        baseElem.type === "inner" ||
        baseElem.type === "open" ||
        baseElem.type === "close" ||
        baseElem.type === "punct";
};

/**
 * This is a map of group types to the function used to handle that type.
 * Simpler types come at the beginning, while complicated types come afterwards.
 */
var groupTypes = {
    mathord: function(group, options, prev) {
        return buildCommon.mathit(
            group.value, group.mode, options.getColor(), ["mord"]);
    },

    textord: function(group, options, prev) {
        return buildCommon.mathrm(
            group.value, group.mode, options.getColor(), ["mord"]);
    },

    bin: function(group, options, prev) {
        var className = "mbin";
        // Pull out the most recent element. Do some special handling to find
        // things at the end of a \color group. Note that we don't use the same
        // logic for ordgroups (which count as ords).
        var prevAtom = prev;
        while (prevAtom && prevAtom.type == "color") {
            var atoms = prevAtom.value.value;
            prevAtom = atoms[atoms.length - 1];
        }
        // See TeXbook pg. 442-446, Rules 5 and 6, and the text before Rule 19.
        // Here, we determine whether the bin should turn into an ord. We
        // currently only apply Rule 5.
        if (!prev || utils.contains(["mbin", "mopen", "mrel", "mop", "mpunct"],
                getTypeOfGroup(prevAtom))) {
            group.type = "textord";
            className = "mord";
        }

        return buildCommon.mathrm(
            group.value, group.mode, options.getColor(), [className]);
    },

    rel: function(group, options, prev) {
        return buildCommon.mathrm(
            group.value, group.mode, options.getColor(), ["mrel"]);
    },

    open: function(group, options, prev) {
        return buildCommon.mathrm(
            group.value, group.mode, options.getColor(), ["mopen"]);
    },

    close: function(group, options, prev) {
        return buildCommon.mathrm(
            group.value, group.mode, options.getColor(), ["mclose"]);
    },

    inner: function(group, options, prev) {
        return buildCommon.mathrm(
            group.value, group.mode, options.getColor(), ["minner"]);
    },

    punct: function(group, options, prev) {
        return buildCommon.mathrm(
            group.value, group.mode, options.getColor(), ["mpunct"]);
    },

    ordgroup: function(group, options, prev) {
        return makeSpan(
            ["mord", options.style.cls()],
            buildExpression(group.value, options.reset())
        );
    },

    text: function(group, options, prev) {
        return makeSpan(["text", "mord", options.style.cls()],
            buildExpression(group.value.body, options.reset()));
    },

    color: function(group, options, prev) {
        var elements = buildExpression(
            group.value.value,
            options.withColor(group.value.color),
            prev
        );

        // \color isn't supposed to affect the type of the elements it contains.
        // To accomplish this, we wrap the results in a fragment, so the inner
        // elements will be able to directly interact with their neighbors. For
        // example, `\color{red}{2 +} 3` has the same spacing as `2 + 3`
        return new buildCommon.makeFragment(elements);
    },

    supsub: function(group, options, prev) {
        // Superscript and subscripts are handled in the TeXbook on page
        // 445-446, rules 18(a-f).

        // Here is where we defer to the inner group if it should handle
        // superscripts and subscripts itself.
        if (shouldHandleSupSub(group.value.base, options)) {
            return groupTypes[group.value.base.type](group, options, prev);
        }

        var base = buildGroup(group.value.base, options.reset());
        var supmid, submid, sup, sub;

        if (group.value.sup) {
            sup = buildGroup(group.value.sup,
                    options.withStyle(options.style.sup()));
            supmid = makeSpan(
                    [options.style.reset(), options.style.sup().cls()], [sup]);
        }

        if (group.value.sub) {
            sub = buildGroup(group.value.sub,
                    options.withStyle(options.style.sub()));
            submid = makeSpan(
                    [options.style.reset(), options.style.sub().cls()], [sub]);
        }

        // Rule 18a
        var supShift, subShift;
        if (isCharacterBox(group.value.base)) {
            supShift = 0;
            subShift = 0;
        } else {
            supShift = base.height - fontMetrics.metrics.supDrop;
            subShift = base.depth + fontMetrics.metrics.subDrop;
        }

        // Rule 18c
        var minSupShift;
        if (options.style === Style.DISPLAY) {
            minSupShift = fontMetrics.metrics.sup1;
        } else if (options.style.cramped) {
            minSupShift = fontMetrics.metrics.sup3;
        } else {
            minSupShift = fontMetrics.metrics.sup2;
        }

        // scriptspace is a font-size-independent size, so scale it
        // appropriately
        var multiplier = Style.TEXT.sizeMultiplier *
                options.style.sizeMultiplier;
        var scriptspace =
            (0.5 / fontMetrics.metrics.ptPerEm) / multiplier + "em";

        var supsub;
        if (!group.value.sup) {
            // Rule 18b
            subShift = Math.max(
                subShift, fontMetrics.metrics.sub1,
                sub.height - 0.8 * fontMetrics.metrics.xHeight);

            supsub = buildCommon.makeVList([
                {type: "elem", elem: submid}
            ], "shift", subShift, options);

            supsub.children[0].style.marginRight = scriptspace;

            // Subscripts shouldn't be shifted by the base's italic correction.
            // Account for that by shifting the subscript back the appropriate
            // amount. Note we only do this when the base is a single symbol.
            if (base instanceof domTree.symbolNode) {
                supsub.children[0].style.marginLeft = -base.italic + "em";
            }
        } else if (!group.value.sub) {
            // Rule 18c, d
            supShift = Math.max(supShift, minSupShift,
                sup.depth + 0.25 * fontMetrics.metrics.xHeight);

            supsub = buildCommon.makeVList([
                {type: "elem", elem: supmid}
            ], "shift", -supShift, options);

            supsub.children[0].style.marginRight = scriptspace;
        } else {
            supShift = Math.max(
                supShift, minSupShift,
                sup.depth + 0.25 * fontMetrics.metrics.xHeight);
            subShift = Math.max(subShift, fontMetrics.metrics.sub2);

            var ruleWidth = fontMetrics.metrics.defaultRuleThickness;

            // Rule 18e
            if ((supShift - sup.depth) - (sub.height - subShift) <
                    4 * ruleWidth) {
                subShift = 4 * ruleWidth - (supShift - sup.depth) + sub.height;
                var psi = 0.8 * fontMetrics.metrics.xHeight -
                    (supShift - sup.depth);
                if (psi > 0) {
                    supShift += psi;
                    subShift -= psi;
                }
            }

            supsub = buildCommon.makeVList([
                {type: "elem", elem: submid, shift: subShift},
                {type: "elem", elem: supmid, shift: -supShift}
            ], "individualShift", null, options);

            // See comment above about subscripts not being shifted
            if (base instanceof domTree.symbolNode) {
                supsub.children[0].style.marginLeft = -base.italic + "em";
            }

            supsub.children[0].style.marginRight = scriptspace;
            supsub.children[1].style.marginRight = scriptspace;
        }

        return makeSpan([getTypeOfGroup(group.value.base)],
            [base, supsub]);
    },

    genfrac: function(group, options, prev) {
        // Fractions are handled in the TeXbook on pages 444-445, rules 15(a-e).
        // Figure out what style this fraction should be in based on the
        // function used
        var fstyle = options.style;
        if (group.value.size === "display") {
            fstyle = Style.DISPLAY;
        } else if (group.value.size === "text") {
            fstyle = Style.TEXT;
        }

        var nstyle = fstyle.fracNum();
        var dstyle = fstyle.fracDen();

        var numer = buildGroup(group.value.numer, options.withStyle(nstyle));
        var numerreset = makeSpan([fstyle.reset(), nstyle.cls()], [numer]);

        var denom = buildGroup(group.value.denom, options.withStyle(dstyle));
        var denomreset = makeSpan([fstyle.reset(), dstyle.cls()], [denom]);

        var ruleWidth;
        if (group.value.hasBarLine) {
            ruleWidth = fontMetrics.metrics.defaultRuleThickness /
                options.style.sizeMultiplier;
        } else {
            ruleWidth = 0;
        }

        // Rule 15b
        var numShift;
        var clearance;
        var denomShift;
        if (fstyle.size === Style.DISPLAY.size) {
            numShift = fontMetrics.metrics.num1;
            if (ruleWidth > 0) {
                clearance = 3 * ruleWidth;
            } else {
                clearance = 7 * fontMetrics.metrics.defaultRuleThickness;
            }
            denomShift = fontMetrics.metrics.denom1;
        } else {
            if (ruleWidth > 0) {
                numShift = fontMetrics.metrics.num2;
                clearance = ruleWidth;
            } else {
                numShift = fontMetrics.metrics.num3;
                clearance = 3 * fontMetrics.metrics.defaultRuleThickness;
            }
            denomShift = fontMetrics.metrics.denom2;
        }

        var frac;
        if (ruleWidth === 0) {
            // Rule 15c
            var candiateClearance =
                (numShift - numer.depth) - (denom.height - denomShift);
            if (candiateClearance < clearance) {
                numShift += 0.5 * (clearance - candiateClearance);
                denomShift += 0.5 * (clearance - candiateClearance);
            }

            frac = buildCommon.makeVList([
                {type: "elem", elem: denomreset, shift: denomShift},
                {type: "elem", elem: numerreset, shift: -numShift}
            ], "individualShift", null, options);
        } else {
            // Rule 15d
            var axisHeight = fontMetrics.metrics.axisHeight;

            if ((numShift - numer.depth) - (axisHeight + 0.5 * ruleWidth)
                    < clearance) {
                numShift +=
                    clearance - ((numShift - numer.depth) -
                                 (axisHeight + 0.5 * ruleWidth));
            }

            if ((axisHeight - 0.5 * ruleWidth) - (denom.height - denomShift)
                    < clearance) {
                denomShift +=
                    clearance - ((axisHeight - 0.5 * ruleWidth) -
                                 (denom.height - denomShift));
            }

            var mid = makeSpan(
                [options.style.reset(), Style.TEXT.cls(), "frac-line"]);
            // Manually set the height of the line because its height is
            // created in CSS
            mid.height = ruleWidth;

            var midShift = -(axisHeight - 0.5 * ruleWidth);

            frac = buildCommon.makeVList([
                {type: "elem", elem: denomreset, shift: denomShift},
                {type: "elem", elem: mid,        shift: midShift},
                {type: "elem", elem: numerreset, shift: -numShift}
            ], "individualShift", null, options);
        }

        // Since we manually change the style sometimes (with \dfrac or \tfrac),
        // account for the possible size change here.
        frac.height *= fstyle.sizeMultiplier / options.style.sizeMultiplier;
        frac.depth *= fstyle.sizeMultiplier / options.style.sizeMultiplier;

        // Rule 15e
        var innerChildren = [makeSpan(["mfrac"], [frac])];

        var delimSize;
        if (fstyle.size === Style.DISPLAY.size) {
            delimSize = fontMetrics.metrics.delim1;
        } else {
            delimSize = fontMetrics.metrics.getDelim2(fstyle);
        }

        if (group.value.leftDelim != null) {
            innerChildren.unshift(
                delimiter.customSizedDelim(
                    group.value.leftDelim, delimSize, true,
                    options.withStyle(fstyle), group.mode)
            );
        }
        if (group.value.rightDelim != null) {
            innerChildren.push(
                delimiter.customSizedDelim(
                    group.value.rightDelim, delimSize, true,
                    options.withStyle(fstyle), group.mode)
            );
        }

        return makeSpan(
            ["minner", options.style.reset(), fstyle.cls()],
            innerChildren,
            options.getColor());
    },

    spacing: function(group, options, prev) {
        if (group.value === "\\ " || group.value === "\\space" ||
            group.value === " " || group.value === "~") {
            // Spaces are generated by adding an actual space. Each of these
            // things has an entry in the symbols table, so these will be turned
            // into appropriate outputs.
            return makeSpan(
                ["mord", "mspace"],
                [buildCommon.mathrm(group.value, group.mode)]
            );
        } else {
            // Other kinds of spaces are of arbitrary width. We use CSS to
            // generate these.
            var spacingClassMap = {
                "\\qquad": "qquad",
                "\\quad": "quad",
                "\\enspace": "enspace",
                "\\;": "thickspace",
                "\\:": "mediumspace",
                "\\,": "thinspace",
                "\\!": "negativethinspace"
            };

            return makeSpan(
                ["mord", "mspace", spacingClassMap[group.value]]);
        }
    },

    llap: function(group, options, prev) {
        var inner = makeSpan(
            ["inner"], [buildGroup(group.value.body, options.reset())]);
        var fix = makeSpan(["fix"], []);
        return makeSpan(
            ["llap", options.style.cls()], [inner, fix]);
    },

    rlap: function(group, options, prev) {
        var inner = makeSpan(
            ["inner"], [buildGroup(group.value.body, options.reset())]);
        var fix = makeSpan(["fix"], []);
        return makeSpan(
            ["rlap", options.style.cls()], [inner, fix]);
    },

    op: function(group, options, prev) {
        // Operators are handled in the TeXbook pg. 443-444, rule 13(a).
        var supGroup;
        var subGroup;
        var hasLimits = false;
        if (group.type === "supsub" ) {
            // If we have limits, supsub will pass us its group to handle. Pull
            // out the superscript and subscript and set the group to the op in
            // its base.
            supGroup = group.value.sup;
            subGroup = group.value.sub;
            group = group.value.base;
            hasLimits = true;
        }

        // Most operators have a large successor symbol, but these don't.
        var noSuccessor = [
            "\\smallint"
        ];

        var large = false;
        if (options.style.size === Style.DISPLAY.size &&
            group.value.symbol &&
            !utils.contains(noSuccessor, group.value.body)) {

            // Most symbol operators get larger in displaystyle (rule 13)
            large = true;
        }

        var base;
        var baseShift = 0;
        var slant = 0;
        if (group.value.symbol) {
            // If this is a symbol, create the symbol.
            var style = large ? "Size2-Regular" : "Size1-Regular";
            base = buildCommon.makeSymbol(
                group.value.body, style, "math", options.getColor(),
                ["op-symbol", large ? "large-op" : "small-op", "mop"]);

            // Shift the symbol so its center lies on the axis (rule 13). It
            // appears that our fonts have the centers of the symbols already
            // almost on the axis, so these numbers are very small. Note we
            // don't actually apply this here, but instead it is used either in
            // the vlist creation or separately when there are no limits.
            baseShift = (base.height - base.depth) / 2 -
                fontMetrics.metrics.axisHeight *
                options.style.sizeMultiplier;

            // The slant of the symbol is just its italic correction.
            slant = base.italic;
        } else {
            // Otherwise, this is a text operator. Build the text from the
            // operator's name.
            // TODO(emily): Add a space in the middle of some of these
            // operators, like \limsup
            var output = [];
            for (var i = 1; i < group.value.body.length; i++) {
                output.push(buildCommon.mathrm(group.value.body[i], group.mode));
            }
            base = makeSpan(["mop"], output, options.getColor());
        }

        if (hasLimits) {
            // IE 8 clips \int if it is in a display: inline-block. We wrap it
            // in a new span so it is an inline, and works.
            base = makeSpan([], [base]);

            var supmid, supKern, submid, subKern;
            // We manually have to handle the superscripts and subscripts. This,
            // aside from the kern calculations, is copied from supsub.
            if (supGroup) {
                var sup = buildGroup(
                    supGroup, options.withStyle(options.style.sup()));
                supmid = makeSpan(
                    [options.style.reset(), options.style.sup().cls()], [sup]);

                supKern = Math.max(
                    fontMetrics.metrics.bigOpSpacing1,
                    fontMetrics.metrics.bigOpSpacing3 - sup.depth);
            }

            if (subGroup) {
                var sub = buildGroup(
                    subGroup, options.withStyle(options.style.sub()));
                submid = makeSpan(
                    [options.style.reset(), options.style.sub().cls()],
                    [sub]);

                subKern = Math.max(
                    fontMetrics.metrics.bigOpSpacing2,
                    fontMetrics.metrics.bigOpSpacing4 - sub.height);
            }

            // Build the final group as a vlist of the possible subscript, base,
            // and possible superscript.
            var finalGroup, top, bottom;
            if (!supGroup) {
                top = base.height - baseShift;

                finalGroup = buildCommon.makeVList([
                    {type: "kern", size: fontMetrics.metrics.bigOpSpacing5},
                    {type: "elem", elem: submid},
                    {type: "kern", size: subKern},
                    {type: "elem", elem: base}
                ], "top", top, options);

                // Here, we shift the limits by the slant of the symbol. Note
                // that we are supposed to shift the limits by 1/2 of the slant,
                // but since we are centering the limits adding a full slant of
                // margin will shift by 1/2 that.
                finalGroup.children[0].style.marginLeft = -slant + "em";
            } else if (!subGroup) {
                bottom = base.depth + baseShift;

                finalGroup = buildCommon.makeVList([
                    {type: "elem", elem: base},
                    {type: "kern", size: supKern},
                    {type: "elem", elem: supmid},
                    {type: "kern", size: fontMetrics.metrics.bigOpSpacing5}
                ], "bottom", bottom, options);

                // See comment above about slants
                finalGroup.children[1].style.marginLeft = slant + "em";
            } else if (!supGroup && !subGroup) {
                // This case probably shouldn't occur (this would mean the
                // supsub was sending us a group with no superscript or
                // subscript) but be safe.
                return base;
            } else {
                bottom = fontMetrics.metrics.bigOpSpacing5 +
                    submid.height + submid.depth +
                    subKern +
                    base.depth + baseShift;

                finalGroup = buildCommon.makeVList([
                    {type: "kern", size: fontMetrics.metrics.bigOpSpacing5},
                    {type: "elem", elem: submid},
                    {type: "kern", size: subKern},
                    {type: "elem", elem: base},
                    {type: "kern", size: supKern},
                    {type: "elem", elem: supmid},
                    {type: "kern", size: fontMetrics.metrics.bigOpSpacing5}
                ], "bottom", bottom, options);

                // See comment above about slants
                finalGroup.children[0].style.marginLeft = -slant + "em";
                finalGroup.children[2].style.marginLeft = slant + "em";
            }

            return makeSpan(["mop", "op-limits"], [finalGroup]);
        } else {
            if (group.value.symbol) {
                base.style.top = baseShift + "em";
            }

            return base;
        }
    },

    katex: function(group, options, prev) {
        // The KaTeX logo. The offsets for the K and a were chosen to look
        // good, but the offsets for the T, E, and X were taken from the
        // definition of \TeX in TeX (see TeXbook pg. 356)
        var k = makeSpan(
            ["k"], [buildCommon.mathrm("K", group.mode)]);
        var a = makeSpan(
            ["a"], [buildCommon.mathrm("A", group.mode)]);

        a.height = (a.height + 0.2) * 0.75;
        a.depth = (a.height - 0.2) * 0.75;

        var t = makeSpan(
            ["t"], [buildCommon.mathrm("T", group.mode)]);
        var e = makeSpan(
            ["e"], [buildCommon.mathrm("E", group.mode)]);

        e.height = (e.height - 0.2155);
        e.depth = (e.depth + 0.2155);

        var x = makeSpan(
            ["x"], [buildCommon.mathrm("X", group.mode)]);

        return makeSpan(
            ["katex-logo"], [k, a, t, e, x], options.getColor());
    },

    overline: function(group, options, prev) {
        // Overlines are handled in the TeXbook pg 443, Rule 9.

        // Build the inner group in the cramped style.
        var innerGroup = buildGroup(group.value.body,
                options.withStyle(options.style.cramp()));

        var ruleWidth = fontMetrics.metrics.defaultRuleThickness /
            options.style.sizeMultiplier;

        // Create the line above the body
        var line = makeSpan(
            [options.style.reset(), Style.TEXT.cls(), "overline-line"]);
        line.height = ruleWidth;
        line.maxFontSize = 1.0;

        // Generate the vlist, with the appropriate kerns
        var vlist = buildCommon.makeVList([
            {type: "elem", elem: innerGroup},
            {type: "kern", size: 3 * ruleWidth},
            {type: "elem", elem: line},
            {type: "kern", size: ruleWidth}
        ], "firstBaseline", null, options);

        return makeSpan(["overline", "mord"], [vlist], options.getColor());
    },

    sqrt: function(group, options, prev) {
        // Square roots are handled in the TeXbook pg. 443, Rule 11.

        // First, we do the same steps as in overline to build the inner group
        // and line
        var inner = buildGroup(group.value.body,
                options.withStyle(options.style.cramp()));

        var ruleWidth = fontMetrics.metrics.defaultRuleThickness /
            options.style.sizeMultiplier;

        var line = makeSpan(
            [options.style.reset(), Style.TEXT.cls(), "sqrt-line"], [],
            options.getColor());
        line.height = ruleWidth;
        line.maxFontSize = 1.0;

        var phi = ruleWidth;
        if (options.style.id < Style.TEXT.id) {
            phi = fontMetrics.metrics.xHeight;
        }

        // Calculate the clearance between the body and line
        var lineClearance = ruleWidth + phi / 4;

        var innerHeight =
            (inner.height + inner.depth) * options.style.sizeMultiplier;
        var minDelimiterHeight = innerHeight + lineClearance + ruleWidth;

        // Create a \surd delimiter of the required minimum size
        var delim = makeSpan(["sqrt-sign"], [
            delimiter.customSizedDelim("\\surd", minDelimiterHeight,
                                       false, options, group.mode)],
                             options.getColor());

        var delimDepth = (delim.height + delim.depth) - ruleWidth;

        // Adjust the clearance based on the delimiter size
        if (delimDepth > inner.height + inner.depth + lineClearance) {
            lineClearance =
                (lineClearance + delimDepth - inner.height - inner.depth) / 2;
        }

        // Shift the delimiter so that its top lines up with the top of the line
        var delimShift = -(inner.height + lineClearance + ruleWidth) + delim.height;
        delim.style.top = delimShift + "em";
        delim.height -= delimShift;
        delim.depth += delimShift;

        // We add a special case here, because even when `inner` is empty, we
        // still get a line. So, we use a simple heuristic to decide if we
        // should omit the body entirely. (note this doesn't work for something
        // like `\sqrt{\rlap{x}}`, but if someone is doing that they deserve for
        // it not to work.
        var body;
        if (inner.height === 0 && inner.depth === 0) {
            body = makeSpan();
        } else {
            body = buildCommon.makeVList([
                {type: "elem", elem: inner},
                {type: "kern", size: lineClearance},
                {type: "elem", elem: line},
                {type: "kern", size: ruleWidth}
            ], "firstBaseline", null, options);
        }

        return makeSpan(["sqrt", "mord"], [delim, body]);
    },

    sizing: function(group, options, prev) {
        // Handle sizing operators like \Huge. Real TeX doesn't actually allow
        // these functions inside of math expressions, so we do some special
        // handling.
        var inner = buildExpression(group.value.value,
                options.withSize(group.value.size), prev);

        var span = makeSpan(["mord"],
            [makeSpan(["sizing", "reset-" + options.size, group.value.size,
                       options.style.cls()],
                      inner)]);

        // Calculate the correct maxFontSize manually
        var fontSize = sizingMultiplier[group.value.size];
        span.maxFontSize = fontSize * options.style.sizeMultiplier;

        return span;
    },

    styling: function(group, options, prev) {
        // Style changes are handled in the TeXbook on pg. 442, Rule 3.

        // Figure out what style we're changing to.
        var style = {
            "display": Style.DISPLAY,
            "text": Style.TEXT,
            "script": Style.SCRIPT,
            "scriptscript": Style.SCRIPTSCRIPT
        };

        var newStyle = style[group.value.style];

        // Build the inner expression in the new style.
        var inner = buildExpression(
            group.value.value, options.withStyle(newStyle), prev);

        return makeSpan([options.style.reset(), newStyle.cls()], inner);
    },

    delimsizing: function(group, options, prev) {
        var delim = group.value.value;

        if (delim === ".") {
            // Empty delimiters still count as elements, even though they don't
            // show anything.
            return makeSpan([groupToType[group.value.delimType]]);
        }

        // Use delimiter.sizedDelim to generate the delimiter.
        return makeSpan(
            [groupToType[group.value.delimType]],
            [delimiter.sizedDelim(
                delim, group.value.size, options, group.mode)]);
    },

    leftright: function(group, options, prev) {
        // Build the inner expression
        var inner = buildExpression(group.value.body, options.reset());

        var innerHeight = 0;
        var innerDepth = 0;

        // Calculate its height and depth
        for (var i = 0; i < inner.length; i++) {
            innerHeight = Math.max(inner[i].height, innerHeight);
            innerDepth = Math.max(inner[i].depth, innerDepth);
        }

        // The size of delimiters is the same, regardless of what style we are
        // in. Thus, to correctly calculate the size of delimiter we need around
        // a group, we scale down the inner size based on the size.
        innerHeight *= options.style.sizeMultiplier;
        innerDepth *= options.style.sizeMultiplier;

        var leftDelim;
        if (group.value.left === ".") {
            // Empty delimiters in \left and \right make null delimiter spaces.
            leftDelim = makeSpan(["nulldelimiter"]);
        } else {
            // Otherwise, use leftRightDelim to generate the correct sized
            // delimiter.
            leftDelim = delimiter.leftRightDelim(
                group.value.left, innerHeight, innerDepth, options,
                group.mode);
        }
        // Add it to the beginning of the expression
        inner.unshift(leftDelim);

        var rightDelim;
        // Same for the right delimiter
        if (group.value.right === ".") {
            rightDelim = makeSpan(["nulldelimiter"]);
        } else {
            rightDelim = delimiter.leftRightDelim(
                group.value.right, innerHeight, innerDepth, options,
                group.mode);
        }
        // Add it to the end of the expression.
        inner.push(rightDelim);

        return makeSpan(
            ["minner", options.style.cls()], inner, options.getColor());
    },

    rule: function(group, options, prev) {
        // Make an empty span for the rule
        var rule = makeSpan(["mord", "rule"], [], options.getColor());

        // Calculate the shift, width, and height of the rule, and account for units
        var shift = 0;
        if (group.value.shift) {
            shift = group.value.shift.number;
            if (group.value.shift.unit === "ex") {
                shift *= fontMetrics.metrics.xHeight;
            }
        }

        var width = group.value.width.number;
        if (group.value.width.unit === "ex") {
            width *= fontMetrics.metrics.xHeight;
        }

        var height = group.value.height.number;
        if (group.value.height.unit === "ex") {
            height *= fontMetrics.metrics.xHeight;
        }

        // The sizes of rules are absolute, so make it larger if we are in a
        // smaller style.
        shift /= options.style.sizeMultiplier;
        width /= options.style.sizeMultiplier;
        height /= options.style.sizeMultiplier;

        // Style the rule to the right size
        rule.style.borderRightWidth = width + "em";
        rule.style.borderTopWidth = height + "em";
        rule.style.bottom = shift + "em";

        // Record the height and width
        rule.width = width;
        rule.height = height + shift;
        rule.depth = -shift;

        return rule;
    },

    accent: function(group, options, prev) {
        // Accents are handled in the TeXbook pg. 443, rule 12.
        var base = group.value.base;

        var supsubGroup;
        if (group.type === "supsub") {
            // If our base is a character box, and we have superscripts and
            // subscripts, the supsub will defer to us. In particular, we want
            // to attach the superscripts and subscripts to the inner body (so
            // that the position of the superscripts and subscripts won't be
            // affected by the height of the accent). We accomplish this by
            // sticking the base of the accent into the base of the supsub, and
            // rendering that, while keeping track of where the accent is.

            // The supsub group is the group that was passed in
            var supsub = group;
            // The real accent group is the base of the supsub group
            group = supsub.value.base;
            // The character box is the base of the accent group
            base = group.value.base;
            // Stick the character box into the base of the supsub group
            supsub.value.base = base;

            // Rerender the supsub group with its new base, and store that
            // result.
            supsubGroup = buildGroup(
                supsub, options.reset(), prev);
        }

        // Build the base group
        var body = buildGroup(
            base, options.withStyle(options.style.cramp()));

        // Calculate the skew of the accent. This is based on the line "If the
        // nucleus is not a single character, let s = 0; otherwise set s to the
        // kern amount for the nucleus followed by the \skewchar of its font."
        // Note that our skew metrics are just the kern between each character
        // and the skewchar.
        var skew;
        if (isCharacterBox(base)) {
            // If the base is a character box, then we want the skew of the
            // innermost character. To do that, we find the innermost character:
            var baseChar = getBaseElem(base);
            // Then, we render its group to get the symbol inside it
            var baseGroup = buildGroup(
                baseChar, options.withStyle(options.style.cramp()));
            // Finally, we pull the skew off of the symbol.
            skew = baseGroup.skew;
            // Note that we now throw away baseGroup, because the layers we
            // removed with getBaseElem might contain things like \color which
            // we can't get rid of.
            // TODO(emily): Find a better way to get the skew
        } else {
            skew = 0;
        }

        // calculate the amount of space between the body and the accent
        var clearance = Math.min(body.height, fontMetrics.metrics.xHeight);

        // Build the accent
        var accent = buildCommon.makeSymbol(
            group.value.accent, "Main-Regular", "math", options.getColor());
        // Remove the italic correction of the accent, because it only serves to
        // shift the accent over to a place we don't want.
        accent.italic = 0;

        // The \vec character that the fonts use is a combining character, and
        // thus shows up much too far to the left. To account for this, we add a
        // specific class which shifts the accent over to where we want it.
        // TODO(emily): Fix this in a better way, like by changing the font
        var vecClass = group.value.accent === "\\vec" ? "accent-vec" : null;

        var accentBody = makeSpan(["accent-body", vecClass], [
            makeSpan([], [accent])]);

        accentBody = buildCommon.makeVList([
            {type: "elem", elem: body},
            {type: "kern", size: -clearance},
            {type: "elem", elem: accentBody}
        ], "firstBaseline", null, options);

        // Shift the accent over by the skew. Note we shift by twice the skew
        // because we are centering the accent, so by adding 2*skew to the left,
        // we shift it to the right by 1*skew.
        accentBody.children[1].style.marginLeft = 2 * skew + "em";

        var accentWrap = makeSpan(["mord", "accent"], [accentBody]);

        if (supsubGroup) {
            // Here, we replace the "base" child of the supsub with our newly
            // generated accent.
            supsubGroup.children[0] = accentWrap;

            // Since we don't rerun the height calculation after replacing the
            // accent, we manually recalculate height.
            supsubGroup.height = Math.max(accentWrap.height, supsubGroup.height);

            // Accents should always be ords, even when their innards are not.
            supsubGroup.classes[0] = "mord";

            return supsubGroup;
        } else {
            return accentWrap;
        }
    }
};

var sizingMultiplier = {
    size1: 0.5,
    size2: 0.7,
    size3: 0.8,
    size4: 0.9,
    size5: 1.0,
    size6: 1.2,
    size7: 1.44,
    size8: 1.73,
    size9: 2.07,
    size10: 2.49
};

/**
 * buildGroup is the function that takes a group and calls the correct groupType
 * function for it. It also handles the interaction of size and style changes
 * between parents and children.
 */
var buildGroup = function(group, options, prev) {
    if (!group) {
        return makeSpan();
    }

    if (groupTypes[group.type]) {
        // Call the groupTypes function
        var groupNode = groupTypes[group.type](group, options, prev);
        var multiplier;

        // If the style changed between the parent and the current group,
        // account for the size difference
        if (options.style !== options.parentStyle) {
            multiplier = options.style.sizeMultiplier /
                    options.parentStyle.sizeMultiplier;

            groupNode.height *= multiplier;
            groupNode.depth *= multiplier;
        }

        // If the size changed between the parent and the current group, account
        // for that size difference.
        if (options.size !== options.parentSize) {
            multiplier = sizingMultiplier[options.size] /
                    sizingMultiplier[options.parentSize];

            groupNode.height *= multiplier;
            groupNode.depth *= multiplier;
        }

        return groupNode;
    } else {
        throw new ParseError(
            "Got group of unknown type: '" + group.type + "'");
    }
};

/**
 * Take an entire parse tree, and build it into an appropriate set of nodes.
 */
var buildTree = function(tree) {
    // Setup the default options
    var options = new Options(Style.TEXT, "size5", "");

    // Build the expression contained in the tree
    var expression = buildExpression(tree, options);
    var body = makeSpan(["base", options.style.cls()], expression);

    // Add struts, which ensure that the top of the HTML element falls at the
    // height of the expression, and the bottom of the HTML element falls at the
    // depth of the expression.
    var topStrut = makeSpan(["strut"]);
    var bottomStrut = makeSpan(["strut", "bottom"]);

    topStrut.style.height = body.height + "em";
    bottomStrut.style.height = (body.height + body.depth) + "em";
    // We'd like to use `vertical-align: top` but in IE 9 this lowers the
    // baseline of the box to the bottom of this strut (instead staying in the
    // normal place) so we use an absolute value for vertical-align instead
    bottomStrut.style.verticalAlign = -body.depth + "em";

    // Wrap the struts and body together
    var katexNode = makeSpan(["katex"], [
        makeSpan(["katex-inner"], [topStrut, bottomStrut, body])
    ]);

    return katexNode;
};

module.exports = buildTree;

},{"./Options":60,"./ParseError":61,"./Style":63,"./buildCommon":64,"./delimiter":66,"./domTree":67,"./fontMetrics":68,"./utils":72}],66:[function(require,module,exports){
/**
 * This file deals with creating delimiters of various sizes. The TeXbook
 * discusses these routines on page 441-442, in the "Another subroutine sets box
 * x to a specified variable delimiter" paragraph.
 *
 * There are three main routines here. `makeSmallDelim` makes a delimiter in the
 * normal font, but in either text, script, or scriptscript style.
 * `makeLargeDelim` makes a delimiter in textstyle, but in one of the Size1,
 * Size2, Size3, or Size4 fonts. `makeStackedDelim` makes a delimiter out of
 * smaller pieces that are stacked on top of one another.
 *
 * The functions take a parameter `center`, which determines if the delimiter
 * should be centered around the axis.
 *
 * Then, there are three exposed functions. `sizedDelim` makes a delimiter in
 * one of the given sizes. This is used for things like `\bigl`.
 * `customSizedDelim` makes a delimiter with a given total height+depth. It is
 * called in places like `\sqrt`. `leftRightDelim` makes an appropriate
 * delimiter which surrounds an expression of a given height an depth. It is
 * used in `\left` and `\right`.
 */

var ParseError = require("./ParseError");
var Style = require("./Style");

var buildCommon = require("./buildCommon");
var fontMetrics = require("./fontMetrics");
var symbols = require("./symbols");
var utils = require("./utils");

var makeSpan = buildCommon.makeSpan;

/**
 * Get the metrics for a given symbol and font, after transformation (i.e.
 * after following replacement from symbols.js)
 */
var getMetrics = function(symbol, font) {
    if (symbols.math[symbol] && symbols.math[symbol].replace) {
        return fontMetrics.getCharacterMetrics(
            symbols.math[symbol].replace, font);
    } else {
        return fontMetrics.getCharacterMetrics(
            symbol, font);
    }
};

/**
 * Builds a symbol in the given font size (note size is an integer)
 */
var mathrmSize = function(value, size, mode) {
    return buildCommon.makeSymbol(value, "Size" + size + "-Regular", mode);
};

/**
 * Puts a delimiter span in a given style, and adds appropriate height, depth,
 * and maxFontSizes.
 */
var styleWrap = function(delim, toStyle, options) {
    var span = makeSpan(
        ["style-wrap", options.style.reset(), toStyle.cls()], [delim]);

    var multiplier = toStyle.sizeMultiplier / options.style.sizeMultiplier;

    span.height *= multiplier;
    span.depth *= multiplier;
    span.maxFontSize = toStyle.sizeMultiplier;

    return span;
};

/**
 * Makes a small delimiter. This is a delimiter that comes in the Main-Regular
 * font, but is restyled to either be in textstyle, scriptstyle, or
 * scriptscriptstyle.
 */
var makeSmallDelim = function(delim, style, center, options, mode) {
    var text = buildCommon.makeSymbol(delim, "Main-Regular", mode);

    var span = styleWrap(text, style, options);

    if (center) {
        var shift =
            (1 - options.style.sizeMultiplier / style.sizeMultiplier) *
            fontMetrics.metrics.axisHeight;

        span.style.top = shift + "em";
        span.height -= shift;
        span.depth += shift;
    }

    return span;
};

/**
 * Makes a large delimiter. This is a delimiter that comes in the Size1, Size2,
 * Size3, or Size4 fonts. It is always rendered in textstyle.
 */
var makeLargeDelim = function(delim, size, center, options, mode) {
    var inner = mathrmSize(delim, size, mode);

    var span = styleWrap(
        makeSpan(["delimsizing", "size" + size],
                 [inner], options.getColor()),
        Style.TEXT, options);

    if (center) {
        var shift = (1 - options.style.sizeMultiplier) *
            fontMetrics.metrics.axisHeight;

        span.style.top = shift + "em";
        span.height -= shift;
        span.depth += shift;
    }

    return span;
};

/**
 * Make an inner span with the given offset and in the given font. This is used
 * in `makeStackedDelim` to make the stacking pieces for the delimiter.
 */
var makeInner = function(symbol, font, mode) {
    var sizeClass;
    // Apply the correct CSS class to choose the right font.
    if (font === "Size1-Regular") {
        sizeClass = "delim-size1";
    } else if (font === "Size4-Regular") {
        sizeClass = "delim-size4";
    }

    var inner = makeSpan(
        ["delimsizinginner", sizeClass],
        [makeSpan([], [buildCommon.makeSymbol(symbol, font, mode)])]);

    // Since this will be passed into `makeVList` in the end, wrap the element
    // in the appropriate tag that VList uses.
    return {type: "elem", elem: inner};
};

/**
 * Make a stacked delimiter out of a given delimiter, with the total height at
 * least `heightTotal`. This routine is mentioned on page 442 of the TeXbook.
 */
var makeStackedDelim = function(delim, heightTotal, center, options, mode) {
    // There are four parts, the top, an optional middle, a repeated part, and a
    // bottom.
    var top, middle, repeat, bottom;
    top = repeat = bottom = delim;
    middle = null;
    // Also keep track of what font the delimiters are in
    var font = "Size1-Regular";

    // We set the parts and font based on the symbol. Note that we use
    // '\u23d0' instead of '|' and '\u2016' instead of '\\|' for the
    // repeats of the arrows
    if (delim === "\\uparrow") {
        repeat = bottom = "\u23d0";
    } else if (delim === "\\Uparrow") {
        repeat = bottom = "\u2016";
    } else if (delim === "\\downarrow") {
        top = repeat = "\u23d0";
    } else if (delim === "\\Downarrow") {
        top = repeat = "\u2016";
    } else if (delim === "\\updownarrow") {
        top = "\\uparrow";
        repeat = "\u23d0";
        bottom = "\\downarrow";
    } else if (delim === "\\Updownarrow") {
        top = "\\Uparrow";
        repeat = "\u2016";
        bottom = "\\Downarrow";
    } else if (delim === "[" || delim === "\\lbrack") {
        top = "\u23a1";
        repeat = "\u23a2";
        bottom = "\u23a3";
        font = "Size4-Regular";
    } else if (delim === "]" || delim === "\\rbrack") {
        top = "\u23a4";
        repeat = "\u23a5";
        bottom = "\u23a6";
        font = "Size4-Regular";
    } else if (delim === "\\lfloor") {
        repeat = top = "\u23a2";
        bottom = "\u23a3";
        font = "Size4-Regular";
    } else if (delim === "\\lceil") {
        top = "\u23a1";
        repeat = bottom = "\u23a2";
        font = "Size4-Regular";
    } else if (delim === "\\rfloor") {
        repeat = top = "\u23a5";
        bottom = "\u23a6";
        font = "Size4-Regular";
    } else if (delim === "\\rceil") {
        top = "\u23a4";
        repeat = bottom = "\u23a5";
        font = "Size4-Regular";
    } else if (delim === "(") {
        top = "\u239b";
        repeat = "\u239c";
        bottom = "\u239d";
        font = "Size4-Regular";
    } else if (delim === ")") {
        top = "\u239e";
        repeat = "\u239f";
        bottom = "\u23a0";
        font = "Size4-Regular";
    } else if (delim === "\\{" || delim === "\\lbrace") {
        top = "\u23a7";
        middle = "\u23a8";
        bottom = "\u23a9";
        repeat = "\u23aa";
        font = "Size4-Regular";
    } else if (delim === "\\}" || delim === "\\rbrace") {
        top = "\u23ab";
        middle = "\u23ac";
        bottom = "\u23ad";
        repeat = "\u23aa";
        font = "Size4-Regular";
    } else if (delim === "\\surd") {
        top = "\ue001";
        bottom = "\u23b7";
        repeat = "\ue000";
        font = "Size4-Regular";
    }

    // Get the metrics of the four sections
    var topMetrics = getMetrics(top, font);
    var topHeightTotal = topMetrics.height + topMetrics.depth;
    var repeatMetrics = getMetrics(repeat, font);
    var repeatHeightTotal = repeatMetrics.height + repeatMetrics.depth;
    var bottomMetrics = getMetrics(bottom, font);
    var bottomHeightTotal = bottomMetrics.height + bottomMetrics.depth;
    var middleMetrics, middleHeightTotal;
    if (middle !== null) {
        middleMetrics = getMetrics(middle, font);
        middleHeightTotal = middleMetrics.height + middleMetrics.depth;
    }

    // Calcuate the real height that the delimiter will have. It is at least the
    // size of the top, bottom, and optional middle combined.
    var realHeightTotal = topHeightTotal + bottomHeightTotal;
    if (middle !== null) {
        realHeightTotal += middleHeightTotal;
    }

    // Then add repeated pieces until we reach the specified height.
    while (realHeightTotal < heightTotal) {
        realHeightTotal += repeatHeightTotal;
        if (middle !== null) {
            // If there is a middle section, we need an equal number of pieces
            // on the top and bottom.
            realHeightTotal += repeatHeightTotal;
        }
    }

    // The center of the delimiter is placed at the center of the axis. Note
    // that in this context, "center" means that the delimiter should be
    // centered around the axis in the current style, while normally it is
    // centered around the axis in textstyle.
    var axisHeight = fontMetrics.metrics.axisHeight;
    if (center) {
        axisHeight *= options.style.sizeMultiplier;
    }
    // Calculate the depth
    var depth = realHeightTotal / 2 - axisHeight;

    // Now, we start building the pieces that will go into the vlist

    // Keep a list of the inner pieces
    var inners = [];

    // Add the bottom symbol
    inners.push(makeInner(bottom, font, mode));

    var i;
    if (middle === null) {
        // Calculate the number of repeated symbols we need
        var repeatHeight = realHeightTotal - topHeightTotal - bottomHeightTotal;
        var symbolCount = Math.ceil(repeatHeight / repeatHeightTotal);

        // Add that many symbols
        for (i = 0; i < symbolCount; i++) {
            inners.push(makeInner(repeat, font, mode));
        }
    } else {
        // When there is a middle bit, we need the middle part and two repeated
        // sections

        // Calculate the number of symbols needed for the top and bottom
        // repeated parts
        var topRepeatHeight =
            realHeightTotal / 2 - topHeightTotal - middleHeightTotal / 2;
        var topSymbolCount = Math.ceil(topRepeatHeight / repeatHeightTotal);

        var bottomRepeatHeight =
            realHeightTotal / 2 - topHeightTotal - middleHeightTotal / 2;
        var bottomSymbolCount =
            Math.ceil(bottomRepeatHeight / repeatHeightTotal);

        // Add the top repeated part
        for (i = 0; i < topSymbolCount; i++) {
            inners.push(makeInner(repeat, font, mode));
        }

        // Add the middle piece
        inners.push(makeInner(middle, font, mode));

        // Add the bottom repeated part
        for (i = 0; i < bottomSymbolCount; i++) {
            inners.push(makeInner(repeat, font, mode));
        }
    }

    // Add the top symbol
    inners.push(makeInner(top, font, mode));

    // Finally, build the vlist
    var inner = buildCommon.makeVList(inners, "bottom", depth, options);

    return styleWrap(
        makeSpan(["delimsizing", "mult"], [inner], options.getColor()),
        Style.TEXT, options);
};

// There are three kinds of delimiters, delimiters that stack when they become
// too large
var stackLargeDelimiters = [
    "(", ")", "[", "\\lbrack", "]", "\\rbrack",
    "\\{", "\\lbrace", "\\}", "\\rbrace",
    "\\lfloor", "\\rfloor", "\\lceil", "\\rceil",
    "\\surd"
];

// delimiters that always stack
var stackAlwaysDelimiters = [
    "\\uparrow", "\\downarrow", "\\updownarrow",
    "\\Uparrow", "\\Downarrow", "\\Updownarrow",
    "|", "\\|", "\\vert", "\\Vert"
];

// and delimiters that never stack
var stackNeverDelimiters = [
    "<", ">", "\\langle", "\\rangle", "/", "\\backslash"
];

// Metrics of the different sizes. Found by looking at TeX's output of
// $\bigl| // \Bigl| \biggl| \Biggl| \showlists$
// Used to create stacked delimiters of appropriate sizes in makeSizedDelim.
var sizeToMaxHeight = [0, 1.2, 1.8, 2.4, 3.0];

/**
 * Used to create a delimiter of a specific size, where `size` is 1, 2, 3, or 4.
 */
var makeSizedDelim = function(delim, size, options, mode) {
    // < and > turn into \langle and \rangle in delimiters
    if (delim === "<") {
        delim = "\\langle";
    } else if (delim === ">") {
        delim = "\\rangle";
    }

    // Sized delimiters are never centered.
    if (utils.contains(stackLargeDelimiters, delim) ||
        utils.contains(stackNeverDelimiters, delim)) {
        return makeLargeDelim(delim, size, false, options, mode);
    } else if (utils.contains(stackAlwaysDelimiters, delim)) {
        return makeStackedDelim(
            delim, sizeToMaxHeight[size], false, options, mode);
    } else {
        throw new ParseError("Illegal delimiter: '" + delim + "'");
    }
};

/**
 * There are three different sequences of delimiter sizes that the delimiters
 * follow depending on the kind of delimiter. This is used when creating custom
 * sized delimiters to decide whether to create a small, large, or stacked
 * delimiter.
 *
 * In real TeX, these sequences aren't explicitly defined, but are instead
 * defined inside the font metrics. Since there are only three sequences that
 * are possible for the delimiters that TeX defines, it is easier to just encode
 * them explicitly here.
 */

// Delimiters that never stack try small delimiters and large delimiters only
var stackNeverDelimiterSequence = [
    {type: "small", style: Style.SCRIPTSCRIPT},
    {type: "small", style: Style.SCRIPT},
    {type: "small", style: Style.TEXT},
    {type: "large", size: 1},
    {type: "large", size: 2},
    {type: "large", size: 3},
    {type: "large", size: 4}
];

// Delimiters that always stack try the small delimiters first, then stack
var stackAlwaysDelimiterSequence = [
    {type: "small", style: Style.SCRIPTSCRIPT},
    {type: "small", style: Style.SCRIPT},
    {type: "small", style: Style.TEXT},
    {type: "stack"}
];

// Delimiters that stack when large try the small and then large delimiters, and
// stack afterwards
var stackLargeDelimiterSequence = [
    {type: "small", style: Style.SCRIPTSCRIPT},
    {type: "small", style: Style.SCRIPT},
    {type: "small", style: Style.TEXT},
    {type: "large", size: 1},
    {type: "large", size: 2},
    {type: "large", size: 3},
    {type: "large", size: 4},
    {type: "stack"}
];

/**
 * Get the font used in a delimiter based on what kind of delimiter it is.
 */
var delimTypeToFont = function(type) {
    if (type.type === "small") {
        return "Main-Regular";
    } else if (type.type === "large") {
        return "Size" + type.size + "-Regular";
    } else if (type.type === "stack") {
        return "Size4-Regular";
    }
};

/**
 * Traverse a sequence of types of delimiters to decide what kind of delimiter
 * should be used to create a delimiter of the given height+depth.
 */
var traverseSequence = function(delim, height, sequence, options) {
    // Here, we choose the index we should start at in the sequences. In smaller
    // sizes (which correspond to larger numbers in style.size) we start earlier
    // in the sequence. Thus, scriptscript starts at index 3-3=0, script starts
    // at index 3-2=1, text starts at 3-1=2, and display starts at min(2,3-0)=2
    var start = Math.min(2, 3 - options.style.size);
    for (var i = start; i < sequence.length; i++) {
        if (sequence[i].type === "stack") {
            // This is always the last delimiter, so we just break the loop now.
            break;
        }

        var metrics = getMetrics(delim, delimTypeToFont(sequence[i]));
        var heightDepth = metrics.height + metrics.depth;

        // Small delimiters are scaled down versions of the same font, so we
        // account for the style change size.

        if (sequence[i].type === "small") {
            heightDepth *= sequence[i].style.sizeMultiplier;
        }

        // Check if the delimiter at this size works for the given height.
        if (heightDepth > height) {
            return sequence[i];
        }
    }

    // If we reached the end of the sequence, return the last sequence element.
    return sequence[sequence.length - 1];
};

/**
 * Make a delimiter of a given height+depth, with optional centering. Here, we
 * traverse the sequences, and create a delimiter that the sequence tells us to.
 */
var makeCustomSizedDelim = function(delim, height, center, options, mode) {
    if (delim === "<") {
        delim = "\\langle";
    } else if (delim === ">") {
        delim = "\\rangle";
    }

    // Decide what sequence to use
    var sequence;
    if (utils.contains(stackNeverDelimiters, delim)) {
        sequence = stackNeverDelimiterSequence;
    } else if (utils.contains(stackLargeDelimiters, delim)) {
        sequence = stackLargeDelimiterSequence;
    } else {
        sequence = stackAlwaysDelimiterSequence;
    }

    // Look through the sequence
    var delimType = traverseSequence(delim, height, sequence, options);

    // Depending on the sequence element we decided on, call the appropriate
    // function.
    if (delimType.type === "small") {
        return makeSmallDelim(delim, delimType.style, center, options, mode);
    } else if (delimType.type === "large") {
        return makeLargeDelim(delim, delimType.size, center, options, mode);
    } else if (delimType.type === "stack") {
        return makeStackedDelim(delim, height, center, options, mode);
    }
};

/**
 * Make a delimiter for use with `\left` and `\right`, given a height and depth
 * of an expression that the delimiters surround.
 */
var makeLeftRightDelim = function(delim, height, depth, options, mode) {
    // We always center \left/\right delimiters, so the axis is always shifted
    var axisHeight =
        fontMetrics.metrics.axisHeight * options.style.sizeMultiplier;

    // Taken from TeX source, tex.web, function make_left_right
    var delimiterFactor = 901;
    var delimiterExtend = 5.0 / fontMetrics.metrics.ptPerEm;

    var maxDistFromAxis = Math.max(
        height - axisHeight, depth + axisHeight);

    var totalHeight = Math.max(
        // In real TeX, calculations are done using integral values which are
        // 65536 per pt, or 655360 per em. So, the division here truncates in
        // TeX but doesn't here, producing different results. If we wanted to
        // exactly match TeX's calculation, we could do
        //   Math.floor(655360 * maxDistFromAxis / 500) *
        //    delimiterFactor / 655360
        // (To see the difference, compare
        //    x^{x^{\left(\rule{0.1em}{0.68em}\right)}}
        // in TeX and KaTeX)
        maxDistFromAxis / 500 * delimiterFactor,
        2 * maxDistFromAxis - delimiterExtend);

    // Finally, we defer to `makeCustomSizedDelim` with our calculated total
    // height
    return makeCustomSizedDelim(delim, totalHeight, true, options, mode);
};

module.exports = {
    sizedDelim: makeSizedDelim,
    customSizedDelim: makeCustomSizedDelim,
    leftRightDelim: makeLeftRightDelim
};

},{"./ParseError":61,"./Style":63,"./buildCommon":64,"./fontMetrics":68,"./symbols":71,"./utils":72}],67:[function(require,module,exports){
/**
 * These objects store the data about the DOM nodes we create, as well as some
 * extra data. They can then be transformed into real DOM nodes with the toNode
 * function or HTML markup using toMarkup. They are useful for both storing
 * extra properties on the nodes, as well as providing a way to easily work
 * with the DOM.
 */

var utils = require("./utils");

/**
 * Create an HTML className based on a list of classes. In addition to joining
 * with spaces, we also remove null or empty classes.
 */
var createClass = function(classes) {
    classes = classes.slice();
    for (var i = classes.length - 1; i >= 0; i--) {
        if (!classes[i]) {
            classes.splice(i, 1);
        }
    }

    return classes.join(" ");
};

/**
 * This node represents a span node, with a className, a list of children, and
 * an inline style. It also contains information about its height, depth, and
 * maxFontSize.
 */
function span(classes, children, height, depth, maxFontSize, style) {
    this.classes = classes || [];
    this.children = children || [];
    this.height = height || 0;
    this.depth = depth || 0;
    this.maxFontSize = maxFontSize || 0;
    this.style = style || {};
}

/**
 * Convert the span into an HTML node
 */
span.prototype.toNode = function() {
    var span = document.createElement("span");

    // Apply the class
    span.className = createClass(this.classes);

    // Apply inline styles
    for (var style in this.style) {
        if (this.style.hasOwnProperty(style)) {
            span.style[style] = this.style[style];
        }
    }

    // Append the children, also as HTML nodes
    for (var i = 0; i < this.children.length; i++) {
        span.appendChild(this.children[i].toNode());
    }

    return span;
};

/**
 * Convert the span into an HTML markup string
 */
span.prototype.toMarkup = function() {
    var markup = "<span";

    // Add the class
    if (this.classes.length) {
        markup += " class=\"";
        markup += utils.escape(createClass(this.classes));
        markup += "\"";
    }

    var styles = "";

    // Add the styles, after hyphenation
    for (var style in this.style) {
        if (this.style.hasOwnProperty(style)) {
            styles += utils.hyphenate(style) + ":" + this.style[style] + ";";
        }
    }

    if (styles) {
        markup += " style=\"" + utils.escape(styles) + "\"";
    }

    markup += ">";

    // Add the markup of the children, also as markup
    for (var i = 0; i < this.children.length; i++) {
        markup += this.children[i].toMarkup();
    }

    markup += "</span>";

    return markup;
};

/**
 * This node represents a document fragment, which contains elements, but when
 * placed into the DOM doesn't have any representation itself. Thus, it only
 * contains children and doesn't have any HTML properties. It also keeps track
 * of a height, depth, and maxFontSize.
 */
function documentFragment(children, height, depth, maxFontSize) {
    this.children = children || [];
    this.height = height || 0;
    this.depth = depth || 0;
    this.maxFontSize = maxFontSize || 0;
}

/**
 * Convert the fragment into a node
 */
documentFragment.prototype.toNode = function() {
    // Create a fragment
    var frag = document.createDocumentFragment();

    // Append the children
    for (var i = 0; i < this.children.length; i++) {
        frag.appendChild(this.children[i].toNode());
    }

    return frag;
};

/**
 * Convert the fragment into HTML markup
 */
documentFragment.prototype.toMarkup = function() {
    var markup = "";

    // Simply concatenate the markup for the children together
    for (var i = 0; i < this.children.length; i++) {
        markup += this.children[i].toMarkup();
    }

    return markup;
};

/**
 * A symbol node contains information about a single symbol. It either renders
 * to a single text node, or a span with a single text node in it, depending on
 * whether it has CSS classes, styles, or needs italic correction.
 */
function symbolNode(value, height, depth, italic, skew, classes, style) {
    this.value = value || "";
    this.height = height || 0;
    this.depth = depth || 0;
    this.italic = italic || 0;
    this.skew = skew || 0;
    this.classes = classes || [];
    this.style = style || {};
    this.maxFontSize = 0;
}

/**
 * Creates a text node or span from a symbol node. Note that a span is only
 * created if it is needed.
 */
symbolNode.prototype.toNode = function() {
    var node = document.createTextNode(this.value);
    var span = null;

    if (this.italic > 0) {
        span = document.createElement("span");
        span.style.marginRight = this.italic + "em";
    }

    if (this.classes.length > 0) {
        span = span || document.createElement("span");
        span.className = createClass(this.classes);
    }

    for (var style in this.style) {
        if (this.style.hasOwnProperty(style)) {
            span = span || document.createElement("span");
            span.style[style] = this.style[style];
        }
    }

    if (span) {
        span.appendChild(node);
        return span;
    } else {
        return node;
    }
};

/**
 * Creates markup for a symbol node.
 */
symbolNode.prototype.toMarkup = function() {
    // TODO(alpert): More duplication than I'd like from
    // span.prototype.toMarkup and symbolNode.prototype.toNode...
    var needsSpan = false;

    var markup = "<span";

    if (this.classes.length) {
        needsSpan = true;
        markup += " class=\"";
        markup += utils.escape(createClass(this.classes));
        markup += "\"";
    }

    var styles = "";

    if (this.italic > 0) {
        styles += "margin-right:" + this.italic + "em;";
    }
    for (var style in this.style) {
        if (this.style.hasOwnProperty(style)) {
            styles += utils.hyphenate(style) + ":" + this.style[style] + ";";
        }
    }

    if (styles) {
        needsSpan = true;
        markup += " style=\"" + utils.escape(styles) + "\"";
    }

    var escaped = utils.escape(this.value);
    if (needsSpan) {
        markup += ">";
        markup += escaped;
        markup += "</span>";
        return markup;
    } else {
        return escaped;
    }
};

module.exports = {
    span: span,
    documentFragment: documentFragment,
    symbolNode: symbolNode
};

},{"./utils":72}],68:[function(require,module,exports){
/* jshint unused:false */

var Style = require("./Style");

/**
 * This file contains metrics regarding fonts and individual symbols. The sigma
 * and xi variables, as well as the metricMap map contain data extracted from
 * TeX, TeX font metrics, and the TTF files. These data are then exposed via the
 * `metrics` variable and the getCharacterMetrics function.
 */

// These font metrics are extracted from TeX by using
// \font\a=cmmi10
// \showthe\fontdimenX\a
// where X is the corresponding variable number. These correspond to the font
// parameters of the symbol fonts. In TeX, there are actually three sets of
// dimensions, one for each of textstyle, scriptstyle, and scriptscriptstyle,
// but we only use the textstyle ones, and scale certain dimensions accordingly.
// See the TeXbook, page 441.
var sigma1 = 0.025;
var sigma2 = 0;
var sigma3 = 0;
var sigma4 = 0;
var sigma5 = 0.431;
var sigma6 = 1;
var sigma7 = 0;
var sigma8 = 0.677;
var sigma9 = 0.394;
var sigma10 = 0.444;
var sigma11 = 0.686;
var sigma12 = 0.345;
var sigma13 = 0.413;
var sigma14 = 0.363;
var sigma15 = 0.289;
var sigma16 = 0.150;
var sigma17 = 0.247;
var sigma18 = 0.386;
var sigma19 = 0.050;
var sigma20 = 2.390;
var sigma21 = 1.01;
var sigma21Script = 0.81;
var sigma21ScriptScript = 0.71;
var sigma22 = 0.250;

// These font metrics are extracted from TeX by using
// \font\a=cmex10
// \showthe\fontdimenX\a
// where X is the corresponding variable number. These correspond to the font
// parameters of the extension fonts (family 3). See the TeXbook, page 441.
var xi1 = 0;
var xi2 = 0;
var xi3 = 0;
var xi4 = 0;
var xi5 = 0.431;
var xi6 = 1;
var xi7 = 0;
var xi8 = 0.04;
var xi9 = 0.111;
var xi10 = 0.166;
var xi11 = 0.2;
var xi12 = 0.6;
var xi13 = 0.1;

// This value determines how large a pt is, for metrics which are defined in
// terms of pts.
// This value is also used in katex.less; if you change it make sure the values
// match.
var ptPerEm = 10.0;

/**
 * This is just a mapping from common names to real metrics
 */
var metrics = {
    xHeight: sigma5,
    quad: sigma6,
    num1: sigma8,
    num2: sigma9,
    num3: sigma10,
    denom1: sigma11,
    denom2: sigma12,
    sup1: sigma13,
    sup2: sigma14,
    sup3: sigma15,
    sub1: sigma16,
    sub2: sigma17,
    supDrop: sigma18,
    subDrop: sigma19,
    axisHeight: sigma22,
    defaultRuleThickness: xi8,
    bigOpSpacing1: xi9,
    bigOpSpacing2: xi10,
    bigOpSpacing3: xi11,
    bigOpSpacing4: xi12,
    bigOpSpacing5: xi13,
    ptPerEm: ptPerEm,

    // TODO(alpert): Missing parallel structure here. We should probably add
    // style-specific metrics for all of these.
    delim1: sigma20,
    getDelim2: function(style) {
        if (style.size === Style.TEXT.size) {
            return sigma21;
        } else if (style.size === Style.SCRIPT.size) {
            return sigma21Script;
        } else if (style.size === Style.SCRIPTSCRIPT.size) {
            return sigma21ScriptScript;
        }
        throw new Error("Unexpected style size: " + style.size);
    }
};

// This map contains a mapping from font name and character code to character
// metrics, including height, depth, italic correction, and skew (kern from the
// character to the corresponding \skewchar)
// This map is generated via `make metrics`. It should not be changed manually.
var metricMap = {"AMS-Regular":{"10003":{"depth":0.0,"height":0.69224,"italic":0.0,"skew":0.0},"10016":{"depth":0.0,"height":0.69224,"italic":0.0,"skew":0.0},"1008":{"depth":0.0,"height":0.43056,"italic":0.04028,"skew":0.0},"107":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"10731":{"depth":0.11111,"height":0.69224,"italic":0.0,"skew":0.0},"10846":{"depth":0.19444,"height":0.75583,"italic":0.0,"skew":0.0},"10877":{"depth":0.13667,"height":0.63667,"italic":0.0,"skew":0.0},"10878":{"depth":0.13667,"height":0.63667,"italic":0.0,"skew":0.0},"10885":{"depth":0.25583,"height":0.75583,"italic":0.0,"skew":0.0},"10886":{"depth":0.25583,"height":0.75583,"italic":0.0,"skew":0.0},"10887":{"depth":0.13597,"height":0.63597,"italic":0.0,"skew":0.0},"10888":{"depth":0.13597,"height":0.63597,"italic":0.0,"skew":0.0},"10889":{"depth":0.26167,"height":0.75726,"italic":0.0,"skew":0.0},"10890":{"depth":0.26167,"height":0.75726,"italic":0.0,"skew":0.0},"10891":{"depth":0.48256,"height":0.98256,"italic":0.0,"skew":0.0},"10892":{"depth":0.48256,"height":0.98256,"italic":0.0,"skew":0.0},"10901":{"depth":0.13667,"height":0.63667,"italic":0.0,"skew":0.0},"10902":{"depth":0.13667,"height":0.63667,"italic":0.0,"skew":0.0},"10933":{"depth":0.25142,"height":0.75726,"italic":0.0,"skew":0.0},"10934":{"depth":0.25142,"height":0.75726,"italic":0.0,"skew":0.0},"10935":{"depth":0.26167,"height":0.75726,"italic":0.0,"skew":0.0},"10936":{"depth":0.26167,"height":0.75726,"italic":0.0,"skew":0.0},"10937":{"depth":0.26167,"height":0.75726,"italic":0.0,"skew":0.0},"10938":{"depth":0.26167,"height":0.75726,"italic":0.0,"skew":0.0},"10949":{"depth":0.25583,"height":0.75583,"italic":0.0,"skew":0.0},"10950":{"depth":0.25583,"height":0.75583,"italic":0.0,"skew":0.0},"10955":{"depth":0.28481,"height":0.79383,"italic":0.0,"skew":0.0},"10956":{"depth":0.28481,"height":0.79383,"italic":0.0,"skew":0.0},"165":{"depth":0.0,"height":0.675,"italic":0.025,"skew":0.0},"174":{"depth":0.15559,"height":0.69224,"italic":0.0,"skew":0.0},"240":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"295":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"57350":{"depth":0.08167,"height":0.58167,"italic":0.0,"skew":0.0},"57351":{"depth":0.08167,"height":0.58167,"italic":0.0,"skew":0.0},"57352":{"depth":0.08167,"height":0.58167,"italic":0.0,"skew":0.0},"57353":{"depth":0.0,"height":0.43056,"italic":0.04028,"skew":0.0},"57356":{"depth":0.25142,"height":0.75726,"italic":0.0,"skew":0.0},"57357":{"depth":0.25142,"height":0.75726,"italic":0.0,"skew":0.0},"57358":{"depth":0.41951,"height":0.91951,"italic":0.0,"skew":0.0},"57359":{"depth":0.30274,"height":0.79383,"italic":0.0,"skew":0.0},"57360":{"depth":0.30274,"height":0.79383,"italic":0.0,"skew":0.0},"57361":{"depth":0.41951,"height":0.91951,"italic":0.0,"skew":0.0},"57366":{"depth":0.25142,"height":0.75726,"italic":0.0,"skew":0.0},"57367":{"depth":0.25142,"height":0.75726,"italic":0.0,"skew":0.0},"57368":{"depth":0.25142,"height":0.75726,"italic":0.0,"skew":0.0},"57369":{"depth":0.25142,"height":0.75726,"italic":0.0,"skew":0.0},"57370":{"depth":0.13597,"height":0.63597,"italic":0.0,"skew":0.0},"57371":{"depth":0.13597,"height":0.63597,"italic":0.0,"skew":0.0},"65":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"66":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"67":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"68":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"69":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"70":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"71":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"710":{"depth":0.0,"height":0.825,"italic":0.0,"skew":0.0},"72":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"73":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"732":{"depth":0.0,"height":0.9,"italic":0.0,"skew":0.0},"74":{"depth":0.16667,"height":0.68889,"italic":0.0,"skew":0.0},"75":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"76":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"77":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"770":{"depth":0.0,"height":0.825,"italic":0.0,"skew":0.0},"771":{"depth":0.0,"height":0.9,"italic":0.0,"skew":0.0},"78":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"79":{"depth":0.16667,"height":0.68889,"italic":0.0,"skew":0.0},"80":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"81":{"depth":0.16667,"height":0.68889,"italic":0.0,"skew":0.0},"82":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"8245":{"depth":0.0,"height":0.54986,"italic":0.0,"skew":0.0},"83":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"84":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"8463":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"8487":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"8498":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"85":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"8502":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"8503":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"8504":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"8513":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"8592":{"depth":-0.03598,"height":0.46402,"italic":0.0,"skew":0.0},"8594":{"depth":-0.03598,"height":0.46402,"italic":0.0,"skew":0.0},"86":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"8602":{"depth":-0.13313,"height":0.36687,"italic":0.0,"skew":0.0},"8603":{"depth":-0.13313,"height":0.36687,"italic":0.0,"skew":0.0},"8606":{"depth":0.01354,"height":0.52239,"italic":0.0,"skew":0.0},"8608":{"depth":0.01354,"height":0.52239,"italic":0.0,"skew":0.0},"8610":{"depth":0.01354,"height":0.52239,"italic":0.0,"skew":0.0},"8611":{"depth":0.01354,"height":0.52239,"italic":0.0,"skew":0.0},"8619":{"depth":0.0,"height":0.54986,"italic":0.0,"skew":0.0},"8620":{"depth":0.0,"height":0.54986,"italic":0.0,"skew":0.0},"8621":{"depth":-0.13313,"height":0.37788,"italic":0.0,"skew":0.0},"8622":{"depth":-0.13313,"height":0.36687,"italic":0.0,"skew":0.0},"8624":{"depth":0.0,"height":0.69224,"italic":0.0,"skew":0.0},"8625":{"depth":0.0,"height":0.69224,"italic":0.0,"skew":0.0},"8630":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.0},"8631":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.0},"8634":{"depth":0.08198,"height":0.58198,"italic":0.0,"skew":0.0},"8635":{"depth":0.08198,"height":0.58198,"italic":0.0,"skew":0.0},"8638":{"depth":0.19444,"height":0.69224,"italic":0.0,"skew":0.0},"8639":{"depth":0.19444,"height":0.69224,"italic":0.0,"skew":0.0},"8642":{"depth":0.19444,"height":0.69224,"italic":0.0,"skew":0.0},"8643":{"depth":0.19444,"height":0.69224,"italic":0.0,"skew":0.0},"8644":{"depth":0.1808,"height":0.675,"italic":0.0,"skew":0.0},"8646":{"depth":0.1808,"height":0.675,"italic":0.0,"skew":0.0},"8647":{"depth":0.1808,"height":0.675,"italic":0.0,"skew":0.0},"8648":{"depth":0.19444,"height":0.69224,"italic":0.0,"skew":0.0},"8649":{"depth":0.1808,"height":0.675,"italic":0.0,"skew":0.0},"8650":{"depth":0.19444,"height":0.69224,"italic":0.0,"skew":0.0},"8651":{"depth":0.01354,"height":0.52239,"italic":0.0,"skew":0.0},"8652":{"depth":0.01354,"height":0.52239,"italic":0.0,"skew":0.0},"8653":{"depth":-0.13313,"height":0.36687,"italic":0.0,"skew":0.0},"8654":{"depth":-0.13313,"height":0.36687,"italic":0.0,"skew":0.0},"8655":{"depth":-0.13313,"height":0.36687,"italic":0.0,"skew":0.0},"8666":{"depth":0.13667,"height":0.63667,"italic":0.0,"skew":0.0},"8667":{"depth":0.13667,"height":0.63667,"italic":0.0,"skew":0.0},"8669":{"depth":-0.13313,"height":0.37788,"italic":0.0,"skew":0.0},"87":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"8705":{"depth":0.0,"height":0.825,"italic":0.0,"skew":0.0},"8708":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"8709":{"depth":0.08167,"height":0.58167,"italic":0.0,"skew":0.0},"8717":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.0},"8722":{"depth":-0.03598,"height":0.46402,"italic":0.0,"skew":0.0},"8724":{"depth":0.08198,"height":0.69224,"italic":0.0,"skew":0.0},"8726":{"depth":0.08167,"height":0.58167,"italic":0.0,"skew":0.0},"8733":{"depth":0.0,"height":0.69224,"italic":0.0,"skew":0.0},"8736":{"depth":0.0,"height":0.69224,"italic":0.0,"skew":0.0},"8737":{"depth":0.0,"height":0.69224,"italic":0.0,"skew":0.0},"8738":{"depth":0.03517,"height":0.52239,"italic":0.0,"skew":0.0},"8739":{"depth":0.08167,"height":0.58167,"italic":0.0,"skew":0.0},"8740":{"depth":0.25142,"height":0.74111,"italic":0.0,"skew":0.0},"8741":{"depth":0.08167,"height":0.58167,"italic":0.0,"skew":0.0},"8742":{"depth":0.25142,"height":0.74111,"italic":0.0,"skew":0.0},"8756":{"depth":0.0,"height":0.69224,"italic":0.0,"skew":0.0},"8757":{"depth":0.0,"height":0.69224,"italic":0.0,"skew":0.0},"8764":{"depth":-0.13313,"height":0.36687,"italic":0.0,"skew":0.0},"8765":{"depth":-0.13313,"height":0.37788,"italic":0.0,"skew":0.0},"8769":{"depth":-0.13313,"height":0.36687,"italic":0.0,"skew":0.0},"8770":{"depth":-0.03625,"height":0.46375,"italic":0.0,"skew":0.0},"8774":{"depth":0.30274,"height":0.79383,"italic":0.0,"skew":0.0},"8776":{"depth":-0.01688,"height":0.48312,"italic":0.0,"skew":0.0},"8778":{"depth":0.08167,"height":0.58167,"italic":0.0,"skew":0.0},"8782":{"depth":0.06062,"height":0.54986,"italic":0.0,"skew":0.0},"8783":{"depth":0.06062,"height":0.54986,"italic":0.0,"skew":0.0},"8785":{"depth":0.08198,"height":0.58198,"italic":0.0,"skew":0.0},"8786":{"depth":0.08198,"height":0.58198,"italic":0.0,"skew":0.0},"8787":{"depth":0.08198,"height":0.58198,"italic":0.0,"skew":0.0},"8790":{"depth":0.0,"height":0.69224,"italic":0.0,"skew":0.0},"8791":{"depth":0.22958,"height":0.72958,"italic":0.0,"skew":0.0},"8796":{"depth":0.08198,"height":0.91667,"italic":0.0,"skew":0.0},"88":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"8806":{"depth":0.25583,"height":0.75583,"italic":0.0,"skew":0.0},"8807":{"depth":0.25583,"height":0.75583,"italic":0.0,"skew":0.0},"8808":{"depth":0.25142,"height":0.75726,"italic":0.0,"skew":0.0},"8809":{"depth":0.25142,"height":0.75726,"italic":0.0,"skew":0.0},"8812":{"depth":0.25583,"height":0.75583,"italic":0.0,"skew":0.0},"8814":{"depth":0.20576,"height":0.70576,"italic":0.0,"skew":0.0},"8815":{"depth":0.20576,"height":0.70576,"italic":0.0,"skew":0.0},"8816":{"depth":0.30274,"height":0.79383,"italic":0.0,"skew":0.0},"8817":{"depth":0.30274,"height":0.79383,"italic":0.0,"skew":0.0},"8818":{"depth":0.22958,"height":0.72958,"italic":0.0,"skew":0.0},"8819":{"depth":0.22958,"height":0.72958,"italic":0.0,"skew":0.0},"8822":{"depth":0.1808,"height":0.675,"italic":0.0,"skew":0.0},"8823":{"depth":0.1808,"height":0.675,"italic":0.0,"skew":0.0},"8828":{"depth":0.13667,"height":0.63667,"italic":0.0,"skew":0.0},"8829":{"depth":0.13667,"height":0.63667,"italic":0.0,"skew":0.0},"8830":{"depth":0.22958,"height":0.72958,"italic":0.0,"skew":0.0},"8831":{"depth":0.22958,"height":0.72958,"italic":0.0,"skew":0.0},"8832":{"depth":0.20576,"height":0.70576,"italic":0.0,"skew":0.0},"8833":{"depth":0.20576,"height":0.70576,"italic":0.0,"skew":0.0},"8840":{"depth":0.30274,"height":0.79383,"italic":0.0,"skew":0.0},"8841":{"depth":0.30274,"height":0.79383,"italic":0.0,"skew":0.0},"8842":{"depth":0.13597,"height":0.63597,"italic":0.0,"skew":0.0},"8843":{"depth":0.13597,"height":0.63597,"italic":0.0,"skew":0.0},"8847":{"depth":0.03517,"height":0.54986,"italic":0.0,"skew":0.0},"8848":{"depth":0.03517,"height":0.54986,"italic":0.0,"skew":0.0},"8858":{"depth":0.08198,"height":0.58198,"italic":0.0,"skew":0.0},"8859":{"depth":0.08198,"height":0.58198,"italic":0.0,"skew":0.0},"8861":{"depth":0.08198,"height":0.58198,"italic":0.0,"skew":0.0},"8862":{"depth":0.0,"height":0.675,"italic":0.0,"skew":0.0},"8863":{"depth":0.0,"height":0.675,"italic":0.0,"skew":0.0},"8864":{"depth":0.0,"height":0.675,"italic":0.0,"skew":0.0},"8865":{"depth":0.0,"height":0.675,"italic":0.0,"skew":0.0},"8872":{"depth":0.0,"height":0.69224,"italic":0.0,"skew":0.0},"8873":{"depth":0.0,"height":0.69224,"italic":0.0,"skew":0.0},"8874":{"depth":0.0,"height":0.69224,"italic":0.0,"skew":0.0},"8876":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"8877":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"8878":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"8879":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"8882":{"depth":0.03517,"height":0.54986,"italic":0.0,"skew":0.0},"8883":{"depth":0.03517,"height":0.54986,"italic":0.0,"skew":0.0},"8884":{"depth":0.13667,"height":0.63667,"italic":0.0,"skew":0.0},"8885":{"depth":0.13667,"height":0.63667,"italic":0.0,"skew":0.0},"8888":{"depth":0.0,"height":0.54986,"italic":0.0,"skew":0.0},"8890":{"depth":0.19444,"height":0.43056,"italic":0.0,"skew":0.0},"8891":{"depth":0.19444,"height":0.69224,"italic":0.0,"skew":0.0},"8892":{"depth":0.19444,"height":0.69224,"italic":0.0,"skew":0.0},"89":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"8901":{"depth":0.0,"height":0.54986,"italic":0.0,"skew":0.0},"8903":{"depth":0.08167,"height":0.58167,"italic":0.0,"skew":0.0},"8905":{"depth":0.08167,"height":0.58167,"italic":0.0,"skew":0.0},"8906":{"depth":0.08167,"height":0.58167,"italic":0.0,"skew":0.0},"8907":{"depth":0.0,"height":0.69224,"italic":0.0,"skew":0.0},"8908":{"depth":0.0,"height":0.69224,"italic":0.0,"skew":0.0},"8909":{"depth":-0.03598,"height":0.46402,"italic":0.0,"skew":0.0},"8910":{"depth":0.0,"height":0.54986,"italic":0.0,"skew":0.0},"8911":{"depth":0.0,"height":0.54986,"italic":0.0,"skew":0.0},"8912":{"depth":0.03517,"height":0.54986,"italic":0.0,"skew":0.0},"8913":{"depth":0.03517,"height":0.54986,"italic":0.0,"skew":0.0},"8914":{"depth":0.0,"height":0.54986,"italic":0.0,"skew":0.0},"8915":{"depth":0.0,"height":0.54986,"italic":0.0,"skew":0.0},"8916":{"depth":0.0,"height":0.69224,"italic":0.0,"skew":0.0},"8918":{"depth":0.0391,"height":0.5391,"italic":0.0,"skew":0.0},"8919":{"depth":0.0391,"height":0.5391,"italic":0.0,"skew":0.0},"8920":{"depth":0.03517,"height":0.54986,"italic":0.0,"skew":0.0},"8921":{"depth":0.03517,"height":0.54986,"italic":0.0,"skew":0.0},"8922":{"depth":0.38569,"height":0.88569,"italic":0.0,"skew":0.0},"8923":{"depth":0.38569,"height":0.88569,"italic":0.0,"skew":0.0},"8926":{"depth":0.13667,"height":0.63667,"italic":0.0,"skew":0.0},"8927":{"depth":0.13667,"height":0.63667,"italic":0.0,"skew":0.0},"8928":{"depth":0.30274,"height":0.79383,"italic":0.0,"skew":0.0},"8929":{"depth":0.30274,"height":0.79383,"italic":0.0,"skew":0.0},"8934":{"depth":0.23222,"height":0.74111,"italic":0.0,"skew":0.0},"8935":{"depth":0.23222,"height":0.74111,"italic":0.0,"skew":0.0},"8936":{"depth":0.23222,"height":0.74111,"italic":0.0,"skew":0.0},"8937":{"depth":0.23222,"height":0.74111,"italic":0.0,"skew":0.0},"8938":{"depth":0.20576,"height":0.70576,"italic":0.0,"skew":0.0},"8939":{"depth":0.20576,"height":0.70576,"italic":0.0,"skew":0.0},"8940":{"depth":0.30274,"height":0.79383,"italic":0.0,"skew":0.0},"8941":{"depth":0.30274,"height":0.79383,"italic":0.0,"skew":0.0},"8994":{"depth":0.19444,"height":0.69224,"italic":0.0,"skew":0.0},"8995":{"depth":0.19444,"height":0.69224,"italic":0.0,"skew":0.0},"90":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"9416":{"depth":0.15559,"height":0.69224,"italic":0.0,"skew":0.0},"9484":{"depth":0.0,"height":0.69224,"italic":0.0,"skew":0.0},"9488":{"depth":0.0,"height":0.69224,"italic":0.0,"skew":0.0},"9492":{"depth":0.0,"height":0.37788,"italic":0.0,"skew":0.0},"9496":{"depth":0.0,"height":0.37788,"italic":0.0,"skew":0.0},"9585":{"depth":0.19444,"height":0.68889,"italic":0.0,"skew":0.0},"9586":{"depth":0.19444,"height":0.74111,"italic":0.0,"skew":0.0},"9632":{"depth":0.0,"height":0.675,"italic":0.0,"skew":0.0},"9633":{"depth":0.0,"height":0.675,"italic":0.0,"skew":0.0},"9650":{"depth":0.0,"height":0.54986,"italic":0.0,"skew":0.0},"9651":{"depth":0.0,"height":0.54986,"italic":0.0,"skew":0.0},"9654":{"depth":0.03517,"height":0.54986,"italic":0.0,"skew":0.0},"9660":{"depth":0.0,"height":0.54986,"italic":0.0,"skew":0.0},"9661":{"depth":0.0,"height":0.54986,"italic":0.0,"skew":0.0},"9664":{"depth":0.03517,"height":0.54986,"italic":0.0,"skew":0.0},"9674":{"depth":0.11111,"height":0.69224,"italic":0.0,"skew":0.0},"9733":{"depth":0.19444,"height":0.69224,"italic":0.0,"skew":0.0},"989":{"depth":0.08167,"height":0.58167,"italic":0.0,"skew":0.0}},"Main-Bold":{"100":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"101":{"depth":0.0,"height":0.44444,"italic":0.0,"skew":0.0},"102":{"depth":0.0,"height":0.69444,"italic":0.10903,"skew":0.0},"10216":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"10217":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"103":{"depth":0.19444,"height":0.44444,"italic":0.01597,"skew":0.0},"104":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"105":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"106":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"107":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"108":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"10815":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"109":{"depth":0.0,"height":0.44444,"italic":0.0,"skew":0.0},"10927":{"depth":0.19667,"height":0.69667,"italic":0.0,"skew":0.0},"10928":{"depth":0.19667,"height":0.69667,"italic":0.0,"skew":0.0},"110":{"depth":0.0,"height":0.44444,"italic":0.0,"skew":0.0},"111":{"depth":0.0,"height":0.44444,"italic":0.0,"skew":0.0},"112":{"depth":0.19444,"height":0.44444,"italic":0.0,"skew":0.0},"113":{"depth":0.19444,"height":0.44444,"italic":0.0,"skew":0.0},"114":{"depth":0.0,"height":0.44444,"italic":0.0,"skew":0.0},"115":{"depth":0.0,"height":0.44444,"italic":0.0,"skew":0.0},"116":{"depth":0.0,"height":0.63492,"italic":0.0,"skew":0.0},"117":{"depth":0.0,"height":0.44444,"italic":0.0,"skew":0.0},"118":{"depth":0.0,"height":0.44444,"italic":0.01597,"skew":0.0},"119":{"depth":0.0,"height":0.44444,"italic":0.01597,"skew":0.0},"120":{"depth":0.0,"height":0.44444,"italic":0.0,"skew":0.0},"121":{"depth":0.19444,"height":0.44444,"italic":0.01597,"skew":0.0},"122":{"depth":0.0,"height":0.44444,"italic":0.0,"skew":0.0},"123":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"124":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"125":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"126":{"depth":0.35,"height":0.34444,"italic":0.0,"skew":0.0},"168":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"172":{"depth":0.0,"height":0.44444,"italic":0.0,"skew":0.0},"175":{"depth":0.0,"height":0.59611,"italic":0.0,"skew":0.0},"176":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"177":{"depth":0.13333,"height":0.63333,"italic":0.0,"skew":0.0},"180":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"215":{"depth":0.13333,"height":0.63333,"italic":0.0,"skew":0.0},"247":{"depth":0.13333,"height":0.63333,"italic":0.0,"skew":0.0},"305":{"depth":0.0,"height":0.44444,"italic":0.0,"skew":0.0},"33":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"34":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"35":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"36":{"depth":0.05556,"height":0.75,"italic":0.0,"skew":0.0},"37":{"depth":0.05556,"height":0.75,"italic":0.0,"skew":0.0},"38":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"39":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"40":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"41":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"42":{"depth":0.0,"height":0.75,"italic":0.0,"skew":0.0},"43":{"depth":0.13333,"height":0.63333,"italic":0.0,"skew":0.0},"44":{"depth":0.19444,"height":0.15556,"italic":0.0,"skew":0.0},"45":{"depth":0.0,"height":0.44444,"italic":0.0,"skew":0.0},"46":{"depth":0.0,"height":0.15556,"italic":0.0,"skew":0.0},"47":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"48":{"depth":0.0,"height":0.64444,"italic":0.0,"skew":0.0},"49":{"depth":0.0,"height":0.64444,"italic":0.0,"skew":0.0},"50":{"depth":0.0,"height":0.64444,"italic":0.0,"skew":0.0},"51":{"depth":0.0,"height":0.64444,"italic":0.0,"skew":0.0},"52":{"depth":0.0,"height":0.64444,"italic":0.0,"skew":0.0},"53":{"depth":0.0,"height":0.64444,"italic":0.0,"skew":0.0},"54":{"depth":0.0,"height":0.64444,"italic":0.0,"skew":0.0},"55":{"depth":0.0,"height":0.64444,"italic":0.0,"skew":0.0},"56":{"depth":0.0,"height":0.64444,"italic":0.0,"skew":0.0},"567":{"depth":0.19444,"height":0.44444,"italic":0.0,"skew":0.0},"57":{"depth":0.0,"height":0.64444,"italic":0.0,"skew":0.0},"58":{"depth":0.0,"height":0.44444,"italic":0.0,"skew":0.0},"59":{"depth":0.19444,"height":0.44444,"italic":0.0,"skew":0.0},"60":{"depth":0.08556,"height":0.58556,"italic":0.0,"skew":0.0},"61":{"depth":-0.10889,"height":0.39111,"italic":0.0,"skew":0.0},"62":{"depth":0.08556,"height":0.58556,"italic":0.0,"skew":0.0},"63":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"64":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"65":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"66":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"67":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"68":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"69":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"70":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"71":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"710":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"711":{"depth":0.0,"height":0.63194,"italic":0.0,"skew":0.0},"713":{"depth":0.0,"height":0.59611,"italic":0.0,"skew":0.0},"714":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"715":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"72":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"728":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"729":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"73":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"730":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"732":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"74":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"75":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"76":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"768":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"769":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"77":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"770":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"771":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"772":{"depth":0.0,"height":0.59611,"italic":0.0,"skew":0.0},"774":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"775":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"776":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"778":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"779":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"78":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"780":{"depth":0.0,"height":0.63194,"italic":0.0,"skew":0.0},"79":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"80":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"81":{"depth":0.19444,"height":0.68611,"italic":0.0,"skew":0.0},"82":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"8211":{"depth":0.0,"height":0.44444,"italic":0.03194,"skew":0.0},"8212":{"depth":0.0,"height":0.44444,"italic":0.03194,"skew":0.0},"8216":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"8217":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"8220":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"8221":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"8224":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"8225":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"824":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"8242":{"depth":0.0,"height":0.55556,"italic":0.0,"skew":0.0},"83":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"84":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"8407":{"depth":0.0,"height":0.72444,"italic":0.15486,"skew":0.0},"8463":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"8465":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"8467":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"8472":{"depth":0.19444,"height":0.44444,"italic":0.0,"skew":0.0},"8476":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"85":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"8501":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"8592":{"depth":-0.10889,"height":0.39111,"italic":0.0,"skew":0.0},"8593":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"8594":{"depth":-0.10889,"height":0.39111,"italic":0.0,"skew":0.0},"8595":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"8596":{"depth":-0.10889,"height":0.39111,"italic":0.0,"skew":0.0},"8597":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"8598":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"8599":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"86":{"depth":0.0,"height":0.68611,"italic":0.01597,"skew":0.0},"8600":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"8601":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"8636":{"depth":-0.10889,"height":0.39111,"italic":0.0,"skew":0.0},"8637":{"depth":-0.10889,"height":0.39111,"italic":0.0,"skew":0.0},"8640":{"depth":-0.10889,"height":0.39111,"italic":0.0,"skew":0.0},"8641":{"depth":-0.10889,"height":0.39111,"italic":0.0,"skew":0.0},"8656":{"depth":-0.10889,"height":0.39111,"italic":0.0,"skew":0.0},"8657":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"8658":{"depth":-0.10889,"height":0.39111,"italic":0.0,"skew":0.0},"8659":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"8660":{"depth":-0.10889,"height":0.39111,"italic":0.0,"skew":0.0},"8661":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"87":{"depth":0.0,"height":0.68611,"italic":0.01597,"skew":0.0},"8704":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"8706":{"depth":0.0,"height":0.69444,"italic":0.06389,"skew":0.0},"8707":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"8709":{"depth":0.05556,"height":0.75,"italic":0.0,"skew":0.0},"8711":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"8712":{"depth":0.08556,"height":0.58556,"italic":0.0,"skew":0.0},"8715":{"depth":0.08556,"height":0.58556,"italic":0.0,"skew":0.0},"8722":{"depth":0.13333,"height":0.63333,"italic":0.0,"skew":0.0},"8723":{"depth":0.13333,"height":0.63333,"italic":0.0,"skew":0.0},"8725":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"8726":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"8727":{"depth":-0.02778,"height":0.47222,"italic":0.0,"skew":0.0},"8728":{"depth":-0.02639,"height":0.47361,"italic":0.0,"skew":0.0},"8729":{"depth":-0.02639,"height":0.47361,"italic":0.0,"skew":0.0},"8730":{"depth":0.18,"height":0.82,"italic":0.0,"skew":0.0},"8733":{"depth":0.0,"height":0.44444,"italic":0.0,"skew":0.0},"8734":{"depth":0.0,"height":0.44444,"italic":0.0,"skew":0.0},"8736":{"depth":0.0,"height":0.69224,"italic":0.0,"skew":0.0},"8739":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"8741":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"8743":{"depth":0.0,"height":0.55556,"italic":0.0,"skew":0.0},"8744":{"depth":0.0,"height":0.55556,"italic":0.0,"skew":0.0},"8745":{"depth":0.0,"height":0.55556,"italic":0.0,"skew":0.0},"8746":{"depth":0.0,"height":0.55556,"italic":0.0,"skew":0.0},"8747":{"depth":0.19444,"height":0.69444,"italic":0.12778,"skew":0.0},"8764":{"depth":-0.10889,"height":0.39111,"italic":0.0,"skew":0.0},"8768":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"8771":{"depth":0.00222,"height":0.50222,"italic":0.0,"skew":0.0},"8776":{"depth":0.02444,"height":0.52444,"italic":0.0,"skew":0.0},"8781":{"depth":0.00222,"height":0.50222,"italic":0.0,"skew":0.0},"88":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"8801":{"depth":0.00222,"height":0.50222,"italic":0.0,"skew":0.0},"8804":{"depth":0.19667,"height":0.69667,"italic":0.0,"skew":0.0},"8805":{"depth":0.19667,"height":0.69667,"italic":0.0,"skew":0.0},"8810":{"depth":0.08556,"height":0.58556,"italic":0.0,"skew":0.0},"8811":{"depth":0.08556,"height":0.58556,"italic":0.0,"skew":0.0},"8826":{"depth":0.08556,"height":0.58556,"italic":0.0,"skew":0.0},"8827":{"depth":0.08556,"height":0.58556,"italic":0.0,"skew":0.0},"8834":{"depth":0.08556,"height":0.58556,"italic":0.0,"skew":0.0},"8835":{"depth":0.08556,"height":0.58556,"italic":0.0,"skew":0.0},"8838":{"depth":0.19667,"height":0.69667,"italic":0.0,"skew":0.0},"8839":{"depth":0.19667,"height":0.69667,"italic":0.0,"skew":0.0},"8846":{"depth":0.0,"height":0.55556,"italic":0.0,"skew":0.0},"8849":{"depth":0.19667,"height":0.69667,"italic":0.0,"skew":0.0},"8850":{"depth":0.19667,"height":0.69667,"italic":0.0,"skew":0.0},"8851":{"depth":0.0,"height":0.55556,"italic":0.0,"skew":0.0},"8852":{"depth":0.0,"height":0.55556,"italic":0.0,"skew":0.0},"8853":{"depth":0.13333,"height":0.63333,"italic":0.0,"skew":0.0},"8854":{"depth":0.13333,"height":0.63333,"italic":0.0,"skew":0.0},"8855":{"depth":0.13333,"height":0.63333,"italic":0.0,"skew":0.0},"8856":{"depth":0.13333,"height":0.63333,"italic":0.0,"skew":0.0},"8857":{"depth":0.13333,"height":0.63333,"italic":0.0,"skew":0.0},"8866":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"8867":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"8868":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"8869":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"89":{"depth":0.0,"height":0.68611,"italic":0.02875,"skew":0.0},"8900":{"depth":-0.02639,"height":0.47361,"italic":0.0,"skew":0.0},"8901":{"depth":-0.02639,"height":0.47361,"italic":0.0,"skew":0.0},"8902":{"depth":-0.02778,"height":0.47222,"italic":0.0,"skew":0.0},"8968":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"8969":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"8970":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"8971":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"8994":{"depth":-0.13889,"height":0.36111,"italic":0.0,"skew":0.0},"8995":{"depth":-0.13889,"height":0.36111,"italic":0.0,"skew":0.0},"90":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"91":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"915":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"916":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"92":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"920":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"923":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"926":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"928":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"93":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"931":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"933":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"934":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"936":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"937":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"94":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"95":{"depth":0.31,"height":0.13444,"italic":0.03194,"skew":0.0},"96":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"9651":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"9657":{"depth":-0.02778,"height":0.47222,"italic":0.0,"skew":0.0},"9661":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"9667":{"depth":-0.02778,"height":0.47222,"italic":0.0,"skew":0.0},"97":{"depth":0.0,"height":0.44444,"italic":0.0,"skew":0.0},"9711":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"98":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"9824":{"depth":0.12963,"height":0.69444,"italic":0.0,"skew":0.0},"9825":{"depth":0.12963,"height":0.69444,"italic":0.0,"skew":0.0},"9826":{"depth":0.12963,"height":0.69444,"italic":0.0,"skew":0.0},"9827":{"depth":0.12963,"height":0.69444,"italic":0.0,"skew":0.0},"9837":{"depth":0.0,"height":0.75,"italic":0.0,"skew":0.0},"9838":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"9839":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"99":{"depth":0.0,"height":0.44444,"italic":0.0,"skew":0.0}},"Main-Italic":{"100":{"depth":0.0,"height":0.69444,"italic":0.10333,"skew":0.0},"101":{"depth":0.0,"height":0.43056,"italic":0.07514,"skew":0.0},"102":{"depth":0.19444,"height":0.69444,"italic":0.21194,"skew":0.0},"103":{"depth":0.19444,"height":0.43056,"italic":0.08847,"skew":0.0},"104":{"depth":0.0,"height":0.69444,"italic":0.07671,"skew":0.0},"105":{"depth":0.0,"height":0.65536,"italic":0.1019,"skew":0.0},"106":{"depth":0.19444,"height":0.65536,"italic":0.14467,"skew":0.0},"107":{"depth":0.0,"height":0.69444,"italic":0.10764,"skew":0.0},"108":{"depth":0.0,"height":0.69444,"italic":0.10333,"skew":0.0},"109":{"depth":0.0,"height":0.43056,"italic":0.07671,"skew":0.0},"110":{"depth":0.0,"height":0.43056,"italic":0.07671,"skew":0.0},"111":{"depth":0.0,"height":0.43056,"italic":0.06312,"skew":0.0},"112":{"depth":0.19444,"height":0.43056,"italic":0.06312,"skew":0.0},"113":{"depth":0.19444,"height":0.43056,"italic":0.08847,"skew":0.0},"114":{"depth":0.0,"height":0.43056,"italic":0.10764,"skew":0.0},"115":{"depth":0.0,"height":0.43056,"italic":0.08208,"skew":0.0},"116":{"depth":0.0,"height":0.61508,"italic":0.09486,"skew":0.0},"117":{"depth":0.0,"height":0.43056,"italic":0.07671,"skew":0.0},"118":{"depth":0.0,"height":0.43056,"italic":0.10764,"skew":0.0},"119":{"depth":0.0,"height":0.43056,"italic":0.10764,"skew":0.0},"120":{"depth":0.0,"height":0.43056,"italic":0.12042,"skew":0.0},"121":{"depth":0.19444,"height":0.43056,"italic":0.08847,"skew":0.0},"122":{"depth":0.0,"height":0.43056,"italic":0.12292,"skew":0.0},"126":{"depth":0.35,"height":0.31786,"italic":0.11585,"skew":0.0},"163":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"305":{"depth":0.0,"height":0.43056,"italic":0.07671,"skew":0.0},"33":{"depth":0.0,"height":0.69444,"italic":0.12417,"skew":0.0},"34":{"depth":0.0,"height":0.69444,"italic":0.06961,"skew":0.0},"35":{"depth":0.19444,"height":0.69444,"italic":0.06616,"skew":0.0},"37":{"depth":0.05556,"height":0.75,"italic":0.13639,"skew":0.0},"38":{"depth":0.0,"height":0.69444,"italic":0.09694,"skew":0.0},"39":{"depth":0.0,"height":0.69444,"italic":0.12417,"skew":0.0},"40":{"depth":0.25,"height":0.75,"italic":0.16194,"skew":0.0},"41":{"depth":0.25,"height":0.75,"italic":0.03694,"skew":0.0},"42":{"depth":0.0,"height":0.75,"italic":0.14917,"skew":0.0},"43":{"depth":0.05667,"height":0.56167,"italic":0.03694,"skew":0.0},"44":{"depth":0.19444,"height":0.10556,"italic":0.0,"skew":0.0},"45":{"depth":0.0,"height":0.43056,"italic":0.02826,"skew":0.0},"46":{"depth":0.0,"height":0.10556,"italic":0.0,"skew":0.0},"47":{"depth":0.25,"height":0.75,"italic":0.16194,"skew":0.0},"48":{"depth":0.0,"height":0.64444,"italic":0.13556,"skew":0.0},"49":{"depth":0.0,"height":0.64444,"italic":0.13556,"skew":0.0},"50":{"depth":0.0,"height":0.64444,"italic":0.13556,"skew":0.0},"51":{"depth":0.0,"height":0.64444,"italic":0.13556,"skew":0.0},"52":{"depth":0.19444,"height":0.64444,"italic":0.13556,"skew":0.0},"53":{"depth":0.0,"height":0.64444,"italic":0.13556,"skew":0.0},"54":{"depth":0.0,"height":0.64444,"italic":0.13556,"skew":0.0},"55":{"depth":0.19444,"height":0.64444,"italic":0.13556,"skew":0.0},"56":{"depth":0.0,"height":0.64444,"italic":0.13556,"skew":0.0},"567":{"depth":0.19444,"height":0.43056,"italic":0.03736,"skew":0.0},"57":{"depth":0.0,"height":0.64444,"italic":0.13556,"skew":0.0},"58":{"depth":0.0,"height":0.43056,"italic":0.0582,"skew":0.0},"59":{"depth":0.19444,"height":0.43056,"italic":0.0582,"skew":0.0},"61":{"depth":-0.13313,"height":0.36687,"italic":0.06616,"skew":0.0},"63":{"depth":0.0,"height":0.69444,"italic":0.1225,"skew":0.0},"64":{"depth":0.0,"height":0.69444,"italic":0.09597,"skew":0.0},"65":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.0},"66":{"depth":0.0,"height":0.68333,"italic":0.10257,"skew":0.0},"67":{"depth":0.0,"height":0.68333,"italic":0.14528,"skew":0.0},"68":{"depth":0.0,"height":0.68333,"italic":0.09403,"skew":0.0},"69":{"depth":0.0,"height":0.68333,"italic":0.12028,"skew":0.0},"70":{"depth":0.0,"height":0.68333,"italic":0.13305,"skew":0.0},"71":{"depth":0.0,"height":0.68333,"italic":0.08722,"skew":0.0},"72":{"depth":0.0,"height":0.68333,"italic":0.16389,"skew":0.0},"73":{"depth":0.0,"height":0.68333,"italic":0.15806,"skew":0.0},"74":{"depth":0.0,"height":0.68333,"italic":0.14028,"skew":0.0},"75":{"depth":0.0,"height":0.68333,"italic":0.14528,"skew":0.0},"76":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.0},"768":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"769":{"depth":0.0,"height":0.69444,"italic":0.09694,"skew":0.0},"77":{"depth":0.0,"height":0.68333,"italic":0.16389,"skew":0.0},"770":{"depth":0.0,"height":0.69444,"italic":0.06646,"skew":0.0},"771":{"depth":0.0,"height":0.66786,"italic":0.11585,"skew":0.0},"772":{"depth":0.0,"height":0.56167,"italic":0.10333,"skew":0.0},"774":{"depth":0.0,"height":0.69444,"italic":0.10806,"skew":0.0},"775":{"depth":0.0,"height":0.66786,"italic":0.11752,"skew":0.0},"776":{"depth":0.0,"height":0.66786,"italic":0.10474,"skew":0.0},"778":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"779":{"depth":0.0,"height":0.69444,"italic":0.1225,"skew":0.0},"78":{"depth":0.0,"height":0.68333,"italic":0.16389,"skew":0.0},"780":{"depth":0.0,"height":0.62847,"italic":0.08295,"skew":0.0},"79":{"depth":0.0,"height":0.68333,"italic":0.09403,"skew":0.0},"80":{"depth":0.0,"height":0.68333,"italic":0.10257,"skew":0.0},"81":{"depth":0.19444,"height":0.68333,"italic":0.09403,"skew":0.0},"82":{"depth":0.0,"height":0.68333,"italic":0.03868,"skew":0.0},"8211":{"depth":0.0,"height":0.43056,"italic":0.09208,"skew":0.0},"8212":{"depth":0.0,"height":0.43056,"italic":0.09208,"skew":0.0},"8216":{"depth":0.0,"height":0.69444,"italic":0.12417,"skew":0.0},"8217":{"depth":0.0,"height":0.69444,"italic":0.12417,"skew":0.0},"8220":{"depth":0.0,"height":0.69444,"italic":0.1685,"skew":0.0},"8221":{"depth":0.0,"height":0.69444,"italic":0.06961,"skew":0.0},"83":{"depth":0.0,"height":0.68333,"italic":0.11972,"skew":0.0},"84":{"depth":0.0,"height":0.68333,"italic":0.13305,"skew":0.0},"8463":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"85":{"depth":0.0,"height":0.68333,"italic":0.16389,"skew":0.0},"86":{"depth":0.0,"height":0.68333,"italic":0.18361,"skew":0.0},"87":{"depth":0.0,"height":0.68333,"italic":0.18361,"skew":0.0},"88":{"depth":0.0,"height":0.68333,"italic":0.15806,"skew":0.0},"89":{"depth":0.0,"height":0.68333,"italic":0.19383,"skew":0.0},"90":{"depth":0.0,"height":0.68333,"italic":0.14528,"skew":0.0},"91":{"depth":0.25,"height":0.75,"italic":0.1875,"skew":0.0},"915":{"depth":0.0,"height":0.68333,"italic":0.13305,"skew":0.0},"916":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.0},"920":{"depth":0.0,"height":0.68333,"italic":0.09403,"skew":0.0},"923":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.0},"926":{"depth":0.0,"height":0.68333,"italic":0.15294,"skew":0.0},"928":{"depth":0.0,"height":0.68333,"italic":0.16389,"skew":0.0},"93":{"depth":0.25,"height":0.75,"italic":0.10528,"skew":0.0},"931":{"depth":0.0,"height":0.68333,"italic":0.12028,"skew":0.0},"933":{"depth":0.0,"height":0.68333,"italic":0.11111,"skew":0.0},"934":{"depth":0.0,"height":0.68333,"italic":0.05986,"skew":0.0},"936":{"depth":0.0,"height":0.68333,"italic":0.11111,"skew":0.0},"937":{"depth":0.0,"height":0.68333,"italic":0.10257,"skew":0.0},"94":{"depth":0.0,"height":0.69444,"italic":0.06646,"skew":0.0},"95":{"depth":0.31,"height":0.12056,"italic":0.09208,"skew":0.0},"97":{"depth":0.0,"height":0.43056,"italic":0.07671,"skew":0.0},"98":{"depth":0.0,"height":0.69444,"italic":0.06312,"skew":0.0},"99":{"depth":0.0,"height":0.43056,"italic":0.05653,"skew":0.0}},"Main-Regular":{"32":{"depth":-0.0,"height":0.0,"italic":0,"skew":0},"160":{"depth":-0.0,"height":0.0,"italic":0,"skew":0},"8230":{"depth":-0.0,"height":0.12,"italic":0,"skew":0},"8773":{"depth":-0.022,"height":0.589,"italic":0,"skew":0},"8800":{"depth":0.215,"height":0.716,"italic":0,"skew":0},"8942":{"depth":0.03,"height":0.9,"italic":0,"skew":0},"8943":{"depth":-0.19,"height":0.31,"italic":0,"skew":0},"8945":{"depth":-0.1,"height":0.82,"italic":0,"skew":0},"100":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"101":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.0},"102":{"depth":0.0,"height":0.69444,"italic":0.07778,"skew":0.0},"10216":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"10217":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"103":{"depth":0.19444,"height":0.43056,"italic":0.01389,"skew":0.0},"104":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"105":{"depth":0.0,"height":0.66786,"italic":0.0,"skew":0.0},"106":{"depth":0.19444,"height":0.66786,"italic":0.0,"skew":0.0},"107":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"108":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"10815":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.0},"109":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.0},"10927":{"depth":0.13597,"height":0.63597,"italic":0.0,"skew":0.0},"10928":{"depth":0.13597,"height":0.63597,"italic":0.0,"skew":0.0},"110":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.0},"111":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.0},"112":{"depth":0.19444,"height":0.43056,"italic":0.0,"skew":0.0},"113":{"depth":0.19444,"height":0.43056,"italic":0.0,"skew":0.0},"114":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.0},"115":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.0},"116":{"depth":0.0,"height":0.61508,"italic":0.0,"skew":0.0},"117":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.0},"118":{"depth":0.0,"height":0.43056,"italic":0.01389,"skew":0.0},"119":{"depth":0.0,"height":0.43056,"italic":0.01389,"skew":0.0},"120":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.0},"121":{"depth":0.19444,"height":0.43056,"italic":0.01389,"skew":0.0},"122":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.0},"123":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"124":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"125":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"126":{"depth":0.35,"height":0.31786,"italic":0.0,"skew":0.0},"168":{"depth":0.0,"height":0.66786,"italic":0.0,"skew":0.0},"172":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.0},"175":{"depth":0.0,"height":0.56778,"italic":0.0,"skew":0.0},"176":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"177":{"depth":0.08333,"height":0.58333,"italic":0.0,"skew":0.0},"180":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"215":{"depth":0.08333,"height":0.58333,"italic":0.0,"skew":0.0},"247":{"depth":0.08333,"height":0.58333,"italic":0.0,"skew":0.0},"305":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.0},"33":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"34":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"35":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"36":{"depth":0.05556,"height":0.75,"italic":0.0,"skew":0.0},"37":{"depth":0.05556,"height":0.75,"italic":0.0,"skew":0.0},"38":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"39":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"40":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"41":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"42":{"depth":0.0,"height":0.75,"italic":0.0,"skew":0.0},"43":{"depth":0.08333,"height":0.58333,"italic":0.0,"skew":0.0},"44":{"depth":0.19444,"height":0.10556,"italic":0.0,"skew":0.0},"45":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.0},"46":{"depth":0.0,"height":0.10556,"italic":0.0,"skew":0.0},"47":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"48":{"depth":0.0,"height":0.64444,"italic":0.0,"skew":0.0},"49":{"depth":0.0,"height":0.64444,"italic":0.0,"skew":0.0},"50":{"depth":0.0,"height":0.64444,"italic":0.0,"skew":0.0},"51":{"depth":0.0,"height":0.64444,"italic":0.0,"skew":0.0},"52":{"depth":0.0,"height":0.64444,"italic":0.0,"skew":0.0},"53":{"depth":0.0,"height":0.64444,"italic":0.0,"skew":0.0},"54":{"depth":0.0,"height":0.64444,"italic":0.0,"skew":0.0},"55":{"depth":0.0,"height":0.64444,"italic":0.0,"skew":0.0},"56":{"depth":0.0,"height":0.64444,"italic":0.0,"skew":0.0},"567":{"depth":0.19444,"height":0.43056,"italic":0.0,"skew":0.0},"57":{"depth":0.0,"height":0.64444,"italic":0.0,"skew":0.0},"58":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.0},"59":{"depth":0.19444,"height":0.43056,"italic":0.0,"skew":0.0},"60":{"depth":0.0391,"height":0.5391,"italic":0.0,"skew":0.0},"61":{"depth":-0.13313,"height":0.36687,"italic":0.0,"skew":0.0},"62":{"depth":0.0391,"height":0.5391,"italic":0.0,"skew":0.0},"63":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"64":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"65":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.0},"66":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.0},"67":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.0},"68":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.0},"69":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.0},"70":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.0},"71":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.0},"710":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"711":{"depth":0.0,"height":0.62847,"italic":0.0,"skew":0.0},"713":{"depth":0.0,"height":0.56778,"italic":0.0,"skew":0.0},"714":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"715":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"72":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.0},"728":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"729":{"depth":0.0,"height":0.66786,"italic":0.0,"skew":0.0},"73":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.0},"730":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"732":{"depth":0.0,"height":0.66786,"italic":0.0,"skew":0.0},"74":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.0},"75":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.0},"76":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.0},"768":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"769":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"77":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.0},"770":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"771":{"depth":0.0,"height":0.66786,"italic":0.0,"skew":0.0},"772":{"depth":0.0,"height":0.56778,"italic":0.0,"skew":0.0},"774":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"775":{"depth":0.0,"height":0.66786,"italic":0.0,"skew":0.0},"776":{"depth":0.0,"height":0.66786,"italic":0.0,"skew":0.0},"778":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"779":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"78":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.0},"780":{"depth":0.0,"height":0.62847,"italic":0.0,"skew":0.0},"79":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.0},"80":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.0},"81":{"depth":0.19444,"height":0.68333,"italic":0.0,"skew":0.0},"82":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.0},"8211":{"depth":0.0,"height":0.43056,"italic":0.02778,"skew":0.0},"8212":{"depth":0.0,"height":0.43056,"italic":0.02778,"skew":0.0},"8216":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"8217":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"8220":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"8221":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"8224":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"8225":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"824":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"8242":{"depth":0.0,"height":0.55556,"italic":0.0,"skew":0.0},"83":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.0},"84":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.0},"8407":{"depth":0.0,"height":0.71444,"italic":0.15382,"skew":0.0},"8463":{"depth":0.0,"height":0.68889,"italic":0.0,"skew":0.0},"8465":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"8467":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.11111},"8472":{"depth":0.19444,"height":0.43056,"italic":0.0,"skew":0.11111},"8476":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"85":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.0},"8501":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"8592":{"depth":-0.13313,"height":0.36687,"italic":0.0,"skew":0.0},"8593":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"8594":{"depth":-0.13313,"height":0.36687,"italic":0.0,"skew":0.0},"8595":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"8596":{"depth":-0.13313,"height":0.36687,"italic":0.0,"skew":0.0},"8597":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"8598":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"8599":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"86":{"depth":0.0,"height":0.68333,"italic":0.01389,"skew":0.0},"8600":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"8601":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"8636":{"depth":-0.13313,"height":0.36687,"italic":0.0,"skew":0.0},"8637":{"depth":-0.13313,"height":0.36687,"italic":0.0,"skew":0.0},"8640":{"depth":-0.13313,"height":0.36687,"italic":0.0,"skew":0.0},"8641":{"depth":-0.13313,"height":0.36687,"italic":0.0,"skew":0.0},"8656":{"depth":-0.13313,"height":0.36687,"italic":0.0,"skew":0.0},"8657":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"8658":{"depth":-0.13313,"height":0.36687,"italic":0.0,"skew":0.0},"8659":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"8660":{"depth":-0.13313,"height":0.36687,"italic":0.0,"skew":0.0},"8661":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"87":{"depth":0.0,"height":0.68333,"italic":0.01389,"skew":0.0},"8704":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"8706":{"depth":0.0,"height":0.69444,"italic":0.05556,"skew":0.08334},"8707":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"8709":{"depth":0.05556,"height":0.75,"italic":0.0,"skew":0.0},"8711":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.0},"8712":{"depth":0.0391,"height":0.5391,"italic":0.0,"skew":0.0},"8715":{"depth":0.0391,"height":0.5391,"italic":0.0,"skew":0.0},"8722":{"depth":0.08333,"height":0.58333,"italic":0.0,"skew":0.0},"8723":{"depth":0.08333,"height":0.58333,"italic":0.0,"skew":0.0},"8725":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"8726":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"8727":{"depth":-0.03472,"height":0.46528,"italic":0.0,"skew":0.0},"8728":{"depth":-0.05555,"height":0.44445,"italic":0.0,"skew":0.0},"8729":{"depth":-0.05555,"height":0.44445,"italic":0.0,"skew":0.0},"8730":{"depth":0.2,"height":0.8,"italic":0.0,"skew":0.0},"8733":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.0},"8734":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.0},"8736":{"depth":0.0,"height":0.69224,"italic":0.0,"skew":0.0},"8739":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"8741":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"8743":{"depth":0.0,"height":0.55556,"italic":0.0,"skew":0.0},"8744":{"depth":0.0,"height":0.55556,"italic":0.0,"skew":0.0},"8745":{"depth":0.0,"height":0.55556,"italic":0.0,"skew":0.0},"8746":{"depth":0.0,"height":0.55556,"italic":0.0,"skew":0.0},"8747":{"depth":0.19444,"height":0.69444,"italic":0.11111,"skew":0.0},"8764":{"depth":-0.13313,"height":0.36687,"italic":0.0,"skew":0.0},"8768":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"8771":{"depth":-0.03625,"height":0.46375,"italic":0.0,"skew":0.0},"8776":{"depth":-0.01688,"height":0.48312,"italic":0.0,"skew":0.0},"8781":{"depth":-0.03625,"height":0.46375,"italic":0.0,"skew":0.0},"88":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.0},"8801":{"depth":-0.03625,"height":0.46375,"italic":0.0,"skew":0.0},"8804":{"depth":0.13597,"height":0.63597,"italic":0.0,"skew":0.0},"8805":{"depth":0.13597,"height":0.63597,"italic":0.0,"skew":0.0},"8810":{"depth":0.0391,"height":0.5391,"italic":0.0,"skew":0.0},"8811":{"depth":0.0391,"height":0.5391,"italic":0.0,"skew":0.0},"8826":{"depth":0.0391,"height":0.5391,"italic":0.0,"skew":0.0},"8827":{"depth":0.0391,"height":0.5391,"italic":0.0,"skew":0.0},"8834":{"depth":0.0391,"height":0.5391,"italic":0.0,"skew":0.0},"8835":{"depth":0.0391,"height":0.5391,"italic":0.0,"skew":0.0},"8838":{"depth":0.13597,"height":0.63597,"italic":0.0,"skew":0.0},"8839":{"depth":0.13597,"height":0.63597,"italic":0.0,"skew":0.0},"8846":{"depth":0.0,"height":0.55556,"italic":0.0,"skew":0.0},"8849":{"depth":0.13597,"height":0.63597,"italic":0.0,"skew":0.0},"8850":{"depth":0.13597,"height":0.63597,"italic":0.0,"skew":0.0},"8851":{"depth":0.0,"height":0.55556,"italic":0.0,"skew":0.0},"8852":{"depth":0.0,"height":0.55556,"italic":0.0,"skew":0.0},"8853":{"depth":0.08333,"height":0.58333,"italic":0.0,"skew":0.0},"8854":{"depth":0.08333,"height":0.58333,"italic":0.0,"skew":0.0},"8855":{"depth":0.08333,"height":0.58333,"italic":0.0,"skew":0.0},"8856":{"depth":0.08333,"height":0.58333,"italic":0.0,"skew":0.0},"8857":{"depth":0.08333,"height":0.58333,"italic":0.0,"skew":0.0},"8866":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"8867":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"8868":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"8869":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"89":{"depth":0.0,"height":0.68333,"italic":0.025,"skew":0.0},"8900":{"depth":-0.05555,"height":0.44445,"italic":0.0,"skew":0.0},"8901":{"depth":-0.05555,"height":0.44445,"italic":0.0,"skew":0.0},"8902":{"depth":-0.03472,"height":0.46528,"italic":0.0,"skew":0.0},"8968":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"8969":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"8970":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"8971":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"8994":{"depth":-0.14236,"height":0.35764,"italic":0.0,"skew":0.0},"8995":{"depth":-0.14236,"height":0.35764,"italic":0.0,"skew":0.0},"90":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.0},"91":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"915":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.0},"916":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.0},"92":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"920":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.0},"923":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.0},"926":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.0},"928":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.0},"93":{"depth":0.25,"height":0.75,"italic":0.0,"skew":0.0},"931":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.0},"933":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.0},"934":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.0},"936":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.0},"937":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.0},"94":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"95":{"depth":0.31,"height":0.12056,"italic":0.02778,"skew":0.0},"96":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"9651":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"9657":{"depth":-0.03472,"height":0.46528,"italic":0.0,"skew":0.0},"9661":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"9667":{"depth":-0.03472,"height":0.46528,"italic":0.0,"skew":0.0},"97":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.0},"9711":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"98":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"9824":{"depth":0.12963,"height":0.69444,"italic":0.0,"skew":0.0},"9825":{"depth":0.12963,"height":0.69444,"italic":0.0,"skew":0.0},"9826":{"depth":0.12963,"height":0.69444,"italic":0.0,"skew":0.0},"9827":{"depth":0.12963,"height":0.69444,"italic":0.0,"skew":0.0},"9837":{"depth":0.0,"height":0.75,"italic":0.0,"skew":0.0},"9838":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"9839":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"99":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.0}},"Math-BoldItalic":{"100":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"1009":{"depth":0.19444,"height":0.44444,"italic":0.0,"skew":0.0},"101":{"depth":0.0,"height":0.44444,"italic":0.0,"skew":0.0},"1013":{"depth":0.0,"height":0.44444,"italic":0.0,"skew":0.0},"102":{"depth":0.19444,"height":0.69444,"italic":0.11042,"skew":0.0},"103":{"depth":0.19444,"height":0.44444,"italic":0.03704,"skew":0.0},"104":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"105":{"depth":0.0,"height":0.69326,"italic":0.0,"skew":0.0},"106":{"depth":0.19444,"height":0.69326,"italic":0.0622,"skew":0.0},"107":{"depth":0.0,"height":0.69444,"italic":0.01852,"skew":0.0},"108":{"depth":0.0,"height":0.69444,"italic":0.0088,"skew":0.0},"109":{"depth":0.0,"height":0.44444,"italic":0.0,"skew":0.0},"110":{"depth":0.0,"height":0.44444,"italic":0.0,"skew":0.0},"111":{"depth":0.0,"height":0.44444,"italic":0.0,"skew":0.0},"112":{"depth":0.19444,"height":0.44444,"italic":0.0,"skew":0.0},"113":{"depth":0.19444,"height":0.44444,"italic":0.03704,"skew":0.0},"114":{"depth":0.0,"height":0.44444,"italic":0.03194,"skew":0.0},"115":{"depth":0.0,"height":0.44444,"italic":0.0,"skew":0.0},"116":{"depth":0.0,"height":0.63492,"italic":0.0,"skew":0.0},"117":{"depth":0.0,"height":0.44444,"italic":0.0,"skew":0.0},"118":{"depth":0.0,"height":0.44444,"italic":0.03704,"skew":0.0},"119":{"depth":0.0,"height":0.44444,"italic":0.02778,"skew":0.0},"120":{"depth":0.0,"height":0.44444,"italic":0.0,"skew":0.0},"121":{"depth":0.19444,"height":0.44444,"italic":0.03704,"skew":0.0},"122":{"depth":0.0,"height":0.44444,"italic":0.04213,"skew":0.0},"47":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"65":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"66":{"depth":0.0,"height":0.68611,"italic":0.04835,"skew":0.0},"67":{"depth":0.0,"height":0.68611,"italic":0.06979,"skew":0.0},"68":{"depth":0.0,"height":0.68611,"italic":0.03194,"skew":0.0},"69":{"depth":0.0,"height":0.68611,"italic":0.05451,"skew":0.0},"70":{"depth":0.0,"height":0.68611,"italic":0.15972,"skew":0.0},"71":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"72":{"depth":0.0,"height":0.68611,"italic":0.08229,"skew":0.0},"73":{"depth":0.0,"height":0.68611,"italic":0.07778,"skew":0.0},"74":{"depth":0.0,"height":0.68611,"italic":0.10069,"skew":0.0},"75":{"depth":0.0,"height":0.68611,"italic":0.06979,"skew":0.0},"76":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"77":{"depth":0.0,"height":0.68611,"italic":0.11424,"skew":0.0},"78":{"depth":0.0,"height":0.68611,"italic":0.11424,"skew":0.0},"79":{"depth":0.0,"height":0.68611,"italic":0.03194,"skew":0.0},"80":{"depth":0.0,"height":0.68611,"italic":0.15972,"skew":0.0},"81":{"depth":0.19444,"height":0.68611,"italic":0.0,"skew":0.0},"82":{"depth":0.0,"height":0.68611,"italic":0.00421,"skew":0.0},"83":{"depth":0.0,"height":0.68611,"italic":0.05382,"skew":0.0},"84":{"depth":0.0,"height":0.68611,"italic":0.15972,"skew":0.0},"85":{"depth":0.0,"height":0.68611,"italic":0.11424,"skew":0.0},"86":{"depth":0.0,"height":0.68611,"italic":0.25555,"skew":0.0},"87":{"depth":0.0,"height":0.68611,"italic":0.15972,"skew":0.0},"88":{"depth":0.0,"height":0.68611,"italic":0.07778,"skew":0.0},"89":{"depth":0.0,"height":0.68611,"italic":0.25555,"skew":0.0},"90":{"depth":0.0,"height":0.68611,"italic":0.06979,"skew":0.0},"915":{"depth":0.0,"height":0.68611,"italic":0.15972,"skew":0.0},"916":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"920":{"depth":0.0,"height":0.68611,"italic":0.03194,"skew":0.0},"923":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"926":{"depth":0.0,"height":0.68611,"italic":0.07458,"skew":0.0},"928":{"depth":0.0,"height":0.68611,"italic":0.08229,"skew":0.0},"931":{"depth":0.0,"height":0.68611,"italic":0.05451,"skew":0.0},"933":{"depth":0.0,"height":0.68611,"italic":0.15972,"skew":0.0},"934":{"depth":0.0,"height":0.68611,"italic":0.0,"skew":0.0},"936":{"depth":0.0,"height":0.68611,"italic":0.11653,"skew":0.0},"937":{"depth":0.0,"height":0.68611,"italic":0.04835,"skew":0.0},"945":{"depth":0.0,"height":0.44444,"italic":0.0,"skew":0.0},"946":{"depth":0.19444,"height":0.69444,"italic":0.03403,"skew":0.0},"947":{"depth":0.19444,"height":0.44444,"italic":0.06389,"skew":0.0},"948":{"depth":0.0,"height":0.69444,"italic":0.03819,"skew":0.0},"949":{"depth":0.0,"height":0.44444,"italic":0.0,"skew":0.0},"950":{"depth":0.19444,"height":0.69444,"italic":0.06215,"skew":0.0},"951":{"depth":0.19444,"height":0.44444,"italic":0.03704,"skew":0.0},"952":{"depth":0.0,"height":0.69444,"italic":0.03194,"skew":0.0},"953":{"depth":0.0,"height":0.44444,"italic":0.0,"skew":0.0},"954":{"depth":0.0,"height":0.44444,"italic":0.0,"skew":0.0},"955":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"956":{"depth":0.19444,"height":0.44444,"italic":0.0,"skew":0.0},"957":{"depth":0.0,"height":0.44444,"italic":0.06898,"skew":0.0},"958":{"depth":0.19444,"height":0.69444,"italic":0.03021,"skew":0.0},"959":{"depth":0.0,"height":0.44444,"italic":0.0,"skew":0.0},"960":{"depth":0.0,"height":0.44444,"italic":0.03704,"skew":0.0},"961":{"depth":0.19444,"height":0.44444,"italic":0.0,"skew":0.0},"962":{"depth":0.09722,"height":0.44444,"italic":0.07917,"skew":0.0},"963":{"depth":0.0,"height":0.44444,"italic":0.03704,"skew":0.0},"964":{"depth":0.0,"height":0.44444,"italic":0.13472,"skew":0.0},"965":{"depth":0.0,"height":0.44444,"italic":0.03704,"skew":0.0},"966":{"depth":0.19444,"height":0.44444,"italic":0.0,"skew":0.0},"967":{"depth":0.19444,"height":0.44444,"italic":0.0,"skew":0.0},"968":{"depth":0.19444,"height":0.69444,"italic":0.03704,"skew":0.0},"969":{"depth":0.0,"height":0.44444,"italic":0.03704,"skew":0.0},"97":{"depth":0.0,"height":0.44444,"italic":0.0,"skew":0.0},"977":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"98":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"981":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"982":{"depth":0.0,"height":0.44444,"italic":0.03194,"skew":0.0},"99":{"depth":0.0,"height":0.44444,"italic":0.0,"skew":0.0}},"Math-Italic":{"100":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.16667},"1009":{"depth":0.19444,"height":0.43056,"italic":0.0,"skew":0.08334},"101":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.05556},"1013":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.05556},"102":{"depth":0.19444,"height":0.69444,"italic":0.10764,"skew":0.16667},"103":{"depth":0.19444,"height":0.43056,"italic":0.03588,"skew":0.02778},"104":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"105":{"depth":0.0,"height":0.65952,"italic":0.0,"skew":0.0},"106":{"depth":0.19444,"height":0.65952,"italic":0.05724,"skew":0.0},"107":{"depth":0.0,"height":0.69444,"italic":0.03148,"skew":0.0},"108":{"depth":0.0,"height":0.69444,"italic":0.01968,"skew":0.08334},"109":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.0},"110":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.0},"111":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.05556},"112":{"depth":0.19444,"height":0.43056,"italic":0.0,"skew":0.08334},"113":{"depth":0.19444,"height":0.43056,"italic":0.03588,"skew":0.08334},"114":{"depth":0.0,"height":0.43056,"italic":0.02778,"skew":0.05556},"115":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.05556},"116":{"depth":0.0,"height":0.61508,"italic":0.0,"skew":0.08334},"117":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.02778},"118":{"depth":0.0,"height":0.43056,"italic":0.03588,"skew":0.02778},"119":{"depth":0.0,"height":0.43056,"italic":0.02691,"skew":0.08334},"120":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.02778},"121":{"depth":0.19444,"height":0.43056,"italic":0.03588,"skew":0.05556},"122":{"depth":0.0,"height":0.43056,"italic":0.04398,"skew":0.05556},"47":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.0},"65":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.13889},"66":{"depth":0.0,"height":0.68333,"italic":0.05017,"skew":0.08334},"67":{"depth":0.0,"height":0.68333,"italic":0.07153,"skew":0.08334},"68":{"depth":0.0,"height":0.68333,"italic":0.02778,"skew":0.05556},"69":{"depth":0.0,"height":0.68333,"italic":0.05764,"skew":0.08334},"70":{"depth":0.0,"height":0.68333,"italic":0.13889,"skew":0.08334},"71":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.08334},"72":{"depth":0.0,"height":0.68333,"italic":0.08125,"skew":0.05556},"73":{"depth":0.0,"height":0.68333,"italic":0.07847,"skew":0.11111},"74":{"depth":0.0,"height":0.68333,"italic":0.09618,"skew":0.16667},"75":{"depth":0.0,"height":0.68333,"italic":0.07153,"skew":0.05556},"76":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.02778},"77":{"depth":0.0,"height":0.68333,"italic":0.10903,"skew":0.08334},"78":{"depth":0.0,"height":0.68333,"italic":0.10903,"skew":0.08334},"79":{"depth":0.0,"height":0.68333,"italic":0.02778,"skew":0.08334},"80":{"depth":0.0,"height":0.68333,"italic":0.13889,"skew":0.08334},"81":{"depth":0.19444,"height":0.68333,"italic":0.0,"skew":0.08334},"82":{"depth":0.0,"height":0.68333,"italic":0.00773,"skew":0.08334},"83":{"depth":0.0,"height":0.68333,"italic":0.05764,"skew":0.08334},"84":{"depth":0.0,"height":0.68333,"italic":0.13889,"skew":0.08334},"85":{"depth":0.0,"height":0.68333,"italic":0.10903,"skew":0.02778},"86":{"depth":0.0,"height":0.68333,"italic":0.22222,"skew":0.0},"87":{"depth":0.0,"height":0.68333,"italic":0.13889,"skew":0.0},"88":{"depth":0.0,"height":0.68333,"italic":0.07847,"skew":0.08334},"89":{"depth":0.0,"height":0.68333,"italic":0.22222,"skew":0.0},"90":{"depth":0.0,"height":0.68333,"italic":0.07153,"skew":0.08334},"915":{"depth":0.0,"height":0.68333,"italic":0.13889,"skew":0.08334},"916":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.16667},"920":{"depth":0.0,"height":0.68333,"italic":0.02778,"skew":0.08334},"923":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.16667},"926":{"depth":0.0,"height":0.68333,"italic":0.07569,"skew":0.08334},"928":{"depth":0.0,"height":0.68333,"italic":0.08125,"skew":0.05556},"931":{"depth":0.0,"height":0.68333,"italic":0.05764,"skew":0.08334},"933":{"depth":0.0,"height":0.68333,"italic":0.13889,"skew":0.05556},"934":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.08334},"936":{"depth":0.0,"height":0.68333,"italic":0.11,"skew":0.05556},"937":{"depth":0.0,"height":0.68333,"italic":0.05017,"skew":0.08334},"945":{"depth":0.0,"height":0.43056,"italic":0.0037,"skew":0.02778},"946":{"depth":0.19444,"height":0.69444,"italic":0.05278,"skew":0.08334},"947":{"depth":0.19444,"height":0.43056,"italic":0.05556,"skew":0.0},"948":{"depth":0.0,"height":0.69444,"italic":0.03785,"skew":0.05556},"949":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.08334},"950":{"depth":0.19444,"height":0.69444,"italic":0.07378,"skew":0.08334},"951":{"depth":0.19444,"height":0.43056,"italic":0.03588,"skew":0.05556},"952":{"depth":0.0,"height":0.69444,"italic":0.02778,"skew":0.08334},"953":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.05556},"954":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.0},"955":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"956":{"depth":0.19444,"height":0.43056,"italic":0.0,"skew":0.02778},"957":{"depth":0.0,"height":0.43056,"italic":0.06366,"skew":0.02778},"958":{"depth":0.19444,"height":0.69444,"italic":0.04601,"skew":0.11111},"959":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.05556},"960":{"depth":0.0,"height":0.43056,"italic":0.03588,"skew":0.0},"961":{"depth":0.19444,"height":0.43056,"italic":0.0,"skew":0.08334},"962":{"depth":0.09722,"height":0.43056,"italic":0.07986,"skew":0.08334},"963":{"depth":0.0,"height":0.43056,"italic":0.03588,"skew":0.0},"964":{"depth":0.0,"height":0.43056,"italic":0.1132,"skew":0.02778},"965":{"depth":0.0,"height":0.43056,"italic":0.03588,"skew":0.02778},"966":{"depth":0.19444,"height":0.43056,"italic":0.0,"skew":0.08334},"967":{"depth":0.19444,"height":0.43056,"italic":0.0,"skew":0.05556},"968":{"depth":0.19444,"height":0.69444,"italic":0.03588,"skew":0.11111},"969":{"depth":0.0,"height":0.43056,"italic":0.03588,"skew":0.0},"97":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.0},"977":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.08334},"98":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"981":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.08334},"982":{"depth":0.0,"height":0.43056,"italic":0.02778,"skew":0.0},"99":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.05556}},"Math-Regular":{"100":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.16667},"1009":{"depth":0.19444,"height":0.43056,"italic":0.0,"skew":0.08334},"101":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.05556},"1013":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.05556},"102":{"depth":0.19444,"height":0.69444,"italic":0.10764,"skew":0.16667},"103":{"depth":0.19444,"height":0.43056,"italic":0.03588,"skew":0.02778},"104":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"105":{"depth":0.0,"height":0.65952,"italic":0.0,"skew":0.0},"106":{"depth":0.19444,"height":0.65952,"italic":0.05724,"skew":0.0},"107":{"depth":0.0,"height":0.69444,"italic":0.03148,"skew":0.0},"108":{"depth":0.0,"height":0.69444,"italic":0.01968,"skew":0.08334},"109":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.0},"110":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.0},"111":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.05556},"112":{"depth":0.19444,"height":0.43056,"italic":0.0,"skew":0.08334},"113":{"depth":0.19444,"height":0.43056,"italic":0.03588,"skew":0.08334},"114":{"depth":0.0,"height":0.43056,"italic":0.02778,"skew":0.05556},"115":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.05556},"116":{"depth":0.0,"height":0.61508,"italic":0.0,"skew":0.08334},"117":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.02778},"118":{"depth":0.0,"height":0.43056,"italic":0.03588,"skew":0.02778},"119":{"depth":0.0,"height":0.43056,"italic":0.02691,"skew":0.08334},"120":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.02778},"121":{"depth":0.19444,"height":0.43056,"italic":0.03588,"skew":0.05556},"122":{"depth":0.0,"height":0.43056,"italic":0.04398,"skew":0.05556},"65":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.13889},"66":{"depth":0.0,"height":0.68333,"italic":0.05017,"skew":0.08334},"67":{"depth":0.0,"height":0.68333,"italic":0.07153,"skew":0.08334},"68":{"depth":0.0,"height":0.68333,"italic":0.02778,"skew":0.05556},"69":{"depth":0.0,"height":0.68333,"italic":0.05764,"skew":0.08334},"70":{"depth":0.0,"height":0.68333,"italic":0.13889,"skew":0.08334},"71":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.08334},"72":{"depth":0.0,"height":0.68333,"italic":0.08125,"skew":0.05556},"73":{"depth":0.0,"height":0.68333,"italic":0.07847,"skew":0.11111},"74":{"depth":0.0,"height":0.68333,"italic":0.09618,"skew":0.16667},"75":{"depth":0.0,"height":0.68333,"italic":0.07153,"skew":0.05556},"76":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.02778},"77":{"depth":0.0,"height":0.68333,"italic":0.10903,"skew":0.08334},"78":{"depth":0.0,"height":0.68333,"italic":0.10903,"skew":0.08334},"79":{"depth":0.0,"height":0.68333,"italic":0.02778,"skew":0.08334},"80":{"depth":0.0,"height":0.68333,"italic":0.13889,"skew":0.08334},"81":{"depth":0.19444,"height":0.68333,"italic":0.0,"skew":0.08334},"82":{"depth":0.0,"height":0.68333,"italic":0.00773,"skew":0.08334},"83":{"depth":0.0,"height":0.68333,"italic":0.05764,"skew":0.08334},"84":{"depth":0.0,"height":0.68333,"italic":0.13889,"skew":0.08334},"85":{"depth":0.0,"height":0.68333,"italic":0.10903,"skew":0.02778},"86":{"depth":0.0,"height":0.68333,"italic":0.22222,"skew":0.0},"87":{"depth":0.0,"height":0.68333,"italic":0.13889,"skew":0.0},"88":{"depth":0.0,"height":0.68333,"italic":0.07847,"skew":0.08334},"89":{"depth":0.0,"height":0.68333,"italic":0.22222,"skew":0.0},"90":{"depth":0.0,"height":0.68333,"italic":0.07153,"skew":0.08334},"915":{"depth":0.0,"height":0.68333,"italic":0.13889,"skew":0.08334},"916":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.16667},"920":{"depth":0.0,"height":0.68333,"italic":0.02778,"skew":0.08334},"923":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.16667},"926":{"depth":0.0,"height":0.68333,"italic":0.07569,"skew":0.08334},"928":{"depth":0.0,"height":0.68333,"italic":0.08125,"skew":0.05556},"931":{"depth":0.0,"height":0.68333,"italic":0.05764,"skew":0.08334},"933":{"depth":0.0,"height":0.68333,"italic":0.13889,"skew":0.05556},"934":{"depth":0.0,"height":0.68333,"italic":0.0,"skew":0.08334},"936":{"depth":0.0,"height":0.68333,"italic":0.11,"skew":0.05556},"937":{"depth":0.0,"height":0.68333,"italic":0.05017,"skew":0.08334},"945":{"depth":0.0,"height":0.43056,"italic":0.0037,"skew":0.02778},"946":{"depth":0.19444,"height":0.69444,"italic":0.05278,"skew":0.08334},"947":{"depth":0.19444,"height":0.43056,"italic":0.05556,"skew":0.0},"948":{"depth":0.0,"height":0.69444,"italic":0.03785,"skew":0.05556},"949":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.08334},"950":{"depth":0.19444,"height":0.69444,"italic":0.07378,"skew":0.08334},"951":{"depth":0.19444,"height":0.43056,"italic":0.03588,"skew":0.05556},"952":{"depth":0.0,"height":0.69444,"italic":0.02778,"skew":0.08334},"953":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.05556},"954":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.0},"955":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"956":{"depth":0.19444,"height":0.43056,"italic":0.0,"skew":0.02778},"957":{"depth":0.0,"height":0.43056,"italic":0.06366,"skew":0.02778},"958":{"depth":0.19444,"height":0.69444,"italic":0.04601,"skew":0.11111},"959":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.05556},"960":{"depth":0.0,"height":0.43056,"italic":0.03588,"skew":0.0},"961":{"depth":0.19444,"height":0.43056,"italic":0.0,"skew":0.08334},"962":{"depth":0.09722,"height":0.43056,"italic":0.07986,"skew":0.08334},"963":{"depth":0.0,"height":0.43056,"italic":0.03588,"skew":0.0},"964":{"depth":0.0,"height":0.43056,"italic":0.1132,"skew":0.02778},"965":{"depth":0.0,"height":0.43056,"italic":0.03588,"skew":0.02778},"966":{"depth":0.19444,"height":0.43056,"italic":0.0,"skew":0.08334},"967":{"depth":0.19444,"height":0.43056,"italic":0.0,"skew":0.05556},"968":{"depth":0.19444,"height":0.69444,"italic":0.03588,"skew":0.11111},"969":{"depth":0.0,"height":0.43056,"italic":0.03588,"skew":0.0},"97":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.0},"977":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.08334},"98":{"depth":0.0,"height":0.69444,"italic":0.0,"skew":0.0},"981":{"depth":0.19444,"height":0.69444,"italic":0.0,"skew":0.08334},"982":{"depth":0.0,"height":0.43056,"italic":0.02778,"skew":0.0},"99":{"depth":0.0,"height":0.43056,"italic":0.0,"skew":0.05556}},"Size1-Regular":{"8748":{"depth":0.306,"height":0.805,"italic":0.19445,"skew":0.0},"8749":{"depth":0.306,"height":0.805,"italic":0.19445,"skew":0.0},"10216":{"depth":0.35001,"height":0.85,"italic":0.0,"skew":0.0},"10217":{"depth":0.35001,"height":0.85,"italic":0.0,"skew":0.0},"10752":{"depth":0.25001,"height":0.75,"italic":0.0,"skew":0.0},"10753":{"depth":0.25001,"height":0.75,"italic":0.0,"skew":0.0},"10754":{"depth":0.25001,"height":0.75,"italic":0.0,"skew":0.0},"10756":{"depth":0.25001,"height":0.75,"italic":0.0,"skew":0.0},"10758":{"depth":0.25001,"height":0.75,"italic":0.0,"skew":0.0},"123":{"depth":0.35001,"height":0.85,"italic":0.0,"skew":0.0},"125":{"depth":0.35001,"height":0.85,"italic":0.0,"skew":0.0},"40":{"depth":0.35001,"height":0.85,"italic":0.0,"skew":0.0},"41":{"depth":0.35001,"height":0.85,"italic":0.0,"skew":0.0},"47":{"depth":0.35001,"height":0.85,"italic":0.0,"skew":0.0},"710":{"depth":0.0,"height":0.72222,"italic":0.0,"skew":0.0},"732":{"depth":0.0,"height":0.72222,"italic":0.0,"skew":0.0},"770":{"depth":0.0,"height":0.72222,"italic":0.0,"skew":0.0},"771":{"depth":0.0,"height":0.72222,"italic":0.0,"skew":0.0},"8214":{"depth":-0.00099,"height":0.601,"italic":0.0,"skew":0.0},"8593":{"depth":1e-05,"height":0.6,"italic":0.0,"skew":0.0},"8595":{"depth":1e-05,"height":0.6,"italic":0.0,"skew":0.0},"8657":{"depth":1e-05,"height":0.6,"italic":0.0,"skew":0.0},"8659":{"depth":1e-05,"height":0.6,"italic":0.0,"skew":0.0},"8719":{"depth":0.25001,"height":0.75,"italic":0.0,"skew":0.0},"8720":{"depth":0.25001,"height":0.75,"italic":0.0,"skew":0.0},"8721":{"depth":0.25001,"height":0.75,"italic":0.0,"skew":0.0},"8730":{"depth":0.35001,"height":0.85,"italic":0.0,"skew":0.0},"8739":{"depth":-0.00599,"height":0.606,"italic":0.0,"skew":0.0},"8741":{"depth":-0.00599,"height":0.606,"italic":0.0,"skew":0.0},"8747":{"depth":0.30612,"height":0.805,"italic":0.19445,"skew":0.0},"8750":{"depth":0.30612,"height":0.805,"italic":0.19445,"skew":0.0},"8896":{"depth":0.25001,"height":0.75,"italic":0.0,"skew":0.0},"8897":{"depth":0.25001,"height":0.75,"italic":0.0,"skew":0.0},"8898":{"depth":0.25001,"height":0.75,"italic":0.0,"skew":0.0},"8899":{"depth":0.25001,"height":0.75,"italic":0.0,"skew":0.0},"8968":{"depth":0.35001,"height":0.85,"italic":0.0,"skew":0.0},"8969":{"depth":0.35001,"height":0.85,"italic":0.0,"skew":0.0},"8970":{"depth":0.35001,"height":0.85,"italic":0.0,"skew":0.0},"8971":{"depth":0.35001,"height":0.85,"italic":0.0,"skew":0.0},"91":{"depth":0.35001,"height":0.85,"italic":0.0,"skew":0.0},"9168":{"depth":-0.00099,"height":0.601,"italic":0.0,"skew":0.0},"92":{"depth":0.35001,"height":0.85,"italic":0.0,"skew":0.0},"93":{"depth":0.35001,"height":0.85,"italic":0.0,"skew":0.0}},"Size2-Regular":{"8748":{"depth":0.862,"height":1.36,"italic":0.44445,"skew":0.0},"8749":{"depth":0.862,"height":1.36,"italic":0.44445,"skew":0.0},"10216":{"depth":0.65002,"height":1.15,"italic":0.0,"skew":0.0},"10217":{"depth":0.65002,"height":1.15,"italic":0.0,"skew":0.0},"10752":{"depth":0.55001,"height":1.05,"italic":0.0,"skew":0.0},"10753":{"depth":0.55001,"height":1.05,"italic":0.0,"skew":0.0},"10754":{"depth":0.55001,"height":1.05,"italic":0.0,"skew":0.0},"10756":{"depth":0.55001,"height":1.05,"italic":0.0,"skew":0.0},"10758":{"depth":0.55001,"height":1.05,"italic":0.0,"skew":0.0},"123":{"depth":0.65002,"height":1.15,"italic":0.0,"skew":0.0},"125":{"depth":0.65002,"height":1.15,"italic":0.0,"skew":0.0},"40":{"depth":0.65002,"height":1.15,"italic":0.0,"skew":0.0},"41":{"depth":0.65002,"height":1.15,"italic":0.0,"skew":0.0},"47":{"depth":0.65002,"height":1.15,"italic":0.0,"skew":0.0},"710":{"depth":0.0,"height":0.75,"italic":0.0,"skew":0.0},"732":{"depth":0.0,"height":0.75,"italic":0.0,"skew":0.0},"770":{"depth":0.0,"height":0.75,"italic":0.0,"skew":0.0},"771":{"depth":0.0,"height":0.75,"italic":0.0,"skew":0.0},"8719":{"depth":0.55001,"height":1.05,"italic":0.0,"skew":0.0},"8720":{"depth":0.55001,"height":1.05,"italic":0.0,"skew":0.0},"8721":{"depth":0.55001,"height":1.05,"italic":0.0,"skew":0.0},"8730":{"depth":0.65002,"height":1.15,"italic":0.0,"skew":0.0},"8747":{"depth":0.86225,"height":1.36,"italic":0.44445,"skew":0.0},"8750":{"depth":0.86225,"height":1.36,"italic":0.44445,"skew":0.0},"8896":{"depth":0.55001,"height":1.05,"italic":0.0,"skew":0.0},"8897":{"depth":0.55001,"height":1.05,"italic":0.0,"skew":0.0},"8898":{"depth":0.55001,"height":1.05,"italic":0.0,"skew":0.0},"8899":{"depth":0.55001,"height":1.05,"italic":0.0,"skew":0.0},"8968":{"depth":0.65002,"height":1.15,"italic":0.0,"skew":0.0},"8969":{"depth":0.65002,"height":1.15,"italic":0.0,"skew":0.0},"8970":{"depth":0.65002,"height":1.15,"italic":0.0,"skew":0.0},"8971":{"depth":0.65002,"height":1.15,"italic":0.0,"skew":0.0},"91":{"depth":0.65002,"height":1.15,"italic":0.0,"skew":0.0},"92":{"depth":0.65002,"height":1.15,"italic":0.0,"skew":0.0},"93":{"depth":0.65002,"height":1.15,"italic":0.0,"skew":0.0}},"Size3-Regular":{"10216":{"depth":0.95003,"height":1.45,"italic":0.0,"skew":0.0},"10217":{"depth":0.95003,"height":1.45,"italic":0.0,"skew":0.0},"123":{"depth":0.95003,"height":1.45,"italic":0.0,"skew":0.0},"125":{"depth":0.95003,"height":1.45,"italic":0.0,"skew":0.0},"40":{"depth":0.95003,"height":1.45,"italic":0.0,"skew":0.0},"41":{"depth":0.95003,"height":1.45,"italic":0.0,"skew":0.0},"47":{"depth":0.95003,"height":1.45,"italic":0.0,"skew":0.0},"710":{"depth":0.0,"height":0.75,"italic":0.0,"skew":0.0},"732":{"depth":0.0,"height":0.75,"italic":0.0,"skew":0.0},"770":{"depth":0.0,"height":0.75,"italic":0.0,"skew":0.0},"771":{"depth":0.0,"height":0.75,"italic":0.0,"skew":0.0},"8730":{"depth":0.95003,"height":1.45,"italic":0.0,"skew":0.0},"8968":{"depth":0.95003,"height":1.45,"italic":0.0,"skew":0.0},"8969":{"depth":0.95003,"height":1.45,"italic":0.0,"skew":0.0},"8970":{"depth":0.95003,"height":1.45,"italic":0.0,"skew":0.0},"8971":{"depth":0.95003,"height":1.45,"italic":0.0,"skew":0.0},"91":{"depth":0.95003,"height":1.45,"italic":0.0,"skew":0.0},"92":{"depth":0.95003,"height":1.45,"italic":0.0,"skew":0.0},"93":{"depth":0.95003,"height":1.45,"italic":0.0,"skew":0.0}},"Size4-Regular":{"10216":{"depth":1.25003,"height":1.75,"italic":0.0,"skew":0.0},"10217":{"depth":1.25003,"height":1.75,"italic":0.0,"skew":0.0},"123":{"depth":1.25003,"height":1.75,"italic":0.0,"skew":0.0},"125":{"depth":1.25003,"height":1.75,"italic":0.0,"skew":0.0},"40":{"depth":1.25003,"height":1.75,"italic":0.0,"skew":0.0},"41":{"depth":1.25003,"height":1.75,"italic":0.0,"skew":0.0},"47":{"depth":1.25003,"height":1.75,"italic":0.0,"skew":0.0},"57344":{"depth":-0.00499,"height":0.605,"italic":0.0,"skew":0.0},"57345":{"depth":-0.00499,"height":0.605,"italic":0.0,"skew":0.0},"57680":{"depth":0.0,"height":0.12,"italic":0.0,"skew":0.0},"57681":{"depth":0.0,"height":0.12,"italic":0.0,"skew":0.0},"57682":{"depth":0.0,"height":0.12,"italic":0.0,"skew":0.0},"57683":{"depth":0.0,"height":0.12,"italic":0.0,"skew":0.0},"710":{"depth":0.0,"height":0.825,"italic":0.0,"skew":0.0},"732":{"depth":0.0,"height":0.825,"italic":0.0,"skew":0.0},"770":{"depth":0.0,"height":0.825,"italic":0.0,"skew":0.0},"771":{"depth":0.0,"height":0.825,"italic":0.0,"skew":0.0},"8730":{"depth":1.25003,"height":1.75,"italic":0.0,"skew":0.0},"8968":{"depth":1.25003,"height":1.75,"italic":0.0,"skew":0.0},"8969":{"depth":1.25003,"height":1.75,"italic":0.0,"skew":0.0},"8970":{"depth":1.25003,"height":1.75,"italic":0.0,"skew":0.0},"8971":{"depth":1.25003,"height":1.75,"italic":0.0,"skew":0.0},"91":{"depth":1.25003,"height":1.75,"italic":0.0,"skew":0.0},"9115":{"depth":0.64502,"height":1.155,"italic":0.0,"skew":0.0},"9116":{"depth":1e-05,"height":0.6,"italic":0.0,"skew":0.0},"9117":{"depth":0.64502,"height":1.155,"italic":0.0,"skew":0.0},"9118":{"depth":0.64502,"height":1.155,"italic":0.0,"skew":0.0},"9119":{"depth":1e-05,"height":0.6,"italic":0.0,"skew":0.0},"9120":{"depth":0.64502,"height":1.155,"italic":0.0,"skew":0.0},"9121":{"depth":0.64502,"height":1.155,"italic":0.0,"skew":0.0},"9122":{"depth":-0.00099,"height":0.601,"italic":0.0,"skew":0.0},"9123":{"depth":0.64502,"height":1.155,"italic":0.0,"skew":0.0},"9124":{"depth":0.64502,"height":1.155,"italic":0.0,"skew":0.0},"9125":{"depth":-0.00099,"height":0.601,"italic":0.0,"skew":0.0},"9126":{"depth":0.64502,"height":1.155,"italic":0.0,"skew":0.0},"9127":{"depth":1e-05,"height":0.9,"italic":0.0,"skew":0.0},"9128":{"depth":0.65002,"height":1.15,"italic":0.0,"skew":0.0},"9129":{"depth":0.90001,"height":0.0,"italic":0.0,"skew":0.0},"9130":{"depth":0.0,"height":0.3,"italic":0.0,"skew":0.0},"9131":{"depth":1e-05,"height":0.9,"italic":0.0,"skew":0.0},"9132":{"depth":0.65002,"height":1.15,"italic":0.0,"skew":0.0},"9133":{"depth":0.90001,"height":0.0,"italic":0.0,"skew":0.0},"9143":{"depth":0.88502,"height":0.915,"italic":0.0,"skew":0.0},"92":{"depth":1.25003,"height":1.75,"italic":0.0,"skew":0.0},"93":{"depth":1.25003,"height":1.75,"italic":0.0,"skew":0.0}}};

/**
 * This function is a convience function for looking up information in the
 * metricMap table. It takes a character as a string, and a style
 */
var getCharacterMetrics = function(character, style) {
    return metricMap[style][character.charCodeAt(0)];
};

module.exports = {
    metrics: metrics,
    getCharacterMetrics: getCharacterMetrics
};

},{"./Style":63}],69:[function(require,module,exports){
var utils = require("./utils");
var ParseError = require("./ParseError");

// This file contains a list of functions that we parse. The functions map
// contains the following data:

/*
 * Keys are the name of the functions to parse
 * The data contains the following keys:
 *  - numArgs: The number of arguments the function takes.
 *  - argTypes: (optional) An array corresponding to each argument of the
 *              function, giving the type of argument that should be parsed. Its
 *              length should be equal to `numArgs + numOptionalArgs`. Valid
 *              types:
 *               - "size": A size-like thing, such as "1em" or "5ex"
 *               - "color": An html color, like "#abc" or "blue"
 *               - "original": The same type as the environment that the
 *                             function being parsed is in (e.g. used for the
 *                             bodies of functions like \color where the first
 *                             argument is special and the second argument is
 *                             parsed normally)
 *              Other possible types (probably shouldn't be used)
 *               - "text": Text-like (e.g. \text)
 *               - "math": Normal math
 *              If undefined, this will be treated as an appropriate length
 *              array of "original" strings
 *  - greediness: (optional) The greediness of the function to use ungrouped
 *                arguments.
 *
 *                E.g. if you have an expression
 *                  \sqrt \frac 1 2
 *                since \frac has greediness=2 vs \sqrt's greediness=1, \frac
 *                will use the two arguments '1' and '2' as its two arguments,
 *                then that whole function will be used as the argument to
 *                \sqrt. On the other hand, the expressions
 *                  \frac \frac 1 2 3
 *                and
 *                  \frac \sqrt 1 2
 *                will fail because \frac and \frac have equal greediness
 *                and \sqrt has a lower greediness than \frac respectively. To
 *                make these parse, we would have to change them to:
 *                  \frac {\frac 1 2} 3
 *                and
 *                  \frac {\sqrt 1} 2
 *
 *                The default value is `1`
 *  - allowedInText: (optional) Whether or not the function is allowed inside
 *                   text mode (default false)
 *  - numOptionalArgs: (optional) The number of optional arguments the function
 *                     should parse. If the optional arguments aren't found,
 *                     `null` will be passed to the handler in their place.
 *                     (default 0)
 *  - handler: The function that is called to handle this function and its
 *             arguments. The arguments are:
 *              - func: the text of the function
 *              - [args]: the next arguments are the arguments to the function,
 *                        of which there are numArgs of them
 *              - positions: the positions in the overall string of the function
 *                           and the arguments. Should only be used to produce
 *                           error messages
 *             The function should return an object with the following keys:
 *              - type: The type of element that this is. This is then used in
 *                      buildTree to determine which function should be called
 *                      to build this node into a DOM node
 *             Any other data can be added to the object, which will be passed
 *             in to the function in buildTree as `group.value`.
 */

var functions = {
    // A normal square root
    "\\sqrt": {
        numArgs: 1,
        numOptionalArgs: 1,
        handler: function(func, optional, body, positions) {
            if (optional != null) {
                throw new ParseError(
                    "Optional arguments to \\sqrt aren't supported yet",
                    this.lexer, positions[1] - 1);
            }

            return {
                type: "sqrt",
                body: body
            };
        }
    },

    // Some non-mathy text
    "\\text": {
        numArgs: 1,
        argTypes: ["text"],
        greediness: 2,
        handler: function(func, body) {
            // Since the corresponding buildTree function expects a list of
            // elements, we normalize for different kinds of arguments
            // TODO(emily): maybe this should be done somewhere else
            var inner;
            if (body.type === "ordgroup") {
                inner = body.value;
            } else {
                inner = [body];
            }

            return {
                type: "text",
                body: inner
            };
        }
    },

    // A two-argument custom color
    "\\color": {
        numArgs: 2,
        allowedInText: true,
        argTypes: ["color", "original"],
        handler: function(func, color, body) {
            // Normalize the different kinds of bodies (see \text above)
            var inner;
            if (body.type === "ordgroup") {
                inner = body.value;
            } else {
                inner = [body];
            }

            return {
                type: "color",
                color: color.value,
                value: inner
            };
        }
    },

    // An overline
    "\\overline": {
        numArgs: 1,
        handler: function(func, body) {
            return {
                type: "overline",
                body: body
            };
        }
    },

    // A box of the width and height
    "\\rule": {
        numArgs: 2,
        numOptionalArgs: 1,
        argTypes: ["size", "size", "size"],
        handler: function(func, shift, width, height) {
            return {
                type: "rule",
                shift: shift && shift.value,
                width: width.value,
                height: height.value
            };
        }
    },

    // A KaTeX logo
    "\\KaTeX": {
        numArgs: 0,
        handler: function(func) {
            return {
                type: "katex"
            };
        }
    }
};

// Extra data needed for the delimiter handler down below
var delimiterSizes = {
    "\\bigl" : {type: "open",    size: 1},
    "\\Bigl" : {type: "open",    size: 2},
    "\\biggl": {type: "open",    size: 3},
    "\\Biggl": {type: "open",    size: 4},
    "\\bigr" : {type: "close",   size: 1},
    "\\Bigr" : {type: "close",   size: 2},
    "\\biggr": {type: "close",   size: 3},
    "\\Biggr": {type: "close",   size: 4},
    "\\bigm" : {type: "rel",     size: 1},
    "\\Bigm" : {type: "rel",     size: 2},
    "\\biggm": {type: "rel",     size: 3},
    "\\Biggm": {type: "rel",     size: 4},
    "\\big"  : {type: "textord", size: 1},
    "\\Big"  : {type: "textord", size: 2},
    "\\bigg" : {type: "textord", size: 3},
    "\\Bigg" : {type: "textord", size: 4}
};

var delimiters = [
    "(", ")", "[", "\\lbrack", "]", "\\rbrack",
    "\\{", "\\lbrace", "\\}", "\\rbrace",
    "\\lfloor", "\\rfloor", "\\lceil", "\\rceil",
    "<", ">", "\\langle", "\\rangle",
    "/", "\\backslash",
    "|", "\\vert", "\\|", "\\Vert",
    "\\uparrow", "\\Uparrow",
    "\\downarrow", "\\Downarrow",
    "\\updownarrow", "\\Updownarrow",
    "."
];

/*
 * This is a list of functions which each have the same function but have
 * different names so that we don't have to duplicate the data a bunch of times.
 * Each element in the list is an object with the following keys:
 *  - funcs: A list of function names to be associated with the data
 *  - data: An objecty with the same data as in each value of the `function`
 *          table above
 */
var duplicatedFunctions = [
    // Single-argument color functions
    {
        funcs: [
            "\\blue", "\\orange", "\\pink", "\\red",
            "\\green", "\\gray", "\\purple"
        ],
        data: {
            numArgs: 1,
            allowedInText: true,
            handler: function(func, body) {
                var atoms;
                if (body.type === "ordgroup") {
                    atoms = body.value;
                } else {
                    atoms = [body];
                }

                return {
                    type: "color",
                    color: "katex-" + func.slice(1),
                    value: atoms
                };
            }
        }
    },

    // There are 2 flags for operators; whether they produce limits in
    // displaystyle, and whether they are symbols and should grow in
    // displaystyle. These four groups cover the four possible choices.

    // No limits, not symbols
    {
        funcs: [
            "\\arcsin", "\\arccos", "\\arctan", "\\arg", "\\cos", "\\cosh",
            "\\cot", "\\coth", "\\csc", "\\deg", "\\dim", "\\exp", "\\hom",
            "\\ker", "\\lg", "\\ln", "\\log", "\\sec", "\\sin", "\\sinh",
            "\\tan","\\tanh"
        ],
        data: {
            numArgs: 0,
            handler: function(func) {
                return {
                    type: "op",
                    limits: false,
                    symbol: false,
                    body: func
                };
            }
        }
    },

    // Limits, not symbols
    {
        funcs: [
            "\\det", "\\gcd", "\\inf", "\\lim", "\\liminf", "\\limsup", "\\max",
            "\\min", "\\Pr", "\\sup"
        ],
        data: {
            numArgs: 0,
            handler: function(func) {
                return {
                    type: "op",
                    limits: true,
                    symbol: false,
                    body: func
                };
            }
        }
    },

    // No limits, symbols
    {
        funcs: [
            "\\int", "\\iint", "\\iiint", "\\oint"
        ],
        data: {
            numArgs: 0,
            handler: function(func) {
                return {
                    type: "op",
                    limits: false,
                    symbol: true,
                    body: func
                };
            }
        }
    },

    // Limits, symbols
    {
        funcs: [
            "\\coprod", "\\bigvee", "\\bigwedge", "\\biguplus", "\\bigcap",
            "\\bigcup", "\\intop", "\\prod", "\\sum", "\\bigotimes",
            "\\bigoplus", "\\bigodot", "\\bigsqcup", "\\smallint"
        ],
        data: {
            numArgs: 0,
            handler: function(func) {
                return {
                    type: "op",
                    limits: true,
                    symbol: true,
                    body: func
                };
            }
        }
    },

    // Fractions
    {
        funcs: [
            "\\dfrac", "\\frac", "\\tfrac",
            "\\dbinom", "\\binom", "\\tbinom"
        ],
        data: {
            numArgs: 2,
            greediness: 2,
            handler: function(func, numer, denom) {
                var hasBarLine;
                var leftDelim = null;
                var rightDelim = null;
                var size = "auto";

                switch (func) {
                    case "\\dfrac":
                    case "\\frac":
                    case "\\tfrac":
                        hasBarLine = true;
                        break;
                    case "\\dbinom":
                    case "\\binom":
                    case "\\tbinom":
                        hasBarLine = false;
                        leftDelim = "(";
                        rightDelim = ")";
                        break;
                    default:
                        throw new Error("Unrecognized genfrac command");
                }

                switch (func) {
                    case "\\dfrac":
                    case "\\dbinom":
                        size = "display";
                        break;
                    case "\\tfrac":
                    case "\\tbinom":
                        size = "text";
                        break;
                }

                return {
                    type: "genfrac",
                    numer: numer,
                    denom: denom,
                    hasBarLine: hasBarLine,
                    leftDelim: leftDelim,
                    rightDelim: rightDelim,
                    size: size
                };
            }
        }
    },

    // Left and right overlap functions
    {
        funcs: ["\\llap", "\\rlap"],
        data: {
            numArgs: 1,
            allowedInText: true,
            handler: function(func, body) {
                return {
                    type: func.slice(1),
                    body: body
                };
            }
        }
    },

    // Delimiter functions
    {
        funcs: [
            "\\bigl", "\\Bigl", "\\biggl", "\\Biggl",
            "\\bigr", "\\Bigr", "\\biggr", "\\Biggr",
            "\\bigm", "\\Bigm", "\\biggm", "\\Biggm",
            "\\big",  "\\Big",  "\\bigg",  "\\Bigg",
            "\\left", "\\right"
        ],
        data: {
            numArgs: 1,
            handler: function(func, delim, positions) {
                if (!utils.contains(delimiters, delim.value)) {
                    throw new ParseError(
                        "Invalid delimiter: '" + delim.value + "' after '" +
                            func + "'",
                        this.lexer, positions[1]);
                }

                // left and right are caught somewhere in Parser.js, which is
                // why this data doesn't match what is in buildTree
                if (func === "\\left" || func === "\\right") {
                    return {
                        type: "leftright",
                        value: delim.value
                    };
                } else {
                    return {
                        type: "delimsizing",
                        size: delimiterSizes[func].size,
                        delimType: delimiterSizes[func].type,
                        value: delim.value
                    };
                }
            }
        }
    },

    // Sizing functions (handled in Parser.js explicitly, hence no handler)
    {
        funcs: [
            "\\tiny", "\\scriptsize", "\\footnotesize", "\\small",
            "\\normalsize", "\\large", "\\Large", "\\LARGE", "\\huge", "\\Huge"
        ],
        data: {
            numArgs: 0
        }
    },

    // Style changing functions (handled in Parser.js explicitly, hence no
    // handler)
    {
        funcs: [
            "\\displaystyle", "\\textstyle", "\\scriptstyle",
            "\\scriptscriptstyle"
        ],
        data: {
            numArgs: 0
        }
    },

    // Accents
    {
        funcs: [
            "\\acute", "\\grave", "\\ddot", "\\tilde", "\\bar", "\\breve",
            "\\check", "\\hat", "\\vec", "\\dot"
            // We don't support expanding accents yet
            // "\\widetilde", "\\widehat"
        ],
        data: {
            numArgs: 1,
            handler: function(func, base) {
                return {
                    type: "accent",
                    accent: func,
                    base: base
                };
            }
        }
    },

    // Infix generalized fractions
    {
        funcs: ["\\over", "\\choose"],
        data: {
            numArgs: 0,
            handler: function (func) {
                var replaceWith;
                switch (func) {
                    case "\\over":
                        replaceWith = "\\frac";
                        break;
                    case "\\choose":
                        replaceWith = "\\binom";
                        break;
                    default:
                        throw new Error("Unrecognized infix genfrac command");
                }
                return {
                    type: "infix",
                    replaceWith: replaceWith
                };
            }
        }
    }
];

var addFuncsWithData = function(funcs, data) {
    for (var i = 0; i < funcs.length; i++) {
        functions[funcs[i]] = data;
    }
};

// Add all of the functions in duplicatedFunctions to the functions map
for (var i = 0; i < duplicatedFunctions.length; i++) {
    addFuncsWithData(duplicatedFunctions[i].funcs, duplicatedFunctions[i].data);
}

// Returns the greediness of a given function. Since greediness is optional, we
// use this function to put in the default value if it is undefined.
var getGreediness = function(func) {
    if (functions[func].greediness === undefined) {
        return 1;
    } else {
        return functions[func].greediness;
    }
};

// Set default values of functions
for (var f in functions) {
    if (functions.hasOwnProperty(f)) {
        var func = functions[f];

        functions[f] = {
            numArgs: func.numArgs,
            argTypes: func.argTypes,
            greediness: (func.greediness === undefined) ? 1 : func.greediness,
            allowedInText: func.allowedInText ? func.allowedInText : false,
            numOptionalArgs: (func.numOptionalArgs === undefined) ? 0 :
                func.numOptionalArgs,
            handler: func.handler
        };
    }
}

module.exports = {
    funcs: functions,
    getGreediness: getGreediness
};

},{"./ParseError":61,"./utils":72}],70:[function(require,module,exports){
/**
 * Provides a single function for parsing an expression using a Parser
 * TODO(emily): Remove this
 */

var Parser = require("./Parser");

/**
 * Parses an expression using a Parser, then returns the parsed result.
 */
var parseTree = function(toParse) {
    var parser = new Parser(toParse);

    return parser.parse();
};

module.exports = parseTree;

},{"./Parser":62}],71:[function(require,module,exports){
/**
 * This file holds a list of all no-argument functions and single-character
 * symbols (like 'a' or ';').
 *
 * For each of the symbols, there are three properties they can have:
 * - font (required): the font to be used for this symbol. Either "main" (the
     normal font), or "ams" (the ams fonts).
 * - group (required): the ParseNode group type the symbol should have (i.e.
     "textord", "mathord", etc).
 * - replace (optional): the character that this symbol or function should be
 *   replaced with (i.e. "\phi" has a replace value of "\u03d5", the phi
 *   character in the main font).
 *
 * The outermost map in the table indicates what mode the symbols should be
 * accepted in (e.g. "math" or "text").
 */

var symbols = {
    "math": {
        "`": {
            font: "main",
            group: "textord",
            replace: "\u2018"
        },
        "\\$": {
            font: "main",
            group: "textord",
            replace: "$"
        },
        "\\%": {
            font: "main",
            group: "textord",
            replace: "%"
        },
        "\\_": {
            font: "main",
            group: "textord",
            replace: "_"
        },
        "\\angle": {
            font: "main",
            group: "textord",
            replace: "\u2220"
        },
        "\\infty": {
            font: "main",
            group: "textord",
            replace: "\u221e"
        },
        "\\prime": {
            font: "main",
            group: "textord",
            replace: "\u2032"
        },
        "\\triangle": {
            font: "main",
            group: "textord",
            replace: "\u25b3"
        },
        "\\Gamma": {
            font: "main",
            group: "textord",
            replace: "\u0393"
        },
        "\\Delta": {
            font: "main",
            group: "textord",
            replace: "\u0394"
        },
        "\\Theta": {
            font: "main",
            group: "textord",
            replace: "\u0398"
        },
        "\\Lambda": {
            font: "main",
            group: "textord",
            replace: "\u039b"
        },
        "\\Xi": {
            font: "main",
            group: "textord",
            replace: "\u039e"
        },
        "\\Pi": {
            font: "main",
            group: "textord",
            replace: "\u03a0"
        },
        "\\Sigma": {
            font: "main",
            group: "textord",
            replace: "\u03a3"
        },
        "\\Upsilon": {
            font: "main",
            group: "textord",
            replace: "\u03a5"
        },
        "\\Phi": {
            font: "main",
            group: "textord",
            replace: "\u03a6"
        },
        "\\Psi": {
            font: "main",
            group: "textord",
            replace: "\u03a8"
        },
        "\\Omega": {
            font: "main",
            group: "textord",
            replace: "\u03a9"
        },
        "\\neg": {
            font: "main",
            group: "textord",
            replace: "\u00ac"
        },
        "\\lnot": {
            font: "main",
            group: "textord",
            replace: "\u00ac"
        },
        "\\top": {
            font: "main",
            group: "textord",
            replace: "\u22a4"
        },
        "\\bot": {
            font: "main",
            group: "textord",
            replace: "\u22a5"
        },
        "\\emptyset": {
            font: "main",
            group: "textord",
            replace: "\u2205"
        },
        "\\varnothing": {
            font: "ams",
            group: "textord",
            replace: "\u2205"
        },
        "\\alpha": {
            font: "main",
            group: "mathord",
            replace: "\u03b1"
        },
        "\\beta": {
            font: "main",
            group: "mathord",
            replace: "\u03b2"
        },
        "\\gamma": {
            font: "main",
            group: "mathord",
            replace: "\u03b3"
        },
        "\\delta": {
            font: "main",
            group: "mathord",
            replace: "\u03b4"
        },
        "\\epsilon": {
            font: "main",
            group: "mathord",
            replace: "\u03f5"
        },
        "\\zeta": {
            font: "main",
            group: "mathord",
            replace: "\u03b6"
        },
        "\\eta": {
            font: "main",
            group: "mathord",
            replace: "\u03b7"
        },
        "\\theta": {
            font: "main",
            group: "mathord",
            replace: "\u03b8"
        },
        "\\iota": {
            font: "main",
            group: "mathord",
            replace: "\u03b9"
        },
        "\\kappa": {
            font: "main",
            group: "mathord",
            replace: "\u03ba"
        },
        "\\lambda": {
            font: "main",
            group: "mathord",
            replace: "\u03bb"
        },
        "\\mu": {
            font: "main",
            group: "mathord",
            replace: "\u03bc"
        },
        "\\nu": {
            font: "main",
            group: "mathord",
            replace: "\u03bd"
        },
        "\\xi": {
            font: "main",
            group: "mathord",
            replace: "\u03be"
        },
        "\\omicron": {
            font: "main",
            group: "mathord",
            replace: "o"
        },
        "\\pi": {
            font: "main",
            group: "mathord",
            replace: "\u03c0"
        },
        "\\rho": {
            font: "main",
            group: "mathord",
            replace: "\u03c1"
        },
        "\\sigma": {
            font: "main",
            group: "mathord",
            replace: "\u03c3"
        },
        "\\tau": {
            font: "main",
            group: "mathord",
            replace: "\u03c4"
        },
        "\\upsilon": {
            font: "main",
            group: "mathord",
            replace: "\u03c5"
        },
        "\\phi": {
            font: "main",
            group: "mathord",
            replace: "\u03d5"
        },
        "\\chi": {
            font: "main",
            group: "mathord",
            replace: "\u03c7"
        },
        "\\psi": {
            font: "main",
            group: "mathord",
            replace: "\u03c8"
        },
        "\\omega": {
            font: "main",
            group: "mathord",
            replace: "\u03c9"
        },
        "\\varepsilon": {
            font: "main",
            group: "mathord",
            replace: "\u03b5"
        },
        "\\vartheta": {
            font: "main",
            group: "mathord",
            replace: "\u03d1"
        },
        "\\varpi": {
            font: "main",
            group: "mathord",
            replace: "\u03d6"
        },
        "\\varrho": {
            font: "main",
            group: "mathord",
            replace: "\u03f1"
        },
        "\\varsigma": {
            font: "main",
            group: "mathord",
            replace: "\u03c2"
        },
        "\\varphi": {
            font: "main",
            group: "mathord",
            replace: "\u03c6"
        },
        "*": {
            font: "main",
            group: "bin",
            replace: "\u2217"
        },
        "+": {
            font: "main",
            group: "bin"
        },
        "-": {
            font: "main",
            group: "bin",
            replace: "\u2212"
        },
        "\\cdot": {
            font: "main",
            group: "bin",
            replace: "\u22c5"
        },
        "\\circ": {
            font: "main",
            group: "bin",
            replace: "\u2218"
        },
        "\\div": {
            font: "main",
            group: "bin",
            replace: "\u00f7"
        },
        "\\pm": {
            font: "main",
            group: "bin",
            replace: "\u00b1"
        },
        "\\times": {
            font: "main",
            group: "bin",
            replace: "\u00d7"
        },
        "\\cap": {
            font: "main",
            group: "bin",
            replace: "\u2229"
        },
        "\\cup": {
            font: "main",
            group: "bin",
            replace: "\u222a"
        },
        "\\setminus": {
            font: "main",
            group: "bin",
            replace: "\u2216"
        },
        "\\land": {
            font: "main",
            group: "bin",
            replace: "\u2227"
        },
        "\\lor": {
            font: "main",
            group: "bin",
            replace: "\u2228"
        },
        "\\wedge": {
            font: "main",
            group: "bin",
            replace: "\u2227"
        },
        "\\vee": {
            font: "main",
            group: "bin",
            replace: "\u2228"
        },
        "\\surd": {
            font: "main",
            group: "textord",
            replace: "\u221a"
        },
        "(": {
            font: "main",
            group: "open"
        },
        "[": {
            font: "main",
            group: "open"
        },
        "\\langle": {
            font: "main",
            group: "open",
            replace: "\u27e8"
        },
        "\\lvert": {
            font: "main",
            group: "open",
            replace: "\u2223"
        },
        ")": {
            font: "main",
            group: "close"
        },
        "]": {
            font: "main",
            group: "close"
        },
        "?": {
            font: "main",
            group: "close"
        },
        "!": {
            font: "main",
            group: "close"
        },
        "\\rangle": {
            font: "main",
            group: "close",
            replace: "\u27e9"
        },
        "\\rvert": {
            font: "main",
            group: "close",
            replace: "\u2223"
        },
        "=": {
            font: "main",
            group: "rel"
        },
        "<": {
            font: "main",
            group: "rel"
        },
        ">": {
            font: "main",
            group: "rel"
        },
        ":": {
            font: "main",
            group: "rel"
        },
        "\\approx": {
            font: "main",
            group: "rel",
            replace: "\u2248"
        },
        "\\cong": {
            font: "main",
            group: "rel",
            replace: "\u2245"
        },
        "\\ge": {
            font: "main",
            group: "rel",
            replace: "\u2265"
        },
        "\\geq": {
            font: "main",
            group: "rel",
            replace: "\u2265"
        },
        "\\gets": {
            font: "main",
            group: "rel",
            replace: "\u2190"
        },
        "\\in": {
            font: "main",
            group: "rel",
            replace: "\u2208"
        },
        "\\notin": {
            font: "main",
            group: "rel",
            replace: "\u2209"
        },
        "\\subset": {
            font: "main",
            group: "rel",
            replace: "\u2282"
        },
        "\\supset": {
            font: "main",
            group: "rel",
            replace: "\u2283"
        },
        "\\subseteq": {
            font: "main",
            group: "rel",
            replace: "\u2286"
        },
        "\\supseteq": {
            font: "main",
            group: "rel",
            replace: "\u2287"
        },
        "\\nsubseteq": {
            font: "ams",
            group: "rel",
            replace: "\u2288"
        },
        "\\nsupseteq": {
            font: "ams",
            group: "rel",
            replace: "\u2289"
        },
        "\\models": {
            font: "main",
            group: "rel",
            replace: "\u22a8"
        },
        "\\leftarrow": {
            font: "main",
            group: "rel",
            replace: "\u2190"
        },
        "\\le": {
            font: "main",
            group: "rel",
            replace: "\u2264"
        },
        "\\leq": {
            font: "main",
            group: "rel",
            replace: "\u2264"
        },
        "\\ne": {
            font: "main",
            group: "rel",
            replace: "\u2260"
        },
        "\\neq": {
            font: "main",
            group: "rel",
            replace: "\u2260"
        },
        "\\rightarrow": {
            font: "main",
            group: "rel",
            replace: "\u2192"
        },
        "\\to": {
            font: "main",
            group: "rel",
            replace: "\u2192"
        },
        "\\ngeq": {
            font: "ams",
            group: "rel",
            replace: "\u2271"
        },
        "\\nleq": {
            font: "ams",
            group: "rel",
            replace: "\u2270"
        },
        "\\!": {
            font: "main",
            group: "spacing"
        },
        "\\ ": {
            font: "main",
            group: "spacing",
            replace: "\u00a0"
        },
        "~": {
            font: "main",
            group: "spacing",
            replace: "\u00a0"
        },
        "\\,": {
            font: "main",
            group: "spacing"
        },
        "\\:": {
            font: "main",
            group: "spacing"
        },
        "\\;": {
            font: "main",
            group: "spacing"
        },
        "\\enspace": {
            font: "main",
            group: "spacing"
        },
        "\\qquad": {
            font: "main",
            group: "spacing"
        },
        "\\quad": {
            font: "main",
            group: "spacing"
        },
        "\\space": {
            font: "main",
            group: "spacing",
            replace: "\u00a0"
        },
        ",": {
            font: "main",
            group: "punct"
        },
        ";": {
            font: "main",
            group: "punct"
        },
        "\\colon": {
            font: "main",
            group: "punct",
            replace: ":"
        },
        "\\barwedge": {
            font: "ams",
            group: "textord",
            replace: "\u22bc"
        },
        "\\veebar": {
            font: "ams",
            group: "textord",
            replace: "\u22bb"
        },
        "\\odot": {
            font: "main",
            group: "textord",
            replace: "\u2299"
        },
        "\\oplus": {
            font: "main",
            group: "textord",
            replace: "\u2295"
        },
        "\\otimes": {
            font: "main",
            group: "textord",
            replace: "\u2297"
        },
        "\\partial":{
            font: "main",
            group: "textord",
            replace: "\u2202"
        },
        "\\oslash": {
            font: "main",
            group: "textord",
            replace: "\u2298"
        },
        "\\circledcirc": {
            font: "ams",
            group: "textord",
            replace: "\u229a"
        },
        "\\boxdot": {
            font: "ams",
            group: "textord",
            replace: "\u22a1"
        },
        "\\bigtriangleup": {
            font: "main",
            group: "textord",
            replace: "\u25b3"
        },
        "\\bigtriangledown": {
            font: "main",
            group: "textord",
            replace: "\u25bd"
        },
        "\\dagger": {
            font: "main",
            group: "textord",
            replace: "\u2020"
        },
        "\\diamond": {
            font: "main",
            group: "textord",
            replace: "\u22c4"
        },
        "\\star": {
            font: "main",
            group: "textord",
            replace: "\u22c6"
        },
        "\\triangleleft": {
            font: "main",
            group: "textord",
            replace: "\u25c3"
        },
        "\\triangleright": {
            font: "main",
            group: "textord",
            replace: "\u25b9"
        },
        "\\{": {
            font: "main",
            group: "open",
            replace: "{"
        },
        "\\}": {
            font: "main",
            group: "close",
            replace: "}"
        },
        "\\lbrace": {
            font: "main",
            group: "open",
            replace: "{"
        },
        "\\rbrace": {
            font: "main",
            group: "close",
            replace: "}"
        },
        "\\lbrack": {
            font: "main",
            group: "open",
            replace: "["
        },
        "\\rbrack": {
            font: "main",
            group: "close",
            replace: "]"
        },
        "\\lfloor": {
            font: "main",
            group: "open",
            replace: "\u230a"
        },
        "\\rfloor": {
            font: "main",
            group: "close",
            replace: "\u230b"
        },
        "\\lceil": {
            font: "main",
            group: "open",
            replace: "\u2308"
        },
        "\\rceil": {
            font: "main",
            group: "close",
            replace: "\u2309"
        },
        "\\backslash": {
            font: "main",
            group: "textord",
            replace: "\\"
        },
        "|": {
            font: "main",
            group: "textord",
            replace: "\u2223"
        },
        "\\vert": {
            font: "main",
            group: "textord",
            replace: "\u2223"
        },
        "\\|": {
            font: "main",
            group: "textord",
            replace: "\u2225"
        },
        "\\Vert": {
            font: "main",
            group: "textord",
            replace: "\u2225"
        },
        "\\uparrow": {
            font: "main",
            group: "textord",
            replace: "\u2191"
        },
        "\\Uparrow": {
            font: "main",
            group: "textord",
            replace: "\u21d1"
        },
        "\\downarrow": {
            font: "main",
            group: "textord",
            replace: "\u2193"
        },
        "\\Downarrow": {
            font: "main",
            group: "textord",
            replace: "\u21d3"
        },
        "\\updownarrow": {
            font: "main",
            group: "textord",
            replace: "\u2195"
        },
        "\\Updownarrow": {
            font: "main",
            group: "textord",
            replace: "\u21d5"
        },
        "\\coprod": {
            font: "math",
            group: "op",
            replace: "\u2210"
        },
        "\\bigvee": {
            font: "math",
            group: "op",
            replace: "\u22c1"
        },
        "\\bigwedge": {
            font: "math",
            group: "op",
            replace: "\u22c0"
        },
        "\\biguplus": {
            font: "math",
            group: "op",
            replace: "\u2a04"
        },
        "\\bigcap": {
            font: "math",
            group: "op",
            replace: "\u22c2"
        },
        "\\bigcup": {
            font: "math",
            group: "op",
            replace: "\u22c3"
        },
        "\\int": {
            font: "math",
            group: "op",
            replace: "\u222b"
        },
        "\\intop": {
            font: "math",
            group: "op",
            replace: "\u222b"
        },
        "\\iint": {
            font: "math",
            group: "op",
            replace: "\u222c"
        },
        "\\iiint": {
            font: "math",
            group: "op",
            replace: "\u222d"
        },
        "\\prod": {
            font: "math",
            group: "op",
            replace: "\u220f"
        },
        "\\sum": {
            font: "math",
            group: "op",
            replace: "\u2211"
        },
        "\\bigotimes": {
            font: "math",
            group: "op",
            replace: "\u2a02"
        },
        "\\bigoplus": {
            font: "math",
            group: "op",
            replace: "\u2a01"
        },
        "\\bigodot": {
            font: "math",
            group: "op",
            replace: "\u2a00"
        },
        "\\oint": {
            font: "math",
            group: "op",
            replace: "\u222e"
        },
        "\\bigsqcup": {
            font: "math",
            group: "op",
            replace: "\u2a06"
        },
        "\\smallint": {
            font: "math",
            group: "op",
            replace: "\u222b"
        },
        "\\ldots": {
            font: "main",
            group: "punct",
            replace: "\u2026"
        },
        "\\cdots": {
            font: "main",
            group: "inner",
            replace: "\u22ef"
        },
        "\\ddots": {
            font: "main",
            group: "inner",
            replace: "\u22f1"
        },
        "\\vdots": {
            font: "main",
            group: "textord",
            replace: "\u22ee"
        },
        "\\acute": {
            font: "main",
            group: "accent",
            replace: "\u00b4"
        },
        "\\grave": {
            font: "main",
            group: "accent",
            replace: "\u0060"
        },
        "\\ddot": {
            font: "main",
            group: "accent",
            replace: "\u00a8"
        },
        "\\tilde": {
            font: "main",
            group: "accent",
            replace: "\u007e"
        },
        "\\bar": {
            font: "main",
            group: "accent",
            replace: "\u00af"
        },
        "\\breve": {
            font: "main",
            group: "accent",
            replace: "\u02d8"
        },
        "\\check": {
            font: "main",
            group: "accent",
            replace: "\u02c7"
        },
        "\\hat": {
            font: "main",
            group: "accent",
            replace: "\u005e"
        },
        "\\vec": {
            font: "main",
            group: "accent",
            replace: "\u20d7"
        },
        "\\dot": {
            font: "main",
            group: "accent",
            replace: "\u02d9"
        }
    },
    "text": {
        "\\ ": {
            font: "main",
            group: "spacing",
            replace: "\u00a0"
        },
        " ": {
            font: "main",
            group: "spacing",
            replace: "\u00a0"
        },
        "~": {
            font: "main",
            group: "spacing",
            replace: "\u00a0"
        }
    }
};

// There are lots of symbols which are the same, so we add them in afterwards.

// All of these are textords in math mode
var mathTextSymbols = "0123456789/@.\"";
for (var i = 0; i < mathTextSymbols.length; i++) {
    var ch = mathTextSymbols.charAt(i);
    symbols.math[ch] = {
        font: "main",
        group: "textord"
    };
}

// All of these are textords in text mode
var textSymbols = "0123456789`!@*()-=+[]'\";:?/.,";
for (var i = 0; i < textSymbols.length; i++) {
    var ch = textSymbols.charAt(i);
    symbols.text[ch] = {
        font: "main",
        group: "textord"
    };
}

// All of these are textords in text mode, and mathords in math mode
var letters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
for (var i = 0; i < letters.length; i++) {
    var ch = letters.charAt(i);
    symbols.math[ch] = {
        font: "main",
        group: "mathord"
    };
    symbols.text[ch] = {
        font: "main",
        group: "textord"
    };
}

module.exports = symbols;

},{}],72:[function(require,module,exports){
/**
 * This file contains a list of utility functions which are useful in other
 * files.
 */

/**
 * Provide an `indexOf` function which works in IE8, but defers to native if
 * possible.
 */
var nativeIndexOf = Array.prototype.indexOf;
var indexOf = function(list, elem) {
    if (list == null) {
        return -1;
    }
    if (nativeIndexOf && list.indexOf === nativeIndexOf) {
        return list.indexOf(elem);
    }
    var i = 0, l = list.length;
    for (; i < l; i++) {
        if (list[i] === elem) {
            return i;
        }
    }
    return -1;
};

/**
 * Return whether an element is contained in a list
 */
var contains = function(list, elem) {
    return indexOf(list, elem) !== -1;
};

// hyphenate and escape adapted from Facebook's React under Apache 2 license

var uppercase = /([A-Z])/g;
var hyphenate = function(str) {
    return str.replace(uppercase, "-$1").toLowerCase();
};

var ESCAPE_LOOKUP = {
  "&": "&amp;",
  ">": "&gt;",
  "<": "&lt;",
  "\"": "&quot;",
  "'": "&#x27;"
};

var ESCAPE_REGEX = /[&><"']/g;

function escaper(match) {
  return ESCAPE_LOOKUP[match];
}

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escape(text) {
  return ("" + text).replace(ESCAPE_REGEX, escaper);
}

/**
 * A function to set the text content of a DOM element in all supported
 * browsers. Note that we don't define this if there is no document.
 */
var setTextContent;
if (typeof document !== "undefined") {
    var testNode = document.createElement("span");
    if ("textContent" in testNode) {
        setTextContent = function(node, text) {
            node.textContent = text;
        };
    } else {
        setTextContent = function(node, text) {
            node.innerText = text;
        };
    }
}

/**
 * A function to clear a node.
 */
function clearNode(node) {
    setTextContent(node, "");
}

module.exports = {
    contains: contains,
    escape: escape,
    hyphenate: hyphenate,
    indexOf: indexOf,
    setTextContent: setTextContent,
    clearNode: clearNode
};

},{}],73:[function(require,module,exports){
"use strict";

var Promise = require("bluebird");
var React = require("react/addons");
var PT = React.PropTypes;

module.exports = function (options) {
  if ("function" === typeof options) {
    options = {
      storeAttrs: options };
  }

  var pluginUpdates = [];

  var plugin = {
    propTypes: {
      store: PT.object.isRequired },

    getInitialState: function getInitialState() {
      var state = options.storeAttrs.call(this, this.props.store.getters, this.props);
      var extra;
      if (options.initStoreState) {
        extra = options.initStoreState.call(this, state, this.props.store.getters, this.props);
        for (var name in extra) state[name] = extra[name];
      }
      for (var i = 0; i < pluginUpdates.length; i++) {
        extra = pluginUpdates[i].call(this, state, this.props.store.getters, this.props);
        for (name in extra) state[name] = extra[name];
      }
      return state;
    },

    listen: function listen() {
      var changes = [].slice.call(arguments);
      if (arguments.length === 1 && Array.isArray(arguments[0])) {
        changes = arguments[0];
      }

      pluginUpdates = [];
      if (this.props.plugins) {
        this.props.plugins.forEach(function (plugin) {
          if (!plugin.listener) return;
          if (plugin.listener.updateStoreState) {
            pluginUpdates.push(plugin.listener.updateStoreState);
          }
          if (plugin.listener.changes) {
            changes = changes.concat(plugin.listener.changes);
          }
        });
      }

      this.props.store.on(changes, this._gotChanges);
      // save it for later so we can remove the listener on unmount
      if (!this._flux) this._flux = [];
      this._flux.push([changes, this._gotChanges]);
    },

    _gotChanges: function _gotChanges() {
      // if DEBUG
      var state = options.storeAttrs.call(this, this.props.store.getters, this.props);
      var extra, name;
      if (options.updateStoreState) {
        extra = options.updateStoreState.call(this, state, this.props.store.getters, this.props);
        for (name in extra) state[name] = extra[name];
      }
      for (var i = 0; i < pluginUpdates.length; i++) {
        extra = pluginUpdates[i].call(this, state, this.props.store.getters, this.props);
        for (name in extra) state[name] = extra[name];
      }
      if (window.DEBUG_CHANGES) {
        console.log("got changes", state);
      }
      var p = Promise.pending();
      this.setState(state, function () {
        p.resolve();
      });
      return p;
    },

    _stopListening: function _stopListening(store) {
      store = store || this.props.store;
      for (var i = 0; i < this._flux.length; i++) {
        store.off(this._flux[i][0], this._flux[i][1]);
      }
      this._flux = null;
    },

    componentWillUnmount: function componentWillUnmount() {
      if (!this._flux) {
        return;
      }this._stopListening();
    } };

  if (options.shouldGetNew) {
    plugin.componentWillReceiveProps = function (nextProps) {
      if (options.shouldGetNew.call(this, nextProps)) {
        if (options.getListeners) {
          this._stopListening();
          this.listen(options.getListeners(nextProps, nextProps.store.events));
        }
        var state = options.storeAttrs.call(this, nextProps.store.getters, nextProps);
        var extra;
        if (options.initStoreState) {
          extra = options.initStoreState.call(this, state, nextProps.store.getters, nextProps);
          for (var name in extra) state[name] = extra[name];
        }
        this.setState(state);
      }
    };
  }

  if (options.getListeners) {
    plugin.componentWillMount = function () {
      this.listen(options.getListeners(this.props, this.props.store.events));
    };
    plugin.componentDidUpdate = function (prevProps) {
      if (this.props.store !== prevProps.store) {
        this._stopListening(prevProps.store);
        this.listen(options.getListeners(this.props, this.props.store.events));
      }
    };
  }
  return plugin;
};

},{"bluebird":76,"react/addons":"react/addons"}],74:[function(require,module,exports){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
"use strict";
module.exports = function(Promise, Promise$_CreatePromiseArray, PromiseArray) {

var SomePromiseArray = require("./some_promise_array.js")(PromiseArray);
function Promise$_Any(promises, useBound) {
    var ret = Promise$_CreatePromiseArray(
        promises,
        SomePromiseArray,
        useBound === true && promises._isBound()
            ? promises._boundTo
            : void 0
   );
    var promise = ret.promise();
    if (promise.isRejected()) {
        return promise;
    }
    ret.setHowMany(1);
    ret.setUnwrap();
    ret.init();
    return promise;
}

Promise.any = function Promise$Any(promises) {
    return Promise$_Any(promises, false);
};

Promise.prototype.any = function Promise$any() {
    return Promise$_Any(this, true);
};

};

},{"./some_promise_array.js":106}],75:[function(require,module,exports){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
"use strict";
var schedule = require("./schedule.js");
var Queue = require("./queue.js");
var errorObj = require("./util.js").errorObj;
var tryCatch1 = require("./util.js").tryCatch1;
var process = require("./global.js").process;

function Async() {
    this._isTickUsed = false;
    this._length = 0;
    this._lateBuffer = new Queue();
    this._functionBuffer = new Queue(25000 * 3);
    var self = this;
    this.consumeFunctionBuffer = function Async$consumeFunctionBuffer() {
        self._consumeFunctionBuffer();
    };
}

Async.prototype.haveItemsQueued = function Async$haveItemsQueued() {
    return this._length > 0;
};

Async.prototype.invokeLater = function Async$invokeLater(fn, receiver, arg) {
    if (process !== void 0 &&
        process.domain != null &&
        !fn.domain) {
        fn = process.domain.bind(fn);
    }
    this._lateBuffer.push(fn, receiver, arg);
    this._queueTick();
};

Async.prototype.invoke = function Async$invoke(fn, receiver, arg) {
    if (process !== void 0 &&
        process.domain != null &&
        !fn.domain) {
        fn = process.domain.bind(fn);
    }
    var functionBuffer = this._functionBuffer;
    functionBuffer.push(fn, receiver, arg);
    this._length = functionBuffer.length();
    this._queueTick();
};

Async.prototype._consumeFunctionBuffer =
function Async$_consumeFunctionBuffer() {
    var functionBuffer = this._functionBuffer;
    while(functionBuffer.length() > 0) {
        var fn = functionBuffer.shift();
        var receiver = functionBuffer.shift();
        var arg = functionBuffer.shift();
        fn.call(receiver, arg);
    }
    this._reset();
    this._consumeLateBuffer();
};

Async.prototype._consumeLateBuffer = function Async$_consumeLateBuffer() {
    var buffer = this._lateBuffer;
    while(buffer.length() > 0) {
        var fn = buffer.shift();
        var receiver = buffer.shift();
        var arg = buffer.shift();
        var res = tryCatch1(fn, receiver, arg);
        if (res === errorObj) {
            this._queueTick();
            if (fn.domain != null) {
                fn.domain.emit("error", res.e);
            }
            else {
                throw res.e;
            }
        }
    }
};

Async.prototype._queueTick = function Async$_queue() {
    if (!this._isTickUsed) {
        schedule(this.consumeFunctionBuffer);
        this._isTickUsed = true;
    }
};

Async.prototype._reset = function Async$_reset() {
    this._isTickUsed = false;
    this._length = 0;
};

module.exports = new Async();

},{"./global.js":88,"./queue.js":99,"./schedule.js":102,"./util.js":110}],76:[function(require,module,exports){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
"use strict";
var Promise = require("./promise.js")();
module.exports = Promise;
},{"./promise.js":92}],77:[function(require,module,exports){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
"use strict";
module.exports = function(Promise) {
Promise.prototype.call = function Promise$call(propertyName) {
    var $_len = arguments.length;var args = new Array($_len - 1); for(var $_i = 1; $_i < $_len; ++$_i) {args[$_i - 1] = arguments[$_i];}

    return this._then(function(obj) {
            return obj[propertyName].apply(obj, args);
        },
        void 0,
        void 0,
        void 0,
        void 0
   );
};

function Promise$getter(obj) {
    var prop = typeof this === "string"
        ? this
        : ("" + this);
    return obj[prop];
}
Promise.prototype.get = function Promise$get(propertyName) {
    return this._then(
        Promise$getter,
        void 0,
        void 0,
        propertyName,
        void 0
   );
};
};

},{}],78:[function(require,module,exports){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
"use strict";
module.exports = function(Promise, INTERNAL) {
var errors = require("./errors.js");
var async = require("./async.js");
var CancellationError = errors.CancellationError;

Promise.prototype._cancel = function Promise$_cancel() {
    if (!this.isCancellable()) return this;
    var parent;
    var promiseToReject = this;
    while ((parent = promiseToReject._cancellationParent) !== void 0 &&
        parent.isCancellable()) {
        promiseToReject = parent;
    }
    var err = new CancellationError();
    promiseToReject._attachExtraTrace(err);
    promiseToReject._rejectUnchecked(err);
};

Promise.prototype.cancel = function Promise$cancel() {
    if (!this.isCancellable()) return this;
    async.invokeLater(this._cancel, this, void 0);
    return this;
};

Promise.prototype.cancellable = function Promise$cancellable() {
    if (this._cancellable()) return this;
    this._setCancellable();
    this._cancellationParent = void 0;
    return this;
};

Promise.prototype.uncancellable = function Promise$uncancellable() {
    var ret = new Promise(INTERNAL);
    ret._setTrace(this);
    ret._follow(this);
    ret._unsetCancellable();
    if (this._isBound()) ret._setBoundTo(this._boundTo);
    return ret;
};

Promise.prototype.fork =
function Promise$fork(didFulfill, didReject, didProgress) {
    var ret = this._then(didFulfill, didReject, didProgress,
                         void 0, void 0);

    ret._setCancellable();
    ret._cancellationParent = void 0;
    return ret;
};
};

},{"./async.js":75,"./errors.js":82}],79:[function(require,module,exports){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
"use strict";
module.exports = function() {
var inherits = require("./util.js").inherits;
var defineProperty = require("./es5.js").defineProperty;

var rignore = new RegExp(
    "\\b(?:[a-zA-Z0-9.]+\\$_\\w+|" +
    "tryCatch(?:1|2|Apply)|new \\w*PromiseArray|" +
    "\\w*PromiseArray\\.\\w*PromiseArray|" +
    "setTimeout|CatchFilter\\$_\\w+|makeNodePromisified|processImmediate|" +
    "process._tickCallback|nextTick|Async\\$\\w+)\\b"
);

var rtraceline = null;
var formatStack = null;

function formatNonError(obj) {
    var str;
    if (typeof obj === "function") {
        str = "[function " +
            (obj.name || "anonymous") +
            "]";
    }
    else {
        str = obj.toString();
        var ruselessToString = /\[object [a-zA-Z0-9$_]+\]/;
        if (ruselessToString.test(str)) {
            try {
                var newStr = JSON.stringify(obj);
                str = newStr;
            }
            catch(e) {

            }
        }
        if (str.length === 0) {
            str = "(empty array)";
        }
    }
    return ("(<" + snip(str) + ">, no stack trace)");
}

function snip(str) {
    var maxChars = 41;
    if (str.length < maxChars) {
        return str;
    }
    return str.substr(0, maxChars - 3) + "...";
}

function CapturedTrace(ignoreUntil, isTopLevel) {
    this.captureStackTrace(CapturedTrace, isTopLevel);

}
inherits(CapturedTrace, Error);

CapturedTrace.prototype.captureStackTrace =
function CapturedTrace$captureStackTrace(ignoreUntil, isTopLevel) {
    captureStackTrace(this, ignoreUntil, isTopLevel);
};

CapturedTrace.possiblyUnhandledRejection =
function CapturedTrace$PossiblyUnhandledRejection(reason) {
    if (typeof console === "object") {
        var message;
        if (typeof reason === "object" || typeof reason === "function") {
            var stack = reason.stack;
            message = "Possibly unhandled " + formatStack(stack, reason);
        }
        else {
            message = "Possibly unhandled " + String(reason);
        }
        if (typeof console.error === "function" ||
            typeof console.error === "object") {
            console.error(message);
        }
        else if (typeof console.log === "function" ||
            typeof console.log === "object") {
            console.log(message);
        }
    }
};

CapturedTrace.combine = function CapturedTrace$Combine(current, prev) {
    var curLast = current.length - 1;
    for (var i = prev.length - 1; i >= 0; --i) {
        var line = prev[i];
        if (current[curLast] === line) {
            current.pop();
            curLast--;
        }
        else {
            break;
        }
    }

    current.push("From previous event:");
    var lines = current.concat(prev);

    var ret = [];

    for (var i = 0, len = lines.length; i < len; ++i) {

        if ((rignore.test(lines[i]) ||
            (i > 0 && !rtraceline.test(lines[i])) &&
            lines[i] !== "From previous event:")
       ) {
            continue;
        }
        ret.push(lines[i]);
    }
    return ret;
};

CapturedTrace.isSupported = function CapturedTrace$IsSupported() {
    return typeof captureStackTrace === "function";
};

var captureStackTrace = (function stackDetection() {
    if (typeof Error.stackTraceLimit === "number" &&
        typeof Error.captureStackTrace === "function") {
        rtraceline = /^\s*at\s*/;
        formatStack = function(stack, error) {
            if (typeof stack === "string") return stack;

            if (error.name !== void 0 &&
                error.message !== void 0) {
                return error.name + ". " + error.message;
            }
            return formatNonError(error);


        };
        var captureStackTrace = Error.captureStackTrace;
        return function CapturedTrace$_captureStackTrace(
            receiver, ignoreUntil) {
            captureStackTrace(receiver, ignoreUntil);
        };
    }
    var err = new Error();

    if (typeof err.stack === "string" &&
        typeof "".startsWith === "function" &&
        (err.stack.startsWith("stackDetection@")) &&
        stackDetection.name === "stackDetection") {

        defineProperty(Error, "stackTraceLimit", {
            writable: true,
            enumerable: false,
            configurable: false,
            value: 25
        });
        rtraceline = /@/;
        var rline = /[@\n]/;

        formatStack = function(stack, error) {
            if (typeof stack === "string") {
                return (error.name + ". " + error.message + "\n" + stack);
            }

            if (error.name !== void 0 &&
                error.message !== void 0) {
                return error.name + ". " + error.message;
            }
            return formatNonError(error);
        };

        return function captureStackTrace(o) {
            var stack = new Error().stack;
            var split = stack.split(rline);
            var len = split.length;
            var ret = "";
            for (var i = 0; i < len; i += 2) {
                ret += split[i];
                ret += "@";
                ret += split[i + 1];
                ret += "\n";
            }
            o.stack = ret;
        };
    }
    else {
        formatStack = function(stack, error) {
            if (typeof stack === "string") return stack;

            if ((typeof error === "object" ||
                typeof error === "function") &&
                error.name !== void 0 &&
                error.message !== void 0) {
                return error.name + ". " + error.message;
            }
            return formatNonError(error);
        };

        return null;
    }
})();

return CapturedTrace;
};

},{"./es5.js":84,"./util.js":110}],80:[function(require,module,exports){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
"use strict";
module.exports = function(NEXT_FILTER) {
var util = require("./util.js");
var errors = require("./errors.js");
var tryCatch1 = util.tryCatch1;
var errorObj = util.errorObj;
var keys = require("./es5.js").keys;
var TypeError = errors.TypeError;

function CatchFilter(instances, callback, promise) {
    this._instances = instances;
    this._callback = callback;
    this._promise = promise;
}

function CatchFilter$_safePredicate(predicate, e) {
    var safeObject = {};
    var retfilter = tryCatch1(predicate, safeObject, e);

    if (retfilter === errorObj) return retfilter;

    var safeKeys = keys(safeObject);
    if (safeKeys.length) {
        errorObj.e = new TypeError(
            "Catch filter must inherit from Error "
          + "or be a simple predicate function");
        return errorObj;
    }
    return retfilter;
}

CatchFilter.prototype.doFilter = function CatchFilter$_doFilter(e) {
    var cb = this._callback;
    var promise = this._promise;
    var boundTo = promise._isBound() ? promise._boundTo : void 0;
    for (var i = 0, len = this._instances.length; i < len; ++i) {
        var item = this._instances[i];
        var itemIsErrorType = item === Error ||
            (item != null && item.prototype instanceof Error);

        if (itemIsErrorType && e instanceof item) {
            var ret = tryCatch1(cb, boundTo, e);
            if (ret === errorObj) {
                NEXT_FILTER.e = ret.e;
                return NEXT_FILTER;
            }
            return ret;
        } else if (typeof item === "function" && !itemIsErrorType) {
            var shouldHandle = CatchFilter$_safePredicate(item, e);
            if (shouldHandle === errorObj) {
                var trace = errors.canAttach(errorObj.e)
                    ? errorObj.e
                    : new Error(errorObj.e + "");
                this._promise._attachExtraTrace(trace);
                e = errorObj.e;
                break;
            } else if (shouldHandle) {
                var ret = tryCatch1(cb, boundTo, e);
                if (ret === errorObj) {
                    NEXT_FILTER.e = ret.e;
                    return NEXT_FILTER;
                }
                return ret;
            }
        }
    }
    NEXT_FILTER.e = e;
    return NEXT_FILTER;
};

return CatchFilter;
};

},{"./errors.js":82,"./es5.js":84,"./util.js":110}],81:[function(require,module,exports){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
"use strict";
var util = require("./util.js");
var isPrimitive = util.isPrimitive;
var wrapsPrimitiveReceiver = util.wrapsPrimitiveReceiver;

module.exports = function(Promise) {
var returner = function Promise$_returner() {
    return this;
};
var thrower = function Promise$_thrower() {
    throw this;
};

var wrapper = function Promise$_wrapper(value, action) {
    if (action === 1) {
        return function Promise$_thrower() {
            throw value;
        };
    }
    else if (action === 2) {
        return function Promise$_returner() {
            return value;
        };
    }
};


Promise.prototype["return"] =
Promise.prototype.thenReturn =
function Promise$thenReturn(value) {
    if (wrapsPrimitiveReceiver && isPrimitive(value)) {
        return this._then(
            wrapper(value, 2),
            void 0,
            void 0,
            void 0,
            void 0
       );
    }
    return this._then(returner, void 0, void 0, value, void 0);
};

Promise.prototype["throw"] =
Promise.prototype.thenThrow =
function Promise$thenThrow(reason) {
    if (wrapsPrimitiveReceiver && isPrimitive(reason)) {
        return this._then(
            wrapper(reason, 1),
            void 0,
            void 0,
            void 0,
            void 0
       );
    }
    return this._then(thrower, void 0, void 0, reason, void 0);
};
};

},{"./util.js":110}],82:[function(require,module,exports){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
"use strict";
var global = require("./global.js");
var Objectfreeze = require("./es5.js").freeze;
var util = require("./util.js");
var inherits = util.inherits;
var notEnumerableProp = util.notEnumerableProp;
var Error = global.Error;

function markAsOriginatingFromRejection(e) {
    try {
        notEnumerableProp(e, "isAsync", true);
    }
    catch(ignore) {}
}

function originatesFromRejection(e) {
    if (e == null) return false;
    return ((e instanceof RejectionError) ||
        e["isAsync"] === true);
}

function isError(obj) {
    return obj instanceof Error;
}

function canAttach(obj) {
    return isError(obj);
}

function subError(nameProperty, defaultMessage) {
    function SubError(message) {
        if (!(this instanceof SubError)) return new SubError(message);
        this.message = typeof message === "string" ? message : defaultMessage;
        this.name = nameProperty;
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, this.constructor);
        }
    }
    inherits(SubError, Error);
    return SubError;
}

var TypeError = global.TypeError;
if (typeof TypeError !== "function") {
    TypeError = subError("TypeError", "type error");
}
var RangeError = global.RangeError;
if (typeof RangeError !== "function") {
    RangeError = subError("RangeError", "range error");
}
var CancellationError = subError("CancellationError", "cancellation error");
var TimeoutError = subError("TimeoutError", "timeout error");

function RejectionError(message) {
    this.name = "RejectionError";
    this.message = message;
    this.cause = message;
    this.isAsync = true;

    if (message instanceof Error) {
        this.message = message.message;
        this.stack = message.stack;
    }
    else if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
    }

}
inherits(RejectionError, Error);

var key = "__BluebirdErrorTypes__";
var errorTypes = global[key];
if (!errorTypes) {
    errorTypes = Objectfreeze({
        CancellationError: CancellationError,
        TimeoutError: TimeoutError,
        RejectionError: RejectionError
    });
    notEnumerableProp(global, key, errorTypes);
}

module.exports = {
    Error: Error,
    TypeError: TypeError,
    RangeError: RangeError,
    CancellationError: errorTypes.CancellationError,
    RejectionError: errorTypes.RejectionError,
    TimeoutError: errorTypes.TimeoutError,
    originatesFromRejection: originatesFromRejection,
    markAsOriginatingFromRejection: markAsOriginatingFromRejection,
    canAttach: canAttach
};

},{"./es5.js":84,"./global.js":88,"./util.js":110}],83:[function(require,module,exports){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
"use strict";
module.exports = function(Promise) {
var TypeError = require('./errors.js').TypeError;

function apiRejection(msg) {
    var error = new TypeError(msg);
    var ret = Promise.rejected(error);
    var parent = ret._peekContext();
    if (parent != null) {
        parent._attachExtraTrace(error);
    }
    return ret;
}

return apiRejection;
};

},{"./errors.js":82}],84:[function(require,module,exports){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
var isES5 = (function(){
    "use strict";
    return this === void 0;
})();

if (isES5) {
    module.exports = {
        freeze: Object.freeze,
        defineProperty: Object.defineProperty,
        keys: Object.keys,
        getPrototypeOf: Object.getPrototypeOf,
        isArray: Array.isArray,
        isES5: isES5
    };
}

else {
    var has = {}.hasOwnProperty;
    var str = {}.toString;
    var proto = {}.constructor.prototype;

    var ObjectKeys = function ObjectKeys(o) {
        var ret = [];
        for (var key in o) {
            if (has.call(o, key)) {
                ret.push(key);
            }
        }
        return ret;
    }

    var ObjectDefineProperty = function ObjectDefineProperty(o, key, desc) {
        o[key] = desc.value;
        return o;
    }

    var ObjectFreeze = function ObjectFreeze(obj) {
        return obj;
    }

    var ObjectGetPrototypeOf = function ObjectGetPrototypeOf(obj) {
        try {
            return Object(obj).constructor.prototype;
        }
        catch (e) {
            return proto;
        }
    }

    var ArrayIsArray = function ArrayIsArray(obj) {
        try {
            return str.call(obj) === "[object Array]";
        }
        catch(e) {
            return false;
        }
    }

    module.exports = {
        isArray: ArrayIsArray,
        keys: ObjectKeys,
        defineProperty: ObjectDefineProperty,
        freeze: ObjectFreeze,
        getPrototypeOf: ObjectGetPrototypeOf,
        isES5: isES5
    };
}

},{}],85:[function(require,module,exports){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
"use strict";
module.exports = function(Promise) {
var isArray = require("./util.js").isArray;

function Promise$_filter(booleans) {
    var values = this instanceof Promise ? this._settledValue : this;
    var len = values.length;
    var ret = new Array(len);
    var j = 0;

    for (var i = 0; i < len; ++i) {
        if (booleans[i]) ret[j++] = values[i];

    }
    ret.length = j;
    return ret;
}

var ref = {ref: null};
Promise.filter = function Promise$Filter(promises, fn) {
    return Promise.map(promises, fn, ref)
                  ._then(Promise$_filter, void 0, void 0, ref.ref, void 0);
};

Promise.prototype.filter = function Promise$filter(fn) {
    return this.map(fn, ref)
               ._then(Promise$_filter, void 0, void 0, ref.ref, void 0);
};
};

},{"./util.js":110}],86:[function(require,module,exports){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
"use strict";
module.exports = function(Promise, NEXT_FILTER) {
var util = require("./util.js");
var wrapsPrimitiveReceiver = util.wrapsPrimitiveReceiver;
var isPrimitive = util.isPrimitive;
var thrower = util.thrower;


function returnThis() {
    return this;
}
function throwThis() {
    throw this;
}
function return$(r) {
    return function Promise$_returner() {
        return r;
    };
}
function throw$(r) {
    return function Promise$_thrower() {
        throw r;
    };
}
function promisedFinally(ret, reasonOrValue, isFulfilled) {
    var then;
    if (wrapsPrimitiveReceiver && isPrimitive(reasonOrValue)) {
        then = isFulfilled ? return$(reasonOrValue) : throw$(reasonOrValue);
    }
    else {
        then = isFulfilled ? returnThis : throwThis;
    }
    return ret._then(then, thrower, void 0, reasonOrValue, void 0);
}

function finallyHandler(reasonOrValue) {
    var promise = this.promise;
    var handler = this.handler;

    var ret = promise._isBound()
                    ? handler.call(promise._boundTo)
                    : handler();

    if (ret !== void 0) {
        var maybePromise = Promise._cast(ret, void 0);
        if (maybePromise instanceof Promise) {
            return promisedFinally(maybePromise, reasonOrValue,
                                    promise.isFulfilled());
        }
    }

    if (promise.isRejected()) {
        NEXT_FILTER.e = reasonOrValue;
        return NEXT_FILTER;
    }
    else {
        return reasonOrValue;
    }
}

function tapHandler(value) {
    var promise = this.promise;
    var handler = this.handler;

    var ret = promise._isBound()
                    ? handler.call(promise._boundTo, value)
                    : handler(value);

    if (ret !== void 0) {
        var maybePromise = Promise._cast(ret, void 0);
        if (maybePromise instanceof Promise) {
            return promisedFinally(maybePromise, value, true);
        }
    }
    return value;
}

Promise.prototype._passThroughHandler =
function Promise$_passThroughHandler(handler, isFinally) {
    if (typeof handler !== "function") return this.then();

    var promiseAndHandler = {
        promise: this,
        handler: handler
    };

    return this._then(
            isFinally ? finallyHandler : tapHandler,
            isFinally ? finallyHandler : void 0, void 0,
            promiseAndHandler, void 0);
};

Promise.prototype.lastly =
Promise.prototype["finally"] = function Promise$finally(handler) {
    return this._passThroughHandler(handler, true);
};

Promise.prototype.tap = function Promise$tap(handler) {
    return this._passThroughHandler(handler, false);
};
};

},{"./util.js":110}],87:[function(require,module,exports){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
"use strict";
module.exports = function(Promise, apiRejection, INTERNAL) {
var PromiseSpawn = require("./promise_spawn.js")(Promise, INTERNAL);
var errors = require("./errors.js");
var TypeError = errors.TypeError;
var deprecated = require("./util.js").deprecated;

Promise.coroutine = function Promise$Coroutine(generatorFunction) {
    if (typeof generatorFunction !== "function") {
        throw new TypeError("generatorFunction must be a function");
    }
    var PromiseSpawn$ = PromiseSpawn;
    return function () {
        var generator = generatorFunction.apply(this, arguments);
        var spawn = new PromiseSpawn$(void 0, void 0);
        spawn._generator = generator;
        spawn._next(void 0);
        return spawn.promise();
    };
};

Promise.coroutine.addYieldHandler = PromiseSpawn.addYieldHandler;

Promise.spawn = function Promise$Spawn(generatorFunction) {
    deprecated("Promise.spawn is deprecated. Use Promise.coroutine instead.");
    if (typeof generatorFunction !== "function") {
        return apiRejection("generatorFunction must be a function");
    }
    var spawn = new PromiseSpawn(generatorFunction, this);
    var ret = spawn.promise();
    spawn._run(Promise.spawn);
    return ret;
};
};

},{"./errors.js":82,"./promise_spawn.js":95,"./util.js":110}],88:[function(require,module,exports){
(function (global){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
module.exports = (function() {
    if (this !== void 0) return this;
    try {return global;}
    catch(e) {}
    try {return window;}
    catch(e) {}
    try {return self;}
    catch(e) {}
})();

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],89:[function(require,module,exports){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
"use strict";
module.exports = function(Promise, PromiseArray, INTERNAL, apiRejection) {

var all = Promise.all;
var util = require("./util.js");
var canAttach = require("./errors.js").canAttach;
var isArray = util.isArray;
var _cast = Promise._cast;

function unpack(values) {
    return Promise$_Map(values, this[0], this[1], this[2]);
}

function Promise$_Map(promises, fn, useBound, ref) {
    if (typeof fn !== "function") {
        return apiRejection("fn must be a function");
    }

    var receiver = void 0;
    if (useBound === true) {
        if (promises._isBound()) {
            receiver = promises._boundTo;
        }
    }
    else if (useBound !== false) {
        receiver = useBound;
    }

    var shouldUnwrapItems = ref !== void 0;
    if (shouldUnwrapItems) ref.ref = promises;

    if (promises instanceof Promise) {
        var pack = [fn, receiver, ref];
        return promises._then(unpack, void 0, void 0, pack, void 0);
    }
    else if (!isArray(promises)) {
        return apiRejection("expecting an array, a promise or a thenable");
    }

    var promise = new Promise(INTERNAL);
    if (receiver !== void 0) promise._setBoundTo(receiver);
    promise._setTrace(void 0);

    var mapping = new Mapping(promise,
                                fn,
                                promises,
                                receiver,
                                shouldUnwrapItems);
    mapping.init();
    return promise;
}

var pending = {};
function Mapping(promise, callback, items, receiver, shouldUnwrapItems) {
    this.shouldUnwrapItems = shouldUnwrapItems;
    this.index = 0;
    this.items = items;
    this.callback = callback;
    this.receiver = receiver;
    this.promise = promise;
    this.result = new Array(items.length);
}
util.inherits(Mapping, PromiseArray);

Mapping.prototype.init = function Mapping$init() {
    var items = this.items;
    var len = items.length;
    var result = this.result;
    var isRejected = false;
    for (var i = 0; i < len; ++i) {
        var maybePromise = _cast(items[i], void 0);
        if (maybePromise instanceof Promise) {
            if (maybePromise.isPending()) {
                result[i] = pending;
                maybePromise._proxyPromiseArray(this, i);
            }
            else if (maybePromise.isFulfilled()) {
                result[i] = maybePromise.value();
            }
            else {
                maybePromise._unsetRejectionIsUnhandled();
                if (!isRejected) {
                    this.reject(maybePromise.reason());
                    isRejected = true;
                }
            }
        }
        else {
            result[i] = maybePromise;
        }
    }
    if (!isRejected) this.iterate();
};

Mapping.prototype.isResolved = function Mapping$isResolved() {
    return this.promise === null;
};

Mapping.prototype._promiseProgressed =
function Mapping$_promiseProgressed(value) {
    if (this.isResolved()) return;
    this.promise._progress(value);
};

Mapping.prototype._promiseFulfilled =
function Mapping$_promiseFulfilled(value, index) {
    if (this.isResolved()) return;
    this.result[index] = value;
    if (this.shouldUnwrapItems) this.items[index] = value;
    if (this.index === index) this.iterate();
};

Mapping.prototype._promiseRejected =
function Mapping$_promiseRejected(reason) {
    this.reject(reason);
};

Mapping.prototype.reject = function Mapping$reject(reason) {
    if (this.isResolved()) return;
    var trace = canAttach(reason) ? reason : new Error(reason + "");
    this.promise._attachExtraTrace(trace);
    this.promise._reject(reason, trace);
};

Mapping.prototype.iterate = function Mapping$iterate() {
    var i = this.index;
    var items = this.items;
    var result = this.result;
    var len = items.length;
    var result = this.result;
    var receiver = this.receiver;
    var callback = this.callback;

    for (; i < len; ++i) {
        var value = result[i];
        if (value === pending) {
            this.index = i;
            return;
        }
        try { result[i] = callback.call(receiver, value, i, len); }
        catch (e) { return this.reject(e); }
    }
    this.promise._follow(all(result));
    this.items = this.result = this.callback = this.promise = null;
};

Promise.prototype.map = function Promise$map(fn, ref) {
    return Promise$_Map(this, fn, true, ref);
};

Promise.map = function Promise$Map(promises, fn, ref) {
    return Promise$_Map(promises, fn, false, ref);
};
};

},{"./errors.js":82,"./util.js":110}],90:[function(require,module,exports){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
"use strict";
module.exports = function(Promise) {
var util = require("./util.js");
var async = require("./async.js");
var tryCatch2 = util.tryCatch2;
var tryCatch1 = util.tryCatch1;
var errorObj = util.errorObj;

function thrower(r) {
    throw r;
}

function Promise$_successAdapter(val, receiver) {
    var nodeback = this;
    var ret = val === void 0
        ? tryCatch1(nodeback, receiver, null)
        : tryCatch2(nodeback, receiver, null, val);
    if (ret === errorObj) {
        async.invokeLater(thrower, void 0, ret.e);
    }
}
function Promise$_errorAdapter(reason, receiver) {
    var nodeback = this;
    var ret = tryCatch1(nodeback, receiver, reason);
    if (ret === errorObj) {
        async.invokeLater(thrower, void 0, ret.e);
    }
}

Promise.prototype.nodeify = function Promise$nodeify(nodeback) {
    if (typeof nodeback == "function") {
        this._then(
            Promise$_successAdapter,
            Promise$_errorAdapter,
            void 0,
            nodeback,
            this._isBound() ? this._boundTo : null
        );
    }
    return this;
};
};

},{"./async.js":75,"./util.js":110}],91:[function(require,module,exports){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
"use strict";
module.exports = function(Promise, isPromiseArrayProxy) {
var util = require("./util.js");
var async = require("./async.js");
var errors = require("./errors.js");
var tryCatch1 = util.tryCatch1;
var errorObj = util.errorObj;

Promise.prototype.progressed = function Promise$progressed(handler) {
    return this._then(void 0, void 0, handler, void 0, void 0);
};

Promise.prototype._progress = function Promise$_progress(progressValue) {
    if (this._isFollowingOrFulfilledOrRejected()) return;
    this._progressUnchecked(progressValue);

};

Promise.prototype._progressHandlerAt =
function Promise$_progressHandlerAt(index) {
    if (index === 0) return this._progressHandler0;
    return this[index + 2 - 5];
};

Promise.prototype._doProgressWith =
function Promise$_doProgressWith(progression) {
    var progressValue = progression.value;
    var handler = progression.handler;
    var promise = progression.promise;
    var receiver = progression.receiver;

    this._pushContext();
    var ret = tryCatch1(handler, receiver, progressValue);
    this._popContext();

    if (ret === errorObj) {
        if (ret.e != null &&
            ret.e.name !== "StopProgressPropagation") {
            var trace = errors.canAttach(ret.e)
                ? ret.e : new Error(ret.e + "");
            promise._attachExtraTrace(trace);
            promise._progress(ret.e);
        }
    }
    else if (ret instanceof Promise) {
        ret._then(promise._progress, null, null, promise, void 0);
    }
    else {
        promise._progress(ret);
    }
};


Promise.prototype._progressUnchecked =
function Promise$_progressUnchecked(progressValue) {
    if (!this.isPending()) return;
    var len = this._length();
    var progress = this._progress;
    for (var i = 0; i < len; i += 5) {
        var handler = this._progressHandlerAt(i);
        var promise = this._promiseAt(i);
        if (!(promise instanceof Promise)) {
            var receiver = this._receiverAt(i);
            if (typeof handler === "function") {
                handler.call(receiver, progressValue, promise);
            }
            else if (receiver instanceof Promise && receiver._isProxied()) {
                receiver._progressUnchecked(progressValue);
            }
            else if (isPromiseArrayProxy(receiver, promise)) {
                receiver._promiseProgressed(progressValue, promise);
            }
            continue;
        }

        if (typeof handler === "function") {
            async.invoke(this._doProgressWith, this, {
                handler: handler,
                promise: promise,
                receiver: this._receiverAt(i),
                value: progressValue
            });
        }
        else {
            async.invoke(progress, promise, progressValue);
        }
    }
};
};

},{"./async.js":75,"./errors.js":82,"./util.js":110}],92:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
"use strict";
module.exports = function() {
var global = require("./global.js");
var util = require("./util.js");
var async = require("./async.js");
var errors = require("./errors.js");

var INTERNAL = function(){};
var APPLY = {};
var NEXT_FILTER = {e: null};

var PromiseArray = require("./promise_array.js")(Promise, INTERNAL);
var CapturedTrace = require("./captured_trace.js")();
var CatchFilter = require("./catch_filter.js")(NEXT_FILTER);
var PromiseResolver = require("./promise_resolver.js");

var isArray = util.isArray;

var errorObj = util.errorObj;
var tryCatch1 = util.tryCatch1;
var tryCatch2 = util.tryCatch2;
var tryCatchApply = util.tryCatchApply;
var RangeError = errors.RangeError;
var TypeError = errors.TypeError;
var CancellationError = errors.CancellationError;
var TimeoutError = errors.TimeoutError;
var RejectionError = errors.RejectionError;
var originatesFromRejection = errors.originatesFromRejection;
var markAsOriginatingFromRejection = errors.markAsOriginatingFromRejection;
var canAttach = errors.canAttach;
var thrower = util.thrower;
var apiRejection = require("./errors_api_rejection")(Promise);


var makeSelfResolutionError = function Promise$_makeSelfResolutionError() {
    return new TypeError("circular promise resolution chain");
};

function isPromise(obj) {
    if (obj === void 0) return false;
    return obj instanceof Promise;
}

function isPromiseArrayProxy(receiver, promiseSlotValue) {
    if (receiver instanceof PromiseArray) {
        return promiseSlotValue >= 0;
    }
    return false;
}

function Promise(resolver) {
    if (typeof resolver !== "function") {
        throw new TypeError("the promise constructor requires a resolver function");
    }
    if (this.constructor !== Promise) {
        throw new TypeError("the promise constructor cannot be invoked directly");
    }
    this._bitField = 0;
    this._fulfillmentHandler0 = void 0;
    this._rejectionHandler0 = void 0;
    this._promise0 = void 0;
    this._receiver0 = void 0;
    this._settledValue = void 0;
    this._boundTo = void 0;
    if (resolver !== INTERNAL) this._resolveFromResolver(resolver);
}

Promise.prototype.bind = function Promise$bind(thisArg) {
    var ret = new Promise(INTERNAL);
    ret._setTrace(this);
    ret._follow(this);
    ret._setBoundTo(thisArg);
    if (this._cancellable()) {
        ret._setCancellable();
        ret._cancellationParent = this;
    }
    return ret;
};

Promise.prototype.toString = function Promise$toString() {
    return "[object Promise]";
};

Promise.prototype.caught = Promise.prototype["catch"] =
function Promise$catch(fn) {
    var len = arguments.length;
    if (len > 1) {
        var catchInstances = new Array(len - 1),
            j = 0, i;
        for (i = 0; i < len - 1; ++i) {
            var item = arguments[i];
            if (typeof item === "function") {
                catchInstances[j++] = item;
            }
            else {
                var catchFilterTypeError =
                    new TypeError(
                        "A catch filter must be an error constructor "
                        + "or a filter function");

                this._attachExtraTrace(catchFilterTypeError);
                async.invoke(this._reject, this, catchFilterTypeError);
                return;
            }
        }
        catchInstances.length = j;
        fn = arguments[i];

        this._resetTrace();
        var catchFilter = new CatchFilter(catchInstances, fn, this);
        return this._then(void 0, catchFilter.doFilter, void 0,
            catchFilter, void 0);
    }
    return this._then(void 0, fn, void 0, void 0, void 0);
};

Promise.prototype.then =
function Promise$then(didFulfill, didReject, didProgress) {
    return this._then(didFulfill, didReject, didProgress,
        void 0, void 0);
};


Promise.prototype.done =
function Promise$done(didFulfill, didReject, didProgress) {
    var promise = this._then(didFulfill, didReject, didProgress,
        void 0, void 0);
    promise._setIsFinal();
};

Promise.prototype.spread = function Promise$spread(didFulfill, didReject) {
    return this._then(didFulfill, didReject, void 0,
        APPLY, void 0);
};

Promise.prototype.isCancellable = function Promise$isCancellable() {
    return !this.isResolved() &&
        this._cancellable();
};

Promise.prototype.toJSON = function Promise$toJSON() {
    var ret = {
        isFulfilled: false,
        isRejected: false,
        fulfillmentValue: void 0,
        rejectionReason: void 0
    };
    if (this.isFulfilled()) {
        ret.fulfillmentValue = this._settledValue;
        ret.isFulfilled = true;
    }
    else if (this.isRejected()) {
        ret.rejectionReason = this._settledValue;
        ret.isRejected = true;
    }
    return ret;
};

Promise.prototype.all = function Promise$all() {
    return Promise$_all(this, true);
};


Promise.is = isPromise;

function Promise$_all(promises, useBound) {
    return Promise$_CreatePromiseArray(
        promises,
        PromiseArray,
        useBound === true && promises._isBound()
            ? promises._boundTo
            : void 0
   ).promise();
}
Promise.all = function Promise$All(promises) {
    return Promise$_all(promises, false);
};

Promise.join = function Promise$Join() {
    var $_len = arguments.length;var args = new Array($_len); for(var $_i = 0; $_i < $_len; ++$_i) {args[$_i] = arguments[$_i];}
    return Promise$_CreatePromiseArray(args, PromiseArray, void 0).promise();
};

Promise.resolve = Promise.fulfilled =
function Promise$Resolve(value) {
    var ret = new Promise(INTERNAL);
    ret._setTrace(void 0);
    if (ret._tryFollow(value)) {
        return ret;
    }
    ret._cleanValues();
    ret._setFulfilled();
    ret._settledValue = value;
    return ret;
};

Promise.reject = Promise.rejected = function Promise$Reject(reason) {
    var ret = new Promise(INTERNAL);
    ret._setTrace(void 0);
    markAsOriginatingFromRejection(reason);
    ret._cleanValues();
    ret._setRejected();
    ret._settledValue = reason;
    if (!canAttach(reason)) {
        var trace = new Error(reason + "");
        ret._setCarriedStackTrace(trace);
    }
    ret._ensurePossibleRejectionHandled();
    return ret;
};

Promise.prototype.error = function Promise$_error(fn) {
    return this.caught(originatesFromRejection, fn);
};

Promise.prototype._resolveFromSyncValue =
function Promise$_resolveFromSyncValue(value) {
    if (value === errorObj) {
        this._cleanValues();
        this._setRejected();
        this._settledValue = value.e;
        this._ensurePossibleRejectionHandled();
    }
    else {
        var maybePromise = Promise._cast(value, void 0);
        if (maybePromise instanceof Promise) {
            this._follow(maybePromise);
        }
        else {
            this._cleanValues();
            this._setFulfilled();
            this._settledValue = value;
        }
    }
};

Promise.method = function Promise$_Method(fn) {
    if (typeof fn !== "function") {
        throw new TypeError("fn must be a function");
    }
    return function Promise$_method() {
        var value;
        switch(arguments.length) {
        case 0: value = tryCatch1(fn, this, void 0); break;
        case 1: value = tryCatch1(fn, this, arguments[0]); break;
        case 2: value = tryCatch2(fn, this, arguments[0], arguments[1]); break;
        default:
            var $_len = arguments.length;var args = new Array($_len); for(var $_i = 0; $_i < $_len; ++$_i) {args[$_i] = arguments[$_i];}
            value = tryCatchApply(fn, args, this); break;
        }
        var ret = new Promise(INTERNAL);
        ret._setTrace(void 0);
        ret._resolveFromSyncValue(value);
        return ret;
    };
};

Promise.attempt = Promise["try"] = function Promise$_Try(fn, args, ctx) {
    if (typeof fn !== "function") {
        return apiRejection("fn must be a function");
    }
    var value = isArray(args)
        ? tryCatchApply(fn, args, ctx)
        : tryCatch1(fn, ctx, args);

    var ret = new Promise(INTERNAL);
    ret._setTrace(void 0);
    ret._resolveFromSyncValue(value);
    return ret;
};

Promise.defer = Promise.pending = function Promise$Defer() {
    var promise = new Promise(INTERNAL);
    promise._setTrace(void 0);
    return new PromiseResolver(promise);
};

Promise.bind = function Promise$Bind(thisArg) {
    var ret = new Promise(INTERNAL);
    ret._setTrace(void 0);
    ret._setFulfilled();
    ret._setBoundTo(thisArg);
    return ret;
};

Promise.cast = function Promise$_Cast(obj) {
    var ret = Promise._cast(obj, void 0);
    if (!(ret instanceof Promise)) {
        return Promise.resolve(ret);
    }
    return ret;
};

Promise.onPossiblyUnhandledRejection =
function Promise$OnPossiblyUnhandledRejection(fn) {
        CapturedTrace.possiblyUnhandledRejection = typeof fn === "function"
                                                    ? fn : void 0;
};

var unhandledRejectionHandled;
Promise.onUnhandledRejectionHandled =
function Promise$onUnhandledRejectionHandled(fn) {
    unhandledRejectionHandled = typeof fn === "function" ? fn : void 0;
};

var debugging = false || !!(
    typeof process !== "undefined" &&
    typeof process.execPath === "string" &&
    typeof process.env === "object" &&
    (process.env["BLUEBIRD_DEBUG"] ||
        process.env["NODE_ENV"] === "development")
);


Promise.longStackTraces = function Promise$LongStackTraces() {
    if (async.haveItemsQueued() &&
        debugging === false
   ) {
        throw new Error("cannot enable long stack traces after promises have been created");
    }
    debugging = CapturedTrace.isSupported();
};

Promise.hasLongStackTraces = function Promise$HasLongStackTraces() {
    return debugging && CapturedTrace.isSupported();
};

Promise.prototype._setProxyHandlers =
function Promise$_setProxyHandlers(receiver, promiseSlotValue) {
    var index = this._length();

    if (index >= 524287 - 5) {
        index = 0;
        this._setLength(0);
    }
    if (index === 0) {
        this._promise0 = promiseSlotValue;
        this._receiver0 = receiver;
    }
    else {
        var i = index - 5;
        this[i + 3] = promiseSlotValue;
        this[i + 4] = receiver;
        this[i + 0] =
        this[i + 1] =
        this[i + 2] = void 0;
    }
    this._setLength(index + 5);
};

Promise.prototype._proxyPromiseArray =
function Promise$_proxyPromiseArray(promiseArray, index) {
    this._setProxyHandlers(promiseArray, index);
};

Promise.prototype._proxyPromise = function Promise$_proxyPromise(promise) {
    promise._setProxied();
    this._setProxyHandlers(promise, -1);
};

Promise.prototype._then =
function Promise$_then(
    didFulfill,
    didReject,
    didProgress,
    receiver,
    internalData
) {
    var haveInternalData = internalData !== void 0;
    var ret = haveInternalData ? internalData : new Promise(INTERNAL);

    if (debugging && !haveInternalData) {
        var haveSameContext = this._peekContext() === this._traceParent;
        ret._traceParent = haveSameContext ? this._traceParent : this;
        ret._setTrace(this);
    }

    if (!haveInternalData && this._isBound()) {
        ret._setBoundTo(this._boundTo);
    }

    var callbackIndex =
        this._addCallbacks(didFulfill, didReject, didProgress, ret, receiver);

    if (!haveInternalData && this._cancellable()) {
        ret._setCancellable();
        ret._cancellationParent = this;
    }

    if (this.isResolved()) {
        async.invoke(this._queueSettleAt, this, callbackIndex);
    }

    return ret;
};

Promise.prototype._length = function Promise$_length() {
    return this._bitField & 524287;
};

Promise.prototype._isFollowingOrFulfilledOrRejected =
function Promise$_isFollowingOrFulfilledOrRejected() {
    return (this._bitField & 939524096) > 0;
};

Promise.prototype._isFollowing = function Promise$_isFollowing() {
    return (this._bitField & 536870912) === 536870912;
};

Promise.prototype._setLength = function Promise$_setLength(len) {
    this._bitField = (this._bitField & -524288) |
        (len & 524287);
};

Promise.prototype._setFulfilled = function Promise$_setFulfilled() {
    this._bitField = this._bitField | 268435456;
};

Promise.prototype._setRejected = function Promise$_setRejected() {
    this._bitField = this._bitField | 134217728;
};

Promise.prototype._setFollowing = function Promise$_setFollowing() {
    this._bitField = this._bitField | 536870912;
};

Promise.prototype._setIsFinal = function Promise$_setIsFinal() {
    this._bitField = this._bitField | 33554432;
};

Promise.prototype._isFinal = function Promise$_isFinal() {
    return (this._bitField & 33554432) > 0;
};

Promise.prototype._cancellable = function Promise$_cancellable() {
    return (this._bitField & 67108864) > 0;
};

Promise.prototype._setCancellable = function Promise$_setCancellable() {
    this._bitField = this._bitField | 67108864;
};

Promise.prototype._unsetCancellable = function Promise$_unsetCancellable() {
    this._bitField = this._bitField & (~67108864);
};

Promise.prototype._setRejectionIsUnhandled =
function Promise$_setRejectionIsUnhandled() {
    this._bitField = this._bitField | 2097152;
};

Promise.prototype._unsetRejectionIsUnhandled =
function Promise$_unsetRejectionIsUnhandled() {
    this._bitField = this._bitField & (~2097152);
    if (this._isUnhandledRejectionNotified()) {
        this._unsetUnhandledRejectionIsNotified();
        this._notifyUnhandledRejectionIsHandled();
    }
};

Promise.prototype._isRejectionUnhandled =
function Promise$_isRejectionUnhandled() {
    return (this._bitField & 2097152) > 0;
};

Promise.prototype._setUnhandledRejectionIsNotified =
function Promise$_setUnhandledRejectionIsNotified() {
    this._bitField = this._bitField | 524288;
};

Promise.prototype._unsetUnhandledRejectionIsNotified =
function Promise$_unsetUnhandledRejectionIsNotified() {
    this._bitField = this._bitField & (~524288);
};

Promise.prototype._isUnhandledRejectionNotified =
function Promise$_isUnhandledRejectionNotified() {
    return (this._bitField & 524288) > 0;
};

Promise.prototype._setCarriedStackTrace =
function Promise$_setCarriedStackTrace(capturedTrace) {
    this._bitField = this._bitField | 1048576;
    this._fulfillmentHandler0 = capturedTrace;
};

Promise.prototype._unsetCarriedStackTrace =
function Promise$_unsetCarriedStackTrace() {
    this._bitField = this._bitField & (~1048576);
    this._fulfillmentHandler0 = void 0;
};

Promise.prototype._isCarryingStackTrace =
function Promise$_isCarryingStackTrace() {
    return (this._bitField & 1048576) > 0;
};

Promise.prototype._getCarriedStackTrace =
function Promise$_getCarriedStackTrace() {
    return this._isCarryingStackTrace()
        ? this._fulfillmentHandler0
        : void 0;
};

Promise.prototype._receiverAt = function Promise$_receiverAt(index) {
    var ret;
    if (index === 0) {
        ret = this._receiver0;
    }
    else {
        ret = this[index + 4 - 5];
    }
    if (this._isBound() && ret === void 0) {
        return this._boundTo;
    }
    return ret;
};

Promise.prototype._promiseAt = function Promise$_promiseAt(index) {
    if (index === 0) return this._promise0;
    return this[index + 3 - 5];
};

Promise.prototype._fulfillmentHandlerAt =
function Promise$_fulfillmentHandlerAt(index) {
    if (index === 0) return this._fulfillmentHandler0;
    return this[index + 0 - 5];
};

Promise.prototype._rejectionHandlerAt =
function Promise$_rejectionHandlerAt(index) {
    if (index === 0) return this._rejectionHandler0;
    return this[index + 1 - 5];
};

Promise.prototype._unsetAt = function Promise$_unsetAt(index) {
     if (index === 0) {
        this._rejectionHandler0 =
        this._progressHandler0 =
        this._promise0 =
        this._receiver0 = void 0;
        if (!this._isCarryingStackTrace()) {
            this._fulfillmentHandler0 = void 0;
        }
    }
    else {
        this[index - 5 + 0] =
        this[index - 5 + 1] =
        this[index - 5 + 2] =
        this[index - 5 + 3] =
        this[index - 5 + 4] = void 0;
    }
};

Promise.prototype._resolveFromResolver =
function Promise$_resolveFromResolver(resolver) {
    var promise = this;
    this._setTrace(void 0);
    this._pushContext();

    function Promise$_resolver(val) {
        if (promise._tryFollow(val)) {
            return;
        }
        promise._fulfill(val);
    }
    function Promise$_rejecter(val) {
        var trace = canAttach(val) ? val : new Error(val + "");
        promise._attachExtraTrace(trace);
        markAsOriginatingFromRejection(val);
        promise._reject(val, trace === val ? void 0 : trace);
    }
    var r = tryCatch2(resolver, void 0, Promise$_resolver, Promise$_rejecter);
    this._popContext();

    if (r !== void 0 && r === errorObj) {
        var e = r.e;
        var trace = canAttach(e) ? e : new Error(e + "");
        promise._reject(e, trace);
    }
};

Promise.prototype._addCallbacks = function Promise$_addCallbacks(
    fulfill,
    reject,
    progress,
    promise,
    receiver
) {
    var index = this._length();

    if (index >= 524287 - 5) {
        index = 0;
        this._setLength(0);
    }

    if (index === 0) {
        this._promise0 = promise;
        if (receiver !== void 0) this._receiver0 = receiver;
        if (typeof fulfill === "function" && !this._isCarryingStackTrace())
            this._fulfillmentHandler0 = fulfill;
        if (typeof reject === "function") this._rejectionHandler0 = reject;
        if (typeof progress === "function") this._progressHandler0 = progress;
    }
    else {
        var i = index - 5;
        this[i + 3] = promise;
        this[i + 4] = receiver;
        this[i + 0] = typeof fulfill === "function"
                                            ? fulfill : void 0;
        this[i + 1] = typeof reject === "function"
                                            ? reject : void 0;
        this[i + 2] = typeof progress === "function"
                                            ? progress : void 0;
    }
    this._setLength(index + 5);
    return index;
};



Promise.prototype._setBoundTo = function Promise$_setBoundTo(obj) {
    if (obj !== void 0) {
        this._bitField = this._bitField | 8388608;
        this._boundTo = obj;
    }
    else {
        this._bitField = this._bitField & (~8388608);
    }
};

Promise.prototype._isBound = function Promise$_isBound() {
    return (this._bitField & 8388608) === 8388608;
};

Promise.prototype._spreadSlowCase =
function Promise$_spreadSlowCase(targetFn, promise, values, boundTo) {
    var promiseForAll =
            Promise$_CreatePromiseArray
                (values, PromiseArray, boundTo)
            .promise()
            ._then(function() {
                return targetFn.apply(boundTo, arguments);
            }, void 0, void 0, APPLY, void 0);

    promise._follow(promiseForAll);
};

Promise.prototype._callSpread =
function Promise$_callSpread(handler, promise, value, localDebugging) {
    var boundTo = this._isBound() ? this._boundTo : void 0;
    if (isArray(value)) {
        for (var i = 0, len = value.length; i < len; ++i) {
            if (isPromise(Promise._cast(value[i], void 0))) {
                this._spreadSlowCase(handler, promise, value, boundTo);
                return;
            }
        }
    }
    if (localDebugging) promise._pushContext();
    return tryCatchApply(handler, value, boundTo);
};

Promise.prototype._callHandler =
function Promise$_callHandler(
    handler, receiver, promise, value, localDebugging) {
    var x;
    if (receiver === APPLY && !this.isRejected()) {
        x = this._callSpread(handler, promise, value, localDebugging);
    }
    else {
        if (localDebugging) promise._pushContext();
        x = tryCatch1(handler, receiver, value);
    }
    if (localDebugging) promise._popContext();
    return x;
};

Promise.prototype._settlePromiseFromHandler =
function Promise$_settlePromiseFromHandler(
    handler, receiver, value, promise
) {
    if (!isPromise(promise)) {
        handler.call(receiver, value, promise);
        return;
    }

    var localDebugging = debugging;
    var x = this._callHandler(handler, receiver,
                                promise, value, localDebugging);

    if (promise._isFollowing()) return;

    if (x === errorObj || x === promise || x === NEXT_FILTER) {
        var err = x === promise
                    ? makeSelfResolutionError()
                    : x.e;
        var trace = canAttach(err) ? err : new Error(err + "");
        if (x !== NEXT_FILTER) promise._attachExtraTrace(trace);
        promise._rejectUnchecked(err, trace);
    }
    else {
        var castValue = Promise._cast(x, promise);
        if (isPromise(castValue)) {
            if (castValue.isRejected() &&
                !castValue._isCarryingStackTrace() &&
                !canAttach(castValue._settledValue)) {
                var trace = new Error(castValue._settledValue + "");
                promise._attachExtraTrace(trace);
                castValue._setCarriedStackTrace(trace);
            }
            promise._follow(castValue);
            if (castValue._cancellable()) {
                promise._cancellationParent = castValue;
                promise._setCancellable();
            }
        }
        else {
            promise._fulfillUnchecked(x);
        }
    }
};

Promise.prototype._follow =
function Promise$_follow(promise) {
    this._setFollowing();

    if (promise.isPending()) {
        if (promise._cancellable() ) {
            this._cancellationParent = promise;
            this._setCancellable();
        }
        promise._proxyPromise(this);
    }
    else if (promise.isFulfilled()) {
        this._fulfillUnchecked(promise._settledValue);
    }
    else {
        this._rejectUnchecked(promise._settledValue,
            promise._getCarriedStackTrace());
    }

    if (promise._isRejectionUnhandled()) promise._unsetRejectionIsUnhandled();

    if (debugging &&
        promise._traceParent == null) {
        promise._traceParent = this;
    }
};

Promise.prototype._tryFollow =
function Promise$_tryFollow(value) {
    if (this._isFollowingOrFulfilledOrRejected() ||
        value === this) {
        return false;
    }
    var maybePromise = Promise._cast(value, void 0);
    if (!isPromise(maybePromise)) {
        return false;
    }
    this._follow(maybePromise);
    return true;
};

Promise.prototype._resetTrace = function Promise$_resetTrace() {
    if (debugging) {
        this._trace = new CapturedTrace(this._peekContext() === void 0);
    }
};

Promise.prototype._setTrace = function Promise$_setTrace(parent) {
    if (debugging) {
        var context = this._peekContext();
        this._traceParent = context;
        var isTopLevel = context === void 0;
        if (parent !== void 0 &&
            parent._traceParent === context) {
            this._trace = parent._trace;
        }
        else {
            this._trace = new CapturedTrace(isTopLevel);
        }
    }
    return this;
};

Promise.prototype._attachExtraTrace =
function Promise$_attachExtraTrace(error) {
    if (debugging) {
        var promise = this;
        var stack = error.stack;
        stack = typeof stack === "string"
            ? stack.split("\n") : [];
        var headerLineCount = 1;

        while(promise != null &&
            promise._trace != null) {
            stack = CapturedTrace.combine(
                stack,
                promise._trace.stack.split("\n")
           );
            promise = promise._traceParent;
        }

        var max = Error.stackTraceLimit + headerLineCount;
        var len = stack.length;
        if (len  > max) {
            stack.length = max;
        }
        if (stack.length <= headerLineCount) {
            error.stack = "(No stack trace)";
        }
        else {
            error.stack = stack.join("\n");
        }
    }
};

Promise.prototype._cleanValues = function Promise$_cleanValues() {
    if (this._cancellable()) {
        this._cancellationParent = void 0;
    }
};

Promise.prototype._fulfill = function Promise$_fulfill(value) {
    if (this._isFollowingOrFulfilledOrRejected()) return;
    this._fulfillUnchecked(value);
};

Promise.prototype._reject =
function Promise$_reject(reason, carriedStackTrace) {
    if (this._isFollowingOrFulfilledOrRejected()) return;
    this._rejectUnchecked(reason, carriedStackTrace);
};

Promise.prototype._settlePromiseAt = function Promise$_settlePromiseAt(index) {
    var handler = this.isFulfilled()
        ? this._fulfillmentHandlerAt(index)
        : this._rejectionHandlerAt(index);

    var value = this._settledValue;
    var receiver = this._receiverAt(index);
    var promise = this._promiseAt(index);

    if (typeof handler === "function") {
        this._settlePromiseFromHandler(handler, receiver, value, promise);
    }
    else {
        var done = false;
        var isFulfilled = this.isFulfilled();
        if (receiver !== void 0) {
            if (receiver instanceof Promise &&
                receiver._isProxied()) {
                receiver._unsetProxied();

                if (isFulfilled) receiver._fulfillUnchecked(value);
                else receiver._rejectUnchecked(value,
                    this._getCarriedStackTrace());
                done = true;
            }
            else if (isPromiseArrayProxy(receiver, promise)) {
                if (isFulfilled) receiver._promiseFulfilled(value, promise);
                else receiver._promiseRejected(value, promise);
                done = true;
            }
        }

        if (!done) {
            if (isFulfilled) promise._fulfill(value);
            else promise._reject(value, this._getCarriedStackTrace());
        }
    }

    if (index >= 256) {
        this._queueGC();
    }
};

Promise.prototype._isProxied = function Promise$_isProxied() {
    return (this._bitField & 4194304) === 4194304;
};

Promise.prototype._setProxied = function Promise$_setProxied() {
    this._bitField = this._bitField | 4194304;
};

Promise.prototype._unsetProxied = function Promise$_unsetProxied() {
    this._bitField = this._bitField & (~4194304);
};

Promise.prototype._isGcQueued = function Promise$_isGcQueued() {
    return (this._bitField & -1073741824) === -1073741824;
};

Promise.prototype._setGcQueued = function Promise$_setGcQueued() {
    this._bitField = this._bitField | -1073741824;
};

Promise.prototype._unsetGcQueued = function Promise$_unsetGcQueued() {
    this._bitField = this._bitField & (~-1073741824);
};

Promise.prototype._queueGC = function Promise$_queueGC() {
    if (this._isGcQueued()) return;
    this._setGcQueued();
    async.invokeLater(this._gc, this, void 0);
};

Promise.prototype._gc = function Promise$gc() {
    var len = this._length();
    this._unsetAt(0);
    for (var i = 0; i < len; i++) {
        delete this[i];
    }
    this._setLength(0);
    this._unsetGcQueued();
};

Promise.prototype._queueSettleAt = function Promise$_queueSettleAt(index) {
    if (this._isRejectionUnhandled()) this._unsetRejectionIsUnhandled();
    async.invoke(this._settlePromiseAt, this, index);
};

Promise.prototype._fulfillUnchecked =
function Promise$_fulfillUnchecked(value) {
    if (!this.isPending()) return;
    if (value === this) {
        var err = makeSelfResolutionError();
        this._attachExtraTrace(err);
        return this._rejectUnchecked(err, void 0);
    }
    this._cleanValues();
    this._setFulfilled();
    this._settledValue = value;
    var len = this._length();

    if (len > 0) {
        async.invoke(this._settlePromises, this, len);
    }
};

Promise.prototype._rejectUncheckedCheckError =
function Promise$_rejectUncheckedCheckError(reason) {
    var trace = canAttach(reason) ? reason : new Error(reason + "");
    this._rejectUnchecked(reason, trace === reason ? void 0 : trace);
};

Promise.prototype._rejectUnchecked =
function Promise$_rejectUnchecked(reason, trace) {
    if (!this.isPending()) return;
    if (reason === this) {
        var err = makeSelfResolutionError();
        this._attachExtraTrace(err);
        return this._rejectUnchecked(err);
    }
    this._cleanValues();
    this._setRejected();
    this._settledValue = reason;

    if (this._isFinal()) {
        async.invokeLater(thrower, void 0, trace === void 0 ? reason : trace);
        return;
    }
    var len = this._length();

    if (trace !== void 0) this._setCarriedStackTrace(trace);

    if (len > 0) {
        async.invoke(this._rejectPromises, this, null);
    }
    else {
        this._ensurePossibleRejectionHandled();
    }
};

Promise.prototype._rejectPromises = function Promise$_rejectPromises() {
    this._settlePromises();
    this._unsetCarriedStackTrace();
};

Promise.prototype._settlePromises = function Promise$_settlePromises() {
    var len = this._length();
    for (var i = 0; i < len; i+= 5) {
        this._settlePromiseAt(i);
    }
};

Promise.prototype._ensurePossibleRejectionHandled =
function Promise$_ensurePossibleRejectionHandled() {
    this._setRejectionIsUnhandled();
    if (CapturedTrace.possiblyUnhandledRejection !== void 0) {
        async.invokeLater(this._notifyUnhandledRejection, this, void 0);
    }
};

Promise.prototype._notifyUnhandledRejectionIsHandled =
function Promise$_notifyUnhandledRejectionIsHandled() {
    if (typeof unhandledRejectionHandled === "function") {
        async.invokeLater(unhandledRejectionHandled, void 0, this);
    }
};

Promise.prototype._notifyUnhandledRejection =
function Promise$_notifyUnhandledRejection() {
    if (this._isRejectionUnhandled()) {
        var reason = this._settledValue;
        var trace = this._getCarriedStackTrace();

        this._setUnhandledRejectionIsNotified();

        if (trace !== void 0) {
            this._unsetCarriedStackTrace();
            reason = trace;
        }
        if (typeof CapturedTrace.possiblyUnhandledRejection === "function") {
            CapturedTrace.possiblyUnhandledRejection(reason, this);
        }
    }
};

var contextStack = [];
Promise.prototype._peekContext = function Promise$_peekContext() {
    var lastIndex = contextStack.length - 1;
    if (lastIndex >= 0) {
        return contextStack[lastIndex];
    }
    return void 0;

};

Promise.prototype._pushContext = function Promise$_pushContext() {
    if (!debugging) return;
    contextStack.push(this);
};

Promise.prototype._popContext = function Promise$_popContext() {
    if (!debugging) return;
    contextStack.pop();
};

function Promise$_CreatePromiseArray(
    promises, PromiseArrayConstructor, boundTo) {

    var list = null;
    if (isArray(promises)) {
        list = promises;
    }
    else {
        list = Promise._cast(promises, void 0);
        if (list !== promises) {
            list._setBoundTo(boundTo);
        }
        else if (!isPromise(list)) {
            list = null;
        }
    }
    if (list !== null) {
        return new PromiseArrayConstructor(list, boundTo);
    }
    return {
        promise: function() {return apiRejection("expecting an array, a promise or a thenable");}
    };
}

var old = global.Promise;
Promise.noConflict = function() {
    if (global.Promise === Promise) {
        global.Promise = old;
    }
    return Promise;
};

if (!CapturedTrace.isSupported()) {
    Promise.longStackTraces = function(){};
    debugging = false;
}

Promise._makeSelfResolutionError = makeSelfResolutionError;
require("./finally.js")(Promise, NEXT_FILTER);
require("./direct_resolve.js")(Promise);
require("./thenables.js")(Promise, INTERNAL);
require("./synchronous_inspection.js")(Promise);
Promise.RangeError = RangeError;
Promise.CancellationError = CancellationError;
Promise.TimeoutError = TimeoutError;
Promise.TypeError = TypeError;
Promise.RejectionError = RejectionError;

util.toFastProperties(Promise);
util.toFastProperties(Promise.prototype);
require('./timers.js')(Promise,INTERNAL);
require('./any.js')(Promise,Promise$_CreatePromiseArray,PromiseArray);
require('./race.js')(Promise,INTERNAL);
require('./call_get.js')(Promise);
require('./filter.js')(Promise,Promise$_CreatePromiseArray,PromiseArray,apiRejection);
require('./generators.js')(Promise,apiRejection,INTERNAL);
require('./map.js')(Promise,PromiseArray,INTERNAL,apiRejection);
require('./nodeify.js')(Promise);
require('./promisify.js')(Promise,INTERNAL);
require('./props.js')(Promise,PromiseArray);
require('./reduce.js')(Promise,Promise$_CreatePromiseArray,PromiseArray,apiRejection,INTERNAL);
require('./settle.js')(Promise,Promise$_CreatePromiseArray,PromiseArray);
require('./some.js')(Promise,Promise$_CreatePromiseArray,PromiseArray,apiRejection);
require('./progress.js')(Promise,isPromiseArrayProxy);
require('./cancel.js')(Promise,INTERNAL);

Promise.prototype = Promise.prototype;
return Promise;

};

}).call(this,require('_process'))

},{"./any.js":74,"./async.js":75,"./call_get.js":77,"./cancel.js":78,"./captured_trace.js":79,"./catch_filter.js":80,"./direct_resolve.js":81,"./errors.js":82,"./errors_api_rejection":83,"./filter.js":85,"./finally.js":86,"./generators.js":87,"./global.js":88,"./map.js":89,"./nodeify.js":90,"./progress.js":91,"./promise_array.js":93,"./promise_resolver.js":94,"./promisify.js":96,"./props.js":98,"./race.js":100,"./reduce.js":101,"./settle.js":103,"./some.js":105,"./synchronous_inspection.js":107,"./thenables.js":108,"./timers.js":109,"./util.js":110,"_process":16}],93:[function(require,module,exports){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
"use strict";
module.exports = function(Promise, INTERNAL) {
var canAttach = require("./errors.js").canAttach;
var util = require("./util.js");
var async = require("./async.js");
var hasOwn = {}.hasOwnProperty;
var isArray = util.isArray;

function toResolutionValue(val) {
    switch(val) {
    case -1: return void 0;
    case -2: return [];
    case -3: return {};
    }
}

function PromiseArray(values, boundTo) {
    var promise = this._promise = new Promise(INTERNAL);
    var parent = void 0;
    if (values instanceof Promise) {
        parent = values;
        if (values._cancellable()) {
            promise._setCancellable();
            promise._cancellationParent = values;
        }
        if (values._isBound()) {
            promise._setBoundTo(boundTo);
        }
    }
    promise._setTrace(parent);
    this._values = values;
    this._length = 0;
    this._totalResolved = 0;
    this._init(void 0, -2);
}
PromiseArray.PropertiesPromiseArray = function() {};

PromiseArray.prototype.length = function PromiseArray$length() {
    return this._length;
};

PromiseArray.prototype.promise = function PromiseArray$promise() {
    return this._promise;
};

PromiseArray.prototype._init =
function PromiseArray$_init(_, resolveValueIfEmpty) {
    var values = this._values;
    if (values instanceof Promise) {
        if (values.isFulfilled()) {
            values = values._settledValue;
            if (!isArray(values)) {
                var err = new Promise.TypeError("expecting an array, a promise or a thenable");
                this.__hardReject__(err);
                return;
            }
            this._values = values;
        }
        else if (values.isPending()) {
            values._then(
                this._init,
                this._reject,
                void 0,
                this,
                resolveValueIfEmpty
           );
            return;
        }
        else {
            values._unsetRejectionIsUnhandled();
            this._reject(values._settledValue);
            return;
        }
    }

    if (values.length === 0) {
        this._resolve(toResolutionValue(resolveValueIfEmpty));
        return;
    }
    var len = values.length;
    var newLen = len;
    var newValues;
    if (this instanceof PromiseArray.PropertiesPromiseArray) {
        newValues = this._values;
    }
    else {
        newValues = new Array(len);
    }
    var isDirectScanNeeded = false;
    for (var i = 0; i < len; ++i) {
        var promise = values[i];
        if (promise === void 0 && !hasOwn.call(values, i)) {
            newLen--;
            continue;
        }
        var maybePromise = Promise._cast(promise, void 0);
        if (maybePromise instanceof Promise) {
            if (maybePromise.isPending()) {
                maybePromise._proxyPromiseArray(this, i);
            }
            else {
                maybePromise._unsetRejectionIsUnhandled();
                isDirectScanNeeded = true;
            }
        }
        else {
            isDirectScanNeeded = true;
        }
        newValues[i] = maybePromise;
    }
    if (newLen === 0) {
        if (resolveValueIfEmpty === -2) {
            this._resolve(newValues);
        }
        else {
            this._resolve(toResolutionValue(resolveValueIfEmpty));
        }
        return;
    }
    this._values = newValues;
    this._length = newLen;
    if (isDirectScanNeeded) {
        var scanMethod = newLen === len
            ? this._scanDirectValues
            : this._scanDirectValuesHoled;
        async.invoke(scanMethod, this, len);
    }
};

PromiseArray.prototype._settlePromiseAt =
function PromiseArray$_settlePromiseAt(index) {
    var value = this._values[index];
    if (!(value instanceof Promise)) {
        this._promiseFulfilled(value, index);
    }
    else if (value.isFulfilled()) {
        this._promiseFulfilled(value._settledValue, index);
    }
    else if (value.isRejected()) {
        this._promiseRejected(value._settledValue, index);
    }
};

PromiseArray.prototype._scanDirectValuesHoled =
function PromiseArray$_scanDirectValuesHoled(len) {
    for (var i = 0; i < len; ++i) {
        if (this._isResolved()) {
            break;
        }
        if (hasOwn.call(this._values, i)) {
            this._settlePromiseAt(i);
        }
    }
};

PromiseArray.prototype._scanDirectValues =
function PromiseArray$_scanDirectValues(len) {
    for (var i = 0; i < len; ++i) {
        if (this._isResolved()) {
            break;
        }
        this._settlePromiseAt(i);
    }
};

PromiseArray.prototype._isResolved = function PromiseArray$_isResolved() {
    return this._values === null;
};

PromiseArray.prototype._resolve = function PromiseArray$_resolve(value) {
    this._values = null;
    this._promise._fulfill(value);
};

PromiseArray.prototype.__hardReject__ =
PromiseArray.prototype._reject = function PromiseArray$_reject(reason) {
    this._values = null;
    var trace = canAttach(reason) ? reason : new Error(reason + "");
    this._promise._attachExtraTrace(trace);
    this._promise._reject(reason, trace);
};

PromiseArray.prototype._promiseProgressed =
function PromiseArray$_promiseProgressed(progressValue, index) {
    if (this._isResolved()) return;
    this._promise._progress({
        index: index,
        value: progressValue
    });
};


PromiseArray.prototype._promiseFulfilled =
function PromiseArray$_promiseFulfilled(value, index) {
    if (this._isResolved()) return;
    this._values[index] = value;
    var totalResolved = ++this._totalResolved;
    if (totalResolved >= this._length) {
        this._resolve(this._values);
    }
};

PromiseArray.prototype._promiseRejected =
function PromiseArray$_promiseRejected(reason, index) {
    if (this._isResolved()) return;
    this._totalResolved++;
    this._reject(reason);
};

return PromiseArray;
};

},{"./async.js":75,"./errors.js":82,"./util.js":110}],94:[function(require,module,exports){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
"use strict";
var util = require("./util.js");
var maybeWrapAsError = util.maybeWrapAsError;
var errors = require("./errors.js");
var TimeoutError = errors.TimeoutError;
var RejectionError = errors.RejectionError;
var async = require("./async.js");
var haveGetters = util.haveGetters;
var es5 = require("./es5.js");

function isUntypedError(obj) {
    return obj instanceof Error &&
        es5.getPrototypeOf(obj) === Error.prototype;
}

function wrapAsRejectionError(obj) {
    var ret;
    if (isUntypedError(obj)) {
        ret = new RejectionError(obj);
    }
    else {
        ret = obj;
    }
    errors.markAsOriginatingFromRejection(ret);
    return ret;
}

function nodebackForPromise(promise) {
    function PromiseResolver$_callback(err, value) {
        if (promise === null) return;

        if (err) {
            var wrapped = wrapAsRejectionError(maybeWrapAsError(err));
            promise._attachExtraTrace(wrapped);
            promise._reject(wrapped);
        }
        else {
            if (arguments.length > 2) {
                var $_len = arguments.length;var args = new Array($_len - 1); for(var $_i = 1; $_i < $_len; ++$_i) {args[$_i - 1] = arguments[$_i];}
                promise._fulfill(args);
            }
            else {
                promise._fulfill(value);
            }
        }

        promise = null;
    }
    return PromiseResolver$_callback;
}


var PromiseResolver;
if (!haveGetters) {
    PromiseResolver = function PromiseResolver(promise) {
        this.promise = promise;
        this.asCallback = nodebackForPromise(promise);
        this.callback = this.asCallback;
    };
}
else {
    PromiseResolver = function PromiseResolver(promise) {
        this.promise = promise;
    };
}
if (haveGetters) {
    var prop = {
        get: function() {
            return nodebackForPromise(this.promise);
        }
    };
    es5.defineProperty(PromiseResolver.prototype, "asCallback", prop);
    es5.defineProperty(PromiseResolver.prototype, "callback", prop);
}

PromiseResolver._nodebackForPromise = nodebackForPromise;

PromiseResolver.prototype.toString = function PromiseResolver$toString() {
    return "[object PromiseResolver]";
};

PromiseResolver.prototype.resolve =
PromiseResolver.prototype.fulfill = function PromiseResolver$resolve(value) {
    var promise = this.promise;
    if ((promise === void 0) || (promise._tryFollow === void 0)) {
        throw new TypeError("Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.");
    }
    if (promise._tryFollow(value)) {
        return;
    }
    async.invoke(promise._fulfill, promise, value);
};

PromiseResolver.prototype.reject = function PromiseResolver$reject(reason) {
    var promise = this.promise;
    if ((promise === void 0) || (promise._attachExtraTrace === void 0)) {
        throw new TypeError("Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.");
    }
    errors.markAsOriginatingFromRejection(reason);
    var trace = errors.canAttach(reason) ? reason : new Error(reason + "");
    promise._attachExtraTrace(trace);
    async.invoke(promise._reject, promise, reason);
    if (trace !== reason) {
        async.invoke(this._setCarriedStackTrace, this, trace);
    }
};

PromiseResolver.prototype.progress =
function PromiseResolver$progress(value) {
    async.invoke(this.promise._progress, this.promise, value);
};

PromiseResolver.prototype.cancel = function PromiseResolver$cancel() {
    async.invoke(this.promise.cancel, this.promise, void 0);
};

PromiseResolver.prototype.timeout = function PromiseResolver$timeout() {
    this.reject(new TimeoutError("timeout"));
};

PromiseResolver.prototype.isResolved = function PromiseResolver$isResolved() {
    return this.promise.isResolved();
};

PromiseResolver.prototype.toJSON = function PromiseResolver$toJSON() {
    return this.promise.toJSON();
};

PromiseResolver.prototype._setCarriedStackTrace =
function PromiseResolver$_setCarriedStackTrace(trace) {
    if (this.promise.isRejected()) {
        this.promise._setCarriedStackTrace(trace);
    }
};

module.exports = PromiseResolver;

},{"./async.js":75,"./errors.js":82,"./es5.js":84,"./util.js":110}],95:[function(require,module,exports){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
"use strict";
module.exports = function(Promise, INTERNAL) {
var errors = require("./errors.js");
var TypeError = errors.TypeError;
var util = require("./util.js");
var isArray = util.isArray;
var errorObj = util.errorObj;
var tryCatch1 = util.tryCatch1;
var yieldHandlers = [];

function promiseFromYieldHandler(value) {
    var _yieldHandlers = yieldHandlers;
    var _errorObj = errorObj;
    var _Promise = Promise;
    var len = _yieldHandlers.length;
    for (var i = 0; i < len; ++i) {
        var result = tryCatch1(_yieldHandlers[i], void 0, value);
        if (result === _errorObj) {
            return _Promise.reject(_errorObj.e);
        }
        var maybePromise = _Promise._cast(result,
            promiseFromYieldHandler, void 0);
        if (maybePromise instanceof _Promise) return maybePromise;
    }
    return null;
}

function PromiseSpawn(generatorFunction, receiver) {
    var promise = this._promise = new Promise(INTERNAL);
    promise._setTrace(void 0);
    this._generatorFunction = generatorFunction;
    this._receiver = receiver;
    this._generator = void 0;
}

PromiseSpawn.prototype.promise = function PromiseSpawn$promise() {
    return this._promise;
};

PromiseSpawn.prototype._run = function PromiseSpawn$_run() {
    this._generator = this._generatorFunction.call(this._receiver);
    this._receiver =
        this._generatorFunction = void 0;
    this._next(void 0);
};

PromiseSpawn.prototype._continue = function PromiseSpawn$_continue(result) {
    if (result === errorObj) {
        this._generator = void 0;
        var trace = errors.canAttach(result.e)
            ? result.e : new Error(result.e + "");
        this._promise._attachExtraTrace(trace);
        this._promise._reject(result.e, trace);
        return;
    }

    var value = result.value;
    if (result.done === true) {
        this._generator = void 0;
        if (!this._promise._tryFollow(value)) {
            this._promise._fulfill(value);
        }
    }
    else {
        var maybePromise = Promise._cast(value, PromiseSpawn$_continue, void 0);
        if (!(maybePromise instanceof Promise)) {
            if (isArray(maybePromise)) {
                maybePromise = Promise.all(maybePromise);
            }
            else {
                maybePromise = promiseFromYieldHandler(maybePromise);
            }
            if (maybePromise === null) {
                this._throw(new TypeError("A value was yielded that could not be treated as a promise"));
                return;
            }
        }
        maybePromise._then(
            this._next,
            this._throw,
            void 0,
            this,
            null
       );
    }
};

PromiseSpawn.prototype._throw = function PromiseSpawn$_throw(reason) {
    if (errors.canAttach(reason))
        this._promise._attachExtraTrace(reason);
    this._continue(
        tryCatch1(this._generator["throw"], this._generator, reason)
   );
};

PromiseSpawn.prototype._next = function PromiseSpawn$_next(value) {
    this._continue(
        tryCatch1(this._generator.next, this._generator, value)
   );
};

PromiseSpawn.addYieldHandler = function PromiseSpawn$AddYieldHandler(fn) {
    if (typeof fn !== "function") throw new TypeError("fn must be a function");
    yieldHandlers.push(fn);
};

return PromiseSpawn;
};

},{"./errors.js":82,"./util.js":110}],96:[function(require,module,exports){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
"use strict";
module.exports = function(Promise, INTERNAL) {
var THIS = {};
var util = require("./util.js");
var es5 = require("./es5.js");
var nodebackForPromise = require("./promise_resolver.js")
    ._nodebackForPromise;
var withAppended = util.withAppended;
var maybeWrapAsError = util.maybeWrapAsError;
var canEvaluate = util.canEvaluate;
var deprecated = util.deprecated;
var TypeError = require("./errors").TypeError;


var rasyncSuffix = new RegExp("Async" + "$");
function isPromisified(fn) {
    return fn.__isPromisified__ === true;
}
function hasPromisified(obj, key) {
    var containsKey = ((key + "Async") in obj);
    return containsKey ? isPromisified(obj[key + "Async"])
                       : false;
}
function checkValid(ret) {
    for (var i = 0; i < ret.length; i += 2) {
        var key = ret[i];
        if (rasyncSuffix.test(key)) {
            var keyWithoutAsyncSuffix = key.replace(rasyncSuffix, "");
            for (var j = 0; j < ret.length; j += 2) {
                if (ret[j] === keyWithoutAsyncSuffix) {
                    throw new TypeError("Cannot promisify an API " +
                        "that has normal methods with Async-suffix");
                }
            }
        }
    }
}
var inheritedMethods = (function() {
    if (es5.isES5) {
        var create = Object.create;
        var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
        return function(cur) {
            var ret = [];
            var visitedKeys = create(null);
            var original = cur;
            while (cur !== null) {
                var keys = es5.keys(cur);
                for (var i = 0, len = keys.length; i < len; ++i) {
                    var key = keys[i];
                    if (visitedKeys[key]) continue;
                    visitedKeys[key] = true;
                    var desc = getOwnPropertyDescriptor(cur, key);

                    if (desc != null &&
                        typeof desc.value === "function" &&
                        !isPromisified(desc.value) &&
                        !hasPromisified(original, key)) {
                        ret.push(key, desc.value);
                    }
                }
                cur = es5.getPrototypeOf(cur);
            }
            checkValid(ret);
            return ret;
        };
    }
    else {
        return function(obj) {
            var ret = [];
            /*jshint forin:false */
            for (var key in obj) {
                var fn = obj[key];
                if (typeof fn === "function" &&
                    !isPromisified(fn) &&
                    !hasPromisified(obj, key)) {
                    ret.push(key, fn);
                }
            }
            checkValid(ret);
            return ret;
        };
    }
})();

function switchCaseArgumentOrder(likelyArgumentCount) {
    var ret = [likelyArgumentCount];
    var min = Math.max(0, likelyArgumentCount - 1 - 5);
    for(var i = likelyArgumentCount - 1; i >= min; --i) {
        if (i === likelyArgumentCount) continue;
        ret.push(i);
    }
    for(var i = likelyArgumentCount + 1; i <= 5; ++i) {
        ret.push(i);
    }
    return ret;
}

function parameterDeclaration(parameterCount) {
    var ret = new Array(parameterCount);
    for(var i = 0; i < ret.length; ++i) {
        ret[i] = "_arg" + i;
    }
    return ret.join(", ");
}

function parameterCount(fn) {
    if (typeof fn.length === "number") {
        return Math.max(Math.min(fn.length, 1023 + 1), 0);
    }
    return 0;
}

var rident = /^[a-z$_][a-z$_0-9]*$/i;
function propertyAccess(id) {
    if (rident.test(id)) {
        return "." + id;
    }
    else return "['" + id.replace(/(['\\])/g, "\\$1") + "']";
}

function makeNodePromisifiedEval(callback, receiver, originalName, fn) {
    var newParameterCount = Math.max(0, parameterCount(fn) - 1);
    var argumentOrder = switchCaseArgumentOrder(newParameterCount);

    var callbackName = (typeof originalName === "string" ?
        originalName + "Async" :
        "promisified");

    function generateCallForArgumentCount(count) {
        var args = new Array(count);
        for (var i = 0, len = args.length; i < len; ++i) {
            args[i] = "arguments[" + i + "]";
        }
        var comma = count > 0 ? "," : "";

        if (typeof callback === "string" &&
            receiver === THIS) {
            return "this" + propertyAccess(callback) + "("+args.join(",") +
                comma +" fn);"+
                "break;";
        }
        return (receiver === void 0
            ? "callback("+args.join(",")+ comma +" fn);"
            : "callback.call("+(receiver === THIS
                ? "this"
                : "receiver")+", "+args.join(",") + comma + " fn);") +
        "break;";
    }

    if (!rident.test(callbackName)) {
        callbackName = "promisified";
    }

    function generateArgumentSwitchCase() {
        var ret = "";
        for(var i = 0; i < argumentOrder.length; ++i) {
            ret += "case " + argumentOrder[i] +":" +
                generateCallForArgumentCount(argumentOrder[i]);
        }
        ret += "default: var args = new Array(len + 1);" +
            "var i = 0;" +
            "for (var i = 0; i < len; ++i) { " +
            "   args[i] = arguments[i];" +
            "}" +
            "args[i] = fn;" +

            (typeof callback === "string"
            ? "this" + propertyAccess(callback) + ".apply("
            : "callback.apply(") +

            (receiver === THIS ? "this" : "receiver") +
            ", args); break;";
        return ret;
    }

    return new Function("Promise", "callback", "receiver",
            "withAppended", "maybeWrapAsError", "nodebackForPromise",
            "INTERNAL",
        "var ret = function " + callbackName +
        "(" + parameterDeclaration(newParameterCount) + ") {\"use strict\";" +
        "var len = arguments.length;" +
        "var promise = new Promise(INTERNAL);"+
        "promise._setTrace(void 0);" +
        "var fn = nodebackForPromise(promise);"+
        "try {" +
        "switch(len) {" +
        generateArgumentSwitchCase() +
        "}" +
        "}" +
        "catch(e){ " +
        "var wrapped = maybeWrapAsError(e);" +
        "promise._attachExtraTrace(wrapped);" +
        "promise._reject(wrapped);" +
        "}" +
        "return promise;" +
        "" +
        "}; ret.__isPromisified__ = true; return ret;"
   )(Promise, callback, receiver, withAppended,
        maybeWrapAsError, nodebackForPromise, INTERNAL);
}

function makeNodePromisifiedClosure(callback, receiver) {
    function promisified() {
        var _receiver = receiver;
        if (receiver === THIS) _receiver = this;
        if (typeof callback === "string") {
            callback = _receiver[callback];
        }
        var promise = new Promise(INTERNAL);
        promise._setTrace(void 0);
        var fn = nodebackForPromise(promise);
        try {
            callback.apply(_receiver, withAppended(arguments, fn));
        }
        catch(e) {
            var wrapped = maybeWrapAsError(e);
            promise._attachExtraTrace(wrapped);
            promise._reject(wrapped);
        }
        return promise;
    }
    promisified.__isPromisified__ = true;
    return promisified;
}

var makeNodePromisified = canEvaluate
    ? makeNodePromisifiedEval
    : makeNodePromisifiedClosure;

function _promisify(callback, receiver, isAll) {
    if (isAll) {
        var methods = inheritedMethods(callback);
        for (var i = 0, len = methods.length; i < len; i+= 2) {
            var key = methods[i];
            var fn = methods[i+1];
            var promisifiedKey = key + "Async";
            callback[promisifiedKey] = makeNodePromisified(key, THIS, key, fn);
        }
        util.toFastProperties(callback);
        return callback;
    }
    else {
        return makeNodePromisified(callback, receiver, void 0, callback);
    }
}

Promise.promisify = function Promise$Promisify(fn, receiver) {
    if (typeof fn === "object" && fn !== null) {
        deprecated("Promise.promisify for promisifying entire objects is deprecated. Use Promise.promisifyAll instead.");
        return _promisify(fn, receiver, true);
    }
    if (typeof fn !== "function") {
        throw new TypeError("fn must be a function");
    }
    if (isPromisified(fn)) {
        return fn;
    }
    return _promisify(
        fn,
        arguments.length < 2 ? THIS : receiver,
        false);
};

Promise.promisifyAll = function Promise$PromisifyAll(target) {
    if (typeof target !== "function" && typeof target !== "object") {
        throw new TypeError("the target of promisifyAll must be an object or a function");
    }
    return _promisify(target, void 0, true);
};
};


},{"./errors":82,"./es5.js":84,"./promise_resolver.js":94,"./util.js":110}],97:[function(require,module,exports){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
"use strict";
module.exports = function(Promise, PromiseArray) {
var util = require("./util.js");
var inherits = util.inherits;
var es5 = require("./es5.js");

function PropertiesPromiseArray(obj, boundTo) {
    var keys = es5.keys(obj);
    var values = new Array(keys.length);
    for (var i = 0, len = values.length; i < len; ++i) {
        values[i] = obj[keys[i]];
    }
    this.constructor$(values, boundTo);
    if (!this._isResolved()) {
        for (var i = 0, len = keys.length; i < len; ++i) {
            values.push(keys[i]);
        }
    }
}
inherits(PropertiesPromiseArray, PromiseArray);

PropertiesPromiseArray.prototype._init =
function PropertiesPromiseArray$_init() {
    this._init$(void 0, -3) ;
};

PropertiesPromiseArray.prototype._promiseFulfilled =
function PropertiesPromiseArray$_promiseFulfilled(value, index) {
    if (this._isResolved()) return;
    this._values[index] = value;
    var totalResolved = ++this._totalResolved;
    if (totalResolved >= this._length) {
        var val = {};
        var keyOffset = this.length();
        for (var i = 0, len = this.length(); i < len; ++i) {
            val[this._values[i + keyOffset]] = this._values[i];
        }
        this._resolve(val);
    }
};

PropertiesPromiseArray.prototype._promiseProgressed =
function PropertiesPromiseArray$_promiseProgressed(value, index) {
    if (this._isResolved()) return;

    this._promise._progress({
        key: this._values[index + this.length()],
        value: value
    });
};

PromiseArray.PropertiesPromiseArray = PropertiesPromiseArray;

return PropertiesPromiseArray;
};

},{"./es5.js":84,"./util.js":110}],98:[function(require,module,exports){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
"use strict";
module.exports = function(Promise, PromiseArray) {
var PropertiesPromiseArray = require("./properties_promise_array.js")(
    Promise, PromiseArray);
var util = require("./util.js");
var apiRejection = require("./errors_api_rejection")(Promise);
var isObject = util.isObject;

function Promise$_Props(promises, useBound) {
    var ret;
    var castValue = Promise._cast(promises, void 0);

    if (!isObject(castValue)) {
        return apiRejection("cannot await properties of a non-object");
    }
    else if (castValue instanceof Promise) {
        ret = castValue._then(Promise.props, void 0, void 0,
                        void 0, void 0);
    }
    else {
        ret = new PropertiesPromiseArray(
            castValue,
            useBound === true && castValue._isBound()
                        ? castValue._boundTo
                        : void 0
       ).promise();
        useBound = false;
    }
    if (useBound === true && castValue._isBound()) {
        ret._setBoundTo(castValue._boundTo);
    }
    return ret;
}

Promise.prototype.props = function Promise$props() {
    return Promise$_Props(this, true);
};

Promise.props = function Promise$Props(promises) {
    return Promise$_Props(promises, false);
};
};

},{"./errors_api_rejection":83,"./properties_promise_array.js":97,"./util.js":110}],99:[function(require,module,exports){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
"use strict";
function arrayCopy(src, srcIndex, dst, dstIndex, len) {
    for (var j = 0; j < len; ++j) {
        dst[j + dstIndex] = src[j + srcIndex];
    }
}

function pow2AtLeast(n) {
    n = n >>> 0;
    n = n - 1;
    n = n | (n >> 1);
    n = n | (n >> 2);
    n = n | (n >> 4);
    n = n | (n >> 8);
    n = n | (n >> 16);
    return n + 1;
}

function getCapacity(capacity) {
    if (typeof capacity !== "number") return 16;
    return pow2AtLeast(
        Math.min(
            Math.max(16, capacity), 1073741824)
   );
}

function Queue(capacity) {
    this._capacity = getCapacity(capacity);
    this._length = 0;
    this._front = 0;
    this._makeCapacity();
}

Queue.prototype._willBeOverCapacity =
function Queue$_willBeOverCapacity(size) {
    return this._capacity < size;
};

Queue.prototype._pushOne = function Queue$_pushOne(arg) {
    var length = this.length();
    this._checkCapacity(length + 1);
    var i = (this._front + length) & (this._capacity - 1);
    this[i] = arg;
    this._length = length + 1;
};

Queue.prototype.push = function Queue$push(fn, receiver, arg) {
    var length = this.length() + 3;
    if (this._willBeOverCapacity(length)) {
        this._pushOne(fn);
        this._pushOne(receiver);
        this._pushOne(arg);
        return;
    }
    var j = this._front + length - 3;
    this._checkCapacity(length);
    var wrapMask = this._capacity - 1;
    this[(j + 0) & wrapMask] = fn;
    this[(j + 1) & wrapMask] = receiver;
    this[(j + 2) & wrapMask] = arg;
    this._length = length;
};

Queue.prototype.shift = function Queue$shift() {
    var front = this._front,
        ret = this[front];

    this[front] = void 0;
    this._front = (front + 1) & (this._capacity - 1);
    this._length--;
    return ret;
};

Queue.prototype.length = function Queue$length() {
    return this._length;
};

Queue.prototype._makeCapacity = function Queue$_makeCapacity() {
    var len = this._capacity;
    for (var i = 0; i < len; ++i) {
        this[i] = void 0;
    }
};

Queue.prototype._checkCapacity = function Queue$_checkCapacity(size) {
    if (this._capacity < size) {
        this._resizeTo(this._capacity << 3);
    }
};

Queue.prototype._resizeTo = function Queue$_resizeTo(capacity) {
    var oldFront = this._front;
    var oldCapacity = this._capacity;
    var oldQueue = new Array(oldCapacity);
    var length = this.length();

    arrayCopy(this, 0, oldQueue, 0, oldCapacity);
    this._capacity = capacity;
    this._makeCapacity();
    this._front = 0;
    if (oldFront + length <= oldCapacity) {
        arrayCopy(oldQueue, oldFront, this, 0, length);
    }
    else {        var lengthBeforeWrapping =
            length - ((oldFront + length) & (oldCapacity - 1));

        arrayCopy(oldQueue, oldFront, this, 0, lengthBeforeWrapping);
        arrayCopy(oldQueue, 0, this, lengthBeforeWrapping,
                    length - lengthBeforeWrapping);
    }
};

module.exports = Queue;

},{}],100:[function(require,module,exports){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
"use strict";
module.exports = function(Promise, INTERNAL) {
var apiRejection = require("./errors_api_rejection.js")(Promise);
var isArray = require("./util.js").isArray;

var raceLater = function Promise$_raceLater(promise) {
    return promise.then(function(array) {
        return Promise$_Race(array, promise);
    });
};

var hasOwn = {}.hasOwnProperty;
function Promise$_Race(promises, parent) {
    var maybePromise = Promise._cast(promises, void 0);

    if (maybePromise instanceof Promise) {
        return raceLater(maybePromise);
    }
    else if (!isArray(promises)) {
        return apiRejection("expecting an array, a promise or a thenable");
    }

    var ret = new Promise(INTERNAL);
    ret._setTrace(parent);
    if (parent !== void 0) {
        if (parent._isBound()) {
            ret._setBoundTo(parent._boundTo);
        }
        if (parent._cancellable()) {
            ret._setCancellable();
            ret._cancellationParent = parent;
        }
    }
    var fulfill = ret._fulfill;
    var reject = ret._reject;
    for (var i = 0, len = promises.length; i < len; ++i) {
        var val = promises[i];

        if (val === void 0 && !(hasOwn.call(promises, i))) {
            continue;
        }

        Promise.cast(val)._then(
            fulfill,
            reject,
            void 0,
            ret,
            null
       );
    }
    return ret;
}

Promise.race = function Promise$Race(promises) {
    return Promise$_Race(promises, void 0);
};

Promise.prototype.race = function Promise$race() {
    return Promise$_Race(this, void 0);
};

};

},{"./errors_api_rejection.js":83,"./util.js":110}],101:[function(require,module,exports){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
"use strict";
module.exports = function(
    Promise, Promise$_CreatePromiseArray,
    PromiseArray, apiRejection, INTERNAL) {

function Reduction(callback, index, accum, items, receiver) {
    this.promise = new Promise(INTERNAL);
    this.index = index;
    this.length = items.length;
    this.items = items;
    this.callback = callback;
    this.receiver = receiver;
    this.accum = accum;
}

Reduction.prototype.reject = function Reduction$reject(e) {
    this.promise._reject(e);
};

Reduction.prototype.fulfill = function Reduction$fulfill(value, index) {
    this.accum = value;
    this.index = index + 1;
    this.iterate();
};

Reduction.prototype.iterate = function Reduction$iterate() {
    var i = this.index;
    var len = this.length;
    var items = this.items;
    var result = this.accum;
    var receiver = this.receiver;
    var callback = this.callback;

    for (; i < len; ++i) {
        result = callback.call(receiver, result, items[i], i, len);
        result = Promise._cast(result, void 0);

        if (result instanceof Promise) {
            result._then(
                this.fulfill, this.reject, void 0, this, i);
            return;
        }
    }
    this.promise._fulfill(result);
};

function Promise$_reducer(fulfilleds, initialValue) {
    var fn = this;
    var receiver = void 0;
    if (typeof fn !== "function")  {
        receiver = fn.receiver;
        fn = fn.fn;
    }
    var len = fulfilleds.length;
    var accum = void 0;
    var startIndex = 0;

    if (initialValue !== void 0) {
        accum = initialValue;
        startIndex = 0;
    }
    else {
        startIndex = 1;
        if (len > 0) accum = fulfilleds[0];
    }
    var i = startIndex;

    if (i >= len) {
        return accum;
    }

    var reduction = new Reduction(fn, i, accum, fulfilleds, receiver);
    reduction.iterate();
    return reduction.promise;
}

function Promise$_unpackReducer(fulfilleds) {
    var fn = this.fn;
    var initialValue = this.initialValue;
    return Promise$_reducer.call(fn, fulfilleds, initialValue);
}

function Promise$_slowReduce(
    promises, fn, initialValue, useBound) {
    return initialValue._then(function(initialValue) {
        return Promise$_Reduce(
            promises, fn, initialValue, useBound);
    }, void 0, void 0, void 0, void 0);
}

function Promise$_Reduce(promises, fn, initialValue, useBound) {
    if (typeof fn !== "function") {
        return apiRejection("fn must be a function");
    }

    if (useBound === true && promises._isBound()) {
        fn = {
            fn: fn,
            receiver: promises._boundTo
        };
    }

    if (initialValue !== void 0) {
        if (initialValue instanceof Promise) {
            if (initialValue.isFulfilled()) {
                initialValue = initialValue._settledValue;
            }
            else {
                return Promise$_slowReduce(promises,
                    fn, initialValue, useBound);
            }
        }

        return Promise$_CreatePromiseArray(promises, PromiseArray,
            useBound === true && promises._isBound()
                ? promises._boundTo
                : void 0)
            .promise()
            ._then(Promise$_unpackReducer, void 0, void 0, {
                fn: fn,
                initialValue: initialValue
            }, void 0);
    }
    return Promise$_CreatePromiseArray(promises, PromiseArray,
            useBound === true && promises._isBound()
                ? promises._boundTo
                : void 0).promise()
        ._then(Promise$_reducer, void 0, void 0, fn, void 0);
}


Promise.reduce = function Promise$Reduce(promises, fn, initialValue) {
    return Promise$_Reduce(promises, fn, initialValue, false);
};

Promise.prototype.reduce = function Promise$reduce(fn, initialValue) {
    return Promise$_Reduce(this, fn, initialValue, true);
};
};

},{}],102:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
"use strict";
var global = require("./global.js");
var schedule;
if (typeof process !== "undefined" && process !== null &&
    typeof process.cwd === "function" &&
    typeof process.nextTick === "function" &&
    typeof process.version === "string") {
    schedule = function Promise$_Scheduler(fn) {
        process.nextTick(fn);
    };
}
else if ((typeof global.MutationObserver === "function" ||
        typeof global.WebkitMutationObserver === "function" ||
        typeof global.WebKitMutationObserver === "function") &&
        typeof document !== "undefined" &&
        typeof document.createElement === "function") {


    schedule = (function(){
        var MutationObserver = global.MutationObserver ||
            global.WebkitMutationObserver ||
            global.WebKitMutationObserver;
        var div = document.createElement("div");
        var queuedFn = void 0;
        var observer = new MutationObserver(
            function Promise$_Scheduler() {
                var fn = queuedFn;
                queuedFn = void 0;
                fn();
            }
       );
        observer.observe(div, {
            attributes: true
        });
        return function Promise$_Scheduler(fn) {
            queuedFn = fn;
            div.setAttribute("class", "foo");
        };

    })();
}
else if (typeof global.postMessage === "function" &&
    typeof global.importScripts !== "function" &&
    typeof global.addEventListener === "function" &&
    typeof global.removeEventListener === "function") {

    var MESSAGE_KEY = "bluebird_message_key_" + Math.random();
    schedule = (function(){
        var queuedFn = void 0;

        function Promise$_Scheduler(e) {
            if (e.source === global &&
                e.data === MESSAGE_KEY) {
                var fn = queuedFn;
                queuedFn = void 0;
                fn();
            }
        }

        global.addEventListener("message", Promise$_Scheduler, false);

        return function Promise$_Scheduler(fn) {
            queuedFn = fn;
            global.postMessage(
                MESSAGE_KEY, "*"
           );
        };

    })();
}
else if (typeof global.MessageChannel === "function") {
    schedule = (function(){
        var queuedFn = void 0;

        var channel = new global.MessageChannel();
        channel.port1.onmessage = function Promise$_Scheduler() {
                var fn = queuedFn;
                queuedFn = void 0;
                fn();
        };

        return function Promise$_Scheduler(fn) {
            queuedFn = fn;
            channel.port2.postMessage(null);
        };
    })();
}
else if (global.setTimeout) {
    schedule = function Promise$_Scheduler(fn) {
        setTimeout(fn, 4);
    };
}
else {
    schedule = function Promise$_Scheduler(fn) {
        fn();
    };
}

module.exports = schedule;

}).call(this,require('_process'))

},{"./global.js":88,"_process":16}],103:[function(require,module,exports){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
"use strict";
module.exports =
    function(Promise, Promise$_CreatePromiseArray, PromiseArray) {

var SettledPromiseArray = require("./settled_promise_array.js")(
    Promise, PromiseArray);

function Promise$_Settle(promises, useBound) {
    return Promise$_CreatePromiseArray(
        promises,
        SettledPromiseArray,
        useBound === true && promises._isBound()
            ? promises._boundTo
            : void 0
   ).promise();
}

Promise.settle = function Promise$Settle(promises) {
    return Promise$_Settle(promises, false);
};

Promise.prototype.settle = function Promise$settle() {
    return Promise$_Settle(this, true);
};
};

},{"./settled_promise_array.js":104}],104:[function(require,module,exports){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
"use strict";
module.exports = function(Promise, PromiseArray) {
var PromiseInspection = Promise.PromiseInspection;
var util = require("./util.js");
var inherits = util.inherits;
function SettledPromiseArray(values, boundTo) {
    this.constructor$(values, boundTo);
}
inherits(SettledPromiseArray, PromiseArray);

SettledPromiseArray.prototype._promiseResolved =
function SettledPromiseArray$_promiseResolved(index, inspection) {
    this._values[index] = inspection;
    var totalResolved = ++this._totalResolved;
    if (totalResolved >= this._length) {
        this._resolve(this._values);
    }
};

SettledPromiseArray.prototype._promiseFulfilled =
function SettledPromiseArray$_promiseFulfilled(value, index) {
    if (this._isResolved()) return;
    var ret = new PromiseInspection();
    ret._bitField = 268435456;
    ret._settledValue = value;
    this._promiseResolved(index, ret);
};
SettledPromiseArray.prototype._promiseRejected =
function SettledPromiseArray$_promiseRejected(reason, index) {
    if (this._isResolved()) return;
    var ret = new PromiseInspection();
    ret._bitField = 134217728;
    ret._settledValue = reason;
    this._promiseResolved(index, ret);
};

return SettledPromiseArray;
};

},{"./util.js":110}],105:[function(require,module,exports){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
"use strict";
module.exports =
function(Promise, Promise$_CreatePromiseArray, PromiseArray, apiRejection) {

var SomePromiseArray = require("./some_promise_array.js")(PromiseArray);
function Promise$_Some(promises, howMany, useBound) {
    if ((howMany | 0) !== howMany || howMany < 0) {
        return apiRejection("expecting a positive integer");
    }
    var ret = Promise$_CreatePromiseArray(
        promises,
        SomePromiseArray,
        useBound === true && promises._isBound()
            ? promises._boundTo
            : void 0
   );
    var promise = ret.promise();
    if (promise.isRejected()) {
        return promise;
    }
    ret.setHowMany(howMany);
    ret.init();
    return promise;
}

Promise.some = function Promise$Some(promises, howMany) {
    return Promise$_Some(promises, howMany, false);
};

Promise.prototype.some = function Promise$some(count) {
    return Promise$_Some(this, count, true);
};

};

},{"./some_promise_array.js":106}],106:[function(require,module,exports){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
"use strict";
module.exports = function (PromiseArray) {
var util = require("./util.js");
var RangeError = require("./errors.js").RangeError;
var inherits = util.inherits;
var isArray = util.isArray;

function SomePromiseArray(values, boundTo) {
    this.constructor$(values, boundTo);
    this._howMany = 0;
    this._unwrap = false;
    this._initialized = false;
}
inherits(SomePromiseArray, PromiseArray);

SomePromiseArray.prototype._init = function SomePromiseArray$_init() {
    if (!this._initialized) {
        return;
    }
    if (this._howMany === 0) {
        this._resolve([]);
        return;
    }
    this._init$(void 0, -2);
    var isArrayResolved = isArray(this._values);
    this._holes = isArrayResolved ? this._values.length - this.length() : 0;

    if (!this._isResolved() &&
        isArrayResolved &&
        this._howMany > this._canPossiblyFulfill()) {
        var message = "(Promise.some) input array contains less than " +
                        this._howMany  + " promises";
        this._reject(new RangeError(message));
    }
};

SomePromiseArray.prototype.init = function SomePromiseArray$init() {
    this._initialized = true;
    this._init();
};

SomePromiseArray.prototype.setUnwrap = function SomePromiseArray$setUnwrap() {
    this._unwrap = true;
};

SomePromiseArray.prototype.howMany = function SomePromiseArray$howMany() {
    return this._howMany;
};

SomePromiseArray.prototype.setHowMany =
function SomePromiseArray$setHowMany(count) {
    if (this._isResolved()) return;
    this._howMany = count;
};

SomePromiseArray.prototype._promiseFulfilled =
function SomePromiseArray$_promiseFulfilled(value) {
    if (this._isResolved()) return;
    this._addFulfilled(value);
    if (this._fulfilled() === this.howMany()) {
        this._values.length = this.howMany();
        if (this.howMany() === 1 && this._unwrap) {
            this._resolve(this._values[0]);
        }
        else {
            this._resolve(this._values);
        }
    }

};
SomePromiseArray.prototype._promiseRejected =
function SomePromiseArray$_promiseRejected(reason) {
    if (this._isResolved()) return;
    this._addRejected(reason);
    if (this.howMany() > this._canPossiblyFulfill()) {
        if (this._values.length === this.length()) {
            this._reject([]);
        }
        else {
            this._reject(this._values.slice(this.length() + this._holes));
        }
    }
};

SomePromiseArray.prototype._fulfilled = function SomePromiseArray$_fulfilled() {
    return this._totalResolved;
};

SomePromiseArray.prototype._rejected = function SomePromiseArray$_rejected() {
    return this._values.length - this.length() - this._holes;
};

SomePromiseArray.prototype._addRejected =
function SomePromiseArray$_addRejected(reason) {
    this._values.push(reason);
};

SomePromiseArray.prototype._addFulfilled =
function SomePromiseArray$_addFulfilled(value) {
    this._values[this._totalResolved++] = value;
};

SomePromiseArray.prototype._canPossiblyFulfill =
function SomePromiseArray$_canPossiblyFulfill() {
    return this.length() - this._rejected();
};

return SomePromiseArray;
};

},{"./errors.js":82,"./util.js":110}],107:[function(require,module,exports){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
"use strict";
module.exports = function(Promise) {
function PromiseInspection(promise) {
    if (promise !== void 0) {
        this._bitField = promise._bitField;
        this._settledValue = promise.isResolved()
            ? promise._settledValue
            : void 0;
    }
    else {
        this._bitField = 0;
        this._settledValue = void 0;
    }
}

PromiseInspection.prototype.isFulfilled =
Promise.prototype.isFulfilled = function Promise$isFulfilled() {
    return (this._bitField & 268435456) > 0;
};

PromiseInspection.prototype.isRejected =
Promise.prototype.isRejected = function Promise$isRejected() {
    return (this._bitField & 134217728) > 0;
};

PromiseInspection.prototype.isPending =
Promise.prototype.isPending = function Promise$isPending() {
    return (this._bitField & 402653184) === 0;
};

PromiseInspection.prototype.value =
Promise.prototype.value = function Promise$value() {
    if (!this.isFulfilled()) {
        throw new TypeError("cannot get fulfillment value of a non-fulfilled promise");
    }
    return this._settledValue;
};

PromiseInspection.prototype.error =
Promise.prototype.reason = function Promise$reason() {
    if (!this.isRejected()) {
        throw new TypeError("cannot get rejection reason of a non-rejected promise");
    }
    return this._settledValue;
};

PromiseInspection.prototype.isResolved =
Promise.prototype.isResolved = function Promise$isResolved() {
    return (this._bitField & 402653184) > 0;
};

Promise.prototype.inspect = function Promise$inspect() {
    return new PromiseInspection(this);
};

Promise.PromiseInspection = PromiseInspection;
};

},{}],108:[function(require,module,exports){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
"use strict";
module.exports = function(Promise, INTERNAL) {
var util = require("./util.js");
var canAttach = require("./errors.js").canAttach;
var errorObj = util.errorObj;
var isObject = util.isObject;

function getThen(obj) {
    try {
        return obj.then;
    }
    catch(e) {
        errorObj.e = e;
        return errorObj;
    }
}

function Promise$_Cast(obj, originalPromise) {
    if (isObject(obj)) {
        if (obj instanceof Promise) {
            return obj;
        }
        else if (isAnyBluebirdPromise(obj)) {
            var ret = new Promise(INTERNAL);
            ret._setTrace(void 0);
            obj._then(
                ret._fulfillUnchecked,
                ret._rejectUncheckedCheckError,
                ret._progressUnchecked,
                ret,
                null
            );
            ret._setFollowing();
            return ret;
        }
        var then = getThen(obj);
        if (then === errorObj) {
            if (originalPromise !== void 0 && canAttach(then.e)) {
                originalPromise._attachExtraTrace(then.e);
            }
            return Promise.reject(then.e);
        }
        else if (typeof then === "function") {
            return Promise$_doThenable(obj, then, originalPromise);
        }
    }
    return obj;
}

var hasProp = {}.hasOwnProperty;
function isAnyBluebirdPromise(obj) {
    return hasProp.call(obj, "_promise0");
}

function Promise$_doThenable(x, then, originalPromise) {
    var resolver = Promise.defer();
    var called = false;
    try {
        then.call(
            x,
            Promise$_resolveFromThenable,
            Promise$_rejectFromThenable,
            Promise$_progressFromThenable
        );
    }
    catch(e) {
        if (!called) {
            called = true;
            var trace = canAttach(e) ? e : new Error(e + "");
            if (originalPromise !== void 0) {
                originalPromise._attachExtraTrace(trace);
            }
            resolver.promise._reject(e, trace);
        }
    }
    return resolver.promise;

    function Promise$_resolveFromThenable(y) {
        if (called) return;
        called = true;

        if (x === y) {
            var e = Promise._makeSelfResolutionError();
            if (originalPromise !== void 0) {
                originalPromise._attachExtraTrace(e);
            }
            resolver.promise._reject(e, void 0);
            return;
        }
        resolver.resolve(y);
    }

    function Promise$_rejectFromThenable(r) {
        if (called) return;
        called = true;
        var trace = canAttach(r) ? r : new Error(r + "");
        if (originalPromise !== void 0) {
            originalPromise._attachExtraTrace(trace);
        }
        resolver.promise._reject(r, trace);
    }

    function Promise$_progressFromThenable(v) {
        if (called) return;
        var promise = resolver.promise;
        if (typeof promise._progress === "function") {
            promise._progress(v);
        }
    }
}

Promise._cast = Promise$_Cast;
};

},{"./errors.js":82,"./util.js":110}],109:[function(require,module,exports){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
"use strict";
var global = require("./global.js");
var setTimeout = function(fn, ms) {
    var $_len = arguments.length;var args = new Array($_len - 2); for(var $_i = 2; $_i < $_len; ++$_i) {args[$_i - 2] = arguments[$_i];}
    global.setTimeout(function(){
        fn.apply(void 0, args);
    }, ms);
};

module.exports = function(Promise, INTERNAL) {
var util = require("./util.js");
var errors = require("./errors.js");
var apiRejection = require("./errors_api_rejection")(Promise);
var TimeoutError = Promise.TimeoutError;

var afterTimeout = function Promise$_afterTimeout(promise, message, ms) {
    if (!promise.isPending()) return;
    if (typeof message !== "string") {
        message = "operation timed out after" + " " + ms + " ms"
    }
    var err = new TimeoutError(message);
    errors.markAsOriginatingFromRejection(err);
    promise._attachExtraTrace(err);
    promise._rejectUnchecked(err);
};

var afterDelay = function Promise$_afterDelay(value, promise) {
    promise._fulfill(value);
};

var delay = Promise.delay = function Promise$Delay(value, ms) {
    if (ms === void 0) {
        ms = value;
        value = void 0;
    }
    ms = +ms;
    var maybePromise = Promise._cast(value, void 0);
    var promise = new Promise(INTERNAL);

    if (maybePromise instanceof Promise) {
        if (maybePromise._isBound()) {
            promise._setBoundTo(maybePromise._boundTo);
        }
        if (maybePromise._cancellable()) {
            promise._setCancellable();
            promise._cancellationParent = maybePromise;
        }
        promise._setTrace(maybePromise);
        promise._follow(maybePromise);
        return promise.then(function(value) {
            return Promise.delay(value, ms);
        });
    }
    else {
        promise._setTrace(void 0);
        setTimeout(afterDelay, ms, value, promise);
    }
    return promise;
};

Promise.prototype.delay = function Promise$delay(ms) {
    return delay(this, ms);
};

Promise.prototype.timeout = function Promise$timeout(ms, message) {
    ms = +ms;

    var ret = new Promise(INTERNAL);
    ret._setTrace(this);

    if (this._isBound()) ret._setBoundTo(this._boundTo);
    if (this._cancellable()) {
        ret._setCancellable();
        ret._cancellationParent = this;
    }
    ret._follow(this);
    setTimeout(afterTimeout, ms, ret, message, ms);
    return ret;
};

};

},{"./errors.js":82,"./errors_api_rejection":83,"./global.js":88,"./util.js":110}],110:[function(require,module,exports){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
"use strict";
var global = require("./global.js");
var es5 = require("./es5.js");
var haveGetters = (function(){
    try {
        var o = {};
        es5.defineProperty(o, "f", {
            get: function () {
                return 3;
            }
        });
        return o.f === 3;
    }
    catch (e) {
        return false;
    }

})();

var canEvaluate = (function() {
    if (typeof window !== "undefined" && window !== null &&
        typeof window.document !== "undefined" &&
        typeof navigator !== "undefined" && navigator !== null &&
        typeof navigator.appName === "string" &&
        window === global) {
        return false;
    }
    return true;
})();

function deprecated(msg) {
    if (typeof console !== "undefined" && console !== null &&
        typeof console.warn === "function") {
        console.warn("Bluebird: " + msg);
    }
}

var errorObj = {e: {}};
function tryCatch1(fn, receiver, arg) {
    try {
        return fn.call(receiver, arg);
    }
    catch (e) {
        errorObj.e = e;
        return errorObj;
    }
}

function tryCatch2(fn, receiver, arg, arg2) {
    try {
        return fn.call(receiver, arg, arg2);
    }
    catch (e) {
        errorObj.e = e;
        return errorObj;
    }
}

function tryCatchApply(fn, args, receiver) {
    try {
        return fn.apply(receiver, args);
    }
    catch (e) {
        errorObj.e = e;
        return errorObj;
    }
}

var inherits = function(Child, Parent) {
    var hasProp = {}.hasOwnProperty;

    function T() {
        this.constructor = Child;
        this.constructor$ = Parent;
        for (var propertyName in Parent.prototype) {
            if (hasProp.call(Parent.prototype, propertyName) &&
                propertyName.charAt(propertyName.length-1) !== "$"
           ) {
                this[propertyName + "$"] = Parent.prototype[propertyName];
            }
        }
    }
    T.prototype = Parent.prototype;
    Child.prototype = new T();
    return Child.prototype;
};

function asString(val) {
    return typeof val === "string" ? val : ("" + val);
}

function isPrimitive(val) {
    return val == null || val === true || val === false ||
        typeof val === "string" || typeof val === "number";

}

function isObject(value) {
    return !isPrimitive(value);
}

function maybeWrapAsError(maybeError) {
    if (!isPrimitive(maybeError)) return maybeError;

    return new Error(asString(maybeError));
}

function withAppended(target, appendee) {
    var len = target.length;
    var ret = new Array(len + 1);
    var i;
    for (i = 0; i < len; ++i) {
        ret[i] = target[i];
    }
    ret[i] = appendee;
    return ret;
}


function notEnumerableProp(obj, name, value) {
    if (isPrimitive(obj)) return obj;
    var descriptor = {
        value: value,
        configurable: true,
        enumerable: false,
        writable: true
    };
    es5.defineProperty(obj, name, descriptor);
    return obj;
}


var wrapsPrimitiveReceiver = (function() {
    return this !== "string";
}).call("string");

function thrower(r) {
    throw r;
}


function toFastProperties(obj) {
    /*jshint -W027*/
    function f() {}
    f.prototype = obj;
    return f;
    eval(obj);
}

var ret = {
    thrower: thrower,
    isArray: es5.isArray,
    haveGetters: haveGetters,
    notEnumerableProp: notEnumerableProp,
    isPrimitive: isPrimitive,
    isObject: isObject,
    canEvaluate: canEvaluate,
    deprecated: deprecated,
    errorObj: errorObj,
    tryCatch1: tryCatch1,
    tryCatch2: tryCatch2,
    tryCatchApply: tryCatchApply,
    inherits: inherits,
    withAppended: withAppended,
    asString: asString,
    maybeWrapAsError: maybeWrapAsError,
    wrapsPrimitiveReceiver: wrapsPrimitiveReceiver,
    toFastProperties: toFastProperties
};

module.exports = ret;

},{"./es5.js":84,"./global.js":88}],111:[function(require,module,exports){
"use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

/**
 * Quickstart entry point. If you want to configure things, you're probably
 * better off going custom.
 */

var extend = require("./util/extend");
var keyHandlers = require("./key-handlers");
var baseKeys = require("./stores/keys");

var KeyManager = require("./key-manager");
var MainStore = require("./stores/main");

var Db = require("./db");

var Treed = (function () {
  function Treed(options) {
    _classCallCheck(this, Treed);

    this.options = extend({
      plugins: [] }, options || {});

    this.keyManager = new KeyManager();
  }

  _prototypeProperties(Treed, null, {
    initStore: {
      value: function initStore(data, options) {
        var _this = this;

        var options = extend({
          PL: require("./pl/mem"),
          pl: null,
          actions: null }, options);

        var pl = this.pl = options.pl || new options.PL();
        var db = this.db = new Db(pl, pluginType(this.options.plugins, "db"));
        return new Promise(function (resolve, reject) {
          db.init(data, function (err) {
            if (err) return reject(err);

            var store = _this.store = new MainStore({
              actions: options.actions,
              plugins: pluginType(_this.options.plugins, "store"),
              allPlugins: _this.options.plugins,
              db: db
            });
            _this.keyManager.attach(store);
            resolve(store);
          });
        });
      },
      writable: true,
      configurable: true
    },
    on: {
      value: function on(what, handler) {
        this.store.on(what, handler);
      },
      writable: true,
      configurable: true
    },
    off: {
      value: function off(what, handler) {
        this.store.on(what, handler);
      },
      writable: true,
      configurable: true
    },
    removeView: {
      value: function removeView(id) {
        this.store.unregisterView(id);
      },
      writable: true,
      configurable: true
    },
    addView: {
      value: function addView(options) {
        options = extend({
          actions: null,
          keys: {},
          root: null }, options);

        var storeView = this.store.registerView(options.root, options.actions);
        var allKeys = extend({}, flattenKeySections(baseKeys), flattenKeySections(options.keys));

        var props = {
          plugins: pluginType(this.options.plugins, "view"),
          nodePlugins: pluginType(this.options.plugins, "node"),
          store: storeView };

        var keys = keyHandlers(allKeys, storeView.actions, pluginType(this.options.plugins, "keys"), this.options.plugins);

        this.keyManager.addView(storeView.id, keys);

        return props;
      },
      writable: true,
      configurable: true
    }
  });

  return Treed;
})();

function flattenKeySections(keys) {
  var ret = {};
  for (var name in keys) {
    for (var sub in keys[name]) {
      ret[sub] = keys[name][sub];
    }
  }
  return ret;
}

function pluginType(plugins, type) {
  if (!plugins) {
    return [];
  }return plugins.reduce(function (list, plugin) {
    if (plugin[type]) list.unshift(plugin[type]);
    return list;
  }, []);
}

module.exports = Treed;

},{"./db":112,"./key-handlers":113,"./key-manager":114,"./pl/mem":157,"./stores/keys":179,"./stores/main":180,"./util/extend":182}],112:[function(require,module,exports){
"use strict";

var uuid = require("./lib/uuid");
var verifyNodes = require("./util/verify-nodes");
var treesToMap = require("./util/trees-to-map");

module.exports = Db;

function Db(pl, plugins) {
  var _this = this;

  this.nodes = {};
  this.pl = pl;
  this.plugins = plugins || [];
  this.addNewNodeAttrs = [];
  plugins.forEach(function (plugin) {
    if (plugin.addNewNodeAttrs) {
      _this.addNewNodeAttrs.push(plugin.addNewNodeAttrs);
    }
  });
  if (!this.addNewNodeAttrs.length) {
    this.addNewNodeAttrs = false;
  }
}

Db.prototype = {
  init: function init(defaultData, done) {
    var _this = this;

    this.pl.findAll("root", function (err, roots) {
      if (err) return done(err);
      if (!roots.length) return _this.makeRoot(defaultData, done);
      _this.root = roots[0].id;
      _this.pl.findAll("node", function (err, nodes) {
        if (err) return done(err);
        var map = {};
        nodes.forEach(function (node) {
          return map[node.id] = node;
        });
        var err = verifyNodes(_this.root, map);
        if (err) {
          return done(err);
        }
        _this.nodes = map;

        done();
      });
    });
  },

  create: function create(pid, ix, content, type) {
    var id = uuid();
    var now = Date.now();
    var node = {
      id: id,
      created: now,
      modified: now,
      collapsed: true,
      content: content || "",
      type: type || "base",
      children: [],
      parent: pid };
    if (this.addNewNodeAttrs) {
      this.addNewNodeAttrs.map(function (fn) {
        return fn(node);
      });
    }
    this.save(id, node);
    this.insertChild(pid, id, ix);
    return id;
  },

  // dump children INTO the pid at index ix
  dump: function dump(pid, children, ix, done) {
    var _this = this;

    var mapped = treesToMap(children, pid, true);
    this.batchSave(mapped.nodes, function (err) {
      if (err) return done(err);
      var oldChildren = _this.nodes[pid].children;
      if (!ix && ix !== 0) {
        children = oldChildren.concat(mapped.roots);
      } else {
        children = oldChildren.slice();[].splice.apply(children, [ix, 0].concat(mapped.roots));
      }
      _this.set(pid, "children", children, function (err) {
        done(err, { ids: mapped.roots, oldChildren: oldChildren });
      });
    });
  },

  exportTree: function exportTree(pid, keepIds) {
    var _this = this;

    pid = pid || this.root;
    var node = this.nodes[pid],
        out = { id: pid };
    for (var name in node) {
      out[name] = node[name];
    }
    out.children = node.children.map(function (id) {
      return _this.exportTree(id, keepIds);
    });
    if (!keepIds) delete out.id;
    delete out.parent;
    return out;
  },

  exportMany: function exportMany(ids, keepIds) {
    var _this = this;

    return ids.map(function (id) {
      return _this.exportTree(id, keepIds);
    });
  },

  makeRoot: function makeRoot(defaultData, done) {
    var _this = this;

    this.root = defaultData && defaultData.id || uuid();
    this.pl.save("root", this.root, { id: this.root }, function (err) {
      if (err) return done(err);
      _this.nodes = {};
      var now = Date.now();
      _this.nodes[_this.root] = {
        id: _this.root,
        created: now,
        modified: now,
        content: defaultData.content || "Home",
        parent: null,
        children: []
      };
      _this.pl.save("node", _this.root, _this.nodes[_this.root], function (err) {
        if (err) return done(err);
        _this.dump(_this.root, defaultData.children, null, done);
      });
    });
  },

  batchSave: function batchSave(nodes, done) {
    for (var id in nodes) {
      this.nodes[id] = nodes[id];
      this.nodes[id].modified = Date.now();
    }
    this.pl.batchSave("node", nodes, done);
  },

  save: function save(id, value, modified) {
    this.nodes[id] = value;
    this.nodes[id].modified = modified || Date.now();
    this.pl.save("node", id, value);
  },

  set: function set(id, attr, value, done) {
    this.nodes[id][attr] = value;
    this.nodes[id].modified = Date.now();
    this.pl.set("node", id, attr, value, done);
  },

  remove: function remove(id) {
    delete this.nodes[id];
    this.pl.remove("node", id);
  },

  removeMany: function removeMany(ids) {
    ids.forEach(this.remove.bind(this));
  },

  saveMany: function saveMany(nodes) {
    var _this = this;

    nodes.forEach(function (node) {
      return _this.save(node.id, node);
    });
  },

  // returns the old index
  removeChild: function removeChild(pid, id, count) {
    count = count || 1;
    var ix = this.nodes[pid].children.indexOf(id);
    if (ix === -1) {
      return -1;
    }var ch = this.nodes[pid].children.slice();
    ch.splice(ix, count);
    this.set(pid, "children", ch);
    return ix;
  },

  insertChild: function insertChild(pid, id, ix) {
    var ch = this.nodes[pid].children.slice();
    ch.splice(ix, 0, id);
    this.set(pid, "children", ch);
    return ix;
  },

  insertChildren: function insertChildren(pid, ids, ix) {
    var ch = this.nodes[pid].children.slice();
    ch.splice.apply(ch, [ix, 0].concat(ids));
    this.set(pid, "children", ch);
    return ix;
  },

  setMany: function setMany(attr, ids, value, done) {
    var _this = this;

    var now = Date.now();
    if (Array.isArray(value)) {
      ids.forEach(function (id, i) {
        _this.nodes[id][attr] = value[i];
        _this.nodes[id].modified = now;
      });
    } else {
      ids.forEach(function (id, i) {
        _this.nodes[id][attr] = value;
        _this.nodes[id].modified = now;
      });
    }
    this.pl.batchSet("node", attr, ids, value, done);
  },

  update: (function (_update) {
    var _updateWrapper = function update(_x, _x2, _x3) {
      return _update.apply(this, arguments);
    };

    _updateWrapper.toString = function () {
      return _update.toString();
    };

    return _updateWrapper;
  })(function (id, update, done) {
    for (var name in update) {
      this.nodes[id][name] = update[name];
    }
    this.nodes[id].modified = Date.now();
    this.pl.update("node", id, update, done);
  }) };

},{"./lib/uuid":117,"./util/trees-to-map":184,"./util/verify-nodes":185}],113:[function(require,module,exports){
"use strict";

var keyHandler = require("./lib/keys");

module.exports = keyHandlers;

function keyHandlers(keys, actions, plugins, allPlugins) {
  var modes = ["visual", "normal", "insert"];

  var collected = {};
  modes.forEach(function (mode) {
    return collected[mode] = {};
  });

  var typed = {};
  modes.forEach(function (mode) {
    return typed[mode] = {};
  });

  var collect = function collect(keys) {
    if ("function" === typeof keys) {
      keys = keys(allPlugins);
    }
    for (var actionName in keys) {
      modes.forEach(function (mode) {
        if (keys[actionName][mode]) {
          if (keys[actionName].type) {
            if (!typed[mode][keys[actionName][mode]]) {
              typed[mode][keys[actionName][mode]] = {};
            }
            typed[mode][keys[actionName][mode]][keys[actionName].type] = actionName;
          } else {
            collected[mode][actionName] = keys[actionName][mode];
          }
        }
      });
    }
  };

  collect(keys);

  if (plugins) {
    plugins.forEach(collect);
  }

  return {
    visual: bindKeys(collected.visual, typed.visual, actions),
    normal: bindKeys(collected.normal, typed.normal, actions),
    insert: bindKeys(collected.insert, typed.insert, actions) };
}

function camel(actionName) {
  return actionName.replace(/ (\w)/g, function (full, letter) {
    return letter.toUpperCase();
  });
}

function bindKeys(keys, typed, actions) {
  var binds = {};
  Object.keys(keys).forEach(function (actionName) {
    var action = camel(actionName);
    if (!actions[action]) {
      // throw new Error('Unknown action: ' + camel(actionName))
      return;
    }
    binds[keys[actionName]] = function () {
      return actions[action]();
    };
  });

  Object.keys(typed).forEach(function (keyBinding) {
    var camels = {};
    for (var type in typed[keyBinding]) {
      camels[type] = camel(typed[keyBinding][type]);
      if (!actions[camels[type]]) {
        throw new Error("Unknown action: " + camels[type]);
      }
    }
    /*
    if (Object.keys(camels).length === 1) {
      binds[typed[name]] = function(){return actions[action]()}
    }
    */
    binds[keyBinding] = function () {
      var id = actions.view.active;
      type = actions.db.nodes[id].type || "base";
      if (!camels[type]) {
        return console.warn("Keybinding not defined for type: " + type);
      }
      return actions[camels[type]](id);
    };
  });

  return keyHandler(binds);
}

},{"./lib/keys":116}],114:[function(require,module,exports){
"use strict";

var keys = require("./lib/keys");

module.exports = KeyManager;

function KeyManager() {
  this._keyDown = this.keyDown.bind(this);
  this.keys = null;
  this.store = null;
  this.state = {};
  this.views = {};
}

KeyManager.prototype = {
  attach: function attach(store) {
    this.store = store;
    store.on([store.events.activeViewChanged(), store.events.activeModeChanged()], this.update.bind(this));
    this.update();
  },

  update: function update() {
    if (!this.store.views[this.store.activeView]) {
      return;
    }this.state = {
      active: this.store.activeView,
      mode: this.store.views[this.store.activeView].mode };
  },

  addView: function addView(vid, keys) {
    this.views[vid] = keys;
  },

  add: function add(config) {
    if (this.keys) {
      return this.keys.add(config);
    }this.keys = keys(config);
    return null;
  },

  remove: function remove(lid) {
    if (!this.keys) {
      return false;
    }return this.keys.remove(lid);
  },

  disable: function disable() {
    this.keys.disable();
  },
  enable: function enable() {
    this.keys.enable();
  },

  addKeys: function addKeys(config) {
    if (this.keys) {
      return this.keys.add(config);
    }this.keys = keys(config);
  },

  keyDown: function keyDown(e) {
    var res;
    if (this.keys) {
      res = this.keys(e);
      if (typeof res !== "string" && res !== true) {
        if (this.store) {
          this.views[this.state.active][this.state.mode].clear();
        }
        return res;
      } else if (res === true) {
        res = undefined;
      }
    }
    if (this.store) {
      this.views[this.state.active][this.state.mode](e, res);
    }
  },

  listen: function listen(window) {
    this._keyDown = this.keyDown.bind(this);
    window.addEventListener("keydown", this._keyDown);
  },

  unlisten: function unlisten(window) {
    window.removeEventListener("keydown", this._keyDown);
  } };

},{"./lib/keys":116}],115:[function(require,module,exports){
"use strict";

var React = require("react/addons"),
    cx = React.addons.classSet,
    PT = React.PropTypes;

var ContextMenu = React.createClass({
  displayName: "ContextMenu",

  propTypes: {
    onClose: PT.func.isRequired,
    onSelect: PT.func,
    config: PT.object },

  _onMouseDown: function _onMouseDown(e) {
    e.stopPropagation();
  },

  _onSelect: function _onSelect(item) {
    if (this.props.onSelect) this.props.onSelect(item);
    this.props.onClose();
  },

  render: function render() {
    return React.createElement(
      "div",
      {
        style: {
          top: this.props.y,
          left: this.props.x,
          zIndex: 1000 },
        onMouseDown: this._onMouseDown,
        className: "ContextMenu" },
      React.createElement(MenuBody, {
        onSelect: this._onSelect,
        onClose: this.props.onClose,
        items: this.props.config,
        zIndex: 1000 })
    );
  } });

var MenuItem = React.createClass({
  displayName: "MenuItem",

  propTypes: {
    config: PT.object,
    selected: PT.bool,
    onSelect: PT.func,
    onHover: PT.func,
    onClose: PT.func,
    zIndex: PT.number },

  _onClick: function _onClick() {
    if (this.props.config.disabled) {
      return;
    }if (this.props.config.action) {
      this.props.config.action();
      return this.props.onClose();
    }
    this.props.onSelect(this.props.config);
  },

  render: function render() {
    return React.createElement(
      "div",
      { className: cx({
          ContextMenu_item: true,
          "ContextMenu_item-selected": this.props.selected,
          "ContextMenu_item-disabled": this.props.config.disabled,
          "ContextMenu_item-parent": this.props.config.children && this.props.config.children.length }) },
      React.createElement(
        "div",
        { className: "ContextMenu_item_title",
          onMouseOver: this.props.onHover,
          onClick: this._onClick },
        this.props.config.title,
        this.props.config.shortcut && React.createElement(
          "span",
          { className: "ContextMenu_item_shortcut" },
          this.props.config.shortcut
        )
      ),
      this.props.selected && this.props.config.children && React.createElement(MenuBody, {
        onClose: this.props.onClose,
        onSelect: this.props.onSelect,

        zIndex: this.props.zIndex + 1,
        items: this.props.config.children })
    );
  }
});

var MenuBody = React.createClass({
  displayName: "MenuBody",

  propTypes: {
    items: PT.array,
    zIndex: PT.number,

    onClose: PT.func,
    onSelect: PT.func },

  getInitialState: function getInitialState() {
    return {
      selected: null
    };
  },

  _onHover: function _onHover(i) {
    this.setState({ selected: i });
  },

  render: function render() {
    var _this = this;

    return React.createElement(
      "ul",
      { className: "ContextMenu_body", style: { zIndex: this.props.zIndex } },
      this.props.items.map(function (item, i) {
        return React.createElement(MenuItem, {
          config: item,
          zIndex: _this.props.zIndex,
          onClose: _this.props.onClose,
          onSelect: _this.props.onSelect,
          onHover: _this._onHover.bind(null, i),
          selected: _this.state.selected === i });
      })
    );
  } });

ContextMenu.show = function (definition, x, y, onSelect) {
  var node = document.createElement("div");
  document.body.appendChild(node);
  var closeOut = (function (_closeOut) {
    var _closeOutWrapper = function closeOut(_x) {
      return _closeOut.apply(this, arguments);
    };

    _closeOutWrapper.toString = function () {
      return _closeOut.toString();
    };

    return _closeOutWrapper;
  })(function (e) {
    window.removeEventListener("mousedown", closeOut);
    if (!node.parentNode) return;
    document.body.removeChild(node);
  });
  window.addEventListener("mousedown", closeOut);

  React.render(React.createElement(ContextMenu, {
    x: x, y: y,
    config: definition,
    onSelect: onSelect,
    onClose: closeOut }), node);
};

module.exports = ContextMenu;
/* this.props.config.icon &&
<img src={this.props.config.icon}/> */

},{"react/addons":"react/addons"}],116:[function(require,module,exports){
"use strict";

module.exports = keys;

keys.keyName = keyName;

var KEYS = {
  8: "backspace",
  9: "tab",
  13: "enter",
  27: "escape",
  32: "space",
  33: "page-up",
  34: "page-down",
  35: "end",
  36: "home",
  37: "left",
  38: "up",
  39: "right",
  40: "down",
  46: "delete",
  113: "f2",
  186: ";",
  188: "comma",
  190: ".",
  191: "/",
  219: "[",
  221: "]"
};

/** TODO
var SHIFT_KEYS = {
  '?': '/',
  'D': 'd',
}
*/

function keyName(code) {
  if (code <= 90 && code >= 65) {
    return String.fromCharCode(code + 32);
  }
  if (code >= 48 && code <= 57) {
    return String.fromCharCode(code);
  }
  return KEYS[code];
}

function makeLayer(config) {
  var layer = { kmap: {}, prefixes: {} },
      parts,
      part,
      seq;
  for (var key in config) {
    parts = key.split(",");
    for (var i = 0; i < parts.length; i++) {
      part = parts[i].trim();
      /** TODO
      if (SHIFT_KEYS[part]) {
        part = 'shift+' + SHIFT_KEYS[part]
      }
      */
      if (window.DEBUG_KEYS && layer.kmap[part]) {
        console.log("Overrifing key:", part);
      }
      layer.kmap[part] = config[key];
      if (part.indexOf(" ") !== -1) {
        seq = part.split(/\s+/g);
        var n = "";
        for (var j = 0; j < seq.length - 1; j++) {
          /** TODO
          if (SHIFT_KEYS[seq[j]]) {
            seq[j] = 'shift+' + SHIFT_KEYS[seq[j]]
          }
          */
          n += seq[j];
          layer.prefixes[n] = true;
          n += " ";
        }
      }
    }
  }
  return layer;
}

function modKeyName(e) {
  var key = keyName(e.keyCode);
  if (!key) {
    if (window.DEBUG_KEYS) {
      console.log(e.keyCode);
    }
    return null;
  }
  if (e.altKey) key = "alt+" + key;
  if (e.shiftKey) key = "shift+" + key;
  if (e.ctrlKey) key = "ctrl+" + key;
  if (e.metaKey) key = "cmd+" + key;
  return key;
}

function keys(config) {
  var kmap = {},
      prefixes = {},
      cur_prefix = null,
      disabled = false,
      layer_ids = [],
      layers = {},
      id = 1;

  function addLayer(config) {
    var layer = makeLayer(config),
        lid = id++;
    layer_ids.push(lid);
    layers[lid] = layer;
    return lid;
  }

  function removeLayer(lid) {
    if (!layers[lid]) {
      return false;
    }var ix = layer_ids.indexOf(lid);
    layer_ids.splice(ix, 1);
    delete layers[lid];
    return true;
  }

  function handleLayer(layer, key) {
    if (layer.kmap[key]) {
      return layer.kmap[key];
    }
    if (layer.prefixes[key]) {
      return key;
    } else {
      return null;
    }
  }

  function findAction(key) {
    if (cur_prefix) {
      key = cur_prefix.key + " " + key;
      var got = handleLayer(layers[cur_prefix.lid], key);
      if ("string" === typeof got) {
        cur_prefix.key = got;
        return cur_prefix.key;
      }
      cur_prefix = null;
      if (got === null) {
        return true;
      }
      return got;
    }
    for (var i = layer_ids.length - 1; i >= 0; i--) {
      var got = handleLayer(layers[layer_ids[i]], key);
      if (got === null) continue;
      if ("string" === typeof got) {
        cur_prefix = {
          key: got,
          lid: layer_ids[i] };
        return cur_prefix.key;
      }
      return got;
    }
    return true;
  }

  function handler(e, prefix) {
    if (disabled) {
      return;
    }var key = modKeyName(e);
    if (window.DEBUG_KEYS) {
      console.log(key);
    }
    var action = findAction(key);
    if (prefix && (!cur_prefix || cur_prefix.key !== prefix)) {
      return;
    }if ("function" !== typeof action) {
      return action;
    }if (action.call(this, e) !== true) {
      e.preventDefault();
      e.stopPropagation();
      return false;
    }
  }

  handler.clear = function () {
    cur_prefix = null;
  };
  handler.remove = removeLayer;
  handler.add = addLayer;
  handler.add(config);
  handler.disable = function () {
    disabled = true;
  };
  handler.enable = function () {
    disabled = false;
  };
  return handler;
}

},{}],117:[function(require,module,exports){
"use strict";

module.exports = uuid;

var CHARS = "0123456789abcdefghijklmnopqrstuvwxyz";
function uuid(ln) {
  ln = ln || 32;
  var id = "";
  for (var i = 0; i < ln; i++) {
    id += CHARS[parseInt(Math.random() * CHARS.length)];
  }
  return id;
}

},{}],118:[function(require,module,exports){
"use strict";

var Promise = require("bluebird");
var React = require("react/addons");
var PT = React.PropTypes;

module.exports = function (options) {
  if ("function" === typeof options) {
    options = {
      storeAttrs: options };
  }

  var pluginUpdates = [];

  var plugin = {
    propTypes: {
      store: PT.object.isRequired },

    getInitialState: function getInitialState() {
      var state = options.storeAttrs.call(this, this.props.store.getters, this.props);
      var extra;
      if (options.initStoreState) {
        extra = options.initStoreState.call(this, state, this.props.store.getters, this.props);
        for (var name in extra) state[name] = extra[name];
      }
      for (var i = 0; i < pluginUpdates.length; i++) {
        extra = pluginUpdates[i].call(this, state, this.props.store.getters, this.props);
        for (name in extra) state[name] = extra[name];
      }
      return state;
    },

    listen: function listen() {
      var changes = [].slice.call(arguments);
      if (arguments.length === 1 && Array.isArray(arguments[0])) {
        changes = arguments[0];
      }

      pluginUpdates = [];
      if (this.props.plugins) {
        this.props.plugins.forEach(function (plugin) {
          if (!plugin.listener) return;
          if (plugin.listener.updateStoreState) {
            pluginUpdates.push(plugin.listener.updateStoreState);
          }
          if (plugin.listener.changes) {
            changes = changes.concat(plugin.listener.changes);
          }
        });
      }

      this.props.store.on(changes, this._gotChanges);
      // save it for later so we can remove the listener on unmount
      if (!this._flux) this._flux = [];
      this._flux.push([changes, this._gotChanges]);
    },

    _gotChanges: function _gotChanges() {
      // if DEBUG
      var state = options.storeAttrs.call(this, this.props.store.getters, this.props);
      var extra, name;
      if (options.updateStoreState) {
        extra = options.updateStoreState.call(this, state, this.props.store.getters, this.props);
        for (name in extra) state[name] = extra[name];
      }
      for (var i = 0; i < pluginUpdates.length; i++) {
        extra = pluginUpdates[i].call(this, state, this.props.store.getters, this.props);
        for (name in extra) state[name] = extra[name];
      }
      if (window.DEBUG_CHANGES) {
        console.log("got changes", state);
      }
      var p = Promise.pending();
      this.setState(state, function () {
        p.resolve();
      });
      return p;
    },

    _stopListening: function _stopListening(store) {
      store = store || this.props.store;
      for (var i = 0; i < this._flux.length; i++) {
        store.off(this._flux[i][0], this._flux[i][1]);
      }
      this._flux = null;
    },

    componentWillUnmount: function componentWillUnmount() {
      if (!this._flux) {
        return;
      }this._stopListening();
    } };

  if (options.shouldGetNew) {
    plugin.componentWillReceiveProps = function (nextProps) {
      if (options.shouldGetNew.call(this, nextProps)) {
        if (options.getListeners) {
          this._stopListening();
          this.listen(options.getListeners(nextProps, nextProps.store.events));
        }
        var state = options.storeAttrs.call(this, nextProps.store.getters, nextProps);
        var extra;
        if (options.initStoreState) {
          extra = options.initStoreState.call(this, state, nextProps.store.getters, nextProps);
          for (var name in extra) state[name] = extra[name];
        }
        this.setState(state);
      }
    };
  }

  if (options.getListeners) {
    plugin.componentWillMount = function () {
      this.listen(options.getListeners(this.props, this.props.store.events));
    };
    plugin.componentDidUpdate = function (prevProps) {
      if (this.props.store !== prevProps.store) {
        this._stopListening(prevProps.store);
        this.listen(options.getListeners(this.props, this.props.store.events));
      }
    };
  }
  return plugin;
};

},{"bluebird":121,"react/addons":"react/addons"}],119:[function(require,module,exports){
arguments[4][74][0].apply(exports,arguments)
},{"./some_promise_array.js":151,"dup":74}],120:[function(require,module,exports){
arguments[4][75][0].apply(exports,arguments)
},{"./global.js":133,"./queue.js":144,"./schedule.js":147,"./util.js":155,"dup":75}],121:[function(require,module,exports){
arguments[4][76][0].apply(exports,arguments)
},{"./promise.js":137,"dup":76}],122:[function(require,module,exports){
arguments[4][77][0].apply(exports,arguments)
},{"dup":77}],123:[function(require,module,exports){
arguments[4][78][0].apply(exports,arguments)
},{"./async.js":120,"./errors.js":127,"dup":78}],124:[function(require,module,exports){
arguments[4][79][0].apply(exports,arguments)
},{"./es5.js":129,"./util.js":155,"dup":79}],125:[function(require,module,exports){
arguments[4][80][0].apply(exports,arguments)
},{"./errors.js":127,"./es5.js":129,"./util.js":155,"dup":80}],126:[function(require,module,exports){
arguments[4][81][0].apply(exports,arguments)
},{"./util.js":155,"dup":81}],127:[function(require,module,exports){
arguments[4][82][0].apply(exports,arguments)
},{"./es5.js":129,"./global.js":133,"./util.js":155,"dup":82}],128:[function(require,module,exports){
arguments[4][83][0].apply(exports,arguments)
},{"./errors.js":127,"dup":83}],129:[function(require,module,exports){
arguments[4][84][0].apply(exports,arguments)
},{"dup":84}],130:[function(require,module,exports){
arguments[4][85][0].apply(exports,arguments)
},{"./util.js":155,"dup":85}],131:[function(require,module,exports){
arguments[4][86][0].apply(exports,arguments)
},{"./util.js":155,"dup":86}],132:[function(require,module,exports){
arguments[4][87][0].apply(exports,arguments)
},{"./errors.js":127,"./promise_spawn.js":140,"./util.js":155,"dup":87}],133:[function(require,module,exports){
(function (global){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
module.exports = (function() {
    if (this !== void 0) return this;
    try {return global;}
    catch(e) {}
    try {return window;}
    catch(e) {}
    try {return self;}
    catch(e) {}
})();

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],134:[function(require,module,exports){
arguments[4][89][0].apply(exports,arguments)
},{"./errors.js":127,"./util.js":155,"dup":89}],135:[function(require,module,exports){
arguments[4][90][0].apply(exports,arguments)
},{"./async.js":120,"./util.js":155,"dup":90}],136:[function(require,module,exports){
arguments[4][91][0].apply(exports,arguments)
},{"./async.js":120,"./errors.js":127,"./util.js":155,"dup":91}],137:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
"use strict";
module.exports = function() {
var global = require("./global.js");
var util = require("./util.js");
var async = require("./async.js");
var errors = require("./errors.js");

var INTERNAL = function(){};
var APPLY = {};
var NEXT_FILTER = {e: null};

var PromiseArray = require("./promise_array.js")(Promise, INTERNAL);
var CapturedTrace = require("./captured_trace.js")();
var CatchFilter = require("./catch_filter.js")(NEXT_FILTER);
var PromiseResolver = require("./promise_resolver.js");

var isArray = util.isArray;

var errorObj = util.errorObj;
var tryCatch1 = util.tryCatch1;
var tryCatch2 = util.tryCatch2;
var tryCatchApply = util.tryCatchApply;
var RangeError = errors.RangeError;
var TypeError = errors.TypeError;
var CancellationError = errors.CancellationError;
var TimeoutError = errors.TimeoutError;
var RejectionError = errors.RejectionError;
var originatesFromRejection = errors.originatesFromRejection;
var markAsOriginatingFromRejection = errors.markAsOriginatingFromRejection;
var canAttach = errors.canAttach;
var thrower = util.thrower;
var apiRejection = require("./errors_api_rejection")(Promise);


var makeSelfResolutionError = function Promise$_makeSelfResolutionError() {
    return new TypeError("circular promise resolution chain");
};

function isPromise(obj) {
    if (obj === void 0) return false;
    return obj instanceof Promise;
}

function isPromiseArrayProxy(receiver, promiseSlotValue) {
    if (receiver instanceof PromiseArray) {
        return promiseSlotValue >= 0;
    }
    return false;
}

function Promise(resolver) {
    if (typeof resolver !== "function") {
        throw new TypeError("the promise constructor requires a resolver function");
    }
    if (this.constructor !== Promise) {
        throw new TypeError("the promise constructor cannot be invoked directly");
    }
    this._bitField = 0;
    this._fulfillmentHandler0 = void 0;
    this._rejectionHandler0 = void 0;
    this._promise0 = void 0;
    this._receiver0 = void 0;
    this._settledValue = void 0;
    this._boundTo = void 0;
    if (resolver !== INTERNAL) this._resolveFromResolver(resolver);
}

Promise.prototype.bind = function Promise$bind(thisArg) {
    var ret = new Promise(INTERNAL);
    ret._setTrace(this);
    ret._follow(this);
    ret._setBoundTo(thisArg);
    if (this._cancellable()) {
        ret._setCancellable();
        ret._cancellationParent = this;
    }
    return ret;
};

Promise.prototype.toString = function Promise$toString() {
    return "[object Promise]";
};

Promise.prototype.caught = Promise.prototype["catch"] =
function Promise$catch(fn) {
    var len = arguments.length;
    if (len > 1) {
        var catchInstances = new Array(len - 1),
            j = 0, i;
        for (i = 0; i < len - 1; ++i) {
            var item = arguments[i];
            if (typeof item === "function") {
                catchInstances[j++] = item;
            }
            else {
                var catchFilterTypeError =
                    new TypeError(
                        "A catch filter must be an error constructor "
                        + "or a filter function");

                this._attachExtraTrace(catchFilterTypeError);
                async.invoke(this._reject, this, catchFilterTypeError);
                return;
            }
        }
        catchInstances.length = j;
        fn = arguments[i];

        this._resetTrace();
        var catchFilter = new CatchFilter(catchInstances, fn, this);
        return this._then(void 0, catchFilter.doFilter, void 0,
            catchFilter, void 0);
    }
    return this._then(void 0, fn, void 0, void 0, void 0);
};

Promise.prototype.then =
function Promise$then(didFulfill, didReject, didProgress) {
    return this._then(didFulfill, didReject, didProgress,
        void 0, void 0);
};


Promise.prototype.done =
function Promise$done(didFulfill, didReject, didProgress) {
    var promise = this._then(didFulfill, didReject, didProgress,
        void 0, void 0);
    promise._setIsFinal();
};

Promise.prototype.spread = function Promise$spread(didFulfill, didReject) {
    return this._then(didFulfill, didReject, void 0,
        APPLY, void 0);
};

Promise.prototype.isCancellable = function Promise$isCancellable() {
    return !this.isResolved() &&
        this._cancellable();
};

Promise.prototype.toJSON = function Promise$toJSON() {
    var ret = {
        isFulfilled: false,
        isRejected: false,
        fulfillmentValue: void 0,
        rejectionReason: void 0
    };
    if (this.isFulfilled()) {
        ret.fulfillmentValue = this._settledValue;
        ret.isFulfilled = true;
    }
    else if (this.isRejected()) {
        ret.rejectionReason = this._settledValue;
        ret.isRejected = true;
    }
    return ret;
};

Promise.prototype.all = function Promise$all() {
    return Promise$_all(this, true);
};


Promise.is = isPromise;

function Promise$_all(promises, useBound) {
    return Promise$_CreatePromiseArray(
        promises,
        PromiseArray,
        useBound === true && promises._isBound()
            ? promises._boundTo
            : void 0
   ).promise();
}
Promise.all = function Promise$All(promises) {
    return Promise$_all(promises, false);
};

Promise.join = function Promise$Join() {
    var $_len = arguments.length;var args = new Array($_len); for(var $_i = 0; $_i < $_len; ++$_i) {args[$_i] = arguments[$_i];}
    return Promise$_CreatePromiseArray(args, PromiseArray, void 0).promise();
};

Promise.resolve = Promise.fulfilled =
function Promise$Resolve(value) {
    var ret = new Promise(INTERNAL);
    ret._setTrace(void 0);
    if (ret._tryFollow(value)) {
        return ret;
    }
    ret._cleanValues();
    ret._setFulfilled();
    ret._settledValue = value;
    return ret;
};

Promise.reject = Promise.rejected = function Promise$Reject(reason) {
    var ret = new Promise(INTERNAL);
    ret._setTrace(void 0);
    markAsOriginatingFromRejection(reason);
    ret._cleanValues();
    ret._setRejected();
    ret._settledValue = reason;
    if (!canAttach(reason)) {
        var trace = new Error(reason + "");
        ret._setCarriedStackTrace(trace);
    }
    ret._ensurePossibleRejectionHandled();
    return ret;
};

Promise.prototype.error = function Promise$_error(fn) {
    return this.caught(originatesFromRejection, fn);
};

Promise.prototype._resolveFromSyncValue =
function Promise$_resolveFromSyncValue(value) {
    if (value === errorObj) {
        this._cleanValues();
        this._setRejected();
        this._settledValue = value.e;
        this._ensurePossibleRejectionHandled();
    }
    else {
        var maybePromise = Promise._cast(value, void 0);
        if (maybePromise instanceof Promise) {
            this._follow(maybePromise);
        }
        else {
            this._cleanValues();
            this._setFulfilled();
            this._settledValue = value;
        }
    }
};

Promise.method = function Promise$_Method(fn) {
    if (typeof fn !== "function") {
        throw new TypeError("fn must be a function");
    }
    return function Promise$_method() {
        var value;
        switch(arguments.length) {
        case 0: value = tryCatch1(fn, this, void 0); break;
        case 1: value = tryCatch1(fn, this, arguments[0]); break;
        case 2: value = tryCatch2(fn, this, arguments[0], arguments[1]); break;
        default:
            var $_len = arguments.length;var args = new Array($_len); for(var $_i = 0; $_i < $_len; ++$_i) {args[$_i] = arguments[$_i];}
            value = tryCatchApply(fn, args, this); break;
        }
        var ret = new Promise(INTERNAL);
        ret._setTrace(void 0);
        ret._resolveFromSyncValue(value);
        return ret;
    };
};

Promise.attempt = Promise["try"] = function Promise$_Try(fn, args, ctx) {
    if (typeof fn !== "function") {
        return apiRejection("fn must be a function");
    }
    var value = isArray(args)
        ? tryCatchApply(fn, args, ctx)
        : tryCatch1(fn, ctx, args);

    var ret = new Promise(INTERNAL);
    ret._setTrace(void 0);
    ret._resolveFromSyncValue(value);
    return ret;
};

Promise.defer = Promise.pending = function Promise$Defer() {
    var promise = new Promise(INTERNAL);
    promise._setTrace(void 0);
    return new PromiseResolver(promise);
};

Promise.bind = function Promise$Bind(thisArg) {
    var ret = new Promise(INTERNAL);
    ret._setTrace(void 0);
    ret._setFulfilled();
    ret._setBoundTo(thisArg);
    return ret;
};

Promise.cast = function Promise$_Cast(obj) {
    var ret = Promise._cast(obj, void 0);
    if (!(ret instanceof Promise)) {
        return Promise.resolve(ret);
    }
    return ret;
};

Promise.onPossiblyUnhandledRejection =
function Promise$OnPossiblyUnhandledRejection(fn) {
        CapturedTrace.possiblyUnhandledRejection = typeof fn === "function"
                                                    ? fn : void 0;
};

var unhandledRejectionHandled;
Promise.onUnhandledRejectionHandled =
function Promise$onUnhandledRejectionHandled(fn) {
    unhandledRejectionHandled = typeof fn === "function" ? fn : void 0;
};

var debugging = false || !!(
    typeof process !== "undefined" &&
    typeof process.execPath === "string" &&
    typeof process.env === "object" &&
    (process.env["BLUEBIRD_DEBUG"] ||
        process.env["NODE_ENV"] === "development")
);


Promise.longStackTraces = function Promise$LongStackTraces() {
    if (async.haveItemsQueued() &&
        debugging === false
   ) {
        throw new Error("cannot enable long stack traces after promises have been created");
    }
    debugging = CapturedTrace.isSupported();
};

Promise.hasLongStackTraces = function Promise$HasLongStackTraces() {
    return debugging && CapturedTrace.isSupported();
};

Promise.prototype._setProxyHandlers =
function Promise$_setProxyHandlers(receiver, promiseSlotValue) {
    var index = this._length();

    if (index >= 524287 - 5) {
        index = 0;
        this._setLength(0);
    }
    if (index === 0) {
        this._promise0 = promiseSlotValue;
        this._receiver0 = receiver;
    }
    else {
        var i = index - 5;
        this[i + 3] = promiseSlotValue;
        this[i + 4] = receiver;
        this[i + 0] =
        this[i + 1] =
        this[i + 2] = void 0;
    }
    this._setLength(index + 5);
};

Promise.prototype._proxyPromiseArray =
function Promise$_proxyPromiseArray(promiseArray, index) {
    this._setProxyHandlers(promiseArray, index);
};

Promise.prototype._proxyPromise = function Promise$_proxyPromise(promise) {
    promise._setProxied();
    this._setProxyHandlers(promise, -1);
};

Promise.prototype._then =
function Promise$_then(
    didFulfill,
    didReject,
    didProgress,
    receiver,
    internalData
) {
    var haveInternalData = internalData !== void 0;
    var ret = haveInternalData ? internalData : new Promise(INTERNAL);

    if (debugging && !haveInternalData) {
        var haveSameContext = this._peekContext() === this._traceParent;
        ret._traceParent = haveSameContext ? this._traceParent : this;
        ret._setTrace(this);
    }

    if (!haveInternalData && this._isBound()) {
        ret._setBoundTo(this._boundTo);
    }

    var callbackIndex =
        this._addCallbacks(didFulfill, didReject, didProgress, ret, receiver);

    if (!haveInternalData && this._cancellable()) {
        ret._setCancellable();
        ret._cancellationParent = this;
    }

    if (this.isResolved()) {
        async.invoke(this._queueSettleAt, this, callbackIndex);
    }

    return ret;
};

Promise.prototype._length = function Promise$_length() {
    return this._bitField & 524287;
};

Promise.prototype._isFollowingOrFulfilledOrRejected =
function Promise$_isFollowingOrFulfilledOrRejected() {
    return (this._bitField & 939524096) > 0;
};

Promise.prototype._isFollowing = function Promise$_isFollowing() {
    return (this._bitField & 536870912) === 536870912;
};

Promise.prototype._setLength = function Promise$_setLength(len) {
    this._bitField = (this._bitField & -524288) |
        (len & 524287);
};

Promise.prototype._setFulfilled = function Promise$_setFulfilled() {
    this._bitField = this._bitField | 268435456;
};

Promise.prototype._setRejected = function Promise$_setRejected() {
    this._bitField = this._bitField | 134217728;
};

Promise.prototype._setFollowing = function Promise$_setFollowing() {
    this._bitField = this._bitField | 536870912;
};

Promise.prototype._setIsFinal = function Promise$_setIsFinal() {
    this._bitField = this._bitField | 33554432;
};

Promise.prototype._isFinal = function Promise$_isFinal() {
    return (this._bitField & 33554432) > 0;
};

Promise.prototype._cancellable = function Promise$_cancellable() {
    return (this._bitField & 67108864) > 0;
};

Promise.prototype._setCancellable = function Promise$_setCancellable() {
    this._bitField = this._bitField | 67108864;
};

Promise.prototype._unsetCancellable = function Promise$_unsetCancellable() {
    this._bitField = this._bitField & (~67108864);
};

Promise.prototype._setRejectionIsUnhandled =
function Promise$_setRejectionIsUnhandled() {
    this._bitField = this._bitField | 2097152;
};

Promise.prototype._unsetRejectionIsUnhandled =
function Promise$_unsetRejectionIsUnhandled() {
    this._bitField = this._bitField & (~2097152);
    if (this._isUnhandledRejectionNotified()) {
        this._unsetUnhandledRejectionIsNotified();
        this._notifyUnhandledRejectionIsHandled();
    }
};

Promise.prototype._isRejectionUnhandled =
function Promise$_isRejectionUnhandled() {
    return (this._bitField & 2097152) > 0;
};

Promise.prototype._setUnhandledRejectionIsNotified =
function Promise$_setUnhandledRejectionIsNotified() {
    this._bitField = this._bitField | 524288;
};

Promise.prototype._unsetUnhandledRejectionIsNotified =
function Promise$_unsetUnhandledRejectionIsNotified() {
    this._bitField = this._bitField & (~524288);
};

Promise.prototype._isUnhandledRejectionNotified =
function Promise$_isUnhandledRejectionNotified() {
    return (this._bitField & 524288) > 0;
};

Promise.prototype._setCarriedStackTrace =
function Promise$_setCarriedStackTrace(capturedTrace) {
    this._bitField = this._bitField | 1048576;
    this._fulfillmentHandler0 = capturedTrace;
};

Promise.prototype._unsetCarriedStackTrace =
function Promise$_unsetCarriedStackTrace() {
    this._bitField = this._bitField & (~1048576);
    this._fulfillmentHandler0 = void 0;
};

Promise.prototype._isCarryingStackTrace =
function Promise$_isCarryingStackTrace() {
    return (this._bitField & 1048576) > 0;
};

Promise.prototype._getCarriedStackTrace =
function Promise$_getCarriedStackTrace() {
    return this._isCarryingStackTrace()
        ? this._fulfillmentHandler0
        : void 0;
};

Promise.prototype._receiverAt = function Promise$_receiverAt(index) {
    var ret;
    if (index === 0) {
        ret = this._receiver0;
    }
    else {
        ret = this[index + 4 - 5];
    }
    if (this._isBound() && ret === void 0) {
        return this._boundTo;
    }
    return ret;
};

Promise.prototype._promiseAt = function Promise$_promiseAt(index) {
    if (index === 0) return this._promise0;
    return this[index + 3 - 5];
};

Promise.prototype._fulfillmentHandlerAt =
function Promise$_fulfillmentHandlerAt(index) {
    if (index === 0) return this._fulfillmentHandler0;
    return this[index + 0 - 5];
};

Promise.prototype._rejectionHandlerAt =
function Promise$_rejectionHandlerAt(index) {
    if (index === 0) return this._rejectionHandler0;
    return this[index + 1 - 5];
};

Promise.prototype._unsetAt = function Promise$_unsetAt(index) {
     if (index === 0) {
        this._rejectionHandler0 =
        this._progressHandler0 =
        this._promise0 =
        this._receiver0 = void 0;
        if (!this._isCarryingStackTrace()) {
            this._fulfillmentHandler0 = void 0;
        }
    }
    else {
        this[index - 5 + 0] =
        this[index - 5 + 1] =
        this[index - 5 + 2] =
        this[index - 5 + 3] =
        this[index - 5 + 4] = void 0;
    }
};

Promise.prototype._resolveFromResolver =
function Promise$_resolveFromResolver(resolver) {
    var promise = this;
    this._setTrace(void 0);
    this._pushContext();

    function Promise$_resolver(val) {
        if (promise._tryFollow(val)) {
            return;
        }
        promise._fulfill(val);
    }
    function Promise$_rejecter(val) {
        var trace = canAttach(val) ? val : new Error(val + "");
        promise._attachExtraTrace(trace);
        markAsOriginatingFromRejection(val);
        promise._reject(val, trace === val ? void 0 : trace);
    }
    var r = tryCatch2(resolver, void 0, Promise$_resolver, Promise$_rejecter);
    this._popContext();

    if (r !== void 0 && r === errorObj) {
        var e = r.e;
        var trace = canAttach(e) ? e : new Error(e + "");
        promise._reject(e, trace);
    }
};

Promise.prototype._addCallbacks = function Promise$_addCallbacks(
    fulfill,
    reject,
    progress,
    promise,
    receiver
) {
    var index = this._length();

    if (index >= 524287 - 5) {
        index = 0;
        this._setLength(0);
    }

    if (index === 0) {
        this._promise0 = promise;
        if (receiver !== void 0) this._receiver0 = receiver;
        if (typeof fulfill === "function" && !this._isCarryingStackTrace())
            this._fulfillmentHandler0 = fulfill;
        if (typeof reject === "function") this._rejectionHandler0 = reject;
        if (typeof progress === "function") this._progressHandler0 = progress;
    }
    else {
        var i = index - 5;
        this[i + 3] = promise;
        this[i + 4] = receiver;
        this[i + 0] = typeof fulfill === "function"
                                            ? fulfill : void 0;
        this[i + 1] = typeof reject === "function"
                                            ? reject : void 0;
        this[i + 2] = typeof progress === "function"
                                            ? progress : void 0;
    }
    this._setLength(index + 5);
    return index;
};



Promise.prototype._setBoundTo = function Promise$_setBoundTo(obj) {
    if (obj !== void 0) {
        this._bitField = this._bitField | 8388608;
        this._boundTo = obj;
    }
    else {
        this._bitField = this._bitField & (~8388608);
    }
};

Promise.prototype._isBound = function Promise$_isBound() {
    return (this._bitField & 8388608) === 8388608;
};

Promise.prototype._spreadSlowCase =
function Promise$_spreadSlowCase(targetFn, promise, values, boundTo) {
    var promiseForAll =
            Promise$_CreatePromiseArray
                (values, PromiseArray, boundTo)
            .promise()
            ._then(function() {
                return targetFn.apply(boundTo, arguments);
            }, void 0, void 0, APPLY, void 0);

    promise._follow(promiseForAll);
};

Promise.prototype._callSpread =
function Promise$_callSpread(handler, promise, value, localDebugging) {
    var boundTo = this._isBound() ? this._boundTo : void 0;
    if (isArray(value)) {
        for (var i = 0, len = value.length; i < len; ++i) {
            if (isPromise(Promise._cast(value[i], void 0))) {
                this._spreadSlowCase(handler, promise, value, boundTo);
                return;
            }
        }
    }
    if (localDebugging) promise._pushContext();
    return tryCatchApply(handler, value, boundTo);
};

Promise.prototype._callHandler =
function Promise$_callHandler(
    handler, receiver, promise, value, localDebugging) {
    var x;
    if (receiver === APPLY && !this.isRejected()) {
        x = this._callSpread(handler, promise, value, localDebugging);
    }
    else {
        if (localDebugging) promise._pushContext();
        x = tryCatch1(handler, receiver, value);
    }
    if (localDebugging) promise._popContext();
    return x;
};

Promise.prototype._settlePromiseFromHandler =
function Promise$_settlePromiseFromHandler(
    handler, receiver, value, promise
) {
    if (!isPromise(promise)) {
        handler.call(receiver, value, promise);
        return;
    }

    var localDebugging = debugging;
    var x = this._callHandler(handler, receiver,
                                promise, value, localDebugging);

    if (promise._isFollowing()) return;

    if (x === errorObj || x === promise || x === NEXT_FILTER) {
        var err = x === promise
                    ? makeSelfResolutionError()
                    : x.e;
        var trace = canAttach(err) ? err : new Error(err + "");
        if (x !== NEXT_FILTER) promise._attachExtraTrace(trace);
        promise._rejectUnchecked(err, trace);
    }
    else {
        var castValue = Promise._cast(x, promise);
        if (isPromise(castValue)) {
            if (castValue.isRejected() &&
                !castValue._isCarryingStackTrace() &&
                !canAttach(castValue._settledValue)) {
                var trace = new Error(castValue._settledValue + "");
                promise._attachExtraTrace(trace);
                castValue._setCarriedStackTrace(trace);
            }
            promise._follow(castValue);
            if (castValue._cancellable()) {
                promise._cancellationParent = castValue;
                promise._setCancellable();
            }
        }
        else {
            promise._fulfillUnchecked(x);
        }
    }
};

Promise.prototype._follow =
function Promise$_follow(promise) {
    this._setFollowing();

    if (promise.isPending()) {
        if (promise._cancellable() ) {
            this._cancellationParent = promise;
            this._setCancellable();
        }
        promise._proxyPromise(this);
    }
    else if (promise.isFulfilled()) {
        this._fulfillUnchecked(promise._settledValue);
    }
    else {
        this._rejectUnchecked(promise._settledValue,
            promise._getCarriedStackTrace());
    }

    if (promise._isRejectionUnhandled()) promise._unsetRejectionIsUnhandled();

    if (debugging &&
        promise._traceParent == null) {
        promise._traceParent = this;
    }
};

Promise.prototype._tryFollow =
function Promise$_tryFollow(value) {
    if (this._isFollowingOrFulfilledOrRejected() ||
        value === this) {
        return false;
    }
    var maybePromise = Promise._cast(value, void 0);
    if (!isPromise(maybePromise)) {
        return false;
    }
    this._follow(maybePromise);
    return true;
};

Promise.prototype._resetTrace = function Promise$_resetTrace() {
    if (debugging) {
        this._trace = new CapturedTrace(this._peekContext() === void 0);
    }
};

Promise.prototype._setTrace = function Promise$_setTrace(parent) {
    if (debugging) {
        var context = this._peekContext();
        this._traceParent = context;
        var isTopLevel = context === void 0;
        if (parent !== void 0 &&
            parent._traceParent === context) {
            this._trace = parent._trace;
        }
        else {
            this._trace = new CapturedTrace(isTopLevel);
        }
    }
    return this;
};

Promise.prototype._attachExtraTrace =
function Promise$_attachExtraTrace(error) {
    if (debugging) {
        var promise = this;
        var stack = error.stack;
        stack = typeof stack === "string"
            ? stack.split("\n") : [];
        var headerLineCount = 1;

        while(promise != null &&
            promise._trace != null) {
            stack = CapturedTrace.combine(
                stack,
                promise._trace.stack.split("\n")
           );
            promise = promise._traceParent;
        }

        var max = Error.stackTraceLimit + headerLineCount;
        var len = stack.length;
        if (len  > max) {
            stack.length = max;
        }
        if (stack.length <= headerLineCount) {
            error.stack = "(No stack trace)";
        }
        else {
            error.stack = stack.join("\n");
        }
    }
};

Promise.prototype._cleanValues = function Promise$_cleanValues() {
    if (this._cancellable()) {
        this._cancellationParent = void 0;
    }
};

Promise.prototype._fulfill = function Promise$_fulfill(value) {
    if (this._isFollowingOrFulfilledOrRejected()) return;
    this._fulfillUnchecked(value);
};

Promise.prototype._reject =
function Promise$_reject(reason, carriedStackTrace) {
    if (this._isFollowingOrFulfilledOrRejected()) return;
    this._rejectUnchecked(reason, carriedStackTrace);
};

Promise.prototype._settlePromiseAt = function Promise$_settlePromiseAt(index) {
    var handler = this.isFulfilled()
        ? this._fulfillmentHandlerAt(index)
        : this._rejectionHandlerAt(index);

    var value = this._settledValue;
    var receiver = this._receiverAt(index);
    var promise = this._promiseAt(index);

    if (typeof handler === "function") {
        this._settlePromiseFromHandler(handler, receiver, value, promise);
    }
    else {
        var done = false;
        var isFulfilled = this.isFulfilled();
        if (receiver !== void 0) {
            if (receiver instanceof Promise &&
                receiver._isProxied()) {
                receiver._unsetProxied();

                if (isFulfilled) receiver._fulfillUnchecked(value);
                else receiver._rejectUnchecked(value,
                    this._getCarriedStackTrace());
                done = true;
            }
            else if (isPromiseArrayProxy(receiver, promise)) {
                if (isFulfilled) receiver._promiseFulfilled(value, promise);
                else receiver._promiseRejected(value, promise);
                done = true;
            }
        }

        if (!done) {
            if (isFulfilled) promise._fulfill(value);
            else promise._reject(value, this._getCarriedStackTrace());
        }
    }

    if (index >= 256) {
        this._queueGC();
    }
};

Promise.prototype._isProxied = function Promise$_isProxied() {
    return (this._bitField & 4194304) === 4194304;
};

Promise.prototype._setProxied = function Promise$_setProxied() {
    this._bitField = this._bitField | 4194304;
};

Promise.prototype._unsetProxied = function Promise$_unsetProxied() {
    this._bitField = this._bitField & (~4194304);
};

Promise.prototype._isGcQueued = function Promise$_isGcQueued() {
    return (this._bitField & -1073741824) === -1073741824;
};

Promise.prototype._setGcQueued = function Promise$_setGcQueued() {
    this._bitField = this._bitField | -1073741824;
};

Promise.prototype._unsetGcQueued = function Promise$_unsetGcQueued() {
    this._bitField = this._bitField & (~-1073741824);
};

Promise.prototype._queueGC = function Promise$_queueGC() {
    if (this._isGcQueued()) return;
    this._setGcQueued();
    async.invokeLater(this._gc, this, void 0);
};

Promise.prototype._gc = function Promise$gc() {
    var len = this._length();
    this._unsetAt(0);
    for (var i = 0; i < len; i++) {
        delete this[i];
    }
    this._setLength(0);
    this._unsetGcQueued();
};

Promise.prototype._queueSettleAt = function Promise$_queueSettleAt(index) {
    if (this._isRejectionUnhandled()) this._unsetRejectionIsUnhandled();
    async.invoke(this._settlePromiseAt, this, index);
};

Promise.prototype._fulfillUnchecked =
function Promise$_fulfillUnchecked(value) {
    if (!this.isPending()) return;
    if (value === this) {
        var err = makeSelfResolutionError();
        this._attachExtraTrace(err);
        return this._rejectUnchecked(err, void 0);
    }
    this._cleanValues();
    this._setFulfilled();
    this._settledValue = value;
    var len = this._length();

    if (len > 0) {
        async.invoke(this._settlePromises, this, len);
    }
};

Promise.prototype._rejectUncheckedCheckError =
function Promise$_rejectUncheckedCheckError(reason) {
    var trace = canAttach(reason) ? reason : new Error(reason + "");
    this._rejectUnchecked(reason, trace === reason ? void 0 : trace);
};

Promise.prototype._rejectUnchecked =
function Promise$_rejectUnchecked(reason, trace) {
    if (!this.isPending()) return;
    if (reason === this) {
        var err = makeSelfResolutionError();
        this._attachExtraTrace(err);
        return this._rejectUnchecked(err);
    }
    this._cleanValues();
    this._setRejected();
    this._settledValue = reason;

    if (this._isFinal()) {
        async.invokeLater(thrower, void 0, trace === void 0 ? reason : trace);
        return;
    }
    var len = this._length();

    if (trace !== void 0) this._setCarriedStackTrace(trace);

    if (len > 0) {
        async.invoke(this._rejectPromises, this, null);
    }
    else {
        this._ensurePossibleRejectionHandled();
    }
};

Promise.prototype._rejectPromises = function Promise$_rejectPromises() {
    this._settlePromises();
    this._unsetCarriedStackTrace();
};

Promise.prototype._settlePromises = function Promise$_settlePromises() {
    var len = this._length();
    for (var i = 0; i < len; i+= 5) {
        this._settlePromiseAt(i);
    }
};

Promise.prototype._ensurePossibleRejectionHandled =
function Promise$_ensurePossibleRejectionHandled() {
    this._setRejectionIsUnhandled();
    if (CapturedTrace.possiblyUnhandledRejection !== void 0) {
        async.invokeLater(this._notifyUnhandledRejection, this, void 0);
    }
};

Promise.prototype._notifyUnhandledRejectionIsHandled =
function Promise$_notifyUnhandledRejectionIsHandled() {
    if (typeof unhandledRejectionHandled === "function") {
        async.invokeLater(unhandledRejectionHandled, void 0, this);
    }
};

Promise.prototype._notifyUnhandledRejection =
function Promise$_notifyUnhandledRejection() {
    if (this._isRejectionUnhandled()) {
        var reason = this._settledValue;
        var trace = this._getCarriedStackTrace();

        this._setUnhandledRejectionIsNotified();

        if (trace !== void 0) {
            this._unsetCarriedStackTrace();
            reason = trace;
        }
        if (typeof CapturedTrace.possiblyUnhandledRejection === "function") {
            CapturedTrace.possiblyUnhandledRejection(reason, this);
        }
    }
};

var contextStack = [];
Promise.prototype._peekContext = function Promise$_peekContext() {
    var lastIndex = contextStack.length - 1;
    if (lastIndex >= 0) {
        return contextStack[lastIndex];
    }
    return void 0;

};

Promise.prototype._pushContext = function Promise$_pushContext() {
    if (!debugging) return;
    contextStack.push(this);
};

Promise.prototype._popContext = function Promise$_popContext() {
    if (!debugging) return;
    contextStack.pop();
};

function Promise$_CreatePromiseArray(
    promises, PromiseArrayConstructor, boundTo) {

    var list = null;
    if (isArray(promises)) {
        list = promises;
    }
    else {
        list = Promise._cast(promises, void 0);
        if (list !== promises) {
            list._setBoundTo(boundTo);
        }
        else if (!isPromise(list)) {
            list = null;
        }
    }
    if (list !== null) {
        return new PromiseArrayConstructor(list, boundTo);
    }
    return {
        promise: function() {return apiRejection("expecting an array, a promise or a thenable");}
    };
}

var old = global.Promise;
Promise.noConflict = function() {
    if (global.Promise === Promise) {
        global.Promise = old;
    }
    return Promise;
};

if (!CapturedTrace.isSupported()) {
    Promise.longStackTraces = function(){};
    debugging = false;
}

Promise._makeSelfResolutionError = makeSelfResolutionError;
require("./finally.js")(Promise, NEXT_FILTER);
require("./direct_resolve.js")(Promise);
require("./thenables.js")(Promise, INTERNAL);
require("./synchronous_inspection.js")(Promise);
Promise.RangeError = RangeError;
Promise.CancellationError = CancellationError;
Promise.TimeoutError = TimeoutError;
Promise.TypeError = TypeError;
Promise.RejectionError = RejectionError;

util.toFastProperties(Promise);
util.toFastProperties(Promise.prototype);
require('./timers.js')(Promise,INTERNAL);
require('./any.js')(Promise,Promise$_CreatePromiseArray,PromiseArray);
require('./race.js')(Promise,INTERNAL);
require('./call_get.js')(Promise);
require('./filter.js')(Promise,Promise$_CreatePromiseArray,PromiseArray,apiRejection);
require('./generators.js')(Promise,apiRejection,INTERNAL);
require('./map.js')(Promise,PromiseArray,INTERNAL,apiRejection);
require('./nodeify.js')(Promise);
require('./promisify.js')(Promise,INTERNAL);
require('./props.js')(Promise,PromiseArray);
require('./reduce.js')(Promise,Promise$_CreatePromiseArray,PromiseArray,apiRejection,INTERNAL);
require('./settle.js')(Promise,Promise$_CreatePromiseArray,PromiseArray);
require('./some.js')(Promise,Promise$_CreatePromiseArray,PromiseArray,apiRejection);
require('./progress.js')(Promise,isPromiseArrayProxy);
require('./cancel.js')(Promise,INTERNAL);

Promise.prototype = Promise.prototype;
return Promise;

};

}).call(this,require('_process'))

},{"./any.js":119,"./async.js":120,"./call_get.js":122,"./cancel.js":123,"./captured_trace.js":124,"./catch_filter.js":125,"./direct_resolve.js":126,"./errors.js":127,"./errors_api_rejection":128,"./filter.js":130,"./finally.js":131,"./generators.js":132,"./global.js":133,"./map.js":134,"./nodeify.js":135,"./progress.js":136,"./promise_array.js":138,"./promise_resolver.js":139,"./promisify.js":141,"./props.js":143,"./race.js":145,"./reduce.js":146,"./settle.js":148,"./some.js":150,"./synchronous_inspection.js":152,"./thenables.js":153,"./timers.js":154,"./util.js":155,"_process":16}],138:[function(require,module,exports){
arguments[4][93][0].apply(exports,arguments)
},{"./async.js":120,"./errors.js":127,"./util.js":155,"dup":93}],139:[function(require,module,exports){
arguments[4][94][0].apply(exports,arguments)
},{"./async.js":120,"./errors.js":127,"./es5.js":129,"./util.js":155,"dup":94}],140:[function(require,module,exports){
arguments[4][95][0].apply(exports,arguments)
},{"./errors.js":127,"./util.js":155,"dup":95}],141:[function(require,module,exports){
arguments[4][96][0].apply(exports,arguments)
},{"./errors":127,"./es5.js":129,"./promise_resolver.js":139,"./util.js":155,"dup":96}],142:[function(require,module,exports){
arguments[4][97][0].apply(exports,arguments)
},{"./es5.js":129,"./util.js":155,"dup":97}],143:[function(require,module,exports){
arguments[4][98][0].apply(exports,arguments)
},{"./errors_api_rejection":128,"./properties_promise_array.js":142,"./util.js":155,"dup":98}],144:[function(require,module,exports){
arguments[4][99][0].apply(exports,arguments)
},{"dup":99}],145:[function(require,module,exports){
arguments[4][100][0].apply(exports,arguments)
},{"./errors_api_rejection.js":128,"./util.js":155,"dup":100}],146:[function(require,module,exports){
arguments[4][101][0].apply(exports,arguments)
},{"dup":101}],147:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
"use strict";
var global = require("./global.js");
var schedule;
if (typeof process !== "undefined" && process !== null &&
    typeof process.cwd === "function" &&
    typeof process.nextTick === "function" &&
    typeof process.version === "string") {
    schedule = function Promise$_Scheduler(fn) {
        process.nextTick(fn);
    };
}
else if ((typeof global.MutationObserver === "function" ||
        typeof global.WebkitMutationObserver === "function" ||
        typeof global.WebKitMutationObserver === "function") &&
        typeof document !== "undefined" &&
        typeof document.createElement === "function") {


    schedule = (function(){
        var MutationObserver = global.MutationObserver ||
            global.WebkitMutationObserver ||
            global.WebKitMutationObserver;
        var div = document.createElement("div");
        var queuedFn = void 0;
        var observer = new MutationObserver(
            function Promise$_Scheduler() {
                var fn = queuedFn;
                queuedFn = void 0;
                fn();
            }
       );
        observer.observe(div, {
            attributes: true
        });
        return function Promise$_Scheduler(fn) {
            queuedFn = fn;
            div.setAttribute("class", "foo");
        };

    })();
}
else if (typeof global.postMessage === "function" &&
    typeof global.importScripts !== "function" &&
    typeof global.addEventListener === "function" &&
    typeof global.removeEventListener === "function") {

    var MESSAGE_KEY = "bluebird_message_key_" + Math.random();
    schedule = (function(){
        var queuedFn = void 0;

        function Promise$_Scheduler(e) {
            if (e.source === global &&
                e.data === MESSAGE_KEY) {
                var fn = queuedFn;
                queuedFn = void 0;
                fn();
            }
        }

        global.addEventListener("message", Promise$_Scheduler, false);

        return function Promise$_Scheduler(fn) {
            queuedFn = fn;
            global.postMessage(
                MESSAGE_KEY, "*"
           );
        };

    })();
}
else if (typeof global.MessageChannel === "function") {
    schedule = (function(){
        var queuedFn = void 0;

        var channel = new global.MessageChannel();
        channel.port1.onmessage = function Promise$_Scheduler() {
                var fn = queuedFn;
                queuedFn = void 0;
                fn();
        };

        return function Promise$_Scheduler(fn) {
            queuedFn = fn;
            channel.port2.postMessage(null);
        };
    })();
}
else if (global.setTimeout) {
    schedule = function Promise$_Scheduler(fn) {
        setTimeout(fn, 4);
    };
}
else {
    schedule = function Promise$_Scheduler(fn) {
        fn();
    };
}

module.exports = schedule;

}).call(this,require('_process'))

},{"./global.js":133,"_process":16}],148:[function(require,module,exports){
arguments[4][103][0].apply(exports,arguments)
},{"./settled_promise_array.js":149,"dup":103}],149:[function(require,module,exports){
arguments[4][104][0].apply(exports,arguments)
},{"./util.js":155,"dup":104}],150:[function(require,module,exports){
arguments[4][105][0].apply(exports,arguments)
},{"./some_promise_array.js":151,"dup":105}],151:[function(require,module,exports){
arguments[4][106][0].apply(exports,arguments)
},{"./errors.js":127,"./util.js":155,"dup":106}],152:[function(require,module,exports){
arguments[4][107][0].apply(exports,arguments)
},{"dup":107}],153:[function(require,module,exports){
arguments[4][108][0].apply(exports,arguments)
},{"./errors.js":127,"./util.js":155,"dup":108}],154:[function(require,module,exports){
arguments[4][109][0].apply(exports,arguments)
},{"./errors.js":127,"./errors_api_rejection":128,"./global.js":133,"./util.js":155,"dup":109}],155:[function(require,module,exports){
arguments[4][110][0].apply(exports,arguments)
},{"./es5.js":129,"./global.js":133,"dup":110}],156:[function(require,module,exports){
arguments[4][17][0].apply(exports,arguments)
},{"dup":17}],157:[function(require,module,exports){
"use strict";

module.exports = Mem;

function Mem(options) {
  this.o = options;
  this.data = {};
}

Mem.prototype = {
  findAll: function findAll(type, done) {
    var res = [];
    if (!this.data[type]) {
      return done(null, res);
    }for (var id in this.data[type]) {
      res.push(this.data[type][id]);
    }
    done(null, res);
  },
  save: function save(type, id, value, done) {
    if (!this.data[type]) {
      this.data[type] = {};
    }
    this.data[type][id] = value;
    done && done();
  },
  set: function set(type, id, attr, value, done) {
    this.data[type][id][attr] = value;
    done && done();
  },
  batchSave: function batchSave(type, nodes, done) {
    if (!this.data[type]) {
      this.data[type] = {};
    }
    for (var id in nodes) {
      this.data[type][id] = nodes[id];
    }
    done && done();
  },
  batchSet: function batchSet(type, attr, ids, value, done) {
    if (Array.isArray(value)) {
      for (var i = 0; i < ids.length; i++) {
        this.data[type][ids[i]][attr] = value[i];
      }
    } else {
      for (var i = 0; i < ids.length; i++) {
        this.data[type][ids[i]][attr] = value;
      }
    }
    done && done();
  },
  update: (function (_update) {
    var _updateWrapper = function update(_x, _x2, _x3, _x4) {
      return _update.apply(this, arguments);
    };

    _updateWrapper.toString = function () {
      return _update.toString();
    };

    return _updateWrapper;
  })(function (type, id, update, done) {
    for (var name in update) {
      this.data[type][id][name] = update[name];
    }
    done && done();
  }),
  remove: function remove(type, id, done) {
    delete this.data[type][id];
    done && done();
  } };

},{}],158:[function(require,module,exports){
"use strict";

var movement = require("../../views/list/movement");

module.exports = {
  title: "Clipboard",

  keys: {
    remove: {}, // not using this
    cut: {
      normal: "d d, shift+d, ctrl+x, delete",
      visual: "d, shift+d, ctrl+x, delete" },
    copy: {
      normal: "y y, shift+y, ctrl+c",
      visual: "y, shift+y, ctrl+c" },
    paste: {
      normal: "p, ctrl+v",
      visual: "p, ctrl+v" },
    "paste above": {
      normal: "shift+p",
      visual: "shift+p" } },

  contextMenu: function contextMenu(node, store) {
    var plural = store.view.mode === "visual" && store.view.selection.length > 1,
        nodeText = plural ? "nodes" : "node";
    return [{
      title: "Copy " + nodeText,
      action: "copy",
      shortcut: "y y" }, {
      title: "Cut " + nodeText,
      action: "cut",
      shortcut: "d d" }, {
      title: "Paste after",
      action: "paste",
      shortcut: "p",
      disabled: !store.globals.clipboard }];
  },

  store: {
    init: function init(store) {
      store._globals.clipboard = null;
    },

    actions: {
      copy: function copy(id) {
        var sel = window.getSelection();
        var ids;
        if (sel.type === "Range" && !sel.getRangeAt(0).collapsed) {
          return true;
        }
        id = id || this.view.active;
        if (this.view.mode === "visual") {
          ids = this.view.selection;
          this.setMode("normal");
        } else {
          ids = [id];
        }
        this.globals.clipboard = this.db.exportMany(ids);
      },

      cut: function cut(id) {
        var sel = window.getSelection();
        var ids;
        if (sel.type === "Range" && !sel.getRangeAt(0).collapsed) {
          return true;
        }
        id = id || this.view.active;
        if (id === this.view.root) {
          return;
        }if (this.view.mode === "visual") {
          ids = this.view.selection;
          var next = movement.nextSibling(ids[ids.length - 1], this.view.root, this.db.nodes, true);
          if (!next) {
            next = movement.up(ids[0], this.view.root, this.db.nodes, true);
          }
          if (!next) {
            next = this.db.nodes[ids[0]].parent;
          }
          this.setActive(next);
          this.setMode("normal", true);
        } else {
          ids = [id];
          this.goToSurvivingNeighbor(id);
        }
        if (this.view.mode === "insert") {
          document.activeElement.blur();
        }
        this.globals.clipboard = this.db.exportMany(ids);
        this.executeCommand("remove", { ids: ids });
      },

      paste: function paste(id) {
        if (!this.globals.clipboard) {
          return;
        }this.importTrees(id, this.globals.clipboard);
      },

      pasteAbove: function pasteAbove(id) {
        if (!this.globals.clipboard) {
          return;
        }this.importTrees(id, this.globals.clipboard, true);
      } } } };

// 'insert': 'ctrl+x',

// 'insert': 'ctrl+c',

// 'insert': 'ctrl+v',

},{"../../views/list/movement":197}],159:[function(require,module,exports){
"use strict";

module.exports = {
  title: "Collapser",

  store: require("./store"),
  node: require("./node"),
  keys: require("./keys") };

},{"./keys":160,"./node":161,"./store":162}],160:[function(require,module,exports){
"use strict";

module.exports = {
  "toggle collapse deep": {
    description: "Toggle the collapse of the current item and all children",
    normal: "shift+z",
    visual: "shift+z" },
  "toggle collapse": {
    description: "Toggle the collapse of the current item",
    normal: "z",
    visual: "z" } };

/*
'collapse': {
  description: 'Collapse the current item',
  normal: 'ctrl+left',
  insert: 'ctrl+left',
  visual: 'ctrl+left',
},
'expand': {
  description: 'Expand the current item',
  normal: 'ctrl+right',
  insert: 'ctrl+right',
  visual: 'ctrl+right',
},
*/

},{}],161:[function(require,module,exports){
"use strict";

var React = require("react/addons");
var cx = React.addons.classSet;

var slide = require("../../util/slide");

module.exports = {
  classes: function classes(node, state) {
    var cls = [];
    if (node.collapsed) {
      cls.push("n_Collapse");
    }
    if (node.children.length) {
      cls.push("TreeItem-parent");
    }
    return cls.join(" ");
  },

  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
    if (this.props.isRoot) {
      return;
    }if (!this.state.node) {
      return;
    }var c = this.state.node.collapsed;
    if (!this.refs || !this.refs.children) {
      return;
    }if (this._prev_collapsed === c) {
      return;
    }this._prev_collapsed = c;
    var el = this.refs.children.getDOMNode();
    if (c) {
      slide.up(el);
    } else {
      slide.down(el);
    }
  },

  blocks: {
    left: function left(node, actions) {
      return React.createElement("div", { className: cx({
          m_Collapser: true,
          "m_Collapser-collapsed": node.collapsed
        }), key: "collapser", onClick: actions.toggleCollapse.bind(actions, node.id) });
    }
  } };

},{"../../util/slide":183,"react/addons":"react/addons"}],162:[function(require,module,exports){
"use strict";

module.exports = {
  actions: {
    collapse: function collapse(id) {
      var _this = this;

      if (!arguments.length) id = this.view.active;
      if (id === this.view.root) {
        return;
      }if (this.view.mode === "visual" && !arguments.length) {
        var ids = this.view.selection.filter(function (id) {
          return !!_this.db.nodes[id].children.length;
        });
        if (!ids.length) {
          return;
        }return this.setMany("collapsed", ids, true);
      }
      if (!this.db.nodes[id].children.length) {
        var pid = this.db.nodes[id].parent;
        if (pid !== this.view.root) {
          this.set(pid, "collapsed", true);
          this.setActive(id);
        }
        return;
      }
      this.set(id, "collapsed", true);
      this.setActive(id);
    },

    expand: function expand(id) {
      var _this = this;

      if (!arguments.length) id = this.view.active;
      if (id === this.view.root) {
        return;
      }if (this.view.mode === "visual" && !arguments.length) {
        var ids = this.view.selection.filter(function (id) {
          return !!_this.db.nodes[id].children.length;
        });
        if (!ids.length) {
          return;
        }return this.setMany("collapsed", ids, true);
      }
      if (!this.db.nodes[id].children.length) {
        return;
      }
      this.set(id, "collapsed", false);
      this.setActive(id);
    },

    expandToAndSelect: function expandToAndSelect(id) {
      var node = this.db.nodes[id],
          root = this.view.root,
          parent = node.parent,
          current = parent,
          toOpen = [];
      if (id !== root) {
        while (current !== root) {
          var node = this.db.nodes[current];
          if (node.collapsed) toOpen.push(current);
          current = node.parent;
        }
      }
      if (toOpen.length) this.setMany("collapsed", toOpen, false);
      this.setActive(id);
    },

    toggleCollapseDeep: function toggleCollapseDeep(id) {
      var _this = this;

      if (!arguments.length) id = this.view.active;
      if (this.view.mode === "visual") {
        ids = this.view.selection;
      } else {
        var node = this.db.nodes[id];
        if (!node.children.length) {
          return;
        }ids = [id];
      }
      var allParents = function (id) {
        var node = _this.db.nodes[id];
        if (!node.children.length) return [];
        return [].concat.apply([id], node.children.map(allParents));
      };
      pedigrees = ids.map(allParents);
      var commands = pedigrees.map(function (ids) {
        return ["setMany", { ids: ids, attr: "collapsed", values: !_this.db.nodes[ids[0]].collapsed }];
      });
      this.executeCommands.apply(this, [].concat.apply([], commands));
    },

    toggleCollapse: function toggleCollapse(id) {
      var _this = this;

      if (!arguments.length) id = this.view.active;
      if (id === this.view.root) {
        return;
      }if (this.view.mode === "visual" && !arguments.length) {
        var ids = this.view.selection.filter(function (id) {
          return !!_this.db.nodes[id].children.length;
        });
        if (!ids.length) {
          return;
        }return this.setMany("collapsed", ids, ids.map(function (id) {
          return !_this.db.nodes[id].collapsed;
        }));
      }
      if (!this.db.nodes[id].children.length) {
        var pid = this.db.nodes[id].parent;
        if (pid === this.view.root) {
          return;
        }this.setActive(pid);
        this.set(pid, "collapsed", true);
        return;
      }
      this.set(id, "collapsed", !this.db.nodes[id].collapsed);
      this.setActive(id);
    } } };

},{}],163:[function(require,module,exports){
"use strict";

module.exports = getSrc;

function getSrc(file, done) {
  if (!file) {
    return;
  }var reader = new FileReader();
  reader.onload = function (e) {
    done(e.target.result);
  };
  reader.onerror = function (e) {
    console.log(e);
  };
  reader.readAsDataURL(file);
}

},{}],164:[function(require,module,exports){
"use strict";

var React = require("react/addons"),
    cx = React.addons.classSet,
    PT = React.PropTypes,
    classnames = require("classnames"),
    DefaultEditor = require("../../views/body/default-editor"),
    DefaultRenderer = require("../../views/body/default-renderer"),
    Uploader = require("./uploader"),
    getSrc = require("./get-src");

var ImageBase = React.createClass({
  displayName: "ImageBase",

  propType: {
    title: PT.string,
    onUpload: PT.func,
    onClick: PT.func },

  getInitialState: function getInitialState() {
    return { dragging: false };
  },

  _dragOver: function _dragOver(e) {
    e.preventDefault();
    if (!this.state.dragging) {
      this.setState({ dragging: true });
    }
  },

  _dragEnd: function _dragEnd(e) {
    e.preventDefault();
    this.setState({ dragging: false });
  },

  _drop: function _drop(e) {
    e.preventDefault();
    this.setState({ dragging: false });
    var files = e.dataTransfer.files;
    if (!files.length) {
      return;
    }var file = files[0];
    if (!file.type.match(/^image\//)) {
      return console.warn("not an image file");
    }
    getSrc(file, this.props.onUpload);
  },

  render: function render() {
    var _this = this;

    if (!this.props.src) {
      return React.createElement(
        "div",
        {
          className: classnames("ImageBase", this.state.dragging && "ImageBase-dragging"),
          onClick: this.props.onClick,
          onDragEnter: this._dragOver,
          onDragOver: this._dragOver,
          onDragLeave: this._dragEnd,
          onDragEnd: this._dragEnd,
          onDrop: this._drop },
        React.createElement(Uploader, { onUpload: this.props.onUpload })
      );
    }
    return React.createElement(
      "div",
      {
        className: classnames("ImageBase", this.state.dragging && "ImageBase-dragging"),
        onClick: this.props.onClick,
        onDragEnter: this._dragOver,
        onDragOver: this._dragOver,
        onDragLeave: this._dragEnd,
        onDragEnd: this._dragEnd,
        onDrop: this._drop },
      React.createElement("img", { src: this.props.src, title: this.props.title }),
      React.createElement(
        "div",
        { onClick: function (e) {
            e.stopPropagation();
            _this.props.onUpload(null);
          }, className: "ImageBase_close" },
        "×"
      )
    );
  } });

var ImageRenderer = React.createClass({
  displayName: "ImageRenderer",

  render: function render() {
    var img = React.createElement(ImageBase, {
      src: this.props.src,
      title: this.props.title,
      onClick: this.props.onClick,
      onUpload: this.props.setSrc });
    if (this.props.title && this.props.title.trim()) {
      return React.createElement(
        "div",
        null,
        img,
        React.createElement(DefaultRenderer, { onClick: this.props.onClick, content: this.props.title })
      );
    }
    return img;
  } });

var ImageEditor = React.createClass({
  displayName: "ImageEditor",

  focus: function focus() {
    return this.refs.text.focus.apply(null, arguments);
  },
  isFocused: function isFocused() {
    return this.refs.text.isFocused.apply(null, arguments);
  },

  _onPaste: function _onPaste(e) {
    var file = e.clipboardData.items[0].getAsFile();
    if (!file) {
      return;
    }e.preventDefault();
    getSrc(file, this.props.setSrc);
  },

  render: function render() {
    var props = this.props.editProps;
    props.onPaste = this._onPaste;

    return React.createElement(
      "div",
      null,
      React.createElement(ImageBase, { src: this.props.src, title: this.props.title, onUpload: this.props.setSrc }),
      React.createElement(DefaultEditor, props)
    );
  } });

module.exports = {
  title: "Image Node",

  types: {
    image: {
      title: "Image",
      shortcut: "i" }
  },

  contextMenu: function contextMenu(node, store) {
    if (node.imageSrc) {
      return {
        title: "Remove image",
        action: "removeImage" };
    }
  },

  store: {
    actions: {
      removeImage: function (id) {
        if (!id) id = this.view.active;
        this.set(id, "imageSrc", null);
      } } },

  node: {
    bodies: {
      image: {
        renderer: function renderer() {
          var _this = this;

          var click = function () {
            if (_this.props.editState) return;
            _this.props.actions.edit(_this.props.node.id);
          };
          var setSrc = this.props.store.actions.set.bind(this.props.store.actions, this.props.node.id, "imageSrc");
          return React.createElement(ImageRenderer, {
            onClick: click,
            setSrc: setSrc,
            src: this.props.node.imageSrc,
            title: this.props.node.content });
        },

        editor: function editor(props) {
          var setSrc = props.store.actions.set.bind(props.store.actions, props.node.id, "imageSrc");
          return React.createElement(ImageEditor, {
            editProps: props,
            setSrc: setSrc,
            ref: props.ref,
            src: props.node.imageSrc,
            title: props.node.content });
        } }
    }
  }
};

},{"../../views/body/default-editor":186,"../../views/body/default-renderer":187,"./get-src":163,"./uploader":165,"classnames":156,"react/addons":"react/addons"}],165:[function(require,module,exports){
"use strict";

var React = require("react/addons"),
    cx = React.addons.classSet,
    PT = React.PropTypes,
    classnames = require("classnames"),
    getSrc = require("./get-src");

var Uploader = React.createClass({
  displayName: "Uploader",

  propTypes: {
    onUpload: PT.func },

  _onClick: function _onClick() {
    this.refs.file.getDOMNode().click();
  },

  _onChange: function _onChange(e) {
    var files = e.target.files;
    if (!files || !files.length) {
      return;
    }getSrc(files[0], this.props.onUpload);
  },

  render: function render() {
    return React.createElement(
      "div",
      { className: "Uploader" },
      React.createElement(
        "h3",
        { onClick: this._onClick },
        "Click to upload an image"
      ),
      React.createElement("input", { type: "file", ref: "file", onChange: this._onChange, style: { display: "none" } })
    );
  } });

module.exports = Uploader;

},{"./get-src":163,"classnames":156,"react/addons":"react/addons"}],166:[function(require,module,exports){
"use strict";

module.exports = {
  title: "List Item Nodes",

  types: {
    list: {
      shortcut: "l",
      title: "List" },
    ordered_list: {
      shortcut: "o",
      title: "Ordered List" } } };

},{}],167:[function(require,module,exports){
"use strict";

var React = require("react/addons");
var cx = React.addons.classSet;
var PT = React.PropTypes;

var Breadcrumb = React.createClass({
  displayName: "Breadcrumb",

  propTypes: {
    rebase: PT.func,
    reload: PT.func },

  getInitialState: function getInitialState() {
    return {
      pedigree: this.props.reload()
    };
  },

  componentDidMount: function componentDidMount() {
    this.props.store.on([this.props.store.events.rootChanged()], this._reload);
  },

  componentWillUnmount: function componentWillUnmount() {
    this.props.store.off([this.props.store.events.rootChanged()], this._reload);
  },

  _reload: function _reload() {
    this.setState({ pedigree: this.props.reload() });
  },

  render: function render() {
    var _this = this;

    return React.createElement(
      "ul",
      { className: "Breadcrumb" },
      this.state.pedigree.map(function (item) {
        return React.createElement(
          "li",
          { key: item.id, onClick: _this.props.rebase.bind(null, item.id), className: "Breadcrumb_item" },
          item.content.slice(0, 25)
        );
      })
    );
  }
});

module.exports = Breadcrumb;

},{"react/addons":"react/addons"}],168:[function(require,module,exports){
"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

var React = _interopRequire(require("react"));

var Breadcrumb = require("./breadcrumb");

module.exports = {
  title: "Zoom In/Out",

  store: require("./store"),
  node: require("./node"),
  keys: require("./keys"),

  view: {
    statusbar: function statusbar(store) {
      var actions = store.actions;
      return React.createElement(Breadcrumb, {
        key: "rebase-breadcrumb",
        rebase: actions.rebase.bind(actions),
        reload: store.getters.getPedigree.bind(store.getters, true),
        store: store
      });
    },

    blocks: {
      top: function top(actions, state, store) {
        return React.createElement(Breadcrumb, {
          key: "rebase-breadcrumb",
          rebase: actions.rebase.bind(actions),
          reload: store.getters.getPedigree.bind(store.getters, true),
          store: store
        });
      } } } };

},{"./breadcrumb":167,"./keys":169,"./node":170,"./store":171,"react":"react"}],169:[function(require,module,exports){
"use strict";

module.exports = {
  rebase: {
    title: "zoom in to active node",
    description: "zoom to the active node",
    normal: "g d" },
  "rebase up": {
    title: "zoom out one level",
    description: "zoom to the current root's parent",
    normal: "g u" },
  "rebase root": {
    title: "zoom out to document root",
    description: "zoom to the document root",
    normal: "g r" } };

},{}],170:[function(require,module,exports){
"use strict";

var React = require("react/addons");
var cx = React.addons.classSet;

module.exports = {
  blocks: {
    abovebody: function abovebody(node, actions, state) {
      // TODO: movement
      return React.createElement("div", { className: cx({
          m_RebaseDot: true,
          "m_RebaseDot-full": node.collapsed && node.children.length }),
        key: "rebase",
        onClick: actions.rebase.bind(actions, node.id) });
    }
  }
};

},{"react/addons":"react/addons"}],171:[function(require,module,exports){
"use strict";

module.exports = {
  actions: {
    rebase: function rebase(id) {
      id = id || this.view.active;
      this.view.root = id;
      this.setActive(this.view.root);
      this.changed(this.events.rootChanged());
    },
    rebaseUp: function rebaseUp() {
      if (this.view.root === this.db.root) {
        return;
      }this.setActive(this.view.root);
      this.view.root = this.db.nodes[this.view.root].parent;
      this.changed(this.events.rootChanged());
    },
    rebaseRoot: function rebaseRoot() {
      if (this.view.root === this.db.root) {
        return;
      }this.setActive(this.db.root);
      this.view.root = this.db.root;
      this.changed(this.events.rootChanged());
    } },

  getters: {
    getPedigree: function getPedigree(last) {
      var items = [];
      var node = this.db.nodes[this.view.root];
      if (!last) {
        node = this.db.nodes[node.parent];
      }
      while (node) {
        items.unshift({
          id: node.id,
          content: node.content
        });
        node = this.db.nodes[node.parent];
      }
      return items;
    } } };

},{}],172:[function(require,module,exports){
"use strict";

var React = require("react/addons");
var cx = React.addons.classSet;

module.exports = {
  title: "To-Do Items",

  types: {
    todo: {
      shortcut: "t",
      title: "Todo",
      description: "A to-do item" } },

  keys: {
    "toggle todo done": {
      type: "todo",
      normal: "alt+enter",
      insert: "alt+enter",
      visual: "alt+enter" } },

  store: {
    actions: {
      toggleTodoDone: function toggleTodoDone(id) {
        var _this = this;

        if (!arguments.length) id = this.view.active;
        if (this.db.nodes[id].type !== "todo") {
          return;
        }if (this.view.mode === "visual") {
          this.setMany("done", this.view.selection, this.view.selection.map(function (id) {
            return !_this.db.nodes[id].done;
          }));
        } else {
          this.set(id, "done", !this.db.nodes[id].done);
        }
      } } },

  node: {
    classes: function classes(node, state) {
      if (node.type !== "todo") {
        return;
      }return node.done ? "n_Done" : "";
    },

    blocks: {
      abovebody: function abovebody(node, actions) {
        if (node.type !== "todo") {
          return;
        }return React.createElement("div", { className: cx({
            m_Todo: true,
            "m_Todo-done": node.done }), key: "todo", onClick: actions.toggleTodoDone.bind(actions, node.id) });
      }
    } } };

},{"react/addons":"react/addons"}],173:[function(require,module,exports){
"use strict";

function clone(obj) {
  var a = {};
  for (var name in obj) {
    a[name] = obj[name];
  }
  return a;
}

function cap(text) {
  return text[0].toUpperCase() + text.slice(1);
}

module.exports = {
  title: "Set type to",

  keys: (function (_keys) {
    var _keysWrapper = function keys(_x) {
      return _keys.apply(this, arguments);
    };

    _keysWrapper.toString = function () {
      return _keys.toString();
    };

    return _keysWrapper;
  })(function (plugins) {
    var keys = {};
    plugins.forEach(function (plugin) {
      if (!plugin.types) return;
      for (var name in plugin.types) {
        var sh = plugin.types[name].shortcut || plugin.types[name];
        keys["type " + name] = {
          title: plugin.types[name].title || name,
          visual: "t " + sh + ", alt+t " + sh,
          normal: "t " + sh + ", alt+t " + sh,
          insert: "alt+t " + sh };
      }
    });
    return keys;
  }),

  contextMenu: function contextMenu(node, store) {
    if (!node) {
      return;
    }var items = [],
        plugins = store.parent.allPlugins;
    plugins.forEach(function (plugin) {
      if (!plugin.types) return;
      for (var name in plugin.types) {
        var type = plugin.types[name];
        var sh = type.shortcut || type;
        items.push({
          title: type.title || name,
          shortcut: "t " + sh,
          icon: type.icon,
          action: "type" + cap(name),
          disabled: name === node.type });
      }
    });
    return {
      title: "Set type",
      children: items };
  },

  types: {
    base: {
      shortcut: "n",
      title: "Normal" }
  },

  store: {
    actions: (function (_actions) {
      var _actionsWrapper = function actions(_x) {
        return _actions.apply(this, arguments);
      };

      _actionsWrapper.toString = function () {
        return _actions.toString();
      };

      return _actionsWrapper;
    })(function (plugins) {
      var actions = {
        changeType: function changeType(id, type, update) {
          var ids;
          if (!id) {
            ids = this.view.mode === "visual" ? this.view.selection : [this.view.active];
          } else {
            ids = [id];
          }
          var refocus;
          if (this.view.mode === "insert") {
            refocus = document.activeElement;
            document.activeElement.blur();
          }
          update.type = type;
          if (ids.length > 1) {
            this.updateMany(ids, ids.map(function () {
              return clone(update);
            }));
          } else {
            this.update(ids[0], clone(update));
          }
          if (refocus) {
            refocus.focus();
            this.setMode("insert");
          }
        } };

      plugins.forEach(function (plugin) {
        if (!plugin.types) return;
        Object.keys(plugin.types).forEach(function (name) {
          var defn = plugin.types[name];
          actions["type" + cap(name)] = function (id) {
            var update = {};
            if (defn.update) {
              if ("function" === typeof defn.update) {
                update = defn.update();
              } else {
                update = defn.update;
              }
            }
            this.changeType(id, name, update);
          };
        });
      });
      return actions;
    }) } };

},{}],174:[function(require,module,exports){
"use strict";

module.exports = {
  title: "Undo/Redo",

  keys: {
    undo: {
      normal: "u, ctrl+z",
      // insert: 'ctrl+z',
      visual: "u, ctrl+z" },
    redo: {
      normal: "shift+r, ctrl+shift+z",
      // insert: 'ctrl+shift+z',
      visual: "shift+r, ctrl+shift+z" } },

  store: {
    actions: {
      undo: function undo() {
        this.parent.cmd.undoCommands();
      },
      redo: function redo() {
        this.parent.cmd.redoCommands();
      } } }
};

},{}],175:[function(require,module,exports){
"use strict";

/**
 * The default actions! Basically all movement, general manipulation,
 * import/export. Actions are given in the context of a view.
 *
 * Plugins can define additional actions.
 *
 * These functions need access to:
 * - nodes
 * - actions
 * - changed()
 * - events.{}
 * - view object
 */
// TODO maybe split this into separate groups? That could be good.

var ContextMenu = require("../lib/context-menu");

module.exports = {
  set: function set(id, attr, value, squash) {
    return this.executeCommand("set", { id: id, attr: attr, value: value }, squash);
  },

  updateMany: function updateMany(ids, updates, squash) {
    return this.executeCommand("updateMany", { ids: ids, updates: updates }, squash);
  },

  update: function update(id, update, squash) {
    return this.executeCommand("update", { id: id, update: update }, squash);
  },

  importTrees: function importTrees(id, trees, above) {
    var _this = this;

    id = id || this.view.active;
    if (above && id === this.root) {
      return;
    }var node = this.db.nodes[id],
        pid,
        ix;
    if (above) {
      pid = node.parent;
      ix = this.db.nodes[pid].children.indexOf(id);
    } else {
      if (node.children.length && !node.collapsed || id === this.view.root) {
        pid = id;
        ix = 0;
      } else {
        pid = node.parent;
        ix = this.db.nodes[pid].children.indexOf(id) + 1;
      }
    }
    this.executeCommand("importTrees", {
      pid: pid,
      index: ix,
      data: trees }, function (err, cState) {
      if (cState.created.ids.length > 1) {
        _this.setMode("visual");
        _this.setSelection(cState.created.ids);
      }
      _this.setActive(cState.created.ids[0]);
    });
  },

  setMany: function setMany(attr, ids, values) {
    this.executeCommand("setMany", { ids: ids, attr: attr, values: values });
  },

  setContent: function setContent(id, value) {
    this.set(id, "content", value);
  },

  setActiveView: function setActiveView() {
    if (this.view.id !== this.parent.activeView) {
      console.log("changing active view", this.view.id);
      this.parent.activeView = this.view.id;
      this.changed(this.events.activeViewChanged());
    }
  },

  setActive: function setActive(id) {
    if (!id || !this.db.nodes[id]) {
      return;
    }var old = this.view.active;
    this.setActiveView();
    if (id === this.view.active) {
      return;
    }this.view.active = id;
    if (this.view.mode === "visual") {
      var vix = this.view.selection.indexOf(id);
      if (vix === -1) {
        this.setMode("normal");
      } else if (vix !== 0 && vix !== this.view.selection.length - 1) {
        this.pullBackSelectionTo(id);
      }
    }
    if (this.view.mode === "insert") this.view.editPos = "end";
    if (this.db.nodes[old]) {
      this.changed(this.events.nodeViewChanged(old));
    }
    this.changed(this.events.activeNodeChanged(), this.events.nodeViewChanged(id));
    return true;
  },

  pullBackSelectionTo: function pullBackSelectionTo(id) {
    this.setSelection(this.view.selection.slice(0, this.view.selection.indexOf(id) + 1));
  },

  setSelection: function setSelection(ids) {
    var _this = this;

    var changed = ids;
    if (this.view.selection) {
      changed = this.view.selection.concat(ids);
    }
    this.view.selection = ids;
    this.changed.apply(this, changed.map(function (id) {
      return _this.events.nodeViewChanged(id);
    }));
  },

  toggleSelectionEdge: function toggleSelectionEdge() {
    if (this.view.mode !== "visual" || this.view.selection.length <= 1) {
      return;
    }if (this.view.active === this.view.selection[0]) {
      this.setActive(this.view.selection[this.view.selection.length - 1]);
    } else {
      this.setActive(this.view.selection[0]);
    }
  },

  extendToFirstSibling: function extendToFirstSibling() {
    var _this = this;

    if (this.view.active === this.view.root) {
      return;
    }var pid = this.db.nodes[this.view.active].parent,
        parent = this.db.nodes[pid],
        i = parent.children.indexOf(this.view.active);
    if (i === 0) {
      return;
    }if (this.view.selection[0] === this.view.active) {
      this.view.selection = parent.children.slice(0, i).concat(this.view.selection);
      this.changed(this.view.selection.map(function (id) {
        return _this.events.nodeViewChanged(id);
      }));
    } else {
      this.changed(this.view.selection.map(function (id) {
        return _this.events.nodeViewChanged(id);
      }));
      this.view.selection = parent.children.slice(0, i + 1);
      this.changed(this.view.selection.map(function (id) {
        return _this.events.nodeViewChanged(id);
      }));
    }
    this.setActive(parent.children[0]);
  },

  extendToLastSibling: function extendToLastSibling() {
    var _this = this;

    if (this.view.active === this.view.root) {
      return;
    }var pid = this.db.nodes[this.view.active].parent,
        parent = this.db.nodes[pid],
        i = parent.children.indexOf(this.view.active);
    if (i === parent.children.length - 1) {
      return;
    }if (this.view.selection[0] === this.view.active) {
      this.changed(this.view.selection.map(function (id) {
        return _this.events.nodeViewChanged(id);
      }));
      this.view.selection = parent.children.slice(i);
      this.changed(this.view.selection.map(function (id) {
        return _this.events.nodeViewChanged(id);
      }));
    } else {
      this.view.selection = this.view.selection.concat(parent.children.slice(i + 1));
      this.changed(this.view.selection.map(function (id) {
        return _this.events.nodeViewChanged(id);
      }));
    }
    this.setActive(parent.children[parent.children.length - 1]);
  },

  // TODO move this to a /view actions set if we end up being able to select
  // more than just siblings
  // Selection mode
  extendSelectionUp: function extendSelectionUp() {
    if (this.view.active === this.view.root) {
      return;
    }var pid = this.db.nodes[this.view.active].parent,
        parent = this.db.nodes[pid],
        i = parent.children.indexOf(this.view.active);
    if (i === 0) {
      return;
    }var prev = parent.children[i - 1];
    if (this.view.selection[0] === this.view.active) {
      this.view.selection.unshift(prev);
    } else {
      this.view.selection.pop();
    }
    this.setActive(prev);
  },

  extendSelectionDown: function extendSelectionDown() {
    if (this.view.active === this.view.root) {
      return;
    }var pid = this.db.nodes[this.view.active].parent,
        parent = this.db.nodes[pid],
        i = parent.children.indexOf(this.view.active);
    if (i === parent.children.length - 1) {
      return;
    }var next = parent.children[i + 1];
    if (this.view.selection[this.view.selection.length - 1] === this.view.active) {
      this.view.selection.push(next);
    } else {
      this.view.selection.shift();
    }
    this.setActive(next);
  },

  joinMany: function joinMany() {
    if (this.view.mode !== "visual") {
      return;
    }var ids = this.view.selection;
    var contents = this.db.nodes[ids[0]].content;
    for (var i = 1; i < ids.length; i++) {
      contents += "\n" + this.db.nodes[ids[i]].content;
    }
    this.executeCommands("set", { id: ids[0], attr: "content", value: contents }, "remove", { ids: ids.slice(1) });
    this.setActive(ids[0]);
  },

  visualMode: function visualMode() {
    this.view.selection = [this.view.active];
    this.changed(this.events.nodeViewChanged(this.view.active));
    this.setMode("visual");
  },

  setMode: function setMode(mode, quiet) {
    var _this = this;

    if (this.view.mode === mode) {
      return;
    }if (this.view.mode === "visual") {
      if (!quiet) {
        this.changed(this.view.selection.map(function (id) {
          return _this.events.nodeViewChanged(id);
        }));
      }
      this.view.selection = null;
    }
    this.view.mode = mode;
    if (this.view.id === this.parent.activeView) {
      this.changed(this.events.activeModeChanged());
    }
    this.changed(this.events.modeChanged(this.view.id));
  },

  normalMode: function normalMode(id) {
    id = id || this.view.active;
    if (this.view.mode === "normal" && this.view.active === id) {
      return;
    }if (!this.setActive(id)) {
      this.changed(this.events.nodeViewChanged(this.view.active));
    }
    document.activeElement.blur();
    this.setMode("normal");
  },

  edit: function edit(id) {
    this.editAt(id, "end");
  },

  editStart: function editStart(id) {
    this.editAt(id, "start");
  },

  editAt: function editAt(id, at) {
    id = id || this.view.active;
    if (this.view.mode === "edit" && this.view.active === id) {
      return;
    }if (!this.setActive(id)) {
      this.changed(this.events.nodeViewChanged(this.view.active));
    }
    if (!at) at = "start";
    this.view.lastEdited = id;
    this.view.editPos = at;
    this.setMode("insert");
  },

  change: function change(id) {
    id = id || this.view.active;
    if (this.view.mode === "edit" && this.view.active === id) {
      return;
    }if (!this.setActive(id)) {
      this.changed(this.events.nodeViewChanged(this.view.active));
    }
    this.view.editPos = "change";
    this.setMode("insert");
  },

  showCustomMenu: function showCustomMenu(x, y, menu) {
    if (this.globals.clearContextMenu) {
      this.globals.clearContextMenu();
    }
    this.globals.clearContextMenu = ContextMenu.show(menu, x, y);
  },

  showContextMenu: function showContextMenu(x, y, id) {
    var _this = this;

    var items = [];
    if (!id) id = this.view.active;
    this.parent.allPlugins.forEach(function (plugin) {
      if (!plugin.contextMenu) return;
      var created = plugin.contextMenu(_this.db.nodes[id], _this);
      if (!created) return;
      if (!Array.isArray(created)) {
        created = [created];
      }
      items = items.concat(created);
    });
    var replaceActions = function (items) {
      items.forEach(function (item) {
        if ("string" === typeof item.action) {
          if (!_this[item.action]) {
            return console.warn("Unknown context menu action");
          }
          item.action = _this[item.action].bind(_this, id);
        }
        if (item.children) replaceActions(item.children);
      });
    };
    replaceActions(items);
    this.showCustomMenu(x, y, items);
  },

  hideContextMenu: function hideContextMenu() {
    if (this.globals.clearContextMenu) {
      this.globals.clearContextMenu();
      this.globals.clearContextMenu = null;
    }
  } };

},{"../lib/context-menu":115}],176:[function(require,module,exports){
"use strict";

var Promise = require("bluebird");

module.exports = BaseStore;

function BaseStore(options) {
  var _this = this;

  this._listeners = {};
  this._plugin_teardowns = [];

  if (options.actions) {
    for (var name in options.actions) {
      this.actions[name] = options.actions[name];
    }
  }

  if (options.plugins) {
    options.plugins.forEach(function (plugin) {
      return _this.addPlugin(plugin, options.allPlugins);
    });
  }
  this.allPlugins = options.allPlugins;
}

BaseStore.prototype = {
  actions: {},

  teardown: function teardown() {
    var _this = this;

    this._plugin_teardowns.forEach(function (fn) {
      return fn(_this);
    });
  },

  addPlugin: function addPlugin(plugin, allPlugins) {
    if (plugin.init) {
      plugin.init(this);
    }
    if (plugin.teardown) {
      this._plugin_teardowns.push(plugin.teardown);
    }

    var name, actions;
    if (plugin.actions) {
      if ("function" === typeof plugin.actions) {
        actions = plugin.actions(allPlugins);
      } else {
        actions = plugin.actions;
      }
      for (name in actions) {
        this.actions[name] = actions[name];
      }
    }

    if (plugin.extend) {
      for (name in plugin.extend) {
        this[name] = plugin.extend[name];
      }
    }
  },

  on: function on(changes, listener) {
    if ("string" === typeof changes) changes = [changes];
    for (var i = 0; i < changes.length; i++) {
      if (!this._listeners[changes[i]]) {
        this._listeners[changes[i]] = [listener];
      } else if (this._listeners[changes[i]].indexOf(listener) === -1) {
        this._listeners[changes[i]].push(listener);
      }
    }
  },

  off: function off(changes, listener) {
    if ("string" === typeof changes) changes = [changes];
    for (var i = 0; i < changes.length; i++) {
      var ix = this._listeners[changes[i]].indexOf(listener);
      if (ix !== -1) {
        this._listeners[changes[i]].splice(ix, 1);
      }
    }
  },

  changed: function changed() {
    var _this = this;

    var what = [].slice.call(arguments);
    if (what.length === 1 && Array.isArray(what[0])) {
      what = what[0];
    }
    if (this._changed) {
      this._changed = this._changed.concat(what);
    } else {
      this._changed = what;
      setTimeout(function () {
        if (window.DEBUG_CHANGES) {
          console.log("emitting", _this._changed);
        }
        var changes = _this._changed;
        _this._changed = null;
        _this.emitChanged(changes);
      }, 0);
    }
    if (window.DEBUG_CHANGES) {
      console.log("changed", what);
    }
  },

  emitChanged: function emitChanged(what) {
    var called = [];
    var promises = [];
    for (var i = 0; i < what.length; i++) {
      var listeners = this._listeners[what[i]];
      if (!listeners) continue;
      for (var j = 0; j < listeners.length; j++) {
        if (called.indexOf(listeners[j]) !== -1) {
          continue; // each listener should be called at most once per changed
        }
        var p = listeners[j]();
        if (p) {
          promises.push(p);
        }
        called.push(listeners[j]);
      }
    }
    if (this._done_listener) {
      Promise.all(promises).then(this._done_listener);
    }
  },

  onDone: function onDone(fn) {
    this._done_listener = fn;
  } };
// TODO async?

},{"bluebird":121}],177:[function(require,module,exports){
"use strict";

var async = require("async");

module.exports = Commandeger;

/**
 * Things we need
 * - view
 * - db
 */

function Commandeger(changed, setActive, db, events) {
  this.history = [];
  this.histpos = 0;
  this.changed = changed;
  this.setActive = setActive;
  this.events = events;
  this._transaction_ix = null;
  this._transactioning = 0;
  this.db = db;
}

Commandeger.prototype = {

  commands: require("./commands"),

  addCommands: function addCommands(commands) {
    for (var name in commands) {
      this.commands[name] = commands[name];
    }
  },

  startTransaction: function startTransaction() {
    if (!this._transactioning) {
      this._transaction_ix = null;
    }
    this._transactioning += 1;
  },

  stopTransaction: function stopTransaction() {
    this._transactioning -= 1;
    if (!this._transactioning) {
      this._transaction_ix = null;
    }
  },

  execute: function execute(command) {
    return this.executeCommands(command);
  },

  executeCommands: function executeCommands() {
    var _this = this;

    for (var _len = arguments.length, commands = Array(_len), _key = 0; _key < _len; _key++) {
      commands[_key] = arguments[_key];
    }

    var time = Date.now();
    var changed = ["changed"];
    var squash = null;
    if (null !== this._transaction_ix) {
      squash = this._transaction_ix;
    } else {
      commands.some(function (cmd) {
        if ("number" == typeof cmd.squash) {
          squash = cmd.squash;
          return true;
        }
      });
    }
    if ("number" == typeof squash) {
      var past = this.history[squash];
      past.changes = past.changes.concat(commands);
    } else {
      this.history = this.history.slice(0, this.histpos);
      this.history.push({ time: time, changes: commands });
      this.histpos = this.history.length;
      if (this._transactioning) {
        this._transaction_ix = this.histpos - 1;
      }
    }
    async.mapSeries(commands, function (command, next) {
      _this.doCommand(command, function (err, newChanged) {
        changed = changed.concat(newChanged);
        next(err, command.state);
      });
    }, function (err, states) {
      if (err) return console.error("Failed to execute commands!!!", err);
      _this.changed.apply(_this, changed);
    });
    if (squash !== null) {
      return squash;
    }return this.histpos - 1;
  },

  undoCommands: function undoCommands() {
    var _this = this;

    if (this.histpos <= 0) {
      return;
    }this.histpos -= 1;
    var last = this.history[this.histpos];
    var changed = ["changed"];
    var time = Date.now();
    var items = [];
    for (var i = last.changes.length - 1; i >= 0; i--) {
      items.push(last.changes[i]);
    }
    async.mapSeries(items, function (item, next) {
      _this.undoCommand(item, function (err, newChanges) {
        changed = changed.concat(newChanges);
        next();
      });
    }, function (err) {
      return _this.changed.apply(_this, changed);
    });
  },

  redoCommands: function redoCommands() {
    var _this = this;

    if (this.histpos >= this.history.length) {
      return;
    }var last = this.history[this.histpos];
    this.histpos += 1;
    var changed = ["changed"];
    var time = Date.now();
    async.mapSeries(last.changes, function (item, next) {
      _this.redoCommand(item, function (err, changes) {
        changed = changed.concat(changes);
        next();
      });
    }, function (err) {
      return _this.changed.apply(_this, changed);
    });
  },

  doCommand: function doCommand(command, done) {
    var cmd = this.commands[command.cmd];
    if (cmd.async) {
      cmd.apply.call(command.state, this.db, this.events[command.view], function (err, changed) {
        if ("string" === typeof changed) {
          changed = [changed];
        }
        if (command.done) {
          command.done(null, command.state);
        }
        done(err, changed);
      });
      return;
    }
    var changed = cmd.apply.call(command.state, this.db, this.events[command.view]);
    if ("string" === typeof changed) {
      changed = [changed];
    }
    if (command.done) {
      command.done(null, command.state);
    }
    done(null, changed);
  },

  undoCommand: function undoCommand(command, done) {
    var _this = this;

    var cmd = this.commands[command.cmd];
    if (cmd.async) {
      cmd.undo.call(command.state, this.db, this.events[command.view], function (err, changed) {
        if ("string" === typeof changed) {
          changed = [changed];
        }
        _this.setActive(command.active, command.view);
        done(err, changed);
      });
      return;
    }
    var changed = cmd.undo.call(command.state, this.db, this.events[command.view]);
    if ("string" === typeof changed) {
      changed = [changed];
    }
    this.setActive(command.active, command.view);
    done(null, changed);
  },

  redoCommand: function redoCommand(command, done) {
    var _this = this;

    var cmd = this.commands[command.cmd];
    var action = cmd.redo || cmd.apply;
    if (cmd.async) {
      action.call(command.state, this.db, this.events[command.view], function (err, changed) {
        if ("string" === typeof changed) {
          changed = [changed];
        }
        _this.setActive(command.active, command.view);
        done(err, changed);
      });
      return;
    }
    var changed = action.call(command.state, this.db, this.events[command.view]);
    if ("string" === typeof changed) {
      changed = [changed];
    }
    this.setActive(command.active, command.view);
    done(null, changed);
  } };

},{"./commands":178,"async":"async"}],178:[function(require,module,exports){
"use strict";

/**
 * Commands get:
 * - db
 * - events
 * Commands need access to:
 * - 
 */

module.exports = {

  update: {
    args: ["id", "update"],
    apply: function apply(db, events) {
      this.old = {};
      for (var name in this.update) {
        this.old[name] = db.nodes[this.id][name];
      }
      db.update(this.id, this.update);
      return events.nodeChanged(this.id);
    },
    undo: function undo(db, events) {
      db.update(this.id, this.old);
      return events.nodeChanged(this.id);
    } },

  updateMany: {
    args: ["ids", "updates"],
    apply: function apply(db, events) {
      var _this = this;

      this.olds = this.ids.map(function (id, i) {
        var old = {};
        for (var name in _this.updates[i]) {
          old[name] = db.nodes[id][name];
        }
        db.update(id, _this.updates[i]);
        return old;
      });
      return this.ids.map(function (id) {
        return events.nodeChanged(id);
      });
    },
    undo: function undo(db, events) {
      var _this = this;

      this.ids.forEach(function (id, i) {
        db.update(id, _this.olds[i]);
      });
      return this.ids.map(function (id) {
        return events.nodeChanged(id);
      });
    } },

  set: {
    args: ["id", "attr", "value"],
    apply: function apply(db, events) {
      this.old = db.nodes[this.id][this.attr];
      db.set(this.id, this.attr, this.value);
      return events.nodeChanged(this.id);
    },
    undo: function undo(db, events) {
      db.set(this.id, this.attr, this.old);
      return events.nodeChanged(this.id);
    } },

  setMany: {
    args: ["attr", "ids", "values"],
    apply: function apply(db, events) {
      var _this = this;

      this.old = this.ids.map(function (id) {
        return db.nodes[id][_this.attr];
      });
      db.setMany(this.attr, this.ids, this.values);
      return this.ids.map(function (id) {
        return events.nodeChanged(id);
      });
    },
    undo: function undo(db, events) {
      db.setMany(this.attr, this.ids, this.old);
      return this.ids.map(function (id) {
        return events.nodeChanged(id);
      });
    } },

  remove: {
    args: ["ids"],
    apply: function apply(db, events) {
      var node = db.nodes[this.ids[0]],
          parent = db.nodes[node.parent],
          children = parent.children.slice(),
          ix = children.indexOf(this.ids[0]);
      if (ix === -1) {
        throw new Error("node is not a child of its parent");
      }
      // TODO: this assumes that ids are contiguous children. I think I can
      // rely on that, but I should be careful.
      this.saved = {
        nodes: this.ids.map(function (id) {
          return db.nodes[id];
        }),
        ix: ix
      };
      children.splice(ix, this.ids.length);
      db.set(node.parent, "children", children);
      db.removeMany(this.ids);
      return events.nodeChanged(node.parent);
    },
    undo: function undo(db, events) {
      var node = this.saved.nodes[0],
          parent = db.nodes[node.parent],
          children = parent.children.slice(),
          ix = this.saved.ix;
      children.splice.apply(children, [ix, 0].concat(this.ids));
      db.saveMany(this.saved.nodes);
      db.set(node.parent, "children", children);
      return events.nodeChanged(node.parent);
    } },

  importTrees: {
    args: ["pid", "index", "data"],
    async: true,
    apply: function apply(db, events, done) {
      var _this = this;

      db.dump(this.pid, this.data, this.index, function (err, created) {
        _this.created = created;
        done(err, events.nodeChanged(_this.pid));
      });
    },

    undo: function undo(db, events, done) {
      db.set(this.pid, "children", this.created.oldChildren);
      db.removeMany(this.created.ids);
      done(null, events.nodeChanged(this.pid));
    }
  },

  move: {
    args: ["id", "npid", "nindex", "nextIsRoot"],
    apply: function apply(db, events) {
      this.opid = db.nodes[this.id].parent;
      this.oindex = db.removeChild(this.opid, this.id);
      if (this.oindex === -1) {
        throw new Error("node is not a child of its parent");
      }

      var unCollapse = !this.nextIsRoot;
      if (!this.npid) {
        unCollapse = false;
        this.npid = this.opid;
        if (this.oindex < this.nindex) {
          this.nindex -= 1;
        }
      }

      db.insertChild(this.npid, this.id, this.nindex);
      db.set(this.id, "parent", this.npid);
      if (unCollapse && db.nodes[this.npid].collapsed) {
        db.set(this.npid, "collapsed", false);
        this.wasCollapsed = true;
      }
      if (this.opid === this.npid) {
        return events.nodeChanged(this.npid);
      }
      return [events.nodeChanged(this.opid), events.nodeChanged(this.npid)];
    },

    undo: function undo(db, events) {
      db.removeChild(this.npid, this.id);
      db.insertChild(this.opid, this.id, this.oindex);
      db.set(this.id, "parent", this.opid);
      if (this.wasCollapsed) {
        db.set(this.npid, "collapsed", true);
      }
      if (this.opid === this.npid) {
        return events.nodeChanged(this.npid);
      }
      return [events.nodeChanged(this.opid), events.nodeChanged(this.npid)];
    } },

  moveMany: {
    args: ["ids", "npid", "nindex", "nextIsRoot"],
    apply: function apply(db, events) {
      this.opid = db.nodes[this.ids[0]].parent;
      this.oindex = db.removeChild(this.opid, this.ids[0], this.ids.length);
      if (this.oindex === -1) {
        throw new Error("node is not a child of its parent");
      }

      var unCollapse = !this.nextIsRoot;
      if (!this.npid) {
        unCollapse = false;
        this.npid = this.opid;
      }
      if (this.npid === this.opid) {
        if (this.oindex < this.nindex) {
          this.nindex -= this.ids.length - 1;
        }
      }

      db.insertChildren(this.npid, this.ids, this.nindex);
      db.setMany("parent", this.ids, this.npid);
      if (unCollapse && db.nodes[this.npid].collapsed) {
        db.set(this.npid, "collapsed", false);
        this.wasCollapsed = true;
      }
      if (this.opid === this.npid) {
        return events.nodeChanged(this.npid);
      }
      return [events.nodeChanged(this.opid), events.nodeChanged(this.npid)];
    },

    undo: function undo(db, events) {
      db.removeChild(this.npid, this.ids[0], this.ids.length);
      db.insertChildren(this.opid, this.ids, this.oindex);
      db.setMany("parent", this.ids, this.opid);
      if (this.wasCollapsed) {
        db.set(this.npid, "collapsed", true);
      }
      if (this.opid === this.npid) {
        return "node:" + this.npid;
      }
      return ["node:" + this.opid, "node:" + this.npid];
    } },

  create: {
    args: ["pid", "ix", "type", "content"],
    apply: function apply(db) {
      this.id = db.create(this.pid, this.ix, this.content, this.type);
      return "node:" + this.pid;
    },
    undo: function undo(db) {
      db.removeChild(this.pid, this.id);
      this.saved = db.nodes[this.id];
      db.remove(this.id);
      return "node:" + this.pid;
    },
    redo: function redo(db) {
      db.save(this.id, this.saved);
      db.insertChild(this.pid, this.id, this.ix);
      return "node:" + this.pid;
    } } };

},{}],179:[function(require,module,exports){
"use strict";

module.exports = {

  modes: {
    // switch modes
    "visual mode": {
      normal: "v, shift+v" },
    "normal mode": {
      title: "back to normal mode",
      insert: "escape",
      visual: "escape, v, shift+v" } },

  editing: {
    // switch to insert mode
    edit: {
      normal: "enter, a, shift+a, f2" },
    "edit start": {
      title: "edit at start",
      normal: "i, shift+i" },
    change: {
      title: "replace contents",
      normal: "c c, shift+c",
      visual: "c, shift+c" },
    remove: {
      normal: "d d, shift+d, delete",
      visual: "d, shift+d, delete" } } };

},{}],180:[function(require,module,exports){
"use strict";

/*
 * So this architecture opens up the possibility of doing multiple views, but
 * I'm not totally sure how to make it build naturally. I don't want multiple
 * mainstores. Also, I don't think a mixin would cut it. I think I'll need to
 * make a MultiViewStore that knows about multiple views, multiple "actives",
 * "selections", and "roots". And a view can register itself and say "hey I'm
 * a new view, I care about x".
 * 
 * But when an individual node wants to listen to a store, I don't want to
 * update it when a different view is getting a selection update. And so for
 * view specific updates (like active, selection, etc), I'll have the nodes
 * listen to a `node:<id>:view1` event. That seems like it would make sense.
 * But for now, with only one view, I can just overload the main `node:<id>`
 * event. Awesome
 */

var BaseStore = require("./base");
var extend = require("../util/extend");
var Commandeger = require("./commandeger");

module.exports = MainStore;

function MainStore(options) {
  var _this = this;

  this.db = options.db;

  this.clearViews();
  this._globals = {};
  this._contextMenu = null;

  BaseStore.apply(this, arguments);

  this.cmd = new Commandeger(this.changed.bind(this), function (id, vid) {
    return _this.viewAction("setActive", vid, id);
  }, this.db, this._events);
}

MainStore.prototype = extend(Object.create(BaseStore.prototype), {
  constructor: MainStore,

  clearViews: function clearViews() {
    this.views = {};
    this._actions = {};
    this._events = {};
    if (this.cmd) {
      this.cmd.events = this._events;
    }
    this._getters = {};
    this._nextViewId = 1;
    this.activeView = 1;
  },

  headerView: function headerView() {
    var view = {};
    view.events = this.events, view.on = this.on.bind(this);
    view.off = this.off.bind(this);
    view.globals = this._globals;
    view.actions = extend({
      db: this.db,
      events: view.events,
      parent: this,
      globals: this._globals,
      changed: this.changed.bind(this) }, this.actions);
    view.getters = extend({
      globals: this._globals,
      parent: this,
      db: this.db }, this.getters);

    return view;
  },

  unregisterView: function unregisterView(id) {
    delete this.views[id];
    delete this._events[id];
    delete this._actions[id];
    delete this._getters[id];
    if (id === this.activeView) {
      this.activeView = +Object.keys(this.views)[0];
      this.changed(this.events.activeViewChanged());
    }
  },

  // create a proxy object for the store that is specific to a single view
  registerView: function registerView(root, extraActions) {
    var _this = this;

    var id = this._nextViewId++;
    if (!root || !this.db.nodes[root]) root = this.db.root;
    this.views[id] = {
      id: id,
      root: root,
      active: root,
      selected: null,
      editPos: null,
      mode: "normal" };
    this._events[id] = extend({ vid: id }, this.events);
    this._actions[id] = extend({
      view: this.views[id],
      db: this.db,
      events: this._events[id],
      changed: this.changed.bind(this),
      parent: this,
      globals: this._globals,
      startTransaction: function () {
        return _this.cmd.startTransaction();
      },
      stopTransaction: function () {
        return _this.cmd.stopTransaction();
      },
      executeCommand: (function (cmd, state, squash, done) {
        if (arguments.length === 3 && "function" === typeof squash) {
          done = squash;
          squash = undefined;
        }
        return this.cmd.execute({
          cmd: cmd,
          state: state,
          view: id,
          active: this.views[id].active,
          squash: squash,
          done: done });
      }).bind(this),
      executeCommands: (function () {
        var commands = [];
        for (var i = 0; i < arguments.length - 1; i += 2) {
          commands.push({
            cmd: arguments[i],
            state: arguments[i + 1],
            view: id,
            active: this.views[id].active
          });
        }
        if (arguments.length % 2 == 1) {
          commands[commands.length - 1].done = arguments[arguments.length - 1];
        }
        return this.cmd.executeCommands.apply(this.cmd, commands);
      }).bind(this) }, this.actions, extraActions);
    this._getters[id] = extend({
      view: this.views[id],
      globals: this._globals,
      parent: this,
      db: this.db }, this.getters);

    if (!this.activeView) {
      this.activeView = id;
    }
    this.changed(this.events.activeViewChanged());

    return {
      id: id,
      view: this.views[id],
      actions: this._actions[id],
      getters: this._getters[id],
      events: this._events[id],
      globals: this._globals,
      on: this.on.bind(this),
      off: this.off.bind(this) };
  },

  currentViewActions: function currentViewActions() {
    return this._actions[this.activeView];
  },

  // just the `store` part of the plugin
  addPlugin: function addPlugin(plugin, allPlugins) {
    BaseStore.prototype.addPlugin.call(this, plugin, allPlugins);

    if (plugin.getters) {
      for (var name in plugin.getters) {
        this.getters[name] = plugin.getters[name];
      }
    }
    if (plugin.events) {
      for (var name in plugin.events) {
        this.events[name] = plugin.events[name];
      }
    }
    if (plugin.commands) {
      this.cmds.addCommands(plugin.commands);
    }
  },

  viewAction: function viewAction(name, id) {
    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    return this._actions[id][name].apply(this._actions[id], args);
  },

  events: {
    nodeChanged: function (id) {
      return "node:" + id;
    },
    nodeViewChanged: function nodeViewChanged(id) {
      return this.nodeChanged(id) + ":view:" + this.vid;
    },

    activeViewChanged: function () {
      return "active-view";
    },
    activeNodeChanged: function activeNodeChanged() {
      return "active-node:" + this.vid;
    },
    rootChanged: function rootChanged() {
      return "root:" + this.vid;
    },
    modeChanged: function modeChanged() {
      return "mode:" + this.vid;
    },
    activeModeChanged: function activeModeChanged() {
      return "mode:active";
    },
    changed: function () {
      return "changed";
    }
  },

  actions: require("./actions"),

  // same deal as actions
  getters: {
    getNode: function getNode(id) {
      return this.db.nodes[id];
    },

    getActive: function getActive() {
      return this.view.active;
    },

    isActiveView: function isActiveView() {
      return this.view.id === this.parent.activeView;
    },

    isActive: function isActive(id) {
      return id === this.view.active;
    },

    isSelected: function isSelected(id) {
      return this.view.selection && this.view.selection.indexOf(id) !== -1;
    },

    editState: function editState(id) {
      var editing = this.view.mode === "insert" && id === this.view.active;
      return editing && this.view.editPos;
    } }
});

},{"../util/extend":182,"./actions":175,"./base":176,"./commandeger":177}],181:[function(require,module,exports){
"use strict";

module.exports = ensureInView;

function ensureInView(item) {
  var bb = item.getBoundingClientRect();
  var parent = item.parentNode;
  var rx = /(auto|scroll)/;
  var st = window.getComputedStyle(parent);
  while (parent.parentNode && !rx.test(st.overflow + st.overflowY) && parent !== document.body) {
    parent = parent.parentNode;
    st = window.getComputedStyle(parent);
  }
  var pox = parent === document.body ? {
    top: 0,
    left: 0,
    width: window.innerWidth,
    height: window.innerHeight,
    bottom: window.innerHeight,
    right: window.innerWidth } : parent.getBoundingClientRect(),
      height = bb.bottom - bb.top,
      pHeight = pox.bottom - pox.top,
      margin = 100;
  if (height + margin * 2 > pHeight) {
    margin = 10;
  }
  if (height + margin * 2 > pHeight) {
    if (bb.top > pox.top + margin) {
      scrollMe(parent, parent.scrollTop + bb.top - pox.top - margin);
    } else if (bb.bottom < pox.bottom - margin) {
      scrollMe(parent, parent.scrollTop - (pox.bottom - bb.bottom - margin));
    }
    return;
  }
  var dest;
  if (bb.top < pox.top + margin) {
    dest = parent.scrollTop - (pox.top - bb.top + margin);
  } else if (bb.bottom > pox.bottom - margin) {
    dest = parent.scrollTop + bb.bottom - pox.bottom + margin;
  } else {
    return;
  }
  if (dest < 0) dest = 0;
  if (dest > parent.scrollHeight - pox.height) dest = parent.scrollHeight - pox.height;
  scrollMe(parent, dest);
}

var scrolling = [],
    timers = [];

function scrollMe(parent, dest) {
  var ix = scrolling.indexOf(parent);
  if (ix !== -1) {
    clearInterval(timers[ix]);
  } else {
    ix = scrolling.length;
    scrolling.push(parent);
  }
  if (Math.abs(parent.scrollTop - dest) < 150) {
    parent.scrollTop = dest;
    return scrolling.pop();
  }
  var stop = function stop() {
    var ix = scrolling.indexOf(parent);
    scrolling.splice(ix, 1);
    timers.splice(ix, 1);
    clearInterval(ival);
  };
  var lastPos = null; //parent.scrollTop
  var ival = setInterval(function () {
    if (Math.abs(parent.scrollTop - dest) < 5 || parent.scrollTop === lastPos) {
      parent.scrollTop = dest;
      return stop();
    }
    // lastPos = parent.scrollTop
    parent.scrollTop += (dest - parent.scrollTop) / 5;
  }, 10);
  timers[ix] = ival;
}

},{}],182:[function(require,module,exports){
"use strict";

module.exports = function (target) {
  for (var i = 1; i < arguments.length; i++) {
    for (var name in arguments[i]) {
      target[name] = arguments[i][name];
    }
  }
  return target;
};

},{}],183:[function(require,module,exports){
"use strict";

module.exports = {
  up: slideUp,
  down: slideDown };

// speed: time to slide 100px
function slideDown(el, speed, maxtime) {
  speed = speed || 0.2;
  maxtime = maxtime || 1;
  var curh = window.getComputedStyle(el).height;
  el.style.transition = "none";
  el.style.height = "auto";
  var h = window.getComputedStyle(el).height;
  if (curh === h) {
    return;
  }el.style.height = curh;
  el.style.overflow = "hidden";
  var dur = parseInt(h, 10) * speed / 100;
  if (dur > maxtime) dur = maxtime;
  // trigger reflow
  window.getComputedStyle(el).height;
  el.style.transition = "height " + dur + "s ease";
  el.style.height = h;
  afterTransition(el, function () {
    el.style.transition = "";
    el.style.overflow = "visible";
    el.style.height = "auto";
  });
}

// speed: time to slide 100px
function slideUp(el, speed, maxtime) {
  speed = speed || 0.2;
  maxtime = maxtime || 1;
  var curh = window.getComputedStyle(el).height;
  if (curh === "0") {
    return;
  }el.style.transition = "none";
  el.style.height = curh;
  var dur = parseInt(curh, 10) * speed / 100;
  if (dur > maxtime) dur = maxtime;
  el.style.overflow = "hidden";
  // trigger reflow
  window.getComputedStyle(el).height;
  el.style.transition = "height " + dur + "s ease";
  el.style.height = "0";
  afterTransition(el, function () {
    el.style.height = "0";
    el.style.transition = "";
    el.style.overflow = "hidden";
  });
}

function afterTransition(el, fn) {
  el.addEventListener("transitionend", function done() {
    el.removeEventListener("transitionend", done);
    fn();
  });
}

},{}],184:[function(require,module,exports){
"use strict";

var uuid = require("../lib/uuid");

module.exports = treesToMap;

function treesToMap(trees, pid, keepIds) {
  var _this = this;

  var nodes = {};
  if (!Array.isArray(trees)) {
    trees = [trees];
  }

  var processChild = function (pid, child) {
    var id = keepIds && child.id ? child.id : uuid();
    var node = {
      id: id,
      content: child.content,
      children: [],
      parent: pid };
    nodes[id] = node;
    for (var name in child) {
      if (["content", "children", "id"].indexOf(name) !== -1) continue;
      node[name] = child[name];
    }
    if (child.children && child.children.length) {
      node.children = child.children.map(processChild.bind(_this, id));
    }
    return id;
  };
  var roots = trees.map(processChild.bind(this, pid));
  return { nodes: nodes, roots: roots };
}

},{"../lib/uuid":117}],185:[function(require,module,exports){
"use strict";

module.exports = verifyNodes;

function verifyNodes(root, map) {
  if (!map[root]) {
    return new Error("Root node not found");
  }return verifyNode(map[root], map);
}

function verifyNode(node, map) {
  if (node.children) {
    for (var i = 0; i < node.children.length; i++) {
      var child = map[node.children[i]];
      if (!child) {
        child = map[node.children[i]] = { id: node.children[i], content: "*contents missing*", parent: node.id, children: [] };
        console.log("Child node not found: " + node.children[i] + " of " + node.id);
      }
      if (child.parent !== node.id) {
        console.log("Misparent");
        console.log(node);
        console.log(child);
        child.parent = node.id
        // return new Error("Misparented. " + child.id + " should have parent " + node.id + " but instead it is " + child.parent)
        ;
      }
      var err = verifyNode(child, map);
      if (err) {
        return err;
      }
    }
  }
}
// return new Error("Child node not found: " + node.children[i] + ' of ' + node.id)

},{}],186:[function(require,module,exports){
"use strict";

var React = require("react"),
    PT = React.PropTypes;

var Textarea = require("./textarea-grow");

/**
 * The required interface, in addition to the shown props, is
 * : focus(bool atStart)
 */
var Editor = React.createClass({
  displayName: "Editor",

  propTypes: {
    value: PT.string,
    onBlur: PT.func,
    onChange: PT.func,
    createAfter: PT.func,
    goDown: PT.func,
    goUp: PT.func },

  componentDidMount: function componentDidMount() {
    this.focus();
  },

  isFocused: function isFocused() {
    return this.refs.text.isFocused();
  },

  focus: function focus() {
    this.refs.text.focus.apply(this.refs.text, arguments);
  },

  _onChange: function _onChange(e) {
    this.props.onChange(e.target.value);
  },

  _onKeyDown: function _onKeyDown(e) {
    if (e.shiftKey && e.key === "Enter") {
      return e.stopPropagation();
    }
    var text = this.refs.text,
        line,
        pos;

    if (e.key === "ArrowDown" && !e.shiftKey) {
      line = text.getCursorLine();
      if (line === -1 || line === 1) {
        if (this.props.goDown()) {
          e.preventDefault();
        }
      }
    } else if (e.key === "ArrowUp" && !e.shiftKey) {
      line = text.getCursorLine();
      if (line === 0 || line === 1) {
        if (this.props.goUp()) {
          e.preventDefault();
        }
      }
    } else if (e.key === "ArrowRight" && !e.shiftKey) {
      pos = text.getCursorPos();
      if (pos === -1 || pos === 1) {
        this.props.goDown(true);
        e.preventDefault();
      }
    } else if (e.key === "ArrowLeft" && !e.shiftKey) {
      pos = text.getCursorPos();
      if (pos === 0 || pos === 1) {
        this.props.goUp();
        e.preventDefault();
      }
    } else if (e.key === "Backspace") {
      if (!this.props.value.length) {
        this.props.removeEmpty();
        e.preventDefault();
      } else if (text.getCursorSplit() === 0) {
        e.preventDefault();
        this.props.joinUp(null, this.props.value);
      }
    } else if (e.key === "Enter") {
      if (!e.shiftKey && !e.ctrlKey && !e.altKey && this.props.value.indexOf("\n") === -1) {
        text.blur();
        pos = text.getCursorSplit();
        if (pos < this.props.value.length) {
          this.props.onChange(this.props.value.slice(0, pos));
          this.props.createAfter(null, this.props.value.slice(0, pos), this.props.value.slice(pos));
        } else {
          this.props.createAfter();
        }
        e.preventDefault();
      } else if (e.ctrlKey && this.props.value.indexOf("\n") !== -1) {
        pos = text.getCursorSplit();
        if (pos < this.props.value.length) {
          this.props.onChange(this.props.value.slice(0, pos));
          this.props.createAfter(null, this.props.value.slice(0, pos), this.props.value.slice(pos));
        } else {
          this.props.createAfter();
        }
        e.preventDefault();
      }
    }
  },

  render: function render() {
    return React.createElement(Textarea, {
      ref: "text",
      value: this.props.value,
      onChange: this._onChange,
      onPaste: this.props.onPaste,
      onBlur: this.props.onBlur,
      onKeyDown: this._onKeyDown });
  }
});

module.exports = Editor;

},{"./textarea-grow":189,"react":"react"}],187:[function(require,module,exports){
"use strict";

var React = require("react/addons");
var cx = React.addons.classSet;
var PT = React.PropTypes;

var marked = require("marked");
var renderer = new marked.Renderer();
renderer.link = function (href, title, text) {
  return "<a href=\"" + href + "\" target=\"_blank\" title=\"" + title + "\">" + text + "</a>";
};

marked.setOptions({
  gfm: true,
  // sanitize: true,
  tables: true,
  breaks: true,
  pedantic: false,
  smartLists: true,
  smartypants: true,
  renderer: renderer
});

var DefaultRenderer = React.createClass({
  displayName: "DefaultRenderer",

  _onClick: function _onClick(e) {
    if (e.target.nodeName === "A") {
      return;
    }this.props.onClick(e);
  },
  render: function render() {
    return React.createElement("span", { className: "treed_body_rendered",
      onClick: this._onClick,
      dangerouslySetInnerHTML: {
        __html: this.props.content ? marked(this.props.content + "") : ""
      } });
  }
});

module.exports = DefaultRenderer;

},{"marked":"marked","react/addons":"react/addons"}],188:[function(require,module,exports){
"use strict";

var React = require("react/addons"),
    cx = React.addons.classSet,
    PT = React.PropTypes,
    ensureInView = require("../../util/ensure-in-view"),
    DefaultEditor = require("./default-editor"),
    DefaultRenderer = require("./default-renderer");

// a more complex body would show different things based on the type of node.
var SimpleBody = React.createClass({
  displayName: "SimpleBody",

  propTypes: {
    editor: PT.func,
    renderer: PT.func,
    node: PT.object,
    isActive: PT.bool,
    editState: PT.oneOfType([PT.string, PT.bool]),
    actions: PT.object,
    store: PT.object },

  _onClick: function _onClick() {
    if (this.props.editState) {} else {
      this.props.actions.edit(this.props.node.id);
    }
  },

  getDefaultProps: function getDefaultProps() {
    return {
      renderer: null,
      editor: null };
  },

  getInitialState: function getInitialState() {
    return {
      content: this.props.node.content
    };
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (!nextProps.editState && this.props.editState) {
      if (this.state.content !== this.props.node.content) {
        this.props.actions.setContent(this.props.node.id, this.state.content);
      }
    }
    this.setState({
      content: nextProps.node.content
    });
  },

  _onChange: function _onChange(value) {
    this.setState({ content: value });
  },

  _onBlur: function _onBlur() {
    var _this = this;

    if (this.state.content !== this.props.node.content) {
      this.props.actions.setContent(this.props.node.id, this.state.content);
    }
    setTimeout(function () {
      if (_this.isMounted() && !_this.props.store.view.windowBlur && _this.props.isActive && _this.refs.text && (_this.refs.text.isFocused && !_this.refs.text.isFocused())) {
        _this.props.actions.normalMode();
      }
    }, 80);
  },

  _onContextMenu: function _onContextMenu(e) {
    if (this.props.store.view.mode === "insert" && this.props.node.id === this.props.store.view.active) {
      return;
    }this.props.actions.setActive(this.props.node.id);
    this.props.actions.showContextMenu(e.clientX, e.clientY, this.props.node.id);
    e.preventDefault();
    e.stopPropagation();
  },

  componentDidMount: function componentDidMount() {
    if (!this.props.editState) {
      return;
    }ensureInView(this.refs.text.getDOMNode());
    this.refs.text.focus(this.props.editState);
  },

  componentDidUpdate: function componentDidUpdate(prevProps) {
    if (!prevProps.editState && this.props.editState) {
      ensureInView(this.refs.text.getDOMNode());
      this.refs.text.focus(this.props.editState);
    }
  },

  editor: function editor() {
    var Ctrl = this.props.editor || DefaultEditor;
    var props = {
      ref: "text",
      value: this.state.content,
      node: this.props.node,
      store: this.props.store,
      goDown: this.props.actions.goDown.bind(this.props.actions),
      goUp: this.props.actions.goUp.bind(this.props.actions),
      joinUp: this.props.actions.joinUp.bind(this.props.actions),
      createAfter: this.props.actions.createAfter.bind(this.props.actions),
      removeEmpty: this.props.actions.removeEmpty.bind(this.props.actions),
      onChange: this._onChange,
      onBlur: this._onBlur
    };
    if (Ctrl.isReactLegacyFactory) {
      return React.createElement(Ctrl, props);
    }
    return Ctrl(props);
  },

  renderer: function renderer() {
    if (!this.props.renderer) {
      return React.createElement(DefaultRenderer, { onClick: this._onClick, content: this.props.node.content });
    }
    return this.props.renderer.call(this);
  },

  render: function render() {
    var className = cx({
      treed_body: true
    });
    className += " treed_body-type-" + this.props.node.type;
    return React.createElement(
      "div",
      { className: className, onContextMenu: this._onContextMenu },
      this.props.editState ? this.editor() : this.renderer()
    );
  }
});

module.exports = SimpleBody;

// this.props.actions.normalMode(this.props.node.id)

},{"../../util/ensure-in-view":181,"./default-editor":186,"./default-renderer":187,"react/addons":"react/addons"}],189:[function(require,module,exports){
"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require("react");

var Textarea = React.createClass({
  displayName: "Textarea",

  getCursorSplit: function getCursorSplit() {
    var a = this.refs.area.getDOMNode();
    return a.selectionEnd;
  },

  // -1 at end
  // 0 at start
  // 1 no content
  // 2 selection not collapsed
  // 3 somewhere in the middle
  getCursorPos: function getCursorPos() {
    var a = this.refs.area.getDOMNode();
    if (a.selectionStart !== a.selectionEnd) {
      return 2;
    }
    if (!a.value.length) {
      return 1;
    }if (a.selectionStart === 0) {
      return 0;
    }if (a.selectionStart === a.value.length) {
      return -1;
    }return 3;
  },

  // 0 == start
  // -1 == end
  // 1 == there's only one line
  // 2 == middle somewhere
  getCursorLine: function getCursorLine() {
    var s = this.refs.shadow.getDOMNode(),
        a = this.refs.area.getDOMNode(),
        style = window.getComputedStyle(s),
        lineHeight = this._fontSize / 0.875;
    if (s.getBoundingClientRect().height - parseInt(style.paddingTop) - parseInt(style.paddingBottom) <= lineHeight * 1.5) {
      // single line
      return 1;
    }
    if (a !== document.activeElement) {
      return 2;
    }if (a.selectionStart !== a.selectionEnd) {
      return 2;
    }if (a.selectionStart === 0) {
      return 0;
    }if (a.selectionEnd === this.props.value.length) {
      return -1;
    }var t = s.firstChild.nodeValue,
        bt = this.props.value.slice(0, a.selectionStart),
        at = this.props.value[a.selectionStart];
    if (at !== " " && at !== "\n" && at) {
      bt += this.props.value.slice(a.selectionStart).match(/[^\s]+/)[0];
    }
    s.firstChild.nodeValue = bt + " ";
    var h = s.getBoundingClientRect().height;
    s.firstChild.nodeValue = t;
    if (h <= lineHeight * 1.5) {
      return 0;
    }var full = a.getBoundingClientRect().height;
    if (full - lineHeight * 0.5 < h) {
      return -1;
    }
  },

  resize: function resize() {
    var shadow = this.refs.shadow.getDOMNode(),
        area = this.refs.area.getDOMNode();
    var style = window.getComputedStyle(shadow);
    this._fontSize = parseInt(style.fontSize, 10);
    area.style.height = style.height
    // var h = this.refs.shadow.getDOMNode().getBoundingClientRect().height
    // if (h < this.props.fontSize / .875) h = this.props.fontSize / .875
    // this.refs.area.getDOMNode().style.height = h + 'px'
    ;
  },

  componentDidUpdate: function componentDidUpdate() {
    this.resize();
  },

  componentDidMount: function componentDidMount() {
    this.resize();
    window.addEventListener("resize", this.resize);
  },

  componentWillUnmount: function componentWillUnmount() {
    window.removeEventListener("resize", this.resize);
  },

  blur: function blur() {
    var inp = this.refs.area.getDOMNode();
    inp.blur();
  },

  isFocused: function isFocused() {
    return this.refs.area.getDOMNode() === document.activeElement;
  },

  focus: function focus(at) {
    var inp = this.refs.area.getDOMNode(),
        pos = 0;
    if (at === "end" || !at) pos = inp.value.length;
    if ("number" === typeof at) {
      pos = at;
    }
    if (inp !== document.activeElement) inp.focus();
    if (at === "change") {
      inp.selectionStart = 0;
      inp.selectionEnd = inp.value.length;
    } else {
      inp.selectionStart = inp.selectionEnd = pos;
    }
  },

  render: function render() {
    return React.createElement(
      "div",
      { className: "textarea-grow " + this.props.className },
      React.createElement("textarea", _extends({
        ref: "area",
        className: "body_input"
      }, this.props)),
      React.createElement(
        "div",
        {
          ref: "shadow",
          className: "shadow" },
        this.props.value + " "
      )
    );
  }
});

module.exports = Textarea;

},{"react":"react"}],190:[function(require,module,exports){
"use strict";

var React = require("react/addons");
var cx = React.addons.classSet;
var PT = React.PropTypes;

var FlexPanes = React.createClass({
  displayName: "FlexPanes",

  propTypes: {
    flex: PT.object,
    onChange: PT.func.isRequired,
    main: PT.renderable,
    second: PT.renderable },

  getInitialState: function getInitialState() {
    return {
      moving: false,
      tmpSize: this.props.flex.size };
  },
  _startDrag: function _startDrag(e) {
    e.preventDefault();
    e.stopPropagation();
    this.setState({ dragging: true });
  },
  _onDrag: function _onDrag(e) {
    var second = this.refs.second.getDOMNode().getBoundingClientRect();
    this.setState({
      tmpSize: this.props.flex.pos === "bottom" ? second.bottom - e.clientY : second.right - e.clientX });
  },
  _endDrag: function _endDrag() {
    var _this = this;

    var data = this.props.flex;
    data.size = this.state.tmpSize;
    this.setState({
      dragging: false }, function () {
      return _this.props.onChange(data);
    });
  },
  componentWillReceiveProps: function componentWillReceiveProps(props) {
    if (props.flex.size !== this.props.flex.size) {
      this.setState({ tmpSize: props.flex.size });
    }
  },
  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
    if (!prevState.dragging && this.state.dragging) {
      parent.addEventListener("mousemove", this._onDrag);
      parent.addEventListener("mouseup", this._endDrag);
    } else if (prevState.dragging && !this.state.dragging) {
      parent.removeEventListener("mousemove", this._onDrag);
      parent.removeEventListener("mouseup", this._endDrag);
    }
  },
  _switch: function _switch() {
    var data = this.props.flex;
    data.pos = data.pos === "bottom" ? "side" : "bottom";
    this.props.onChange(data);
  },

  render: function render() {
    var bottom = this.props.flex.pos === "bottom",
        secondStyle = {
      overflow: "auto" };
    secondStyle[bottom ? "height" : "width"] = this.state.tmpSize;
    return React.createElement(
      "div",
      { className: "flex-panes flex-panes-" + (bottom ? "horiz" : "vert"),
        style: {
          flexDirection: bottom ? "column" : "row" } },
      React.createElement(
        "div",
        { className: "flex-main" },
        this.props.main
      ),
      React.createElement(
        "div",
        { className: "flex-bar", onMouseDown: this._startDrag },
        React.createElement("div", { className: "flex-switch",
          onClick: this._switch,
          onMouseDown: function (e) {
            return e.stopPropagation();
          } })
      ),
      React.createElement(
        "div",
        { ref: "second", className: "flex-second",
          style: secondStyle },
        this.props.second
      )
    );
  }
});

module.exports = FlexPanes;

},{"react/addons":"react/addons"}],191:[function(require,module,exports){
"use strict";

var React = require("react/addons");
var cx = React.addons.classSet;
var PT = React.PropTypes;

var extend = require("../../util/extend");
var Listener = require("../../listener");
var FocusItem = require("./item");

var TreeView = React.createClass({
  displayName: "TreeView",

  mixins: [Listener(function (store, props) {
    return {
      root: store.view.root,
      mode: store.view.mode,
      isActive: store.isActiveView() };
  })],

  propTypes: {
    plugins: PT.array,
    nodePlugins: PT.array,
    skipMix: PT.array },

  getDefaultProps: function getDefaultProps() {
    return {
      skipMix: []
    };
  },

  componentDidUpdate: function componentDidUpdate(prevProps) {
    if (this.props.store !== prevProps.store) {
      var e = this.props.store.events;
      this.listen(e.rootChanged(), e.modeChanged(), e.activeViewChanged());
    }
  },

  componentWillMount: function componentWillMount() {
    var e = this.props.store.events;
    this.listen(e.rootChanged(), e.modeChanged(), e.activeViewChanged());
  },

  fromMix: function fromMix(part) {
    if (!this.props.plugins) {
      return;
    }if (this.props.skipMix.indexOf(part) !== -1) {
      return;
    }var items = [];
    for (var i = 0; i < this.props.plugins.length; i++) {
      var plugin = this.props.plugins[i].blocks;
      if (!plugin || !plugin[part]) continue;
      items.push(plugin[part](this.props.store.actions, this.state, this.props.store));
    }
    if (!items.length) {
      return null;
    }return items;
  },

  render: function render() {
    var className = "focus";
    if (this.state.isActive) className += " focus-active";
    var bodies = {
      "default": { editor: null, renderer: null }
    };
    if (this.props.nodePlugins) {
      for (var i = 0; i < this.props.nodePlugins.length; i++) {
        if (this.props.nodePlugins[i].bodies) {
          bodies = extend(bodies, this.props.nodePlugins[i].bodies);
        }
      }
    }
    return FocusItem({
      store: this.props.store,
      plugins: this.props.nodePlugins,
      bodies: bodies,
      id: this.state.root
    });
  } });

module.exports = TreeView;

},{"../../listener":118,"../../util/extend":182,"./item":192,"react/addons":"react/addons"}],192:[function(require,module,exports){
"use strict";

var React = require("react/addons");
var cx = React.addons.classSet;
var PT = React.PropTypes;
var SimpleBody = require("../body/simple");
var FlexPanes = require("./flex-panes");

var Listener = require("../../listener");

var FocusItem = React.createClass({
  displayName: "FocusItem",

  mixins: [Listener({
    storeAttrs: function storeAttrs(getters, props) {
      return {
        node: getters.getNode(props.id),
        isActiveView: getters.isActiveView(),
        editState: getters.editState(props.id) };
    },

    shouldGetNew: function shouldGetNew(nextProps) {
      return nextProps.id !== this.props.id || nextProps.store !== this.props.store;
    },

    getListeners: function getListeners(props, events) {
      return [events.nodeChanged(props.id), events.nodeViewChanged(props.id)];
    } })],

  componentWillMount: function componentWillMount() {
    var _this = this;

    // get plugin update functions
    this._plugin_updates = null;
    this.props.plugins.forEach(function (plugin) {
      if (!plugin.componentDidUpdate) return;
      if (!_this._plugin_updates) {
        _this._plugin_updates = [plugin.componentDidUpdate];
      } else {
        _this._plugin_updates.push(plugin.componentDidUpdate);
      }
    });
  },

  propTypes: {
    id: PT.string.isRequired,
    plugins: PT.array,
    bodies: PT.object,
    isRoot: PT.bool },

  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
    return nextState !== this.state || nextProps.index !== this.props.index && nextState.isActive;
  },

  /** Use to check what things are updating when */
  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
    var _this = this;

    if (this._plugin_updates) {
      this._plugin_updates.map(function (fn) {
        return fn.call(_this, prevProps, prevState);
      });
    }
  },
  // **/

  fromMix: function fromMix(part) {
    if (!this.props.plugins) {
      return;
    }var items = [];
    for (var i = 0; i < this.props.plugins.length; i++) {
      var plugin = this.props.plugins[i].blocks;
      if (!plugin || !plugin[part]) continue;
      items.push(plugin[part](this.state.node, this.props.store.actions, this.state, this.props.store));
    }
    if (!items.length) {
      return null;
    }return items;
  },

  body: (function (_body) {
    var _bodyWrapper = function body() {
      return _body.apply(this, arguments);
    };

    _bodyWrapper.toString = function () {
      return _body.toString();
    };

    return _bodyWrapper;
  })(function () {
    var body = this.props.bodies[this.state.node.type] || this.props.bodies["default"];
    return React.createElement(
      "div",
      { ref: "body", className: "focus_item_body", style: { flex: 1 } },
      SimpleBody({
        editor: body.editor,
        renderer: body.renderer,
        node: this.state.node,
        isActive: true,
        editState: this.state.editState,
        actions: this.props.store.actions,
        store: this.props.store })
    );
  }),

  _onChange: function _onChange(focus) {
    this.props.store.actions.set(this.props.id, "focus", focus);
  },

  render: function render() {
    var _this = this;

    var className = cx({
      focus: true,
      "focus-actove": this.state.isActiveView,
      "focus-editing": this.state.editState });
    className += " focus_item-type-" + this.state.node.type;
    if (this.props.plugins) {
      this.props.plugins.forEach(function (plugin) {
        if (!plugin.classes) return;
        var classes = plugin.classes(_this.state.node, _this.state);
        if (classes) className += " " + classes;
      });
    }
    var body = this.body();
    var focusPane = this.fromMix("focus-pane");
    if (!focusPane) {
      return React.createElement(
        "div",
        { className: className },
        body
      );
    }
    var focus = this.state.node.focus || { pos: "bottom", size: 300 };
    return React.createElement(FlexPanes, {
      onChange: this._onChange,
      flex: focus,
      main: body,
      second: focusPane });
  }
});

module.exports = FocusItem;

},{"../../listener":118,"../body/simple":188,"./flex-panes":190,"react/addons":"react/addons"}],193:[function(require,module,exports){
"use strict";

var movement = require("./movement");

module.exports = {
  // TODO: put these in a mixin, b/c they only apply to the treelist this.view?
  // this would be the same mixin that does collapsability? Or maybe there
  // would be a simplified one that doesn't know about collapsibility. Seems
  // like there would be some duplication
  goUp: function goUp() {
    var up = movement.up(this.view.active, this.view.root, this.db.nodes);
    if (!up) {
      return false;
    }this.setActive(up);
  },

  pageUp: function pageUp() {
    var curr = this.view.active,
        up;
    for (var i = 0; i < 10; i++) {
      up = movement.up(curr, this.view.root, this.db.nodes);
      if (!up) break;
      curr = up;
    }
    this.setActive(curr);
  },

  pageDown: function pageDown() {
    var curr = this.view.active,
        down;
    for (var i = 0; i < 10; i++) {
      down = movement.down(curr, this.view.root, this.db.nodes);
      if (!down) break;
      curr = down;
    }
    this.setActive(curr);
  },

  goDown: function goDown(editStart) {
    var down = movement.down(this.view.active, this.view.root, this.db.nodes);
    if (!down) {
      return false;
    }this.setActive(down);
    if (editStart) this.view.editPos = "start";
  },

  goLeft: function goLeft() {
    this.setActive(movement.left(this.view.active, this.view.root, this.db.nodes));
  },

  goRight: function goRight() {
    this.setActive(movement.right(this.view.active, this.view.root, this.db.nodes));
  },

  joinUp: function joinUp(id, text) {
    var _this = this;

    id = id || this.view.active;
    if (id === this.view.root) {
      return;
    }var prev = movement.up(id, this.view.root, this.db.nodes);
    if (prev === id) {
      return;
    }if (!prev) {
      return;
    }var content = this.db.nodes[prev].content + text,
        at = this.db.nodes[prev].content.length;
    this.executeCommands("remove", { ids: [id] }, "set", { id: prev, attr: "content", value: content }, function () {
      return setTimeout(function (_) {
        return _this.editAt(prev, at);
      }, 0);
    });
  },

  joinDown: function joinDown(id) {
    if (!arguments.length && this.view.mode === "visual") {
      return this.joinMany();
    }
    id = id || this.view.active;
    if (id === this.view.root) {
      return;
    }var next = movement.down(id, this.view.root, this.db.nodes);
    if (!next) {
      return;
    }var content = this.db.nodes[id].content + "\n" + this.db.nodes[next].content;
    this.executeCommands("set", { id: id, attr: "content", value: content }, "remove", { ids: [next] });
  },

  removeEmpty: function removeEmpty(id) {
    id = id || this.view.active;
    if (id === this.view.root) {
      return;
    }var next = movement.up(id, this.view.root, this.db.nodes);
    this.view.active = next;
    this.executeCommand("remove", { ids: [id] });
    this.changed(this.events.nodeChanged(next));
  },

  remove: function remove(id) {
    id = id || this.view.active;
    if (id === this.view.root) {
      return;
    }var next, ids;
    if (this.view.mode === "visual") {
      ids = this.view.selection;
      next = movement.down(ids[ids.length - 1], this.view.root, this.db.nodes, true);
      this.setMode("normal", true);
    } else {
      ids = [id];
      next = movement.down(id, this.view.root, this.db.nodes, true);
    }
    if (!next) {
      next = movement.up(ids[0], this.view.root, this.db.nodes);
    }
    this.view.active = next;
    this.executeCommand("remove", { ids: ids });
    this.changed(this.events.nodeChanged(next));
  },

  indent: function indent(id) {
    if (!arguments.length && this.view.mode === "visual") {
      return this.indentMany();
    }
    id = id || this.view.active;
    var pos = movement.indent(id, this.view.root, this.db.nodes);
    if (!pos) {
      return;
    }var wasEditing = false;
    if (this.view.mode === "insert") {
      document.activeElement.blur();
      wasEditing = true;
    }
    this.executeCommand("move", {
      id: id,
      npid: pos.npid,
      nextIsRoot: pos.npid === this.view.root,
      nindex: pos.nindex });
    if (wasEditing) {
      this.edit();
    }
  },

  indentMany: function indentMany() {
    if (this.view.mode !== "visual") {
      return;
    }var ids = this.view.selection;
    var pos = movement.indent(ids[0], this.view.root, this.db.nodes);
    if (!pos) {
      return;
    }this.executeCommand("moveMany", {
      ids: ids,
      npid: pos.npid,
      nextIsRoot: pos.npid === this.view.root,
      nindex: pos.nindex });
  },

  dedentMany: function dedentMany() {
    if (this.view.mode !== "visual") {
      return;
    }var ids = this.view.selection;
    var pos = movement.dedent(ids[0], this.view.root, this.db.nodes);
    if (!pos) {
      return;
    }this.executeCommand("moveMany", {
      ids: ids,
      npid: pos.npid,
      nextIsRoot: pos.npid === this.view.root,
      nindex: pos.nindex });
  },

  dedent: function dedent(id) {
    if (!arguments.length && this.view.mode === "visual") {
      return this.dedentMany();
    }
    id = id || this.view.active;
    var pos = movement.dedent(id, this.view.root, this.db.nodes);
    if (!pos) {
      return;
    }var wasEditing = false;
    if (this.view.mode === "insert") {
      document.activeElement.blur();
      wasEditing = true;
    }
    this.executeCommand("move", {
      id: id,
      npid: pos.npid,
      nextIsRoot: pos.npid === this.view.root,
      nindex: pos.nindex });
    if (wasEditing) {
      this.edit();
    }
  },

  moveDown: function moveDown(id) {
    id = id || this.view.active;
    var ids = undefined;
    if (this.view.mode === "visual") {
      ids = this.view.selection;
    } else {
      ids = [id];
    }
    var pos = movement.below(ids[ids.length - 1], this.view.root, this.db.nodes);
    if (!pos) {
      return;
    }this.executeCommand("moveMany", {
      ids: ids,
      npid: pos.pid,
      nextIsRoot: pos.pid === this.view.root,
      nindex: pos.ix });
  },

  moveUp: function moveUp(id) {
    id = id || this.view.active;
    var ids = undefined;
    if (this.view.mode === "visual") {
      ids = this.view.selection;
    } else {
      ids = [id];
    }
    var pos = movement.above(ids[0], this.view.root, this.db.nodes);
    if (!pos) {
      return;
    }this.executeCommand("moveMany", {
      ids: ids,
      npid: pos.pid,
      nextIsRoot: pos.pid === this.view.root,
      nindex: pos.ix });
  },

  createBefore: function createBefore(id) {
    var _this = this;

    id = id || this.view.active;
    var node = this.db.nodes[id];
    if (id === this.view.root) {
      return;
    }this.executeCommand("create", {
      pid: node.parent,
      type: node.type,
      ix: this.db.nodes[node.parent].children.indexOf(id) }, function (err, cmd) {
      if (err) return console.warn("failed to create");
      _this.edit(cmd.id);
    });
  },

  createChild: function createChild(id) {
    var _this = this;

    id = id || this.view.active;
    var node = this.db.nodes[id],
        pos;
    pos = {
      pid: id,
      type: node.type,
      ix: node.children ? node.children.length : 0
    };
    if (node.collapsed) {
      this.executeCommands("set", { id: id, attr: "collapsed", value: false }, "create", pos, function (err, cmd) {
        if (err) return console.warn("failed to create");
        _this.edit(cmd.id);
      });
    } else {
      this.executeCommand("create", pos, function (err, cmd) {
        if (err) return console.warn("failed to create");
        _this.edit(cmd.id);
      });
    }
  },

  createAfter: function createAfter(id, split, after) {
    var _this = this;

    id = id || this.view.active;
    var node = this.db.nodes[id],
        pos;
    if (id === this.view.root || node.children.length && !node.collapsed) {
      pos = {
        pid: id,
        type: node.type,
        ix: 0
      };
    } else {
      pos = {
        pid: node.parent,
        type: node.type,
        ix: this.db.nodes[node.parent].children.indexOf(id) + 1 };
    }
    if (arguments.length === 3) {
      pos.content = after;
      this.executeCommands("set", {
        id: id,
        attr: "content",
        value: split }, "create", pos, function (err, cmd) {
        if (err) return console.warn("failed to create");
        _this.editStart(cmd.id);
      });
    } else {
      this.executeCommand("create", pos, function (err, cmd) {
        if (err) return console.warn("failed to create");
        _this.edit(cmd.id);
      });
    }
  },

  // just for the tree view, pretty much
  goToFirstSibling: function goToFirstSibling(id) {
    id = id || this.view.active;
    var first = movement.firstSibling(id, this.view.root, this.db.nodes);
    if (first === id) {
      first = movement.up(id, this.view.root, this.db.nodes);
    }
    this.setActive(first);
  },

  moveToFirstSibling: function moveToFirstSibling(id) {
    id = id || this.view.active;
    if (id === this.view.root) {
      return;
    }var pid = this.db.nodes[id].parent,
        ch = this.db.nodes[pid].children,
        cix = ch.indexOf(id);
    if (cix === 0) {
      return;
    }this.executeCommand("move", {
      id: id,
      nindex: 0 });
  },

  moveToLastSibling: function moveToLastSibling(id) {
    id = id || this.view.active;
    if (id === this.view.root) {
      return;
    }var pid = this.db.nodes[id].parent,
        ch = this.db.nodes[pid].children,
        cix = ch.indexOf(id);
    if (cix === ch.length - 1) {
      return;
    }this.executeCommand("move", {
      id: id,
      nindex: ch.length });
  },

  goToLastSibling: function goToLastSibling(id) {
    id = id || this.view.active;
    var last = movement.lastSibling(id, this.view.root, this.db.nodes);
    if (last === id) {
      last = movement.down(id, this.view.root, this.db.nodes);
    }
    this.setActive(last);
  },

  goToBottom: function goToBottom() {
    this.setActive(movement.bottom(this.view.root, this.db.nodes));
  },

  goToTop: function goToTop() {
    this.setActive(this.view.root);
  },

  goToLastEdited: function goToLastEdited() {
    var id = this.view.lastEdited || this.view.root;
    this.edit(id);
  },

  goToNextSibling: function goToNextSibling(id) {
    id = id || this.view.active;
    if (id === this.view.root) {
      return;
    }var next = movement.nextSibling(id, this.view.root, this.db.nodes);
    if (!next) {
      return false;
    }this.setActive(next);
  },

  goToPreviousSibling: function goToPreviousSibling(id) {
    id = id || this.view.active;
    var prev = movement.prevSibling(id, this.view.root, this.db.nodes);
    if (!prev) {
      prev = movement.up(id, this.view.root, this.db.nodes);
    }
    this.setActive(prev);
  },

  goToSurvivingNeighbor: function goToSurvivingNeighbor(id) {
    id = id || this.view.active;
    this.setActive(movement.survivingNeighbor(id, this.view.root, this.db.nodes));
  } };

},{"./movement":197}],194:[function(require,module,exports){
"use strict";

var React = require("react/addons");
var PT = React.PropTypes;

var extend = require("../../util/extend");
var Listener = require("../../listener");
var ListItem = require("./item");

// TODO rename TreeView classes to ListView - check css, etc.
var ListView = React.createClass({
  displayName: "ListView",

  statics: {
    keys: require("./keys"),
    actions: require("./actions") },

  mixins: [Listener(function (store, props) {
    return {
      root: store.view.root,
      mode: store.view.mode,
      isActive: store.isActiveView() };
  })],

  propTypes: {
    plugins: PT.array,
    nodePlugins: PT.array,
    skipMix: PT.array },

  getDefaultProps: function getDefaultProps() {
    return {
      skipMix: []
    };
  },

  componentDidUpdate: function componentDidUpdate(prevProps) {
    if (this.props.store !== prevProps.store) {
      var e = this.props.store.events;
      this.listen(e.rootChanged(), e.modeChanged(), e.activeViewChanged());
    }
  },

  componentWillMount: function componentWillMount() {
    var e = this.props.store.events;
    this.listen(e.rootChanged(), e.modeChanged(), e.activeViewChanged());
    // TODO can this be factored out?
    window.addEventListener("blur", this._onBlur);
    window.addEventListener("focus", this._onFocus);
  },

  componentWillUnmount: function componentWillUnmount() {
    window.removeEventListener("blur", this._onBlur);
    window.removeEventListener("focus", this._onFocus);
  },

  _onBlur: function _onBlur() {
    this.props.store.view.windowBlur = true
    // this.prev = this.props.store.view.mode
    ;
  },

  _onFocus: function _onFocus() {
    this.props.store.view.windowBlur = false
    // this.props.store.actions.edit()
    ;
  },

  fromMix: function fromMix(part) {
    if (!this.props.plugins) {
      return;
    }if (this.props.skipMix.indexOf(part) !== -1) {
      return;
    }var items = [];
    for (var i = 0; i < this.props.plugins.length; i++) {
      var plugin = this.props.plugins[i].blocks;
      if (!plugin || !plugin[part]) continue;
      items.push(plugin[part](this.props.store.actions, this.state, this.props.store));
    }
    if (!items.length) {
      return null;
    }return items;
  },

  render: function render() {
    var className = "TreeView TreeView-" + this.state.mode;
    if (this.state.isActive) className += " TreeView-active";
    var bodies = {
      "default": { editor: null, renderer: null }
    };
    if (this.props.nodePlugins) {
      for (var i = 0; i < this.props.nodePlugins.length; i++) {
        if (this.props.nodePlugins[i].bodies) {
          bodies = extend(bodies, this.props.nodePlugins[i].bodies);
        }
      }
    }
    return React.createElement(
      "div",
      { className: className, onClick: this.props.store.actions.setActiveView.bind(this.props.store.actions) },
      this.fromMix("top"),
      React.createElement(ListItem, {
        store: this.props.store,
        plugins: this.props.nodePlugins,
        bodies: bodies,
        isRoot: true,
        id: this.state.root
      }),
      this.fromMix("bottom")
    );
  } });

module.exports = ListView;

},{"../../listener":118,"../../util/extend":182,"./actions":193,"./item":195,"./keys":196,"react/addons":"react/addons"}],195:[function(require,module,exports){
"use strict";

var React = require("react/addons");
var cx = React.addons.classSet;
var PT = React.PropTypes;
var ensureInView = require("../../util/ensure-in-view");
var SimpleBody = require("../body/simple");

var Listener = require("../../listener");

var TreeItem = React.createClass({
  displayName: "TreeItem",

  mixins: [Listener({
    storeAttrs: function storeAttrs(getters, props) {
      return {
        node: getters.getNode(props.id),
        isActiveView: getters.isActiveView(),
        isActive: getters.isActive(props.id),
        isSelected: getters.isSelected(props.id),
        editState: getters.editState(props.id) };
    },

    initStoreState: function initStoreState(state, getters, props) {
      var node = state.node;
      return {
        lazyChildren: !props.isRoot && node.collapsed && node.children.length
      };
    },

    updateStoreState: function updateStoreState(state, getters, props) {
      var node = state.node;
      return {
        lazyChildren: this.state.lazyChildren && node.collapsed
      };
    },

    shouldGetNew: function shouldGetNew(nextProps) {
      return nextProps.id !== this.props.id || nextProps.store !== this.props.store;
    },

    getListeners: function getListeners(props, events) {
      return [events.nodeChanged(props.id), events.nodeViewChanged(props.id)];
    } })],

  componentWillMount: function componentWillMount() {
    var _this = this;

    // get plugin update functions
    this._plugin_updates = null;
    this.props.plugins.forEach(function (plugin) {
      if (!plugin.componentDidUpdate) return;
      if (!_this._plugin_updates) {
        _this._plugin_updates = [plugin.componentDidUpdate];
      } else {
        _this._plugin_updates.push(plugin.componentDidUpdate);
      }
    });
  },

  propTypes: {
    id: PT.string.isRequired,
    plugins: PT.array,
    bodies: PT.object,
    isRoot: PT.bool },

  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
    return nextState !== this.state || nextProps.index !== this.props.index && nextState.isActive;
  },

  componentDidMount: function componentDidMount() {
    if (this.state.isActive && this.state.isActiveView) {
      ensureInView(this.refs.body.getDOMNode());
    }
  },

  /** Use to check what things are updating when */
  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
    var _this = this;

    if (this._plugin_updates) {
      this._plugin_updates.map(function (fn) {
        return fn.call(_this, prevProps, prevState);
      });
    }
    if (this.state.isActive && this.state.isActiveView && (!prevState.isActive || prevProps.index !== this.props.index)) {
      ensureInView(this.refs.body.getDOMNode());
    }
    if (window.DEBUG_UPDATE) {
      // DEBUG STUFF
      var n = this.getDOMNode();
      n.style.outline = "1px solid red";
      setTimeout(function () {
        n.style.outline = "";
      }, 200);
    }
  },
  // **/

  fromMix: function fromMix(part) {
    if (!this.props.plugins) {
      return;
    }var items = [];
    for (var i = 0; i < this.props.plugins.length; i++) {
      var plugin = this.props.plugins[i].blocks;
      if (!plugin || !plugin[part]) continue;
      items.push(plugin[part](this.state.node, this.props.store.actions, this.state, this.props.store));
    }
    if (!items.length) {
      return null;
    }return items;
  },

  body: (function (_body) {
    var _bodyWrapper = function body() {
      return _body.apply(this, arguments);
    };

    _bodyWrapper.toString = function () {
      return _body.toString();
    };

    return _bodyWrapper;
  })(function () {
    var body = this.props.bodies[this.state.node.type] || this.props.bodies["default"];
    var abovebody = this.fromMix("abovebody");
    var belowbody = this.fromMix("belowbody");
    return React.createElement(
      "div",
      { ref: "body", className: "TreeItem_body" },
      abovebody,
      React.createElement(SimpleBody, {
        editor: body.editor,
        renderer: body.renderer,
        node: this.state.node,
        isActive: this.state.isActive,
        editState: this.state.editState,
        actions: this.props.store.actions,
        store: this.props.store
      }),
      belowbody
    );
  }),

  _onContextMenu: function _onContextMenu(e) {
    if (this.props.store.view.mode === "insert" && this.state.node.id === this.props.store.view.active) {
      return e.stopPropagation();
    }e.preventDefault();
    e.stopPropagation();
    this.props.store.actions.setActive(this.state.node.id);
    this.props.store.actions.showContextMenu(e.clientX, e.clientY, this.state.node.id);
  },

  render: function render() {
    var _this = this;

    if (!this.state.node) {
      return React.createElement("span", null);
    }var className = cx({
      TreeItem: true,
      "TreeItem-active": this.state.isActive,
      "TreeItem-editing": this.state.editState,
      "TreeItem-selected": this.state.isSelected,
      "TreeItem-root": this.props.isRoot });
    className += " TreeItem-type-" + this.state.node.type;
    if (this.props.plugins) {
      this.props.plugins.forEach(function (plugin) {
        if (!plugin.classes) return;
        var classes = plugin.classes(_this.state.node, _this.state);
        if (classes) className += " " + classes;
      });
    }
    return React.createElement(
      "div",
      { className: className, onContextMenu: this._onContextMenu },
      React.createElement(
        "div",
        { className: "TreeItem_head" },
        this.fromMix("left"),
        this.body(),
        this.fromMix("right")
      ),
      this.fromMix("prechildren"),
      this.state.node.children.length ? React.createElement(
        "div",
        { className: "TreeItem_children", ref: "children" },
        !this.state.lazyChildren && this.state.node.children.map(function (id, i) {
          return React.createElement(TreeItem, {
            plugins: _this.props.plugins,
            store: _this.props.store,
            bodies: _this.props.bodies,
            index: i,
            key: id,
            id: id
          });
        })
      ) : this.props.isRoot ? React.createElement(
        "div",
        { className: "TreeItem_nochildren", onClick: function () {
            return _this.props.store.actions.createAfter(_this.props.id);
          } },
        "Click to add a child"
      ) : null,
      this.fromMix("bottom")
    );
  }
});

module.exports = TreeItem;

},{"../../listener":118,"../../util/ensure-in-view":181,"../body/simple":188,"react/addons":"react/addons"}],196:[function(require,module,exports){
"use strict";

module.exports = {

  "movement (normal/edit mode)": {
    "go up": {
      normal: "up, k" },
    "go down": {
      normal: "down, j" },
    // TODO allow visual mode to span parents/children?
    "go left": {
      normal: "left, h" },
    "go right": {
      normal: "right, l" },
    "go to previous sibling": {
      normal: "alt+k, alt+up" },
    "go to next sibling": {
      normal: "alt+j, alt+down" },
    "go to first sibling": {
      normal: "shift+[" },
    "go to last sibling": {
      normal: "shift+]" },
    "go to top": {
      normal: "g g, home",
      insert: "home" },
    "go to bottom": {
      normal: "shift+g, end",
      insert: "end" },
    "page up": {
      normal: "page-up",
      insert: "page-up" },
    "page down": {
      normal: "page-down",
      insert: "page-down" },
    "go to last edited": {
      normal: "g i" } },

  "movement (visual mode)": {
    "toggle selection edge": {
      visual: "o, shift+o" },
    "extend to first sibling": {
      visual: "shift+[" },
    "extend to last sibling": {
      visual: "shift+]" },
    // visual mode stuff
    "extend selection down": {
      visual: "down, j" },
    "extend selection up": {
      visual: "up, k" } },

  rearrange: {
    // move stuff
    indent: {
      normal: "tab, shift+alt+l, shift+alt+right, shift+.",
      insert: "tab, shift+alt+right",
      visual: "tab, shift+alt+l, shift+alt+right, shift+." },

    dedent: {
      normal: "shift+tab, shift+alt+h, shift+alt+left, shift+comma",
      insert: "shift+tab, shift+alt+left",
      visual: "shift+tab, shift+alt+h, shift+alt+left, shift+comma" },

    "move down": {
      normal: "shift+alt+j, shift+alt+down",
      visual: "shift+alt+j, shift+alt+down" },

    "move up": {
      normal: "shift+alt+k, shift+alt+up",
      visual: "shift+alt+k, shift+alt+up" },

    "move to first sibling": {
      normal: "ctrl+shift+[",
      visual: "ctrl+shift+[" },

    "move to last sibling": {
      normal: "ctrl+shift+]",
      visual: "ctrl+shift+]" },

    "join down": {
      title: "join nodes",
      normal: "shift+j",
      visual: "shift+j" },

    "create after": {
      text: "o, enter (at end)",
      normal: "o" },

    "create before": {
      normal: "shift+o" } } };

},{}],197:[function(require,module,exports){
"use strict";

var movement = module.exports = {

  indent: function indent(id, root, nodes) {
    if (id === root) {
      return;
    }var pid = nodes[id].parent,
        ix = nodes[pid].children.indexOf(id);
    if (ix === -1) {
      return;
    }if (ix === 0) {
      return;
    }var npid = nodes[pid].children[ix - 1];
    return {
      opid: pid,
      npid: npid,
      nindex: nodes[npid].children.length };
  },

  dedent: function dedent(id, root, nodes) {
    if (id === root) {
      return;
    }var pid = nodes[id].parent;
    if (pid === root) {
      return;
    }var npid = nodes[pid].parent,
        ix = nodes[npid].children.indexOf(pid);
    if (pid === root) {
      return;
    }return {
      opid: pid,
      npid: npid,
      nindex: ix + 1 };
  },

  nextSibling: function nextSibling(id, root, nodes) {
    if (id === root) {
      return;
    }var pid = nodes[id].parent,
        ch = nodes[pid].children,
        ix = ch.indexOf(id);
    if (ix === ch.length - 1) {
      return;
    }return ch[ix + 1];
  },

  prevSibling: function prevSibling(id, root, nodes) {
    if (id === root) {
      return;
    }var pid = nodes[id].parent,
        ch = nodes[pid].children,
        ix = ch.indexOf(id);
    if (ix === 0) {
      return;
    }return ch[ix - 1];
  },

  firstSibling: function firstSibling(id, root, nodes) {
    if (id === root) {
      return;
    }var pid = nodes[id].parent;
    return nodes[pid].children[0];
  },

  lastSibling: function lastSibling(id, root, nodes) {
    if (id === root) {
      return;
    }var pid = nodes[id].parent;
    return nodes[pid].children[nodes[pid].children.length - 1];
  },

  bottom: function bottom(root, nodes) {
    var node = nodes[root];
    if (!node.children.length) {
      return;
    }node = nodes[node.children[node.children.length - 1]];
    while (node.children.length && !node.collapsed) {
      node = nodes[node.children[node.children.length - 1]];
    }
    return node.id;
  },

  up: function up(active, root, nodes) {
    if (active === root) {
      return false;
    }var pid = nodes[active].parent,
        i = nodes[pid].children.indexOf(active);
    if (i === 0) {
      return pid;
    }var sid = nodes[pid].children[i - 1],
        sib = nodes[sid];
    while (sib.children.length && !sib.collapsed) {
      sid = sib.children[sib.children.length - 1];
      sib = nodes[sid];
    }
    return sid;
  },

  below: function below(active, root, nodes) {
    if (active === root) {
      return false;
    }var pid = nodes[active].parent,
        parent = nodes[pid],
        ix = parent.children.indexOf(active);

    if (ix === parent.children.length - 1) {
      if (pid === root) {
        return;
      }return {
        opid: pid,
        pid: parent.parent,
        ix: nodes[parent.parent].children.indexOf(pid) + 1
      };
    }
    var nid = parent.children[ix + 1],
        next = nodes[nid];
    if (next.children.length && !next.collapsed) {
      return {
        opid: pid,
        pid: nid,
        ix: 0
      };
    }
    return {
      pid: pid,
      ix: ix + 1 };
  },

  above: function above(active, root, nodes) {
    if (active === root) {
      return false;
    }var pid = nodes[active].parent,
        parent = nodes[pid],
        ix = parent.children.indexOf(active);

    if (ix === 0) {
      if (pid === root) {
        return;
      }return {
        opid: pid,
        pid: parent.parent,
        ix: nodes[parent.parent].children.indexOf(pid)
      };
    }
    var nid = parent.children[ix - 1],
        next = nodes[nid];
    if (next.children.length && !next.collapsed) {
      return {
        opid: pid,
        pid: nid,
        ix: next.children.length
      };
    }
    return {
      pid: pid,
      ix: ix - 1 };
  },

  down: function down(active, root, nodes, noChildren) {
    if (nodes[active].children.length && !noChildren && (active === root || !nodes[active].collapsed)) {
      return nodes[active].children[0];
    }
    if (active === root) {
      return false;
    }var pid = nodes[active].parent,
        parent = nodes[pid],
        i = parent.children.indexOf(active);
    while (pid !== root && i === parent.children.length - 1) {
      parent = nodes[parent.parent];
      i = parent.children.indexOf(pid);
      pid = parent.id;
    }
    if (parent === root) {
      return false;
    }return parent.children[i + 1];
  },

  left: function left(active, root, nodes) {
    if (active === root) {
      return false;
    }return nodes[active].parent;
  },

  right: function right(active, root, nodes) {
    var node = nodes[active];
    if (node.children.length && !node.collapsed) {
      return node.children[0];
    }
    return false;
  },

  survivingNeighbor: function survivingNeighbor(id, root, nodes) {
    if (id === root) {
      return false;
    }var pid = nodes[id].parent,
        ch = nodes[pid].children,
        ix = ch.indexOf(id);
    if (ix < ch.length - 1) {
      return ch[ix + 1];
    }if (ix > 0) {
      return ch[ix - 1];
    }return pid;
  } };

},{}],198:[function(require,module,exports){
"use strict";

var movement = require("./movement"),
    listMovement = require("../list/movement"),
    listActions = require("../list/actions");

module.exports = {

  createBefore: function createBefore(id) {
    var _this = this;

    id = id || this.view.active;
    var node = this.db.nodes[id],
        pos;
    if (id === this.view.root) {
      pos = {
        pid: id,
        type: node.type,
        ix: 0
      };
    } else {
      pos = {
        pid: node.parent,
        type: node.type,
        ix: this.db.nodes[node.parent].children.indexOf(id) };
    }
    this.executeCommand("create", pos, function (err, cmd) {
      if (err) return console.warn("failed to create", err); // TODO UI?
      _this.edit(cmd.id);
    });
  },

  createAfter: function createAfter(id, split, after) {
    var _this = this;

    id = id || this.view.active;
    var node = this.db.nodes[id],
        pos;
    if (id === this.view.root) {
      pos = {
        pid: id,
        type: node.type,
        ix: 0
      };
    } else {
      pos = {
        pid: node.parent,
        type: node.type,
        ix: this.db.nodes[node.parent].children.indexOf(id) + 1 };
    }
    if (arguments.length === 3) {
      pos.content = after;
      this.executeCommands("set", {
        id: id,
        attr: "content",
        value: split }, "create", pos, function (err, cmd) {
        if (err) return console.warn("failed to create", err); // TODO UI?
        _this.editStart(cmd.id);
      });
    } else {
      this.executeCommand("create", pos, function (err, cmd) {
        if (err) return console.warn("failed to create", err); // TODO UI?
        _this.edit(cmd.id);
      });
    }
  },

  joinUp: function joinUp() {},
  removeEmpty: function removeEmpty() {},

  moveDown: function moveDown(id) {
    id = id || this.view.active;
    var ids = undefined;
    if (this.view.mode === "visual") {
      ids = this.view.selection;
    } else {
      ids = [id];
    }
    var pos = movement.below(ids[ids.length - 1], this.view.root, this.db.nodes);
    if (!pos) {
      return;
    }this.executeCommand("moveMany", {
      ids: ids,
      npid: pos.pid,
      nextIsRoot: pos.pid === this.view.root,
      nindex: pos.ix });
  },

  moveUp: function moveUp(id) {
    id = id || this.view.active;
    var ids = undefined;
    if (this.view.mode === "visual") {
      ids = this.view.selection;
    } else {
      ids = [id];
    }
    var pos = movement.above(ids[ids.length - 1], this.view.root, this.db.nodes);
    this.executeCommand("moveMany", {
      ids: ids,
      npid: pos.pid,
      nextIsRoot: pos.pid === this.view.root,
      nindex: pos.ix });
  },

  goUp: function goUp(id) {
    id = id || this.view.active;
    if (id === this.view.root) {
      return this.goRight(id);
    }var next = movement.prevSiblingOrCousin(id, this.view.root, this.db.nodes);
    this.setActive(next);
  },

  goDown: function goDown(id) {
    id = id || this.view.active;
    var next = movement.nextSiblingOrCousin(id, this.view.root, this.db.nodes);
    if (!next) {
      var ch = this.db.nodes[id].children;
      if (ch && ch.length && (!this.db.nodes[id].collapsed || id === this.view.root)) {
        next = ch[ch.length - 1];
      } else {
        return;
      }
    }
    this.setActive(next);
  },

  goLeft: listActions.goLeft,

  goToFirstSibling: function goToFirstSibling(id) {
    id = id || this.view.active;
    var first = listMovement.firstSibling(id, this.view.root, this.db.nodes);
    if (first === id) {
      first = movement.prevSiblingOrCousin(id, this.view.root, this.db.nodes);
    }
    this.setActive(first);
  },

  goToLastSibling: function goToLastSibling(id) {
    id = id || this.view.active;
    var last = listMovement.lastSibling(id, this.view.root, this.db.nodes);
    if (last === id) {
      last = movement.nextSiblingOrCousin(id, this.view.root, this.db.nodes);
    }
    this.setActive(last);
  },

  goRight: function goRight(id) {
    id = id || this.view.active;
    var right = movement.right(id, this.view.root, this.db.nodes);
    if (right) this.setActive(right);
  },

  goToNextCousin: function goToNextCousin(id) {
    var parent = this.db.nodes[id].parent,
        next;
    if (!parent) {
      return false;
    }next = movement.nextCousin(parent, this.view.root, this.db.nodes);
    this.setActive(next);
  },

  goToNextSibling: function goToNextSibling(id) {
    id = id || this.view.active;
    if (id === this.view.root) {
      return;
    }var next = movement.nextSibling(id, this.view.root, this.db.nodes);
    if (!next) {
      var parent = this.db.nodes[id].parent;
      next = movement.nextSibling(parent, this.view.root, this.db.nodes);
    }
    if (!next) {
      next = movement.down(id, this.view.root, this.db.nodes);
    }
    this.setActive(next);
  },

  goToSurvivingNeighbor: listActions.goToSurvivingNeighbor,

  remove: function remove(id) {
    id = id || this.view.active;
    if (id === this.view.root) {
      return;
    }var next, ids;
    if (this.view.mode === "visual") {
      ids = this.view.selection;
      next = movement.down(ids[ids.length - 1], this.view.root, this.db.nodes, true);
      this.setMode("normal", true);
    } else {
      ids = [id];
      next = movement.down(id, this.view.root, this.db.nodes, true);
    }
    if (!next) {
      next = movement.up(ids[0], this.view.root, this.db.nodes);
    }
    this.view.active = next;
    this.executeCommand("remove", { ids: ids });
    this.changed(this.events.nodeChanged(next));
  },

  // TODO make custom ones
  indent: listActions.indent,
  dedent: listActions.dedent };

},{"../list/actions":193,"../list/movement":197,"./movement":204}],199:[function(require,module,exports){
"use strict";

module.exports = function calcPos(root, nodes, xsep, ysep, cellHeight, heights) {
  var tree = crawl(root, nodes);

  var _calcBoxes = calcBoxes(tree, cellHeight, xsep, 1, ysep);

  var boxes = _calcBoxes.boxes;
  var height = _calcBoxes.height;
  var width = _calcBoxes.width;

  var links = [];
  var rx = 0,
      ry = 0;
  relativize(tree, rx, ry);

  return { boxes: boxes, links: links, height: height, width: width };

  function relativize(node, x, y, collapsed) {
    var box = boxes[node.id];
    if (node.children) node.children.forEach(function (child) {
      var cb = boxes[child.id];
      if (!collapsed && (node.id === root || !node.collapsed)) {
        links.push({
          x1: box.x + box.width / 2 - rx,
          y1: box.y + box.height / 2 - ry,
          x2: cb.x + cb.width / 2 - rx,
          y2: cb.y + cb.height / 2 - ry,
          id: child.id });
      }
      relativize(child, box.x, box.y, collapsed || node.id !== root && node.collapsed);
    });
  }

  function crawl(id) {
    return {
      id: id,
      children: id !== root && nodes[id].collapsed ? null : nodes[id].children.map(crawl),
      width: heights[id] || 25 };
  }
};

function calcBoxes(data, cellHeight, xsep, pxscale, ysep) {
  xsep = xsep || 0;
  var t = d3.layout.tree();
  t.separation(function (a, b) {
    return a.width + b.width + (xsep || 0);
  });
  var nodes = t.nodes(data);
  // var links = t.links(nodes)

  var _findScale = findScale(data, xsep);

  var xscale = _findScale.xscale;
  var ydepth = _findScale.ydepth;

  var xs = pxscale,
      ys = cellHeight,
      height = ydepth * (cellHeight + ysep || 0),
      width = pxscale / xscale;
  //console.log(xscale, ydepth)

  var boxes = {};
  nodes.forEach(function (node) {
    var x = node.x * width,
        y = node.y * height;
    boxes[node.id] = {
      x: y,
      y: x - node.width / 2 * xs,
      height: node.width * xs,
      width: ys };
  });
  return { boxes: boxes, width: width, height: height };
}

function findScale(rootNode, sep) {
  var min = null,
      maxdepth = 1;
  function getWidth(node, depth) {
    if (min === null || min > 1 / node.width) min = 1 / node.width;
    if (!node.children) {
      return;
    }if (depth > maxdepth) maxdepth = depth;
    for (var i = 0; i < node.children.length - 1; i++) {
      var a = node.children[i],
          b = node.children[i + 1];
      var sc = (b.x - a.x) / (b.width + a.width + sep * 2) * 2;
      if (min === null || sc < min) {
        min = sc;
      }
      getWidth(a, depth + 1);
    }
    if (node.children.length) {
      getWidth(node.children[node.children.length - 1], depth + 1);
    }
  }
  getWidth(rootNode, 1);
  return { xscale: min, ydepth: maxdepth };
}

/*
function showBoxes() {
  var canv = document.createElement('canvas')
  canv.width=width;
  canv.height=height + 20
  var ctx = canv.getContext('2d')
  ctx.clearRect(0,0,width,height)
  ctx.clearRect(0,0,width,height+20)

  links.forEach(function(link) {
    var st = nodePos(link.source)
      , en = nodePos(link.target)
    ctx.beginPath()
    ctx.moveTo(st.x,st.y)
    ctx.lineTo(en.x,en.y)
    ctx.stroke()
  })

  nodes.forEach(function(node) {
    var x = node.x * width
      , y = node.y * height
    ctx.fillStyle = 'lightblue';
    ctx.fillRect(x - node.width/2 * xs, y, node.width * xs, ys)
    ctx.strokeRect(x - node.width/2 * xs, y, node.width * xs, ys)
  })
  return canv
}
*/

/*
function addDepth(depth, node) {
  node.depth = depth + 1
  node.children && node.children.forEach(addDepth.bind(null, depth+1))
}
function addWidth(node) {
  node.width = parseInt(Math.random() * 5) + 2
  node.children && node.children.forEach(addWidth)
}
*/
/*
if (collapsed) {
  box.x = 0
  box.y = 0
} else {
  box.x -= x
  box.y -= y
}
*/
// todo how do I know sizes?
// maybe query the DOM? takes a while...

},{}],200:[function(require,module,exports){
"use strict";

var React = require("react/addons"),
    cx = React.addons.classSet,
    PT = React.PropTypes,
    Listener = require("../../listener"),
    calcPos = require("./calcpos"),
    Movable = require("./movable"),
    extend = require("../../util/extend");

var Mindmap = React.createClass({
  displayName: "Mindmap",

  statics: {
    keys: require("./keys"),
    actions: require("./actions") },

  getDefaultProps: function getDefaultProps() {
    // TODO get this value from the container
    return { width: 1200, height: 800 };
  },

  mixins: [Listener({
    storeAttrs: function storeAttrs(store, props) {
      return {
        root: store.view.root,
        // mode: store.view.mode,
        isActive: store.isActiveView() };
    },
    getListeners: function getListeners(props, events) {
      return [events.rootChanged(),
      // events.modeChanged(),
      events.activeViewChanged(), events.changed()];
    } })],

  propTypes: {
    plugins: PT.array,
    nodePlugins: PT.array,
    skipMix: PT.array,
    width: PT.number,
    height: PT.number },

  getInitialState: function getInitialState() {
    return { heights: {} };
  },

  _onHeight: function _onHeight(id, height) {
    if (height == this.state.heights[id]) {
      return;
    }this.state.heights[id] = height;
    this.setState({ heights: this.state.heights });
  },

  _reCalc: function _reCalc() {
    this.forceUpdate();
  },

  calcPositions: function calcPositions() {
    var positions = calcPos(this.props.store.view.root, this.props.store.actions.db.nodes, 20, 100, 250, this.state.heights);
    return positions;
  },

  render: function render() {
    var positions = this.calcPositions();
    var bodies = {
      "default": { editor: null, renderer: null }
    };
    if (this.props.nodePlugins) {
      for (var i = 0; i < this.props.nodePlugins.length; i++) {
        if (this.props.nodePlugins[i].bodies) {
          bodies = extend(bodies, this.props.nodePlugins[i].bodies);
        }
      }
    }
    var _props = this.props;
    var height = _props.height;
    var width = _props.width;

    if (this.isMounted()) {
      var box = this.getDOMNode().getBoundingClientRect();
      height = box.height;
      width = box.width;
    }
    return React.createElement(
      "div",
      { className: cx({
          Mindmap: true,
          "Mindmap-active": this.state.isActive }) },
      React.createElement(Movable, {
        height: height,
        width: width,
        bodies: bodies,
        positions: positions,
        reCalc: this._reCalc,
        onHeight: this._onHeight,
        plugins: this.props.nodePlugins,
        store: this.props.store
      })
    );
  } });

module.exports = Mindmap;

},{"../../listener":118,"../../util/extend":182,"./actions":198,"./calcpos":199,"./keys":201,"./movable":203,"react/addons":"react/addons"}],201:[function(require,module,exports){
"use strict";

module.exports = {
  movement: {
    "go down": {
      normal: "down, j" },
    "go up": {
      normal: "up, k" },
    "go left": {
      normal: "left, h" },
    "go right": {
      normal: "right, l" },
    "go to first sibling": {
      normal: "shift+[" },
    "go to last sibling": {
      normal: "shift+]" },
    edit: {
      normal: "enter" },
    indent: {
      normal: "tab, shift+alt+l, shift+alt+right" },
    dedent: {
      normal: "shift+tab, shift+alt+h, shift+alt+left" },
    "move up": {
      normal: "shift+alt+up, shift+alt+k" },
    "move down": {
      normal: "shift+alt+down, shift+alt+j" },
    "create before": {
      normal: "shift+o" },
    "create after": {
      normal: "o" } }
};

},{}],202:[function(require,module,exports){
"use strict";

var React = require("react/addons");
// , PT = React.PropTypes

function line(obj) {
  var x1 = obj.x1;
  var y1 = obj.y1;
  var x2 = obj.x2;
  var y2 = obj.y2;

  return "M" + parseInt(x1) + " " + parseInt(y1) + " L" + parseInt(x2) + " " + parseInt(y2);
}

var MindmapLinks = React.createClass({
  displayName: "MindmapLinks",

  componentDidMount: function componentDidMount() {},
  componentDidUpdate: function componentDidUpdate() {},
  renderCanvas: function renderCanvas() {
    var ctx = this.getDOMNode().getContext("2d");
    ctx.clearRect(0, 0, this.props.width, this.props.height);
    ctx.strokeStyle = "red";
    ctx.lineWidth = 10;
    var dx = this.props.left,
        dy = this.props.top;
    this.props.links.forEach(function (link) {
      ctx.beginPath();
      ctx.moveTo(link.y1 + dx, link.x1 + dy);
      ctx.lineTo(link.y2 + dx, link.x2 + dy);
      ctx.stroke();
    });
  },

  componentWillReceiveProps: function componentWillReceiveProps() {},

  renderSVG: function renderSVG() {
    return React.createElement(
      "svg",
      { className: "MindmapLinks" },
      this.props.links.map(function (link) {
        return React.createElement(Link, {
          key: link.id,
          line: link });
      })
    );
  },

  render: function render() {
    return this.renderSVG()
    // return <canvas width={this.props.width} height={this.props.height}/>
    ;
  }
});

var Link = React.createClass({
  displayName: "Link",

  getDefaultProps: function getDefaultProps() {
    return {
      dur: 200 };
  },
  getInitialState: function getInitialState() {
    return { t: 0, start: Date.now(), line: this.props.line };
  },
  componentWillMount: function componentWillMount() {
    this._int = setInterval(this.up, 10);
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (line(this.props.line) !== line(nextProps.line)) {
      this.setState({
        t: 0,
        start: Date.now(),
        line: this.props.line
      });
    }
  },
  componentDidUpdate: function componentDidUpdate() {
    if (this.state.t === 0 && !this._int) {
      this._int = setInterval(this.up, 10);
    }
  },
  componentWillUnmount: function componentWillUnmount() {
    clearInterval(this._int);
    delete this._int;
  },
  up: function up() {
    if (this.state.t >= this.props.dur) {
      clearInterval(this._int);
      delete this._int;
      return;
    }
    this.setState({ t: Date.now() - this.state.start });
  },
  getLine: function getLine() {
    var ease = d3.ease("ease");
    var t = ease(this.state.t / this.props.dur);
    var _state$line = this.state.line // current
    ;
    var x1 = _state$line.x1;
    var x2 = _state$line.x2;
    var y1 = _state$line.y1;
    var y2 = _state$line.y2;var next = this.props.line;
    var part = function (a, b) {
      return a + t * (b - a);
    };
    return "M" + part(x1, next.x1) + " " + part(y1, next.y1) + " L" + part(x2, next.x2) + " " + part(y2, next.y2);
  },
  render: function render() {
    return React.createElement("path", { d: this.getLine() });
  } });

module.exports = MindmapLinks;

// this.renderCanvas()

// this.renderCanvas()

},{"react/addons":"react/addons"}],203:[function(require,module,exports){
"use strict";

var React = require("react/addons"),
    cx = React.addons.classSet,
    PT = React.PropTypes,
    Listener = require("../../listener"),
    MindmapLinks = require("./links"),
    MindmapNode = require("./node");

var Movable = React.createClass({
  displayName: "Movable",

  propTypes: {
    positions: PT.object },

  mixins: [Listener({
    storeAttrs: function storeAttrs(getters, props) {
      return {
        activeNode: getters.getActive() };
    },
    shouldGetNew: false,
    getListeners: function getListeners(props, events) {
      return [events.activeNodeChanged()];
    },
    updateStoreState: function updateStoreState(state, getters, props) {
      if (this.state.activeNode === state.activeNode) {
        return;
      }var aid = state.activeNode,
          pos = props.positions.boxes[aid];
      if (!pos) {
        return;
      }var nx = this.state.left + pos.x,
          ny = this.state.top + pos.y,
          margin = 30,
          dx = 0,
          dy = 0;
      if (nx - margin < 0) {
        dx -= nx - margin;
      }
      if (ny - margin < 0) {
        dy -= ny - margin;
      }
      if (nx + pos.width + margin > this.props.width) {
        dx -= nx + pos.width + margin - this.props.width;
      }
      if (ny + pos.height + margin > this.props.height) {
        dy -= ny + pos.height + margin - this.props.height;
      }
      return {
        left: this.state.left + dx,
        top: this.state.top + dy };
    } })],

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    var aid = this.state.activeNode,
        pos = nextProps.positions.boxes[aid];
    if (!pos) {
      return;
    }var nx = this.state.left + pos.x,
        ny = this.state.top + pos.y,
        margin = 30,
        dx = 0,
        dy = 0;
    if (nx - margin < 0) {
      dx -= nx - margin;
    }
    if (ny - margin < 0) {
      dy -= ny - margin;
    }
    if (nx + pos.width + margin > this.props.width) {
      dx -= nx + pos.width + margin - this.props.width;
    }
    if (ny + pos.height + margin > this.props.height) {
      dy -= ny + pos.height + margin - this.props.height;
    }
    this.setState({
      left: this.state.left + dx,
      top: this.state.top + dy });
  },

  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
    if (!prevState.moving && this.state.moving) {
      window.addEventListener("mousemove", this._onMouseMove);
      window.addEventListener("mouseup", this._onMouseUp);
    } else if (prevState.moving && !this.state.moving) {
      window.removeEventListener("mousemove", this._onMouseMove);
      window.removeEventListener("mouseup", this._onMouseUp);
    }
  },

  _onMouseUp: function _onMouseUp() {
    this.setState({ moving: false });
  },

  _onMouseDown: function _onMouseDown(e) {
    if (e.target !== this.getDOMNode()) {
      return;
    } // e.preventDefault()
    e.stopPropagation();
    this.props.store.actions.setActiveView();
    this.props.store.actions.normalMode();
    this.setState({ moving: {
        x: this.state.left - e.clientX,
        y: this.state.top - e.clientY } });
  },

  _onMouseMove: function _onMouseMove(e) {
    e.preventDefault();
    e.stopPropagation();
    this.setState({
      left: e.clientX + this.state.moving.x,
      top: e.clientY + this.state.moving.y });
  },

  getInitialState: function getInitialState() {
    return {
      top: 0,
      left: 0,
      moving: false };
  },

  render: function render() {
    var style = {
      top: this.state.top,
      left: this.state.left };
    if (this.state.moving) style.transition = "none";
    var positions = this.props.positions;
    return React.createElement(
      "div",
      {
        onMouseDown: this._onMouseDown,
        className: "MindmapMovable" },
      React.createElement(
        "div",
        {
          style: style,
          className: "MindmapMovable_container" },
        React.createElement(MindmapNode, {
          px: 0,
          py: 0,
          reCalc: this.props.reCalc,
          onHeight: this.props.onHeight,
          positions: positions.boxes,
          plugins: this.props.nodePlugins,
          bodies: this.props.bodies,
          store: this.props.store,
          key: this.props.store.view.root,
          id: this.props.store.view.root,
          isRoot: true,
          index: 0
        })
      )
    );
  } });

module.exports = Movable;
/*
var aid = this.props.store.view.active
  , ppos = this.props.positions.boxes[aid]
  , npos = nextProps.positions.boxes[aid]
if (!ppos || !npos) return
var dx = ppos.x - npos.x
  , dy = ppos.y - npos.y
  , nx = this.state.left + dx + npos.x
  , ny = this.state.top + dy + npos.y
if (nx < 0) {
  dx -= nx
}
if (ny < 0) {
  dy -= ny
}
this.setState({
  left: this.state.left + dx,
  top: this.state.top + dy,
})
*/

// transform: 'translate(' + this.state.left + 'px, ' + this.state.top + 'px)'

},{"../../listener":118,"./links":202,"./node":205,"react/addons":"react/addons"}],204:[function(require,module,exports){
"use strict";

var movement = module.exports = {
  right: function right(id, root, nodes) {
    if (nodes[id].children && nodes[id].children.length && (!nodes[id].collapsed || id === root)) {
      return nodes[id].children[0];
    }
    var up = id;
    var down = id;
    while (up || down) {
      if (down) {
        if (nodes[down].children && nodes[down].children.length && !nodes[down].collapsed) {
          return nodes[down].children[0];
        }
      }
      if (up) {
        up = movement.prevSiblingOrCousin(up, root, nodes);
        if (up && nodes[up].children && nodes[up].children.length && !nodes[up].collapsed) {
          return nodes[up].children[nodes[up].children.length - 1];
        }
      }
      if (down) {
        down = movement.nextSiblingOrCousin(down, root, nodes);
      }
    }
  },

  // TODO: refactor below and nextSiblingOrCousin to remove duplicate logic.
  below: function below(id, root, nodes) {
    if (id === root) {
      return;
    }var pid = nodes[id].parent,
        p = nodes[pid],
        ch = p.children,
        ix = ch.indexOf(id);
    if (ix < ch.length - 1) {
      return { pid: pid, ix: ix + 1 };
    } // go for siblings

    function visit(_x, _x2, _x3, _x4) {
      var _again = true;

      _function: while (_again) {
        _again = false;
        var id = _x,
            depth = _x2,
            crawlUp = _x3,
            childId = _x4;
        ch = sub = i = undefined;

        if (depth === 1 && !crawlUp) {
          return { pid: id, ix: 0 };
        }
        var ch = nodes[id].children;
        if (!ch || !ch.length || nodes[id].collapsed) {
          return false;
        }var sub;
        var i = 0;
        if (childId) i = ch.indexOf(childId) + 1;
        if (depth === 1 && i < ch.length) {
          return ch[i];
        }for (; i < ch.length; i++) {
          sub = visit(ch[i], depth - 1);
          if (sub) {
            return sub;
          }
        }
        if (crawlUp && id !== root) {
          _x = nodes[id].parent;
          _x2 = depth + 1;
          _x3 = true;
          _x4 = id;
          _again = true;
          continue _function;
        }
        return false;
      }
    }

    return visit(pid, 1, true, id);
  },

  above: function above(id, root, nodes) {
    if (id === root) {
      return;
    }var pid = nodes[id].parent,
        p = nodes[pid],
        ch = p.children,
        ix = ch.indexOf(id);
    if (ix > 0) {
      return { pid: pid, ix: ix - 1 };
    } // go for siblings

    function visit(_x, _x2, _x3, _x4) {
      var _again = true;

      _function: while (_again) {
        _again = false;
        var id = _x,
            depth = _x2,
            crawlUp = _x3,
            childId = _x4;
        ch = sub = i = undefined;

        var ch = nodes[id].children;
        if (depth === 1 && !crawlUp) {
          return { pid: id, ix: ch && ch.length ? ch.length : 0 };
        }
        if (!ch || nodes[id].collapsed || !ch.length) {
          return false;
        }var sub;
        var i = ch.length - 1;
        if (childId) i = ch.indexOf(childId) - 1;
        for (; i >= 0; i--) {
          sub = visit(ch[i], depth - 1);
          if (sub) {
            return sub;
          }
        }
        if (crawlUp && id !== root) {
          _x = nodes[id].parent;
          _x2 = depth + 1;
          _x3 = true;
          _x4 = id;
          _again = true;
          continue _function;
        }
        return false;
      }
    }

    return visit(pid, 1, true, id);
  },

  nextSiblingOrCousin: function nextSiblingOrCousin(id, root, nodes) {
    if (id === root) {
      return;
    }var pid = nodes[id].parent,
        p = nodes[pid],
        ch = p.children,
        ix = ch.indexOf(id);
    if (ix < ch.length - 1) {
      return ch[ix + 1];
    } // go for siblings

    function visit(_x, _x2, _x3, _x4) {
      var _again = true;

      _function: while (_again) {
        _again = false;
        var id = _x,
            depth = _x2,
            crawlUp = _x3,
            childId = _x4;
        ch = sub = i = undefined;

        if (depth === 0) {
          return id;
        }var ch = nodes[id].children;
        if (!ch || nodes[id].collapsed || !ch.length) {
          return false;
        }var sub;
        var i = 0;
        if (childId) i = ch.indexOf(childId) + 1;
        if (depth === 1 && i < ch.length) {
          return ch[i];
        }for (; i < ch.length; i++) {
          sub = visit(ch[i], depth - 1);
          if (sub) {
            return sub;
          }
        }
        if (crawlUp && id !== root) {
          _x = nodes[id].parent;
          _x2 = depth + 1;
          _x3 = true;
          _x4 = id;
          _again = true;
          continue _function;
        }
        return false;
      }
    }

    return visit(pid, 1, true, id);
  },

  prevSiblingOrCousin: function prevSiblingOrCousin(id, root, nodes) {
    if (id === root) {
      return;
    }var pid = nodes[id].parent,
        p = nodes[pid],
        ch = p.children,
        ix = ch.indexOf(id);
    if (ix > 0) {
      return ch[ix - 1];
    } // go for siblings

    function visit(_x, _x2, _x3, _x4) {
      var _again = true;

      _function: while (_again) {
        _again = false;
        var id = _x,
            depth = _x2,
            crawlUp = _x3,
            childId = _x4;
        ch = sub = i = undefined;

        if (depth === 0) {
          return id;
        }var ch = nodes[id].children;
        if (!ch || nodes[id].collapsed || !ch.length) {
          return false;
        }var sub;
        var i = ch.length - 1;
        if (childId) i = ch.indexOf(childId) - 1;
        if (depth === 1 && i >= 0) {
          return ch[i];
        }for (; i >= 0; i--) {
          sub = visit(ch[i], depth - 1);
          if (sub) {
            return sub;
          }
        }
        if (crawlUp && id !== root) {
          _x = nodes[id].parent;
          _x2 = depth + 1;
          _x3 = true;
          _x4 = id;
          _again = true;
          continue _function;
        }
        return false;
      }
    }

    return visit(pid, 1, true, id);
  },

  nextCousin: function nextCousin(id, root, nodes) {
    if (id === root) {
      return;
    }var aunt = undefined,
        degree = 1,
        parent = nodes[id].parent;
    while (!aunt) {
      var ch = nodes[parent].children,
          ix = ch.indexOf(parent) + 1;
      while (ix < ch.length && !(nodes[ch[ix]].children && !nodes[ch[ix]].collapsed && nodes[ch[ix]].children.length)) {
        ix += 1;
      }
      if (ix < ch.length) {
        return nodes[ch[ix]].children[0];
      }
    }
    while (!(aunt = movement.nextSibling(parent, root, nodes))) {
      degree += 1;
      parent = nodes[parent].parent;
    }
    var cousin = aunt;
    for (; degree > 0 && nodes[cousin].children && nodes[cousin].children.length; degree--) {
      cousin = nodes[cousin].children[0];
    }
    return cousin;
  } };

},{}],205:[function(require,module,exports){
"use strict";

var React = require("react/addons"),
    cx = React.addons.classSet,
    PT = React.PropTypes,
    SimpleBody = require("../body/simple"),
    Listener = require("../../listener");

var MindmapNode = React.createClass({
  displayName: "MindmapNode",

  propTypes: {
    id: PT.string,
    isRoot: PT.bool,
    store: PT.object,
    reCalc: PT.func,
    onHeight: PT.func,
    positions: PT.object,
    px: PT.number,
    py: PT.number,
    plutins: PT.object,
    bodies: PT.object },

  mixins: [Listener({
    storeAttrs: function storeAttrs(getters, props) {
      return {
        node: getters.getNode(props.id),
        isActiveView: getters.isActiveView(),
        isActive: getters.isActive(props.id),
        isSelected: getters.isSelected(props.id),
        editState: getters.editState(props.id) };
    },

    initStoreState: function initStoreState(state, getters, props) {
      var node = state.node;
      return {
        lazyChildren: !props.isRoot && node.collapsed && node.children.length,
        collapsed: node.collapsed };
    },

    updateStoreState: function updateStoreState(state, getters, props) {
      var node = state.node;
      return {
        lazyChildren: this.state.lazyChildren && node.collapsed,
        collapsed: node.collapsed };
    },

    shouldGetNew: function shouldGetNew(nextProps) {
      return nextProps.id !== this.props.id || nextProps.store !== this.props.store;
    },

    getListeners: function getListeners(props, events) {
      return [events.nodeChanged(props.id), events.nodeViewChanged(props.id)];
    } })],

  getInitialState: function getInitialState() {
    return { ticked: false };
  },

  componentDidMount: function componentDidMount() {
    this.props.onHeight(this.props.id, this.getDOMNode().getBoundingClientRect().height);
    this.setState({ ticked: true });
  },

  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
    this.props.onHeight(this.props.id, this.getDOMNode().getBoundingClientRect().height);
    if (this.state.collapsed !== prevState.collapsed) {
      this.props.reCalc();
    }
  },

  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
    return nextProps.id !== this.props.id || nextState !== this.state || nextProps.positions !== this.props.positions;
  },

  _onClick: function _onClick() {
    this.props.store.actions.edit(this.props.id);
  },

  _toggleCollapse: function _toggleCollapse() {
    this.props.store.actions.toggleCollapse(this.props.id);
  },

  makeLine: function makeLine() {
    if (this.props.isRoot) {
      return;
    }var box;
    if (this.state.ticked) {
      box = this.props.positions[this.props.id];
    }
    if (!box) {
      box = { x: this.props.px, y: this.props.py };
    }
    var x = this.props.px - box.x,
        y = this.props.py - box.y,
        length = Math.sqrt(x * x + y * y),
        ang = length ? Math.atan2(y, x) : Math.PI;
    if (ang < 0) ang += Math.PI * 2;
    var style = {
      width: length,
      transform: "rotate(" + ang + "rad)" };
    return React.createElement("div", { className: "MindmapNode_line", style: style });
  },

  render: function render() {
    var _this = this;

    var box;
    if (this.state.ticked) {
      box = this.props.positions[this.props.id];
    }
    if (!box) {
      box = { x: this.props.px, y: this.props.py };
    }
    var style = {
      transform: "translate(" + (box.x - this.props.px) + "px, " + (box.y - this.props.py) + "px)",
      opacity: this.props.hiding || !this.state.ticked ? 0 : 1 };
    var cls = cx({
      MindmapNode: true,
      "MindmapNode-hiding": this.props.hiding,
      "MindmapNode-active": this.state.isActive,
      "MindmapNode-editing": this.state.editState,
      "MindmapNode-parent": this.state.node.children && this.state.node.children.length,
      "MindmapNode-collapsed": !this.props.isRoot && this.state.node.children && this.state.node.children.length && this.state.node.collapsed });
    var body = this.props.bodies[this.state.node.type] || this.props.bodies["default"];
    return React.createElement(
      "div",
      { style: style, className: cls },
      this.makeLine(),
      React.createElement(
        "div",
        { onClick: this._onClick, className: "MindmapNode_main" },
        React.createElement("div", { className: "MindmapNode_collapser", onClick: this._toggleCollapse }),
        React.createElement(SimpleBody, {
          editor: body.editor,
          renderer: body.renderer,
          node: this.state.node,
          isActive: this.state.isActive,
          editState: this.state.editState,
          actions: this.props.store.actions,
          store: this.props.store
        })
      ),
      this.state.node.children.length ? React.createElement(
        "div",
        { className: "MindmapNode_children" },
        !this.state.lazyChildren && this.state.node.children.map(function (id, i) {
          return React.createElement(MindmapNode, {
            px: box.x,
            py: box.y,
            hiding: !_this.props.isRoot && (_this.props.hiding || _this.state.node.collapsed),
            onHeight: _this.props.onHeight,
            reCalc: _this.props.reCalc,
            positions: _this.props.positions,
            plugins: _this.props.plugins,
            store: _this.props.store,
            bodies: _this.props.bodies,
            index: i,
            key: id,
            id: id });
        })
      ) : null
    );
  } });

module.exports = MindmapNode;

},{"../../listener":118,"../body/simple":188,"react/addons":"react/addons"}],206:[function(require,module,exports){
"use strict";

var React = require("react/addons");
var cx = React.addons.classSet;
var PT = React.PropTypes;

var PaperItem = require("./item");
var extend = require("../../util/extend");
var Listener = require("../../listener");

var PaperView = React.createClass({
  displayName: "PaperView",

  mixins: [Listener(function (store, props) {
    return {
      root: store.view.root,
      mode: store.view.mode,
      isActive: store.isActiveView() };
  })],

  propTypes: {
    plugins: PT.array,
    nodePlugins: PT.array },

  componentDidUpdate: function componentDidUpdate(prevProps) {
    if (this.props.store !== prevProps.store) {
      var e = this.props.store.events;
      this.listen(e.rootChanged(), e.modeChanged(), e.activeViewChanged());
    }
  },

  componentWillMount: function componentWillMount() {
    var e = this.props.store.events;
    this.listen(e.rootChanged(), e.modeChanged(), e.activeViewChanged());
  },

  fromMix: function fromMix(part) {
    if (!this.props.plugins) {
      return;
    }if (this.props.skipMix && this.props.skipMix.indexOf(part) !== -1) {
      return;
    }var items = [];
    for (var i = 0; i < this.props.plugins.length; i++) {
      var plugin = this.props.plugins[i].blocks;
      if (!plugin || !plugin[part]) continue;
      items.push(plugin[part](this.props.store.actions, this.state, this.props.store));
    }
    if (!items.length) {
      return null;
    }return items;
  },

  render: function render() {
    var className = "paper paper-" + this.state.mode;
    if (this.state.isActive) className += " paper-active";
    var bodies = {
      "default": { editor: null, renderer: null }
    };
    if (this.props.nodePlugins) {
      for (var i = 0; i < this.props.nodePlugins.length; i++) {
        if (this.props.nodePlugins[i].bodies) {
          bodies = extend(bodies, this.props.nodePlugins[i].bodies);
        }
      }
    }
    return React.createElement(
      "div",
      { className: className },
      this.fromMix("top"),
      PaperItem({
        depth: 0,
        store: this.props.store,
        plugins: this.props.nodePlugins,
        bodies: bodies,
        isRoot: true,
        id: this.state.root
      }),
      this.fromMix("bottom")
    );
  } });

module.exports = PaperView;

},{"../../listener":118,"../../util/extend":182,"./item":207,"react/addons":"react/addons"}],207:[function(require,module,exports){
"use strict";

var React = require("react/addons");
var cx = React.addons.classSet;
var PT = React.PropTypes;
var marked = require("marked");
var Listener = require("../../listener");

var renderer = new marked.Renderer();
renderer.link = function (href, title, text) {
  return "<a href=\"" + href + "\" target=\"_blank\" title=\"" + title + "\">" + text + "</a>";
};

marked.setOptions({
  gfm: true,
  sanitize: true,
  tables: true,
  breaks: true,
  pedantic: false,
  smartLists: true,
  smartypants: true,
  renderer: renderer
});

var PaperItem = React.createClass({
  displayName: "PaperItem",

  mixins: [Listener({
    storeAttrs: function storeAttrs(getters, props) {
      return {
        node: getters.getNode(props.id),
        isActiveView: getters.isActiveView(),
        isActive: getters.isActive(props.id),
        isSelected: getters.isSelected(props.id),
        editState: getters.editState(props.id) };
    },

    initStoreState: function initStoreState(state, getters, props) {
      var node = state.node;
      return {
        lazyChildren: !props.isRoot && node.collapsed && node.children.length
      };
    },

    updateStoreState: function updateStoreState(state, getters, props) {
      var node = state.node;
      return {
        lazyChildren: this.state.lazyChildren && node.collapsed
      };
    },

    shouldGetNew: function shouldGetNew(nextProps) {
      return nextProps.id !== this.props.id || nextProps.store !== this.props.store;
    },

    getListeners: function getListeners(props, events) {
      return [events.nodeChanged(props.id), events.nodeViewChanged(props.id)];
    } })],

  componentWillMount: function componentWillMount() {
    var _this = this;

    // get plugin update functions
    this._plugin_updates = null;
    this.props.plugins.forEach(function (plugin) {
      if (!plugin.componentDidUpdate) return;
      if (!_this._plugin_updates) {
        _this._plugin_updates = [plugin.componentDidUpdate];
      } else {
        _this._plugin_updates.push(plugin.componentDidUpdate);
      }
    });
  },

  /** Use to check what things are updating when */
  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
    var _this = this;

    if (this._plugin_updates) {
      this._plugin_updates.map(function (fn) {
        return fn.call(_this, prevProps, prevState);
      });
    }
  },

  /*
  fromMix: function (part) {
    if (!this.props.plugins) return
    var items = []
    for (var i=0; i<this.props.plugins.length; i++) {
      var plugin = this.props.plugins[i].blocks
      if (!plugin || !plugin[part]) continue;
      items.push(plugin[part](this.state.node, this.props.store.actions, this.state, this.props.store))
    }
    if (!items.length) return null
    return items
  },
  */

  header: function header() {
    switch (this.props.depth) {
      case 0:
        return React.createElement(
          "h1",
          null,
          this.state.node.content
        );
      case 1:
        return React.createElement(
          "h2",
          null,
          this.state.node.content
        );
      case 2:
        return React.createElement(
          "h3",
          null,
          this.state.node.content
        );
      case 3:
        return React.createElement(
          "h4",
          null,
          this.state.node.content
        );
      default:
        return React.createElement(
          "h5",
          null,
          this.state.node.content
        );
    }
  },

  render: function render() {
    var _this = this;

    if (this.state.node.children.length) {
      var children = this.state.node.children.map(function (id, i) {
        return PaperItem({
          depth: _this.props.depth + 1,
          plugins: _this.props.plugins,
          store: _this.props.store,
          bodies: _this.props.bodies,
          index: i,
          key: id,
          id: id });
      });
      return React.createElement(
        "div",
        { className: "section" },
        this.header(),
        children
      );
    }
    var content = this.state.node.content;
    if (!content) {
      return React.createElement("p", null);
    }if (this.state.node.type === "ipython") {
      content = "```\n" + content + "\n```";
    }
    return React.createElement("p", { dangerouslySetInnerHTML: {
        __html: marked(content)
      } });
  } });

module.exports = PaperItem;

},{"../../listener":118,"marked":"marked","react/addons":"react/addons"}],208:[function(require,module,exports){
"use strict";

exports.Ticker = Ticker;
exports.initFormatters = initFormatters;
exports.treedFromFile = treedFromFile;

function Ticker() {
  this.ticks = [];
  this.add = function (name) {
    this.ticks.push({
      name: name,
      time: performance.now(),
      usedMem: performance.memory.usedJSHeapSize,
      totalMem: performance.memory.totalJSHeapSize });
  };
  this.show = function () {
    for (var i = 1; i < this.ticks.length; i++) {
      console.log(this.ticks[i].name, this.ticks[i].time - this.ticks[i - 1].time);
    }
  };
  if (window.firstDOM) {
    this.ticks.push({
      name: "firstDOM",
      time: window.firstDOM });
  }
  if (window.afterStyle) {
    this.ticks.push({
      name: "afterStyle",
      time: window.afterStyle });
  }
  this.add("start");
}

function initFormatters() {
  // configuration things
  var format = require("itreed/lib/plugin/format");

  var formatters = [require("itreed/formatters/live"), require("itreed/formatters/live-button"), require("itreed/formatters/react"), require("itreed/formatters/vega"), require("itreed/formatters/table"), require("itreed/formatters/dom"), require("itreed/formatters/latex"), require("itreed/formatters/list-like"), require("itreed/formatters/js")];

  formatters.map(function (plugin) {
    if (plugin.display) {
      format.displayer(plugin.display, plugin.mime);
    }
    if (plugin.format) {
      format.formatter(plugin.format, plugin.mime);
    }
  });
}

function treedFromFile(Treed, data, plugins, pl, done) {
  var file = {};
  for (var _name in data) {
    if (_name === "root") continue;
    file[_name] = data;
  }

  var treed = new Treed({ plugins: plugins });
  treed.initStore(data.root, { pl: pl }).then(function (store) {
    done(null, { treed: treed, file: file });
  });
}
Object.defineProperty(exports, "__esModule", {
  value: true
});

},{"itreed/formatters/dom":18,"itreed/formatters/js":22,"itreed/formatters/latex":23,"itreed/formatters/list-like":24,"itreed/formatters/live":26,"itreed/formatters/live-button":25,"itreed/formatters/react":27,"itreed/formatters/table":28,"itreed/formatters/vega":29,"itreed/lib/plugin/format":44}],209:[function(require,module,exports){
"use strict";

var Modal = require("../../app/ui/modal");

module.exports = function (current, done) {
  Modal.show({
    title: "Edit Custom CSS Classes",
    initialState: { classes: current },
    buttons: {
      ok: function ok() {
        this.props.onClose(null, this.state.classes);
      },
      cancel: function cancel() {
        this.props.onClose(true);
      } },
    renderBody: function renderBody() {
      var change = this._onChangeEvt.bind(null, "classes");

      return React.createElement(
        "div",
        null,
        React.createElement("input", {
          value: this.state.classes,
          placeholder: "Space-separated css class names",
          onChange: change })
      );
    },
    done: done });
};

},{"../../app/ui/modal":14}],210:[function(require,module,exports){
"use strict";

/**
 * A very simple plugin that merely appends custom CSS classes to a given
 * node. Useful for light-weight custom styling.
 */

var editCustomCSS = require("./edit-custom-css");

module.exports = {
  title: "Custom CSS",

  node: {
    classes: function classes(node, state) {
      return node.customCSS || "";
    } },

  contextMenu: function contextMenu(node, store) {
    if (!node) {
      return;
    }return {
      title: "Custom CSS",
      action: "editCustomCSS" };
  },

  store: {
    actions: {
      editCustomCSS: (function (_editCustomCSS) {
        var _editCustomCSSWrapper = function editCustomCSS(_x) {
          return _editCustomCSS.apply(this, arguments);
        };

        _editCustomCSSWrapper.toString = function () {
          return _editCustomCSS.toString();
        };

        return _editCustomCSSWrapper;
      })(function (id) {
        var _this = this;

        var current = this.db.nodes[id].customCSS;
        editCustomCSS(current, function (err, classNames) {
          if (!err) {
            _this.set(id, "customCSS", classNames);
          }
        });
      }) } } };

},{"./edit-custom-css":209}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvaG9tZS9qYXJlZC9jbG9uZS9ubS9ub3RhYmxlbWluZC90ZXN0L3ZpZXdlci9pbmRleC5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL2FwcC9jb21wb25lbnRzL2RvYy1wYW5lLmpzIiwiL2hvbWUvamFyZWQvY2xvbmUvbm0vbm90YWJsZW1pbmQvYXBwL2NvbXBvbmVudHMvZG9jLXZpZXdlci5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL2FwcC9jb21wb25lbnRzL2tleWJvYXJkLWhlbHBlci5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL2FwcC9jb21wb25lbnRzL2tleWJvYXJkLXBvcHVwLmpzIiwiL2hvbWUvamFyZWQvY2xvbmUvbm0vbm90YWJsZW1pbmQvYXBwL2NvbXBvbmVudHMvc2VhcmNoLWJvZHkuanMiLCIvaG9tZS9qYXJlZC9jbG9uZS9ubS9ub3RhYmxlbWluZC9hcHAvY29tcG9uZW50cy9zZWFyY2gtcG9wcGVyLmpzIiwiL2hvbWUvamFyZWQvY2xvbmUvbm0vbm90YWJsZW1pbmQvYXBwL2NvbXBvbmVudHMvc2VhcmNoLXV0aWxzLmpzIiwiL2hvbWUvamFyZWQvY2xvbmUvbm0vbm90YWJsZW1pbmQvYXBwL2NvbXBvbmVudHMvc3BsaXQtbWFuYWdlci5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL2FwcC9jb21wb25lbnRzL3NwbGl0dGVyLmpzIiwiL2hvbWUvamFyZWQvY2xvbmUvbm0vbm90YWJsZW1pbmQvYXBwL2NvbXBvbmVudHMvdHlwZS1zd2l0Y2hlci5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL2FwcC9jb21wb25lbnRzL3dpbmRvdy1qdW1wLmpzIiwiL2hvbWUvamFyZWQvY2xvbmUvbm0vbm90YWJsZW1pbmQvYXBwL2tleXMtbWl4aW4uanMiLCIvaG9tZS9qYXJlZC9jbG9uZS9ubS9ub3RhYmxlbWluZC9hcHAvdWkvbW9kYWwuanMiLCIvaG9tZS9qYXJlZC9jbG9uZS9ubS9ub3RhYmxlbWluZC9saWIvdXVpZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy9pdHJlZWQvZm9ybWF0dGVycy9kb20uanMiLCIvaG9tZS9qYXJlZC9jbG9uZS9ubS9ub3RhYmxlbWluZC9ub2RlX21vZHVsZXMvaXRyZWVkL2Zvcm1hdHRlcnMvZ2V0LWFsbC1wcm9wZXJ0aWVzLmpzIiwiL2hvbWUvamFyZWQvY2xvbmUvbm0vbm90YWJsZW1pbmQvbm9kZV9tb2R1bGVzL2l0cmVlZC9mb3JtYXR0ZXJzL2dvcmlsbGEuanMiLCIvaG9tZS9qYXJlZC9jbG9uZS9ubS9ub3RhYmxlbWluZC9ub2RlX21vZHVsZXMvaXRyZWVkL2Zvcm1hdHRlcnMvaXMtY29tcGxleC5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy9pdHJlZWQvZm9ybWF0dGVycy9qcy5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy9pdHJlZWQvZm9ybWF0dGVycy9sYXRleC5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy9pdHJlZWQvZm9ybWF0dGVycy9saXN0LWxpa2UuanMiLCIvaG9tZS9qYXJlZC9jbG9uZS9ubS9ub3RhYmxlbWluZC9ub2RlX21vZHVsZXMvaXRyZWVkL2Zvcm1hdHRlcnMvbGl2ZS1idXR0b24uanMiLCIvaG9tZS9qYXJlZC9jbG9uZS9ubS9ub3RhYmxlbWluZC9ub2RlX21vZHVsZXMvaXRyZWVkL2Zvcm1hdHRlcnMvbGl2ZS5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy9pdHJlZWQvZm9ybWF0dGVycy9yZWFjdC5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy9pdHJlZWQvZm9ybWF0dGVycy90YWJsZS5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy9pdHJlZWQvZm9ybWF0dGVycy92ZWdhLmpzIiwiL2hvbWUvamFyZWQvY2xvbmUvbm0vbm90YWJsZW1pbmQvbm9kZV9tb2R1bGVzL2l0cmVlZC9pbmRleC5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy9pdHJlZWQvbGliL2V4dGVuZC5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy9pdHJlZWQvbGliL2tlcm5lbHMvanMvYWpheC5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy9pdHJlZWQvbGliL2tlcm5lbHMvanMvZXhlYy5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy9pdHJlZWQvbGliL2tlcm5lbHMvanMvZ2V0LWZyYW1lLmpzIiwiL2hvbWUvamFyZWQvY2xvbmUvbm0vbm90YWJsZW1pbmQvbm9kZV9tb2R1bGVzL2l0cmVlZC9saWIva2VybmVscy9qcy9pbmRleC5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy9pdHJlZWQvbGliL2tlcm5lbHMvanMvaXNvbGF0ZS5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy9pdHJlZWQvbGliL2tlcm5lbHMvanMvanN4LmpzIiwiL2hvbWUvamFyZWQvY2xvbmUvbm0vbm90YWJsZW1pbmQvbm9kZV9tb2R1bGVzL2l0cmVlZC9saWIva2VybmVscy9qcy9tYWtlLW91dHB1dC5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy9pdHJlZWQvbGliL2tlcm5lbHMvanMvc2FmZS1zdHJpbmcuanMiLCIvaG9tZS9qYXJlZC9jbG9uZS9ubS9ub3RhYmxlbWluZC9ub2RlX21vZHVsZXMvaXRyZWVkL2xpYi9rZXJuZWxzL2pzL3N0YXRlci5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy9pdHJlZWQvbGliL3BsdWdpbi9hY3Rpb25zLmpzIiwiL2hvbWUvamFyZWQvY2xvbmUvbm0vbm90YWJsZW1pbmQvbm9kZV9tb2R1bGVzL2l0cmVlZC9saWIvcGx1Z2luL2NvZGUtZWRpdG9yLmpzIiwiL2hvbWUvamFyZWQvY2xvbmUvbm0vbm90YWJsZW1pbmQvbm9kZV9tb2R1bGVzL2l0cmVlZC9saWIvcGx1Z2luL2NvZGVtaXJyb3ItcnguanMiLCIvaG9tZS9qYXJlZC9jbG9uZS9ubS9ub3RhYmxlbWluZC9ub2RlX21vZHVsZXMvaXRyZWVkL2xpYi9wbHVnaW4vZm9ybWF0L2luZGV4LmpzIiwiL2hvbWUvamFyZWQvY2xvbmUvbm0vbm90YWJsZW1pbmQvbm9kZV9tb2R1bGVzL2l0cmVlZC9saWIvcGx1Z2luL2luZGV4LmpzIiwiL2hvbWUvamFyZWQvY2xvbmUvbm0vbm90YWJsZW1pbmQvbm9kZV9tb2R1bGVzL2l0cmVlZC9saWIvcGx1Z2luL2tlcm5lbC1jaGFuZ2VyLmpzIiwiL2hvbWUvamFyZWQvY2xvbmUvbm0vbm90YWJsZW1pbmQvbm9kZV9tb2R1bGVzL2l0cmVlZC9saWIvcGx1Z2luL2tlcm5lbC1jb250cm9sbGVyLmpzIiwiL2hvbWUvamFyZWQvY2xvbmUvbm0vbm90YWJsZW1pbmQvbm9kZV9tb2R1bGVzL2l0cmVlZC9saWIvcGx1Z2luL2tlcm5lbC1pbmRpY2F0b3IuanMiLCIvaG9tZS9qYXJlZC9jbG9uZS9ubS9ub3RhYmxlbWluZC9ub2RlX21vZHVsZXMvaXRyZWVkL2xpYi9wbHVnaW4va2VybmVsLXBpY2tlci5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy9pdHJlZWQvbGliL3BsdWdpbi9ub2RlLmpzIiwiL2hvbWUvamFyZWQvY2xvbmUvbm0vbm90YWJsZW1pbmQvbm9kZV9tb2R1bGVzL2l0cmVlZC9saWIvcGx1Z2luL291dHB1dC5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy9pdHJlZWQvbGliL3BsdWdpbi9wbGF5LWZyYW1lLmpzIiwiL2hvbWUvamFyZWQvY2xvbmUvbm0vbm90YWJsZW1pbmQvbm9kZV9tb2R1bGVzL2l0cmVlZC9saWIvcGx1Z2luL3BsYXlncm91bmQuanMiLCIvaG9tZS9qYXJlZC9jbG9uZS9ubS9ub3RhYmxlbWluZC9ub2RlX21vZHVsZXMvaXRyZWVkL2xpYi9wbHVnaW4vdGltZXIuanMiLCIvaG9tZS9qYXJlZC9jbG9uZS9ubS9ub3RhYmxlbWluZC9ub2RlX21vZHVsZXMvaXRyZWVkL2xpYi9wbHVnaW4vdmlldy5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy9pdHJlZWQvbGliL3V1aWQuanMiLCIuLi9ub2RlX21vZHVsZXMvaXRyZWVkL25vZGVfbW9kdWxlcy9qc3RyYW5zZm9ybS9ub2RlX21vZHVsZXMvZXNwcmltYS1mYi9lc3ByaW1hLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2l0cmVlZC9ub2RlX21vZHVsZXMva2F0ZXgva2F0ZXguanMiLCIuLi9ub2RlX21vZHVsZXMvaXRyZWVkL25vZGVfbW9kdWxlcy9rYXRleC9zcmMvTGV4ZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvaXRyZWVkL25vZGVfbW9kdWxlcy9rYXRleC9zcmMvT3B0aW9ucy5qcyIsIi4uL25vZGVfbW9kdWxlcy9pdHJlZWQvbm9kZV9tb2R1bGVzL2thdGV4L3NyYy9QYXJzZUVycm9yLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2l0cmVlZC9ub2RlX21vZHVsZXMva2F0ZXgvc3JjL1BhcnNlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9pdHJlZWQvbm9kZV9tb2R1bGVzL2thdGV4L3NyYy9TdHlsZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9pdHJlZWQvbm9kZV9tb2R1bGVzL2thdGV4L3NyYy9idWlsZENvbW1vbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9pdHJlZWQvbm9kZV9tb2R1bGVzL2thdGV4L3NyYy9idWlsZFRyZWUuanMiLCIuLi9ub2RlX21vZHVsZXMvaXRyZWVkL25vZGVfbW9kdWxlcy9rYXRleC9zcmMvZGVsaW1pdGVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2l0cmVlZC9ub2RlX21vZHVsZXMva2F0ZXgvc3JjL2RvbVRyZWUuanMiLCIuLi9ub2RlX21vZHVsZXMvaXRyZWVkL25vZGVfbW9kdWxlcy9rYXRleC9zcmMvZm9udE1ldHJpY3MuanMiLCIuLi9ub2RlX21vZHVsZXMvaXRyZWVkL25vZGVfbW9kdWxlcy9rYXRleC9zcmMvZnVuY3Rpb25zLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2l0cmVlZC9ub2RlX21vZHVsZXMva2F0ZXgvc3JjL3BhcnNlVHJlZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9pdHJlZWQvbm9kZV9tb2R1bGVzL2thdGV4L3NyYy9zeW1ib2xzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2l0cmVlZC9ub2RlX21vZHVsZXMva2F0ZXgvc3JjL3V0aWxzLmpzIiwiL2hvbWUvamFyZWQvY2xvbmUvbm0vbm90YWJsZW1pbmQvbm9kZV9tb2R1bGVzL2l0cmVlZC9ub2RlX21vZHVsZXMvdHJlZWQvbGlzdGVuZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvaXRyZWVkL25vZGVfbW9kdWxlcy90cmVlZC9ub2RlX21vZHVsZXMvYmx1ZWJpcmQvanMvbWFpbi9hbnkuanMiLCIuLi9ub2RlX21vZHVsZXMvaXRyZWVkL25vZGVfbW9kdWxlcy90cmVlZC9ub2RlX21vZHVsZXMvYmx1ZWJpcmQvanMvbWFpbi9hc3luYy5qcyIsIi4uL25vZGVfbW9kdWxlcy9pdHJlZWQvbm9kZV9tb2R1bGVzL3RyZWVkL25vZGVfbW9kdWxlcy9ibHVlYmlyZC9qcy9tYWluL2JsdWViaXJkLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2l0cmVlZC9ub2RlX21vZHVsZXMvdHJlZWQvbm9kZV9tb2R1bGVzL2JsdWViaXJkL2pzL21haW4vY2FsbF9nZXQuanMiLCIuLi9ub2RlX21vZHVsZXMvaXRyZWVkL25vZGVfbW9kdWxlcy90cmVlZC9ub2RlX21vZHVsZXMvYmx1ZWJpcmQvanMvbWFpbi9jYW5jZWwuanMiLCIuLi9ub2RlX21vZHVsZXMvaXRyZWVkL25vZGVfbW9kdWxlcy90cmVlZC9ub2RlX21vZHVsZXMvYmx1ZWJpcmQvanMvbWFpbi9jYXB0dXJlZF90cmFjZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9pdHJlZWQvbm9kZV9tb2R1bGVzL3RyZWVkL25vZGVfbW9kdWxlcy9ibHVlYmlyZC9qcy9tYWluL2NhdGNoX2ZpbHRlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9pdHJlZWQvbm9kZV9tb2R1bGVzL3RyZWVkL25vZGVfbW9kdWxlcy9ibHVlYmlyZC9qcy9tYWluL2RpcmVjdF9yZXNvbHZlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2l0cmVlZC9ub2RlX21vZHVsZXMvdHJlZWQvbm9kZV9tb2R1bGVzL2JsdWViaXJkL2pzL21haW4vZXJyb3JzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2l0cmVlZC9ub2RlX21vZHVsZXMvdHJlZWQvbm9kZV9tb2R1bGVzL2JsdWViaXJkL2pzL21haW4vZXJyb3JzX2FwaV9yZWplY3Rpb24uanMiLCIuLi9ub2RlX21vZHVsZXMvaXRyZWVkL25vZGVfbW9kdWxlcy90cmVlZC9ub2RlX21vZHVsZXMvYmx1ZWJpcmQvanMvbWFpbi9lczUuanMiLCIuLi9ub2RlX21vZHVsZXMvaXRyZWVkL25vZGVfbW9kdWxlcy90cmVlZC9ub2RlX21vZHVsZXMvYmx1ZWJpcmQvanMvbWFpbi9maWx0ZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvaXRyZWVkL25vZGVfbW9kdWxlcy90cmVlZC9ub2RlX21vZHVsZXMvYmx1ZWJpcmQvanMvbWFpbi9maW5hbGx5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2l0cmVlZC9ub2RlX21vZHVsZXMvdHJlZWQvbm9kZV9tb2R1bGVzL2JsdWViaXJkL2pzL21haW4vZ2VuZXJhdG9ycy5qcyIsIi4uL25vZGVfbW9kdWxlcy9pdHJlZWQvbm9kZV9tb2R1bGVzL3RyZWVkL25vZGVfbW9kdWxlcy9ibHVlYmlyZC9qcy9tYWluL2dsb2JhbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9pdHJlZWQvbm9kZV9tb2R1bGVzL3RyZWVkL25vZGVfbW9kdWxlcy9ibHVlYmlyZC9qcy9tYWluL21hcC5qcyIsIi4uL25vZGVfbW9kdWxlcy9pdHJlZWQvbm9kZV9tb2R1bGVzL3RyZWVkL25vZGVfbW9kdWxlcy9ibHVlYmlyZC9qcy9tYWluL25vZGVpZnkuanMiLCIuLi9ub2RlX21vZHVsZXMvaXRyZWVkL25vZGVfbW9kdWxlcy90cmVlZC9ub2RlX21vZHVsZXMvYmx1ZWJpcmQvanMvbWFpbi9wcm9ncmVzcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9pdHJlZWQvbm9kZV9tb2R1bGVzL3RyZWVkL25vZGVfbW9kdWxlcy9ibHVlYmlyZC9qcy9tYWluL3Byb21pc2UuanMiLCIuLi9ub2RlX21vZHVsZXMvaXRyZWVkL25vZGVfbW9kdWxlcy90cmVlZC9ub2RlX21vZHVsZXMvYmx1ZWJpcmQvanMvbWFpbi9wcm9taXNlX2FycmF5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2l0cmVlZC9ub2RlX21vZHVsZXMvdHJlZWQvbm9kZV9tb2R1bGVzL2JsdWViaXJkL2pzL21haW4vcHJvbWlzZV9yZXNvbHZlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9pdHJlZWQvbm9kZV9tb2R1bGVzL3RyZWVkL25vZGVfbW9kdWxlcy9ibHVlYmlyZC9qcy9tYWluL3Byb21pc2Vfc3Bhd24uanMiLCIuLi9ub2RlX21vZHVsZXMvaXRyZWVkL25vZGVfbW9kdWxlcy90cmVlZC9ub2RlX21vZHVsZXMvYmx1ZWJpcmQvanMvbWFpbi9wcm9taXNpZnkuanMiLCIuLi9ub2RlX21vZHVsZXMvaXRyZWVkL25vZGVfbW9kdWxlcy90cmVlZC9ub2RlX21vZHVsZXMvYmx1ZWJpcmQvanMvbWFpbi9wcm9wZXJ0aWVzX3Byb21pc2VfYXJyYXkuanMiLCIuLi9ub2RlX21vZHVsZXMvaXRyZWVkL25vZGVfbW9kdWxlcy90cmVlZC9ub2RlX21vZHVsZXMvYmx1ZWJpcmQvanMvbWFpbi9wcm9wcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9pdHJlZWQvbm9kZV9tb2R1bGVzL3RyZWVkL25vZGVfbW9kdWxlcy9ibHVlYmlyZC9qcy9tYWluL3F1ZXVlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2l0cmVlZC9ub2RlX21vZHVsZXMvdHJlZWQvbm9kZV9tb2R1bGVzL2JsdWViaXJkL2pzL21haW4vcmFjZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9pdHJlZWQvbm9kZV9tb2R1bGVzL3RyZWVkL25vZGVfbW9kdWxlcy9ibHVlYmlyZC9qcy9tYWluL3JlZHVjZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9pdHJlZWQvbm9kZV9tb2R1bGVzL3RyZWVkL25vZGVfbW9kdWxlcy9ibHVlYmlyZC9qcy9tYWluL3NjaGVkdWxlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2l0cmVlZC9ub2RlX21vZHVsZXMvdHJlZWQvbm9kZV9tb2R1bGVzL2JsdWViaXJkL2pzL21haW4vc2V0dGxlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2l0cmVlZC9ub2RlX21vZHVsZXMvdHJlZWQvbm9kZV9tb2R1bGVzL2JsdWViaXJkL2pzL21haW4vc2V0dGxlZF9wcm9taXNlX2FycmF5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2l0cmVlZC9ub2RlX21vZHVsZXMvdHJlZWQvbm9kZV9tb2R1bGVzL2JsdWViaXJkL2pzL21haW4vc29tZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9pdHJlZWQvbm9kZV9tb2R1bGVzL3RyZWVkL25vZGVfbW9kdWxlcy9ibHVlYmlyZC9qcy9tYWluL3NvbWVfcHJvbWlzZV9hcnJheS5qcyIsIi4uL25vZGVfbW9kdWxlcy9pdHJlZWQvbm9kZV9tb2R1bGVzL3RyZWVkL25vZGVfbW9kdWxlcy9ibHVlYmlyZC9qcy9tYWluL3N5bmNocm9ub3VzX2luc3BlY3Rpb24uanMiLCIuLi9ub2RlX21vZHVsZXMvaXRyZWVkL25vZGVfbW9kdWxlcy90cmVlZC9ub2RlX21vZHVsZXMvYmx1ZWJpcmQvanMvbWFpbi90aGVuYWJsZXMuanMiLCIuLi9ub2RlX21vZHVsZXMvaXRyZWVkL25vZGVfbW9kdWxlcy90cmVlZC9ub2RlX21vZHVsZXMvYmx1ZWJpcmQvanMvbWFpbi90aW1lcnMuanMiLCIuLi9ub2RlX21vZHVsZXMvaXRyZWVkL25vZGVfbW9kdWxlcy90cmVlZC9ub2RlX21vZHVsZXMvYmx1ZWJpcmQvanMvbWFpbi91dGlsLmpzIiwiL2hvbWUvamFyZWQvY2xvbmUvbm0vbm90YWJsZW1pbmQvbm9kZV9tb2R1bGVzL3RyZWVkL2NsYXNzeS5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy90cmVlZC9kYi5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy90cmVlZC9rZXktaGFuZGxlcnMuanMiLCIvaG9tZS9qYXJlZC9jbG9uZS9ubS9ub3RhYmxlbWluZC9ub2RlX21vZHVsZXMvdHJlZWQva2V5LW1hbmFnZXIuanMiLCIvaG9tZS9qYXJlZC9jbG9uZS9ubS9ub3RhYmxlbWluZC9ub2RlX21vZHVsZXMvdHJlZWQvbGliL2NvbnRleHQtbWVudS5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy90cmVlZC9saWIva2V5cy5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy90cmVlZC9saWIvdXVpZC5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy90cmVlZC9saXN0ZW5lci5qcyIsIi4uL25vZGVfbW9kdWxlcy90cmVlZC9ub2RlX21vZHVsZXMvYmx1ZWJpcmQvanMvbWFpbi9nbG9iYWwuanMiLCIuLi9ub2RlX21vZHVsZXMvdHJlZWQvbm9kZV9tb2R1bGVzL2JsdWViaXJkL2pzL21haW4vcHJvbWlzZS5qcyIsIi4uL25vZGVfbW9kdWxlcy90cmVlZC9ub2RlX21vZHVsZXMvYmx1ZWJpcmQvanMvbWFpbi9zY2hlZHVsZS5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy90cmVlZC9wbC9tZW0uanMiLCIvaG9tZS9qYXJlZC9jbG9uZS9ubS9ub3RhYmxlbWluZC9ub2RlX21vZHVsZXMvdHJlZWQvcGx1Z2lucy9jbGlwYm9hcmQvaW5kZXguanMiLCIvaG9tZS9qYXJlZC9jbG9uZS9ubS9ub3RhYmxlbWluZC9ub2RlX21vZHVsZXMvdHJlZWQvcGx1Z2lucy9jb2xsYXBzZS9pbmRleC5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy90cmVlZC9wbHVnaW5zL2NvbGxhcHNlL2tleXMuanMiLCIvaG9tZS9qYXJlZC9jbG9uZS9ubS9ub3RhYmxlbWluZC9ub2RlX21vZHVsZXMvdHJlZWQvcGx1Z2lucy9jb2xsYXBzZS9ub2RlLmpzIiwiL2hvbWUvamFyZWQvY2xvbmUvbm0vbm90YWJsZW1pbmQvbm9kZV9tb2R1bGVzL3RyZWVkL3BsdWdpbnMvY29sbGFwc2Uvc3RvcmUuanMiLCIvaG9tZS9qYXJlZC9jbG9uZS9ubS9ub3RhYmxlbWluZC9ub2RlX21vZHVsZXMvdHJlZWQvcGx1Z2lucy9pbWFnZS9nZXQtc3JjLmpzIiwiL2hvbWUvamFyZWQvY2xvbmUvbm0vbm90YWJsZW1pbmQvbm9kZV9tb2R1bGVzL3RyZWVkL3BsdWdpbnMvaW1hZ2UvaW5kZXguanMiLCIvaG9tZS9qYXJlZC9jbG9uZS9ubS9ub3RhYmxlbWluZC9ub2RlX21vZHVsZXMvdHJlZWQvcGx1Z2lucy9pbWFnZS91cGxvYWRlci5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy90cmVlZC9wbHVnaW5zL2xpc3RzL2luZGV4LmpzIiwiL2hvbWUvamFyZWQvY2xvbmUvbm0vbm90YWJsZW1pbmQvbm9kZV9tb2R1bGVzL3RyZWVkL3BsdWdpbnMvcmViYXNlL2JyZWFkY3J1bWIuanMiLCIvaG9tZS9qYXJlZC9jbG9uZS9ubS9ub3RhYmxlbWluZC9ub2RlX21vZHVsZXMvdHJlZWQvcGx1Z2lucy9yZWJhc2UvaW5kZXguanMiLCIvaG9tZS9qYXJlZC9jbG9uZS9ubS9ub3RhYmxlbWluZC9ub2RlX21vZHVsZXMvdHJlZWQvcGx1Z2lucy9yZWJhc2Uva2V5cy5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy90cmVlZC9wbHVnaW5zL3JlYmFzZS9ub2RlLmpzIiwiL2hvbWUvamFyZWQvY2xvbmUvbm0vbm90YWJsZW1pbmQvbm9kZV9tb2R1bGVzL3RyZWVkL3BsdWdpbnMvcmViYXNlL3N0b3JlLmpzIiwiL2hvbWUvamFyZWQvY2xvbmUvbm0vbm90YWJsZW1pbmQvbm9kZV9tb2R1bGVzL3RyZWVkL3BsdWdpbnMvdG9kby9pbmRleC5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy90cmVlZC9wbHVnaW5zL3R5cGVzL2luZGV4LmpzIiwiL2hvbWUvamFyZWQvY2xvbmUvbm0vbm90YWJsZW1pbmQvbm9kZV9tb2R1bGVzL3RyZWVkL3BsdWdpbnMvdW5kby9pbmRleC5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy90cmVlZC9zdG9yZXMvYWN0aW9ucy5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy90cmVlZC9zdG9yZXMvYmFzZS5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy90cmVlZC9zdG9yZXMvY29tbWFuZGVnZXIuanMiLCIvaG9tZS9qYXJlZC9jbG9uZS9ubS9ub3RhYmxlbWluZC9ub2RlX21vZHVsZXMvdHJlZWQvc3RvcmVzL2NvbW1hbmRzLmpzIiwiL2hvbWUvamFyZWQvY2xvbmUvbm0vbm90YWJsZW1pbmQvbm9kZV9tb2R1bGVzL3RyZWVkL3N0b3Jlcy9rZXlzLmpzIiwiL2hvbWUvamFyZWQvY2xvbmUvbm0vbm90YWJsZW1pbmQvbm9kZV9tb2R1bGVzL3RyZWVkL3N0b3Jlcy9tYWluLmpzIiwiL2hvbWUvamFyZWQvY2xvbmUvbm0vbm90YWJsZW1pbmQvbm9kZV9tb2R1bGVzL3RyZWVkL3V0aWwvZW5zdXJlLWluLXZpZXcuanMiLCIvaG9tZS9qYXJlZC9jbG9uZS9ubS9ub3RhYmxlbWluZC9ub2RlX21vZHVsZXMvdHJlZWQvdXRpbC9leHRlbmQuanMiLCIvaG9tZS9qYXJlZC9jbG9uZS9ubS9ub3RhYmxlbWluZC9ub2RlX21vZHVsZXMvdHJlZWQvdXRpbC9zbGlkZS5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy90cmVlZC91dGlsL3RyZWVzLXRvLW1hcC5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy90cmVlZC91dGlsL3ZlcmlmeS1ub2Rlcy5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy90cmVlZC92aWV3cy9ib2R5L2RlZmF1bHQtZWRpdG9yLmpzIiwiL2hvbWUvamFyZWQvY2xvbmUvbm0vbm90YWJsZW1pbmQvbm9kZV9tb2R1bGVzL3RyZWVkL3ZpZXdzL2JvZHkvZGVmYXVsdC1yZW5kZXJlci5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy90cmVlZC92aWV3cy9ib2R5L3NpbXBsZS5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy90cmVlZC92aWV3cy9ib2R5L3RleHRhcmVhLWdyb3cuanMiLCIvaG9tZS9qYXJlZC9jbG9uZS9ubS9ub3RhYmxlbWluZC9ub2RlX21vZHVsZXMvdHJlZWQvdmlld3MvZm9jdXMvZmxleC1wYW5lcy5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy90cmVlZC92aWV3cy9mb2N1cy9pbmRleC5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy90cmVlZC92aWV3cy9mb2N1cy9pdGVtLmpzIiwiL2hvbWUvamFyZWQvY2xvbmUvbm0vbm90YWJsZW1pbmQvbm9kZV9tb2R1bGVzL3RyZWVkL3ZpZXdzL2xpc3QvYWN0aW9ucy5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy90cmVlZC92aWV3cy9saXN0L2luZGV4LmpzIiwiL2hvbWUvamFyZWQvY2xvbmUvbm0vbm90YWJsZW1pbmQvbm9kZV9tb2R1bGVzL3RyZWVkL3ZpZXdzL2xpc3QvaXRlbS5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy90cmVlZC92aWV3cy9saXN0L2tleXMuanMiLCIvaG9tZS9qYXJlZC9jbG9uZS9ubS9ub3RhYmxlbWluZC9ub2RlX21vZHVsZXMvdHJlZWQvdmlld3MvbGlzdC9tb3ZlbWVudC5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL25vZGVfbW9kdWxlcy90cmVlZC92aWV3cy9taW5kbWFwL2FjdGlvbnMuanMiLCIvaG9tZS9qYXJlZC9jbG9uZS9ubS9ub3RhYmxlbWluZC9ub2RlX21vZHVsZXMvdHJlZWQvdmlld3MvbWluZG1hcC9jYWxjcG9zLmpzIiwiL2hvbWUvamFyZWQvY2xvbmUvbm0vbm90YWJsZW1pbmQvbm9kZV9tb2R1bGVzL3RyZWVkL3ZpZXdzL21pbmRtYXAvaW5kZXguanMiLCIvaG9tZS9qYXJlZC9jbG9uZS9ubS9ub3RhYmxlbWluZC9ub2RlX21vZHVsZXMvdHJlZWQvdmlld3MvbWluZG1hcC9rZXlzLmpzIiwiL2hvbWUvamFyZWQvY2xvbmUvbm0vbm90YWJsZW1pbmQvbm9kZV9tb2R1bGVzL3RyZWVkL3ZpZXdzL21pbmRtYXAvbGlua3MuanMiLCIvaG9tZS9qYXJlZC9jbG9uZS9ubS9ub3RhYmxlbWluZC9ub2RlX21vZHVsZXMvdHJlZWQvdmlld3MvbWluZG1hcC9tb3ZhYmxlLmpzIiwiL2hvbWUvamFyZWQvY2xvbmUvbm0vbm90YWJsZW1pbmQvbm9kZV9tb2R1bGVzL3RyZWVkL3ZpZXdzL21pbmRtYXAvbW92ZW1lbnQuanMiLCIvaG9tZS9qYXJlZC9jbG9uZS9ubS9ub3RhYmxlbWluZC9ub2RlX21vZHVsZXMvdHJlZWQvdmlld3MvbWluZG1hcC9ub2RlLmpzIiwiL2hvbWUvamFyZWQvY2xvbmUvbm0vbm90YWJsZW1pbmQvbm9kZV9tb2R1bGVzL3RyZWVkL3ZpZXdzL3BhcGVyL2luZGV4LmpzIiwiL2hvbWUvamFyZWQvY2xvbmUvbm0vbm90YWJsZW1pbmQvbm9kZV9tb2R1bGVzL3RyZWVkL3ZpZXdzL3BhcGVyL2l0ZW0uanMiLCIvaG9tZS9qYXJlZC9jbG9uZS9ubS9ub3RhYmxlbWluZC90ZXN0L3V0aWxzLmpzIiwiL2hvbWUvamFyZWQvY2xvbmUvbm0vbm90YWJsZW1pbmQvdHJlZWQtcGx1Z2lucy9jdXN0b20tY3NzL2VkaXQtY3VzdG9tLWNzcy5qcyIsIi9ob21lL2phcmVkL2Nsb25lL25tL25vdGFibGVtaW5kL3RyZWVkLXBsdWdpbnMvY3VzdG9tLWNzcy9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7cUJDQW9ELFVBQVU7O0lBQXRELGFBQWEsVUFBYixhQUFhO0lBQUUsY0FBYyxVQUFkLGNBQWM7SUFBRSxNQUFNLFVBQU4sTUFBTTs7QUFFN0MsSUFBTSxLQUFLLEdBQUcsSUFBSSxNQUFNLEVBQUUsQ0FBQTs7SUFFbkIsS0FBSywyQkFBTSxjQUFjOztBQUNoQyxLQUFLLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFBOztJQUVoQixLQUFL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QyxPQUFPLElBQUksQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFO0FBQ3BELGFBQU07S0FDUDtBQUNELFFBQUksQ0FBQyxDQUFDLE9BQU8sS0FBSyxFQUFFLEVBQUU7OztBQUVwQixVQUFJLElBQUksR0FBRyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUE7QUFDN0IsVUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRTtBQUNwQyxlQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUE7T0FDekI7S0FDRixNQUFNLElBQUksQ0FBQyxDQUFDLE9BQU8sS0FBSyxFQUFFLEVBQUU7O0FBQzNCLFVBQUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQTtBQUM3QixVQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUFFO0FBQ3BDLGVBQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQTtPQUN6QjtLQUNGLE1BQU0sSUFBSSxDQUFDLENBQUMsT0FBTyxLQUFLLEVBQUUsRUFBRTs7O0FBRTNCLFVBQUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQTtBQUM3QixVQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsRUFBRSxLQUFLLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRTtBQUN4RixlQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUE7T0FDM0I7S0FDRixNQUFNLElBQUksQ0FBQyxDQUFDLE9BQU8sS0FBSyxFQUFFLEVBQUU7O0FBQzNCLFVBQUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQTtBQUM3QixVQUFJLElBQUksQ0FBQyxJQUFJLEtB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QUMsSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRTtBQUNwQyxlQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUE7T0FDNUM7S0FDRixNQUFNLElBQUksQ0FBQyxDQUFDLE9BQU8sS0FBSyxFQUFFLEVBQUU7O0FBQzNCLFVBQUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQTtBQUM3QixVQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUFFO0FBQ3BDLGVBQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQTtPQUM1QztLQUNGLE1BQU0sSUFBSSxDQUFDLENBQUMsT0FBTyxLQUFLLEVBQUUsRUFBRTs7O0FBRTNCLFVBQUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQTtBQUM3QixVQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsRUFBRSxLQUFLLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRTtBQUN4RixlQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUE7T0FDaEQ7S0FDRixNQUFNLElBQUksQ0FBQyxDQUFDLE9BQU8sS0FBSyxFQUFFLEVBQUU7O0FBQzNCLFVBQUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQTtBQUM3QixVQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsRUFBRSxLQUFLLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxD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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3J2TUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUxBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9uQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL1FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9vQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3aEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDalBBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOStCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDaEdBLElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQTtBQUNqQyxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUE7QUFDbkMsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQTs7QUFFeEIsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUFVLE9BQU8sRUFBRTtBQUNsQyxNQUFJLFVBQVUsS0FBSyxPQUFPLE9BQU8sRUFBRTtBQUNqQyxXQUFPLEdBQUc7QUFDUixnQkFBVSxFQUFFLE9BQU8sRUFDcEIsQ0FBQTtHQUNGOztBQUVELE1BQUksYUFBYSxHQUFHLEVBQUUsQ0FBQTs7QUFFdEIsTUFBSSxNQUFNLEdBQUc7QUFDWCxhQUFTLEVBQUU7QUFDVCxXQUFLLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQzVCOztBQUVELG1CQUFlLEVBQUUsMkJBQVk7QUFDM0IsVUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7QUFDL0UsVUFBSSxLQUFLLENBQUE7QUFDVCxVQUFJLE9BQU8sQ0FBQyxjQUFjLEVBQUU7QUFDMUIsYUFBSyxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUN0RixhQUFLLElBQUksSUFBSSxJQUFJLEtBQUssRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO09BQ2xEO0FBQ0QsV0FBSyxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDekMsYUFBSyxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQ2hGLGFBQUssSUFBSSxJQUFJLEtBQUssRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO09BQzlDO0FBQ0QsYUFBTyxLQUFLLENBQUE7S0FDYjs7QUFFRCxVQUFNLEVBQUUsa0JBQVk7QUFDbEIsVUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUE7QUFDdEMsVUFBSSxTQUFTLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO0FBQ3ZELGVBQU8sR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUE7T0FDekI7O0FBRUQsbUJBQWEsR0FBRyxFQUFFLENBQUE7QUFDbEIsVUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRTtBQUN0QixZQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBQyxNQUFNLEVBQUs7QUFDckMsY0FBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsT0FBTTtBQUM1QixjQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLEVBQUU7QUFDcEMseUJBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO1dBQ3JEO0FBQ0QsY0FBSSxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRTtBQUMzQixtQkFBTyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQTtXQUNsRDtTQUNGLENBQUMsQ0FBQTtPQUNIOztBQUVELFVBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFBOztBQUU5QyxVQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQTtBQUNoQyxVQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQTtLQUM3Qzs7QUFFRCxlQUFXLEVBQUUsdUJBQVk7O0FBRXZCLFVBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQy9FLFVBQUksS0FBSyxFQUFFLElBQUksQ0FBQTtBQUNmLFVBQUksT0FBTyxDQUFDLGdCQUFnQixFQUFFO0FBQzVCLGFBQUssR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUN4RixhQUFLLElBQUksSUFBSSxLQUFLLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtPQUM5QztBQUNELFdBQUssSUFBSSxDQUFDLEdBQUMsQ0FBQyxFQUFFLENBQUMsR0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ3pDLGFBQUssR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUNoRixhQUFLLElBQUksSUFBSSxLQUFLLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtPQUM5QztBQUNELFVBQUksTUFBTSxDQUFDLGFBQWEsRUFBRTtBQUN4QixlQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQTtPQUNsQztBQUNELFVBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQTtBQUN6QixVQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxZQUFZO0FBQy9CLFNBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtPQUNaLENBQUMsQ0FBQTtBQUNGLGFBQU8sQ0FBQyxDQUFBO0tBQ1Q7O0FBR0Qsa0JBQWMsRUFBRSx3QkFBVSxLQUFLLEVBQUU7QUFDL0IsV0FBSyxHQUFHLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQTtBQUNqQyxXQUFLLElBQUksQ0FBQyxHQUFDLENBQUMsRUFBRSxDQUFDLEdBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDdEMsYUFBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtPQUM5QztBQUNELFVBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFBO0tBQ2xCOztBQUVELHdCQUFvQixFQUFFLGdDQUFZO0FBQ2hDLFVBQUksQ0FBQyxJQUFJLENBQUMsS0FBSztBQUFFLGVBQU07T0FBQSxBQUN2QixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUE7S0FDdEIsRUFDRixDQUFBOztBQUVELE1BQUksT0FBTyxDQUFDLFlBQVksRUFBRTtBQUN4QixVQUFNLENBQUMseUJBQXlCLEdBQUcsVUFBVSxTQUFTLEVBQUU7QUFDdEQsVUFBSSxPQUFPLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLEVBQUU7QUFDOUMsWUFBSSxPQUFPLENBQUMsWUFBWSxFQUFFO0FBQ3hCLGNBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQTtBQUNyQixjQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQTtTQUNyRTtBQUNELFlBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQTtBQUM3RSxZQUFJLEtBQUssQ0FBQTtBQUNULFlBQUksT0FBTyxDQUFDLGNBQWMsRUFBRTtBQUMxQixlQUFLLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQTtBQUNwRixlQUFLLElBQUksSUFBSSxJQUFJLEtBQUssRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO1NBQ2xEO0FBQ0QsWUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtPQUNyQjtLQUNGLENBQUE7R0FDRjs7QUFFRCxNQUFJLE9BQU8sQ0FBQyxZQUFZLEVBQUU7QUFDeEIsVUFBTSxDQUFDLGtCQUFrQixHQUFHLFlBQVk7QUFDdEMsVUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQTtLQUN2RSxDQUFBO0FBQ0QsVUFBTSxDQUFDLGtCQUFrQixHQUFHLFVBQVUsU0FBUyxFQUFFO0FBQy9DLFVBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDLEtBQUssRUFBRTtBQUN4QyxZQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUNwQyxZQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFBO09BQ3ZFO0tBQ0YsQ0FBQTtHQUNGO0FBQ0QsU0FBTyxNQUFNLENBQUE7Q0FDZCxDQUFBOzs7QUM3SEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOU5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0VBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ3hEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDL0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQy9HQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDNW1DQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDek9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5SkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0VBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNqS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ3pIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdklBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7QUM1TEEsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFBO0FBQ3JDLElBQUksV0FBVyxHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO0FBQzNDLElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQTs7QUFFdkMsSUFBSSxVQUFVLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFB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QUN2RTtLQUNGLENBQUE7R0FDRjtBQUNELFNBQU8sTUFBTSxDQUFBO0NBQ2QsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUM3SEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUMvQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUM1bUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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QUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7QUFDL0MsUUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDcEMsVUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO0FBQ3JCLFVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUE7T0FDckM7QUFDRCxVQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLElBQUksRUFBRTtBQUMzQixlQUFPLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO09BQ3JDO0FBQ0QsYUFBTyxDQUNMLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUM3QixNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FDOUIsQ0FBQTtLQUNGLEVBQ0Y7O0FBRUQsVUFBUSxFQUFFO0FBQ1IsUUFBSSxFQUFFLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsWUFBWSxDQUFDO0FBQzdDLFNBQUssRUFBRSxlQUFVLEVBQUUsRUFBRSxNQUFNLEVBQUU7QUFDM0IsVUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUE7QUFDeEMsVUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBQ3JFLFVBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsRUFB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QUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQTtBQUMxQyxRQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7R0FDNUM7O0FBRUQsUUFBTSxFQUFFLGdCQUFVLEVBQUUsRUFBRTtBQUNwQixNQUFFLEdBQUcsRUFBRSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFBO0FBQzNCLFFBQUksRUFBRSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSTtBQUFFLGFBQU07S0FBQSxBQUNqQyxJQUFJLElBQUksRUFBRSxHQUFHLENBQUE7QUFDYixRQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLFFBQVEsRUFBRTtBQUMvQixTQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUE7QUFDekIsVUFBSSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUE7QUFDOUUsVUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUE7S0FDN0IsTUFBTTtBQUNMLFNBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBQ1YsVUFBSSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFBO0tBQzlEO0FBQ0QsUUFBSSxDQUFDLElBQUksRUFBRTtBQUNULFVBQUksR0FBRyxRQUFRLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFD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QUFLLEdBQUcsQ0FBQyxFQUFFLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxDQUFBO1dBQ3RDO1NBQ0YsQ0FBQyxDQUFDO09BQ0osQ0FBQSxFQUNGLEVBQ0YsRUFDRixDQUFBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsImltcG9ydCB7dHJlZWRGcm9tRmlsZSwgaW5pdEZvcm1hdHRlcnMsIFRpY2tlcn0gZnJvbSAnLi4vdXRpbHMnXG5cbmNvbnN0IHRpY2tzID0gbmV3IFRpY2tlcigpXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdC9hZGRvbnMnXG50aWNrcy5hZGQoJ2xvYWQ6cmVhY3QnKVxuXG5pbXBvcnQgVHJlZWQgZnJvbSAndHJlZWQvY2xhc3N5J1xuaW1wb3J0IE1lbVBMIGZyb20gJ3RyZWVkL3BsL21lbSdcbnRpY2tzLmFkZCgnbG9hZDp0cmVlZCcpXG5pbXBvcnQgRG9jVmlld2VyIGZyb20gJy4uLy4uL2FwcC9jb21wb25lbnRzL2RvYy12aWV3ZXInXG50aWNrcy5hZGQoJ2xvYWQ6Y29tcG9uZW50JylcblxudmFyIElKUyA9IHJlcXVpcmUoJ2l0cmVlZC9saWIva2VybmVscy9qcycpXG50aWNrcy5hZGQoJ2xvYWQ6aWpzJylcbnZhciBpdHJlZWQgPSByZXF1aXJlKCdpdHJlZWQnKVxudGlja3MuYWRkKCdsb2FkOml0cmVlZCcpXG5cbnZhciBwbHVnaW5zID0gW1xuICByZXF1aXJlKCd0cmVlZC9wbHVnaW5zL3VuZG8nKSxcbiAgcmVxdWlyZSgndHJlZWQvcGx1Z2lucy90b2RvJyksXG4gIHJlcXVpcmUoJ3RyZWVkL3BsdWdpbnMvaW1hZ2UnKSxcbiAgcmVxdWlyZSgndHJlZWQvcGx1Z2lucy90eXBlcycpLFxuICByZXF1aXJlKCd0cmVlZC9wbHVnaW5zL2NvbGxhcHNlJyksXG4gIHJlcXVpcmUoJ3RyZWVkL3BsdWdpbnMvY2xpcGJvYXJkJyksXG4gIHJlcXVpcmUoJ3RyZWVkL3BsdWdpbnMvbGlzdHMnKSxcbiAgcmVxdWlyZSgndHJlZWQvcGx1Z2lucy9yZWJhc2UnKSxcbiAgcmVxdWlyZSgnLi4vLi4vdHJlZWQtcGx1Z2lucy9jdXN0b20tY3NzJyksXG4gIGl0cmVlZCh7XG4gICAgdHlwZTogJ2lqcycsXG4gICAgbGFuZ3VhZ2U6ICdqYXZhc2NyaXB0JyxcbiAgICByZW1vdGU6IGZhbHNlLFxuICAgIHRpdGxlOiAnSmF2YXNjcmlwdCcsXG4gICAga2VybmVsOiBJSlMsXG4gIH0pLFxuXVxuXG50aWNrcy5hZGQoJ2xvYWQ6cGx1Z2lucycpXG5cbmNvbnN0IHBsID0gbmV3IE1lbVBMKClcblxudHJlZWRGcm9tRmlsZShUcmVlZCwgRklYVFVSRSwgcGx1Z2lucywgcGwsIChlcnIsIHt0cmVlZCwgZmlsZX0pID0+IHtcblxuICB0cmVlZC5rZXlNYW5hZ2VyLmxpc3Rlbih3aW5kb3cpXG4gIGNvbnN0IGVsID0gPERvY1ZpZXdlclxuICAgIHNhdmVXaW5kb3dDb25maWc9eyhhLCBiKSA9PiB7YigpfX1cbiAgICBrZXlzPXt0cmVlZC5rZXlNYW5hZ2VyfVxuICAgIHRyZWVkPXt0cmVlZH1cbiAgICBmaWxlPXtmaWxlfS8+XG5cbiAgUmVhY3QuYWRkb25zLlBlcmYuc3RhcnQoKVxuICB0aWNrcy5hZGQoJ3RyZWVkRnJvbUZpbGUnKVxuXG4gIFJlYWN0LnJlbmRlcihlbCwgZG9jdW1lbnQuYm9keSwgKGVycikgPT4ge1xuICAgIHRpY2tzLmFkZCgncmVuZGVyJylcblxuICAgIHRpY2tzLnNob3coKVxuICAgIFJlYWN0LmFkZG9ucy5QZXJmLnN0b3AoKVxuICAgIC8vUmVhY3QuYWRkb25zLlBlcmYuZ2V0TGFzdE1lYXN1cmVtZW50cygpXG4gIH0pXG59KVxuXG5cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBUeXBlU3dpdGNoZXIgZnJvbSAnLi90eXBlLXN3aXRjaGVyJ1xuXG5jb25zdCB7UHJvcFR5cGVzOiBQVH0gPSBSZWFjdFxuXG5leHBvcnQgZGVmYXVsdCBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIHByb3BUeXBlczoge1xuICAgIHR5cGU6IFBULnN0cmluZyxcbiAgICB2aWV3VHlwZXM6IFBULm9iamVjdCxcbiAgICB2YWx1ZTogUFQub2JqZWN0LFxuICB9LFxuICBfb25SZWJhc2U6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3RvcmUgPSB0aGlzLnByb3BzLnZhbHVlLmNvbmZpZy5zdG9yZVxuICAgIHRoaXMucHJvcHMub25SZWJhc2UodGhpcy5wcm9wcy52YWx1ZS5pZCwgc3RvcmUudmlldy5yb290KVxuICB9LFxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gKCkge1xuICAgIHZhciB2aWV3ID0gdGhpcy5wcm9wcy52YWx1ZS5jb25maWcuc3RvcmVcbiAgICB2aWV3Lm9uKHZpZXcuZXZlbnRzLnJvb3RDaGFuZ2VkKCksIHRoaXMuX29uUmViYXNlKVxuICB9LFxuICBjb21wb25lbnRXaWxsVW5tb3VudDogZnVuY3Rpb24gKCkge1xuICAgIHZhciB2aWV3ID0gdGhpcy5wcm9wcy52YWx1ZS5jb25maWcuc3RvcmVcbiAgICB2aWV3Lm9uKHZpZXcuZXZlbnRzLnJvb3RDaGFuZ2VkKCksIHRoaXMuX29uUmViYXNlKVxuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzLnZhbHVlLmNvbmZpZ1xuICAgIHZhciBzdGF0dXNiYXIgPSBbXVxuICAgIHByb3BzLnBsdWdpbnMubWFwKHBsdWdpbiA9PiB7XG4gICAgICBpZiAoIXBsdWdpbi5zdGF0dXNiYXIpIHJldHVyblxuICAgICAgc3RhdHVzYmFyLnB1c2gocGx1Z2luLnN0YXR1c2Jhcihwcm9wcy5zdG9yZSkpXG4gICAgfSlcbiAgICBwcm9wcy5za2lwTWl4ID0gWyd0b3AnXVxuICAgIHZhciBWaWV3ID0gdGhpcy5wcm9wcy52aWV3VHlwZXNbdGhpcy5wcm9wcy52YWx1ZS50eXBlXVxuICAgIGlmICghVmlldykge1xuICAgICAgVmlldyA9IHRoaXMucHJvcHMudmlld1R5cGVzLmxpc3RcbiAgICB9XG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXsnQXBwX3BhbmUgQXBwX3BhbmUtJyArIHRoaXMucHJvcHMudmFsdWUudHlwZX0+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT0nQXBwX3BhbmVfdG9wJz5cbiAgICAgICAge3N0YXR1c2Jhcn1cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J0FwcF9wYW5lX3NwbGl0dGVycyc+XG4gICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLnByb3BzLm9uU3BsaXQuYmluZChudWxsLCB0aGlzLnByb3BzLnBvcywgJ2hvcml6Jyl9Pnx8PC9idXR0b24+XG4gICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLnByb3BzLm9uU3BsaXQuYmluZChudWxsLCB0aGlzLnByb3BzLnBvcywgJ3ZlcnQnKX0+ID0gPC9idXR0b24+XG4gICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLnByb3BzLm9uUmVtb3ZlLmJpbmQobnVsbCwgdGhpcy5wcm9wcy5wb3MpfT54PC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8VHlwZVN3aXRjaGVyXG4gICAgICAgICAgdHlwZXM9e3RoaXMucHJvcHMudmlld1R5cGVzfVxuICAgICAgICAgIHR5cGU9e3RoaXMucHJvcHMudmFsdWUudHlwZX1cbiAgICAgICAgICBvbkNoYW5nZT17dGhpcy5wcm9wcy5jaGFuZ2VWaWV3VHlwZS5iaW5kKG51bGwsIHRoaXMucHJvcHMudmFsdWUuaWQpfS8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPSdBcHBfcGFuZV9zY3JvbGwnPlxuICAgICAgICA8VmlldyB7Li4ucHJvcHN9Lz5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICB9XG59KVxuXG4iLCJcbmltcG9ydCBQYW5lIGZyb20gJy4vZG9jLXBhbmUnXG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0JylcbiAgLCBLZXlzTWl4aW4gPSByZXF1aXJlKCcuLi9rZXlzLW1peGluJylcbiAgLCBTcGxpdE1hbmFnZXIgPSByZXF1aXJlKCcuL3NwbGl0LW1hbmFnZXInKVxuICAsIFNlYXJjaFBvcHBlciA9IHJlcXVpcmUoJy4vc2VhcmNoLXBvcHBlcicpXG4gICwgS2V5Ym9hcmRIZWxwZXIgPSByZXF1aXJlKCcuL2tleWJvYXJkLWhlbHBlcicpXG4gICwgdXVpZCA9IHJlcXVpcmUoJy4uLy4uL2xpYi91dWlkJylcbiAgLCBQVCA9IFJlYWN0LlByb3BUeXBlc1xuICAsIHdpbmRvd0p1bXAgPSByZXF1aXJlKCcuL3dpbmRvdy1qdW1wJylcblxuZnVuY3Rpb24gd2luZG93UG9zKHdpbmRvd3MsIGZuLCBwb3MpIHtcbiAgcG9zID0gcG9zIHx8IFtdXG4gIGlmICh3aW5kb3dzLmxlYWYpIHtcbiAgICBpZiAoZm4od2luZG93cy52YWx1ZSkpIHJldHVybiBwb3NcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICB2YXIgZmlyc3QgPSB3aW5kb3dQb3Mod2luZG93cy52YWx1ZS5maXJzdCwgZm4sIHBvcy5jb25jYXQoWydmaXJzdCddKSlcbiAgaWYgKGZpcnN0KSByZXR1cm4gZmlyc3RcbiAgdmFyIHNlY29uZCA9IHdpbmRvd1Bvcyh3aW5kb3dzLnZhbHVlLnNlY29uZCwgZm4sIHBvcy5jb25jYXQoWydzZWNvbmQnXSkpXG4gIGlmIChzZWNvbmQpIHJldHVybiBzZWNvbmRcbn1cblxuZnVuY3Rpb24gaHlkcmF0ZVdpbmRvd3Mod2luZG93cywgdHJlZWQsIHdpbmRvd01hcCwgdmlld1R5cGVzKSB7XG4gIHZhciBpZCwgdmlld1xuICBpZiAod2luZG93cy5maXJzdC5sZWFmKSB7XG4gICAgdmlldyA9IHZpZXdUeXBlc1t3aW5kb3dzLmZpcnN0LnZhbHVlLnR5cGUgfHwgJ2xpc3QnXSB8fCB2aWV3VHlwZXMubGlzdFxuICAgIHdpbmRvd3MuZmlyc3QudmFsdWUuY29uZmlnID0gdHJlZWQuYWRkVmlldyh7XG4gICAgICByb290OiB3aW5kb3dzLmZpcnN0LnZhbHVlLnJvb3QsXG4gICAgICBhY3Rpb25zOiB2aWV3LmFjdGlvbnMsXG4gICAgICBrZXlzOiB2aWV3LmtleXMsXG4gICAgfSlcbiAgICBpZCA9IHV1aWQoKVxuICAgIHdpbmRvd3MuZmlyc3QudmFsdWUuaWQgPSBpZFxuICAgIHdpbmRvd01hcFtpZF0gPSB3aW5kb3dzLmZpcnN0LnZhbHVlXG4gIH0gZWxzZSB7XG4gICAgaHlkcmF0ZVdpbmRvd3Mod2luZG93cy5maXJzdC52YWx1ZSwgdHJlZWQsIHdpbmRvd01hcCwgdmlld1R5cGVzKVxuICB9XG4gIGlmICh3aW5kb3dzLnNlY29uZC5sZWFmKSB7XG4gICAgdmlldyA9IHZpZXdUeXBlc1t3aW5kb3dzLnNlY29uZC52YWx1ZS50eXBlIHx8ICdsaXN0J10gfHwgdmlld1R5cGVzLmxpc3RcbiAgICB3aW5kb3dzLnNlY29uZC52YWx1ZS5jb25maWcgPSB0cmVlZC5hZGRWaWV3KHtcbiAgICAgIHJvb3Q6IHdpbmRvd3Muc2Vjb25kLnZhbHVlLnJvb3QsXG4gICAgICBhY3Rpb25zOiB2aWV3LmFjdGlvbnMsXG4gICAgICBrZXlzOiB2aWV3LmtleXMsXG4gICAgfSlcbiAgICBpZCA9IHV1aWQoKVxuICAgIHdpbmRvd3Muc2Vjb25kLnZhbHVlLmlkID0gaWRcbiAgICB3aW5kb3dNYXBbaWRdID0gd2luZG93cy5zZWNvbmQudmFsdWVcbiAgfSBlbHNlIHtcbiAgICBoeWRyYXRlV2luZG93cyh3aW5kb3dzLnNlY29uZC52YWx1ZSwgdHJlZWQsIHdpbmRvd01hcCwgdmlld1R5cGVzKVxuICB9XG59XG5cbmZ1bmN0aW9uIGh5ZHJhdGVJbml0aWFsV2luZG93cyh3aW5kb3dzLCB0cmVlZCwgdmlld1R5cGVzKSB7XG4gIHZhciB3aW5kb3dNYXAgPSB7fVxuICBpZiAod2luZG93cy5sZWFmKSB7XG4gICAgdmFyIGlkID0gdXVpZCgpXG4gICAgICAsIHZpZXcgPSB2aWV3VHlwZXNbd2luZG93cy52YWx1ZS50eXBlIHx8ICdsaXN0J10gfHwgdmlld1R5cGVzLmxpc3RcbiAgICB3aW5kb3dzLnZhbHVlLmNvbmZpZyA9IHRyZWVkLmFkZFZpZXcoe1xuICAgICAgcm9vdDogd2luZG93cy52YWx1ZS5yb290LFxuICAgICAgYWN0aW9uczogdmlldy5hY3Rpb25zLFxuICAgICAga2V5czogdmlldy5rZXlzLFxuICAgIH0pXG4gICAgd2luZG93cy52YWx1ZS5pZCA9IGlkXG4gICAgd2luZG93TWFwW2lkXSA9IHdpbmRvd3MudmFsdWVcbiAgICByZXR1cm4gd2luZG93TWFwXG4gIH1cbiAgaHlkcmF0ZVdpbmRvd3Mod2luZG93cy52YWx1ZSwgdHJlZWQsIHdpbmRvd01hcCwgdmlld1R5cGVzKVxuICByZXR1cm4gd2luZG93TWFwXG59XG5cbnZhciBEb2NWaWV3ZXIgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIG1peGluczogW0tleXNNaXhpbl0sXG5cbiAgc3RhdGljczoge1xuICAgIGtleXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICd3IGwsIHcgcmlnaHQnOiB0aGlzLl93aW5kb3dKdW1wLmJpbmQobnVsbCwgJ3JpZ2h0JyksXG4gICAgICAgICd3IGosIHcgZG93bic6IHRoaXMuX3dpbmRvd0p1bXAuYmluZChudWxsLCAnZG93bicpLFxuICAgICAgICAndyBrLCB3IHVwJzogdGhpcy5fd2luZG93SnVtcC5iaW5kKG51bGwsICd1cCcpLFxuICAgICAgICAndyBoLCB3IGxlZnQnOiB0aGlzLl93aW5kb3dKdW1wLmJpbmQobnVsbCwgJ2xlZnQnKSxcbiAgICAgICAgJ3NoaWZ0KzsgdiBzJzogdGhpcy5fc3BsaXQuYmluZChudWxsLCAnaG9yaXonKSxcbiAgICAgICAgJ3NoaWZ0KzsgcyBwJzogdGhpcy5fc3BsaXQuYmluZChudWxsLCAndmVydCcpLFxuICAgICAgICAnc2hpZnQrOyBxJzogdGhpcy5fcmVtb3ZlLFxuICAgICAgICAnLyc6IHRoaXMuX3N0YXJ0U2VhcmNoaW5nLFxuICAgICAgfVxuICAgIH0sXG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgdHJlZWQ6IFBULm9iamVjdCxcbiAgICBmaWxlOiBQVC5vYmplY3QsXG4gICAga2V5czogUFQub2JqZWN0LFxuICAgIHZpZXdUeXBlczogUFQub2JqZWN0LFxuICAgIHNhdmVXaW5kb3dDb25maWc6IFBULmZ1bmMsXG4gIH0sXG5cbiAgX29uRXJyb3I6IGZ1bmN0aW9uIChlcnIpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtsb2FkaW5nOiBmYWxzZSwgZXJyb3I6IGVycn0pXG4gIH0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHdpbmRvd0NvbmZpZyA9IHRoaXMucHJvcHMuZmlsZS53aW5kb3dzIHx8IHtcbiAgICAgIGxlYWY6IHRydWUsXG4gICAgICByYXRpbzogLjUsXG4gICAgICB2YWx1ZToge1xuICAgICAgICByb290OiBudWxsLFxuICAgICAgICB0eXBlOiAnbGlzdCcsXG4gICAgICB9LFxuICAgIH1cbiAgICB2YXIgd2luZG93TWFwID0gaHlkcmF0ZUluaXRpYWxXaW5kb3dzKHdpbmRvd0NvbmZpZywgdGhpcy5wcm9wcy50cmVlZCwgdGhpcy5wcm9wcy52aWV3VHlwZXMpXG4gICAgcmV0dXJuIHtcbiAgICAgIHdpbmRvd0NvbmZpZzogd2luZG93Q29uZmlnLFxuICAgICAgd2luZG93TWFwOiB3aW5kb3dNYXAsXG4gICAgICBzZWFyY2hpbmc6IGZhbHNlLFxuICAgIH1cbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdmlld1R5cGVzOiB7XG4gICAgICAgIC8vIHBkZjogcmVxdWlyZSgndHJlZWQvdmlld3MvcGRmJyksXG4gICAgICAgIGxpc3Q6IHJlcXVpcmUoJ3RyZWVkL3ZpZXdzL2xpc3QnKSxcbiAgICAgICAgbWluZG1hcDogcmVxdWlyZSgndHJlZWQvdmlld3MvbWluZG1hcCcpLFxuICAgICAgICBwYXBlcjogcmVxdWlyZSgndHJlZWQvdmlld3MvcGFwZXInKSxcbiAgICAgICAgZm9jdXM6IHJlcXVpcmUoJ3RyZWVkL3ZpZXdzL2ZvY3VzJyksXG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGZpbmRDdXJyZW50UGFuZTogZnVuY3Rpb24gKCkge1xuICAgIHZhciB2aWQgPSB0aGlzLnByb3BzLnRyZWVkLnN0b3JlLmFjdGl2ZVZpZXdcbiAgICByZXR1cm4gd2luZG93UG9zKHRoaXMuc3RhdGUud2luZG93Q29uZmlnLCAodmFsdWUpID0+IHZhbHVlLmNvbmZpZy5zdG9yZS52aWV3LmlkID09PSB2aWQpXG4gIH0sXG5cbiAgX3NwbGl0OiBmdW5jdGlvbiAob3JpZW50KSB7XG4gICAgdmFyIGNvbmZpZyA9IFNwbGl0TWFuYWdlci5zcGxpdCh0aGlzLmZpbmRDdXJyZW50UGFuZSgpLCBvcmllbnQsIHRoaXMuc3RhdGUud2luZG93Q29uZmlnLCB0aGlzLmdldE5ld1dpbmRvd0NvbmZpZylcbiAgICB0aGlzLl9jaGFuZ2VXaW5kb3dDb25maWcoY29uZmlnKVxuICB9LFxuXG4gIF9yZW1vdmU6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzdWx0ID0gU3BsaXRNYW5hZ2VyLnJlbW92ZSh0aGlzLmZpbmRDdXJyZW50UGFuZSgpLCB0aGlzLnN0YXRlLndpbmRvd0NvbmZpZylcbiAgICBpZiAoIXJlc3VsdCkgcmV0dXJuXG4gICAgdGhpcy5fb25SZW1vdmVkV2luZG93KHJlc3VsdC5yZW1vdmVkKVxuICAgIHRoaXMuX2NoYW5nZVdpbmRvd0NvbmZpZyhyZXN1bHQuY29uZmlnKVxuICB9LFxuXG4gIF93aW5kb3dKdW1wOiBmdW5jdGlvbiAoZGlyZWN0aW9uKSB7XG4gICAgdmFyIGN1cnJlbnRWaWV3ID0gdGhpcy5wcm9wcy50cmVlZC5zdG9yZS5hY3RpdmVWaWV3XG4gICAgaWYgKHRoaXMucHJvcHMudHJlZWQuc3RvcmUudmlld3NbY3VycmVudFZpZXddLm1vZGUgPT09ICdpbnNlcnQnKSByZXR1cm4gdHJ1ZVxuICAgIHZhciBuZXh0SWQgPSB3aW5kb3dKdW1wKHRoaXMuc3RhdGUud2luZG93Q29uZmlnLCBjdXJyZW50VmlldywgZGlyZWN0aW9uKVxuICAgIGlmIChmYWxzZSA9PT0gbmV4dElkKSByZXR1cm4gZmFsc2VcbiAgICB0aGlzLnByb3BzLnRyZWVkLnN0b3JlLmFjdGl2ZVZpZXcgPSBuZXh0SWRcbiAgICB0aGlzLnByb3BzLnRyZWVkLnN0b3JlLmNoYW5nZWQodGhpcy5wcm9wcy50cmVlZC5zdG9yZS5ldmVudHMuYWN0aXZlVmlld0NoYW5nZWQoKSlcbiAgfSxcblxuICBnZXROZXdXaW5kb3dDb25maWc6IGZ1bmN0aW9uIChjdXJyZW50Q29uZmlnKSB7XG5cbiAgICB2YXIgdmlldyA9IHRoaXMucHJvcHMudmlld1R5cGVzW2N1cnJlbnRDb25maWcudHlwZSB8fCAnbGlzdCddIHx8IHRoaXMucHJvcHMudmlld1R5cGVzLmxpc3RcbiAgICB2YXIgY29uZmlnID0gdGhpcy5wcm9wcy50cmVlZC5hZGRWaWV3KHtcbiAgICAgICAgcm9vdDogY3VycmVudENvbmZpZy5yb290LFxuICAgICAgICBhY3Rpb25zOiB2aWV3LmFjdGlvbnMsXG4gICAgICAgIGtleXM6IHZpZXcua2V5cyxcbiAgICAgIH0pXG4gICAgICAsIGlkID0gdXVpZCgpXG4gICAgICAsIHZhbHVlID0ge1xuICAgICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICAgIHR5cGU6IGN1cnJlbnRDb25maWcudHlwZSxcbiAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgcm9vdDogY3VycmVudENvbmZpZy5yb290XG4gICAgICAgIH1cbiAgICB0aGlzLnN0YXRlLndpbmRvd01hcFtpZF0gPSB2YWx1ZVxuICAgIHJldHVybiB2YWx1ZVxuICB9LFxuXG4gIF9vblJlbW92ZWRXaW5kb3c6IGZ1bmN0aW9uICh3aW5kb3cpIHtcbiAgICB2YXIgaWQgPSB3aW5kb3cuY29uZmlnLnN0b3JlLnZpZXcuaWRcbiAgICB0aGlzLnByb3BzLnRyZWVkLnN0b3JlLnVucmVnaXN0ZXJWaWV3KGlkKVxuICB9LFxuXG4gIF9jaGFuZ2VXaW5kb3dDb25maWc6IGZ1bmN0aW9uICh3aW5kb3dDb25maWcpIHtcbiAgICB0aGlzLnByb3BzLnNhdmVXaW5kb3dDb25maWcod2luZG93Q29uZmlnLCAoKSA9PlxuICAgICAgdGhpcy5zZXRTdGF0ZSh7d2luZG93Q29uZmlnOiB3aW5kb3dDb25maWd9KSlcbiAgfSxcblxuICBfcmViYXNlVmlldzogZnVuY3Rpb24gKHdpZCwgcm9vdCkge1xuICAgIHZhciB3bWFwID0gdGhpcy5zdGF0ZS53aW5kb3dNYXBcbiAgICB3bWFwW3dpZF0ucm9vdCA9IHJvb3RcbiAgICB0aGlzLnByb3BzLnNhdmVXaW5kb3dDb25maWcodGhpcy5zdGF0ZS53aW5kb3dDb25maWcpXG4gIH0sXG5cbiAgX2NoYW5nZVZpZXdUeXBlOiBmdW5jdGlvbiAod2lkLCB0eXBlKSB7XG4gICAgdmFyIHdtYXAgPSB0aGlzLnN0YXRlLndpbmRvd01hcFxuICAgICAgLCB2aWV3ID0gdGhpcy5wcm9wcy52aWV3VHlwZXNbdHlwZSB8fCAnbGlzdCddIHx8IHRoaXMucHJvcHMudmlld1R5cGVzLmxpc3RcbiAgICAgICwgaXNBY3RpdmUgPSB0aGlzLnByb3BzLnRyZWVkLnN0b3JlLmFjdGl2ZVZpZXcgPT09IHdtYXBbd2lkXS5jb25maWcuc3RvcmUuaWRcbiAgICB0aGlzLnByb3BzLnRyZWVkLnJlbW92ZVZpZXcod21hcFt3aWRdLmNvbmZpZy5pZClcblxuICAgIHdtYXBbd2lkXS50eXBlID0gdHlwZSB8fCAnbGlzdCdcbiAgICB2YXIgY29uZmlnID0gd21hcFt3aWRdLmNvbmZpZyA9IHRoaXMucHJvcHMudHJlZWQuYWRkVmlldyh7XG4gICAgICByb290OiB3bWFwW3dpZF0ucm9vdCxcbiAgICAgIGFjdGlvbnM6IHZpZXcuYWN0aW9ucyxcbiAgICAgIGtleXM6IHZpZXcua2V5cyxcbiAgICB9KVxuXG4gICAgaWYgKGlzQWN0aXZlKSB7XG4gICAgICBjb25maWcuc3RvcmUuYWN0aW9ucy5zZXRBY3RpdmVWaWV3KClcbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHt3aW5kb3dNYXA6IHdtYXB9KVxuICAgIHRoaXMucHJvcHMuc2F2ZVdpbmRvd0NvbmZpZyh0aGlzLnN0YXRlLndpbmRvd0NvbmZpZywgKCkgPT4gbnVsbClcbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gKCkge1xuICAgIC8vIFRPRE86IG5lZWQgdG8gYWJzdHJhY3Qgb3V0IHRoZSBsb2dpYyBmcm9tIGJyb3dzZS5qc1xuICAgIC8vIG5vdCBzdXJlIHdoYXQgdGhpcyBtZWFucyBub3cuLi5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX2tleURvd24pXG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX2tleURvd24pXG4gIH0sXG5cbiAgX3N0YXJ0U2VhcmNoaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMudHJlZWQuc3RvcmUudmlld3NbdGhpcy5wcm9wcy50cmVlZC5zdG9yZS5hY3RpdmVWaWV3XS5tb2RlID09PSAnaW5zZXJ0JykgcmV0dXJuIHRydWVcbiAgICB0aGlzLnNldFN0YXRlKHtzZWFyY2hpbmc6IHRydWV9KVxuICB9LFxuXG4gIF9zZWFyY2hJdGVtczogZnVuY3Rpb24gKG5lZWRsZSkge1xuICAgIHZhciBzdG9yZSA9IHRoaXMucHJvcHMudHJlZWQuc3RvcmVcbiAgICAgICwgYmxhY2tUeXBlcyA9IFtdLy8naXB5dGhvbicsICdjb2RlLXBsYXlncm91bmQnXSAvLyBUT0RPIGhhdmUgcGx1Z2lucyBkZWNsYXJlIHRoaXMsIGFzIFwibm9zZWFyY2hcIiBvciBzb21ldGhpbmdcbiAgICAgICwgdmlldyA9IHN0b3JlLnZpZXdzW3N0b3JlLmFjdGl2ZVZpZXddXG4gICAgICAsIHJvb3QgPSB2aWV3LnJvb3RcbiAgICAgICwgZGIgPSBzdG9yZS5kYlxuXG4gICAgdmFyIGZyb250aWVyID0gW3Jvb3RdXG4gICAgICAsIGZvdW5kID0gW11cbiAgICB3aGlsZSAoZnJvbnRpZXIubGVuZ3RoICYmIGZvdW5kLmxlbmd0aCA8IDIwKSB7XG4gICAgICB2YXIgbmV4dCA9IGRiLm5vZGVzW2Zyb250aWVyLnNoaWZ0KCldXG4gICAgICBpZiAobmV4dC5jb250ZW50LnRyaW0oKS5sZW5ndGggJiYgYmxhY2tUeXBlcy5pbmRleE9mKG5leHQudHlwZSkgPT09IC0xICYmICghbmVlZGxlIHx8IG5leHQuY29udGVudC5tYXRjaChuZWVkbGUpKSkge1xuICAgICAgICBmb3VuZC5wdXNoKG5leHQpXG4gICAgICB9XG4gICAgICBpZiAobmV4dC5jaGlsZHJlbikge1xuICAgICAgICBmcm9udGllciA9IGZyb250aWVyLmNvbmNhdChuZXh0LmNoaWxkcmVuKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZm91bmRcbiAgfSxcblxuICBfb25TZWFyY2hTZWxlY3Q6IGZ1bmN0aW9uIChpdGVtLCBqdW1wKSB7XG4gICAgdmFyIGFjdGlvbnMgPSB0aGlzLnByb3BzLnRyZWVkLnN0b3JlLmN1cnJlbnRWaWV3QWN0aW9ucygpXG4gICAgLy8gVE9ETyB0aGluayBhYm91dCB3aGF0IHNob3VsZCBiZSB0aGUgZGVmYXVsdCBiZWhhdmlvci4gU2hvdWxkIGl0IGJlIHRvXG4gICAgLy8gcmViYXNlLCBvciB0byBzY3JvbGwgKyBvcGVuP1xuICAgIGlmIChqdW1wKSB7XG4gICAgICBhY3Rpb25zLnJlYmFzZShpdGVtLmlkKVxuICAgIH0gZWxzZSB7XG4gICAgICBhY3Rpb25zLmV4cGFuZFRvQW5kU2VsZWN0KGl0ZW0uaWQpXG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdGUoe3NlYXJjaGluZzogZmFsc2V9KVxuICB9LFxuXG4gIF9jYW5HcmFiS2V5Ym9hcmQ6IGZ1bmN0aW9uIChlKSB7XG4gICAgcmV0dXJuICh0aGlzLnByb3BzLnRyZWVkLnN0b3JlLnZpZXdzW3RoaXMucHJvcHMudHJlZWQuc3RvcmUuYWN0aXZlVmlld10ubW9kZSAhPT0gJ2luc2VydCcgJiZcbiAgICAgICAgWydJTlBVVCcsICdURVhUQVJFQSddLmluZGV4T2YoZS50YXJnZXQubm9kZU5hbWUpID09PSAtMSlcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIge3RyZWVkLCBwbHVnaW5zLCBrZXlzLCB2aWV3VHlwZXN9ID0gdGhpcy5wcm9wc1xuXG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPSdEb2NWaWV3ZXInPlxuICAgICAgPFNwbGl0TWFuYWdlclxuICAgICAgICBjcHJvcHM9e3tcbiAgICAgICAgICB2aWV3VHlwZXM6IHZpZXdUeXBlcyxcbiAgICAgICAgICBjaGFuZ2VWaWV3VHlwZTogdGhpcy5fY2hhbmdlVmlld1R5cGUsXG4gICAgICAgICAgb25SZWJhc2U6IHRoaXMuX3JlYmFzZVZpZXcsXG4gICAgICAgIH19XG4gICAgICAgIGNvbXA9e1BhbmV9XG4gICAgICAgIGNvbmZpZz17dGhpcy5zdGF0ZS53aW5kb3dDb25maWd9XG4gICAgICAgIGdldE5ldz17dGhpcy5nZXROZXdXaW5kb3dDb25maWd9XG4gICAgICAgIG9uUmVtb3ZlPXt0aGlzLl9vblJlbW92ZWRXaW5kb3d9XG4gICAgICAgIG9uQ2hhbmdlPXt0aGlzLl9jaGFuZ2VXaW5kb3dDb25maWd9Lz5cbiAgICAgIHt0aGlzLnN0YXRlLnNlYXJjaGluZyAmJiA8U2VhcmNoUG9wcGVyXG4gICAgICAgIG1hdGNoSXRlbXM9e3RoaXMuX3NlYXJjaEl0ZW1zfVxuICAgICAgICBvbkNsb3NlPXsoKSA9PiB0aGlzLnNldFN0YXRlKHtzZWFyY2hpbmc6IGZhbHNlfSl9XG4gICAgICAgIG9uU2VsZWN0PXt0aGlzLl9vblNlYXJjaFNlbGVjdH0gLz59XG4gICAgICA8S2V5Ym9hcmRIZWxwZXIgY2FuR3JhYktleWJvYXJkPXt0aGlzLl9jYW5HcmFiS2V5Ym9hcmR9IGtleXM9e2tleXN9IHBsdWdpbnM9e3RyZWVkLm9wdGlvbnMucGx1Z2luc30vPlxuICAgIDwvZGl2PlxuICB9XG59KVxuXG5tb2R1bGUuZXhwb3J0cyA9IERvY1ZpZXdlclxuIiwiLyoqXG4gKiBQb3BzIHVwIHdoZW4geW91IHR5cGUgXCI/XCIgaW4gbm9ybWFsIC8gdmlzdWFsIG1vZGUuXG4gKi9cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKVxuICAsIHZpZXdLZXlzID0gcmVxdWlyZSgndHJlZWQvdmlld3MvbGlzdC9rZXlzJylcbiAgLCBLZXlzTWl4aW4gPSByZXF1aXJlKCcuLi9rZXlzLW1peGluJylcbiAgLCBLZXlib2FyZFBvcHVwID0gcmVxdWlyZSgnLi9rZXlib2FyZC1wb3B1cCcpXG4gICwgUFQgPSBSZWFjdC5Qcm9wVHlwZXNcblxudmFyIEtleWJvYXJkSGVscGVyID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBtaXhpbnM6IFtLZXlzTWl4aW5dLFxuXG4gIHN0YXRpY3M6IHtcbiAgICBrZXlzOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAnc2hpZnQrLyc6IHRoaXMuc2hvd0tleSxcbiAgICAgIH1cbiAgICB9LFxuICB9LFxuXG4gIHByb3BUeXBlczoge1xuICAgIGNhbkdyYWJLZXlib2FyZDogUFQuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHBsdWdpbnM6IFBULmFycmF5T2YoUFQub2JqZWN0KS5pc1JlcXVpcmVkLFxuICAgIGtleXM6IFBULm9iamVjdC5pc1JlcXVpcmVkLFxuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7b3BlbjogZmFsc2V9XG4gIH0sXG5cbiAgc2hvd0tleTogZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuY2FuR3JhYktleWJvYXJkKGUpKSByZXR1cm4gdHJ1ZVxuICAgIHRoaXMuc2hvdygpXG4gIH0sXG5cbiAgc2hvdzogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe29wZW46IHRydWV9KVxuICB9LFxuICBoaWRlOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7b3BlbjogZmFsc2V9KVxuICB9LFxuXG4gIG1haW5QYWdlOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHZpZXdLZXlzKS5tYXAodGl0bGUgPT4gKHtcbiAgICAgIHRpdGxlOiB0aXRsZSxcbiAgICAgIGFjdGlvbnM6IHZpZXdLZXlzW3RpdGxlXSxcbiAgICB9KSlcbiAgfSxcblxuICBwbHVnaW5zUGFnZTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLnBsdWdpbnMucmVkdWNlKChzZWN0aW9ucywgcGx1Z2luKSA9PiB7XG4gICAgICBpZiAoIXBsdWdpbi5rZXlzKSByZXR1cm4gc2VjdGlvbnNcbiAgICAgIHZhciBrZXlzID0gcGx1Z2luLmtleXNcbiAgICAgIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2Yga2V5cykge1xuICAgICAgICBrZXlzID0ga2V5cyh0aGlzLnByb3BzLnBsdWdpbnMpXG4gICAgICB9XG4gICAgICBzZWN0aW9ucy5wdXNoKHtcbiAgICAgICAgdGl0bGU6IHBsdWdpbi50aXRsZSxcbiAgICAgICAgYWN0aW9uczoga2V5c1xuICAgICAgfSlcbiAgICAgIHJldHVybiBzZWN0aW9uc1xuICAgIH0sIFtdKVxuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5zdGF0ZS5vcGVuKSB7XG4gICAgICByZXR1cm4gPFRvYXN0ZXIgb25DbGljaz17dGhpcy5zaG93fT5cbiAgICAgICAgUHJlc3MgPyBmb3Iga2V5Ym9hcmQgc2hvcnRjdXRzXG4gICAgICA8L1RvYXN0ZXI+XG4gICAgfVxuICAgIHJldHVybiA8S2V5Ym9hcmRQb3B1cFxuICAgICAga2V5cz17dGhpcy5wcm9wcy5rZXlzfVxuICAgICAgcGFnZXM9e3tcbiAgICAgICAgJ01haW4nOiB0aGlzLm1haW5QYWdlKCksXG4gICAgICAgICdQbHVnaW5zJzogdGhpcy5wbHVnaW5zUGFnZSgpLFxuICAgICAgfX1cbiAgICAgIG9uQ2xvc2U9e3RoaXMuaGlkZX0vPlxuICB9LFxufSlcblxudmFyIFRvYXN0ZXIgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7dG9hc3RlZDogZmFsc2V9XG4gIH0sXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiAoKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnNldFN0YXRlKHt0b2FzdGVkOiB0cnVlfSksIDEwMCk7XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBjbHMgPSAnVG9hc3RlciAnICsgKHRoaXMuc3RhdGUudG9hc3RlZCA/ICdUb2FzdGVyLXRvYXN0ZWQnIDogJycpXG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXtjbHN9IHsuLi50aGlzLnByb3BzfT5cbiAgICAgIHt0aGlzLnByb3BzLmNoaWxkcmVufVxuICAgIDwvZGl2PlxuICB9LFxufSlcblxubW9kdWxlLmV4cG9ydHMgPSBLZXlib2FyZEhlbHBlclxuIiwiLyoqXG4gKiBQb3BzIHVwIHdoZW4geW91IHR5cGUgXCI/XCIgaW4gbm9ybWFsIC8gdmlzdWFsIG1vZGUuXG4gKi9cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKVxuICAsIFBUID0gUmVhY3QuUHJvcFR5cGVzXG5cbnZhciBLZXlib2FyZFBvcHVwID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBwcm9wVHlwZXM6IHtcbiAgICBvbkNsb3NlOiBQVC5mdW5jLmlzUmVxdWlyZWQsXG4gICAgcGFnZXM6IFBULm9iamVjdE9mKFBULmFycmF5T2YoUFQuc2hhcGUoe1xuICAgICAgdGl0bGU6IFBULnN0cmluZyxcbiAgICAgIGFjdGlvbnM6IFBULm9iamVjdE9mKFBULm9iamVjdE9mKFBULnN0cmluZykpLFxuICAgIH0pKSkuaXNSZXF1aXJlZCxcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGFnZUluZGV4OiAwLFxuICAgICAgZmFkZUluOiBmYWxzZSxcbiAgICB9XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9yZXNpemUoKVxuICAgIHRoaXMucHJvcHMua2V5cy5kaXNhYmxlKClcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX29uS2V5RG93bilcbiAgICB0aGlzLnNldFN0YXRlKHtmYWRlSW46IHRydWV9KVxuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50OiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5wcm9wcy5rZXlzLmVuYWJsZSgpXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9vbktleURvd24pXG4gIH0sXG5cbiAgX29uQ2xvc2U6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtmYWRlSW46IGZhbHNlfSlcbiAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMucHJvcHMub25DbG9zZSgpLCAxNTApXG4gIH0sXG5cbiAgX29uS2V5RG93bjogZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoZS5rZXlDb2RlID09PSAyNykgcmV0dXJuIHRoaXMuX29uQ2xvc2UoKVxuICAgIGlmIChlLmtleUNvZGUgIT09IDkpIHJldHVybiBudWxsXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgdmFyIHNlbGVjdGlvbiA9IHRoaXMuc3RhdGUucGFnZUluZGV4XG4gICAgICAsIHBhZ2VzID0gT2JqZWN0LmtleXModGhpcy5wcm9wcy5wYWdlcylcbiAgICBpZiAoZS5zaGlmdEtleSkge1xuICAgICAgc2VsZWN0aW9uIC09IDFcbiAgICAgIGlmIChzZWxlY3Rpb24gPCAwKSBzZWxlY3Rpb24gPSBwYWdlcy5sZW5ndGggLSAxXG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGVjdGlvbiArPSAxXG4gICAgICBpZiAoc2VsZWN0aW9uID4gcGFnZXMubGVuZ3RoIC0gMSkgc2VsZWN0aW9uID0gMFxuICAgIH1cbiAgICB0aGlzLnNldFN0YXRlKHtwYWdlSW5kZXg6IHNlbGVjdGlvbn0pXG4gIH0sXG5cbiAgX3Jlc2l6ZTogZnVuY3Rpb24gKCkge1xuICAgIHZhciBub2RlID0gdGhpcy5yZWZzLmJvZHkuZ2V0RE9NTm9kZSgpXG4gICAgbm9kZS5zdHlsZS53aWR0aCA9IG5vZGUuc2Nyb2xsV2lkdGggKyAncHgnO1xuICAgIGZvciAodmFyIGk9MDsgaTwxMCAmJiBub2RlLnNjcm9sbFdpZHRoID4gbm9kZS5vZmZzZXRXaWR0aDsgaSsrKSB7XG4gICAgICBub2RlLnN0eWxlLndpZHRoID0gbm9kZS5zY3JvbGxXaWR0aCArICdweCc7XG4gICAgfVxuICB9LFxuXG4gIHJlbmRlclJvdzogZnVuY3Rpb24gKGFjdGlvbiwgYmluZGluZ3MpIHtcbiAgICB2YXIgdGV4dCA9IGJpbmRpbmdzLnRleHQgfHwgYmluZGluZ3Mubm9ybWFsIHx8IGJpbmRpbmdzLnZpc3VhbCB8fCBiaW5kaW5ncy5pbnNlcnRcbiAgICBpZiAoIXRleHQpIHJldHVybiBudWxsXG4gICAgcmV0dXJuIDx0ciBrZXk9e2FjdGlvbn0+XG4gICAgICA8dGQgY2xhc3NOYW1lPVwiS2V5Ym9hcmRQb3B1cF9iaW5kaW5nc1wiPlxuICAgICAgICB7XG4gICAgICAgICAgdGV4dC5zcGxpdCgnLCAnKS5tYXAoYmluZGluZyA9PiA8c3BhbiBrZXk9e2JpbmRpbmd9PntiaW5kaW5nfTwvc3Bhbj4pXG4gICAgICAgIH1cbiAgICAgIDwvdGQ+XG4gICAgICA8dGQgY2xhc3NOYW1lPVwiS2V5Ym9hcmRQb3B1cF9hY3Rpb25cIj57YmluZGluZ3MudGl0bGUgfHwgYWN0aW9ufTwvdGQ+XG4gICAgPC90cj5cbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFnZU5hbWVzID0gT2JqZWN0LmtleXModGhpcy5wcm9wcy5wYWdlcylcbiAgICAgICwgY3VycmVudE5hbWUgPSBwYWdlTmFtZXNbdGhpcy5zdGF0ZS5wYWdlSW5kZXhdXG4gICAgICAsIHBhZ2UgPSB0aGlzLnByb3BzLnBhZ2VzW2N1cnJlbnROYW1lXVxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT17J0tleWJvYXJkUG9wdXAnICsgKHRoaXMuc3RhdGUuZmFkZUluID8gJyBLZXlib2FyZFBvcHVwLWZhZGUtaW4nIDogJycpfSBvbkNsaWNrPXt0aGlzLl9vbkNsb3NlfT5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPSdLZXlib2FyZFBvcHVwX2JvZHknIG9uQ2xpY2s9e2UgPT4gZS5zdG9wUHJvcGFnYXRpb24oKX0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiS2V5Ym9hcmRQb3B1cF90aXRsZVwiPlxuICAgICAgICAgIE5vdGFibGVtaW5kIEtleWJvYXJkIFNob3J0Y3V0c1xuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J0tleWJvYXJkUG9wdXBfcGFnZXMnPlxuICAgICAgICAgIHtwYWdlTmFtZXMubWFwKChuYW1lLCBpKSA9PlxuICAgICAgICAgICAgPGJ1dHRvbiBrZXk9e2l9IGRpc2FibGVkPXtpID09PSB0aGlzLnN0YXRlLnBhZ2VJbmRleH0gb25DbGljaz17KCkgPT4gdGhpcy5zZXRTdGF0ZSh7cGFnZUluZGV4OiBpfSl9PlxuICAgICAgICAgICAgICB7bmFtZX1cbiAgICAgICAgICAgIDwvYnV0dG9uPil9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IHJlZj1cImJvZHlcIiBjbGFzc05hbWU9XCJLZXlib2FyZFBvcHVwX3NlY3Rpb25zXCI+XG4gICAgICAgICAge3BhZ2UubWFwKChzZWN0aW9uLCBpKSA9PiA8ZGl2IGtleT17aX0gY2xhc3NOYW1lPSdLZXlib2FyZFBvcHVwX3NlY3Rpb24nPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J0tleWJvYXJkUG9wdXBfc2VjdGlvbl90aXRsZSc+XG4gICAgICAgICAgICAgIHtzZWN0aW9uLnRpdGxlfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8dGFibGU+XG4gICAgICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgICAgICB7T2JqZWN0LmtleXMoc2VjdGlvbi5hY3Rpb25zKS5tYXAoYWN0aW9uID0+IHRoaXMucmVuZGVyUm93KGFjdGlvbiwgc2VjdGlvbi5hY3Rpb25zW2FjdGlvbl0pKX1cbiAgICAgICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgICAgIDwvdGFibGU+XG4gICAgICAgICAgPC9kaXY+KX1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgfSxcbn0pXG5cbm1vZHVsZS5leHBvcnRzID0gS2V5Ym9hcmRQb3B1cFxuXG4iLCJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBlbnN1cmVJblZpZXcgZnJvbSAndHJlZWQvdXRpbC9lbnN1cmUtaW4tdmlldydcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnXG5pbXBvcnQge2hpZ2hsaWdodH0gZnJvbSAnLi9zZWFyY2gtdXRpbHMnXG5cbmNvbnN0IHtQcm9wVHlwZXM6IFBUfSA9IFJlYWN0XG5cbmV4cG9ydCBkZWZhdWx0IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgcHJvcFR5cGVzOiB7XG4gICAgaXRlbXM6IFBULmFycmF5LFxuICAgIG9uU2VsZWN0OiBQVC5mdW5jLFxuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzZWxlY3RlZDogMCxcbiAgICB9XG4gIH0sXG5cbiAgaGFuZGxlRW50ZXI6IGZ1bmN0aW9uIChqdW1wKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMub25TZWxlY3QodGhpcy5wcm9wcy5pdGVtc1t0aGlzLnN0YXRlLnNlbGVjdGVkXSwganVtcClcbiAgfSxcblxuICBoYW5kbGVHb1VwOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUuc2VsZWN0ZWQgPCB0aGlzLnByb3BzLml0ZW1zLmxlbmd0aCAtIDEpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe3NlbGVjdGVkOiB0aGlzLnN0YXRlLnNlbGVjdGVkICsgMX0pXG4gICAgfVxuICB9LFxuXG4gIGhhbmRsZUdvRG93bjogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnN0YXRlLnNlbGVjdGVkID4gMCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7c2VsZWN0ZWQ6IHRoaXMuc3RhdGUuc2VsZWN0ZWQgLSAxfSlcbiAgICB9XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe3NlbGVjdGVkOiAwfSlcbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5yZWZzIHx8ICF0aGlzLnJlZnMuc2VsZWN0ZWQpIHJldHVybjtcbiAgICB2YXIgbm9kZSA9IHRoaXMucmVmcy5zZWxlY3RlZC5nZXRET01Ob2RlKCk7XG4gICAgbm9kZS5vZmZzZXRQYXJlbnQuc2Nyb2xsVG9wID0gbm9kZS5vZmZzZXRQYXJlbnQuc2Nyb2xsSGVpZ2h0XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkVXBkYXRlOiBmdW5jdGlvbiAocHJldlByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICBpZiAoIXRoaXMucmVmcyB8fCAhdGhpcy5yZWZzLnNlbGVjdGVkKSByZXR1cm47XG4gICAgdmFyIG5vZGUgPSB0aGlzLnJlZnMuc2VsZWN0ZWQuZ2V0RE9NTm9kZSgpO1xuICAgIGlmIChwcmV2U3RhdGUuc2VsZWN0ZWQgIT09IHRoaXMuc3RhdGUuc2VsZWN0ZWQpIHtcbiAgICAgIGVuc3VyZUluVmlldyhub2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5vZmZzZXRQYXJlbnQuc2Nyb2xsVG9wID0gbm9kZS5vZmZzZXRQYXJlbnQuc2Nyb2xsSGVpZ2h0XG4gICAgfVxuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBpdGVtcyA9IFtdXG4gICAgZm9yICh2YXIgaT10aGlzLnByb3BzLml0ZW1zLmxlbmd0aC0xOyBpPj0wOyBpLS0pIHtcbiAgICAgIHZhciBpdGVtID0gdGhpcy5wcm9wcy5pdGVtc1tpXVxuICAgICAgaXRlbXMucHVzaChcbiAgICAgICAgPGxpIGNsYXNzTmFtZT17Y2xhc3NuYW1lcyh7XG4gICAgICAgICAgJ1NlYXJjaFBvcHBlcl9yZXN1bHQnOiB0cnVlLFxuICAgICAgICAgICdTZWFyY2hQb3BwZXJfcmVzdWx0LXNlbGVjdGVkJzogaSA9PT0gdGhpcy5zdGF0ZS5zZWxlY3RlZCxcbiAgICAgICAgfSl9XG4gICAgICAgICAgcmVmPXtpID09PSB0aGlzLnN0YXRlLnNlbGVjdGVkID8gJ3NlbGVjdGVkJyA6IHVuZGVmaW5lZH1cbiAgICAgICAgICBvbkNsaWNrPXt0aGlzLnByb3BzLm9uU2VsZWN0LmJpbmQobnVsbCwgaXRlbSwgZmFsc2UpfVxuICAgICAgICAgIGtleT17aX0+XG4gICAgICAgICAgICAgIHtoaWdobGlnaHQoaXRlbS5jb250ZW50LCB0aGlzLnByb3BzLm5lZWRsZSwgMjAwKX1cbiAgICAgICAgPC9saT5cbiAgICAgIClcbiAgICB9XG5cbiAgICByZXR1cm4gPHVsPlxuICAgICAge2l0ZW1zfVxuICAgIDwvdWw+XG4gIH0sXG59KVxuXG4iLCJcbmltcG9ydCBTZWFyY2hCb2R5IGZyb20gJy4vc2VhcmNoLWJvZHknXG5pbXBvcnQge3RvUmVnfSBmcm9tICcuL3NlYXJjaC11dGlscydcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuY29uc3Qge1Byb3BUeXBlczogUFR9ID0gUmVhY3RcblxudmFyIFNlYXJjaFBvcHBlciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgcHJvcFR5cGVzOiB7XG4gICAgbWF0Y2hJdGVtczogUFQuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uU2VsZWN0OiBQVC5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25DbG9zZTogUFQuZnVuYy5pc1JlcXVpcmVkLFxuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuZWVkbGU6ICcnLFxuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMucmVmcy5pbnB1dC5nZXRET01Ob2RlKCkuZm9jdXMoKVxuICB9LFxuXG4gIG9uQ2hhbmdlOiBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBuZWVkbGUgPSBlLnRhcmdldC52YWx1ZVxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgbmVlZGxlOiBuZWVkbGUsXG4gICAgfSlcbiAgfSxcblxuICBvbktleURvd246IGZ1bmN0aW9uIChlKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuICAgIGlmIChlLmtleSA9PT0gJ0VudGVyJykge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICB0aGlzLnJlZnMubGlzdC5oYW5kbGVFbnRlcighIWUuYWx0S2V5KVxuICAgIH1cbiAgICBpZiAoZS5rZXkgPT09ICdBcnJvd1VwJykge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICB0aGlzLnJlZnMubGlzdC5oYW5kbGVHb1VwKClcbiAgICB9XG4gICAgaWYgKGUua2V5ID09PSAnQXJyb3dEb3duJykge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICB0aGlzLnJlZnMubGlzdC5oYW5kbGVHb0Rvd24oKVxuICAgIH1cbiAgICBpZiAoZS5rZXkgPT09ICdFc2NhcGUnKSB7XG4gICAgICB0aGlzLnByb3BzLm9uQ2xvc2UoKVxuICAgIH1cbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9J1NlYXJjaFBvcHBlcic+XG4gICAgICA8U2VhcmNoQm9keVxuICAgICAgICByZWY9XCJsaXN0XCJcbiAgICAgICAgb25TZWxlY3Q9e3RoaXMucHJvcHMub25TZWxlY3R9XG4gICAgICAgIG5lZWRsZT17dGhpcy5zdGF0ZS5uZWVkbGV9XG4gICAgICAgIGl0ZW1zPXt0aGlzLnByb3BzLm1hdGNoSXRlbXModG9SZWcodGhpcy5zdGF0ZS5uZWVkbGUpKX0vPlxuICAgICAgPGRpdiBjbGFzc05hbWU9J1NlYXJjaFBvcHBlcl9pbnB1dCc+XG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgIHJlZj1cImlucHV0XCJcbiAgICAgICAgICBhdXRvRm9jdXM9e3RydWV9XG4gICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUubmVlZGxlfVxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwic2VhcmNoXCJcbiAgICAgICAgICBvbktleURvd249e3RoaXMub25LZXlEb3dufVxuICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlfS8+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgfVxufSlcblxubW9kdWxlLmV4cG9ydHMgPSBTZWFyY2hQb3BwZXJcbiIsIlxuZXhwb3J0IHt0b1JlZywgaGlnaGxpZ2h0fVxuXG5mdW5jdGlvbiB0b1JlZyhuZWVkbGUpIHtcbiAgcmV0dXJuIG5ldyBSZWdFeHAobmVlZGxlXG4gICAgLnJlcGxhY2UoJy4nLCAnXFxcXC4nKVxuICAgIC5yZXBsYWNlKCcqJywgJy4qPycpLCAnZ2knKTtcbn1cblxuZnVuY3Rpb24gaGlnaGxpZ2h0KHRleHQsIG5lZWRsZSwgbWF4U2l6ZSkge1xuXHR2YXIgcnggPSB0b1JlZyhuZWVkbGUpXG5cbiAgdmFyIGl0ZW1zID0gW11cbiAgdmFyIGxhc3QgPSAwXG4gIHRleHQucmVwbGFjZShyeCwgKG1hdGNoZWQsIHBvcywgZnVsbCkgPT4ge1xuICAgIGl0ZW1zLnB1c2goZnVsbC5zbGljZShsYXN0LCBwb3MpKVxuICAgIGl0ZW1zLnB1c2goPHN0cm9uZz57bWF0Y2hlZH08L3N0cm9uZz4pXG4gICAgbGFzdCA9IHBvcyArIG1hdGNoZWQubGVuZ3RoXG4gIH0pXG4gIGl0ZW1zLnB1c2godGV4dC5zbGljZShsYXN0KSlcbiAgaWYgKHRleHQubGVuZ3RoID4gbWF4U2l6ZSkge1xuICAgIHZhciBsbiA9IDBcbiAgICBpZiAoaXRlbXNbMF0ubGVuZ3RoID4gbWF4U2l6ZS8yKSB7XG4gICAgICBpdGVtc1swXSA9IGl0ZW1zWzBdLnNsaWNlKC1tYXhTaXplLzIpXG4gICAgfVxuICAgIGxuID0gaXRlbXNbMF0ubGVuZ3RoXG4gICAgZm9yICh2YXIgaT0yOyBpPGl0ZW1zLmxlbmd0aDsgaSs9Mikge1xuICAgICAgaWYgKGxuICsgaXRlbXNbaV0ubGVuZ3RoID4gbWF4U2l6ZSkge1xuICAgICAgICBpdGVtc1tpXSA9IGl0ZW1zW2ldLnNsaWNlKG1heFNpemUgLSBsbilcbiAgICAgICAgcmV0dXJuIGl0ZW1zLnNsaWNlKDAsIGkrMSlcbiAgICAgIH1cbiAgICAgIGxuICs9IGl0ZW1zW2ldLmxlbmd0aFxuICAgIH1cbiAgfVxuICByZXR1cm4gaXRlbXNcbn1cblxuIiwiXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpXG4gICwgU3BsaXR0ZXIgPSByZXF1aXJlKCcuL3NwbGl0dGVyJylcbiAgLCBQVCA9IFJlYWN0LlByb3BUeXBlc1xuXG5mdW5jdGlvbiByKCl7XG4gIGZvciAodmFyIGEgPSAnJzsgYS5sZW5ndGggPCA1OyBhICs9ICdhYmNkZWZnJ1twYXJzZUludChNYXRoLnJhbmRvbSgpICogNyldKTtcbiAgcmV0dXJuIGFcbn1cblxuZnVuY3Rpb24gY2xvbmVTaGFsbG93KHMpIHtcbiAgdmFyIG8gPSB7fVxuICBmb3IgKHZhciBhIGluIHMpIHtcbiAgICBvW2FdID0gc1thXVxuICB9XG4gIHJldHVybiBvXG59XG5cbnZhciBTcGxpdE1hbmFnZXIgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIHByb3BUeXBlczoge1xuICAgIGNvbmZpZzogUFQub2JqZWN0LFxuICAgIGNvbXA6IFBULm9uZU9mVHlwZShbUFQub2JqZWN0LCBQVC5mdW5jXSksXG4gICAgZ2V0TmV3OiBQVC5mdW5jLFxuICAgIG9uUmVtb3ZlOiBQVC5mdW5jLFxuICAgIG9uQ2hhbmdlOiBQVC5mdW5jLFxuICAgIGNwcm9wczogUFQub2JqZWN0LFxuICB9LFxuXG4gIHN0YXRpY3M6IHtcbiAgICBzcGxpdDogZnVuY3Rpb24gKHBvcywgb3JpZW50LCBjb25maWcsIGdldE5ldykge1xuICAgICAgcG9zID0gcG9zLnNsaWNlKClcbiAgICAgIGlmIChjb25maWcubGVhZikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGxlYWY6IGZhbHNlLFxuICAgICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICBvcmllbnQsXG4gICAgICAgICAgICBmaXJzdDoge2xlYWY6IHRydWUsIHZhbHVlOiBjb25maWcudmFsdWV9LFxuICAgICAgICAgICAgc2Vjb25kOiB7bGVhZjogdHJ1ZSwgdmFsdWU6IGdldE5ldyhjb25maWcudmFsdWUpfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3QgbGFzdCA9IHBvcy5wb3AoKVxuICAgICAgY29uc3QgbGluZSA9IHBvcy5yZWR1Y2UoZnVuY3Rpb24gKGN2YWx1ZSwgaSkge1xuICAgICAgICByZXR1cm4gY3ZhbHVlW2ldLnZhbHVlID0gY2xvbmVTaGFsbG93KGN2YWx1ZVtpXS52YWx1ZSlcbiAgICAgIH0sIGNvbmZpZy52YWx1ZSlcbiAgICAgIGxpbmVbbGFzdF0gPSB7XG4gICAgICAgIGxlYWY6IGZhbHNlLFxuICAgICAgICByYXRpbzogLjUsXG4gICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgb3JpZW50LFxuICAgICAgICAgIGZpcnN0OiB7bGVhZjogdHJ1ZSwgdmFsdWU6IGxpbmVbbGFzdF0udmFsdWV9LFxuICAgICAgICAgIHNlY29uZDoge2xlYWY6IHRydWUsIHZhbHVlOiBnZXROZXcobGluZVtsYXN0XS52YWx1ZSl9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBjb25maWdcbiAgICB9LFxuXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiAocG9zLCBjb25maWcpIHtcbiAgICAgIHBvcyA9IHBvcy5zbGljZSgpXG4gICAgICBpZiAoY29uZmlnLmxlYWYpIHJldHVyblxuICAgICAgdmFyIHJlbW92ZWRcbiAgICAgIGlmIChwb3MubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJlbW92ZWQgPSBjb25maWcudmFsdWVbcG9zWzBdXS52YWx1ZVxuICAgICAgICBjb25maWcgPSBjb25maWcudmFsdWVbcG9zWzBdID09PSAnZmlyc3QnID8gJ3NlY29uZCcgOiAnZmlyc3QnXVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uZmlnID0gY2xvbmVTaGFsbG93KGNvbmZpZylcbiAgICAgICAgdmFyIGxhc3QgPSBwb3MucG9wKClcbiAgICAgICAgICAsIHNlYyA9IHBvcy5wb3AoKVxuICAgICAgICB2YXIgbGluZSA9IHBvcy5yZWR1Y2UoZnVuY3Rpb24gKGN2YWx1ZSwgaSkge1xuICAgICAgICAgIHJldHVybiBjdmFsdWVbaV0udmFsdWUgPSBjbG9uZVNoYWxsb3coY3ZhbHVlW2ldLnZhbHVlKVxuICAgICAgICB9LCBjb25maWcudmFsdWUpXG4gICAgICAgIHJlbW92ZWQgPSBsaW5lW3NlY10udmFsdWVbbGFzdF0udmFsdWVcbiAgICAgICAgbGluZVtzZWNdID0gbGluZVtzZWNdLnZhbHVlW2xhc3QgPT09ICdmaXJzdCcgPyAnc2Vjb25kJyA6ICdmaXJzdCddXG4gICAgICB9XG4gICAgICByZXR1cm4ge3JlbW92ZWQsIGNvbmZpZ31cbiAgICB9XG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGdldE5ldzogZnVuY3Rpb24gKCkge3JldHVybiByKCl9XG4gICAgfVxuICB9LFxuXG4gIGNoYW5nZVJhdGlvOiBmdW5jdGlvbiAocG9zLCByYXRpbywgZG9uZSkge1xuICAgIHZhciBjb25maWcgPSB0aGlzLnByb3BzLmNvbmZpZ1xuICAgIHZhciBsaW5lID0gcG9zLnJlZHVjZShmdW5jdGlvbiAoY29uZmlnLCBpKSB7XG4gICAgICByZXR1cm4gY29uZmlnW2ldLnZhbHVlID0gY2xvbmVTaGFsbG93KGNvbmZpZ1tpXS52YWx1ZSlcbiAgICB9LCBjb25maWcudmFsdWUpXG4gICAgbGluZS5yYXRpbyA9IHJhdGlvXG4gICAgdGhpcy5wcm9wcy5vbkNoYW5nZShjb25maWcpXG4gICAgZG9uZSgpXG4gIH0sXG5cbiAgc3BsaXQ6IGZ1bmN0aW9uIChwb3MsIG9yaWVudCkge1xuICAgIHZhciBjb25maWcgPSBTcGxpdE1hbmFnZXIuc3BsaXQocG9zLCBvcmllbnQsIHRoaXMucHJvcHMuY29uZmlnLCB0aGlzLnByb3BzLmdldE5ldylcbiAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKGNvbmZpZylcbiAgfSxcblxuICByZW1vdmU6IGZ1bmN0aW9uIChwb3MpIHtcbiAgICB2YXIgcmVzdWx0ID0gU3BsaXRNYW5hZ2VyLnJlbW92ZShwb3MsIHRoaXMucHJvcHMuY29uZmlnKVxuICAgIGlmICghcmVzdWx0KSByZXR1cm5cbiAgICB0aGlzLnByb3BzLm9uUmVtb3ZlKHJlc3VsdC5yZW1vdmVkKVxuICAgIHRoaXMucHJvcHMub25DaGFuZ2UocmVzdWx0LmNvbmZpZylcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY3Byb3BzID0gY2xvbmVTaGFsbG93KHRoaXMucHJvcHMuY3Byb3BzKVxuICAgIGNwcm9wcy5vblNwbGl0ID0gdGhpcy5zcGxpdFxuICAgIGNwcm9wcy5vblJlbW92ZSA9IHRoaXMucmVtb3ZlXG4gICAgY3Byb3BzLm9uQ2hhbmdlUmF0aW8gPSB0aGlzLmNoYW5nZVJhdGlvXG4gICAgcmV0dXJuIDxTcGxpdHRlclxuICAgICAgY29uZmlnPXt0aGlzLnByb3BzLmNvbmZpZ31cbiAgICAgIGNvbXA9e3RoaXMucHJvcHMuY29tcH1cbiAgICAgIG9uQ2hhbmdlUmF0aW89e3RoaXMuY2hhbmdlUmF0aW99XG4gICAgICBjcHJvcHM9e2Nwcm9wc30vPlxuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBTcGxpdE1hbmFnZXJcbiIsIlxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QvYWRkb25zJylcbiAgLCBjeCA9IFJlYWN0LmFkZG9ucy5jbGFzc1NldFxuICAsIFBUID0gUmVhY3QuUHJvcFR5cGVzXG5cbnZhciBTcGxpdHRlciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgcHJvcFR5cGVzOiB7XG4gICAgb25DaGFuZ2VSYXRpbzogUFQuZnVuYyxcbiAgICBjb25maWc6IFBULm9iamVjdCxcbiAgICBwb3M6IFBULm9iamVjdCxcbiAgICBjb21wOiBQVC5lbGVtZW50LFxuICAgIGNwcm9wczogUFQub2JqZWN0LFxuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7cmF0aW86IHRoaXMucHJvcHMuY29uZmlnLnZhbHVlLnJhdGlvIHx8IC41LCBtb3Zpbmc6IG51bGx9XG4gIH0sXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7cG9zOiBbXX1cbiAgfSxcbiAgX29uTW91c2VEb3duOiBmdW5jdGlvbiAoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIHRoaXMuc2V0U3RhdGUoe21vdmluZzogdHJ1ZX0pXG4gIH0sXG4gIF9tb3VzZU1vdmU6IGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyIGZ1bGwgPSB0aGlzLmdldERPTU5vZGUoKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgICAgLCBzcGFuXG4gICAgICAsIHBlcmNcbiAgICBpZiAodGhpcy5wcm9wcy5jb25maWcudmFsdWUub3JpZW50ID09PSAnaG9yaXonKSB7XG4gICAgICBzcGFuID0gKGZ1bGwucmlnaHQgLSBmdWxsLmxlZnQpXG4gICAgICBwZXJjID0gKGUuY2xpZW50WCAtIGZ1bGwubGVmdCkgLyBzcGFuXG4gICAgfSBlbHNlIHtcbiAgICAgIHNwYW4gPSAoZnVsbC5ib3R0b20gLSBmdWxsLnRvcClcbiAgICAgIHBlcmMgPSAoZS5jbGllbnRZIC0gZnVsbC50b3ApIC8gc3BhblxuICAgIH1cbiAgICBpZiAocGVyYyA8IDAgfHwgcGVyYyA+IDEpIHJldHVyblxuICAgIC8vIGlmIHlvdSBnZXQgd2l0aGluIHRlbiBwaXhlbHMsIHNuYXAuXG4gICAgdmFyIGRpc3QgPSAxMC9zcGFuXG4gICAgaWYgKE1hdGguYWJzKHBlcmMgLSAuMzMpIDwgZGlzdCkgcGVyYyA9IC4zM1xuICAgIGlmIChNYXRoLmFicyhwZXJjIC0gLjY3KSA8IGRpc3QpIHBlcmMgPSAuNjdcbiAgICBpZiAoTWF0aC5hYnMocGVyYyAtIC41KSA8IGRpc3QpIHBlcmMgPSAuNVxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7cmF0aW86IHBlcmN9KVxuICB9LFxuICBfbW91c2VVcDogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMucHJvcHMub25DaGFuZ2VSYXRpbyh0aGlzLnByb3BzLnBvcywgdGhpcy5zdGF0ZS5yYXRpbywgKCkgPT5cbiAgICAgIHRoaXMuc2V0U3RhdGUoe21vdmluZzogZmFsc2V9KSlcbiAgfSxcbiAgY29tcG9uZW50RGlkVXBkYXRlOiBmdW5jdGlvbiAocHJldlByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICB2YXIgZG9jID0gdGhpcy5nZXRET01Ob2RlKCkub3duZXJEb2N1bWVudFxuICAgIGlmIChwcmV2U3RhdGUubW92aW5nICYmICF0aGlzLnN0YXRlLm1vdmluZykge1xuICAgICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMuX21vdXNlTW92ZSlcbiAgICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5fbW91c2VVcClcbiAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUubW92aW5nICYmICFwcmV2U3RhdGUubW92aW5nKSB7XG4gICAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5fbW91c2VNb3ZlKVxuICAgICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLl9tb3VzZVVwKVxuICAgIH1cbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY29uZmlnID0gdGhpcy5wcm9wcy5jb25maWdcbiAgICAgICwgcG9zID0gdGhpcy5wcm9wcy5wb3MgfHwgW11cbiAgICAgICwgQ29tcCA9IHRoaXMucHJvcHMuY29tcFxuICAgIHZhciBjaGlsZHJlblxuICAgIGlmIChjb25maWcubGVhZikge1xuICAgICAgY2hpbGRyZW4gPSA8ZGl2IGNsYXNzTmFtZT0nU3BsaXR0ZXJfb25seScgc3R5bGU9e3tmbGV4OiAxfX0+XG4gICAgICAgIDxDb21wIHsuLi50aGlzLnByb3BzLmNwcm9wc31cbiAgICAgICAgICBrZXk9e2NvbmZpZy52YWx1ZS5jb25maWcuc3RvcmUudmlldy5pZH1cbiAgICAgICAgICBwb3M9e3Bvcy5jb25jYXQoWydmaXJzdCddKX1cbiAgICAgICAgICB2YWx1ZT17Y29uZmlnLnZhbHVlfS8+XG4gICAgICAgIDwvZGl2PlxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcmF0aW8gPSB0aGlzLnN0YXRlLm1vdmluZyA/IHRoaXMuc3RhdGUucmF0aW8gOiAoY29uZmlnLnZhbHVlLnJhdGlvIHx8IC41KVxuICAgICAgY2hpbGRyZW4gPSBbXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdTcGxpdHRlcl9maXJzdCcgc3R5bGU9e3tmbGV4OiByYXRpb319PlxuICAgICAgICAgIHshY29uZmlnLnZhbHVlLmZpcnN0LmxlYWYgP1xuICAgICAgICAgICAgPFNwbGl0dGVyIHsuLi50aGlzLnByb3BzfVxuICAgICAgICAgICAgICBwb3M9e3Bvcy5jb25jYXQoWydmaXJzdCddKX1cbiAgICAgICAgICAgICAgY29uZmlnPXtjb25maWcudmFsdWUuZmlyc3R9IC8+IDpcbiAgICAgICAgICAgIDxDb21wIHsuLi50aGlzLnByb3BzLmNwcm9wc31cbiAgICAgICAgICAgICAga2V5PXtjb25maWcudmFsdWUuZmlyc3QudmFsdWUuY29uZmlnLnN0b3JlLnZpZXcuaWR9XG4gICAgICAgICAgICAgIHBvcz17cG9zLmNvbmNhdChbJ2ZpcnN0J10pfVxuICAgICAgICAgICAgICB2YWx1ZT17Y29uZmlnLnZhbHVlLmZpcnN0LnZhbHVlfS8+fVxuICAgICAgICA8L2Rpdj4sXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdTcGxpdHRlcl9kaXYnIG9uTW91c2VEb3duPXt0aGlzLl9vbk1vdXNlRG93bn0vPixcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J1NwbGl0dGVyX3NlY29uZCcgc3R5bGU9e3tmbGV4OiAxIC0gcmF0aW99fT5cbiAgICAgICAgICB7IWNvbmZpZy52YWx1ZS5zZWNvbmQubGVhZiA/XG4gICAgICAgICAgICA8U3BsaXR0ZXIgey4uLnRoaXMucHJvcHN9XG4gICAgICAgICAgICAgIHBvcz17cG9zLmNvbmNhdChbJ3NlY29uZCddKX1cbiAgICAgICAgICAgICAgY29uZmlnPXtjb25maWcudmFsdWUuc2Vjb25kfS8+IDpcbiAgICAgICAgICAgIDxDb21wIHsuLi50aGlzLnByb3BzLmNwcm9wc31cbiAgICAgICAgICAgICAga2V5PXtjb25maWcudmFsdWUuc2Vjb25kLnZhbHVlLmNvbmZpZy5zdG9yZS52aWV3LmlkfVxuICAgICAgICAgICAgICBwb3M9e3Bvcy5jb25jYXQoWydzZWNvbmQnXSl9XG4gICAgICAgICAgICAgIHZhbHVlPXtjb25maWcudmFsdWUuc2Vjb25kLnZhbHVlfS8+fVxuICAgICAgICA8L2Rpdj5cbiAgICAgIF1cbiAgICB9XG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXtjeCh7XG4gICAgICAnU3BsaXR0ZXInOiB0cnVlLFxuICAgICAgJ1NwbGl0dGVyLW1vdmluZyc6IHRoaXMuc3RhdGUubW92aW5nLFxuICAgIH0pICsgJyBTcGxpdHRlci0nICsgY29uZmlnLnZhbHVlLm9yaWVudH0+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9kaXY+XG4gIH1cbn0pXG5cbm1vZHVsZS5leHBvcnRzID0gU3BsaXR0ZXJcbiIsIlxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5leHBvcnQgZGVmYXVsdCBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIHByb3BUeXBlczoge1xuICAgIHR5cGVzOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBvcGVuOiBmYWxzZSxcbiAgICB9XG4gIH0sXG5cbiAgX3RvZ2dsZU9wZW46IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtvcGVuOiAhdGhpcy5zdGF0ZS5vcGVufSlcbiAgfSxcblxuICBfb25TZWxlY3Q6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtvcGVuOiBmYWxzZX0pXG4gICAgdGhpcy5wcm9wcy5vbkNoYW5nZShrZXkpXG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh0aGlzLnByb3BzLnR5cGVzKVxuICAgICAgLCBjdXJyZW50ID0gdGhpcy5wcm9wcy50eXBlXG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPSdUeXBlU3dpdGNoZXInPlxuICAgICAgPGRpdlxuICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuX3RvZ2dsZU9wZW59XG4gICAgICAgICAgY2xhc3NOYW1lPXsnVHlwZVN3aXRjaGVyX2ljb24gVHlwZVN3aXRjaGVyX2ljb24tJyArIGN1cnJlbnR9PlxuICAgICAgICB7Y3VycmVudH1cbiAgICAgIDwvZGl2PlxuICAgICAge3RoaXMuc3RhdGUub3BlbiAmJlxuICAgICAgICA8dWwgY2xhc3NOYW1lPSdUeXBlU3dpdGNoZXJfZHJvcGRvd24nPlxuICAgICAgICAgIHtrZXlzLm1hcChrZXkgPT4ga2V5ICE9PSBjdXJyZW50ICYmXG4gICAgICAgICAgICA8bGkgY2xhc3NOYW1lPXsnVHlwZVN3aXRjaGVyX2l0ZW0gVHlwZVN3aXRjaGVyX2l0ZW0tJyArIGtleX1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLl9vblNlbGVjdC5iaW5kKG51bGwsIGtleSl9XG4gICAgICAgICAgICAgICAga2V5PXtrZXl9PlxuICAgICAgICAgICAgICB7a2V5fVxuICAgICAgICAgICAgPC9saT4pfVxuICAgICAgICA8L3VsPn1cbiAgICA8L2Rpdj5cbiAgfVxufSlcblxuIiwiXG5tb2R1bGUuZXhwb3J0cyA9IGZpbmROZXh0QWN0aXZlSWRcblxuZnVuY3Rpb24gZmluZE5leHRBY3RpdmVJZCh3aW5kb3dzLCBjdXJyZW50QWN0aXZlVmlldywgZGlyZWN0aW9uKSB7XG4gIHZhciBib3hlcyA9IHdpbmRvd0JveGVzKHdpbmRvd3MsIHt4OiAwLCB5OiAwLCB3OiAxMDAwLCBoOiAxMDAwfSlcbiAgdmFyIGJveE1hcCA9IHt9O2JveGVzLmZvckVhY2goYm94ID0+IGJveE1hcFtib3guaWRdID0gYm94LmJveClcbiAgcmV0dXJuIGdvKGRpcmVjdGlvbiwgY3VycmVudEFjdGl2ZVZpZXcsIGJveE1hcClcbn1cblxuZnVuY3Rpb24gd2luZG93Qm94ZXMod2luZG93cywgY29udGFpbmVyKSB7XG4gIGlmICh3aW5kb3dzLmxlYWYpIHtcbiAgICByZXR1cm4gW3tib3g6IGNvbnRhaW5lciwgaWQ6IHdpbmRvd3MudmFsdWUuY29uZmlnLnN0b3JlLnZpZXcuaWR9XVxuICB9XG4gIHZhciBzcGxpdCA9IHNwbGl0Qm94KGNvbnRhaW5lciwgd2luZG93cy52YWx1ZS5vcmllbnQsIHdpbmRvd3MudmFsdWUucmF0aW8gfHwgLjUpXG4gIHJldHVybiB3aW5kb3dCb3hlcyh3aW5kb3dzLnZhbHVlLmZpcnN0LCBzcGxpdC5maXJzdClcbiAgICAuY29uY2F0KHdpbmRvd0JveGVzKHdpbmRvd3MudmFsdWUuc2Vjb25kLCBzcGxpdC5zZWNvbmQpKVxufVxuXG5mdW5jdGlvbiBzcGxpdEJveChib3gsIG9yaWVudCwgcmF0aW8pIHtcbiAgdmFyIHcgPSBib3gud1xuICAgICwgaCA9IGJveC5oXG4gIGlmIChvcmllbnQgPT09ICdob3JpeicpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZmlyc3Q6IHtcbiAgICAgICAgeDogYm94LngsXG4gICAgICAgIHk6IGJveC55LFxuICAgICAgICB3OiB3ICogcmF0aW8sXG4gICAgICAgIGg6IGJveC5oLFxuICAgICAgfSxcbiAgICAgIHNlY29uZDoge1xuICAgICAgICB4OiBib3gueCArIHcqcmF0aW8sXG4gICAgICAgIHk6IGJveC55LFxuICAgICAgICB3OiB3ICogKDEgLSByYXRpbyksXG4gICAgICAgIGg6IGJveC5oLFxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ge1xuICAgICAgZmlyc3Q6IHtcbiAgICAgICAgeDogYm94LngsXG4gICAgICAgIHk6IGJveC55LFxuICAgICAgICBoOiBoICogcmF0aW8sXG4gICAgICAgIHc6IGJveC53LFxuICAgICAgfSxcbiAgICAgIHNlY29uZDoge1xuICAgICAgICB5OiBib3gueSArIGgqcmF0aW8sXG4gICAgICAgIHg6IGJveC54LFxuICAgICAgICBoOiBoICogKDEgLSByYXRpbyksXG4gICAgICAgIHc6IGJveC53LFxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnbyhkaXIsIGlkLCBib3hNYXApIHtcbiAgdmFyIHgwID0gKGRpciA9PT0gJ3VwJyB8fCBkaXIgPT09ICdkb3duJykgPyAneScgOiAneCdcbiAgICAsIHgxID0geDAgPT09ICd4JyA/ICd5JyA6ICd4J1xuICAgICwgZDAgPSB7eDogJ3cnLCB5OiAnaCd9W3gwXVxuICAgICwgZDEgPSB7eDogJ3cnLCB5OiAnaCd9W3gxXVxuICAgICwgZHIgPSAoZGlyID09PSAnZG93bicgfHwgZGlyID09PSAncmlnaHQnKVxuXG4gIHZhciBib3ggPSBib3hNYXBbaWRdXG4gICAgLCBwb3MgPSB7fVxuXG4gIHBvc1t4MF0gPSBib3hbeDBdICsgKGRyID8gYm94W2QwXSA6IDApXG4gIHBvc1t4MV0gPSBib3hbeDFdICsgYm94W2QxXSAvIDJcblxuICBmb3IgKHZhciBvaWQgaW4gYm94TWFwKSB7XG4gICAgaWYgKG9pZCA9PSBpZCkgY29udGludWVcbiAgICB2YXIgb2JveCA9IGJveE1hcFtvaWRdXG4gICAgaWYgKHBvc1t4MF0gPT09IG9ib3hbeDBdICsgKGRyID8gMCA6IG9ib3hbZDBdKSAmJlxuICAgICAgICBvYm94W3gxXSA8IHBvc1t4MV0gJiYgcG9zW3gxXSA8PSBvYm94W3gxXSArIG9ib3hbZDFdKVxuICAgICAgcmV0dXJuICtvaWRcbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cbiIsIi8qKlxuICogQXV0b21hdGljYWxseSByZWdpc3RlciBhbmQgZGVyZWdpc3RlciBrZXlzIGZvciBhIGNvbXBvbmVudC5cbiAqL1xuXG4vKipcbiAqIEV4YW1wbGUgdXNhZ2VcbiAqXG4gKiAgdmFyIE15Q29tcG9uZW50ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICogICAgICBtaXhpbnM6IFtLZXlzTWl4aW5dLFxuICpcbiAqICAgICAgc3RhdGljczoge1xuICogICAgICAgICAga2V5czogZnVuY3Rpb24gKCkgeyAvLyB0aGlzIGlzIHRoZSBjb21wb25lbnRcbiAqICAgICAgICAgICAgICByZXR1cm4ge1xuICogICAgICAgICAgICAgICAgICAnayc6IHRoaXMuaGlyZUtvYWxhLFxuICogICAgICAgICAgICAgICAgICAncSc6IHRoaXMub25RdWl0LFxuICogICAgICAgICAgICAgIH1cbiAqICAgICAgICAgIH0sXG4gKiAgICAgIH0sXG4gKiAgfSlcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgX3JlZ2lzdGVyS2V5czogZnVuY3Rpb24gKGtleXMsIGNvbmZpZykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkga2V5cyA9IHRoaXMucHJvcHMua2V5c1xuICAgIGlmICghY29uZmlnICYmIHRoaXMuY29uc3RydWN0b3Iua2V5cykge1xuICAgICAgY29uZmlnID0gdGhpcy5jb25zdHJ1Y3Rvci5rZXlzLmNhbGwodGhpcylcbiAgICB9XG4gICAgaWYgKCFrZXlzIHx8ICFjb25maWcpIHsgcmV0dXJuIH1cbiAgICB0aGlzLl9rZXlzX2lkID0ga2V5cy5hZGQoY29uZmlnKVxuICB9LFxuXG4gIF91bnJlZ2lzdGVyS2V5czogZnVuY3Rpb24gKGtpZCkge1xuICAgIGlmICghdGhpcy5wcm9wcy5rZXlzIHx8ICFraWQpIHsgcmV0dXJuIH1cbiAgICB0aGlzLnByb3BzLmtleXMucmVtb3ZlKGtpZClcbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX3JlZ2lzdGVyS2V5cygpXG4gIH0sXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50OiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fdW5yZWdpc3RlcktleXModGhpcy5fa2V5c19pZClcbiAgICBkZWxldGUgdGhpcy5fa2V5c19pZFxuICB9LFxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBmdW5jdGlvbiAobmV4dFByb3BzKSB7XG4gICAgaWYgKG5leHRQcm9wcy5rZXlzICE9PSB0aGlzLnByb3BzLmtleXMpIHtcbiAgICAgIHRoaXMuX3VucmVnaXN0ZXJLZXlzKHRoaXMuX2tleXNfaWQpXG4gICAgICBkZWxldGUgdGhpcy5fa2V5c19pZFxuICAgICAgdGhpcy5fcmVnaXN0ZXJLZXlzKG5leHRQcm9wcy5rZXlzKVxuICAgIH1cbiAgfVxufVxuXG4iLCJcbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0JylcbiAgLCBQVCA9IFJlYWN0LlByb3BUeXBlc1xuXG52YXIgTW9kYWwgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIHByb3BUeXBlczoge1xuICAgIHRpdGxlOiBQVC5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBvbkNsb3NlOiBQVC5mdW5jLmlzUmVxdWlyZWQsXG4gICAgaW5pdGlhbFN0YXRlOiBQVC5vYmplY3QsXG4gICAgYnV0dG9uczogUFQub2JqZWN0LFxuICAgIHJlbmRlcjogUFQuZnVuYyxcbiAgfSxcbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuaW5pdGlhbFN0YXRlXG4gIH0sXG4gIG9uQ2xvc2U6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnByb3BzLm9uQ2xvc2UobnVsbCwgdGhpcy5zdGF0ZSlcbiAgfSxcbiAgb25DYW5jZWw6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnByb3BzLm9uQ2xvc2UobmV3IEVycm9yKCdNb2RhbCBjYW5jZWxsZWQnKSlcbiAgfSxcblxuICBzZXQ6IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgIHZhciB1cCA9IHt9XG4gICAgdXBbbmFtZV0gPSB2YWx1ZVxuICAgIHRoaXMuc2V0U3RhdGUodXApXG4gIH0sXG4gIHNldEV2dDogZnVuY3Rpb24gKG5hbWUsIGUpIHtcbiAgICB2YXIgdXAgPSB7fVxuICAgIHVwW25hbWVdID0gZS50YXJnZXQudmFsdWVcbiAgICB0aGlzLnNldFN0YXRlKHVwKVxuICB9LFxuXG4gIF9vbkNoYW5nZUV2dDogZnVuY3Rpb24gKG5hbWUsIGUpIHtcbiAgICB2YXIgdXAgPSB7fVxuICAgIHVwW25hbWVdID0gZS50YXJnZXQudmFsdWVcbiAgICB0aGlzLnNldFN0YXRlKHVwKVxuICB9LFxuICBfb25DaGFuZ2U6IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgIHZhciB1cCA9IHt9XG4gICAgdXBbbmFtZV0gPSB2YWx1ZVxuICAgIHRoaXMuc2V0U3RhdGUodXApXG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IHN0eWxlXG4gICAgaWYgKHRoaXMucHJvcHMud2lkdGgpIHtcbiAgICAgIHN0eWxlID0ge1xuICAgICAgICB3aWR0aDogdGhpcy5wcm9wcy53aWR0aCArICdweCcsXG4gICAgICAgIG1hcmdpbkxlZnQ6IC10aGlzLnByb3BzLndpZHRoLzIgKyAncHgnXG4gICAgICB9XG4gICAgfVxuICAgIGxldCBzZXQgPSAobmFtZSwgZXZ0KSA9PiB7XG4gICAgICBpZiAoZXZ0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldEV2dC5iaW5kKG51bGwsIG5hbWUpXG4gICAgICB9XG4gICAgICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiBuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldC5iaW5kKG51bGwsIG5hbWUpO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXRTdGF0ZShuYW1lKVxuICAgIH1cbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9J01vZGFsLWNvbnRhaW5lcic+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT0nTW9kYWxfYmFjaycgb25DbGljaz17dGhpcy5vbkNhbmNlbH0vPlxuICAgICAgPGRpdiBjbGFzc05hbWU9J01vZGFsX3BvcHVwJyBzdHlsZT17c3R5bGV9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nTW9kYWxfdGl0bGUnPlxuICAgICAgICAgIHt0aGlzLnByb3BzLnRpdGxlfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J01vZGFsX2Nsb3NlJyBvbkNsaWNrPXt0aGlzLnByb3BzLm9uQ2xvc2V9PiZ0aW1lczs8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J01vZGFsX2JvZHknPlxuICAgICAgICAgIHt0aGlzLnByb3BzLnJlbmRlckJvZHkuY2FsbChcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICB0aGlzLnN0YXRlLFxuICAgICAgICAgICAgc2V0LFxuICAgICAgICAgICAgdGhpcy5vbkNsb3NlLFxuICAgICAgICAgICAgdGhpcy5vbkNhbmNlbFxuICAgICAgICAgICl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICB7dGhpcy5wcm9wcy5idXR0b25zID9cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nTW9kYWxfYnV0dG9ucyc+XG4gICAgICAgICAgICB7T2JqZWN0LmtleXModGhpcy5wcm9wcy5idXR0b25zKS5tYXAobmFtZSA9PiBcbiAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLnByb3BzLmJ1dHRvbnNbbmFtZV0uYmluZCh0aGlzKX0+XG4gICAgICAgICAgICAgICAge25hbWV9XG4gICAgICAgICAgICAgIDwvYnV0dG9uPil9XG4gICAgICAgICAgPC9kaXY+IDogbnVsbH1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICB9XG59KVxuXG5Nb2RhbC5zaG93ID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICB2YXIgcGFyZW50ID0gY29uZmlnLnBhcmVudCB8fCBkb2N1bWVudFxuICAgICwgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gIHBhcmVudC5ib2R5LmFwcGVuZENoaWxkKG5vZGUpXG5cbiAgdmFyIG9uQ2xvc2UgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpXG4gICAgY29uZmlnLmRvbmUuYXBwbHkobnVsbCwgYXJndW1lbnRzKVxuICB9XG5cbiAgUmVhY3QucmVuZGVyKFxuICAgIDxNb2RhbFxuICAgICAgaW5pdGlhbFN0YXRlPXtjb25maWcuaW5pdGlhbFN0YXRlIHx8IHt9fVxuICAgICAgdGl0bGU9e2NvbmZpZy50aXRsZSB8fCAnTW9kYWwnfVxuICAgICAgb25DbG9zZT17b25DbG9zZX1cbiAgICAgIHdpZHRoPXtjb25maWcud2lkdGh9XG4gICAgICBidXR0b25zPXtjb25maWcuYnV0dG9uc31cbiAgICAgIHJlbmRlckJvZHk9e2NvbmZpZy5yZW5kZXJCb2R5IHx8IGNvbmZpZy5ib2R5fSAvPiwgbm9kZSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNb2RhbFxuXG4iLCJcbm1vZHVsZS5leHBvcnRzID0gdXVpZFxuXG52YXIgQ0hBUlMgPSAnMDEyMzQ1Njc4OWFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6J1xuZnVuY3Rpb24gdXVpZChsbikge1xuICBsbiA9IGxuIHx8IDMyXG4gIHZhciBpZCA9ICcnXG4gIGZvciAodmFyIGk9MDsgaTxsbjsgaSsrKSB7XG4gICAgaWQgKz0gQ0hBUlNbcGFyc2VJbnQoTWF0aC5yYW5kb20oKSAqIENIQVJTLmxlbmd0aCldXG4gIH1cbiAgcmV0dXJuIGlkXG59XG5cbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxuXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gdHJ1ZTtcbiAgICB2YXIgY3VycmVudFF1ZXVlO1xuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB2YXIgaSA9IC0xO1xuICAgICAgICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgICAgICAgICBjdXJyZW50UXVldWVbaV0oKTtcbiAgICAgICAgfVxuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG59XG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHF1ZXVlLnB1c2goZnVuKTtcbiAgICBpZiAoIWRyYWluaW5nKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZHJhaW5RdWV1ZSwgMCk7XG4gICAgfVxufTtcblxucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbi8vIFRPRE8oc2h0eWxtYW4pXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCJmdW5jdGlvbiBjbGFzc05hbWVzKCkge1xuXHR2YXIgY2xhc3NlcyA9ICcnO1xuXHR2YXIgYXJnO1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0YXJnID0gYXJndW1lbnRzW2ldO1xuXHRcdGlmICghYXJnKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRpZiAoJ3N0cmluZycgPT09IHR5cGVvZiBhcmcgfHwgJ251bWJlcicgPT09IHR5cGVvZiBhcmcpIHtcblx0XHRcdGNsYXNzZXMgKz0gJyAnICsgYXJnO1xuXHRcdH0gZWxzZSBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZykgPT09ICdbb2JqZWN0IEFycmF5XScpIHtcblx0XHRcdGNsYXNzZXMgKz0gJyAnICsgY2xhc3NOYW1lcy5hcHBseShudWxsLCBhcmcpO1xuXHRcdH0gZWxzZSBpZiAoJ29iamVjdCcgPT09IHR5cGVvZiBhcmcpIHtcblx0XHRcdGZvciAodmFyIGtleSBpbiBhcmcpIHtcblx0XHRcdFx0aWYgKCFhcmcuaGFzT3duUHJvcGVydHkoa2V5KSB8fCAhYXJnW2tleV0pIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjbGFzc2VzICs9ICcgJyArIGtleTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0cmV0dXJuIGNsYXNzZXMuc3Vic3RyKDEpO1xufVxuXG4vLyBzYWZlbHkgZXhwb3J0IGNsYXNzTmFtZXMgaW4gY2FzZSB0aGUgc2NyaXB0IGlzIGluY2x1ZGVkIGRpcmVjdGx5IG9uIGEgcGFnZVxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdG1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcbn1cbiIsIlxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKVxuICAsIHV1aWQgPSByZXF1aXJlKCcuLi9saWIvdXVpZCcpXG5cbiAgLCBfb2JqcyA9IHt9XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBtaW1lOiAnanMvZG9tJyxcblxuICBmb3JtYXQ6IGZ1bmN0aW9uIChvYmosIHdpbmRvdykge1xuICAgIGlmIChvYmogaW5zdGFuY2VvZiB3aW5kb3cuSFRNTEVsZW1lbnQpIHtcbiAgICAgIHZhciBpZCA9IHV1aWQoKVxuICAgICAgX29ianNbaWRdID0gb2JqXG4gICAgICByZXR1cm4gaWRcbiAgICB9XG4gIH0sXG5cbiAgZGlzcGxheTogZnVuY3Rpb24gKGlkKSB7XG4gICAgaWYgKCFfb2Jqc1tpZF0pIHJldHVybiA8ZW0+UmUtZXZhbHVhdGUgdGhpcyBibG9jayB0byBzZWUgdGhlIERPTSBlbGVtZW50PC9lbT5cbiAgICByZXR1cm4gPERvbVZpZXdlciB2YWx1ZT17X29ianNbaWRdfS8+XG4gIH0sXG59XG5cbmZ1bmN0aW9uIGNsZWFuKG5vZGUpIHtcbiAgd2hpbGUgKG5vZGUubGFzdENoaWxkKSBub2RlLnJlbW92ZUNoaWxkKG5vZGUubGFzdENoaWxkKVxufVxuXG52YXIgRG9tVmlld2VyID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuaW5qZWN0KClcbiAgfSxcbiAgY29tcG9uZW50RGlkVXBkYXRlOiBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgdGhpcy5pbmplY3QoKVxuICB9LFxuICBpbmplY3Q6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMuZ2V0RE9NTm9kZSgpXG4gICAgY2xlYW4obm9kZSlcbiAgICAvL2lmICh0aGlzLnByb3BzLnZhbHVlLnBhcmVudE5vZGUpIHtcbiAgICAgIC8vbm9kZS5pbm5lckhUTUwgPSAnPGVtPkRPTSBOb2RlIGFscmVhZHkgdXNlZCBlbHNld2hlcmU8L2VtPidcbiAgICAvL30gZWxzZSB7XG4gICAgICBub2RlLmFwcGVuZENoaWxkKHRoaXMucHJvcHMudmFsdWUpXG4gICAgLy99XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiA8ZGl2Lz5cbiAgfSxcbn0pXG4iLCJcbm1vZHVsZS5leHBvcnRzID0gZ2V0QWxsUHJvcGVydGllc1xuXG5mdW5jdGlvbiBnZXRBbGxQcm9wZXJ0aWVzKG9iail7XG4gIHZhciBhbGxQcm9wcyA9IFtdXG4gICAgLCBjdXJyID0gb2JqXG5cbiAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgIGZvciAodmFyIGk9MDsgaTxvYmoubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFsbFByb3BzLnB1c2goaSlcbiAgICB9XG4gICAgYWxsUHJvcHMucHVzaCgnbGVuZ3RoJylcbiAgICByZXR1cm4gYWxsUHJvcHNcbiAgfVxuXG4gIGRvIHtcbiAgICB2YXIgcHJvcHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhjdXJyKVxuICAgIHByb3BzLmZvckVhY2goZnVuY3Rpb24ocHJvcCl7XG4gICAgICBpZiAoYWxsUHJvcHMuaW5kZXhPZihwcm9wKSA9PT0gLTEpXG4gICAgICAgIGFsbFByb3BzLnB1c2gocHJvcClcbiAgICB9KVxuICB9IHdoaWxlKChjdXJyID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGN1cnIpKSAmJlxuICAgICAgICAgIE9iamVjdC5nZXRQcm90b3R5cGVPZihjdXJyKSlcblxuICByZXR1cm4gYWxsUHJvcHNcbn1cbiIsIlxubW9kdWxlLmV4cG9ydHMgPSBtYWtlR29yaWxsYVxuXG5mdW5jdGlvbiBtYWtlR29yaWxsYShkYXRhLCBuZXh0aWQpIHtcbiAgdmFyIHJpY2ggPSB7fVxuICBuZXh0aWQgPSBuZXh0aWQgfHwgMFxuICBpZiAoZGF0YS50eXBlID09PSAndmVnYScpIHtcbiAgICB2YXIgaWQgPSAobmV4dGlkKyspXG4gICAgcmljaFtpZF0gPSBkYXRhXG4gICAgcmV0dXJuIFsnPHNwYW4gY2xhc3M9XCJyaWNoLScgKyBpZCArICdcIj48L3NwYW4+JywgbmV4dGlkLCByaWNoXVxuICB9XG4gIGlmIChkYXRhLnR5cGUgPT09ICdodG1sJykge1xuICAgIHJldHVybiBbZGF0YS5jb250ZW50LCBuZXh0aWQsIHt9XVxuICB9XG4gIGlmIChkYXRhLnR5cGUgIT09ICdsaXN0LWxpa2UnKSB7XG4gICAgcmV0dXJuIFtlc2NhcGUoZGF0YS52YWx1ZSksIG5leHRpZCwge31dXG4gIH1cblxuICB2YXIgaXRlbXMgPSBkYXRhLml0ZW1zLm1hcCgoaXRlbSkgPT4ge1xuICAgIHZhciBkYXRhID0gbWFrZUdvcmlsbGEoaXRlbSwgbmV4dGlkKVxuICAgIG5leHRpZCA9IGRhdGFbMV1cbiAgICBmb3IgKHZhciBpZCBpbiBkYXRhWzJdKSB7XG4gICAgICByaWNoW2lkXSA9IGRhdGFbMl1baWRdXG4gICAgfVxuICAgIHJldHVybiBkYXRhWzBdXG4gIH0pXG4gIHZhciBodG1sID0gZGF0YS5vcGVuICsgaXRlbXMuam9pbihkYXRhLnNlcGFyYXRvcikgKyBkYXRhLmNsb3NlXG4gIHJldHVybiBbaHRtbCwgbmV4dGlkLCByaWNoXVxufVxuXG4iLCJcbnZhciBnZXRBbGxQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi9nZXQtYWxsLXByb3BlcnRpZXMnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQ29tcGxleFxuXG5mdW5jdGlvbiBpc0NvbXBsZXgodmFsdWUsIHBhdGgpIHtcbiAgaWYgKHBhdGguaW5kZXhPZih2YWx1ZSkgIT09IC0xKSByZXR1cm4gdHJ1ZVxuICB2YXIgbnBhdGggPSBwYXRoLmNvbmNhdChbdmFsdWVdKVxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWUuc29tZShzdWIgPT4gaXNDb21wbGV4KHN1YiwgbnBhdGgpKVxuICB9XG5cbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiB2YWx1ZSkgcmV0dXJuIGZhbHNlXG4gIGlmICgnb2JqZWN0JyA9PT0gdHlwZW9mIHZhbHVlICYmIHZhbHVlKSB7XG4gICAgaWYgKG51bGwgIT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWx1ZSkgJiZcbiAgICAgICAgJ29iamVjdCcgPT09IHR5cGVvZiBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpICYmXG4gICAgICAgIE9iamVjdC5nZXRQcm90b3R5cGVPZihPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpKSkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgcmV0dXJuIGdldEFsbFByb3BlcnRpZXModmFsdWUpLnNvbWUoa2V5ID0+IGlzQ29tcGxleCh2YWx1ZVtrZXldLCBucGF0aCkpXG4gIH1cblxuICByZXR1cm4gZmFsc2Vcbn1cblxuIiwiXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpXG4gICwgaXNDb21wbGV4ID0gcmVxdWlyZSgnLi9pcy1jb21wbGV4JylcbiAgLCBnZXRBbGxQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi9nZXQtYWxsLXByb3BlcnRpZXMnKVxuICAsIHV1aWQgPSByZXF1aXJlKCcuLi9saWIvdXVpZCcpXG5cbnZhciBfb2JqcyA9IHt9XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBtaW1lOiAnanMvb2JqJyxcblxuICBmb3JtYXQ6IGZ1bmN0aW9uIChvYmopIHtcbiAgICBpZiAoaXNDb21wbGV4KG9iaiwgW10sIHdpbmRvdykpIHtcbiAgICAgIHZhciBpZCA9IHV1aWQoKVxuICAgICAgX29ianNbaWRdID0gb2JqXG4gICAgICByZXR1cm4gaWRcbiAgICB9XG4gIH0sXG5cbiAgZGlzcGxheTogZnVuY3Rpb24gKGlkKSB7XG4gICAgaWYgKCFfb2Jqc1tpZF0pIHJldHVybiBmYWxzZVxuICAgIHJldHVybiA8T2JqVmlld2VyIHZhbHVlPXtfb2Jqc1tpZF19Lz5cbiAgfSxcbn1cblxuZnVuY3Rpb24gdmlld1ZhbHVlKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSAmJiAnb2JqZWN0JyA9PT0gdHlwZW9mIHZhbHVlKSByZXR1cm4gT2JqVmlld2VyKHt2YWx1ZTogdmFsdWV9KVxuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZSwgbnVsbCwgMikgfHwgdmFsdWUgKyAnJ1xuICB9IGNhdGNoIChlKSB7IH1cbiAgdHJ5IHtcbiAgICByZXR1cm4gdmFsdWUgKyAnJ1xuICB9IGNhdGNoIChlKSB7IH1cbiAgcmV0dXJuICdVbmRpc3BsYXlhYmxlJ1xufVxuXG5mdW5jdGlvbiBvYmpOYW1lKHZhbCkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWwpID8gJ0FycmF5JyA6ICh2YWwuY29uc3RydWN0b3IgPyB2YWwuY29uc3RydWN0b3IubmFtZSA6ICdPYmplY3QnKVxufVxuXG52YXIgT2JqVmlld2VyID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb3BlbjogZmFsc2VcbiAgICB9XG4gIH0sXG4gIF9vblRvZ2dsZTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe29wZW46ICF0aGlzLnN0YXRlLm9wZW59KVxuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsID0gdGhpcy5wcm9wcy52YWx1ZVxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT0nT2JqVmlld2VyJz5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPSdPYmpWaWV3ZXJfaGVhZCcgb25DbGljaz17dGhpcy5fb25Ub2dnbGV9PlxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9J09ialZpZXdlcl9uYW1lJz57b2JqTmFtZSh2YWwpfTwvc3Bhbj5cbiAgICAgICAgeyF0aGlzLnN0YXRlLm9wZW4gJiYgc3VtbWFyeSh2YWwpfVxuICAgICAgPC9kaXY+XG4gICAgICB7dGhpcy5zdGF0ZS5vcGVuICYmXG4gICAgICAgIDx0YWJsZSBjbGFzc05hbWU9J09ialZpZXdlcl9wcm9wcyc+XG4gICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAge2dldEFsbFByb3BlcnRpZXModmFsKS5zb3J0KCkubWFwKG5hbWUgPT5cbiAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT0nT2JqVmlld2VyX3Byb3AnPlxuICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9J09ialZpZXdlcl9hdHRyJz57bmFtZX08L3RkPlxuICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9J09ialZpZXdlcl92YWwnPlxuICAgICAgICAgICAgICAgICAge3ZpZXdWYWx1ZSh2YWxbbmFtZV0pfVxuICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgIDwvdHI+KX1cbiAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICA8L3RhYmxlPn1cbiAgICA8L2Rpdj5cbiAgfSxcbn0pXG5cbmZ1bmN0aW9uIHN1bW1hcnkob2JqKSB7XG4gIHZhciBuYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iailcbiAgcmV0dXJuIDxzcGFuIGNsYXNzTmFtZT0nT2JqVmlld2VyX3NtYWxscHJvcHMnPlxuICAgIHsnIHsgJ31cbiAgICB7bmFtZXMuc2xpY2UoMCwgNSkubWFwKG5hbWUgPT4gbmFtZSArICc6ICcgKyBzbWFsbChvYmpbbmFtZV0pKS5qb2luKCcsICcpfVxuICAgIHtuYW1lcy5sZW5ndGggPiA1ICYmICcuLi4nfVxuICAgIHsnIH0nfVxuICA8L3NwYW4+XG59XG5cbmZ1bmN0aW9uIHNtYWxsKHZhbCkge1xuICBpZiAoJ251bWJlcicgPT09IHR5cGVvZiB2YWwpIHJldHVybiAnJyArIHZhbFxuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIHZhbClcbiAgICByZXR1cm4gKHZhbC5uYW1lIHx8ICdmbicpICsgJygpey4uLn0nXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICB2YXIgdGV4dCA9IHZhbC5tYXAoZSA9PiBlICsgJycpLmpvaW4oJywgJylcbiAgICBpZiAodGV4dC5sZW5ndGggPCAyMCkgcmV0dXJuICdbJyArIHRleHQgKyAnXSdcbiAgICByZXR1cm4gJ1suLl0nXG4gIH1cbiAgaWYgKCF2YWwpIHJldHVybiB2YWwgKyAnJ1xuICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiB2YWwpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsLnNsaWNlKDAsIDIwKSArICh2YWwubGVuZ3RoID4gMjAgPyAnLi4uJyA6ICcnKSlcbiAgfVxuICBpZiAoJ29iamVjdCcgPT09IHR5cGVvZiB2YWwgJiYgdmFsLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIHZhbC5jb25zdHJ1Y3Rvci5uYW1lXG4gIH1cbiAgcmV0dXJuICd1bmtub3duIHR5cGUnXG59XG5cblxuIiwiXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpXG52YXIga2F0ZXggPSByZXF1aXJlKCdrYXRleCcpXG5cbnZhciBMYXRleFZpZXdlciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtlcnJvcjogbnVsbH1cbiAgfSxcbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlOiBmdW5jdGlvbiAobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgICByZXR1cm4gbmV4dFByb3BzLmRhdGEgIT09IHRoaXMucHJvcHMuZGF0YSB8fCBuZXh0U3RhdGUuZXJyb3IgIT09IHRoaXMuc3RhdGUuZXJyb3JcbiAgfSxcbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogZnVuY3Rpb24gKG5leHRQcm9wcykge1xuICAgIGlmIChuZXh0UHJvcHMuZGF0YSAhPT0gdGhpcy5wcm9wcy5kYXRlKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtlcnJvcjogZmFsc2V9KVxuICAgIH1cbiAgfSxcbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9yZW5kZXJLYXRleCgpXG4gIH0sXG4gIGNvbXBvbmVudERpZFVwZGF0ZTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX3JlbmRlckthdGV4KClcbiAgfSxcbiAgX3JlbmRlckthdGV4OiBmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGthdGV4LnJlbmRlcih0aGlzLnByb3BzLmRhdGEsIHRoaXMuZ2V0RE9NTm9kZSgpKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe2Vycm9yOiBlfSlcbiAgICB9XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnN0YXRlLmVycm9yKSB7XG4gICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9J21fSVB5dGhvbl9vdXRwdXQgbV9JUHl0aG9uX291dHB1dF9sYXRleCc+XG4gICAgICAgIEVycm9yIHdoaWxlIHJlbmRlcmluZyBsYXRleC5cbiAgICAgIDwvZGl2PlxuICAgIH1cbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9J21fSVB5dGhvbl9vdXRwdXQgbV9JUHl0aG9uX291dHB1dF9sYXRleCcvPlxuICB9XG59KVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgbWltZTogJ3RleHQvbGF0ZXgnLFxuXG4gIGRpc3BsYXk6IGZ1bmN0aW9uICh2YWx1ZSwgc3RvcmUpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMYXRleFZpZXdlciwge2RhdGE6IHZhbHVlfSlcbiAgfVxufVxuXG4iLCJcbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0JylcbiAgLCBtYWtlR29yaWxsYSA9IHJlcXVpcmUoJy4vZ29yaWxsYScpXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBtaW1lOiAnanNvbi9saXN0LWxpa2UnLFxuXG4gIGRpc3BsYXk6IGZ1bmN0aW9uICh2YWx1ZSwgbWV0YSkge1xuICAgIHJldHVybiA8TGlzdExpa2VWaWV3ZXIgZGF0YT17dmFsdWV9Lz5cbiAgfSxcbn1cblxudmFyIExpc3RMaWtlVmlld2VyID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZG9UaGluZ3ModGhpcy5wcm9wcy5kYXRhKVxuICB9LFxuICBkb1RoaW5nczogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB2YXIgcGFydHMgPSBtYWtlR29yaWxsYShkYXRhLCAwKVxuICAgIHZhciBub2RlID0gdGhpcy5nZXRET01Ob2RlKClcbiAgICBub2RlLmlubmVySFRNTCA9IHBhcnRzWzBdXG4gICAgdmFyIHJpY2ggPSBwYXJ0c1syXVxuICAgIGZvciAodmFyIGlkIGluIHJpY2gpIHtcbiAgICAgIHZhciBkZXN0ID0gbm9kZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdyaWNoLScgKyBpZClbMF1cbiAgICAgIHZhciByZW5kZXJlciA9IHtcbiAgICAgICAgdmVnYTogcmVuZGVyVmVnYVxuICAgICAgfVtyaWNoW2lkXS50eXBlXVxuICAgICAgaWYgKCFyZW5kZXJlcikge1xuICAgICAgICBjb25zb2xlLndhcm4oJ3NraXBwaW5nIHRoZSByZW5kZXIgb2YnLCByaWNoW2lkXS50eXBlLCByaWNoW2lkXSlcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICByZW5kZXJlcihyaWNoW2lkXS5jb250ZW50LCBkZXN0KVxuICAgIH1cbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPSdtX0lQeXRob25fb3V0cHV0X2xpc3QtbGlrZScvPlxuICB9XG59KVxuXG5mdW5jdGlvbiByZW5kZXJWZWdhKGRhdGEsIG5vZGUpIHtcbiAgdmcucGFyc2Uuc3BlYyhkYXRhLCAoY2hhcnQpID0+IHtcbiAgICBjaGFydCh7XG4gICAgICBlbDogbm9kZSxcbiAgICAgIHJlbmRlcmVyOiAnc3ZnJyxcbiAgICB9KS51cGRhdGUoKTtcbiAgfSlcbn1cblxuIiwiXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpXG5cbnZhciBMaXZlQnV0dG9uID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBfb25DbGljazogZnVuY3Rpb24gKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICB0aGlzLnByb3BzLnN0b3JlLmdsb2JhbHMua2VybmVsLnNlbmRMaXZlKHRoaXMucHJvcHMubGl2ZV9pZCwgdHJ1ZSlcbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIDxidXR0b24gb25DbGljaz17dGhpcy5fb25DbGlja30+e3RoaXMucHJvcHMubGFiZWx9PC9idXR0b24+XG4gIH0sXG59KVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgbWltZTogJ2xpdmUvYnV0dG9uJyxcblxuICBkaXNwbGF5OiBmdW5jdGlvbiAodmFsdWUsIHN0b3JlLCBtZXRhKSB7XG4gICAgcmV0dXJuIExpdmVCdXR0b24oe2xhYmVsOiB2YWx1ZS5sYWJlbCwgc3RvcmU6IHN0b3JlLCBsaXZlX2lkOiBtZXRhICYmIG1ldGEubGl2ZV9pZH0pXG4gIH0sXG59XG5cbiIsIlxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKVxuICAsIFBUID0gUmVhY3QuUHJvcFR5cGVzXG4gICwgZm9ybWF0ID0gcmVxdWlyZSgnLi4vbGliL3BsdWdpbi9mb3JtYXQnKVxuXG52YXIgTGl2ZVdhdGNoZXIgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIHByb3BUeXBlczoge1xuICAgIGlkOiBQVC5zdHJpbmcsXG4gIH0sXG5cbiAgLypcbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgayA9IHdpbmRvdy5zdG9yZS5fZ2xvYmFscy5rZXJuZWxcbiAgICBrLm9uKHRoaXMucHJvcHMuaWQgKyAnOmxpdmVfdXBkYXRlJywgdGhpcy51cGRhdGUpXG4gIH0sXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50OiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGsgPSB3aW5kb3cuc3RvcmUuX2dsb2JhbHMua2VybmVsXG4gICAgay5vZmYodGhpcy5wcm9wcy5pZCArICc6bGl2ZV91cGRhdGUnLCB0aGlzLnVwZGF0ZSlcbiAgfSxcblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBmdW5jdGlvbiAobmV4dFByb3BzKSB7XG4gICAgdmFyIGsgPSB3aW5kb3cuc3RvcmUuX2dsb2JhbHMua2VybmVsXG4gICAgay5vZmYodGhpcy5wcm9wcy5pZCArICc6bGl2ZV91cGRhdGUnLCB0aGlzLnVwZGF0ZSlcbiAgICBrLm9uKG5leHRQcm9wcy5pZCArICc6bGl2ZV91cGRhdGUnLCB0aGlzLnVwZGF0ZSlcbiAgICB0aGlzLnNldFN0YXRlKHt2YWx1ZTogbmV4dFByb3BzLnZhbHVlfSlcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHRoaXMucHJvcHMudmFsdWVcbiAgICB9XG4gIH0sXG5cbiAgdXBkYXRlOiBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgIHRoaXMuc2V0U3RhdGUoe3ZhbHVlOiBtZXNzYWdlLmNvbnRlbnR9KVxuICB9LFxuICovXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPSdMaXZlV2F0Y2hlcic+XG4gICAgICB7Zm9ybWF0LmRpc3BsYXkobnVsbCwgdGhpcy5wcm9wcy52YWx1ZSwgdGhpcy5wcm9wcy5zdG9yZSxcbiAgICAgICAgICAgICAgICAgICAgICB7bGl2ZV9pZDogdGhpcy5wcm9wcy5pZH0pfVxuICAgIDwvZGl2PlxuICB9LFxufSlcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIG1pbWU6ICdqc29uL2xpdmUnLFxuXG4gIGRpc3BsYXk6IGZ1bmN0aW9uICh2YWx1ZSwgc3RvcmUpIHtcbiAgICB2YXIgaWQgPSB2YWx1ZS5pZFxuICAgIHJldHVybiBMaXZlV2F0Y2hlcih7aWQ6IHZhbHVlLmlkLCBzdG9yZTogc3RvcmUsIHZhbHVlOiB2YWx1ZS52YWx1ZX0pXG4gIH0sXG59XG5cbiIsIlxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKVxuICAsIHV1aWQgPSByZXF1aXJlKCcuLi9saWIvdXVpZCcpXG4gICwgX2NhY2hlID0ge31cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIG1pbWU6ICdqcy9yZWFjdCcsXG5cbiAgZGlzcGxheTogZnVuY3Rpb24gKHZhbHVlLCBtZXRhKSB7XG4gICAgaWYgKF9jYWNoZVt2YWx1ZV0pIHtcbiAgICAgIHJldHVybiA8U2FuZGJveCBjb21wPXtfY2FjaGVbdmFsdWVdfS8+XG4gICAgfVxuICAgIHJldHVybiA8ZW0+RXZhbHVhdGUgdG8gc2VlIFJlYWN0IENvbXBvbmVudDwvZW0+O1xuICB9LFxuXG4gIGZvcm1hdDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKFJlYWN0LmlzVmFsaWRDb21wb25lbnQodmFsdWUpKSB7XG4gICAgICB2YXIgaWQgPSB1dWlkKClcbiAgICAgIF9jYWNoZVtpZF0gPSB2YWx1ZVxuICAgICAgcmV0dXJuIGlkXG4gICAgfVxuICB9LFxufVxuXG52YXIgU2FuZGJveCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtlcnJvcjogbnVsbH1cbiAgfSxcbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9yZW5kZXJTYW5kYm94KClcbiAgfSxcbiAgY29tcG9uZW50RGlkVXBkYXRlOiBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgaWYgKHByZXZQcm9wcy5jb21wID09PSB0aGlzLnByb3BzLmNvbXApIHJldHVyblxuICAgIHRoaXMuX3JlbmRlclNhbmRib3goKVxuICB9LFxuICBfcmVuZGVyU2FuZGJveDogZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICBSZWFjdC5yZW5kZXIodGhpcy5wcm9wcy5jb21wLCB0aGlzLnJlZnMuc2FuZGJveC5nZXRET01Ob2RlKCkpXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0U3RhdGUoe2Vycm9yOiAnRmFpbGVkIHRvIHJlbmRlciBjb21wb25lbnQ6ICcgKyBlLm1lc3NhZ2UgKyAnXFxuJyArIGUuc3RhY2t9KVxuICAgIH1cbiAgICB0aGlzLnNldFN0YXRlKHtlcnJvcjogbnVsbH0pXG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT0nc2FuZGJveCc+XG4gICAgICA8ZGl2IHJlZj1cInNhbmRib3hcIi8+XG4gICAgICB7dGhpcy5zdGF0ZS5lcnJvciAmJiA8ZGl2IGNsYXNzTmFtZT0nc2FuZGJveF9lcnJvcic+e3RoaXMuc3RhdGUuZXJyb3J9PC9kaXY+fVxuICAgIDwvZGl2PlxuICB9XG59KVxuXG4iLCJcbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0JylcbiAgLCBmb3JtYXQgPSByZXF1aXJlKCcuLi9saWIvcGx1Z2luL2Zvcm1hdCcpXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBtaW1lOiAnanNvbi90YWJsZScsXG4gIGRpc3BsYXk6IGZ1bmN0aW9uICh2YWx1ZSwgc3RvcmUpIHtcbiAgICBpZiAoIXZhbHVlLnJvd3MpIHtcbiAgICAgIHZhbHVlID0ge2hlYWRlcjogbnVsbCwgcm93czogdmFsdWV9XG4gICAgfVxuICAgIHJldHVybiA8VGFibGVWaWV3ZXIgZGF0YT17dmFsdWV9IHN0b3JlPXtzdG9yZX0vPlxuICB9XG59XG5cbmZ1bmN0aW9uIHNob3codmFsdWUsIHN0b3JlKSB7XG4gIHJldHVybiBmb3JtYXQuZGlzcGxheShudWxsLCB2YWx1ZSwgc3RvcmUpXG59XG5cbnZhciBUYWJsZVZpZXdlciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uICgpIHtcbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGRhdGEgPSB0aGlzLnByb3BzLmRhdGFcbiAgICAgICwgc3RvcmUgPSB0aGlzLnByb3BzLnN0b3JlXG4gICAgICAsIGhlYWRlciA9IGRhdGEuaGVhZGVyXG4gICAgICAsIHJvd3MgPSBkYXRhLnJvd3NcbiAgICByZXR1cm4gPHRhYmxlPlxuICAgICAge2hlYWRlciAmJiA8dGhlYWQ+XG4gICAgICAgIDx0cj5cbiAgICAgICAgICB7aGVhZGVyLm1hcChpdGVtID0+IDx0aD57c2hvdyhpdGVtLCBzdG9yZSl9PC90aD4pfVxuICAgICAgICA8L3RyPlxuICAgICAgPC90aGVhZD59XG4gICAgICA8dGJvZHk+XG4gICAgICAgIHtyb3dzLm1hcChyb3cgPT4gPHRyPlxuICAgICAgICAgIHtyb3cubWFwKGl0ZW0gPT4gPHRkPntzaG93KGl0ZW0sIHN0b3JlKX08L3RkPil9XG4gICAgICAgIDwvdHI+KX1cbiAgICAgIDwvdGJvZHk+XG4gICAgPC90YWJsZT5cbiAgfVxufSlcblxuXG4iLCJcbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0JylcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIG1pbWU6ICdqc29uL3ZlZ2EnLFxuXG4gIGRpc3BsYXk6IGZ1bmN0aW9uICh2YWx1ZSwgbWV0YSkge1xuICAgIHJldHVybiA8VmVnYVZpZXdlciBkYXRhPXt2YWx1ZX0vPlxuICB9LFxuXG4gIGZvcm1hdDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gVE9ETyBzb21ldGhpbmcgaGVyZT9cbiAgfVxufVxuXG5cbnZhciBWZWdhVmlld2VyID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX3ZlZ2FSZW5kZXIoKVxuICB9LFxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX3ZlZ2FSZW5kZXIoKVxuICB9LFxuXG4gIF92ZWdhUmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLmdldERPTU5vZGUoKVxuICAgIHZnLnBhcnNlLnNwZWModGhpcy5wcm9wcy5kYXRhLCAoY2hhcnQpID0+IHtcbiAgICAgIGNoYXJ0KHtcbiAgICAgICAgZWw6IG5vZGUsXG4gICAgICAgIHJlbmRlcmVyOiAnc3ZnJyxcbiAgICAgIH0pLnVwZGF0ZSgpO1xuICAgIH0pXG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPSdtX0lQeXRob25fb3V0cHV0IG1fSVB5dGhvbl9vdXRwdXQtdmVnYScvPlxuICB9XG59KVxuXG4iLCJcbmltcG9ydCBwbHVnaW4gZnJvbSAnLi9saWIvcGx1Z2luJ1xuXG5leHBvcnQgZGVmYXVsdCBwbHVnaW5cblxuIiwiXG5tb2R1bGUuZXhwb3J0cyA9IGV4dGVuZFxuXG5mdW5jdGlvbiBleHRlbmQoZGVzdCkge1xuICBmb3IgKHZhciBpPTE7IGk8YXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgZm9yICh2YXIgbmFtZSBpbiBhcmd1bWVudHNbaV0pIHtcbiAgICAgIGRlc3RbbmFtZV0gPSBhcmd1bWVudHNbaV1bbmFtZV1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRlc3Rcbn1cblxuIiwiXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcG9zdDogc2VuZC5iaW5kKG51bGwsICdQT1NUJyksXG4gIHBhdGNoOiBzZW5kLmJpbmQobnVsbCwgJ1BBVENIJyksXG4gIGdldDogZnVuY3Rpb24gZ2V0ICh1cmwsIGhlYWRlcnMsIGRvbmUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgZG9uZSA9IGhlYWRlcnNcbiAgICAgIGhlYWRlcnMgPSB7fVxuICAgIH1cbiAgICBzZW5kKCdHRVQnLCB1cmwsIGhlYWRlcnMsIG51bGwsIGRvbmUpXG4gIH0sXG59XG5cbmZ1bmN0aW9uIHNlbmQgKG1ldGhvZCwgdXJsLCBoZWFkZXJzLCBkYXRhLCBkb25lKSB7XG4gIHZhciB4ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KClcbiAgeC5vcGVuKG1ldGhvZCwgdXJsKVxuICBmb3IgKHZhciBuYW1lIGluIGhlYWRlcnMpIHtcbiAgICB4LnNldFJlcXVlc3RIZWFkZXIobmFtZSwgaGVhZGVyc1tuYW1lXSlcbiAgfVxuICB4Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5yZWFkeVN0YXRlICE9PSA0KSByZXR1cm5cbiAgICB2YXIgZGF0YVxuICAgICAgLCBtaW1lID0gdGhpcy5nZXRSZXNwb25zZUhlYWRlcignY29udGVudC10eXBlJylcbiAgICBpZiAobWltZSAmJiAobWltZS5pbmRleE9mKCdqc29uJykgIT09IC0xIHx8IG1pbWUuaW5kZXhPZignbm90YWJsZW1pbmQnKSAhPT0gLTEpKSB7XG4gICAgICB0cnkge1xuICAgICAgICBkYXRhID0gSlNPTi5wYXJzZSh0aGlzLnJlc3BvbnNlVGV4dClcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGRvbmUobmV3IEVycm9yKCdVbmV4cGVjdGVkIHNlcnZlciByZXNwb25zZScpKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhID0gdGhpcy5yZXNwb25zZVRleHRcbiAgICB9XG4gICAgZG9uZShudWxsLCBkYXRhKVxuICB9XG4gIHgub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICBkb25lKG5ldyBFcnJvcignRmFpbGVkIHRvIGNvbm5lY3QnKSlcbiAgfVxuICB4Lm9uYWJvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgZG9uZShuZXcgRXJyb3IoJ0Nvbm5lY3Rpb24gY2FuY2VsbGVkJykpXG4gIH1cbiAgaWYgKGRhdGEpIHtcbiAgICB4LnNlbmQodHlwZW9mKGRhdGEpID09PSAnc3RyaW5nJyA/IGRhdGEgOiBKU09OLnN0cmluZ2lmeShkYXRhKSlcbiAgfSBlbHNlIHtcbiAgICB4LnNlbmQoKVxuICB9XG59XG4iLCJcbnZhci8vIGVzcHJpbWEgPSByZXF1aXJlKCdlc3ByaW1hJylcbiAgLy8gLCBlc2NvZGVnZW4gPSByZXF1aXJlKCdlc2NvZGVnZW4nKVxuICBqc3ggPSByZXF1aXJlKCcuL2pzeCcpXG5cbiAgLy8gLCB1bmlxdWl0eSA9IHJlcXVpcmUoJy4vdW5pcXVpdHknKVxuICAsIG1ha2VPdXRwdXQgPSByZXF1aXJlKCcuL21ha2Utb3V0cHV0JylcblxubW9kdWxlLmV4cG9ydHMgPSBleGVjdXRlXG5cbmZ1bmN0aW9uIG91dEVycm9yKGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnZXJyb3InLFxuICAgIG5hbWU6IGUubmFtZSxcbiAgICBtZXNzYWdlOiBlLm1lc3NhZ2UsXG4gICAgdHJhY2ViYWNrOiBlLnN0YWNrXG4gIH1cbn1cblxuZnVuY3Rpb24gZ29BbmREbyhjb250ZW50LCB3aW5kb3csIGNhbGxiYWNrcywgbG9jYWwpIHtcbiAgd2luZG93Ll93d0V2YWwoXG4gICAgbG9jYWwgPyB3aW5kb3cubHdvcmtlciA6IHdpbmRvdy53b3JrZXIsXG4gICAgY2FsbGJhY2tzLm91dHB1dCxcbiAgICBjb250ZW50LFxuICAgIChyZXN1bHQpID0+IHtcbiAgICAgIGNhbGxiYWNrcy5vdXRwdXQobWFrZU91dHB1dChyZXN1bHQsIHdpbmRvdykpXG4gICAgICBjYWxsYmFja3MuZW5kKClcbiAgICB9LFxuICAgICgpID0+IHtcbiAgICAgIGNhbGxiYWNrcy5lbmQoKVxuICAgIH1cbiAgKVxufVxuXG5mdW5jdGlvbiBpbmplY3RDU1MoY29udGVudCwgd2luZG93KSB7XG4gIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICBkaXYuaW5uZXJIVE1MID0gJzxzdHlsZT4nICsgY29udGVudCArICc8L3N0eWxlPidcbiAgZGl2LmZpcnN0Q2hpbGQuY2xhc3NOYW1lID0gJ2luamVjdGVkLW1hZ2ljJ1xuICB3aW5kb3cuZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChkaXYuZmlyc3RDaGlsZClcbn1cblxuZnVuY3Rpb24gZXhlY3V0ZShjb250ZW50LCB3aW5kb3csIGNhbGxiYWNrcykge1xuICB2YXIgbnVtID0gd2luZG93Ll9paC5sZW5ndGhcbiAgd2luZG93Ll9paC5wdXNoKGNvbnRlbnQpXG4gIGNhbGxiYWNrcy5zdGFydCgpXG5cbiAgdmFyIGZpcnN0TGluZSA9IGNvbnRlbnQuc3BsaXQoJ1xcbicsIDEpWzBdXG4gIGlmIChmaXJzdExpbmUuc2xpY2UoMCwyKSA9PT0gJyUlJykge1xuICAgIHZhciBtYWdpYyA9IGZpcnN0TGluZS5zbGljZSgyKS50cmltKCkudG9Mb3dlckNhc2UoKVxuICAgIGlmIChtYWdpYyA9PT0gJ3dvcmsnIHx8IG1hZ2ljID09PSAnd3cnKSB7XG4gICAgICByZXR1cm4gZ29BbmREbyhjb250ZW50LnNsaWNlKGZpcnN0TGluZS5sZW5ndGggKyAxKSwgd2luZG93LCBjYWxsYmFja3MpXG4gICAgfSBlbHNlIGlmIChtYWdpYyA9PT0gJ2x3b3JrJyB8fCBtYWdpYyA9PT0gJ2x3dycpIHtcbiAgICAgIHJldHVybiBnb0FuZERvKGNvbnRlbnQuc2xpY2UoZmlyc3RMaW5lLmxlbmd0aCArIDEpLCB3aW5kb3csIGNhbGxiYWNrcywgdHJ1ZSlcbiAgICB9IGVsc2UgaWYgKG1hZ2ljID09PSAnanN4Jykge1xuICAgICAgLy8gcGFzcywgaWdub3JlXG4gICAgICBjb250ZW50ID0gY29udGVudC5zbGljZShmaXJzdExpbmUubGVuZ3RoICsgMSlcbiAgICB9IGVsc2UgaWYgKG1hZ2ljID09PSAnY3NzJykge1xuICAgICAgd2luZG93LmFkZEluamVjdENTUyhjb250ZW50LnNsaWNlKGZpcnN0TGluZS5sZW5ndGggKyAxKSlcbiAgICAgIC8vIGluamVjdENTUyhjb250ZW50LnNsaWNlKGZpcnN0TGluZS5sZW5ndGggKyAxKSwgd2luZG93KVxuICAgICAgY2FsbGJhY2tzLmVuZCgpXG4gICAgICByZXR1cm5cbiAgICB9IGVsc2UgaWYgKG1hZ2ljID09PSAnaHRtbCcpIHtcbiAgICAgIGNhbGxiYWNrcy5vdXRwdXQobWFrZU91dHB1dChjb250ZW50LnNsaWNlKGZpcnN0TGluZS5sZW5ndGggKyAxKSwgd2luZG93LCAndGV4dC9odG1sJykpXG4gICAgICBjYWxsYmFja3MuZW5kKClcbiAgICAgIHJldHVyblxuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFja3Mub3V0cHV0KHtcbiAgICAgICAgdHlwZTogJ2Vycm9yJyxcbiAgICAgICAgbmFtZTogJ1N5bnRheEVycm9yJyxcbiAgICAgICAgbWVzc2FnZTogJ0ludmFsaWQgbWFnaWM6ICcgKyBtYWdpYyxcbiAgICAgICAgdHJhY2ViYWNrOiAnSW52YWxpZCBtYWdpYzogJyArIG1hZ2ljLFxuICAgICAgfSlcbiAgICAgIGNhbGxiYWNrcy5lbmQoKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICB9XG5cbiAgdHJ5IHtcbiAgICBjb250ZW50ID0ganN4KGNvbnRlbnQpXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjYWxsYmFja3Mub3V0cHV0KG91dEVycm9yKGUpKVxuICAgIGNhbGxiYWNrcy5lbmQoKVxuICAgIHJldHVyblxuICB9XG5cbiAgY29uc3QgYm9keSA9IGNvbnRlbnRcblxuICAvKlxuICB0cnkge1xuICAgIHZhciBib2R5ID0gcHJlcHJvY2Vzcyhjb250ZW50LCB3aW5kb3csIGNhbGxiYWNrcywgbnVtKVxuICB9IGNhdGNoIChlKSB7XG4gICAgY2FsbGJhY2tzLm91dHB1dChvdXRFcnJvcihlKSlcbiAgICBjYWxsYmFja3MuZW5kKClcbiAgICByZXR1cm5cbiAgfVxuICAqL1xuXG4gIHdpbmRvdy5fb3V0cHV0ID0gY2FsbGJhY2tzLm91dHB1dC5iaW5kKGNhbGxiYWNrcylcbiAgd2luZG93LmRpc3BsYXkgPSAod2hhdCwgbWltZSkgPT4gY2FsbGJhY2tzLm91dHB1dChtYWtlT3V0cHV0KHdoYXQsIHdpbmRvdywgbWltZSkpLFxuICB3aW5kb3cuY29uc29sZSA9IHtcbiAgICBsb2c6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbGxiYWNrcy5vdXRwdXQoe1xuICAgICAgICB0eXBlOiAnb3V0cHV0JyxcbiAgICAgICAgc3VwcHJlc3NhYmxlOiBmYWxzZSxcbiAgICAgICAgJ2pzb24vbG9nJzogW10ubWFwLmNhbGwoYXJndW1lbnRzLCBhcmcgPT4gbWFrZU91dHB1dChhcmcsIHdpbmRvdykpLFxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICB0cnkge1xuICAgIHZhciByZXMgPSB3aW5kb3cuZXZhbChib2R5KVxuICB9IGNhdGNoIChlKSB7XG4gICAgY2FsbGJhY2tzLm91dHB1dChvdXRFcnJvcihlKSlcbiAgICBjYWxsYmFja3MuZW5kKClcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIHVwZGF0ZSB0aGUgbWFnaWMgdmFyc1xuICBpZiAodW5kZWZpbmVkICE9PSByZXMpIHtcbiAgICB3aW5kb3cuX29oW251bV0gPSByZXNcbiAgICB3aW5kb3cuX19fID0gd2luZG93Ll9fXG4gICAgd2luZG93Ll9fID0gd2luZG93Ll9cbiAgICB3aW5kb3cuXyA9IHJlc1xuICAgIGNhbGxiYWNrcy5vdXRwdXQobWFrZU91dHB1dChyZXMsIHdpbmRvdykpXG4gIH1cblxuICBjYWxsYmFja3MuZW5kKClcbn1cblxuLypcbmZ1bmN0aW9uIGluamVjdCh0cmVlLCB3aW5kb3csIHN1ZmZpeCwgaW5qZWN0aW5nKSB7XG4gIHZhciByZXBsYWNlID0ge31cbiAgZm9yICh2YXIgbmFtZSBpbiBpbmplY3RpbmcpIHtcbiAgICByZXBsYWNlW25hbWVdID0gbmFtZSArIHN1ZmZpeFxuICB9XG4gIHZhciBuZWVkZWQgPSB1bmlxdWl0eSh0cmVlLCByZXBsYWNlKVxuICBuZWVkZWQuZm9yRWFjaChuYW1lID0+IHtcbiAgICB3aW5kb3dbcmVwbGFjZVtuYW1lXV0gPSBpbmplY3RpbmdbbmFtZV1cbiAgfSlcbn1cblxuZnVuY3Rpb24gcHJlcHJvY2Vzcyhjb250ZW50LCB3aW5kb3csIGNhbGxiYWNrcywgbnVtKSB7XG4gIHZhciB0cmVlID0gZXNwcmltYS5wYXJzZShjb250ZW50KVxuXG4gIGluamVjdCh0cmVlLCB3aW5kb3csICckJyArIG51bSwge1xuICAgIGx3b3JrOiB3aW5kb3cuX3dvcmsuYmluZChudWxsLCB3aW5kb3cubHdvcmtlciwgY2FsbGJhY2tzLm91dHB1dCksXG4gICAgbHd3RXZhbDogd2luZG93Ll93d0V2YWwuYmluZChudWxsLCB3aW5kb3cubHdvcmtlciwgY2FsbGJhY2tzLm91dHB1dCksXG5cbiAgICB3b3JrOiB3aW5kb3cuX3dvcmsuYmluZChudWxsLCB3aW5kb3cud29ya2VyLCBjYWxsYmFja3Mub3V0cHV0KSxcbiAgICB3d0V2YWw6IHdpbmRvdy5fd3dFdmFsLmJpbmQobnVsbCwgd2luZG93LndvcmtlciwgY2FsbGJhY2tzLm91dHB1dCksXG5cbiAgICBsb2FkSlM6IHdpbmRvdy5fbG9hZEpTLmJpbmQobnVsbCwgd2luZG93LCBjYWxsYmFja3Mub3V0cHV0KSxcbiAgICBsb2FkUGFyZW50SlM6IHdpbmRvdy5fbG9hZEpTLmJpbmQobnVsbCwgd2luZG93LnBhcmVudCwgY2FsbGJhY2tzLm91dHB1dCksXG4gICAgbG9hZENTUzogd2luZG93Ll9sb2FkQ1NTLmJpbmQobnVsbCwgd2luZG93LCBjYWxsYmFja3Mub3V0cHV0KSxcbiAgICBsb2FkUGFyZW50Q1NTOiB3aW5kb3cuX2xvYWRDU1MuYmluZChudWxsLCB3aW5kb3cucGFyZW50LCBjYWxsYmFja3Mub3V0cHV0KSxcblxuICAgIGRpc3BsYXkkOiAod2hhdCwgbWltZSkgPT4gY2FsbGJhY2tzLm91dHB1dChtYWtlT3V0cHV0KHdoYXQsIHdpbmRvdywgbWltZSkpLFxuICAgIGNvbnNvbGUkOiB7XG4gICAgICBsb2c6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2FsbGJhY2tzLm91dHB1dChtYWtlT3V0cHV0KFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKSwgd2luZG93KSlcbiAgICAgIH1cbiAgICB9XG4gIH0pXG5cbiAgcmV0dXJuIGVzY29kZWdlbi5nZW5lcmF0ZSh0cmVlKVxufVxuKi9cblxuIiwiLyoqXG4gKiBDcmVhdGUgaWZyYW1lcyBmb3Igc2FuZGJveGVkaXNoIGV4ZWN1dGlvbiBjb250ZXh0cy5cbiAqL1xuXG52YXIgX2ZyYW1lcyA9IHt9XG4gICwgdXVpZCA9IHJlcXVpcmUoJy4uLy4uL3V1aWQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEZyYW1lO1xuXG5mdW5jdGlvbiBnZXRGcmFtZShpZCkge1xuICBpZiAoIV9mcmFtZXNbaWRdKSB7XG4gICAgX2ZyYW1lc1tpZF0gPSBuZXdGcmFtZSgpXG4gIH1cbiAgcmV0dXJuIF9mcmFtZXNbaWRdXG59XG5cbmZ1bmN0aW9uIGluaXRXb3JrZXIod2luZG93KSB7XG4gIHZhciB3b3JrZXIgPSBuZXcgd2luZG93LldvcmtlcignL2Jvb3R3b3JrZXIuanMnKVxuICB3b3JrZXIuX2NicyA9IHt9XG4gIHdvcmtlci5faSA9IDBcblxuICB3b3JrZXIub25tZXNzYWdlID0gZnVuY3Rpb24gKGV2dCkge1xuICAgIHZhciBtZXNzYWdlID0gZXZ0LmRhdGFcbiAgICAgICwgZGF0YSA9IG1lc3NhZ2UuZGF0YVxuICAgIGlmIChkYXRhLmVycm9yKSB7XG4gICAgICB3b3JrZXIuX2Nic1tkYXRhLmlkXS5vdXQoe1xuICAgICAgICB0eXBlOiAnZXJyb3InLFxuICAgICAgICBuYW1lOiBkYXRhLmVycm9yLm5hbWUsXG4gICAgICAgIG1lc3NhZ2U6IGRhdGEuZXJyb3IubWVzc2FnZSxcbiAgICAgICAgdHJhY2ViYWNrOiBkYXRhLmVycm9yLnN0YWNrLFxuICAgICAgfSlcbiAgICAgIHdvcmtlci5fY2JzW2RhdGEuaWRdLm9uZXJyICYmIHdvcmtlci5fY2JzW2RhdGEuaWRdLm9uZXJyKClcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBpZiAobWVzc2FnZS5uYW1lID09PSAnb3V0Jykge1xuICAgICAgd29ya2VyLl9jYnNbZGF0YS5pZF0ub3V0KHtcbiAgICAgICAgdHlwZTogJ291dHB1dCcsXG4gICAgICAgICd0ZXh0L3BsYWluJzogSlNPTi5zdHJpbmdpZnkoZGF0YS5kaXNwbGF5LCBudWxsLCAyKVxuICAgICAgfSlcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBpZiAobWVzc2FnZS5uYW1lID09PSAnZ28nKSB7XG4gICAgICB3b3JrZXIuX2Nic1tkYXRhLmlkXS5mbnNbZGF0YS5mbl0uYXBwbHkobnVsbCwgZGF0YS5hcmdzKVxuICAgIH0gZWxzZSBpZiAobWVzc2FnZS5uYW1lID09PSAnZXZhbCcpIHtcbiAgICAgIHdvcmtlci5fY2JzW2RhdGEuaWRdLmRvbmUuY2FsbChudWxsLCBkYXRhLnJlc3VsdClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHdvcmtlclxufVxuXG5mdW5jdGlvbiBuZXdGcmFtZSgpIHtcbiAgdmFyIGZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJylcbiAgZnJhbWUuY2xhc3NOYW1lID0gJ21fSVB5dGhvbl9qc19mcmFtZSdcbiAgZnJhbWUuc2Vzc2lvbiA9IHV1aWQoKVxuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGZyYW1lKVxuICB2YXIgdyA9IGZyYW1lLmNvbnRlbnRXaW5kb3dcbiAgdy5faWggPSBbXVxuICB3Ll9vaCA9IHt9XG4gIHcuanN4ID0gcmVxdWlyZSgnLi9qc3gnKVxuICB3LmVzcHJpbWEgPSByZXF1aXJlKCdqc3RyYW5zZm9ybS9ub2RlX21vZHVsZXMvZXNwcmltYS1mYicpXG5cbiAgLy8gbGl2ZSB1cGRhdGluZ1xuXG4gIC8vIGZyb20gdXNlciAtPiBmcmFtZVxuICB3Ll9saXZlTG9jYWwgPSB7fVxuICB3Ll9zZW5kTGl2ZSA9IGZ1bmN0aW9uIChpZCwgYXJncykge1xuICAgIGlmICghdy5fbGl2ZUxvY2FsW2lkXSkgcmV0dXJuXG4gICAgdy5fbGl2ZUxvY2FsW2lkXS5mb3JFYWNoKGZuID0+IGZuLmFwcGx5KG51bGwsIGFyZ3MpKVxuICB9XG5cbiAgLy8gZnJvbSBmcmFtZSAtPiB1c2VyXG4gIHcuX2xpdmVDQiA9IHt9XG4gIHcuc2VuZExpdmUgPSBmdW5jdGlvbiAobGlkLCB2YWx1ZSkge1xuICAgIGlmICghdy5fbGl2ZUNCW2xpZF0pIHJldHVyblxuICAgIHcuX2xpdmVDQltsaWRdLmZvckVhY2goZm4gPT4gZm4odmFsdWUpKVxuICB9XG5cbiAgdy5fbG9hZENTUyA9IGZ1bmN0aW9uICh3aW5kb3csIG91dHB1dCwgZmlsZW5hbWVzLCBkb25lKSB7XG4gICAgb3V0cHV0ID0gb3V0cHV0IHx8IHcuX291dHB1dFxuICAgIGlmICghQXJyYXkuaXNBcnJheShmaWxlbmFtZXMpKSB7XG4gICAgICBmaWxlbmFtZXMgPSBbZmlsZW5hbWVzXVxuICAgIH1cbiAgICBmaWxlbmFtZXMuZm9yRWFjaChzcmMgPT4ge1xuICAgICAgdmFyIG5vZGUgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGluaycpXG4gICAgICBub2RlLmhyZWYgPSBzcmNcbiAgICAgIG5vZGUucmVsPSdzdHlsZXNoZWV0J1xuICAgICAgbm9kZS5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIG91dHB1dCh7J3RleHQvcGxhaW4nOiBcImxvYWRlZCBjc3MhIFwiICsgc3JjfSlcbiAgICAgIH1cbiAgICAgIHdpbmRvdy5kb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKG5vZGUpXG4gICAgfSlcbiAgfVxuXG4gIHcuX2xvYWRKUyA9IGZ1bmN0aW9uICh3aW5kb3csIG91dHB1dCwgZmlsZW5hbWVzLCBkb25lKSB7XG4gICAgb3V0cHV0ID0gb3V0cHV0IHx8IHcuX291dHB1dFxuICAgIGlmICghQXJyYXkuaXNBcnJheShmaWxlbmFtZXMpKSB7XG4gICAgICBmaWxlbmFtZXMgPSBbZmlsZW5hbWVzXVxuICAgIH1cbiAgICBmaWxlbmFtZXMuZm9yRWFjaChzcmMgPT4ge1xuICAgICAgdmFyIG5vZGUgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JylcbiAgICAgIG5vZGUuc3JjID0gc3JjXG4gICAgICBub2RlLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgb3V0cHV0KHsndGV4dC9wbGFpbic6IFwibG9hZGVkIGpzISBcIiArIHNyY30pXG4gICAgICB9XG4gICAgICB3aW5kb3cuZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChub2RlKVxuICAgIH0pXG4gIH1cblxuICB3Ll9pbmplY3RfY3NzID0gJydcbiAgdy5hZGRJbmplY3RDU1MgPSBmdW5jdGlvbiAodGV4dCkge1xuICAgIHcuX2luamVjdF9jc3MgKz0gJ1xcbicgKyB0ZXh0XG4gICAgdy5faW5qZWN0X2xpc3RlbmVycy5mb3JFYWNoKGZuID0+IGZuKHcuX2luamVjdF9jc3MpKVxuICB9XG4gIHcuY2xlYXJJbmplY3RDU1MgPSBmdW5jdGlvbiAoKSB7XG4gICAgdy5faW5qZWN0X2NzcyA9ICcnXG4gICAgdy5faW5qZWN0X2xpc3RlbmVycy5mb3JFYWNoKGZuID0+IGZuKHcuX2luamVjdF9jc3MpKVxuICB9XG4gIHcuX2luamVjdF9saXN0ZW5lcnMgPSBbXTtcbiAgdy5hZGRJbmplY3RMaXN0ZW5lciA9IGZ1bmN0aW9uIChmbikge1xuICAgIGlmICh3Ll9pbmplY3RfbGlzdGVuZXJzLmluZGV4T2YoZm4pICE9PSAtMSkgcmV0dXJuXG4gICAgdy5faW5qZWN0X2xpc3RlbmVycy5wdXNoKGZuKVxuICB9XG4gIHcucmVtb3ZlSW5qZWN0TGlzdGVuZXIgPSBmdW5jdGlvbiAoZm4pIHtcbiAgICBpZiAody5faW5qZWN0X2xpc3RlbmVycykge1xuICAgICAgdmFyIGl4ID0gdy5faW5qZWN0X2xpc3RlbmVycy5pbmRleE9mKGZuKVxuICAgICAgaWYgKGl4ID09PSAtMSkgcmV0dXJuIGZhbHNlXG4gICAgICB3Ll9pbmplY3RfbGlzdGVuZXJzLnNwbGljZShpeCwgMSlcbiAgICB9XG4gIH1cblxuICB3Lklzb2xhdGUgPSByZXF1aXJlKCcuL2lzb2xhdGUnKVxuICB3LlN0YXRlciA9IHJlcXVpcmUoJy4vc3RhdGVyJylcbiAgdy5SZWFjdCA9IHJlcXVpcmUoJ3JlYWN0JylcbiAgdy5hamF4ID0gcmVxdWlyZSgnLi9hamF4JylcblxuICB3LnNob3dGcmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBmcmFtZS5jbGFzc0xpc3QuYWRkKCdzaG93JylcbiAgfVxuICB3LmhpZGVGcmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBmcmFtZS5jbGFzc0xpc3QucmVtb3ZlKCdzaG93JylcbiAgfVxuXG4gIGlmICh3aW5kb3cuV29ya2VyICYmIHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCAhPT0gJ2ZpbGU6Jykge1xuICAgIC8vIEFzeW5jIHRoaW5nc1xuICAgIHcud29ya2VyID0gaW5pdFdvcmtlcih3aW5kb3cpXG4gICAgdy5sd29ya2VyID0gaW5pdFdvcmtlcih3KVxuICAgIHcucmVzdGFydExXb3JrZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAody5sd29ya2VyKSB3Lmx3b3JrZXIudGVybWluYXRlKClcbiAgICAgIHcubHdvcmtlciA9IGluaXRXb3JrZXIodylcbiAgICB9XG4gICAgdy5yZXN0YXJ0V29ya2VyID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHcud29ya2VyKSB3Lndvcmtlci50ZXJtaW5hdGUoKVxuICAgICAgdy53b3JrZXIgPSBpbml0V29ya2VyKHdpbmRvdylcbiAgICB9XG5cbiAgICB3Ll93b3JrID0gZnVuY3Rpb24gKHdvcmtlciwgb3V0cHV0LCBmbikge1xuICAgICAgb3V0cHV0ID0gb3V0cHV0IHx8IHcuX291dHB1dFxuICAgICAgaWYgKCdmdW5jdGlvbicgIT09IHR5cGVvZiBmbikge1xuICAgICAgICB2YXIgZSA9IG5ldyBFcnJvcignd29yayB0YWtlcyBhIGZ1bmN0aW9uJylcbiAgICAgICAgcmV0dXJuIG91dHB1dCh7XG4gICAgICAgICAgdHlwZTogJ2Vycm9yJywgXG4gICAgICAgICAgbmFtZTogJ1ZhbHVlRXJyb3InLFxuICAgICAgICAgIG1lc3NhZ2U6IGUubWVzc2FnZSxcbiAgICAgICAgICB0cmFjZWJhY2s6IGUuc3RhY2tcbiAgICAgICAgfSlcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cylcbiAgICAgICAgdmFyIGZucyA9IHt9XG4gICAgICAgIGZvciAodmFyIGk9MDsgaTxhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBhcmdzW2ldKSB7XG4gICAgICAgICAgICBmbnNbaV0gPSBhcmdzW2ldXG4gICAgICAgICAgICBhcmdzW2ldID0gbnVsbFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgaWQgPSB3b3JrZXIuX2krKztcbiAgICAgICAgd29ya2VyLl9jYnNbaWRdID0ge1xuICAgICAgICAgIGZuczogZm5zLFxuICAgICAgICAgIG91dDogb3V0cHV0XG4gICAgICAgIH1cbiAgICAgICAgd29ya2VyLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICBuYW1lOiAnZ28nLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICAgIGZuczogT2JqZWN0LmtleXMoZm5zKSxcbiAgICAgICAgICAgIGFyZ3M6IGFyZ3MsXG4gICAgICAgICAgICB3aGF0OiBmbiArICcnXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cblxuICAgIHcuX3d3RXZhbCA9IGZ1bmN0aW9uICh3b3JrZXIsIG91dHB1dCwgd2hhdCwgZG9uZSwgb25lcnIpIHtcbiAgICAgIHZhciBpZCA9IHdvcmtlci5faSsrO1xuICAgICAgd29ya2VyLl9jYnNbaWRdID0ge1xuICAgICAgICBkb25lOiBkb25lLFxuICAgICAgICBvbmVycjogb25lcnIsXG4gICAgICAgIG91dDogb3V0cHV0IHx8IHcuX291dHB1dFxuICAgICAgfVxuICAgICAgd29ya2VyLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgbmFtZTogJ2V2YWwnLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgIHRleHQ6IHdoYXQgKyAnJ1xuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB3Ll93b3JrID0gZnVuY3Rpb24gKCkge3Rocm93IG5ldyBFcnJvcignV2Vid29ya2VycyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlcicpfVxuICAgIHcuX3d3RXZhbCA9IGZ1bmN0aW9uICgpIHt0aHJvdyBuZXcgRXJyb3IoJ1dlYndvcmtlcnMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXInKX1cbiAgfVxuXG4gIHcud29yayA9IHcuX3dvcmsuYmluZChudWxsLCB3LndvcmtlciwgbnVsbClcbiAgdy5sd29yayA9IHcuX3dvcmsuYmluZChudWxsLCB3Lmx3b3JrZXIsIG51bGwpXG4gIHcud3dFdmFsID0gdy5fd3dFdmFsLmJpbmQobnVsbCwgdy53b3JrZXIsIG51bGwpXG4gIHcubHd3RXZhbCA9IHcuX3d3RXZhbC5iaW5kKG51bGwsIHcubHdvcmtlciwgbnVsbClcbiAgdy5sb2FkSlMgPSB3Ll9sb2FkSlMuYmluZChudWxsLCB3LCBudWxsKVxuICB3LmxvYWRDU1MgPSB3Ll9sb2FkQ1NTLmJpbmQobnVsbCwgdywgbnVsbClcbiAgdy5sb2FkUGFyZW50Q1NTID0gdy5fbG9hZENTUy5iaW5kKG51bGwsIHdpbmRvdywgbnVsbClcblxuICByZXR1cm4gZnJhbWVcbn1cblxuIiwiXG52YXIgZ2V0RnJhbWUgPSByZXF1aXJlKCcuL2dldC1mcmFtZScpXG4gICwgZXhlYyA9IHJlcXVpcmUoJy4vZXhlYycpXG4gICwgZXh0ZW5kID0gcmVxdWlyZSgnLi4vLi4vZXh0ZW5kJylcblxuICAsIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50ZW1pdHRlcjMnKVxuICAsIENvZGVNaXJyb3IgPSByZXF1aXJlKCdjb2RlbWlycm9yJylcblxubW9kdWxlLmV4cG9ydHMgPSBKc0tlcm5lbFxuXG5mdW5jdGlvbiBKc0tlcm5lbChkb2NpZCkge1xuICB0aGlzLmZyYW1lID0gZ2V0RnJhbWUoZG9jaWQpXG4gIHRoaXMuZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdibG9jaydcbiAgdGhpcy53ID0gdGhpcy5mcmFtZS5jb250ZW50V2luZG93XG4gIHRoaXMuc2Vzc2lvbiA9IHRoaXMuZnJhbWUuc2Vzc2lvblxuXG4gIHRoaXMuc3RhdHVzID0gJ2RvbmUnXG4gIHRoaXMudHlwZSA9ICdpanMnXG59XG5cbkpzS2VybmVsLnByb3RvdHlwZSA9IGV4dGVuZChPYmplY3QuY3JlYXRlKEV2ZW50RW1pdHRlci5wcm90b3R5cGUpLCB7XG4gIGluaXQ6IGZ1bmN0aW9uIChob3N0LCBkb25lKSB7XG4gICAgZG9uZSgpXG4gIH0sXG5cbiAgYXN5bmNDb21wbGV0ZTogZmFsc2UsXG5cbiAgY21Db21wbGV0ZTogZnVuY3Rpb24gKGNtKSB7XG4gICAgcmV0dXJuIENvZGVNaXJyb3IuaGludC5qYXZhc2NyaXB0KGNtLCB7Z2xvYmFsU2NvcGU6IHRoaXMudywgYWRkaXRpb25hbENvbnRleHQ6IHRoaXMud30pXG4gIH0sXG5cbiAgdGVhcmRvd246IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbiAgfSxcblxuICBvbkxpdmU6IGZ1bmN0aW9uIChsaWQsIGhhbmRsZXIpIHtcbiAgICBpZiAoIXRoaXMudy5fbGl2ZUNCW2xpZF0pIHtcbiAgICAgIHRoaXMudy5fbGl2ZUNCW2xpZF0gPSBbaGFuZGxlcl1cbiAgICB9IGVsc2UgaWYgKHRoaXMudy5fbGl2ZUNCW2xpZF0uaW5kZXhPZihoYW5kbGVyKSA9PT0gLTEpIHtcbiAgICAgIHRoaXMudy5fbGl2ZUNCW2xpZF0ucHVzaChoYW5kbGVyKVxuICAgIH1cbiAgfSxcblxuICBzZW5kTGl2ZTogZnVuY3Rpb24gKGxpZCkge1xuICAgIHRoaXMudy5fc2VuZExpdmUobGlkLCBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpXG4gIH0sXG5cbiAgc2VuZFNoZWxsOiBmdW5jdGlvbiAoY29udGVudCwgY2FsbGJhY2tzKSB7XG4gICAgZXhlYyhjb250ZW50LCB0aGlzLncsIGNhbGxiYWNrcylcbiAgfSxcbn0pXG5cbkpzS2VybmVsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEpzS2VybmVsXG4iLCJcbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0JylcbiAgLCBQVCA9IFJlYWN0LlByb3BUeXBlc1xuXG52YXIgSXNvbGF0ZSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgcHJvcFR5cGVzOiB7XG4gICAgY2hpbGRyZW46IFBULmFueS5pc1JlcXVpcmVkLFxuXG4gICAgYXV0b1NpemU6IFBULmJvb2wsXG4gICAgc3R5bGVzaGVldHM6IFBULm9uZU9mVHlwZShbUFQuc3RyaW5nLCBQVC5hcnJheV0pLFxuICAgIGNsYXNzTmFtZTogUFQuc3RyaW5nLFxuICAgIHN0eWxlOiBQVC5vYmplY3QsXG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNsYXNzTmFtZTogJ0lzb2xhdGUnLFxuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMubG9hZENoaWxkKClcbiAgfSxcblxuICBjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmxvYWRDaGlsZCgpXG4gIH0sXG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlOiBmdW5jdGlvbiAobmV4dFByb3BzKSB7XG4gICAgcmV0dXJuIG5leHRQcm9wcy5jaGlsZHJlbiAhPT0gdGhpcy5wcm9wcy5jaGlsZHJlblxuICB9LFxuXG4gIGxvYWRDaGlsZDogZnVuY3Rpb24gKCkge1xuICAgIHZhciBmcmFtZSA9IHRoaXMuZ2V0RE9NTm9kZSgpXG4gICAgdmFyIGRvYyA9IGZyYW1lLmNvbnRlbnREb2N1bWVudC5ib2R5XG4gICAgaWYgKHRoaXMucHJvcHMuc3R5bGVzaGVldHMpIHtcbiAgICAgIGxvYWRDU1ModGhpcy5wcm9wcy5zdHlsZXNoZWV0cywgZnJhbWUuY29udGVudERvY3VtZW50KVxuICAgIH1cbiAgICBSZWFjdC5yZW5kZXJDb21wb25lbnQoPGRpdiBjaGlsZHJlbj17dGhpcy5wcm9wcy5jaGlsZHJlbn0vPiwgZG9jLCAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5hdXRvU2l6ZSkge1xuICAgICAgICBmcmFtZS5zdHlsZS5oZWlnaHQgPSAnYXV0bydcbiAgICAgICAgZnJhbWUuc3R5bGUud2lkdGggPSAnYXV0bydcbiAgICAgICAgZnJhbWUuc3R5bGUuaGVpZ2h0ID0gZG9jLnNjcm9sbEhlaWdodCArICdweCdcbiAgICAgICAgZnJhbWUuc3R5bGUud2lkdGggPSBkb2Muc2Nyb2xsV2lkdGggKyAncHgnXG4gICAgICB9XG4gICAgfSlcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gPGlmcmFtZSBjbGFzc05hbWU9e3RoaXMucHJvcHMuY2xhc3NOYW1lfSBzdHlsZT17dGhpcy5wcm9wcy5zdHlsZX0vPlxuICB9LFxufSlcblxuZnVuY3Rpb24gbG9hZENTUyhzaGVldHMsIGRvYykge1xuICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiBzaGVldHMpIHtcbiAgICBzaGVldHMgPSBbc2hlZXRzXVxuICB9XG4gIHNoZWV0cy5mb3JFYWNoKHNoZWV0ID0+IHtcbiAgICB2YXIgbm9kZSA9IGRvYy5jcmVhdGVFbGVtZW50KCdsaW5rJylcbiAgICBub2RlLnJlbCA9ICdzdHlsZXNoZWV0J1xuICAgIG5vZGUuaHJlZiA9IHNoZWV0XG4gICAgZG9jLmhlYWQuYXBwZW5kQ2hpbGQobm9kZSlcbiAgfSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBJc29sYXRlXG5cbiIsIlxudmFyIGJhYmVsID0gcmVxdWlyZSgnYmFiZWwnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjb2RlKSB7XG4gIHJldHVybiBiYWJlbC50cmFuc2Zvcm0oY29kZSkuY29kZS5zbGljZSgnXCJ1c2Ugc3RyaWN0XCI7XFxuJy5sZW5ndGgpXG59XG5cbiIsIlxudmFyIHNhZmVTdHJpbmcgPSByZXF1aXJlKCcuL3NhZmUtc3RyaW5nJylcbiAgLCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0JylcbiAgLCBmb3JtYXQgPSByZXF1aXJlKCcuLi8uLi9wbHVnaW4vZm9ybWF0JylcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodmFsdWUsIHdpbmRvdywgbWltZSkge1xuICB2YXIgb3V0ID0gZm9ybWF0LmZvcm1hdCh2YWx1ZSwgd2luZG93KVxuICBpZiAobWltZSkge1xuICAgIG91dFttaW1lXSA9IHZhbHVlXG4gIH1cblxuICBvdXQudHlwZSA9ICdvdXRwdXQnXG4gIG91dC5zdXBwcmVzc2FibGUgPSBmYWxzZVxuICBpZiAoIW91dFsndGV4dC9wbGFpbiddKSB7XG4gICAgb3V0Wyd0ZXh0L3BsYWluJ10gPSBzYWZlU3RyaW5nKHZhbHVlKVxuICB9XG5cbiAgcmV0dXJuIG91dFxufVxuXG4iLCJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHJlcykge1xuICBpZiAoJ3VuZGVmaW5lZCcgPT09IHR5cGVvZiByZXMpIHJldHVybiAndW5kZWZpbmVkJ1xuICBpZiAoJ251bWJlcicgPT09IHR5cGVvZiByZXMgJiYgaXNOYU4ocmVzKSkgcmV0dXJuICdOYU4nXG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHJlcywgbnVsbCwgMikgfHwgcmVzICsgJydcbiAgfSBjYXRjaCAoZSkgeyB9XG4gIHRyeSB7XG4gICAgcmV0dXJuIHJlcyArICcnXG4gIH0gY2F0Y2ggKGUpIHsgfVxuICByZXR1cm4gJzxjYW5ub3QgZGlzcGxheSBvYmplY3Q+J1xufVxuXG4iLCJcbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0JylcbiAgLCBQVCA9IFJlYWN0LlByb3BUeXBlc1xuXG5mdW5jdGlvbiBzdHJpbmdpZnkodmFsdWUpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUpXG4gIH0gY2F0Y2ggKGUpIHt9XG4gIHRyeSB7XG4gICAgcmV0dXJuIHZhbHVlICsgJydcbiAgfSBjYXRjaCAoZSkge30gLy8gc2VjdXJpdHkgZXJyb3JcbiAgcmV0dXJuIFwiQ291bGQgbm90IGRpc3BsYXkgdmFsdWUgZHVlIHRvIGEgc2VjdXJpdHkgZXJyb3JcIlxufVxuXG52YXIgU3RhdGVyID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBwcm9wVHlwZXM6IHtcbiAgICBhdHRyOiBQVC5zdHJpbmcsXG4gICAgY2I6IFBULnN0cmluZyxcbiAgICBpbml0aWFsOiBQVC5hbnksXG4gICAgZXh0cmE6IFBULm9iamVjdCxcbiAgICBjb21wOiBQVC5jb21wb25lbnQsXG4gICAgc2hvdzogUFQuYm9vbCxcbiAgfSxcbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGF0dHI6ICd2YWx1ZScsXG4gICAgICBjYjogJ29uQ2hhbmdlJyxcbiAgICAgIGluaXRpYWw6ICcnLFxuICAgICAgZXh0cmE6IHt9LFxuICAgICAgc2hvdzogZmFsc2UsXG4gICAgfVxuICB9LFxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge3ZhbHVlOiB0aGlzLnByb3BzLmluaXRpYWx9XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBDID0gdGhpcy5wcm9wcy5jb21wXG4gICAgICAsIHByb3BzID0gdGhpcy5wcm9wcy5leHRyYVxuICAgIHByb3BzW3RoaXMucHJvcHMuYXR0cl0gPSB0aGlzLnN0YXRlLnZhbHVlXG4gICAgcHJvcHNbdGhpcy5wcm9wcy5jYl0gPSB2YWx1ZSA9PiB0aGlzLnNldFN0YXRlKHt2YWx1ZTogdmFsdWV9KVxuICAgIHZhciBlbCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoQywgcHJvcHMsIHRoaXMucHJvcHMuY2hpbGRyZW4pXG4gICAgaWYgKHRoaXMucHJvcHMuc2hvdykge1xuICAgICAgcmV0dXJuIDxkaXY+XG4gICAgICAgIHtlbH1cbiAgICAgICAgPHByZT57c3RyaW5naWZ5KHRoaXMuc3RhdGUudmFsdWUpfTwvcHJlPlxuICAgICAgICA8L2Rpdj5cbiAgICB9XG4gICAgcmV0dXJuIGVsXG4gIH1cbn0pXG5cbm1vZHVsZS5leHBvcnRzID0gU3RhdGVyXG5cbiIsIlxuLy8gTm90aWZpY2F0aW9ucyEhXG52YXIgaHRtbDVub3RpZnkgPSBmYWxzZVxuaWYgKHdpbmRvdy5Ob3RpZmljYXRpb24gJiYgd2luZG93Lk5vdGlmaWNhdGlvbi5yZXF1ZXN0UGVybWlzc2lvbikge1xuICBpZiAod2luZG93Lk5vdGlmaWNhdGlvbi5wZXJtaXNzaW9uID09PSAnZ3JhbnRlZCcpIHtcbiAgICBodG1sNW5vdGlmeSA9IHRydWVcbiAgfVxuICAvKiBUT0RPIGFzayB0aGlzIHZpYSB0aGUga2VybmVsIGNvbmZpZ1xuICB3aW5kb3cuTm90aWZpY2F0aW9uLnJlcXVlc3RQZXJtaXNzaW9uKHBlcm1pc3Npb24gPT4ge1xuICAgIGlmIChwZXJtaXNzaW9uID09PSAnZ3JhbnRlZCcpIGh0bWw1bm90aWZ5ID0gdHJ1ZVxuICB9KVxuICAqL1xufVxuXG5mdW5jdGlvbiBzaG93RG9uZU5vdGlmaWNhdGlvbih0ZXh0LCB0aW1lKSB7XG4gIHZhciBzZWNzID0gdGltZSAvIDEwMDBcbiAgdmFyIHN0aW1lID0gcGFyc2VJbnQoc2VjcyAvIDYwKSArICc6JyArIChzZWNzICUgNjApXG4gIHZhciBuID0gbmV3IHdpbmRvdy5Ob3RpZmljYXRpb24oXCJDb2RlIGZpbmlzaGVkIGFmdGVyIFwiICsgc3RpbWUgKyAncycsIHtcbiAgICBib2R5OiB0ZXh0LnNsaWNlKDAsIDEwMCksXG4gIH0pXG4gIHNldFRpbWVvdXQoKCkgPT4gbi5jbG9zZSgpLCAxMDAwMClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSAodHlwZSwgbGFuZ3VhZ2UpID0+ICh7XG4gIHRvZ2dsZURpc3BsYXlDb2xsYXBzZTogZnVuY3Rpb24gKGlkKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSBpZCA9IHRoaXMudmlldy5hY3RpdmVcbiAgICB0aGlzLnNldChpZCwgJ2Rpc3BsYXlfY29sbGFwc2VkJywgIXRoaXMuZGIubm9kZXNbaWRdLmRpc3BsYXlfY29sbGFwc2VkKVxuICB9LFxuXG4gIHRvZ2dsZUVkaXRvckNvbGxhcHNlOiBmdW5jdGlvbiAoaWQpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIGlkID0gdGhpcy52aWV3LmFjdGl2ZVxuICAgIHRoaXMuc2V0KGlkLCAnZWRpdG9yX2NvbGxhcHNlZCcsICF0aGlzLmRiLm5vZGVzW2lkXS5lZGl0b3JfY29sbGFwc2VkKVxuICB9LFxuXG4gIGV4ZWN1dGVEZWVwOiBmdW5jdGlvbiAoaWQpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGggJiYgdGhpcy52aWV3Lm1vZGUgPT09ICd2aXN1YWwnKSB7XG4gICAgICByZXR1cm4gdGhpcy5leGVjdXRlTWFueURlZXAoKVxuICAgIH1cbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIGlkID0gdGhpcy52aWV3LmFjdGl2ZVxuICAgIHZhciBub2RlID0gdGhpcy5kYi5ub2Rlc1tpZF1cbiAgICBub2RlLmNoaWxkcmVuLmZvckVhY2goKGlkKSA9PiB7XG4gICAgICB0aGlzLmV4ZWN1dGUoaWQpXG4gICAgICB0aGlzLmV4ZWN1dGVEZWVwKGlkKVxuICAgIH0pXG4gIH0sXG5cbiAgZXhlY3V0ZU1hbnk6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy52aWV3Lm1vZGUgIT09ICd2aXN1YWwnKSByZXR1cm5cbiAgICB0aGlzLnN0YXJ0VHJhbnNhY3Rpb24oKVxuICAgIHRoaXMudmlldy5zZWxlY3Rpb24uZm9yRWFjaChpZCA9PiB0aGlzLmV4ZWN1dGUoaWQpKVxuICAgIHRoaXMuc3RvcFRyYW5zYWN0aW9uKClcbiAgICB0aGlzLnNldE1vZGUoJ25vcm1hbCcpXG4gIH0sXG5cbiAgZXhlY3V0ZU1hbnlEZWVwOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMudmlldy5tb2RlICE9PSAndmlzdWFsJykgcmV0dXJuXG4gICAgdGhpcy5zdGFydFRyYW5zYWN0aW9uKClcbiAgICB0aGlzLnZpZXcuc2VsZWN0aW9uLmZvckVhY2godGhpcy5leGVjdXRlRGVlcC5iaW5kKHRoaXMpKVxuICAgIHRoaXMuc3RvcFRyYW5zYWN0aW9uKClcbiAgICB0aGlzLnNldE1vZGUoJ25vcm1hbCcpXG4gIH0sXG5cbiAgY2xlYXJLZXJuZWxFcnJvcjogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZ2xvYmFscy5rZXJuZWxFcnJvciA9IGZhbHNlXG4gICAgdGhpcy5jaGFuZ2VkKHRoaXMuZXZlbnRzLmtlcm5lbEVycm9yKCkpXG4gIH0sXG5cbiAgZXhlY3V0ZUFuZEFkZDogZnVuY3Rpb24gKGlkKSB7XG4gICAgdGhpcy5leGVjdXRlKGlkKVxuICAgIHRoaXMuY3JlYXRlQWZ0ZXIoaWQpXG4gICAgdGhpcy5lZGl0KClcbiAgfSxcblxuICBleGVjdXRlOiBmdW5jdGlvbiAoaWQsIGhpc3RJeCkge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCAmJiB0aGlzLnZpZXcubW9kZSA9PT0gJ3Zpc3VhbCcpIHtcbiAgICAgIHJldHVybiB0aGlzLmV4ZWN1dGVNYW55KClcbiAgICB9XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSBpZCA9IHRoaXMudmlldy5hY3RpdmVcbiAgICB2YXIgbm9kZSA9IHRoaXMuZGIubm9kZXNbaWRdXG4gICAgaWYgKG5vZGUudHlwZSAhPT0gJ2lweXRob24nKSByZXR1cm5cblxuICAgIGlmICghdGhpcy5nbG9iYWxzLmtlcm5lbCkge1xuICAgICAgdGhpcy5nbG9iYWxzLmtlcm5lbEVycm9yID0gJ2tlcm5lbCBub3QgY29uZmlndXJlZCdcbiAgICAgIHRoaXMuY2hhbmdlZCh0aGlzLmV2ZW50cy5rZXJuZWxFcnJvcigpKVxuICAgICAgcmV0dXJuIGNvbnNvbGUud2Fybigna2VybmVsIG5vdCBzZXQnKVxuICAgIH1cbiAgICBpZiAoIXRoaXMuZ2xvYmFscy5rZXJuZWwuc2Vzc2lvbikge1xuICAgICAgdGhpcy5nbG9iYWxzLmtlcm5lbEVycm9yID0gJ2tlcm5lbCBkaXNjb25uZWN0ZWQnXG4gICAgICB0aGlzLmNoYW5nZWQoJ2tlcm5lbC1lcnJvcicpXG4gICAgICByZXR1cm4gY29uc29sZS53YXJuKCdrZXJuZWwgbm90IGNvbm5lY3RlZCcpXG4gICAgfVxuXG4gICAgLy8gdHJhY2sgd2hlcmUgdG8gcmVmb2N1c1xuICAgIHZhciByZWZvY3VzXG4gICAgaWYgKHRoaXMudmlldy5tb2RlID09PSAnaW5zZXJ0Jykge1xuICAgICAgcmVmb2N1cyA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRcbiAgICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuYmx1cigpXG4gICAgfVxuXG4gICAgLy8gVE9ETyBncmFiIHRoZSBJRCBmcm9tIGhlcmVcbiAgICBpZiAoJ251bWJlcicgPT0gdHlwZW9mIGhpc3RJeCkge1xuICAgICAgdGhpcy51cGRhdGUoaWQsIHtcbiAgICAgICAgd2FpdGluZzogdHJ1ZSxcbiAgICAgIH0sIGhpc3RJeClcbiAgICB9IGVsc2Uge1xuICAgICAgaGlzdEl4ID0gdGhpcy51cGRhdGUoaWQsIHtcbiAgICAgICAgd2FpdGluZzogdHJ1ZSxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgdmFyIGNvbnRlbnQgPSBub2RlLmNvbnRlbnRcbiAgICBsZXQgY2xlYXJlZCA9IGZhbHNlXG4gICAgdGhpcy5nbG9iYWxzLmtlcm5lbC5zZW5kU2hlbGwoY29udGVudCwge1xuICAgICAgc3RhcnQ6ICgpID0+IHtcbiAgICAgICAgdGhpcy51cGRhdGUoaWQsIHtcbiAgICAgICAgICBzdGFydGVkOiBEYXRlLm5vdygpLFxuICAgICAgICAgIHNlc3Npb246IHRoaXMuZ2xvYmFscy5rZXJuZWwuc2Vzc2lvbixcbiAgICAgICAgICBleGVjdXRlZDogY29udGVudCxcbiAgICAgICAgICBmaW5pc2hlZDogbnVsbCxcbiAgICAgICAgICB3YWl0aW5nOiBmYWxzZSxcbiAgICAgICAgICBkaXNwbGF5X2NvbGxhcHNlZDogZmFsc2UsXG4gICAgICAgICAgLy8gb3V0cHV0czogW10sXG4gICAgICAgIH0sIGhpc3RJeCkgLy8gLCB0cnVlIC8qIHNxdWFzaCBjb21taXQgKi8pXG4gICAgICB9LFxuICAgICAgb3V0cHV0OiAob3V0cHV0KSA9PiB7XG4gICAgICAgIGxldCBvcmlnID0gdGhpcy5kYi5ub2Rlc1tpZF0ub3V0cHV0c1xuICAgICAgICBpZiAoIWNsZWFyZWQgfHwgIW9yaWcpIHtcbiAgICAgICAgICBvcmlnID0gW11cbiAgICAgICAgICBjbGVhcmVkID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICAgIGxldCBvdXRwdXRzID0gb3JpZy5jb25jYXQoW291dHB1dF0pXG4gICAgICAgIHRoaXMuc2V0KGlkLCAnb3V0cHV0cycsIG91dHB1dHMsIGhpc3RJeCkgLy8gLCB0cnVlIC8qIHNxdWFzaCBjb21taXQgKi8pXG5cbiAgICAgICAgaWYgKG91dHB1dFsnanNvbi9saXZlJ10pIHtcbiAgICAgICAgICB2YXIgbGlkID0gb3V0cHV0Wydqc29uL2xpdmUnXS5pZFxuXG4gICAgICAgICAgdGhpcy5nbG9iYWxzLmtlcm5lbC5vbkxpdmUobGlkLCB2YWx1ZSA9PiB7XG4gICAgICAgICAgICB2YXIgb3V0cHV0cyA9IHRoaXMuZGIubm9kZXNbaWRdLm91dHB1dHNcbiAgICAgICAgICAgIGZvciAodmFyIGk9MDsgaTxvdXRwdXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGlmIChvdXRwdXRzW2ldWydqc29uL2xpdmUnXSAmJiBvdXRwdXRzW2ldWydqc29uL2xpdmUnXS5pZCA9PT0gbGlkKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0c1tpXVsnanNvbi9saXZlJ10udmFsdWUgPSB2YWx1ZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNldChpZCwgJ291dHB1dHMnLCBvdXRwdXRzLCBoaXN0SXgpXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGVuZDogKCkgPT4ge1xuICAgICAgICB2YXIgZmluaXNoZWQgPSBEYXRlLm5vdygpXG4gICAgICAgICAgLCB0aW1lID0gZmluaXNoZWQgLSB0aGlzLmRiLm5vZGVzW2lkXS5zdGFydGVkXG4gICAgICAgIGlmIChodG1sNW5vdGlmeSAmJiBkb2N1bWVudC5oaWRkZW4pIHtcbiAgICAgICAgICBzaG93RG9uZU5vdGlmaWNhdGlvbihjb250ZW50LCB0aW1lKVxuICAgICAgICB9XG4gICAgICAgIGxldCB1cGRhdGVyID0ge1xuICAgICAgICAgIGZpbmlzaGVkOiBmaW5pc2hlZCxcbiAgICAgICAgICB3YWl0aW5nOiBmYWxzZSxcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNsZWFyZWQpIHtcbiAgICAgICAgICB1cGRhdGVyLm91dHB1dHMgPSBbXVxuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlKGlkLCB1cGRhdGVyLCBoaXN0SXgpXG4gICAgICB9XG4gICAgfSlcblxuICAgIGlmIChyZWZvY3VzKSB7XG4gICAgICByZWZvY3VzLmZvY3VzKClcbiAgICAgIHRoaXMuc2V0TW9kZSgnaW5zZXJ0JylcbiAgICB9XG4gICAgcmV0dXJuIGhpc3RJeFxuICB9LFxufSlcbiIsIlxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QvYWRkb25zJylcbiAgLCBDb2RlTWlycm9yID0gcmVxdWlyZSgnY29kZW1pcnJvcicpXG4gICwgY3ggPSBSZWFjdC5hZGRvbnMuY2xhc3NTZXRcbiAgLCBQVCA9IFJlYWN0LlByb3BUeXBlc1xuXG5yZXF1aXJlKCdjb2RlbWlycm9yL21vZGUvamF2YXNjcmlwdC9qYXZhc2NyaXB0JylcbnJlcXVpcmUoJ2NvZGVtaXJyb3IvbW9kZS9jbG9qdXJlL2Nsb2p1cmUnKVxucmVxdWlyZSgnY29kZW1pcnJvci9tb2RlL3B5dGhvbi9weXRob24nKVxucmVxdWlyZSgnY29kZW1pcnJvci9tb2RlL2p1bGlhL2p1bGlhJylcbnJlcXVpcmUoJ2NvZGVtaXJyb3IvbW9kZS9ydXN0L3J1c3QnKVxucmVxdWlyZSgnY29kZW1pcnJvci9tb2RlL2Nzcy9jc3MnKVxuXG5yZXF1aXJlKCdjb2RlbWlycm9yL2FkZG9uL2ZvbGQvZm9sZGNvZGUnKVxucmVxdWlyZSgnY29kZW1pcnJvci9hZGRvbi9mb2xkL2ZvbGRndXR0ZXInKVxucmVxdWlyZSgnY29kZW1pcnJvci9hZGRvbi9mb2xkL2JyYWNlLWZvbGQnKVxucmVxdWlyZSgnY29kZW1pcnJvci9hZGRvbi9mb2xkL3htbC1mb2xkJylcbnJlcXVpcmUoJ2NvZGVtaXJyb3IvYWRkb24vZm9sZC9jb21tZW50LWZvbGQnKVxuXG5yZXF1aXJlKCdjb2RlbWlycm9yL2FkZG9uL2VkaXQvY2xvc2VicmFja2V0cycpXG5yZXF1aXJlKCdjb2RlbWlycm9yL2FkZG9uL2VkaXQvbWF0Y2hicmFja2V0cycpXG5cbnJlcXVpcmUoJ2NvZGVtaXJyb3IvYWRkb24vaGludC9qYXZhc2NyaXB0LWhpbnQnKVxucmVxdWlyZSgnY29kZW1pcnJvci9hZGRvbi9oaW50L3Nob3ctaGludCcpXG5cbnZhciBDb2RlRWRpdG9yID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBwcm9wVHlwZXM6IHtcbiAgICBub2RlOiBQVC5vYmplY3QsXG4gICAgdmFsdWU6IFBULnN0cmluZyxcbiAgICBibHVycmVkOiBQVC5ib29sLFxuICAgIG9uQmx1cjogUFQuZnVuYyxcbiAgICBvbkZvY3VzOiBQVC5mdW5jLFxuICAgIG9uQ2hhbmdlOiBQVC5mdW5jLFxuICAgIG9uRk9jdXM6IFBULmZ1bmMsXG4gICAgb25Db21wbGV0ZTogUFQuZnVuYyxcbiAgICBnb0Rvd246IFBULmZ1bmMsXG4gICAgZ29VcDogUFQuZnVuYyxcbiAgfSxcblxuICBpc0ZvY3VzZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fY20uaGFzRm9jdXMoKVxuICB9LFxuXG4gIGZvY3VzOiBmdW5jdGlvbiAoYXQpIHtcbiAgICBpZiAoIXRoaXMuX2NtLmhhc0ZvY3VzKCkpIHtcbiAgICAgIHRoaXMuX2NtLmZvY3VzKClcbiAgICAgIGlmIChhdCA9PT0gJ2VuZCcgfHwgIWF0KSB7XG4gICAgICAgIHRoaXMuX2NtLnNldEN1cnNvcih0aGlzLl9jbS5saW5lQ291bnQoKSwgMClcbiAgICAgIH0gZWxzZSBpZiAoYXQgIT09ICdzdGFydCcpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdTZWxlY3RpbmcgaW4gdGhlIG1pZGRsZSBub3Qgc3VwcG9ydGVkJylcbiAgICAgICAgdGhpcy5fY20uc2V0Q3Vyc29yKHRoaXMuX2NtLmxpbmVDb3VudCgpLCAwKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fY20uc2V0Q3Vyc29yKDAsIDApXG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIF9vbktleURvd246IGZ1bmN0aW9uIChlZGl0b3IsIGUpIHtcbiAgICBpZiAoIXRoaXMuaXNNb3VudGVkKCkpIHJldHVyblxuICAgIGlmICh0aGlzLnByb3BzLmJsdXJyZWQgJiYgdGhpcy5wcm9wcy5vbkZvY3VzKSB7XG4gICAgICB0aGlzLnByb3BzLm9uRm9jdXMoKVxuICAgIH1cbiAgICBpZiAoZWRpdG9yLnN0YXRlLmNvbXBsZXRpb25BY3RpdmUgJiYgZS5rZXlDb2RlICE9PSAyNykge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGlmIChlLmtleUNvZGUgPT09IDkpIHJldHVybiBlLnN0b3BQcm9wYWdhdGlvbigpXG4gICAgLy8gY3RybCArIHJldHVyblxuICAgIGlmIChlLmtleUNvZGUgPT09IDEzICYmIGUuY3RybEtleSkge1xuICAgICAgdmFyIGN1cnMgPSBlZGl0b3IuZ2V0Q3Vyc29yKClcbiAgICAgICAgLCB0ZXh0ID0gZWRpdG9yLmdldFZhbHVlKClcbiAgICAgICAgLCBwb3MgPSB0ZXh0LnNwbGl0KCdcXG4nKS5zbGljZSgwLCBjdXJzLmxpbmUpLmpvaW4oJ1xcbicpLmxlbmd0aCArIGN1cnMuY2ggKyAxXG4gICAgICBpZiAocG9zIDwgdGV4dC5sZW5ndGgpIHtcbiAgICAgICAgdmFyIHByZSA9IHRleHQuc2xpY2UoMCwgcG9zKVxuICAgICAgICAgICwgcG9zdCA9IHRleHQuc2xpY2UocG9zKVxuICAgICAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKHByZSlcbiAgICAgICAgZWRpdG9yLnNldFZhbHVlKHByZSlcbiAgICAgICAgdGhpcy5wcm9wcy5jcmVhdGVBZnRlcihudWxsLCBwcmUsIHBvc3QpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnByb3BzLmNyZWF0ZUFmdGVyKClcbiAgICAgIH1cbiAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGlmIChlLnNoaWZ0S2V5IHx8IGUuY3RybEtleSB8fCBlLmFsdEtleSB8fCBlLm1ldGFLZXkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBpZiAoZS5rZXlDb2RlID09PSAzOCkgeyAvLyB1cFxuICAgICAgLy8gaWYgKGVkaXRvci5nZXRDdXJzb3IoKS5saW5lID09PSAwKSB7XG4gICAgICB2YXIgY3VycyA9IGVkaXRvci5nZXRDdXJzb3IoKVxuICAgICAgaWYgKGN1cnMubGluZSA9PT0gMCAmJiBjdXJzLmNoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmdvVXAoKVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09PSAzNykgeyAvLyBsZWZ0XG4gICAgICB2YXIgY3VycyA9IGVkaXRvci5nZXRDdXJzb3IoKVxuICAgICAgaWYgKGN1cnMubGluZSA9PT0gMCAmJiBjdXJzLmNoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmdvVXAoKVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09PSA0MCkgeyAvLyBkb3duXG4gICAgICAvLyBpZiAoZWRpdG9yLmdldEN1cnNvcigpLmxpbmUgPT09IGVkaXRvci5saW5lQ291bnQoKSAtIDEpIHtcbiAgICAgIHZhciBjdXJzID0gZWRpdG9yLmdldEN1cnNvcigpXG4gICAgICBpZiAoY3Vycy5saW5lID09PSBlZGl0b3IubGluZUNvdW50KCkgLSAxICYmIGN1cnMuY2ggPT09IGVkaXRvci5nZXRMaW5lKGN1cnMubGluZSkubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmdvRG93bigpXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlLmtleUNvZGUgPT09IDM5KSB7IC8vIHJpZ2h0XG4gICAgICB2YXIgY3VycyA9IGVkaXRvci5nZXRDdXJzb3IoKVxuICAgICAgaWYgKGN1cnMubGluZSA9PT0gZWRpdG9yLmxpbmVDb3VudCgpIC0gMSAmJiBjdXJzLmNoID09PSBlZGl0b3IuZ2V0TGluZShjdXJzLmxpbmUpLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5nb0Rvd24odHJ1ZSlcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYmV0dGVyVGFiID0gZnVuY3Rpb24gKGNtKSB7XG4gICAgICBpZiAoY20uc29tZXRoaW5nU2VsZWN0ZWQoKSkge1xuICAgICAgICByZXR1cm4gY20uaW5kZW50U2VsZWN0aW9uKFwiYWRkXCIpO1xuICAgICAgfVxuICAgICAgLy8gdmFyIG9uQ29tcGxldGUgPSB0aGlzLnByb3BzLm9uQ29tcGxldGVcbiAgICAgIHZhciBjdXJzb3IgPSBjbS5nZXRDdXJzb3IoKVxuICAgICAgICAsIGxpbmUgPSBjbS5nZXRMaW5lKGN1cnNvci5saW5lKVxuICAgICAgICAsIHBvcyA9IHtsaW5lOiBjdXJzb3IubGluZSwgY2g6IGN1cnNvci5jaH1cbiAgICAgIGlmIChjdXJzb3IuY2ggPiAwICYmIGxpbmVbY3Vyc29yLmNoIC0gMV0gIT09ICcgJykge1xuICAgICAgICByZXR1cm4gY20uc2hvd0hpbnQoe2hpbnQ6IHRoaXMucHJvcHMub25Db21wbGV0ZX0pXG4gICAgICB9XG4gICAgICBjbS5yZXBsYWNlU2VsZWN0aW9uKEFycmF5KGNtLmdldE9wdGlvbihcImluZGVudFVuaXRcIikgKyAxKS5qb2luKFwiIFwiKSwgXCJlbmRcIiwgXCIraW5wdXRcIik7XG4gICAgfS5iaW5kKHRoaXMpXG5cbiAgICBmdW5jdGlvbiBiZXR0ZXJTaGlmdFRhYihjbSkge1xuICAgICAgY20uZXhlY0NvbW1hbmQoJ2luZGVudExlc3MnKVxuICAgIH1cblxuICAgIHZhciBtaW5MZW5ndGhGb3JMaW5vcyA9IDEwXG5cbiAgICB2YXIgbGFuZyA9IHRoaXMucHJvcHMubGFuZ3VhZ2UgfHwgdGhpcy5wcm9wcy5ub2RlLmxhbmd1YWdlXG4gICAgdGhpcy5fY20gPSBDb2RlTWlycm9yKHRoaXMuZ2V0RE9NTm9kZSgpLCB7XG4gICAgICB2YWx1ZTogdGhpcy5wcm9wcy52YWx1ZSxcbiAgICAgIGxpbmVOdW1iZXJzOiB0aGlzLnByb3BzLnZhbHVlLnNwbGl0KCdcXG4nKS5sZW5ndGggPiBtaW5MZW5ndGhGb3JMaW5vcyxcbiAgICAgIG1hdGNoQnJhY2tldHM6IHRydWUsXG4gICAgICBhdXRvQ2xvc2VCcmFja2V0czogJygpW117fVwiXCInLFxuICAgICAgaW5kZW50VW5pdDogMixcbiAgICAgIGluZGVudFdpdGhUYWJzOiBmYWxzZSxcbiAgICAgIHNtYXJ0SW5kZW50OiBsYW5nICE9PSAnamF2YXNjcmlwdCcsXG4gICAgICB0YWJTaXplOiAyLFxuICAgICAgbGluZVdyYXBwaW5nOiB0cnVlLFxuICAgICAgbW9kZTogbGFuZyxcbiAgICAgIHZpZXdwb3J0TWFyZ2luOiBJbmZpbml0eSxcbiAgICAgIGV4dHJhS2V5czoge1xuICAgICAgICBUYWI6IGJldHRlclRhYixcbiAgICAgICAgJ1NoaWZ0LVRhYic6IGJldHRlclNoaWZ0VGFiLFxuICAgICAgfSxcbiAgICB9KVxuXG4gICAgdGhpcy5fY20ub24oJ2tleWRvd24nLCB0aGlzLl9vbktleURvd24pXG4gICAgdGhpcy5fY20ub24oJ2NoYW5nZScsIChlZGl0b3IpID0+IHtcbiAgICAgIGlmICghdGhpcy5pc01vdW50ZWQoKSkgcmV0dXJuXG4gICAgICB2YXIgdmFsdWUgPSBlZGl0b3IuZ2V0VmFsdWUoKVxuICAgICAgaWYgKHRoaXMucHJvcHMub25DaGFuZ2UpIHRoaXMucHJvcHMub25DaGFuZ2UodmFsdWUpXG4gICAgICBpZiAodmFsdWUuc3BsaXQoJ1xcbicpLmxlbmd0aCA+IG1pbkxlbmd0aEZvckxpbm9zKSB7XG4gICAgICAgIHRoaXMuX2NtLnNldE9wdGlvbignbGluZU51bWJlcnMnLCB0cnVlKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fY20uc2V0T3B0aW9uKCdsaW5lTnVtYmVycycsIGZhbHNlKVxuICAgICAgfVxuICAgIH0pXG4gICAgdGhpcy5fY20ub24oJ2ZvY3VzJywgKCkgPT4ge1xuICAgICAgaWYgKCF0aGlzLmlzTW91bnRlZCgpKSByZXR1cm5cbiAgICAgIGlmICh0aGlzLnByb3BzLm9uRm9jdXMgJiYgdGhpcy5wcm9wcy5ibHVycmVkKSB0aGlzLnByb3BzLm9uRm9jdXMoKVxuICAgIH0pXG4gICAgdGhpcy5fY20ub24oJ2JsdXInLCAoKSA9PiB7XG4gICAgICBpZiAoIXRoaXMuaXNNb3VudGVkKCkpIHJldHVyblxuICAgICAgaWYgKHRoaXMucHJvcHMub25CbHVyICYmICF0aGlzLnByb3BzLmJsdXJyZWQpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5fY20uZ2V0VmFsdWUoKVxuICAgICAgICBpZiAodGhpcy5wcm9wcy52YWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKHZhbHVlKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJvcHMub25CbHVyKClcbiAgICAgIH1cbiAgICB9KVxuICAgIGlmICghdGhpcy5wcm9wcy5ibHVycmVkKSB7XG4gICAgICB0aGlzLl9jbS5mb2N1cygpXG4gICAgfVxuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IGZ1bmN0aW9uIChuZXh0UHJvcHMpIHtcbiAgICBpZiAodGhpcy5fY20uZ2V0VmFsdWUoKSAhPT0gbmV4dFByb3BzLnZhbHVlICYmIHRoaXMucHJvcHMuYmx1cnJlZCkge1xuICAgICAgdGhpcy5fY20uc2V0VmFsdWUobmV4dFByb3BzLnZhbHVlKVxuICAgIH1cbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9J0lUcmVlZENvZGVFZGl0b3InPlxuICAgICAgPGRpdiBvbkNsaWNrPXt0aGlzLnByb3BzLm9uRXhlY3V0ZX0gY2xhc3NOYW1lPSdJVHJlZWRSdW5CdXR0b24nPjwvZGl2PlxuICAgIDwvZGl2PlxuICB9XG59KVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvZGVFZGl0b3JcblxuIiwiXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpXG4gICwgUFQgPSBSZWFjdC5Qcm9wVHlwZXNcbiAgLCBDb2RlTWlycm9yID0gcmVxdWlyZSgnY29kZW1pcnJvcicpXG5cbmZ1bmN0aW9uIHB4KHZhbCkge1xuICBpZiAoJ251bWJlcicgPT09IHR5cGVvZiB2YWwpIHJldHVybiB2YWwgKyAncHgnXG4gIHJldHVybiB2YWxcbn1cblxuZnVuY3Rpb24gcmVhY3RTdHlsZShub2RlLCBzdHlsZSkge1xuICB2YXIgbm9weCA9ICdvcGFjaXR5LHotaW5kZXgsekluZGV4Jy5zcGxpdCgnLCcpXG4gIGZvciAodmFyIG5hbWUgaW4gc3R5bGUpIHtcbiAgICBpZiAobm9weC5pbmRleE9mKG5hbWUpICE9PSAtMSkge1xuICAgICAgbm9kZS5zdHlsZVtuYW1lXSA9IHN0eWxlW25hbWVdXG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUuc3R5bGVbbmFtZV0gPSBweChzdHlsZVtuYW1lXSlcbiAgICB9XG4gIH1cbn1cblxudmFyIENvZGVNaXJyb3JSeCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgcHJvcFR5cGVzOiB7XG4gICAgb25DaGFuZ2U6IFBULmZ1bmMsXG4gICAgb25Gb2N1czogUFQuZnVuYyxcbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbW9kZTogJ2phdmFzY3JpcHQnLFxuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX2NtID0gbmV3IENvZGVNaXJyb3IodGhpcy5nZXRET01Ob2RlKCksIHRoaXMucHJvcHMpXG4gICAgdGhpcy5fY20ub24oJ2tleWRvd24nLCB0aGlzLm9uS2V5RG93bilcbiAgICB0aGlzLl9jbS5vbignY2hhbmdlJywgZG9jID0+IHRoaXMuaXNNb3VudGVkKCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMub25DaGFuZ2UgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMub25DaGFuZ2UoZG9jLmdldFZhbHVlKCkpKVxuICAgIHRoaXMuX2NtLm9uKCdmb2N1cycsICgpID0+IHtcbiAgICAgIGlmICghdGhpcy5pc01vdW50ZWQoKSkgcmV0dXJuXG4gICAgICBpZiAodGhpcy5wcm9wcy5vbkZvY3VzICYmIHRoaXMucHJvcHMuYmx1cnJlZCkgdGhpcy5wcm9wcy5vbkZvY3VzKClcbiAgICB9KVxuICAgIHRoaXMuX2NtLm9uKCdibHVyJywgKCkgPT4ge1xuICAgICAgdGhpcy5pc01vdW50ZWQoKSAmJiB0aGlzLnByb3BzLm9uQmx1ciAmJiB0aGlzLnByb3BzLm9uQmx1cigpXG4gICAgfSlcbiAgICB2YXIgbm9kZSA9IHRoaXMuX2NtLmdldFdyYXBwZXJFbGVtZW50KClcbiAgICBpZiAodGhpcy5wcm9wcy5zdHlsZSkge1xuICAgICAgcmVhY3RTdHlsZShub2RlLCB0aGlzLnByb3BzLnN0eWxlKVxuICAgICAgdGhpcy5fY20ucmVmcmVzaCgpXG4gICAgfVxuICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5fY20ucmVmcmVzaCgpLCAxMDAwKVxuICB9LFxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZTogZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHZhciBzYW1lID0gdHJ1ZVxuICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcy5wcm9wcykge1xuICAgICAgaWYgKHRoaXMucHJvcHNbbmFtZV0gIT09IHByZXZQcm9wc1tuYW1lXSkge1xuICAgICAgICBpZiAobmFtZSA9PT0gJ3ZhbHVlJyAmJiB0aGlzLl9jbS5nZXRWYWx1ZSgpID09PSB0aGlzLnByb3BzW25hbWVdKSBjb250aW51ZVxuICAgICAgICB0aGlzLl9jbS5zZXRPcHRpb24obmFtZSwgdGhpcy5wcm9wc1tuYW1lXSB8fCAnJylcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIG5vZGUgPSB0aGlzLl9jbS5nZXRXcmFwcGVyRWxlbWVudCgpXG4gICAgaWYgKHRoaXMucHJvcHMuc3R5bGUpIHtcbiAgICAgIHJlYWN0U3R5bGUobm9kZSwgdGhpcy5wcm9wcy5zdHlsZSlcbiAgICAgIHRoaXMuX2NtLnJlZnJlc2goKVxuICAgIH1cbiAgfSxcblxuICBvbkZvY3VzOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuYmx1cnJlZCAmJiB0aGlzLnByb3BzLm9uRm9jdXMpIHtcbiAgICAgIHRoaXMucHJvcHMub25Gb2N1cygpXG4gICAgfVxuICB9LFxuXG4gIG9uS2V5RG93bjogZnVuY3Rpb24gKGVkaXRvciwgZSkge1xuICAgIGlmICghdGhpcy5pc01vdW50ZWQoKSkgcmV0dXJuXG4gICAgaWYgKHRoaXMucHJvcHMuYmx1cnJlZCAmJiB0aGlzLnByb3BzLm9uRm9jdXMpIHtcbiAgICAgIHRoaXMucHJvcHMub25Gb2N1cygpXG4gICAgfVxuICAgIGlmIChlZGl0b3Iuc3RhdGUuY29tcGxldGlvbkFjdGl2ZSAmJiBlLmtleUNvZGUgIT09IDI3KSB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKGUua2V5Q29kZSA9PT0gOSkgcmV0dXJuIGUuc3RvcFByb3BhZ2F0aW9uKClcbiAgICBpZiAoZS5zaGlmdEtleSB8fCBlLmN0cmxLZXkgfHwgZS5hbHRLZXkgfHwgZS5tZXRhS2V5KSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKGUua2V5Q29kZSA9PT0gMzgpIHsgLy8gdXBcbiAgICAgIC8vIGlmIChlZGl0b3IuZ2V0Q3Vyc29yKCkubGluZSA9PT0gMCkge1xuICAgICAgdmFyIGN1cnMgPSBlZGl0b3IuZ2V0Q3Vyc29yKClcbiAgICAgIGlmIChjdXJzLmxpbmUgPT09IDAgJiYgY3Vycy5jaCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5nb1VwICYmIHRoaXMucHJvcHMuZ29VcCgpXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlLmtleUNvZGUgPT09IDM3KSB7IC8vIGxlZnRcbiAgICAgIHZhciBjdXJzID0gZWRpdG9yLmdldEN1cnNvcigpXG4gICAgICBpZiAoY3Vycy5saW5lID09PSAwICYmIGN1cnMuY2ggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuZ29VcCAmJiB0aGlzLnByb3BzLmdvVXAoKVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09PSA0MCkgeyAvLyBkb3duXG4gICAgICAvLyBpZiAoZWRpdG9yLmdldEN1cnNvcigpLmxpbmUgPT09IGVkaXRvci5saW5lQ291bnQoKSAtIDEpIHtcbiAgICAgIHZhciBjdXJzID0gZWRpdG9yLmdldEN1cnNvcigpXG4gICAgICBpZiAoY3Vycy5saW5lID09PSBlZGl0b3IubGluZUNvdW50KCkgLSAxICYmIGN1cnMuY2ggPT09IGVkaXRvci5nZXRMaW5lKGN1cnMubGluZSkubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmdvRG93biAmJiB0aGlzLnByb3BzLmdvRG93bigpXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlLmtleUNvZGUgPT09IDM5KSB7IC8vIHJpZ2h0XG4gICAgICB2YXIgY3VycyA9IGVkaXRvci5nZXRDdXJzb3IoKVxuICAgICAgaWYgKGN1cnMubGluZSA9PT0gZWRpdG9yLmxpbmVDb3VudCgpIC0gMSAmJiBjdXJzLmNoID09PSBlZGl0b3IuZ2V0TGluZShjdXJzLmxpbmUpLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5nb0Rvd24gJiYgdGhpcy5wcm9wcy5nb0Rvd24odHJ1ZSlcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgZm9jdXM6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9jbS5mb2N1cygpXG4gIH0sXG5cbiAgaXNGb2N1c2VkOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NtLmhhc0ZvY3VzKClcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9J0NvZGVNaXJyb3JSeCcvPlxuICB9XG59KVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvZGVNaXJyb3JSeFxuIiwiXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpXG4gICwgc2FmZVN0cmluZyA9IHJlcXVpcmUoJy4uLy4uL2tlcm5lbHMvanMvc2FmZS1zdHJpbmcnKVxuICAsIENvbnZlcnQgPSByZXF1aXJlKCdhbnNpLXRvLWh0bWwnKVxuICAsIGNvbnZlcnQgPSBuZXcgQ29udmVydCgpXG5cbnZhciBoYW5kbGVycyA9IHtcbiAgZGVmYXVsdF9taW1lOiB7XG4gICAgJ2pzb24vbGluayc6IHZhbHVlID0+XG4gICAgICA8YSBocmVmPXt2YWx1ZS5ocmVmIHx8IHZhbHVlfSB0aXRsZT17dmFsdWUudGl0bGV9IHRhcmdldD0nX2JsYW5rJz57dmFsdWUudGV4dCB8fCB2YWx1ZX08L2E+LFxuICAgICd0ZXh0L2h0bWwnOiB2YWx1ZSA9PiBcbiAgICAgIDxkaXYgY2xhc3NOYW1lPSdtX0lQeXRob25fb3V0cHV0X2h0bWwnXG4gICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7XG4gICAgICAgICAgX19odG1sOiAvKidERVBSRUNBVEUgdGV4dC9odG1sOycgKyAqL3ZhbHVlXG4gICAgICAgIH19Lz4sXG4gICAgJ2pzb24vbG9nJzogKHZhbHVlLCBzdG9yZSkgPT5cbiAgICAgIDx1bCBjbGFzc05hbWU9J21fSVB5dGhvbl9vdXRwdXRfbG9nJyBzdHlsZT17e3BhZGRpbmc6IDAsIG1hcmdpbjogMCwgJ2xpc3Qtc3R5bGUnOiAnbm9uZSd9fT5cbiAgICAgICAge3ZhbHVlLm1hcCgoaXRlbSwgaSkgPT5cbiAgICAgICAgICA8bGkgc3R5bGU9e3tkaXNwbGF5OiAnaW5saW5lLWJsb2NrJywgcGFkZGluZzogJzAgNXB4J319PntkaXNwbGF5KGksIGl0ZW0sIHN0b3JlKX08L2xpPlxuICAgICAgICApfVxuICAgICAgPC91bD4sXG4gICAgJ2pzb24vZmlndXJlJzogdmFsdWUgPT5cbiAgICAgIDxkaXYgc3R5bGU9e3t0ZXh0QWxpZ246ICdjZW50ZXInLCBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJ319PlxuICAgICAgICA8aW1nIHNyYz17dmFsdWUuc3JjfS8+XG4gICAgICAgIDxkaXYgc3R5bGU9e3t0ZXh0QWxpZ246ICdjZW50ZXInfX0+e3ZhbHVlLnRpdGxlfTwvZGl2PlxuICAgICAgPC9kaXY+LFxuICAgICdpbWFnZS9wbmcnOiAodmFsdWUsIHMsIG0sIG1kYXRhKSA9PlxuICAgICAgPGltZyBjbGFzc05hbWU9J21fSVB5dGhvbl9vdXRwdXRfcG5nJ1xuICAgICAgICB3aWR0aD17bWRhdGEgJiYgbWRhdGEud2lkdGh9XG4gICAgICAgIGhlaWdodD17bWRhdGEgJiYgbWRhdGEuaGVpZ2h0fVxuICAgICAgICBzcmM9eydkYXRhOmltYWdlL3BuZztiYXNlNjQsJyArIHZhbHVlfS8+LFxuICAgICdpbWFnZS9qcGVnJzogKHZhbHVlLCBzLCBtLCBtZGF0YSkgPT5cbiAgICAgIDxpbWcgY2xhc3NOYW1lPSdtX0lQeXRob25fb3V0cHV0X2pwZWcnXG4gICAgICAgIHdpZHRoPXttZGF0YSAmJiBtZGF0YS53aWR0aH1cbiAgICAgICAgaGVpZ2h0PXttZGF0YSAmJiBtZGF0YS5oZWlnaHR9XG4gICAgICAgIHNyYz17J2RhdGE6aW1hZ2UvanBlZztiYXNlNjQsJyArIHZhbHVlfS8+LFxuICAgICd0ZXh0L2Fuc2knOiB2YWx1ZSA9PlxuICAgICAgPGRpdiBjbGFzc05hbWU9J21fSVB5dGhvbl9vdXRwdXRfYW5zaSdcbiAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tcbiAgICAgICAgICBfX2h0bWw6IGNvbnZlcnQudG9IdG1sKGVzY2FwZSh2YWx1ZSkpXG4gICAgICAgIH19Lz4sXG4gICAgJ3RleHQvcGxhaW4nOiB2YWx1ZSA9PlxuICAgICAgPGRpdiBjbGFzc05hbWU9J21fSVB5dGhvbl9vdXRwdXRfcGxhaW4nPlxuICAgICAgICB7dmFsdWV9XG4gICAgICA8L2Rpdj4sXG4gIH0sXG4gIGZvcm1hdHRlcnM6IFtdLFxuICBtaW1lOiB7XG4gIH1cbn1cblxuLypcbmZ1bmN0aW9uIGhhbmRsZUltYWdlKGZtdCwgdmFsdWUsIHN0b3JlLCBtZXRhLCBtZGF0YSkge1xuICBsZXQgcHJvcHMgPSB7XG4gICAgc3JjOiB2YWx1ZVxuICB9XG4gIGlmIChtZGF0YSkge1xuICAgIGlmIChtZGF0YS53aWR0aCkgcHJvcHMud2lkdGggPSBtZGF0YS53aWR0aFxuICAgIGlmIChtZGF0YS5oZWlnaHQpIHByb3BzLmhlaWdodCA9IG1kYXRhLmhlaWdodFxuICB9XG4gIGxldCBjbHMgPSBcbn1cbiovXG5cbmZ1bmN0aW9uIGVzY2FwZSh0ZXh0KSB7XG4gIHJldHVybiB0ZXh0ID9cbiAgICB0ZXh0LnJlcGxhY2UoJyYnLCAnJmFtcDsnKVxuICAgICAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXG4gICAgICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JykgOiAnbnVsbCdcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRpc3BsYXk6IGRpc3BsYXksXG4gIGZvcm1hdDogZm9ybWF0LFxuICBoYW5kbGVyczogaGFuZGxlcnMsXG4gIGRpc3BsYXllcjogZGlzcGxheWVyLFxuICBmb3JtYXR0ZXI6IGZvcm1hdHRlcixcbn1cblxuZnVuY3Rpb24gZGlzcGxheShrZXksIHZhbHVlLCBzdG9yZSwgbWV0YSkge1xuICBmb3IgKHZhciBuYW1lIGluIGhhbmRsZXJzLm1pbWUpIHtcbiAgICBpZiAodmFsdWVbbmFtZV0pIHtcbiAgICAgIHZhciByZXMgPSBoYW5kbGVycy5taW1lW25hbWVdKHZhbHVlW25hbWVdLCBzdG9yZSwgbWV0YSwgdmFsdWUubWV0YWRhdGEgJiYgdmFsdWUubWV0YWRhdGFbbmFtZV0pXG4gICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9e1xuICAgICAgICAnbV9JUHl0aG9uX291dHB1dCBtX0lQeXRob25fb3V0cHV0LScgKyBuYW1lLnJlcGxhY2UoJy8nLCAnLScpXG4gICAgICB9IGtleT17a2V5fT57cmVzfTwvZGl2PlxuICAgIH1cbiAgfVxuICBmb3IgKHZhciBuYW1lIGluIGhhbmRsZXJzLmRlZmF1bHRfbWltZSkge1xuICAgIGlmICh2YWx1ZVtuYW1lXSkge1xuICAgICAgdmFyIHJlcyA9IGhhbmRsZXJzLmRlZmF1bHRfbWltZVtuYW1lXSh2YWx1ZVtuYW1lXSwgc3RvcmUsIG1ldGEsIHZhbHVlLm1ldGFkYXRhICYmIHZhbHVlLm1ldGFkYXRhW25hbWVdKVxuICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXtcbiAgICAgICAgJ21fSVB5dGhvbl9vdXRwdXQgbV9JUHl0aG9uX291dHB1dC0nICsgbmFtZS5yZXBsYWNlKCcvJywgJy0nKVxuICAgICAgfSBrZXk9e2tleX0+e3Jlc308L2Rpdj5cbiAgICB9XG4gIH1cbiAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPSdtX0lQeXRob25fb3V0cHV0JyBrZXk9e2tleX0+XG4gICAgPGVtPlVua25vd24gbWltZSB0eXBlPC9lbT5cbiAgPC9kaXY+XG59XG5cbmZ1bmN0aW9uIGZvcm1hdCh2YWx1ZSwgd2luZG93KSB7XG4gIHZhciByZXN1bHQgPSB7XG4gICAgJ3RleHQvcGxhaW4nOiBzYWZlU3RyaW5nKHZhbHVlKSxcbiAgfVxuICBoYW5kbGVycy5mb3JtYXR0ZXJzLnNvbWUoZm0gPT4ge1xuICAgIHZhciByZXMgPSBmbVswXSh2YWx1ZSwgd2luZG93KVxuICAgIGlmIChyZXMgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZhbHNlXG4gICAgcmVzdWx0W2ZtWzFdXSA9IHJlc1xuICAgIHJldHVybiB0cnVlXG4gIH0pXG4gIHJldHVybiByZXN1bHRcbn1cblxuZnVuY3Rpb24gZGlzcGxheWVyKGhhbmRsZXIsIG1pbWUpIHtcbiAgaGFuZGxlcnMubWltZVttaW1lXSA9IGhhbmRsZXJcbn1cblxuZnVuY3Rpb24gZm9ybWF0dGVyKGhhbmRsZXIsIG1pbWUpIHtcbiAgaGFuZGxlcnMuZm9ybWF0dGVycy5wdXNoKFtoYW5kbGVyLCBtaW1lXSlcbn1cblxuIiwiXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpXG4gICwgTGlzdGVuZXIgPSByZXF1aXJlKCd0cmVlZC9saXN0ZW5lcicpXG5cbiAgLCBLZXJuZWxDb250cm9sbGVyID0gcmVxdWlyZSgnLi9rZXJuZWwtY29udHJvbGxlcicpXG5cbm1vZHVsZS5leHBvcnRzID0gKGtlcm5lbENvbmZpZywgY29uZmlnKSA9PiAoe1xuICB0aXRsZTogJ0NvZGUgUkVQTCcsXG5cbiAgdHlwZXM6IHtcbiAgICAnY29kZS1wbGF5Z3JvdW5kJzoge1xuICAgICAgdGl0bGU6ICdDb2RlIFBsYXlncm91bmQnLFxuICAgICAgc2hvcnRjdXQ6ICdwJyxcbiAgICB9LFxuICAgIGlweXRob246IHtcbiAgICAgIHRpdGxlOiAnQ29kZSBCbG9jaycsXG4gICAgICBzaG9ydGN1dDogJ2MnLFxuICAgICAgdXBkYXRlOiB7bGFuZ3VhZ2U6IGtlcm5lbENvbmZpZy5sYW5ndWFnZX0sXG4gICAgfVxuICB9LFxuXG4gIGtleXM6IHtcbiAgICAnZXhlY3V0ZSc6IHtcbiAgICAgIHR5cGU6ICdpcHl0aG9uJyxcbiAgICAgIG5vcm1hbDogJ3NoaWZ0K2VudGVyJyxcbiAgICAgIGluc2VydDogJ3NoaWZ0K2VudGVyJyxcbiAgICAgIHZpc3VhbDogJ3NoaWZ0K2VudGVyJyxcbiAgICB9LFxuICAgICdleGVjdXRlIGRlZXAnOiB7XG4gICAgICBub3JtYWw6ICdjdHJsK3NoaWZ0K2VudGVyJyxcbiAgICAgIGluc2VydDogJ2N0cmwrc2hpZnQrZW50ZXInLFxuICAgICAgdmlzdWFsOiAnY3RybCtzaGlmdCtlbnRlcicsXG4gICAgfSxcbiAgICAndG9nZ2xlIGRpc3BsYXkgY29sbGFwc2UnOiB7XG4gICAgICB0aXRsZTogJyh1bikgY29sbGFwc2UgY29kZSBvdXRwdXQnLFxuICAgICAgbm9ybWFsOiAnc3BhY2UnLFxuICAgIH0sXG4gICAgJ2V4ZWN1dGUgYW5kIGFkZCc6IHtcbiAgICAgIHR5cGU6ICdpcHl0aG9uJyxcbiAgICAgIHRpdGxlOiAnZXhlY3V0ZSBhbmQgYWRkIGEgbm9kZSBhZnRlcicsXG4gICAgICBub3JtYWw6ICdhbHQrZW50ZXInLFxuICAgICAgaW5zZXJ0OiAnYWx0K2VudGVyJyxcbiAgICB9LFxuICAgICd0b2dnbGUgZWRpdG9yIGNvbGxhcHNlJzoge1xuICAgICAgdGl0bGU6ICcodW4pIGNvbGxhcHNlIGNvZGUgZWRpdG9yJyxcbiAgICAgIG5vcm1hbDogJ3NoaWZ0K3NwYWNlJyxcbiAgICB9LFxuICB9LFxuXG4gIGNvbnRleHRNZW51OiBmdW5jdGlvbiAobm9kZSwgc3RhdGUpIHtcbiAgICBpZiAoIW5vZGUgfHwgbm9kZS50eXBlICE9PSAnaXB5dGhvbicpIHJldHVyblxuICAgIHJldHVybiBbe1xuICAgICAgdGl0bGU6ICdSdW4gQmxvY2snLFxuICAgICAgYWN0aW9uOiAnZXhlY3V0ZScsXG4gICAgfSwge1xuICAgICAgdGl0bGU6ICdUb2dnbGUgT3V0cHV0JyxcbiAgICAgIGFjdGlvbjogJ3RvZ2dsZURpc3BsYXlDb2xsYXBzZScsXG4gICAgfSwge1xuICAgICAgdGl0bGU6ICdUb2dnbGUgQ29kZScsXG4gICAgICBhY3Rpb246ICd0b2dnbGVFZGl0b3JDb2xsYXBzZScsXG4gICAgfV1cbiAgfSxcblxuICBhcHA6IHtcbiAgICBibG9ja3M6IHtcbiAgICAgIGljb246IGZ1bmN0aW9uIChhY3Rpb25zLCBzdGF0ZSwgc3RvcmUpIHtcbiAgICAgIH0sXG5cbiAgICAgIGJhcjogZnVuY3Rpb24gKGFjdGlvbnMsIHN0YXRlLCBzdG9yZSkge1xuICAgICAgICByZXR1cm4gPEtlcm5lbENvbnRyb2xsZXIgc3RvcmU9e3N0b3JlfSB0eXBlPXtrZXJuZWxDb25maWcudHlwZX0vPlxuICAgICAgfSxcbiAgICB9LFxuICB9LFxuXG4gIHZpZXc6IHtcbiAgICBnbG9iYWw6IGZ1bmN0aW9uIChzdG9yZSkge1xuICAgICAgcmV0dXJuIDxLZXJuZWxDb250cm9sbGVyXG4gICAgICAgIGtleT1cIml0cmVlZC1jb250cm9sbGVyXCJcbiAgICAgICAgc3RvcmU9e3N0b3JlfVxuICAgICAgICB0eXBlPXtrZXJuZWxDb25maWcudHlwZX1cbiAgICAgICAgcmVtb3RlPXtrZXJuZWxDb25maWcucmVtb3RlfVxuICAgICAgLz5cbiAgICB9LFxuICB9LFxuXG4gIGRiOiB7XG4gICAgYWRkTmV3Tm9kZUF0dHJzOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ2lweXRob24nKSB7XG4gICAgICAgIG5vZGUubGFuZ3VhZ2UgPSBrZXJuZWxDb25maWcubGFuZ3VhZ2VcbiAgICAgIH1cbiAgICB9LFxuICB9LFxuXG4gIHN0b3JlOiB7XG4gICAgaW5pdDogZnVuY3Rpb24gKHN0b3JlKSB7XG4gICAgICB2YXIgSyA9IGtlcm5lbENvbmZpZy5rZXJuZWw7XG5cbiAgICAgIHZhciBrZXJuZWwgPSBzdG9yZS5fZ2xvYmFscy5rZXJuZWwgPSBuZXcgSyhzdG9yZS5kYi5yb290LCBudWxsLCBrZXJuZWxDb25maWcubGFuZ3VhZ2UpXG4gICAgICB2YXIgaG9zdCA9IGNvbmZpZyAmJiBjb25maWcuaG9zdHMgJiYgY29uZmlnLmhvc3RzW2tlcm5lbC50eXBlXVxuICAgICAgc3RvcmUuX2dsb2JhbHMua2VybmVsRXJyb3IgPSBmYWxzZVxuICAgICAga2VybmVsLm9uKCdzZXNzaW9uJywgKCkgPT4ge1xuICAgICAgICBzdG9yZS5jaGFuZ2VkKHN0b3JlLmV2ZW50cy5rZXJuZWxTZXNzaW9uKCkpXG4gICAgICB9KVxuICAgICAga2VybmVsLm9uKCdzdGF0dXMnLCAoKSA9PiB7XG4gICAgICAgIHN0b3JlLmNoYW5nZWQoc3RvcmUuZXZlbnRzLmtlcm5lbFN0YXR1cygpKVxuICAgICAgfSlcbiAgICAgIGlmIChob3N0IHx8ICFrZXJuZWxDb25maWcucmVtb3RlKSB7XG4gICAgICAgIGlmIChob3N0ICYmIGhvc3QuaW5kZXhPZignOicpID09PSAtMSkge1xuICAgICAgICAgIGhvc3QgPSAnbG9jYWxob3N0OicgKyBob3N0XG4gICAgICAgIH1cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAga2VybmVsLmluaXQoaG9zdCwgKCkgPT4ge1xuICAgICAgICAgIH0pXG4gICAgICAgIH0sIDApO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICB0ZWFyZG93bjogZnVuY3Rpb24gKHN0b3JlKSB7XG4gICAgICBzdG9yZS5fZ2xvYmFscy5rZXJuZWwudGVhcmRvd24gJiYgc3RvcmUuX2dsb2JhbHMua2VybmVsLnRlYXJkb3duKClcbiAgICB9LFxuXG4gICAgYWN0aW9uczogcmVxdWlyZSgnLi9hY3Rpb25zJykoa2VybmVsQ29uZmlnLnR5cGUsIGtlcm5lbENvbmZpZy5sYW5ndWFnZSksXG4gICAgZ2V0dGVyczoge1xuICAgICAga2VybmVsU3RhdHVzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdsb2JhbHMua2VybmVsICYmIHRoaXMuZ2xvYmFscy5rZXJuZWwuc3RhdHVzXG4gICAgICB9LFxuICAgICAga2VybmVsSG9zdDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nbG9iYWxzLmtlcm5lbCAmJiB0aGlzLmdsb2JhbHMua2VybmVsLmhvc3RcbiAgICAgIH0sXG4gICAgICBrZXJuZWxTZXNzaW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdsb2JhbHMua2VybmVsICYmIHRoaXMuZ2xvYmFscy5rZXJuZWwuc2Vzc2lvblxuICAgICAgfSxcbiAgICAgIGtlcm5lbEVycm9yOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdsb2JhbHMua2VybmVsRXJyb3JcbiAgICAgIH0sXG4gICAgICBrZXJuZWxzQXZhaWxhYmxlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdsb2JhbHMua2VybmVsICYmIHRoaXMuZ2xvYmFscy5rZXJuZWwuYXZhaWxhYmxlX2tlcm5lbHNcbiAgICAgIH0sXG4gICAgfSxcblxuICAgIGV2ZW50czoge1xuICAgICAga2VybmVsU2Vzc2lvbjogKCkgPT4gJ2tlcm5lbC1zZXNzaW9uJyxcbiAgICAgIGtlcm5lbFN0YXR1czogKCkgPT4gJ2tlcm5lbC1zdGF0dXMnLFxuICAgICAga2VybmVsRXJyb3I6ICgpID0+ICdrZXJuZWwtZXJyb3InLFxuICAgIH1cbiAgfSxcblxuICBub2RlOiByZXF1aXJlKCcuL25vZGUnKSxcbn0pXG5cbiIsIlxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKVxuXG52YXIgS2VybmVsQ2hhbmdlciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGhvc3Q6IHRoaXMucHJvcHMuaW5pdGlhbFZhbHVlIHx8ICdsb2NhbGhvc3Q6ODAwMicsXG4gICAgICB0eXBlOiB0aGlzLnByb3BzLmluaXRpYWxUeXBlLFxuICAgIH1cbiAgfSxcbiAgX29uQ2hhbmdlOiBmdW5jdGlvbiAoZSkge1xuICAgIHRoaXMuc2V0U3RhdGUoe2hvc3Q6IGUudGFyZ2V0LnZhbHVlfSlcbiAgfSxcbiAgX3NldFR5cGU6IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7dHlwZTogdHlwZX0pXG4gIH0sXG4gIF9vbkRvbmU6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnByb3BzLm9uRG9uZSh0aGlzLnN0YXRlLmhvc3QpXG4gIH0sXG4gIF9vbktleURvd246IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGUua2V5ID09PSAnRW50ZXInKSB7XG4gICAgICB0aGlzLl9vbkRvbmUoKVxuICAgIH1cbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPSdtX0lQeXRob25LZXJuZWxfY2hhbmdlcic+XG4gICAgICB7LyoqIG5vdCBnb2luZyB0byB1c2UgdGhpc1xuICAgICAgPHNwYW5cbiAgICAgICAgY2xhc3NOYW1lPXtcbiAgICAgICAgICAnbV9JUHl0aG9uS2VybmVsX2NoYW5nZXJfYnRuJyArICh0eXBlPT09J2lweXRob24nID8gJyBtX0lQeXRob25LZXJuZWxfY2hhbmdlcl9idG4tYWN0aXZlJyA6ICcnKVxuICAgICAgICB9XG4gICAgICAgIG9uQ2xpY2s9e3RoaXMuX3NldFR5cGUuYmluZChudWxsLCAnaXB5dGhvbicpfT5cbiAgICAgICAgUFxuICAgICAgPC9zcGFuPlxuICAgICAgPHNwYW5cbiAgICAgICAgY2xhc3NOYW1lPXtcbiAgICAgICAgICAnbV9JUHl0aG9uS2VybmVsX2NoYW5nZXJfYnRuJyArICh0eXBlPT09J2dvcmlsbGEnID8gJyBtX0lQeXRob25LZXJuZWxfY2hhbmdlcl9idG4tYWN0aXZlJyA6ICcnKVxuICAgICAgICB9XG4gICAgICAgIG9uQ2xpY2s9e3RoaXMuX3NldFR5cGUuYmluZChudWxsLCAnZ29yaWxsYScpfT5cbiAgICAgICAgR1xuICAgICAgPC9zcGFuPlxuICAgICAgKiovfVxuICAgICAgPGlucHV0XG4gICAgICAgIHBsYWNlaG9sZGVyPXsodGhpcy5wcm9wcy50eXBlID09PSAnaXB5dGhvbicgPyAnaVB5dGhvbicgOiBcIkdvcmlsbGEtcmVwbFwiKSArIFwiIGhvc3RcIn1cbiAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuaG9zdH1cbiAgICAgICAgb25DaGFuZ2U9e3RoaXMuX29uQ2hhbmdlfVxuICAgICAgICBvbktleURvd249e3RoaXMuX29uS2V5RG93bn0vPlxuICAgICAgPHNwYW4gY2xhc3NOYW1lPSdtX0lQeXRob25LZXJuZWxfY2hhbmdlcl9idG4nIG9uQ2xpY2s9e3RoaXMuX29uRG9uZX0gc3R5bGU9e3tcbiAgICAgICAgY29sb3I6ICdncmVlbicsXG4gICAgICB9fT4mIzEwMDA0Ozwvc3Bhbj5cbiAgICAgIDxzcGFuIGNsYXNzTmFtZT0nbV9JUHl0aG9uS2VybmVsX2NoYW5nZXJfYnRuJyBvbkNsaWNrPXt0aGlzLnByb3BzLm9uQ2FuY2VsfSBzdHlsZT17e1xuICAgICAgICBjb2xvcjogJ3JlZCcsXG4gICAgICB9fT4mIzEwMDA3Ozwvc3Bhbj5cbiAgICA8L2Rpdj5cbiAgfVxufSlcblxubW9kdWxlLmV4cG9ydHMgPSBLZXJuZWxDaGFuZ2VyXG5cbiIsIlxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKVxuICAsIExpc3RlbmVyID0gcmVxdWlyZSgndHJlZWQvbGlzdGVuZXInKVxuICAsIEtlcm5lbEluZGljYXRvciA9IHJlcXVpcmUoJy4va2VybmVsLWluZGljYXRvcicpXG4gICwgS2VybmVsQ2hhbmdlciA9IHJlcXVpcmUoJy4va2VybmVsLWNoYW5nZXInKVxuXG52YXIgS2VybmVsQ29udHJvbGxlciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgcHJvcFR5cGVzOiB7XG4gICAgcmVtb3RlOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgfSxcblxuICBtaXhpbnM6IFtMaXN0ZW5lcih7XG4gICAgc3RvcmVBdHRyczogZnVuY3Rpb24gKGdldHRlcnMsIHByb3BzKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBrZXJuZWxIb3N0OiBnZXR0ZXJzLmtlcm5lbEhvc3QoKSxcbiAgICAgICAga2VybmVsU3RhdHVzOiBnZXR0ZXJzLmtlcm5lbFN0YXR1cygpLFxuICAgICAgICBrZXJuZWxTZXNzaW9uOiBnZXR0ZXJzLmtlcm5lbFNlc3Npb24oKSxcbiAgICAgICAga2VybmVsRXJyb3I6IGdldHRlcnMua2VybmVsRXJyb3IoKSxcbiAgICAgICAga2VybmVsc0F2YWlsYWJsZTogZ2V0dGVycy5rZXJuZWxzQXZhaWxhYmxlKCksXG4gICAgICB9XG4gICAgfSxcblxuICAgIGdldExpc3RlbmVyczogZnVuY3Rpb24gKHByb3BzLCBldmVudHMpIHtcbiAgICAgIHJldHVybiBbZXZlbnRzLmtlcm5lbFN0YXR1cygpLFxuICAgICAgICAgICAgICBldmVudHMua2VybmVsU2Vzc2lvbigpLFxuICAgICAgICAgICAgICBldmVudHMua2VybmVsRXJyb3IoKV1cbiAgICB9LFxuICB9KV0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNoYW5naW5nOiBmYWxzZVxuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uIChwcmV2UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgIGlmICghcHJldlN0YXRlLmtlcm5lbEVycm9yICYmIHRoaXMuc3RhdGUua2VybmVsRXJyb3IpIHtcbiAgICAgIGlmICh0aGlzLl90b3V0KSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl90b3V0KVxuICAgICAgfVxuICAgICAgdGhpcy5fdG91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLnByb3BzLnN0b3JlLmFjdGlvbnMuY2xlYXJLZXJuZWxFcnJvcigpXG4gICAgICAgIHRoaXMuX3RvdXQgPSBudWxsXG4gICAgICB9LCAyMDAwKVxuICAgIH1cbiAgfSxcblxuICBjb250ZXh0VHlwZXM6IHtcbiAgICB1cGRhdGVQbHVnaW46IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIGdldFBsdWdpbkNvbmZpZzogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gIH0sXG5cbiAgX29uQ29ubmVjdDogZnVuY3Rpb24gKGhvc3QpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtjaGFuZ2luZzogZmFsc2V9KVxuICAgIHZhciBrID0gdGhpcy5wcm9wcy5zdG9yZS5nbG9iYWxzLmtlcm5lbFxuICAgIGsuZGlzY29ubmVjdCgpXG4gICAgay5pbml0KGhvc3QsIChlcnIpID0+IHtcbiAgICAgIGxldCBob3N0cyA9IHRoaXMuY29udGV4dC5nZXRQbHVnaW5Db25maWcoJ2l0cmVlZCcpLmhvc3RzIHx8IHt9XG4gICAgICBob3N0c1trLnR5cGVdID0gaG9zdFxuXG4gICAgICB0aGlzLmNvbnRleHQudXBkYXRlUGx1Z2luKCdpdHJlZWQnLCB7aG9zdHM6IGhvc3RzfSlcbiAgICAgIC8vIGRvIHNvbWV0aGluZyBvbiBlcnJvcj9cbiAgICB9KVxuICB9LFxuXG4gIF9vbkludGVycnVwdDogZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoZSkge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgfVxuICAgIHZhciBrID0gdGhpcy5wcm9wcy5zdG9yZS5nbG9iYWxzLmtlcm5lbFxuICAgIGsuaW50ZXJydXB0KClcbiAgfSxcblxuICBfb25SZWNvbm5lY3Q6IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGUpIHtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIH1cbiAgICB0aGlzLl9vbkNvbm5lY3QodGhpcy5zdGF0ZS5rZXJuZWxIb3N0KVxuICB9LFxuXG4gIF9vbkNoYW5nZTogZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoZSkge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdGUoe2NoYW5naW5nOiB0cnVlfSlcbiAgfSxcblxuICBfb25DYW5jZWw6IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGUpIHtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIH1cbiAgICB0aGlzLnNldFN0YXRlKHtjaGFuZ2luZzogZmFsc2V9KVxuICB9LFxuXG4gIF9vbkNob29zZUtlcm5lbDogZnVuY3Rpb24gKGtlcm5lbCkge1xuICAgIHZhciBrID0gdGhpcy5wcm9wcy5zdG9yZS5nbG9iYWxzLmtlcm5lbFxuICAgIGlmICgha2VybmVsKSB7XG4gICAgICBrLm5ld0tlcm5lbCgpXG4gICAgfSBlbHNlIHtcbiAgICAgIGsudXNlS2VybmVsKGtlcm5lbClcbiAgICB9XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXsnbV9JUHl0aG9uS2VybmVsIG1fSVB5dGhvbktlcm5lbC0nICsgdGhpcy5zdGF0ZS5rZXJuZWxTdGF0dXN9PlxuICAgICAge3RoaXMuc3RhdGUua2VybmVsRXJyb3IgJiZcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J21fSVB5dGhvbktlcm5lbF9lcnJvcic+e3RoaXMuc3RhdGUua2VybmVsRXJyb3J9PC9kaXY+fVxuICAgICAge3RoaXMuc3RhdGUuY2hhbmdpbmcgP1xuICAgICAgICA8S2VybmVsQ2hhbmdlclxuICAgICAgICAgIGluaXRpYWxWYWx1ZT17dGhpcy5zdGF0ZS5rZXJuZWxIb3N0fVxuICAgICAgICAgIHR5cGU9e3RoaXMucHJvcHMudHlwZX1cbiAgICAgICAgICBvbkNhbmNlbD17dGhpcy5fb25DYW5jZWx9XG4gICAgICAgICAgb25Eb25lPXt0aGlzLl9vbkNvbm5lY3R9Lz4gOlxuICAgICAgICA8S2VybmVsSW5kaWNhdG9yXG4gICAgICAgICAgcmVtb3RlPXt0aGlzLnByb3BzLnJlbW90ZX1cbiAgICAgICAgICBvblJlY29ubmVjdD17dGhpcy5fb25SZWNvbm5lY3R9XG4gICAgICAgICAgb25JbnRlcnJ1cHQ9e3RoaXMuX29uSW50ZXJydXB0fVxuICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLl9vbkNoYW5nZX1cbiAgICAgICAgICB0eXBlPXt0aGlzLnByb3BzLnR5cGV9XG4gICAgICAgICAgaG9zdD17dGhpcy5zdGF0ZS5rZXJuZWxIb3N0fVxuICAgICAgICAgIHN0YXR1cz17dGhpcy5zdGF0ZS5rZXJuZWxTdGF0dXN9XG4gICAgICAgICAga2VybmVscz17dGhpcy5zdGF0ZS5rZXJuZWxzQXZhaWxhYmxlfVxuICAgICAgICAgIG9uQ2hvb3NlS2VybmVsPXt0aGlzLl9vbkNob29zZUtlcm5lbH1cbiAgICAgICAgICBzZXNzaW9uPXt0aGlzLnN0YXRlLmtlcm5lbFNlc3Npb259Lz5cbiAgICAgIH1cbiAgICA8L2Rpdj5cbiAgfSxcbn0pXG5cbm1vZHVsZS5leHBvcnRzID0gS2VybmVsQ29udHJvbGxlclxuXG4iLCJcbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0JylcbiAgLCBQVCA9IFJlYWN0LlByb3BUeXBlc1xuXG52YXIgS2VybmVsUGlja2VyID0gcmVxdWlyZSgnLi9rZXJuZWwtcGlja2VyJylcblxudmFyIEtlcm5lbEluZGljYXRvciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgcHJvcFR5cGVzOiB7XG4gICAgdHlwZTogUFQuc3RyaW5nLFxuICAgIG9uQ2hhbmdlOiBQVC5mdW5jLFxuICAgIG9uUmVjb25uZWN0OiBQVC5mdW5jLFxuICAgIG9uQ2hvb3NlS2VybmVsOiBQVC5mdW5jLFxuICAgIGhvc3Q6IFBULnN0cmluZyxcbiAgICBzdGF0dXM6IFBULnN0cmluZyxcbiAgICBrZXJuZWxzOiBQVC5hcnJheSxcbiAgICBzZXNzaW9uOiBQVC5zdHJpbmcsXG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuc3RhdHVzID09PSAnZXJyb3InKSB7XG4gICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9J21fSVB5dGhvbktlcm5lbF9pbmRpY2F0b3IgbV9JUHl0aG9uS2VybmVsX2luZGljYXRvci1lcnJvcic+XG4gICAgICAgIEVycm9yIGNvbm5lY3RpbmcgdG8ge3RoaXMucHJvcHMuaG9zdH0hXG4gICAgICAgIDxidXR0b24gb25DbGljaz17dGhpcy5wcm9wcy5vblJlY29ubmVjdH0+UmVjb25uZWN0PC9idXR0b24+XG4gICAgICAgIDxidXR0b24gb25DbGljaz17dGhpcy5wcm9wcy5vbkNoYW5nZX0+Q2hhbmdlIEhvc3Q8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLnN0YXR1cyA9PT0gJ2F2YWlsYWJsZS1rZXJuZWxzJykge1xuICAgICAgcmV0dXJuIDxLZXJuZWxQaWNrZXJcbiAgICAgICAgb25QaWNrPXt0aGlzLnByb3BzLm9uQ2hvb3NlS2VybmVsfVxuICAgICAgICBvbkNhbmNlbD17dGhpcy5wcm9wcy5vbkNoYW5nZX1cbiAgICAgICAga2VybmVscz17dGhpcy5wcm9wcy5rZXJuZWxzfS8+XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnByb3BzLmhvc3QgJiYgdGhpcy5wcm9wcy5yZW1vdGUpIHtcbiAgICAgIHJldHVybiA8ZGl2XG4gICAgICAgICAgb25DbGljaz17dGhpcy5wcm9wcy5vbkNoYW5nZX1cbiAgICAgICAgICBjbGFzc05hbWU9J21fSVB5dGhvbktlcm5lbF9pbmRpY2F0b3IgbV9JUHl0aG9uS2VybmVsX2luZGljYXRvci1kaXNjb25uZWN0ZWQnPlxuICAgICAgICBTZXQgdGhlIHJlcGwgaG9zdFxuICAgICAgPC9kaXY+XG4gICAgfVxuXG4gICAgcmV0dXJuIDxkaXZcbiAgICAgICAgb25DbGljaz17dGhpcy5wcm9wcy5ob3N0ICYmIHRoaXMucHJvcHMub25DaGFuZ2V9XG4gICAgICAgIGNsYXNzTmFtZT17XG4gICAgICAgICAgJ21fSVB5dGhvbktlcm5lbF9pbmRpY2F0b3IgbV9JUHl0aG9uS2VybmVsX2luZGljYXRvci0nICsgdGhpcy5wcm9wcy5zdGF0dXNcbiAgICAgICAgfT5cbiAgICAgIHt0aGlzLnByb3BzLmhvc3QgfHwgJ0xvY2FsJ31cbiAgICAgIHt0aGlzLnByb3BzLnN0YXR1cyA9PT0gJ3J1bm5pbmcnICYmXG4gICAgICAgIDxzcGFuXG4gICAgICAgICAgb25DbGljaz17dGhpcy5wcm9wcy5vbkludGVycnVwdH1cbiAgICAgICAgICB0aXRsZT0naW50ZXJydXB0J1xuICAgICAgICAgIGNsYXNzTmFtZT0nbV9JUHl0aG9uS2VybmVsX2luZGljYXRvcl9pbnRlcnJ1cHQnPiZ0aW1lczs8L3NwYW4+fVxuICAgICAgPHNwYW4gY2xhc3NOYW1lPXtcbiAgICAgICAgJ21fSVB5dGhvbktlcm5lbF9pbmRpY2F0b3JfaWNvbiBtX0lQeXRob25LZXJuZWxfaW5kaWNhdG9yX2ljb24tJyArIHRoaXMucHJvcHMuc3RhdHVzXG4gICAgICB9Lz5cbiAgICAgIHt0aGlzLnByb3BzLnN0YXR1cyA9PT0gJ2Rpc2Nvbm5lY3RlZCcgJiZcbiAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLnByb3BzLm9uUmVjb25uZWN0fT5SZWNvbm5lY3Q8L2J1dHRvbj59XG4gICAgICB7dGhpcy5wcm9wcy5zdGF0dXMgPT09ICdkaXNjb25uZWN0ZWQnICYmXG4gICAgICAgIDxidXR0b24gb25DbGljaz17dGhpcy5wcm9wcy5vbkNoYW5nZX0+Q2hhbmdlIEhvc3Q8L2J1dHRvbj59XG4gICAgPC9kaXY+XG4gIH1cbn0pXG5cbm1vZHVsZS5leHBvcnRzID0gS2VybmVsSW5kaWNhdG9yXG5cbiIsIlxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKVxuICAsIFBUID0gUmVhY3QuUHJvcFR5cGVzXG5cbnZhciBLZXJuZWxQaWNrZXIgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIHByb3BUeXBlczoge1xuICAgIG9uQ2FuY2VsOiBQVC5mdW5jLFxuICAgIG9uUGljazogUFQuZnVuYyxcbiAgICBrZXJuZWxzOiBQVC5hcnJheSxcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb3BlbjogZmFsc2UsXG4gICAgfVxuICB9LFxuXG4gIF90b2dnbGVPcGVuOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7b3BlbjogIXRoaXMuc3RhdGUub3Blbn0pXG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPSdLZXJuZWxQaWNrZXInPlxuICAgICAgPHNwYW5cbiAgICAgICAgICBvbkNsaWNrPXt0aGlzLl90b2dnbGVPcGVufVxuICAgICAgICAgIGNsYXNzTmFtZT0nS2VybmVsUGlja2VyX2xhYmVsJz5cbiAgICAgICAgQ2hvb3NlIGtlcm5lbFxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9J0tlcm5lbFBpY2tlcl9jbG9zZScgb25DbGljaz17dGhpcy5wcm9wcy5vbkNhbmNlbH0+JnRpbWVzOzwvc3Bhbj5cbiAgICAgIDwvc3Bhbj5cbiAgICAgIHt0aGlzLnN0YXRlLm9wZW4gJiYgPHVsIGNsYXNzTmFtZT0nS2VybmVsUGlja2VyX2xpc3QnPlxuICAgICAgICB7dGhpcy5wcm9wcy5rZXJuZWxzLm1hcChrZXJuZWwgPT5cbiAgICAgICAgICA8bGlcbiAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5wcm9wcy5vblBpY2suYmluZChudWxsLCBrZXJuZWwua2VybmVsKX1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPSdLZXJuZWxQaWNrZXJfaXRlbSc+XG4gICAgICAgICAgICB7a2VybmVsLmtlcm5lbC5pZH1cbiAgICAgICAgICA8L2xpPil9XG4gICAgICAgIDxsaSBvbkNsaWNrPXt0aGlzLnByb3BzLm9uUGljay5iaW5kKG51bGwsIGZhbHNlKX0gY2xhc3NOYW1lPSdLZXJuZWxQaWNrZXJfaXRlbSc+XG4gICAgICAgICAgTmV3IEtlcm5lbFxuICAgICAgICA8L2xpPlxuICAgICAgPC91bD59XG4gICAgPC9kaXY+XG4gIH1cbn0pXG5cbm1vZHVsZS5leHBvcnRzID0gS2VybmVsUGlja2VyXG4iLCJcbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0L2FkZG9ucycpXG4gICwgY3ggPSBSZWFjdC5hZGRvbnMuY2xhc3NTZXRcblxuICAsIENvbnZlcnQgPSByZXF1aXJlKCdhbnNpLXRvLWh0bWwnKVxuICAsIGNvbnZlcnQgPSBuZXcgQ29udmVydCgpXG5cbiAgLCBQbGF5Z3JvdW5kID0gcmVxdWlyZSgnLi9wbGF5Z3JvdW5kJylcbiAgLCBDb2RlRWRpdG9yID0gcmVxdWlyZSgnLi9jb2RlLWVkaXRvcicpXG4gICwgT3V0cHV0ID0gcmVxdWlyZSgnLi9vdXRwdXQnKVxuXG5mdW5jdGlvbiBjb2RlT3V0cHV0KG5vZGUsIGFjdGlvbnMsIHN0YXRlLCBzdG9yZSkge1xuICBpZiAobm9kZS50eXBlICE9PSAnaXB5dGhvbicpIHJldHVyblxuICB2YXIga2VybmVsVyA9IHN0b3JlLmdsb2JhbHMua2VybmVsICYmIHN0b3JlLmdsb2JhbHMua2VybmVsLndcbiAgICAsIHN0eWxlID0ga2VybmVsVyAmJiBrZXJuZWxXLl9pbmplY3RfY3NzXG4gICAgLCBhZGRMaXN0ZW5lciA9IGtlcm5lbFcgJiYga2VybmVsVy5hZGRJbmplY3RMaXN0ZW5lclxuICAgICwgcmVtb3ZlTGlzdGVuZXIgPSBrZXJuZWxXICYmIGtlcm5lbFcucmVtb3ZlSW5qZWN0TGlzdGVuZXJcbiAgcmV0dXJuIDxPdXRwdXRcbiAgICBub2RlPXtub2RlfVxuICAgIGtleT1cImNvZGUtb3V0cHV0XCJcbiAgICByZWY9XCJpcHl0aG9uX3ZpZXdcIlxuICAgIHN0eWxlcz17c3R5bGV9XG4gICAgYWRkSW5qZWN0TGlzdGVuZXI9e2FkZExpc3RlbmVyfVxuICAgIHJlbW92ZUluamVjdExpc3RlbmVyPXtyZW1vdmVMaXN0ZW5lcn1cbiAgICBzZXRBY3RpdmU9e2FjdGlvbnMuc2V0QWN0aXZlLmJpbmQoYWN0aW9ucywgbm9kZS5pZCl9XG4gICAga2VybmVsU2Vzc2lvbj17c3RhdGUua2VybmVsU2Vzc2lvbn1cbiAgICBzdG9yZT17c3RvcmV9Lz5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNsYXNzZXM6IGZ1bmN0aW9uIChub2RlLCBzdGF0ZSkge1xuICAgIGlmIChub2RlLnR5cGUgIT09ICdpcHl0aG9uJykgcmV0dXJuXG4gICAgcmV0dXJuIGN4KHtcbiAgICAgICdUcmVlSXRlbS1pcHl0aG9uLWRpc2FibGVkJzogIXN0YXRlLmtlcm5lbFNlc3Npb24sXG4gICAgICAnVHJlZUl0ZW0taXB5dGhvbi1jb2xsYXBzZWQnOiBub2RlLmRpc3BsYXlfY29sbGFwc2VkLFxuICAgICAgJ1RyZWVJdGVtLWlweXRob24tc3RhbGUnOiBzdGF0ZS5rZXJuZWxTZXNzaW9uICE9PSBub2RlLnNlc3Npb24sXG4gICAgICAnVHJlZUl0ZW0taXB5dGhvbi1ydW5uaW5nJzogbm9kZS5zdGFydGVkICYmICFub2RlLmZpbmlzaGVkLFxuICAgICAgJ1RyZWVJdGVtLWlweXRob24td2FpdGluZyc6IG5vZGUud2FpdGluZyxcbiAgICAgICdUcmVlSXRlbS1pcHl0aG9uLWRpcnR5Jzogbm9kZS5leGVjdXRlZCAhPT0gbm9kZS5jb250ZW50LFxuICAgIH0pXG4gIH0sXG5cbiAgYmxvY2tzOiB7XG4gICAgYmVsb3dib2R5OiBjb2RlT3V0cHV0LFxuICAgICdmb2N1cy1wYW5lJzogY29kZU91dHB1dCxcbiAgfSxcblxuICBib2RpZXM6IHtcbiAgICBpcHl0aG9uOiB7XG4gICAgICByZW5kZXJlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5ub2RlLmVkaXRvcl9jb2xsYXBzZWQpIHtcbiAgICAgICAgICByZXR1cm4gPGRpdiBvbkNsaWNrPXtfID0+IHRoaXMucHJvcHMuYWN0aW9ucy50b2dnbGVFZGl0b3JDb2xsYXBzZSh0aGlzLnByb3BzLm5vZGUuaWQpfT5FZGl0b3IgQ29sbGFwc2VkPC9kaXY+XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDxDb2RlRWRpdG9yXG4gICAgICAgICAgcmVmPVwidGV4dFwiXG4gICAgICAgICAgYmx1cnJlZD17dHJ1ZX1cbiAgICAgICAgICBub2RlPXt0aGlzLnByb3BzLm5vZGV9XG4gICAgICAgICAgdmFsdWU9e3RoaXMucHJvcHMubm9kZS5jb250ZW50fVxuICAgICAgICAgIG9uRXhlY3V0ZT17KCkgPT4gdGhpcy5wcm9wcy5hY3Rpb25zLmV4ZWN1dGUodGhpcy5wcm9wcy5ub2RlLmlkKX1cbiAgICAgICAgICBvbkZvY3VzPXt0aGlzLl9vbkNsaWNrfVxuICAgICAgICAvPlxuICAgICAgfSxcbiAgICAgIGVkaXRvcjogZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIGlmIChwcm9wcy5ub2RlLmVkaXRvcl9jb2xsYXBzZWQpIHtcbiAgICAgICAgICByZXR1cm4gPGRpdiBvbkNsaWNrPXtfID0+IHByb3BzLmFjdGlvbnMudG9nZ2xlRWRpdG9yQ29sbGFwc2UocHJvcHMubm9kZS5pZCl9PkVkaXRvciBDb2xsYXBzZWQ8L2Rpdj5cbiAgICAgICAgfVxuICAgICAgICB2YXIga2VybmVsID0gcHJvcHMuc3RvcmUuZ2xvYmFscy5rZXJuZWxcbiAgICAgICAgaWYgKGtlcm5lbCAmJiAoa2VybmVsLmNvbXBsZXRlIHx8IGtlcm5lbC5jbUNvbXBsZXRlKSkge1xuICAgICAgICAgIHByb3BzLm9uQ29tcGxldGUgPSBrZXJuZWxDb21wbGV0ZShrZXJuZWwpXG4gICAgICAgIH1cbiAgICAgICAgcHJvcHMub25FeGVjdXRlPSgpID0+IHByb3BzLmFjdGlvbnMuZXhlY3V0ZShwcm9wcy5ub2RlLmlkKVxuICAgICAgICByZXR1cm4gPENvZGVFZGl0b3Igey4uLnByb3BzfS8+XG4gICAgICB9LFxuICAgIH0sXG5cbiAgICAnY29kZS1wbGF5Z3JvdW5kJzoge1xuICAgICAgcmVuZGVyZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIDxQbGF5Z3JvdW5kXG4gICAgICAgICAgcmVmPVwidGV4dFwiXG4gICAgICAgICAgYmx1cnJlZD17dHJ1ZX1cbiAgICAgICAgICB2YWx1ZT17dGhpcy5wcm9wcy5ub2RlLmNvbnRlbnR9XG4gICAgICAgICAgb25Gb2N1cz17dGhpcy5fb25DbGlja31cbiAgICAgICAgICBvbkNoYW5nZT17dGhpcy5fb25DaGFuZ2V9XG4gICAgICAgICAgc3RvcmU9e3RoaXMucHJvcHMuc3RvcmV9XG4gICAgICAgICAgbm9kZT17dGhpcy5wcm9wcy5ub2RlfS8+XG4gICAgICB9LFxuICAgICAgZWRpdG9yOiBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIDxQbGF5Z3JvdW5kIHJlZj1cInRleHRcIiB7Li4ucHJvcHN9Lz5cbiAgICAgIH0sXG4gICAgfSxcbiAgfSxcblxuICBsaXN0ZW5lcjoge1xuICAgIGNoYW5nZXM6IFsna2VybmVsLXNlc3Npb24nXSxcbiAgICB1cGRhdGVTdG9yZVN0YXRlOiBmdW5jdGlvbiAoc3RhdGUsIGdldHRlcnMpIHtcbiAgICAgIHJldHVybiB7a2VybmVsU2Vzc2lvbjogZ2V0dGVycy5rZXJuZWxTZXNzaW9uKCl9XG4gICAgfSxcbiAgfSxcbn1cblxuZnVuY3Rpb24ga2VybmVsQ29tcGxldGUoa2VybmVsKSB7XG4gIHZhciBmdW5jXG4gIGlmIChrZXJuZWwuY21Db21wbGV0ZSkge1xuICAgIGZ1bmMgPSBmdW5jdGlvbiAoY20sIGRvbmUpIHtcbiAgICAgIHJldHVybiBrZXJuZWwuY21Db21wbGV0ZShjbSlcbiAgICB9XG4gIH0gZWxzZSBpZiAoa2VybmVsLmNvbXBsZXRlKSB7XG4gICAgZnVuYyA9IGZ1bmN0aW9uIChjbSwgZG9uZSkge1xuICAgICAgdmFyIGN1cnNvciA9IGNtLmdldEN1cnNvcigpXG4gICAgICAgICwgbGluZSA9IGNtLmdldExpbmUoY3Vyc29yLmxpbmUpXG4gICAgICAgICwgcG9zID0ge2xpbmU6IGN1cnNvci5saW5lLCBjaDogY3Vyc29yLmNofVxuICAgICAgcmV0dXJuIGtlcm5lbC5jb21wbGV0ZShsaW5lLCBwb3MsIGRvbmUpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmdW5jdGlvbiAoY20pIHtcbiAgICAgIHJldHVybiBDb2RlTWlycm9yLmhpbnQuYXV0byhjbSlcbiAgICB9XG4gIH1cblxuICBpZiAoa2VybmVsLmFzeW5jQ29tcGxldGUpIHtcbiAgICBmdW5jLmFzeW5jID0gdHJ1ZVxuICB9XG5cbiAgcmV0dXJuIGZ1bmNcbn1cblxuIiwiXG52YXIgc2hvd1RpbWVzID0gcmVxdWlyZSgnLi90aW1lcicpXG4gICwgbWFrZV9vdXRwdXRzID0gcmVxdWlyZSgnLi92aWV3JylcbiAgLCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0JylcbiAgLCBjeCA9IFJlYWN0LmFkZG9ucy5jbGFzc1NldFxuXG52YXIgT3V0cHV0ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcG9wb3V0OiBmYWxzZSxcbiAgICB9XG4gIH0sXG5cbiAgX29uUG9wb3V0OiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGJveCA9IHRoaXMucmVmcy5vdXRwdXRzLmdldERPTU5vZGUoKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgICAgLCB3ID0gd2luZG93Lm9wZW4oJ3BhcnR5Lmh0bWwnLCAnUG9wcGVkIG91dCBvdXRwdXQnLCAnbG9jYXRpb249bm8sbWVudWJhcj1ubyxoZWlnaHQ9JyArIChib3guaGVpZ2h0ICsgMjApICsgJyx3aWR0aD0nICsgKGJveC53aWR0aCArIDIwKSlcbiAgICB3Lm9uYmVmb3JldW5sb2FkID0gdGhpcy5fb25DbG9zZVxuICAgIHcub25sb2FkID0gKCkgPT4ge1xuICAgICAgdy5kb2N1bWVudC5ib2R5LmNsYXNzTmFtZSA9ICdtX0lQeXRob25fcG9wb3V0LWJvZHknXG4gICAgICB2YXIgc3R5bGUgPSB3LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJylcbiAgICAgIHN0eWxlLmlubmVySFRNTCA9IHRoaXMucHJvcHMuc3R5bGVzXG4gICAgICB3LnN0eWxlID0gc3R5bGVcbiAgICAgIHcuZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSlcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBwb3BvdXQ6IHcsXG4gICAgICB9KVxuICAgIH1cbiAgICBpZiAodGhpcy5wcm9wcy5hZGRJbmplY3RMaXN0ZW5lcikge1xuICAgICAgdGhpcy5wcm9wcy5hZGRJbmplY3RMaXN0ZW5lcih0aGlzLl91cGRhdGVTdHlsZSlcbiAgICB9XG4gIH0sXG5cbiAgX3VwZGF0ZVN0eWxlOiBmdW5jdGlvbiAoc3R5bGUpIHtcbiAgICBpZiAoIXRoaXMuc3RhdGUucG9wb3V0KSByZXR1cm5cbiAgICB0aGlzLnN0YXRlLnBvcG91dC5zdHlsZS5pbm5lckhUTUwgPSBzdHlsZVxuICB9LFxuXG4gIF9vbkNsb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLmlzTW91bnRlZCgpKSByZXR1cm5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHBvcG91dDogZmFsc2VcbiAgICB9KVxuICB9LFxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZTogZnVuY3Rpb24gKHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgaWYgKCF0aGlzLnN0YXRlLnBvcG91dCkge1xuICAgICAgaWYgKHByZXZTdGF0ZS5wb3BvdXQgJiYgIXByZXZTdGF0ZS5wb3BvdXQuY2xvc2VkKSB7XG4gICAgICAgIHByZXZTdGF0ZS5wb3BvdXQub25iZWZvcmV1bmxvYWQgPSBudWxsXG4gICAgICAgIHByZXZTdGF0ZS5wb3BvdXQuY2xvc2UoKVxuICAgICAgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5zdGF0ZS5wb3BvdXQuc3R5bGUuaW5uZXJIVE1MID0gdGhpcy5wcm9wcy5zdHlsZXNcblxuICAgIHZhciBvdXRwdXRzID0gbWFrZV9vdXRwdXRzKHRoaXMucHJvcHMubm9kZS5vdXRwdXRzLCB0aGlzLnByb3BzLnN0b3JlKVxuICAgICAgLCBjb250YWluZXIgPSA8ZGl2IGNsYXNzTmFtZT0nbV9JUHl0aG9uIG1fSVB5dGhvbl9wb3BvdXQtd3JhcHBlcic+e291dHB1dHN9PC9kaXY+XG4gICAgUmVhY3QucmVuZGVyKGNvbnRhaW5lciwgdGhpcy5zdGF0ZS5wb3BvdXQuZG9jdW1lbnQuYm9keSlcbiAgfSxcblxuICBjb21wb25lbnRXaWxsVW5tb3VudDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnN0YXRlLnBvcG91dCAmJiAhdGhpcy5zdGF0ZS5wb3BvdXQuY2xvc2VkKSB7XG4gICAgICB0aGlzLnN0YXRlLnBvcG91dC5vbmJlZm9yZXVubG9hZCA9IG51bGxcbiAgICAgIHRoaXMuc3RhdGUucG9wb3V0LmNsb3NlKClcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcHMucmVtb3ZlSW5qZWN0TGlzdGVuZXIpIHtcbiAgICAgIHRoaXMucHJvcHMucmVtb3ZlSW5qZWN0TGlzdGVuZXIodGhpcy5fdXBkYXRlU3R5bGUpXG4gICAgfVxuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBub2RlID0gdGhpcy5wcm9wcy5ub2RlXG4gICAgICAsIHN0b3JlID0gdGhpcy5wcm9wcy5zdG9yZVxuICAgIHZhciBjbGFzc05hbWUgPSBjeCh7XG4gICAgICAnbV9JUHl0aG9uJzogdHJ1ZSxcbiAgICAgICdtX0lQeXRob24taGlkaW5nJzogbm9kZS5kaXNwbGF5X2NvbGxhcHNlZCxcbiAgICAgICdtX0lQeXRob24tZW1wdHknOiAhKG5vZGUub3V0cHV0ICYmIG5vZGUub3V0cHV0Lmxlbmd0aCksXG4gICAgfSlcbiAgICAvLyBUT0RPOiBpbmRpY2F0ZSBub2RlLmxhbmd1YWdlIHNvbWV3aGVyZVxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lfSByZWY9J2lweXRob25fdmlldycgb25DbGljaz17dGhpcy5wcm9wcy5zZXRBY3RpdmV9PlxuICAgICAgPGRpdiByZWY9XCJvdXRwdXRzXCIgY2xhc3NOYW1lPSdtX0lQeXRob25fb3V0cHV0cyc+XG4gICAgICAgIHshdGhpcy5zdGF0ZS5wb3BvdXQgJiZcbiAgICAgICAgICA8c3BhbiBvbkNsaWNrPXt0aGlzLl9vblBvcG91dH0gY2xhc3NOYW1lPSdtX0lQeXRob25fcG9wb3V0LWJ1dHRvbic+XG4gICAgICAgICAgICA8aSBjbGFzc05hbWU9J2ZhIGZhLWV4dGVybmFsLWxpbmstc3F1YXJlJy8+XG4gICAgICAgICAgPC9zcGFuPn1cbiAgICAgICAge3RoaXMuc3RhdGUucG9wb3V0ID9cbiAgICAgICAgICA8ZGl2IG9uQ2xpY2s9e3RoaXMuX29uQ2xvc2V9IGNsYXNzTmFtZT0nbV9JUHl0aG9uX3BvcHBlZC1tZXNzYWdlJz5PdXRwdXQgaGFzIGJlZW4gcG9wcGVkIG91dCBpbnRvIGEgc2VwYXJhdGUgd2luZG93LiBDbGljayB0byBnZXQgaXQgYmFjazwvZGl2PiA6XG4gICAgICAgICAgbWFrZV9vdXRwdXRzKG5vZGUub3V0cHV0cywgc3RvcmUpfVxuICAgICAgPC9kaXY+XG4gICAgICB7c2hvd1RpbWVzKG5vZGUsIHRoaXMucHJvcHMua2VybmVsU2Vzc2lvbil9XG4gICAgPC9kaXY+XG4gIH0sXG59KVxuXG5tb2R1bGUuZXhwb3J0cyA9IE91dHB1dFxuXG4iLCJcbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0L2FkZG9ucycpXG4gICwgY3ggPSBSZWFjdC5hZGRvbnMuY2xhc3NTZXRcblxudmFyIERFRkFVTFRfU1RZTEUgPSBgXG5odG1sIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjtcbiAgZmxleDogMTtcbiAgbWluLWhlaWdodDogMTAwJTtcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG59XG5odG1sLmZvY3VzZWQge1xuICBib3gtc2hhZG93OiAwIDAgMTBweCBibHVlIGluc2V0O1xufVxuaHRtbC5mb2N1c2VkOmJlZm9yZSB7XG4gIGNvbG9yOiAjZGRkO1xuICBjb250ZW50OiBcInRoaXMgZnJhbWUgaGFzIGZvY3VzIVwiO1xuICBmb250LWZhbWlseTogc2Fucy1zZXJpZjtcbiAgZm9udC1zaXplOiAzMHB4O1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgcGFkZGluZzogNXB4O1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHJpZ2h0OiAxMHB4O1xuICB0b3A6IDA7XG4gIHotaW5kZXg6IC0xMDtcbn1cbmJvZHkge1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDEwcHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xufVxuYDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZnJhbWUsIG9uRm9jdXMpIHtcbiAgdmFyIGRvYyA9IGZyYW1lLmNvbnRlbnREb2N1bWVudFxuICAgICwgc3R5bGUgPSBkb2MuY3JlYXRlRWxlbWVudCgnc3R5bGUnKVxuICAgICwgY3VzdG9tID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJylcbiAgICAsIHdpbiA9IGZyYW1lLmNvbnRlbnRXaW5kb3dcbiAgc3R5bGUuaW5uZXJIVE1MID0gREVGQVVMVF9TVFlMRTtcbiAgZG9jLmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICBkb2MuaGVhZC5hcHBlbmRDaGlsZChjdXN0b20pO1xuXG4gIHdpbi5SZWFjdCA9IFJlYWN0XG4gIHdpbi5jeCA9IGN4XG4gIHdpbi5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsICgpID0+IHtcbiAgICBkb2MuYm9keS5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoJ2ZvY3VzZWQnKVxuICAgIG9uRm9jdXMoKVxuICB9KVxuICB3aW4uYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsICgpID0+IGRvYy5ib2R5LnBhcmVudE5vZGUuY2xhc3NMaXN0LnJlbW92ZSgnZm9jdXNlZCcpKVxuICAvLyBUT0RPIGFyZSB0aGVyZSBvdGhlciB0aGluZ3MgSSB3YW50IGV4cG9zZWQgb24gdGhpcyB3aW5kb3c/XG4gIHJldHVybiBjdXN0b21cbn1cblxuIiwiXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdC9hZGRvbnMnKVxuICAsIGN4ID0gUmVhY3QuYWRkb25zLmNsYXNzU2V0XG4gICwgbGVzcyA9IHJlcXVpcmUoJ2xlc3MnKVxuICAsIGpzeCA9IHJlcXVpcmUoJy4uL2tlcm5lbHMvanMvanN4JylcbiAgLCBDb2RlTWlycm9yUnggPSByZXF1aXJlKCcuL2NvZGVtaXJyb3ItcngnKVxuICAsIGluaXRGcmFtZSA9IHJlcXVpcmUoJy4vcGxheS1mcmFtZScpXG5cbnZhciBjYWNoZSA9IHtqc3g6IHt9LCBsZXNzOiB7fX1cblxudmFyIFNFUCA9ICdcXG4vLyBAcGxheWdyb3VuZC1zcGxpdFxcbidcblxudmFyIFBsYXlncm91bmQgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGpzZXJyb3I6IG51bGwsXG4gICAgICBjc3NlcnJvcjogbnVsbCxcbiAgICB9XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZnJhbWUgPSB0aGlzLnJlZnMub3V0LmdldERPTU5vZGUoKVxuICAgIHRoaXMuX3N0eWxlciA9IGluaXRGcmFtZShmcmFtZSwgdGhpcy5vblNlbGVjdClcblxuICAgIHZhciBwYXJ0cyA9IHRoaXMucHJvcHMudmFsdWUuc3BsaXQoU0VQKVxuICAgIHRoaXMudXBkYXRlSlNYKHBhcnRzWzBdIHx8ICcnKVxuICAgIHRoaXMudXBkYXRlQ1NTKHBhcnRzWzFdIHx8ICcnKVxuICAgIHRoaXMuX3Jlc2l6ZSgpXG5cbiAgICBpZiAoIXRoaXMucHJvcHMuYmx1cnJlZCkge1xuICAgIHZhciBwYXJ0cyA9IHRoaXMucHJvcHMudmFsdWUuc3BsaXQoU0VQKVxuICAgICAgdGhpcy5yZWZzLmpzeC5mb2N1cygpXG4gICAgfVxuICB9LFxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZTogZnVuY3Rpb24gKHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgdmFyIHByZXYgPSBwcmV2UHJvcHMudmFsdWUuc3BsaXQoU0VQKVxuICAgICAgLCBub3cgPSB0aGlzLnByb3BzLnZhbHVlLnNwbGl0KFNFUClcbiAgICBpZiAocHJldlswXSAhPT0gbm93WzBdKSB7XG4gICAgICB0aGlzLnVwZGF0ZUpTWChub3dbMF0gfHwgJycpXG4gICAgfVxuICAgIGlmIChwcmV2WzFdICE9PSBub3dbMV0pIHtcbiAgICAgIHRoaXMudXBkYXRlQ1NTKG5vd1sxXSB8fCAnJyk7XG4gICAgfVxuICAgIHZhciBmcmFtZSA9IHRoaXMucmVmcy5vdXQuZ2V0RE9NTm9kZSgpXG4gICAgdGhpcy5fcmVzaXplKClcbiAgfSxcblxuICBfcmVzaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGZyYW1lID0gdGhpcy5yZWZzLm91dC5nZXRET01Ob2RlKClcbiAgICB2YXIgZWwgPSBmcmFtZS5jb250ZW50RG9jdW1lbnQuYm9keS5maXJzdEVsZW1lbnRDaGlsZFxuICAgIGlmICghZWwpIHJldHVyblxuICAgIHZhciBzdCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKVxuICAgICAgLCBtYXJnaW4gPSBwYXJzZUludChzdC5tYXJnaW5Ub3ApICsgcGFyc2VJbnQoc3QubWFyZ2luQm90dG9tKVxuICAgIGZyYW1lLnN0eWxlLmhlaWdodCA9IGVsLm9mZnNldEhlaWdodCArIDIwICsgbWFyZ2luICsgJ3B4J1xuICB9LFxuXG4gIG9uU2VsZWN0OiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5wcm9wcy5zdG9yZS5hY3Rpb25zLnNldE1vZGUoJ25vcm1hbCcpXG4gICAgdGhpcy5wcm9wcy5zdG9yZS5hY3Rpb25zLnNldEFjdGl2ZSh0aGlzLnByb3BzLm5vZGUuaWQpXG4gIH0sXG5cbiAgdXBkYXRlSlNYOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgdmFyIGZyYW1lID0gdGhpcy5yZWZzLm91dC5nZXRET01Ob2RlKClcbiAgICB0cnkge1xuICAgICAgdmFyIGpzID0gY2FjaGVbdmFsXSB8fCBqc3godmFsKVxuICAgICAgY2FjaGVbdmFsXSA9IGpzXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0U3RhdGUoe2pzZXJyb3I6IGV9KVxuICAgIH1cbiAgICB0cnkge1xuICAgICAgdmFyIGpzZWwgPSBmcmFtZS5jb250ZW50V2luZG93LmV2YWwoanMpXG4gICAgICBpZiAoanNlbCkgUmVhY3QucmVuZGVyKGpzZWwsIGZyYW1lLmNvbnRlbnREb2N1bWVudC5ib2R5KVxuICAgICAgaWYgKHRoaXMuc3RhdGUuanNlcnJvcikgdGhpcy5zZXRTdGF0ZSh7anNlcnJvcjogbnVsbH0pXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7anNlcnJvcjogZX0pXG4gICAgfVxuICB9LFxuXG4gIHVwZGF0ZUNTUzogZnVuY3Rpb24gKHZhbCkge1xuICAgIHZhciBmcmFtZSA9IHRoaXMucmVmcy5vdXQuZ2V0RE9NTm9kZSgpXG4gICAgaWYgKGNhY2hlW3ZhbF0pIHtcbiAgICAgIHJldHVybiB0aGlzLl9zdHlsZXIuaW5uZXJIVE1MID0gY2FjaGVbdmFsXVxuICAgIH1cbiAgICBsZXNzLnJlbmRlcih2YWwsIHt9LCAoZXJyb3IsIGNzcykgPT4ge1xuICAgICAgaWYgKGVycm9yKSByZXR1cm4gdGhpcy5zZXRTdGF0ZSh7Y3NzZXJyb3I6IGVycm9yfSlcbiAgICAgIGNhY2hlW3ZhbF0gPSBjc3MuY3NzXG4gICAgICB0aGlzLl9zdHlsZXIuaW5uZXJIVE1MID0gY3NzLmNzc1xuICAgICAgaWYgKHRoaXMuc3RhdGUuY3NzZXJyb3IpIHRoaXMuc2V0U3RhdGUoe2Nzc2Vycm9yOiBudWxsfSlcbiAgICAgIHRoaXMuX3Jlc2l6ZSgpXG4gICAgfSlcbiAgfSxcblxuICBzZXRKU1g6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICB2YXIgcGFydHMgPSB0aGlzLnByb3BzLnZhbHVlLnNwbGl0KFNFUClcbiAgICBwYXJ0c1swXSA9IHZhbFxuICAgIHRoaXMucHJvcHMub25DaGFuZ2UocGFydHMuam9pbihTRVApKVxuICB9LFxuXG4gIHNldExlc3M6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICB2YXIgcGFydHMgPSB0aGlzLnByb3BzLnZhbHVlLnNwbGl0KFNFUClcbiAgICBwYXJ0c1sxXSA9IHZhbFxuICAgIHRoaXMucHJvcHMub25DaGFuZ2UocGFydHMuam9pbihTRVApKVxuICB9LFxuXG4gIGZvY3VzOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5yZWZzLmpzeC5mb2N1cygpXG4gIH0sXG5cbiAgaXNGb2N1c2VkOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVmcy5qc3ggJiYgKHRoaXMucmVmcy5qc3guaXNGb2N1c2VkKCkgfHwgdGhpcy5yZWZzLmxlc3MuaXNGb2N1c2VkKCkpXG4gIH0sXG5cbiAgX3RvZ2dsZUNvbGxhcHNlOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5wcm9wcy5zdG9yZS5hY3Rpb25zLnRvZ2dsZUVkaXRvckNvbGxhcHNlKHRoaXMucHJvcHMubm9kZS5pZClcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5ub2RlLmVkaXRvcl9jb2xsYXBzZWQgJiYgdGhpcy5wcm9wcy5ibHVycmVkKSB7XG4gICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9J1BsYXlncm91bmQgUGxheWdyb3VuZC1jb2xsYXBzZWQnPlxuICAgICAgICA8ZGl2IGtleT1cImNvbGxhcHNlXCIgY2xhc3NOYW1lPSdQbGF5Z3JvdW5kX2NvbGxhcHNlJyBvbkNsaWNrPXt0aGlzLl90b2dnbGVDb2xsYXBzZX0vPlxuICAgICAgICA8ZGl2IGtleT1cIm91dFwiIGNsYXNzTmFtZT0nUGxheWdyb3VuZF9vdXQnPlxuICAgICAgICAgIDxpZnJhbWUgcmVmPVwib3V0XCIvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIH1cbiAgICB2YXIgcGFydHMgPSB0aGlzLnByb3BzLnZhbHVlLnNwbGl0KFNFUClcbiAgICAgICwgY21Qcm9wcyA9IHtcbiAgICAgICAgICBzdHlsZToge30sXG4gICAgICAgICAgaW5kZW50V2lkdGg6IDIsXG4gICAgICAgICAgaW5kZW50V2l0aFRhYnM6IGZhbHNlLFxuICAgICAgICAgIG1hdGNoQnJhY2tldHM6IHRydWUsXG4gICAgICAgICAgbGluZU51bWJlcnM6IHRydWUsXG4gICAgICAgICAgdGFiU2l6ZTogMixcbiAgICAgICAgICBmb2xkR3V0dGVyOiB0cnVlLFxuICAgICAgICAgIGxpbmVXcmFwcGluZzogdHJ1ZSxcbiAgICAgICAgICB2aWV3cG9ydE1hcmdpbjogSW5maW5pdHksXG4gICAgICAgICAgYmx1cnJlZDogdGhpcy5wcm9wcy5ibHVycmVkLFxuICAgICAgICAgIGd1dHRlcnM6IFtcIkNvZGVNaXJyb3ItbGluZW51bWJlcnNcIiwgXCJDb2RlTWlycm9yLWZvbGRndXR0ZXJcIl0sXG4gICAgICAgICAgb25Gb2N1czogKCkgPT4gdGhpcy5wcm9wcy5vbkZvY3VzKCksXG4gICAgICAgIH1cbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9J1BsYXlncm91bmQnPlxuICAgICAgPGRpdiBrZXk9XCJjb2xsYXBzZVwiIGNsYXNzTmFtZT0nUGxheWdyb3VuZF9jb2xsYXBzZScgb25DbGljaz17dGhpcy5fdG9nZ2xlQ29sbGFwc2V9Lz5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPSdQbGF5Z3JvdW5kX2NvZGUnPlxuICAgICAgICA8Q29kZU1pcnJvclJ4XG4gICAgICAgICAgcmVmPVwianN4XCJcbiAgICAgICAgICBtb2RlPSdqYXZhc2NyaXB0J1xuICAgICAgICAgIHNtYXJ0SW5kZW50PXtmYWxzZX1cbiAgICAgICAgICB2YWx1ZT17cGFydHNbMF0gfHwgJyd9XG4gICAgICAgICAgb25CbHVyPXt0aGlzLnByb3BzLm9uQmx1cn1cbiAgICAgICAgICBnb0Rvd249eygpID0+IHRoaXMucmVmcy5sZXNzLmZvY3VzKCl9XG4gICAgICAgICAgb25DaGFuZ2U9e3RoaXMuc2V0SlNYfSB7Li4uY21Qcm9wc30vPlxuICAgICAgICA8Q29kZU1pcnJvclJ4XG4gICAgICAgICAgcmVmPVwibGVzc1wiXG4gICAgICAgICAgbW9kZT0nY3NzJ1xuICAgICAgICAgIHNtYXJ0SW5kZW50PXt0cnVlfVxuICAgICAgICAgIHZhbHVlPXtwYXJ0c1sxXSB8fCAnJ31cbiAgICAgICAgICBvbkJsdXI9e3RoaXMucHJvcHMub25CbHVyfVxuICAgICAgICAgIGdvVXA9eygpID0+IHRoaXMucmVmcy5qc3guZm9jdXMoKX1cbiAgICAgICAgICBvbkZvY3VzPXsoKSA9PiB0aGlzLnByb3BzLm9uRm9jdXMoKX1cbiAgICAgICAgICBvbkNoYW5nZT17dGhpcy5zZXRMZXNzfSB7Li4uY21Qcm9wc30vPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nUGxheWdyb3VuZF9lcnJvcic+XG4gICAgICAgICAge3RoaXMuc3RhdGUuanNlcnJvcn1cbiAgICAgICAgICB7dGhpcy5zdGF0ZS5jc3NlcnJvcn1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYga2V5PVwib3V0XCIgY2xhc3NOYW1lPSdQbGF5Z3JvdW5kX291dCc+XG4gICAgICAgIDxpZnJhbWUgcmVmPVwib3V0XCIvPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIH0sXG59KVxuXG5tb2R1bGUuZXhwb3J0cyA9IFBsYXlncm91bmRcblxuXG5cbiIsIlxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QvYWRkb25zJylcblxubW9kdWxlLmV4cG9ydHMgPSBzaG93VGltZXNcblxuZnVuY3Rpb24gbW1zcyh0aW1lKSB7XG4gIGNvbnN0IGQgPSBuZXcgRGF0ZSh0aW1lKVxuICBsZXQgcyA9IGQuZ2V0U2Vjb25kcygpXG4gIGlmIChzIDwgMTApIHMgPSAnMCcgKyBzXG4gIHJldHVybiBkLmdldE1pbnV0ZXMoKSArICc6JyArIHMgKyAncydcbn1cblxuZnVuY3Rpb24gbW1zc1NTUyh0aW1lKSB7XG4gIGNvbnN0IGQgPSBuZXcgRGF0ZSh0aW1lKVxuICBsZXQgcyA9IGQuZ2V0U2Vjb25kcygpXG4gIGxldCBtcyA9IGQuZ2V0TWlsbGlzZWNvbmRzKClcbiAgaWYgKHMgPCAxMCkgcyA9ICcwJyArIHNcbiAgaWYgKG1zIDwgMTApIG1zID0gJzAwJyArIG1zXG4gIGVsc2UgaWYgKG1zIDwgMTAwKSBtcyA9ICcwJyArIG1zXG4gIHJldHVybiBkLmdldE1pbnV0ZXMoKSArICc6JyArIHMgKyAnLicgKyBtcyArICdzJ1xufVxuXG5mdW5jdGlvbiBobW1zc2EodGltZSkge1xuICBjb25zdCBkID0gbmV3IERhdGUodGltZSlcbiAgbGV0IG0gPSBkLmdldE1pbnV0ZXMoKVxuICBpZiAobSA8IDEwKSBtID0gJzAnICsgbVxuICBsZXQgcyA9IGQuZ2V0U2Vjb25kcygpXG4gIGlmIChzIDwgMTApIHMgPSAnMCcgKyBzXG4gIGNvbnN0IGEgPSBkLmdldEhvdXJzKCkgPiAxMSA/ICdwbScgOiAnYW0nXG4gIGxldCBoID0gZC5nZXRIb3VycygpXG4gIGlmIChoID4gMTIpIGggLT0gMTJcbiAgcmV0dXJuIGAke2h9OiR7bX06JHtzfSR7YX1gXG59XG5cbmZ1bmN0aW9uIHNob3dUaW1lcyhub2RlLCBrZXJuZWxTZXNzaW9uKSB7XG4gIHZhciB0aGlzU2Vzc2lvbiA9IGtlcm5lbFNlc3Npb24gPT09IG5vZGUuc2Vzc2lvblxuICBpZiAoIW5vZGUuc3RhcnRlZCB8fCAoIW5vZGUuZmluaXNoZWQgJiYgIXRoaXNTZXNzaW9uKSlcbiAgICByZXR1cm4gLy8gbm90IGV2YWx1YXRlZCB0aGlzICdzZXNzaW9uJ1xuICBpZiAoIW5vZGUuZmluaXNoZWQpIHtcbiAgICByZXR1cm4gPENvdW50aW5nVGltZXJcbiAgICAgIHRpbWU9e25vZGUuc3RhcnRlZH1cbiAgICAgIGNsYXNzTmFtZT0nbV9JUHl0aG9uX3RpbWUgbV9JUHl0aG9uX3RpbWUtbG9hZGluZycvPlxuICB9XG4gIHZhciBkdXJhdGlvbiA9IG5vZGUuZmluaXNoZWQgLSBub2RlLnN0YXJ0ZWRcbiAgdmFyIGNsYXNzTmFtZSA9ICdtX0lQeXRob25fdGltZScgKyAodGhpc1Nlc3Npb24gPyAnJyA6ICcgbV9JUHl0aG9uX3RpbWUtc3RhbGUnKVxuICByZXR1cm4gPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZX0+XG4gICAgeyF0aGlzU2Vzc2lvbiAmJiA8ZW0+c3RhbGUgPC9lbT59XG4gICAge2htbXNzYShub2RlLmZpbmlzaGVkKX1cbiAgICA8YnIvPlxuICAgIHttbXNzU1NTKGR1cmF0aW9uKX1cbiAgPC9kaXY+XG59XG5cbnZhciBDb3VudGluZ1RpbWVyID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZHVyYXRpb246IERhdGUubm93KCkgLSB0aGlzLnByb3BzLnRpbWVcbiAgICB9XG4gIH0sXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5faW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtkdXJhdGlvbjogRGF0ZS5ub3coKSAtIHRoaXMucHJvcHMudGltZX0pXG4gICAgfSwgMjAwKTtcbiAgfSxcbiAgY29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICBjbGVhckludGVydmFsKHRoaXMuX2ludGVydmFsKVxuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy50cmFuc2ZlclByb3BzVG8oPGRpdj57XG4gICAgICBtbXNzKHRoaXMuc3RhdGUuZHVyYXRpb24pXG4gICAgfTwvZGl2PilcbiAgfVxufSlcblxuIiwiXG52YXIgQ29udmVydCA9IHJlcXVpcmUoJ2Fuc2ktdG8taHRtbCcpXG4gICwgY29udmVydCA9IG5ldyBDb252ZXJ0KClcbiAgLCBmb3JtYXQgPSByZXF1aXJlKCcuL2Zvcm1hdCcpXG4gICwgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpXG5cbm1vZHVsZS5leHBvcnRzID0gbWFrZV9vdXRwdXRzXG5cbi8qKlxuICogZm9ybWF0IGEgbGlzdCBvZiBvdXRwdXRzLCBkaXNwbGF5aW5nIHRoZSBoaWdoZXN0IHJhbmtpbmcgb3V0cHV0IHR5cGUgdGhhdFxuICogaGFzIGEgcmVuZGVyZXIgcmVnaXN0ZXJlZC5cbiAqXG4gKiBPdXRwdXQgY2hhbm5lbHM6XG4gKiAtIGxvZyBzdHJlYW0gKHN0ZG91dC9zdGRlcnIpXG4gKiAtIGVycm9yXG4gKiAtIG91dHB1dCAoYi9jIGl0IGdldHMgYXNzaWduZWQgdG8gdGhlIF9pIHZhcmlhYmxlcywgZXRjLikuIEkgdGhpbmsgdGhlcmVcbiAqICAgb3VnaHQgdG8gYmUgb25seSBvbmUgb2YgdGhlc2VcbiAqIC0gZGlzcGxheSAob3V0IG9mIGJhbmQgZGlzcGxheWFnZSlcbiAqL1xuZnVuY3Rpb24gbWFrZV9vdXRwdXRzKG91dHB1dHMsIHN0b3JlKSB7XG4gIGlmICghb3V0cHV0cyB8fCAhb3V0cHV0cy5sZW5ndGgpIHJldHVyblxuICB2YXIgb3JnID0gb3JnYW5pemVPdXRwdXRzKG91dHB1dHMpXG4gIHZhciBpdGVtcyA9IFtdXG4gIGlmIChvcmcuc3RyZWFtcy5zdGRvdXQpIHtcbiAgICBpdGVtcy5wdXNoKDxkaXYga2V5PSdzdGRvdXQnXG4gICAgICBjbGFzc05hbWU9J21fSVB5dGhvbl9vdXRwdXQgbV9JUHl0aG9uX291dHB1dC1zdGRvdXQnPlxuICAgICAgICB7YW5zaUh0bWwob3JnLnN0cmVhbXMuc3Rkb3V0KX08L2Rpdj4pXG4gIH1cblxuICBpZiAob3JnLnN0cmVhbXMuc3RkZXJyKSB7XG4gICAgaXRlbXMucHVzaCg8ZGl2IGtleT0nc3RkZXJyJ1xuICAgICAgY2xhc3NOYW1lPSdtX0lQeXRob25fb3V0cHV0IG1fSVB5dGhvbl9vdXRwdXQtc3RkZXJyJz5cbiAgICAgICAge2Fuc2lIdG1sKG9yZy5zdHJlYW1zLnN0ZGVycil9PC9kaXY+KVxuICB9XG5cbiAgcmV0dXJuIGl0ZW1zLmNvbmNhdChvcmcubm9ybWFsLm1hcChzaG93T3V0cHV0LmJpbmQobnVsbCwgc3RvcmUpKSlcbn1cblxuZnVuY3Rpb24gb3JnYW5pemVPdXRwdXRzKG91dHB1dHMpIHtcbiAgdmFyIHN0cmVhbXMgPSB7XG4gICAgc3Rkb3V0OiBudWxsLFxuICAgIHN0ZGVycjogbnVsbCxcbiAgfVxuICB2YXIgbm9ybWFsID0gW11cbiAgb3V0cHV0cy5mb3JFYWNoKChvdXRwdXQsIGkpID0+IHtcbiAgICBpZiAob3V0cHV0LnR5cGUgIT09ICdzdHJlYW0nKSB7XG4gICAgICBpZiAob3V0cHV0LnN1cHByZXNzYWJsZSAmJiBpICE9PSBvdXRwdXRzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICByZXR1cm4gbm9ybWFsLnB1c2gob3V0cHV0KVxuICAgIH1cbiAgICBpZiAoc3RyZWFtc1tvdXRwdXQuc3RyZWFtXSkge1xuICAgICAgc3RyZWFtc1tvdXRwdXQuc3RyZWFtXSArPSBvdXRwdXQudGV4dFxuICAgIH0gZWxzZSB7XG4gICAgICBzdHJlYW1zW291dHB1dC5zdHJlYW1dID0gb3V0cHV0LnRleHRcbiAgICB9XG4gIH0pXG4gIHJldHVybiB7c3RyZWFtczogc3RyZWFtcywgbm9ybWFsOiBub3JtYWx9XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFRyYWNlYmFjayh0cmFjZWJhY2ssIGFuc2kpIHtcbiAgaWYgKCF0cmFjZWJhY2spIHJldHVyblxuICBpZiAoYW5zaSkgcmV0dXJuIGFuc2lIdG1sKHRyYWNlYmFjay5qb2luKCdcXG4nKSlcbiAgcmV0dXJuIHRyYWNlYmFja1xufVxuXG5mdW5jdGlvbiBlc2NhcGUodGV4dCkge1xuICByZXR1cm4gdGV4dCA/XG4gICAgdGV4dC5yZXBsYWNlKCcmJywgJyZhbXA7JylcbiAgICAgICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxuICAgICAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpIDogJ251bGwnXG59XG5cbmZ1bmN0aW9uIGFuc2lIdG1sKHRleHQpIHtcbiAgcmV0dXJuIDxwcmUgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tcbiAgICBfX2h0bWw6IGNvbnZlcnQudG9IdG1sKGVzY2FwZSh0ZXh0KSlcbiAgfX0vPlxufVxuXG5mdW5jdGlvbiBzaG93T3V0cHV0KHN0b3JlLCBvdXRwdXQsIGkpIHtcbiAgaWYgKG91dHB1dC50eXBlID09PSAnZXJyb3InKSB7XG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPSdtX0lQeXRob25fb3V0cHV0IG1fSVB5dGhvbl9vdXRwdXQtZXJyb3InIGtleT17aX0+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT0nbV9JUHl0aG9uX2Vycm9yX3RyYWNlJz5cbiAgICAgICAge2Zvcm1hdFRyYWNlYmFjayhvdXRwdXQudHJhY2ViYWNrLCBvdXRwdXQuZm9ybWF0ID09PSAnYW5zaScpfVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIH1cblxuICByZXR1cm4gZm9ybWF0LmRpc3BsYXkoaSwgb3V0cHV0LCBzdG9yZSlcbn1cblxuIiwiXG5tb2R1bGUuZXhwb3J0cyA9IHV1aWRcblxudmFyIENIQVJTID0gJzAxMjM0NTY3ODlhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eidcbmZ1bmN0aW9uIHV1aWQobG4pIHtcbiAgbG4gPSBsbiB8fCAzMlxuICB2YXIgaWQgPSAnJ1xuICBmb3IgKHZhciBpPTA7IGk8bG47IGkrKykge1xuICAgIGlkICs9IENIQVJTW3BhcnNlSW50KE1hdGgucmFuZG9tKCkgKiBDSEFSUy5sZW5ndGgpXVxuICB9XG4gIHJldHVybiBpZFxufVxuXG4iLCIvKlxuICBDb3B5cmlnaHQgKEMpIDIwMTMgQXJpeWEgSGlkYXlhdCA8YXJpeWEuaGlkYXlhdEBnbWFpbC5jb20+XG4gIENvcHlyaWdodCAoQykgMjAxMyBUaGFkZGVlIFR5bCA8dGhhZGRlZS50eWxAZ21haWwuY29tPlxuICBDb3B5cmlnaHQgKEMpIDIwMTIgQXJpeWEgSGlkYXlhdCA8YXJpeWEuaGlkYXlhdEBnbWFpbC5jb20+XG4gIENvcHlyaWdodCAoQykgMjAxMiBNYXRoaWFzIEJ5bmVucyA8bWF0aGlhc0BxaXdpLmJlPlxuICBDb3B5cmlnaHQgKEMpIDIwMTIgSm9vc3QtV2ltIEJvZWtlc3RlaWpuIDxqb29zdC13aW1AYm9la2VzdGVpam4ubmw+XG4gIENvcHlyaWdodCAoQykgMjAxMiBLcmlzIEtvd2FsIDxrcmlzLmtvd2FsQGNpeGFyLmNvbT5cbiAgQ29weXJpZ2h0IChDKSAyMDEyIFl1c3VrZSBTdXp1a2kgPHV0YXRhbmUudGVhQGdtYWlsLmNvbT5cbiAgQ29weXJpZ2h0IChDKSAyMDEyIEFycGFkIEJvcnNvcyA8YXJwYWQuYm9yc29zQGdvb2dsZW1haWwuY29tPlxuICBDb3B5cmlnaHQgKEMpIDIwMTEgQXJpeWEgSGlkYXlhdCA8YXJpeWEuaGlkYXlhdEBnbWFpbC5jb20+XG5cbiAgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuXG4gICAgKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodFxuICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICAgICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAgICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGVcbiAgICAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG5cbiAgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiAgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuICBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuICBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgPENPUFlSSUdIVCBIT0xERVI+IEJFIExJQUJMRSBGT1IgQU5ZXG4gIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTXG4gIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUztcbiAgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EXG4gIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUXG4gIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRlxuICBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuLypqc2xpbnQgYml0d2lzZTp0cnVlIHBsdXNwbHVzOnRydWUgKi9cbi8qZ2xvYmFsIGVzcHJpbWE6dHJ1ZSwgZGVmaW5lOnRydWUsIGV4cG9ydHM6dHJ1ZSwgd2luZG93OiB0cnVlLFxudGhyb3dFcnJvcjogdHJ1ZSwgZ2VuZXJhdGVTdGF0ZW1lbnQ6IHRydWUsIHBlZWs6IHRydWUsXG5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uOiB0cnVlLCBwYXJzZUJsb2NrOiB0cnVlLFxucGFyc2VDbGFzc0V4cHJlc3Npb246IHRydWUsIHBhcnNlQ2xhc3NEZWNsYXJhdGlvbjogdHJ1ZSwgcGFyc2VFeHByZXNzaW9uOiB0cnVlLFxucGFyc2VGb3JTdGF0ZW1lbnQ6IHRydWUsXG5wYXJzZUZ1bmN0aW9uRGVjbGFyYXRpb246IHRydWUsIHBhcnNlRnVuY3Rpb25FeHByZXNzaW9uOiB0cnVlLFxucGFyc2VGdW5jdGlvblNvdXJjZUVsZW1lbnRzOiB0cnVlLCBwYXJzZVZhcmlhYmxlSWRlbnRpZmllcjogdHJ1ZSxcbnBhcnNlSW1wb3J0U3BlY2lmaWVyOiB0cnVlLFxucGFyc2VMZWZ0SGFuZFNpZGVFeHByZXNzaW9uOiB0cnVlLCBwYXJzZVBhcmFtczogdHJ1ZSwgdmFsaWRhdGVQYXJhbTogdHJ1ZSxcbnBhcnNlU3ByZWFkT3JBc3NpZ25tZW50RXhwcmVzc2lvbjogdHJ1ZSxcbnBhcnNlU3RhdGVtZW50OiB0cnVlLCBwYXJzZVNvdXJjZUVsZW1lbnQ6IHRydWUsIHBhcnNlTW9kdWxlQmxvY2s6IHRydWUsIHBhcnNlQ29uY2lzZUJvZHk6IHRydWUsXG5hZHZhbmNlWEpTQ2hpbGQ6IHRydWUsIGlzWEpTSWRlbnRpZmllclN0YXJ0OiB0cnVlLCBpc1hKU0lkZW50aWZpZXJQYXJ0OiB0cnVlLFxuc2NhblhKU1N0cmluZ0xpdGVyYWw6IHRydWUsIHNjYW5YSlNJZGVudGlmaWVyOiB0cnVlLFxucGFyc2VYSlNBdHRyaWJ1dGVWYWx1ZTogdHJ1ZSwgcGFyc2VYSlNDaGlsZDogdHJ1ZSwgcGFyc2VYSlNFbGVtZW50OiB0cnVlLCBwYXJzZVhKU0V4cHJlc3Npb25Db250YWluZXI6IHRydWUsIHBhcnNlWEpTRW1wdHlFeHByZXNzaW9uOiB0cnVlLFxucGFyc2VUeXBlQW5ub3RhdGlvbjogdHJ1ZSwgcGFyc2VUeXBlQW5ub3RhdGFibGVJZGVudGlmaWVyOiB0cnVlLFxucGFyc2VZaWVsZEV4cHJlc3Npb246IHRydWVcbiovXG5cbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIC8vIFVuaXZlcnNhbCBNb2R1bGUgRGVmaW5pdGlvbiAoVU1EKSB0byBzdXBwb3J0IEFNRCwgQ29tbW9uSlMvTm9kZS5qcyxcbiAgICAvLyBSaGlubywgYW5kIHBsYWluIGJyb3dzZXIgbG9hZGluZy5cbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIGRlZmluZShbJ2V4cG9ydHMnXSwgZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgZmFjdG9yeShleHBvcnRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmYWN0b3J5KChyb290LmVzcHJpbWEgPSB7fSkpO1xuICAgIH1cbn0odGhpcywgZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgVG9rZW4sXG4gICAgICAgIFRva2VuTmFtZSxcbiAgICAgICAgRm5FeHByVG9rZW5zLFxuICAgICAgICBTeW50YXgsXG4gICAgICAgIFByb3BlcnR5S2luZCxcbiAgICAgICAgTWVzc2FnZXMsXG4gICAgICAgIFJlZ2V4LFxuICAgICAgICBTeW50YXhUcmVlRGVsZWdhdGUsXG4gICAgICAgIFhIVE1MRW50aXRpZXMsXG4gICAgICAgIENsYXNzUHJvcGVydHlUeXBlLFxuICAgICAgICBzb3VyY2UsXG4gICAgICAgIHN0cmljdCxcbiAgICAgICAgaW5kZXgsXG4gICAgICAgIGxpbmVOdW1iZXIsXG4gICAgICAgIGxpbmVTdGFydCxcbiAgICAgICAgbGVuZ3RoLFxuICAgICAgICBkZWxlZ2F0ZSxcbiAgICAgICAgbG9va2FoZWFkLFxuICAgICAgICBzdGF0ZSxcbiAgICAgICAgZXh0cmE7XG5cbiAgICBUb2tlbiA9IHtcbiAgICAgICAgQm9vbGVhbkxpdGVyYWw6IDEsXG4gICAgICAgIEVPRjogMixcbiAgICAgICAgSWRlbnRpZmllcjogMyxcbiAgICAgICAgS2V5d29yZDogNCxcbiAgICAgICAgTnVsbExpdGVyYWw6IDUsXG4gICAgICAgIE51bWVyaWNMaXRlcmFsOiA2LFxuICAgICAgICBQdW5jdHVhdG9yOiA3LFxuICAgICAgICBTdHJpbmdMaXRlcmFsOiA4LFxuICAgICAgICBSZWd1bGFyRXhwcmVzc2lvbjogOSxcbiAgICAgICAgVGVtcGxhdGU6IDEwLFxuICAgICAgICBYSlNJZGVudGlmaWVyOiAxMSxcbiAgICAgICAgWEpTVGV4dDogMTJcbiAgICB9O1xuXG4gICAgVG9rZW5OYW1lID0ge307XG4gICAgVG9rZW5OYW1lW1Rva2VuLkJvb2xlYW5MaXRlcmFsXSA9ICdCb29sZWFuJztcbiAgICBUb2tlbk5hbWVbVG9rZW4uRU9GXSA9ICc8ZW5kPic7XG4gICAgVG9rZW5OYW1lW1Rva2VuLklkZW50aWZpZXJdID0gJ0lkZW50aWZpZXInO1xuICAgIFRva2VuTmFtZVtUb2tlbi5LZXl3b3JkXSA9ICdLZXl3b3JkJztcbiAgICBUb2tlbk5hbWVbVG9rZW4uTnVsbExpdGVyYWxdID0gJ051bGwnO1xuICAgIFRva2VuTmFtZVtUb2tlbi5OdW1lcmljTGl0ZXJhbF0gPSAnTnVtZXJpYyc7XG4gICAgVG9rZW5OYW1lW1Rva2VuLlB1bmN0dWF0b3JdID0gJ1B1bmN0dWF0b3InO1xuICAgIFRva2VuTmFtZVtUb2tlbi5TdHJpbmdMaXRlcmFsXSA9ICdTdHJpbmcnO1xuICAgIFRva2VuTmFtZVtUb2tlbi5YSlNJZGVudGlmaWVyXSA9ICdYSlNJZGVudGlmaWVyJztcbiAgICBUb2tlbk5hbWVbVG9rZW4uWEpTVGV4dF0gPSAnWEpTVGV4dCc7XG4gICAgVG9rZW5OYW1lW1Rva2VuLlJlZ3VsYXJFeHByZXNzaW9uXSA9ICdSZWd1bGFyRXhwcmVzc2lvbic7XG5cbiAgICAvLyBBIGZ1bmN0aW9uIGZvbGxvd2luZyBvbmUgb2YgdGhvc2UgdG9rZW5zIGlzIGFuIGV4cHJlc3Npb24uXG4gICAgRm5FeHByVG9rZW5zID0gWycoJywgJ3snLCAnWycsICdpbicsICd0eXBlb2YnLCAnaW5zdGFuY2VvZicsICduZXcnLFxuICAgICAgICAgICAgICAgICAgICAncmV0dXJuJywgJ2Nhc2UnLCAnZGVsZXRlJywgJ3Rocm93JywgJ3ZvaWQnLFxuICAgICAgICAgICAgICAgICAgICAvLyBhc3NpZ25tZW50IG9wZXJhdG9yc1xuICAgICAgICAgICAgICAgICAgICAnPScsICcrPScsICctPScsICcqPScsICcvPScsICclPScsICc8PD0nLCAnPj49JywgJz4+Pj0nLFxuICAgICAgICAgICAgICAgICAgICAnJj0nLCAnfD0nLCAnXj0nLCAnLCcsXG4gICAgICAgICAgICAgICAgICAgIC8vIGJpbmFyeS91bmFyeSBvcGVyYXRvcnNcbiAgICAgICAgICAgICAgICAgICAgJysnLCAnLScsICcqJywgJy8nLCAnJScsICcrKycsICctLScsICc8PCcsICc+PicsICc+Pj4nLCAnJicsXG4gICAgICAgICAgICAgICAgICAgICd8JywgJ14nLCAnIScsICd+JywgJyYmJywgJ3x8JywgJz8nLCAnOicsICc9PT0nLCAnPT0nLCAnPj0nLFxuICAgICAgICAgICAgICAgICAgICAnPD0nLCAnPCcsICc+JywgJyE9JywgJyE9PSddO1xuXG4gICAgU3ludGF4ID0ge1xuICAgICAgICBBcnJheUV4cHJlc3Npb246ICdBcnJheUV4cHJlc3Npb24nLFxuICAgICAgICBBcnJheVBhdHRlcm46ICdBcnJheVBhdHRlcm4nLFxuICAgICAgICBBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbjogJ0Fycm93RnVuY3Rpb25FeHByZXNzaW9uJyxcbiAgICAgICAgQXNzaWdubWVudEV4cHJlc3Npb246ICdBc3NpZ25tZW50RXhwcmVzc2lvbicsXG4gICAgICAgIEJpbmFyeUV4cHJlc3Npb246ICdCaW5hcnlFeHByZXNzaW9uJyxcbiAgICAgICAgQmxvY2tTdGF0ZW1lbnQ6ICdCbG9ja1N0YXRlbWVudCcsXG4gICAgICAgIEJyZWFrU3RhdGVtZW50OiAnQnJlYWtTdGF0ZW1lbnQnLFxuICAgICAgICBDYWxsRXhwcmVzc2lvbjogJ0NhbGxFeHByZXNzaW9uJyxcbiAgICAgICAgQ2F0Y2hDbGF1c2U6ICdDYXRjaENsYXVzZScsXG4gICAgICAgIENsYXNzQm9keTogJ0NsYXNzQm9keScsXG4gICAgICAgIENsYXNzRGVjbGFyYXRpb246ICdDbGFzc0RlY2xhcmF0aW9uJyxcbiAgICAgICAgQ2xhc3NFeHByZXNzaW9uOiAnQ2xhc3NFeHByZXNzaW9uJyxcbiAgICAgICAgQ2xhc3NQcm9wZXJ0eTogJ0NsYXNzUHJvcGVydHknLFxuICAgICAgICBDb21wcmVoZW5zaW9uQmxvY2s6ICdDb21wcmVoZW5zaW9uQmxvY2snLFxuICAgICAgICBDb21wcmVoZW5zaW9uRXhwcmVzc2lvbjogJ0NvbXByZWhlbnNpb25FeHByZXNzaW9uJyxcbiAgICAgICAgQ29uZGl0aW9uYWxFeHByZXNzaW9uOiAnQ29uZGl0aW9uYWxFeHByZXNzaW9uJyxcbiAgICAgICAgQ29udGludWVTdGF0ZW1lbnQ6ICdDb250aW51ZVN0YXRlbWVudCcsXG4gICAgICAgIERlYnVnZ2VyU3RhdGVtZW50OiAnRGVidWdnZXJTdGF0ZW1lbnQnLFxuICAgICAgICBEb1doaWxlU3RhdGVtZW50OiAnRG9XaGlsZVN0YXRlbWVudCcsXG4gICAgICAgIEVtcHR5U3RhdGVtZW50OiAnRW1wdHlTdGF0ZW1lbnQnLFxuICAgICAgICBFeHBvcnREZWNsYXJhdGlvbjogJ0V4cG9ydERlY2xhcmF0aW9uJyxcbiAgICAgICAgRXhwb3J0QmF0Y2hTcGVjaWZpZXI6ICdFeHBvcnRCYXRjaFNwZWNpZmllcicsXG4gICAgICAgIEV4cG9ydFNwZWNpZmllcjogJ0V4cG9ydFNwZWNpZmllcicsXG4gICAgICAgIEV4cHJlc3Npb25TdGF0ZW1lbnQ6ICdFeHByZXNzaW9uU3RhdGVtZW50JyxcbiAgICAgICAgRm9ySW5TdGF0ZW1lbnQ6ICdGb3JJblN0YXRlbWVudCcsXG4gICAgICAgIEZvck9mU3RhdGVtZW50OiAnRm9yT2ZTdGF0ZW1lbnQnLFxuICAgICAgICBGb3JTdGF0ZW1lbnQ6ICdGb3JTdGF0ZW1lbnQnLFxuICAgICAgICBGdW5jdGlvbkRlY2xhcmF0aW9uOiAnRnVuY3Rpb25EZWNsYXJhdGlvbicsXG4gICAgICAgIEZ1bmN0aW9uRXhwcmVzc2lvbjogJ0Z1bmN0aW9uRXhwcmVzc2lvbicsXG4gICAgICAgIElkZW50aWZpZXI6ICdJZGVudGlmaWVyJyxcbiAgICAgICAgSWZTdGF0ZW1lbnQ6ICdJZlN0YXRlbWVudCcsXG4gICAgICAgIEltcG9ydERlY2xhcmF0aW9uOiAnSW1wb3J0RGVjbGFyYXRpb24nLFxuICAgICAgICBJbXBvcnRTcGVjaWZpZXI6ICdJbXBvcnRTcGVjaWZpZXInLFxuICAgICAgICBMYWJlbGVkU3RhdGVtZW50OiAnTGFiZWxlZFN0YXRlbWVudCcsXG4gICAgICAgIExpdGVyYWw6ICdMaXRlcmFsJyxcbiAgICAgICAgTG9naWNhbEV4cHJlc3Npb246ICdMb2dpY2FsRXhwcmVzc2lvbicsXG4gICAgICAgIE1lbWJlckV4cHJlc3Npb246ICdNZW1iZXJFeHByZXNzaW9uJyxcbiAgICAgICAgTWV0aG9kRGVmaW5pdGlvbjogJ01ldGhvZERlZmluaXRpb24nLFxuICAgICAgICBNb2R1bGVEZWNsYXJhdGlvbjogJ01vZHVsZURlY2xhcmF0aW9uJyxcbiAgICAgICAgTmV3RXhwcmVzc2lvbjogJ05ld0V4cHJlc3Npb24nLFxuICAgICAgICBPYmplY3RFeHByZXNzaW9uOiAnT2JqZWN0RXhwcmVzc2lvbicsXG4gICAgICAgIE9iamVjdFBhdHRlcm46ICdPYmplY3RQYXR0ZXJuJyxcbiAgICAgICAgT2JqZWN0VHlwZUFubm90YXRpb246ICdPYmplY3RUeXBlQW5ub3RhdGlvbicsXG4gICAgICAgIE9wdGlvbmFsUGFyYW1ldGVyOiAnT3B0aW9uYWxQYXJhbWV0ZXInLFxuICAgICAgICBQYXJhbWV0cmljVHlwZUFubm90YXRpb246ICdQYXJhbWV0cmljVHlwZUFubm90YXRpb24nLFxuICAgICAgICBQYXJhbWV0cmljYWxseVR5cGVkSWRlbnRpZmllcjogJ1BhcmFtZXRyaWNhbGx5VHlwZWRJZGVudGlmaWVyJyxcbiAgICAgICAgUHJvZ3JhbTogJ1Byb2dyYW0nLFxuICAgICAgICBQcm9wZXJ0eTogJ1Byb3BlcnR5JyxcbiAgICAgICAgUmV0dXJuU3RhdGVtZW50OiAnUmV0dXJuU3RhdGVtZW50JyxcbiAgICAgICAgU2VxdWVuY2VFeHByZXNzaW9uOiAnU2VxdWVuY2VFeHByZXNzaW9uJyxcbiAgICAgICAgU3ByZWFkRWxlbWVudDogJ1NwcmVhZEVsZW1lbnQnLFxuICAgICAgICBTcHJlYWRQcm9wZXJ0eTogJ1NwcmVhZFByb3BlcnR5JyxcbiAgICAgICAgU3dpdGNoQ2FzZTogJ1N3aXRjaENhc2UnLFxuICAgICAgICBTd2l0Y2hTdGF0ZW1lbnQ6ICdTd2l0Y2hTdGF0ZW1lbnQnLFxuICAgICAgICBUYWdnZWRUZW1wbGF0ZUV4cHJlc3Npb246ICdUYWdnZWRUZW1wbGF0ZUV4cHJlc3Npb24nLFxuICAgICAgICBUZW1wbGF0ZUVsZW1lbnQ6ICdUZW1wbGF0ZUVsZW1lbnQnLFxuICAgICAgICBUZW1wbGF0ZUxpdGVyYWw6ICdUZW1wbGF0ZUxpdGVyYWwnLFxuICAgICAgICBUaGlzRXhwcmVzc2lvbjogJ1RoaXNFeHByZXNzaW9uJyxcbiAgICAgICAgVGhyb3dTdGF0ZW1lbnQ6ICdUaHJvd1N0YXRlbWVudCcsXG4gICAgICAgIFRyeVN0YXRlbWVudDogJ1RyeVN0YXRlbWVudCcsXG4gICAgICAgIFR5cGVBbm5vdGF0ZWRJZGVudGlmaWVyOiAnVHlwZUFubm90YXRlZElkZW50aWZpZXInLFxuICAgICAgICBUeXBlQW5ub3RhdGlvbjogJ1R5cGVBbm5vdGF0aW9uJyxcbiAgICAgICAgVW5hcnlFeHByZXNzaW9uOiAnVW5hcnlFeHByZXNzaW9uJyxcbiAgICAgICAgVXBkYXRlRXhwcmVzc2lvbjogJ1VwZGF0ZUV4cHJlc3Npb24nLFxuICAgICAgICBWYXJpYWJsZURlY2xhcmF0aW9uOiAnVmFyaWFibGVEZWNsYXJhdGlvbicsXG4gICAgICAgIFZhcmlhYmxlRGVjbGFyYXRvcjogJ1ZhcmlhYmxlRGVjbGFyYXRvcicsXG4gICAgICAgIFZvaWRUeXBlQW5ub3RhdGlvbjogJ1ZvaWRUeXBlQW5ub3RhdGlvbicsXG4gICAgICAgIFdoaWxlU3RhdGVtZW50OiAnV2hpbGVTdGF0ZW1lbnQnLFxuICAgICAgICBXaXRoU3RhdGVtZW50OiAnV2l0aFN0YXRlbWVudCcsXG4gICAgICAgIFhKU0lkZW50aWZpZXI6ICdYSlNJZGVudGlmaWVyJyxcbiAgICAgICAgWEpTTmFtZXNwYWNlZE5hbWU6ICdYSlNOYW1lc3BhY2VkTmFtZScsXG4gICAgICAgIFhKU01lbWJlckV4cHJlc3Npb246ICdYSlNNZW1iZXJFeHByZXNzaW9uJyxcbiAgICAgICAgWEpTRW1wdHlFeHByZXNzaW9uOiAnWEpTRW1wdHlFeHByZXNzaW9uJyxcbiAgICAgICAgWEpTRXhwcmVzc2lvbkNvbnRhaW5lcjogJ1hKU0V4cHJlc3Npb25Db250YWluZXInLFxuICAgICAgICBYSlNFbGVtZW50OiAnWEpTRWxlbWVudCcsXG4gICAgICAgIFhKU0Nsb3NpbmdFbGVtZW50OiAnWEpTQ2xvc2luZ0VsZW1lbnQnLFxuICAgICAgICBYSlNPcGVuaW5nRWxlbWVudDogJ1hKU09wZW5pbmdFbGVtZW50JyxcbiAgICAgICAgWEpTQXR0cmlidXRlOiAnWEpTQXR0cmlidXRlJyxcbiAgICAgICAgWEpTU3ByZWFkQXR0cmlidXRlOiAnWEpTU3ByZWFkQXR0cmlidXRlJyxcbiAgICAgICAgWEpTVGV4dDogJ1hKU1RleHQnLFxuICAgICAgICBZaWVsZEV4cHJlc3Npb246ICdZaWVsZEV4cHJlc3Npb24nXG4gICAgfTtcblxuICAgIFByb3BlcnR5S2luZCA9IHtcbiAgICAgICAgRGF0YTogMSxcbiAgICAgICAgR2V0OiAyLFxuICAgICAgICBTZXQ6IDRcbiAgICB9O1xuXG4gICAgQ2xhc3NQcm9wZXJ0eVR5cGUgPSB7XG4gICAgICAgICdzdGF0aWMnOiAnc3RhdGljJyxcbiAgICAgICAgcHJvdG90eXBlOiAncHJvdG90eXBlJ1xuICAgIH07XG5cbiAgICAvLyBFcnJvciBtZXNzYWdlcyBzaG91bGQgYmUgaWRlbnRpY2FsIHRvIFY4LlxuICAgIE1lc3NhZ2VzID0ge1xuICAgICAgICBVbmV4cGVjdGVkVG9rZW46ICAnVW5leHBlY3RlZCB0b2tlbiAlMCcsXG4gICAgICAgIFVuZXhwZWN0ZWROdW1iZXI6ICAnVW5leHBlY3RlZCBudW1iZXInLFxuICAgICAgICBVbmV4cGVjdGVkU3RyaW5nOiAgJ1VuZXhwZWN0ZWQgc3RyaW5nJyxcbiAgICAgICAgVW5leHBlY3RlZElkZW50aWZpZXI6ICAnVW5leHBlY3RlZCBpZGVudGlmaWVyJyxcbiAgICAgICAgVW5leHBlY3RlZFJlc2VydmVkOiAgJ1VuZXhwZWN0ZWQgcmVzZXJ2ZWQgd29yZCcsXG4gICAgICAgIFVuZXhwZWN0ZWRUZW1wbGF0ZTogICdVbmV4cGVjdGVkIHF1YXNpICUwJyxcbiAgICAgICAgVW5leHBlY3RlZEVPUzogICdVbmV4cGVjdGVkIGVuZCBvZiBpbnB1dCcsXG4gICAgICAgIE5ld2xpbmVBZnRlclRocm93OiAgJ0lsbGVnYWwgbmV3bGluZSBhZnRlciB0aHJvdycsXG4gICAgICAgIEludmFsaWRSZWdFeHA6ICdJbnZhbGlkIHJlZ3VsYXIgZXhwcmVzc2lvbicsXG4gICAgICAgIFVudGVybWluYXRlZFJlZ0V4cDogICdJbnZhbGlkIHJlZ3VsYXIgZXhwcmVzc2lvbjogbWlzc2luZyAvJyxcbiAgICAgICAgSW52YWxpZExIU0luQXNzaWdubWVudDogICdJbnZhbGlkIGxlZnQtaGFuZCBzaWRlIGluIGFzc2lnbm1lbnQnLFxuICAgICAgICBJbnZhbGlkTEhTSW5Gb3JtYWxzTGlzdDogICdJbnZhbGlkIGxlZnQtaGFuZCBzaWRlIGluIGZvcm1hbHMgbGlzdCcsXG4gICAgICAgIEludmFsaWRMSFNJbkZvckluOiAgJ0ludmFsaWQgbGVmdC1oYW5kIHNpZGUgaW4gZm9yLWluJyxcbiAgICAgICAgTXVsdGlwbGVEZWZhdWx0c0luU3dpdGNoOiAnTW9yZSB0aGFuIG9uZSBkZWZhdWx0IGNsYXVzZSBpbiBzd2l0Y2ggc3RhdGVtZW50JyxcbiAgICAgICAgTm9DYXRjaE9yRmluYWxseTogICdNaXNzaW5nIGNhdGNoIG9yIGZpbmFsbHkgYWZ0ZXIgdHJ5JyxcbiAgICAgICAgVW5rbm93bkxhYmVsOiAnVW5kZWZpbmVkIGxhYmVsIFxcJyUwXFwnJyxcbiAgICAgICAgUmVkZWNsYXJhdGlvbjogJyUwIFxcJyUxXFwnIGhhcyBhbHJlYWR5IGJlZW4gZGVjbGFyZWQnLFxuICAgICAgICBJbGxlZ2FsQ29udGludWU6ICdJbGxlZ2FsIGNvbnRpbnVlIHN0YXRlbWVudCcsXG4gICAgICAgIElsbGVnYWxCcmVhazogJ0lsbGVnYWwgYnJlYWsgc3RhdGVtZW50JyxcbiAgICAgICAgSWxsZWdhbER1cGxpY2F0ZUNsYXNzUHJvcGVydHk6ICdJbGxlZ2FsIGR1cGxpY2F0ZSBwcm9wZXJ0eSBpbiBjbGFzcyBkZWZpbml0aW9uJyxcbiAgICAgICAgSWxsZWdhbFJldHVybjogJ0lsbGVnYWwgcmV0dXJuIHN0YXRlbWVudCcsXG4gICAgICAgIElsbGVnYWxZaWVsZDogJ0lsbGVnYWwgeWllbGQgZXhwcmVzc2lvbicsXG4gICAgICAgIElsbGVnYWxTcHJlYWQ6ICdJbGxlZ2FsIHNwcmVhZCBlbGVtZW50JyxcbiAgICAgICAgU3RyaWN0TW9kZVdpdGg6ICAnU3RyaWN0IG1vZGUgY29kZSBtYXkgbm90IGluY2x1ZGUgYSB3aXRoIHN0YXRlbWVudCcsXG4gICAgICAgIFN0cmljdENhdGNoVmFyaWFibGU6ICAnQ2F0Y2ggdmFyaWFibGUgbWF5IG5vdCBiZSBldmFsIG9yIGFyZ3VtZW50cyBpbiBzdHJpY3QgbW9kZScsXG4gICAgICAgIFN0cmljdFZhck5hbWU6ICAnVmFyaWFibGUgbmFtZSBtYXkgbm90IGJlIGV2YWwgb3IgYXJndW1lbnRzIGluIHN0cmljdCBtb2RlJyxcbiAgICAgICAgU3RyaWN0UGFyYW1OYW1lOiAgJ1BhcmFtZXRlciBuYW1lIGV2YWwgb3IgYXJndW1lbnRzIGlzIG5vdCBhbGxvd2VkIGluIHN0cmljdCBtb2RlJyxcbiAgICAgICAgU3RyaWN0UGFyYW1EdXBlOiAnU3RyaWN0IG1vZGUgZnVuY3Rpb24gbWF5IG5vdCBoYXZlIGR1cGxpY2F0ZSBwYXJhbWV0ZXIgbmFtZXMnLFxuICAgICAgICBQYXJhbWV0ZXJBZnRlclJlc3RQYXJhbWV0ZXI6ICdSZXN0IHBhcmFtZXRlciBtdXN0IGJlIGZpbmFsIHBhcmFtZXRlciBvZiBhbiBhcmd1bWVudCBsaXN0JyxcbiAgICAgICAgRGVmYXVsdFJlc3RQYXJhbWV0ZXI6ICdSZXN0IHBhcmFtZXRlciBjYW4gbm90IGhhdmUgYSBkZWZhdWx0IHZhbHVlJyxcbiAgICAgICAgRWxlbWVudEFmdGVyU3ByZWFkRWxlbWVudDogJ1NwcmVhZCBtdXN0IGJlIHRoZSBmaW5hbCBlbGVtZW50IG9mIGFuIGVsZW1lbnQgbGlzdCcsXG4gICAgICAgIFByb3BlcnR5QWZ0ZXJTcHJlYWRQcm9wZXJ0eTogJ0EgcmVzdCBwcm9wZXJ0eSBtdXN0IGJlIHRoZSBmaW5hbCBwcm9wZXJ0eSBvZiBhbiBvYmplY3QgbGl0ZXJhbCcsXG4gICAgICAgIE9iamVjdFBhdHRlcm5Bc1Jlc3RQYXJhbWV0ZXI6ICdJbnZhbGlkIHJlc3QgcGFyYW1ldGVyJyxcbiAgICAgICAgT2JqZWN0UGF0dGVybkFzU3ByZWFkOiAnSW52YWxpZCBzcHJlYWQgYXJndW1lbnQnLFxuICAgICAgICBTdHJpY3RGdW5jdGlvbk5hbWU6ICAnRnVuY3Rpb24gbmFtZSBtYXkgbm90IGJlIGV2YWwgb3IgYXJndW1lbnRzIGluIHN0cmljdCBtb2RlJyxcbiAgICAgICAgU3RyaWN0T2N0YWxMaXRlcmFsOiAgJ09jdGFsIGxpdGVyYWxzIGFyZSBub3QgYWxsb3dlZCBpbiBzdHJpY3QgbW9kZS4nLFxuICAgICAgICBTdHJpY3REZWxldGU6ICAnRGVsZXRlIG9mIGFuIHVucXVhbGlmaWVkIGlkZW50aWZpZXIgaW4gc3RyaWN0IG1vZGUuJyxcbiAgICAgICAgU3RyaWN0RHVwbGljYXRlUHJvcGVydHk6ICAnRHVwbGljYXRlIGRhdGEgcHJvcGVydHkgaW4gb2JqZWN0IGxpdGVyYWwgbm90IGFsbG93ZWQgaW4gc3RyaWN0IG1vZGUnLFxuICAgICAgICBBY2Nlc3NvckRhdGFQcm9wZXJ0eTogICdPYmplY3QgbGl0ZXJhbCBtYXkgbm90IGhhdmUgZGF0YSBhbmQgYWNjZXNzb3IgcHJvcGVydHkgd2l0aCB0aGUgc2FtZSBuYW1lJyxcbiAgICAgICAgQWNjZXNzb3JHZXRTZXQ6ICAnT2JqZWN0IGxpdGVyYWwgbWF5IG5vdCBoYXZlIG11bHRpcGxlIGdldC9zZXQgYWNjZXNzb3JzIHdpdGggdGhlIHNhbWUgbmFtZScsXG4gICAgICAgIFN0cmljdExIU0Fzc2lnbm1lbnQ6ICAnQXNzaWdubWVudCB0byBldmFsIG9yIGFyZ3VtZW50cyBpcyBub3QgYWxsb3dlZCBpbiBzdHJpY3QgbW9kZScsXG4gICAgICAgIFN0cmljdExIU1Bvc3RmaXg6ICAnUG9zdGZpeCBpbmNyZW1lbnQvZGVjcmVtZW50IG1heSBub3QgaGF2ZSBldmFsIG9yIGFyZ3VtZW50cyBvcGVyYW5kIGluIHN0cmljdCBtb2RlJyxcbiAgICAgICAgU3RyaWN0TEhTUHJlZml4OiAgJ1ByZWZpeCBpbmNyZW1lbnQvZGVjcmVtZW50IG1heSBub3QgaGF2ZSBldmFsIG9yIGFyZ3VtZW50cyBvcGVyYW5kIGluIHN0cmljdCBtb2RlJyxcbiAgICAgICAgU3RyaWN0UmVzZXJ2ZWRXb3JkOiAgJ1VzZSBvZiBmdXR1cmUgcmVzZXJ2ZWQgd29yZCBpbiBzdHJpY3QgbW9kZScsXG4gICAgICAgIE5ld2xpbmVBZnRlck1vZHVsZTogICdJbGxlZ2FsIG5ld2xpbmUgYWZ0ZXIgbW9kdWxlJyxcbiAgICAgICAgTm9Gcm9tQWZ0ZXJJbXBvcnQ6ICdNaXNzaW5nIGZyb20gYWZ0ZXIgaW1wb3J0JyxcbiAgICAgICAgSW52YWxpZE1vZHVsZVNwZWNpZmllcjogJ0ludmFsaWQgbW9kdWxlIHNwZWNpZmllcicsXG4gICAgICAgIE5lc3RlZE1vZHVsZTogJ01vZHVsZSBkZWNsYXJhdGlvbiBjYW4gbm90IGJlIG5lc3RlZCcsXG4gICAgICAgIE5vVW5pbnRpYWxpemVkQ29uc3Q6ICdDb25zdCBtdXN0IGJlIGluaXRpYWxpemVkJyxcbiAgICAgICAgQ29tcHJlaGVuc2lvblJlcXVpcmVzQmxvY2s6ICdDb21wcmVoZW5zaW9uIG11c3QgaGF2ZSBhdCBsZWFzdCBvbmUgYmxvY2snLFxuICAgICAgICBDb21wcmVoZW5zaW9uRXJyb3I6ICAnQ29tcHJlaGVuc2lvbiBFcnJvcicsXG4gICAgICAgIEVhY2hOb3RBbGxvd2VkOiAgJ0VhY2ggaXMgbm90IHN1cHBvcnRlZCcsXG4gICAgICAgIEludmFsaWRYSlNBdHRyaWJ1dGVWYWx1ZTogJ1hKUyB2YWx1ZSBzaG91bGQgYmUgZWl0aGVyIGFuIGV4cHJlc3Npb24gb3IgYSBxdW90ZWQgWEpTIHRleHQnLFxuICAgICAgICBFeHBlY3RlZFhKU0Nsb3NpbmdUYWc6ICdFeHBlY3RlZCBjb3JyZXNwb25kaW5nIFhKUyBjbG9zaW5nIHRhZyBmb3IgJTAnLFxuICAgICAgICBBZGphY2VudFhKU0VsZW1lbnRzOiAnQWRqYWNlbnQgWEpTIGVsZW1lbnRzIG11c3QgYmUgd3JhcHBlZCBpbiBhbiBlbmNsb3NpbmcgdGFnJ1xuICAgIH07XG5cbiAgICAvLyBTZWUgYWxzbyB0b29scy9nZW5lcmF0ZS11bmljb2RlLXJlZ2V4LnB5LlxuICAgIFJlZ2V4ID0ge1xuICAgICAgICBOb25Bc2NpaUlkZW50aWZpZXJTdGFydDogbmV3IFJlZ0V4cCgnW1xceGFhXFx4YjVcXHhiYVxceGMwLVxceGQ2XFx4ZDgtXFx4ZjZcXHhmOC1cXHUwMmMxXFx1MDJjNi1cXHUwMmQxXFx1MDJlMC1cXHUwMmU0XFx1MDJlY1xcdTAyZWVcXHUwMzcwLVxcdTAzNzRcXHUwMzc2XFx1MDM3N1xcdTAzN2EtXFx1MDM3ZFxcdTAzODZcXHUwMzg4LVxcdTAzOGFcXHUwMzhjXFx1MDM4ZS1cXHUwM2ExXFx1MDNhMy1cXHUwM2Y1XFx1MDNmNy1cXHUwNDgxXFx1MDQ4YS1cXHUwNTI3XFx1MDUzMS1cXHUwNTU2XFx1MDU1OVxcdTA1NjEtXFx1MDU4N1xcdTA1ZDAtXFx1MDVlYVxcdTA1ZjAtXFx1MDVmMlxcdTA2MjAtXFx1MDY0YVxcdTA2NmVcXHUwNjZmXFx1MDY3MS1cXHUwNmQzXFx1MDZkNVxcdTA2ZTVcXHUwNmU2XFx1MDZlZVxcdTA2ZWZcXHUwNmZhLVxcdTA2ZmNcXHUwNmZmXFx1MDcxMFxcdTA3MTItXFx1MDcyZlxcdTA3NGQtXFx1MDdhNVxcdTA3YjFcXHUwN2NhLVxcdTA3ZWFcXHUwN2Y0XFx1MDdmNVxcdTA3ZmFcXHUwODAwLVxcdTA4MTVcXHUwODFhXFx1MDgyNFxcdTA4MjhcXHUwODQwLVxcdTA4NThcXHUwOGEwXFx1MDhhMi1cXHUwOGFjXFx1MDkwNC1cXHUwOTM5XFx1MDkzZFxcdTA5NTBcXHUwOTU4LVxcdTA5NjFcXHUwOTcxLVxcdTA5NzdcXHUwOTc5LVxcdTA5N2ZcXHUwOTg1LVxcdTA5OGNcXHUwOThmXFx1MDk5MFxcdTA5OTMtXFx1MDlhOFxcdTA5YWEtXFx1MDliMFxcdTA5YjJcXHUwOWI2LVxcdTA5YjlcXHUwOWJkXFx1MDljZVxcdTA5ZGNcXHUwOWRkXFx1MDlkZi1cXHUwOWUxXFx1MDlmMFxcdTA5ZjFcXHUwYTA1LVxcdTBhMGFcXHUwYTBmXFx1MGExMFxcdTBhMTMtXFx1MGEyOFxcdTBhMmEtXFx1MGEzMFxcdTBhMzJcXHUwYTMzXFx1MGEzNVxcdTBhMzZcXHUwYTM4XFx1MGEzOVxcdTBhNTktXFx1MGE1Y1xcdTBhNWVcXHUwYTcyLVxcdTBhNzRcXHUwYTg1LVxcdTBhOGRcXHUwYThmLVxcdTBhOTFcXHUwYTkzLVxcdTBhYThcXHUwYWFhLVxcdTBhYjBcXHUwYWIyXFx1MGFiM1xcdTBhYjUtXFx1MGFiOVxcdTBhYmRcXHUwYWQwXFx1MGFlMFxcdTBhZTFcXHUwYjA1LVxcdTBiMGNcXHUwYjBmXFx1MGIxMFxcdTBiMTMtXFx1MGIyOFxcdTBiMmEtXFx1MGIzMFxcdTBiMzJcXHUwYjMzXFx1MGIzNS1cXHUwYjM5XFx1MGIzZFxcdTBiNWNcXHUwYjVkXFx1MGI1Zi1cXHUwYjYxXFx1MGI3MVxcdTBiODNcXHUwYjg1LVxcdTBiOGFcXHUwYjhlLVxcdTBiOTBcXHUwYjkyLVxcdTBiOTVcXHUwYjk5XFx1MGI5YVxcdTBiOWNcXHUwYjllXFx1MGI5ZlxcdTBiYTNcXHUwYmE0XFx1MGJhOC1cXHUwYmFhXFx1MGJhZS1cXHUwYmI5XFx1MGJkMFxcdTBjMDUtXFx1MGMwY1xcdTBjMGUtXFx1MGMxMFxcdTBjMTItXFx1MGMyOFxcdTBjMmEtXFx1MGMzM1xcdTBjMzUtXFx1MGMzOVxcdTBjM2RcXHUwYzU4XFx1MGM1OVxcdTBjNjBcXHUwYzYxXFx1MGM4NS1cXHUwYzhjXFx1MGM4ZS1cXHUwYzkwXFx1MGM5Mi1cXHUwY2E4XFx1MGNhYS1cXHUwY2IzXFx1MGNiNS1cXHUwY2I5XFx1MGNiZFxcdTBjZGVcXHUwY2UwXFx1MGNlMVxcdTBjZjFcXHUwY2YyXFx1MGQwNS1cXHUwZDBjXFx1MGQwZS1cXHUwZDEwXFx1MGQxMi1cXHUwZDNhXFx1MGQzZFxcdTBkNGVcXHUwZDYwXFx1MGQ2MVxcdTBkN2EtXFx1MGQ3ZlxcdTBkODUtXFx1MGQ5NlxcdTBkOWEtXFx1MGRiMVxcdTBkYjMtXFx1MGRiYlxcdTBkYmRcXHUwZGMwLVxcdTBkYzZcXHUwZTAxLVxcdTBlMzBcXHUwZTMyXFx1MGUzM1xcdTBlNDAtXFx1MGU0NlxcdTBlODFcXHUwZTgyXFx1MGU4NFxcdTBlODdcXHUwZTg4XFx1MGU4YVxcdTBlOGRcXHUwZTk0LVxcdTBlOTdcXHUwZTk5LVxcdTBlOWZcXHUwZWExLVxcdTBlYTNcXHUwZWE1XFx1MGVhN1xcdTBlYWFcXHUwZWFiXFx1MGVhZC1cXHUwZWIwXFx1MGViMlxcdTBlYjNcXHUwZWJkXFx1MGVjMC1cXHUwZWM0XFx1MGVjNlxcdTBlZGMtXFx1MGVkZlxcdTBmMDBcXHUwZjQwLVxcdTBmNDdcXHUwZjQ5LVxcdTBmNmNcXHUwZjg4LVxcdTBmOGNcXHUxMDAwLVxcdTEwMmFcXHUxMDNmXFx1MTA1MC1cXHUxMDU1XFx1MTA1YS1cXHUxMDVkXFx1MTA2MVxcdTEwNjVcXHUxMDY2XFx1MTA2ZS1cXHUxMDcwXFx1MTA3NS1cXHUxMDgxXFx1MTA4ZVxcdTEwYTAtXFx1MTBjNVxcdTEwYzdcXHUxMGNkXFx1MTBkMC1cXHUxMGZhXFx1MTBmYy1cXHUxMjQ4XFx1MTI0YS1cXHUxMjRkXFx1MTI1MC1cXHUxMjU2XFx1MTI1OFxcdTEyNWEtXFx1MTI1ZFxcdTEyNjAtXFx1MTI4OFxcdTEyOGEtXFx1MTI4ZFxcdTEyOTAtXFx1MTJiMFxcdTEyYjItXFx1MTJiNVxcdTEyYjgtXFx1MTJiZVxcdTEyYzBcXHUxMmMyLVxcdTEyYzVcXHUxMmM4LVxcdTEyZDZcXHUxMmQ4LVxcdTEzMTBcXHUxMzEyLVxcdTEzMTVcXHUxMzE4LVxcdTEzNWFcXHUxMzgwLVxcdTEzOGZcXHUxM2EwLVxcdTEzZjRcXHUxNDAxLVxcdTE2NmNcXHUxNjZmLVxcdTE2N2ZcXHUxNjgxLVxcdTE2OWFcXHUxNmEwLVxcdTE2ZWFcXHUxNmVlLVxcdTE2ZjBcXHUxNzAwLVxcdTE3MGNcXHUxNzBlLVxcdTE3MTFcXHUxNzIwLVxcdTE3MzFcXHUxNzQwLVxcdTE3NTFcXHUxNzYwLVxcdTE3NmNcXHUxNzZlLVxcdTE3NzBcXHUxNzgwLVxcdTE3YjNcXHUxN2Q3XFx1MTdkY1xcdTE4MjAtXFx1MTg3N1xcdTE4ODAtXFx1MThhOFxcdTE4YWFcXHUxOGIwLVxcdTE4ZjVcXHUxOTAwLVxcdTE5MWNcXHUxOTUwLVxcdTE5NmRcXHUxOTcwLVxcdTE5NzRcXHUxOTgwLVxcdTE5YWJcXHUxOWMxLVxcdTE5YzdcXHUxYTAwLVxcdTFhMTZcXHUxYTIwLVxcdTFhNTRcXHUxYWE3XFx1MWIwNS1cXHUxYjMzXFx1MWI0NS1cXHUxYjRiXFx1MWI4My1cXHUxYmEwXFx1MWJhZVxcdTFiYWZcXHUxYmJhLVxcdTFiZTVcXHUxYzAwLVxcdTFjMjNcXHUxYzRkLVxcdTFjNGZcXHUxYzVhLVxcdTFjN2RcXHUxY2U5LVxcdTFjZWNcXHUxY2VlLVxcdTFjZjFcXHUxY2Y1XFx1MWNmNlxcdTFkMDAtXFx1MWRiZlxcdTFlMDAtXFx1MWYxNVxcdTFmMTgtXFx1MWYxZFxcdTFmMjAtXFx1MWY0NVxcdTFmNDgtXFx1MWY0ZFxcdTFmNTAtXFx1MWY1N1xcdTFmNTlcXHUxZjViXFx1MWY1ZFxcdTFmNWYtXFx1MWY3ZFxcdTFmODAtXFx1MWZiNFxcdTFmYjYtXFx1MWZiY1xcdTFmYmVcXHUxZmMyLVxcdTFmYzRcXHUxZmM2LVxcdTFmY2NcXHUxZmQwLVxcdTFmZDNcXHUxZmQ2LVxcdTFmZGJcXHUxZmUwLVxcdTFmZWNcXHUxZmYyLVxcdTFmZjRcXHUxZmY2LVxcdTFmZmNcXHUyMDcxXFx1MjA3ZlxcdTIwOTAtXFx1MjA5Y1xcdTIxMDJcXHUyMTA3XFx1MjEwYS1cXHUyMTEzXFx1MjExNVxcdTIxMTktXFx1MjExZFxcdTIxMjRcXHUyMTI2XFx1MjEyOFxcdTIxMmEtXFx1MjEyZFxcdTIxMmYtXFx1MjEzOVxcdTIxM2MtXFx1MjEzZlxcdTIxNDUtXFx1MjE0OVxcdTIxNGVcXHUyMTYwLVxcdTIxODhcXHUyYzAwLVxcdTJjMmVcXHUyYzMwLVxcdTJjNWVcXHUyYzYwLVxcdTJjZTRcXHUyY2ViLVxcdTJjZWVcXHUyY2YyXFx1MmNmM1xcdTJkMDAtXFx1MmQyNVxcdTJkMjdcXHUyZDJkXFx1MmQzMC1cXHUyZDY3XFx1MmQ2ZlxcdTJkODAtXFx1MmQ5NlxcdTJkYTAtXFx1MmRhNlxcdTJkYTgtXFx1MmRhZVxcdTJkYjAtXFx1MmRiNlxcdTJkYjgtXFx1MmRiZVxcdTJkYzAtXFx1MmRjNlxcdTJkYzgtXFx1MmRjZVxcdTJkZDAtXFx1MmRkNlxcdTJkZDgtXFx1MmRkZVxcdTJlMmZcXHUzMDA1LVxcdTMwMDdcXHUzMDIxLVxcdTMwMjlcXHUzMDMxLVxcdTMwMzVcXHUzMDM4LVxcdTMwM2NcXHUzMDQxLVxcdTMwOTZcXHUzMDlkLVxcdTMwOWZcXHUzMGExLVxcdTMwZmFcXHUzMGZjLVxcdTMwZmZcXHUzMTA1LVxcdTMxMmRcXHUzMTMxLVxcdTMxOGVcXHUzMWEwLVxcdTMxYmFcXHUzMWYwLVxcdTMxZmZcXHUzNDAwLVxcdTRkYjVcXHU0ZTAwLVxcdTlmY2NcXHVhMDAwLVxcdWE0OGNcXHVhNGQwLVxcdWE0ZmRcXHVhNTAwLVxcdWE2MGNcXHVhNjEwLVxcdWE2MWZcXHVhNjJhXFx1YTYyYlxcdWE2NDAtXFx1YTY2ZVxcdWE2N2YtXFx1YTY5N1xcdWE2YTAtXFx1YTZlZlxcdWE3MTctXFx1YTcxZlxcdWE3MjItXFx1YTc4OFxcdWE3OGItXFx1YTc4ZVxcdWE3OTAtXFx1YTc5M1xcdWE3YTAtXFx1YTdhYVxcdWE3ZjgtXFx1YTgwMVxcdWE4MDMtXFx1YTgwNVxcdWE4MDctXFx1YTgwYVxcdWE4MGMtXFx1YTgyMlxcdWE4NDAtXFx1YTg3M1xcdWE4ODItXFx1YThiM1xcdWE4ZjItXFx1YThmN1xcdWE4ZmJcXHVhOTBhLVxcdWE5MjVcXHVhOTMwLVxcdWE5NDZcXHVhOTYwLVxcdWE5N2NcXHVhOTg0LVxcdWE5YjJcXHVhOWNmXFx1YWEwMC1cXHVhYTI4XFx1YWE0MC1cXHVhYTQyXFx1YWE0NC1cXHVhYTRiXFx1YWE2MC1cXHVhYTc2XFx1YWE3YVxcdWFhODAtXFx1YWFhZlxcdWFhYjFcXHVhYWI1XFx1YWFiNlxcdWFhYjktXFx1YWFiZFxcdWFhYzBcXHVhYWMyXFx1YWFkYi1cXHVhYWRkXFx1YWFlMC1cXHVhYWVhXFx1YWFmMi1cXHVhYWY0XFx1YWIwMS1cXHVhYjA2XFx1YWIwOS1cXHVhYjBlXFx1YWIxMS1cXHVhYjE2XFx1YWIyMC1cXHVhYjI2XFx1YWIyOC1cXHVhYjJlXFx1YWJjMC1cXHVhYmUyXFx1YWMwMC1cXHVkN2EzXFx1ZDdiMC1cXHVkN2M2XFx1ZDdjYi1cXHVkN2ZiXFx1ZjkwMC1cXHVmYTZkXFx1ZmE3MC1cXHVmYWQ5XFx1ZmIwMC1cXHVmYjA2XFx1ZmIxMy1cXHVmYjE3XFx1ZmIxZFxcdWZiMWYtXFx1ZmIyOFxcdWZiMmEtXFx1ZmIzNlxcdWZiMzgtXFx1ZmIzY1xcdWZiM2VcXHVmYjQwXFx1ZmI0MVxcdWZiNDNcXHVmYjQ0XFx1ZmI0Ni1cXHVmYmIxXFx1ZmJkMy1cXHVmZDNkXFx1ZmQ1MC1cXHVmZDhmXFx1ZmQ5Mi1cXHVmZGM3XFx1ZmRmMC1cXHVmZGZiXFx1ZmU3MC1cXHVmZTc0XFx1ZmU3Ni1cXHVmZWZjXFx1ZmYyMS1cXHVmZjNhXFx1ZmY0MS1cXHVmZjVhXFx1ZmY2Ni1cXHVmZmJlXFx1ZmZjMi1cXHVmZmM3XFx1ZmZjYS1cXHVmZmNmXFx1ZmZkMi1cXHVmZmQ3XFx1ZmZkYS1cXHVmZmRjXScpLFxuICAgICAgICBOb25Bc2NpaUlkZW50aWZpZXJQYXJ0OiBuZXcgUmVnRXhwKCdbXFx4YWFcXHhiNVxceGJhXFx4YzAtXFx4ZDZcXHhkOC1cXHhmNlxceGY4LVxcdTAyYzFcXHUwMmM2LVxcdTAyZDFcXHUwMmUwLVxcdTAyZTRcXHUwMmVjXFx1MDJlZVxcdTAzMDAtXFx1MDM3NFxcdTAzNzZcXHUwMzc3XFx1MDM3YS1cXHUwMzdkXFx1MDM4NlxcdTAzODgtXFx1MDM4YVxcdTAzOGNcXHUwMzhlLVxcdTAzYTFcXHUwM2EzLVxcdTAzZjVcXHUwM2Y3LVxcdTA0ODFcXHUwNDgzLVxcdTA0ODdcXHUwNDhhLVxcdTA1MjdcXHUwNTMxLVxcdTA1NTZcXHUwNTU5XFx1MDU2MS1cXHUwNTg3XFx1MDU5MS1cXHUwNWJkXFx1MDViZlxcdTA1YzFcXHUwNWMyXFx1MDVjNFxcdTA1YzVcXHUwNWM3XFx1MDVkMC1cXHUwNWVhXFx1MDVmMC1cXHUwNWYyXFx1MDYxMC1cXHUwNjFhXFx1MDYyMC1cXHUwNjY5XFx1MDY2ZS1cXHUwNmQzXFx1MDZkNS1cXHUwNmRjXFx1MDZkZi1cXHUwNmU4XFx1MDZlYS1cXHUwNmZjXFx1MDZmZlxcdTA3MTAtXFx1MDc0YVxcdTA3NGQtXFx1MDdiMVxcdTA3YzAtXFx1MDdmNVxcdTA3ZmFcXHUwODAwLVxcdTA4MmRcXHUwODQwLVxcdTA4NWJcXHUwOGEwXFx1MDhhMi1cXHUwOGFjXFx1MDhlNC1cXHUwOGZlXFx1MDkwMC1cXHUwOTYzXFx1MDk2Ni1cXHUwOTZmXFx1MDk3MS1cXHUwOTc3XFx1MDk3OS1cXHUwOTdmXFx1MDk4MS1cXHUwOTgzXFx1MDk4NS1cXHUwOThjXFx1MDk4ZlxcdTA5OTBcXHUwOTkzLVxcdTA5YThcXHUwOWFhLVxcdTA5YjBcXHUwOWIyXFx1MDliNi1cXHUwOWI5XFx1MDliYy1cXHUwOWM0XFx1MDljN1xcdTA5YzhcXHUwOWNiLVxcdTA5Y2VcXHUwOWQ3XFx1MDlkY1xcdTA5ZGRcXHUwOWRmLVxcdTA5ZTNcXHUwOWU2LVxcdTA5ZjFcXHUwYTAxLVxcdTBhMDNcXHUwYTA1LVxcdTBhMGFcXHUwYTBmXFx1MGExMFxcdTBhMTMtXFx1MGEyOFxcdTBhMmEtXFx1MGEzMFxcdTBhMzJcXHUwYTMzXFx1MGEzNVxcdTBhMzZcXHUwYTM4XFx1MGEzOVxcdTBhM2NcXHUwYTNlLVxcdTBhNDJcXHUwYTQ3XFx1MGE0OFxcdTBhNGItXFx1MGE0ZFxcdTBhNTFcXHUwYTU5LVxcdTBhNWNcXHUwYTVlXFx1MGE2Ni1cXHUwYTc1XFx1MGE4MS1cXHUwYTgzXFx1MGE4NS1cXHUwYThkXFx1MGE4Zi1cXHUwYTkxXFx1MGE5My1cXHUwYWE4XFx1MGFhYS1cXHUwYWIwXFx1MGFiMlxcdTBhYjNcXHUwYWI1LVxcdTBhYjlcXHUwYWJjLVxcdTBhYzVcXHUwYWM3LVxcdTBhYzlcXHUwYWNiLVxcdTBhY2RcXHUwYWQwXFx1MGFlMC1cXHUwYWUzXFx1MGFlNi1cXHUwYWVmXFx1MGIwMS1cXHUwYjAzXFx1MGIwNS1cXHUwYjBjXFx1MGIwZlxcdTBiMTBcXHUwYjEzLVxcdTBiMjhcXHUwYjJhLVxcdTBiMzBcXHUwYjMyXFx1MGIzM1xcdTBiMzUtXFx1MGIzOVxcdTBiM2MtXFx1MGI0NFxcdTBiNDdcXHUwYjQ4XFx1MGI0Yi1cXHUwYjRkXFx1MGI1NlxcdTBiNTdcXHUwYjVjXFx1MGI1ZFxcdTBiNWYtXFx1MGI2M1xcdTBiNjYtXFx1MGI2ZlxcdTBiNzFcXHUwYjgyXFx1MGI4M1xcdTBiODUtXFx1MGI4YVxcdTBiOGUtXFx1MGI5MFxcdTBiOTItXFx1MGI5NVxcdTBiOTlcXHUwYjlhXFx1MGI5Y1xcdTBiOWVcXHUwYjlmXFx1MGJhM1xcdTBiYTRcXHUwYmE4LVxcdTBiYWFcXHUwYmFlLVxcdTBiYjlcXHUwYmJlLVxcdTBiYzJcXHUwYmM2LVxcdTBiYzhcXHUwYmNhLVxcdTBiY2RcXHUwYmQwXFx1MGJkN1xcdTBiZTYtXFx1MGJlZlxcdTBjMDEtXFx1MGMwM1xcdTBjMDUtXFx1MGMwY1xcdTBjMGUtXFx1MGMxMFxcdTBjMTItXFx1MGMyOFxcdTBjMmEtXFx1MGMzM1xcdTBjMzUtXFx1MGMzOVxcdTBjM2QtXFx1MGM0NFxcdTBjNDYtXFx1MGM0OFxcdTBjNGEtXFx1MGM0ZFxcdTBjNTVcXHUwYzU2XFx1MGM1OFxcdTBjNTlcXHUwYzYwLVxcdTBjNjNcXHUwYzY2LVxcdTBjNmZcXHUwYzgyXFx1MGM4M1xcdTBjODUtXFx1MGM4Y1xcdTBjOGUtXFx1MGM5MFxcdTBjOTItXFx1MGNhOFxcdTBjYWEtXFx1MGNiM1xcdTBjYjUtXFx1MGNiOVxcdTBjYmMtXFx1MGNjNFxcdTBjYzYtXFx1MGNjOFxcdTBjY2EtXFx1MGNjZFxcdTBjZDVcXHUwY2Q2XFx1MGNkZVxcdTBjZTAtXFx1MGNlM1xcdTBjZTYtXFx1MGNlZlxcdTBjZjFcXHUwY2YyXFx1MGQwMlxcdTBkMDNcXHUwZDA1LVxcdTBkMGNcXHUwZDBlLVxcdTBkMTBcXHUwZDEyLVxcdTBkM2FcXHUwZDNkLVxcdTBkNDRcXHUwZDQ2LVxcdTBkNDhcXHUwZDRhLVxcdTBkNGVcXHUwZDU3XFx1MGQ2MC1cXHUwZDYzXFx1MGQ2Ni1cXHUwZDZmXFx1MGQ3YS1cXHUwZDdmXFx1MGQ4MlxcdTBkODNcXHUwZDg1LVxcdTBkOTZcXHUwZDlhLVxcdTBkYjFcXHUwZGIzLVxcdTBkYmJcXHUwZGJkXFx1MGRjMC1cXHUwZGM2XFx1MGRjYVxcdTBkY2YtXFx1MGRkNFxcdTBkZDZcXHUwZGQ4LVxcdTBkZGZcXHUwZGYyXFx1MGRmM1xcdTBlMDEtXFx1MGUzYVxcdTBlNDAtXFx1MGU0ZVxcdTBlNTAtXFx1MGU1OVxcdTBlODFcXHUwZTgyXFx1MGU4NFxcdTBlODdcXHUwZTg4XFx1MGU4YVxcdTBlOGRcXHUwZTk0LVxcdTBlOTdcXHUwZTk5LVxcdTBlOWZcXHUwZWExLVxcdTBlYTNcXHUwZWE1XFx1MGVhN1xcdTBlYWFcXHUwZWFiXFx1MGVhZC1cXHUwZWI5XFx1MGViYi1cXHUwZWJkXFx1MGVjMC1cXHUwZWM0XFx1MGVjNlxcdTBlYzgtXFx1MGVjZFxcdTBlZDAtXFx1MGVkOVxcdTBlZGMtXFx1MGVkZlxcdTBmMDBcXHUwZjE4XFx1MGYxOVxcdTBmMjAtXFx1MGYyOVxcdTBmMzVcXHUwZjM3XFx1MGYzOVxcdTBmM2UtXFx1MGY0N1xcdTBmNDktXFx1MGY2Y1xcdTBmNzEtXFx1MGY4NFxcdTBmODYtXFx1MGY5N1xcdTBmOTktXFx1MGZiY1xcdTBmYzZcXHUxMDAwLVxcdTEwNDlcXHUxMDUwLVxcdTEwOWRcXHUxMGEwLVxcdTEwYzVcXHUxMGM3XFx1MTBjZFxcdTEwZDAtXFx1MTBmYVxcdTEwZmMtXFx1MTI0OFxcdTEyNGEtXFx1MTI0ZFxcdTEyNTAtXFx1MTI1NlxcdTEyNThcXHUxMjVhLVxcdTEyNWRcXHUxMjYwLVxcdTEyODhcXHUxMjhhLVxcdTEyOGRcXHUxMjkwLVxcdTEyYjBcXHUxMmIyLVxcdTEyYjVcXHUxMmI4LVxcdTEyYmVcXHUxMmMwXFx1MTJjMi1cXHUxMmM1XFx1MTJjOC1cXHUxMmQ2XFx1MTJkOC1cXHUxMzEwXFx1MTMxMi1cXHUxMzE1XFx1MTMxOC1cXHUxMzVhXFx1MTM1ZC1cXHUxMzVmXFx1MTM4MC1cXHUxMzhmXFx1MTNhMC1cXHUxM2Y0XFx1MTQwMS1cXHUxNjZjXFx1MTY2Zi1cXHUxNjdmXFx1MTY4MS1cXHUxNjlhXFx1MTZhMC1cXHUxNmVhXFx1MTZlZS1cXHUxNmYwXFx1MTcwMC1cXHUxNzBjXFx1MTcwZS1cXHUxNzE0XFx1MTcyMC1cXHUxNzM0XFx1MTc0MC1cXHUxNzUzXFx1MTc2MC1cXHUxNzZjXFx1MTc2ZS1cXHUxNzcwXFx1MTc3MlxcdTE3NzNcXHUxNzgwLVxcdTE3ZDNcXHUxN2Q3XFx1MTdkY1xcdTE3ZGRcXHUxN2UwLVxcdTE3ZTlcXHUxODBiLVxcdTE4MGRcXHUxODEwLVxcdTE4MTlcXHUxODIwLVxcdTE4NzdcXHUxODgwLVxcdTE4YWFcXHUxOGIwLVxcdTE4ZjVcXHUxOTAwLVxcdTE5MWNcXHUxOTIwLVxcdTE5MmJcXHUxOTMwLVxcdTE5M2JcXHUxOTQ2LVxcdTE5NmRcXHUxOTcwLVxcdTE5NzRcXHUxOTgwLVxcdTE5YWJcXHUxOWIwLVxcdTE5YzlcXHUxOWQwLVxcdTE5ZDlcXHUxYTAwLVxcdTFhMWJcXHUxYTIwLVxcdTFhNWVcXHUxYTYwLVxcdTFhN2NcXHUxYTdmLVxcdTFhODlcXHUxYTkwLVxcdTFhOTlcXHUxYWE3XFx1MWIwMC1cXHUxYjRiXFx1MWI1MC1cXHUxYjU5XFx1MWI2Yi1cXHUxYjczXFx1MWI4MC1cXHUxYmYzXFx1MWMwMC1cXHUxYzM3XFx1MWM0MC1cXHUxYzQ5XFx1MWM0ZC1cXHUxYzdkXFx1MWNkMC1cXHUxY2QyXFx1MWNkNC1cXHUxY2Y2XFx1MWQwMC1cXHUxZGU2XFx1MWRmYy1cXHUxZjE1XFx1MWYxOC1cXHUxZjFkXFx1MWYyMC1cXHUxZjQ1XFx1MWY0OC1cXHUxZjRkXFx1MWY1MC1cXHUxZjU3XFx1MWY1OVxcdTFmNWJcXHUxZjVkXFx1MWY1Zi1cXHUxZjdkXFx1MWY4MC1cXHUxZmI0XFx1MWZiNi1cXHUxZmJjXFx1MWZiZVxcdTFmYzItXFx1MWZjNFxcdTFmYzYtXFx1MWZjY1xcdTFmZDAtXFx1MWZkM1xcdTFmZDYtXFx1MWZkYlxcdTFmZTAtXFx1MWZlY1xcdTFmZjItXFx1MWZmNFxcdTFmZjYtXFx1MWZmY1xcdTIwMGNcXHUyMDBkXFx1MjAzZlxcdTIwNDBcXHUyMDU0XFx1MjA3MVxcdTIwN2ZcXHUyMDkwLVxcdTIwOWNcXHUyMGQwLVxcdTIwZGNcXHUyMGUxXFx1MjBlNS1cXHUyMGYwXFx1MjEwMlxcdTIxMDdcXHUyMTBhLVxcdTIxMTNcXHUyMTE1XFx1MjExOS1cXHUyMTFkXFx1MjEyNFxcdTIxMjZcXHUyMTI4XFx1MjEyYS1cXHUyMTJkXFx1MjEyZi1cXHUyMTM5XFx1MjEzYy1cXHUyMTNmXFx1MjE0NS1cXHUyMTQ5XFx1MjE0ZVxcdTIxNjAtXFx1MjE4OFxcdTJjMDAtXFx1MmMyZVxcdTJjMzAtXFx1MmM1ZVxcdTJjNjAtXFx1MmNlNFxcdTJjZWItXFx1MmNmM1xcdTJkMDAtXFx1MmQyNVxcdTJkMjdcXHUyZDJkXFx1MmQzMC1cXHUyZDY3XFx1MmQ2ZlxcdTJkN2YtXFx1MmQ5NlxcdTJkYTAtXFx1MmRhNlxcdTJkYTgtXFx1MmRhZVxcdTJkYjAtXFx1MmRiNlxcdTJkYjgtXFx1MmRiZVxcdTJkYzAtXFx1MmRjNlxcdTJkYzgtXFx1MmRjZVxcdTJkZDAtXFx1MmRkNlxcdTJkZDgtXFx1MmRkZVxcdTJkZTAtXFx1MmRmZlxcdTJlMmZcXHUzMDA1LVxcdTMwMDdcXHUzMDIxLVxcdTMwMmZcXHUzMDMxLVxcdTMwMzVcXHUzMDM4LVxcdTMwM2NcXHUzMDQxLVxcdTMwOTZcXHUzMDk5XFx1MzA5YVxcdTMwOWQtXFx1MzA5ZlxcdTMwYTEtXFx1MzBmYVxcdTMwZmMtXFx1MzBmZlxcdTMxMDUtXFx1MzEyZFxcdTMxMzEtXFx1MzE4ZVxcdTMxYTAtXFx1MzFiYVxcdTMxZjAtXFx1MzFmZlxcdTM0MDAtXFx1NGRiNVxcdTRlMDAtXFx1OWZjY1xcdWEwMDAtXFx1YTQ4Y1xcdWE0ZDAtXFx1YTRmZFxcdWE1MDAtXFx1YTYwY1xcdWE2MTAtXFx1YTYyYlxcdWE2NDAtXFx1YTY2ZlxcdWE2NzQtXFx1YTY3ZFxcdWE2N2YtXFx1YTY5N1xcdWE2OWYtXFx1YTZmMVxcdWE3MTctXFx1YTcxZlxcdWE3MjItXFx1YTc4OFxcdWE3OGItXFx1YTc4ZVxcdWE3OTAtXFx1YTc5M1xcdWE3YTAtXFx1YTdhYVxcdWE3ZjgtXFx1YTgyN1xcdWE4NDAtXFx1YTg3M1xcdWE4ODAtXFx1YThjNFxcdWE4ZDAtXFx1YThkOVxcdWE4ZTAtXFx1YThmN1xcdWE4ZmJcXHVhOTAwLVxcdWE5MmRcXHVhOTMwLVxcdWE5NTNcXHVhOTYwLVxcdWE5N2NcXHVhOTgwLVxcdWE5YzBcXHVhOWNmLVxcdWE5ZDlcXHVhYTAwLVxcdWFhMzZcXHVhYTQwLVxcdWFhNGRcXHVhYTUwLVxcdWFhNTlcXHVhYTYwLVxcdWFhNzZcXHVhYTdhXFx1YWE3YlxcdWFhODAtXFx1YWFjMlxcdWFhZGItXFx1YWFkZFxcdWFhZTAtXFx1YWFlZlxcdWFhZjItXFx1YWFmNlxcdWFiMDEtXFx1YWIwNlxcdWFiMDktXFx1YWIwZVxcdWFiMTEtXFx1YWIxNlxcdWFiMjAtXFx1YWIyNlxcdWFiMjgtXFx1YWIyZVxcdWFiYzAtXFx1YWJlYVxcdWFiZWNcXHVhYmVkXFx1YWJmMC1cXHVhYmY5XFx1YWMwMC1cXHVkN2EzXFx1ZDdiMC1cXHVkN2M2XFx1ZDdjYi1cXHVkN2ZiXFx1ZjkwMC1cXHVmYTZkXFx1ZmE3MC1cXHVmYWQ5XFx1ZmIwMC1cXHVmYjA2XFx1ZmIxMy1cXHVmYjE3XFx1ZmIxZC1cXHVmYjI4XFx1ZmIyYS1cXHVmYjM2XFx1ZmIzOC1cXHVmYjNjXFx1ZmIzZVxcdWZiNDBcXHVmYjQxXFx1ZmI0M1xcdWZiNDRcXHVmYjQ2LVxcdWZiYjFcXHVmYmQzLVxcdWZkM2RcXHVmZDUwLVxcdWZkOGZcXHVmZDkyLVxcdWZkYzdcXHVmZGYwLVxcdWZkZmJcXHVmZTAwLVxcdWZlMGZcXHVmZTIwLVxcdWZlMjZcXHVmZTMzXFx1ZmUzNFxcdWZlNGQtXFx1ZmU0ZlxcdWZlNzAtXFx1ZmU3NFxcdWZlNzYtXFx1ZmVmY1xcdWZmMTAtXFx1ZmYxOVxcdWZmMjEtXFx1ZmYzYVxcdWZmM2ZcXHVmZjQxLVxcdWZmNWFcXHVmZjY2LVxcdWZmYmVcXHVmZmMyLVxcdWZmYzdcXHVmZmNhLVxcdWZmY2ZcXHVmZmQyLVxcdWZmZDdcXHVmZmRhLVxcdWZmZGNdJylcbiAgICB9O1xuXG4gICAgLy8gRW5zdXJlIHRoZSBjb25kaXRpb24gaXMgdHJ1ZSwgb3RoZXJ3aXNlIHRocm93IGFuIGVycm9yLlxuICAgIC8vIFRoaXMgaXMgb25seSB0byBoYXZlIGEgYmV0dGVyIGNvbnRyYWN0IHNlbWFudGljLCBpLmUuIGFub3RoZXIgc2FmZXR5IG5ldFxuICAgIC8vIHRvIGNhdGNoIGEgbG9naWMgZXJyb3IuIFRoZSBjb25kaXRpb24gc2hhbGwgYmUgZnVsZmlsbGVkIGluIG5vcm1hbCBjYXNlLlxuICAgIC8vIERvIE5PVCB1c2UgdGhpcyB0byBlbmZvcmNlIGEgY2VydGFpbiBjb25kaXRpb24gb24gYW55IHVzZXIgaW5wdXQuXG5cbiAgICBmdW5jdGlvbiBhc3NlcnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gICAgICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FTU0VSVDogJyArIG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNEZWNpbWFsRGlnaXQoY2gpIHtcbiAgICAgICAgcmV0dXJuIChjaCA+PSA0OCAmJiBjaCA8PSA1Nyk7ICAgLy8gMC4uOVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzSGV4RGlnaXQoY2gpIHtcbiAgICAgICAgcmV0dXJuICcwMTIzNDU2Nzg5YWJjZGVmQUJDREVGJy5pbmRleE9mKGNoKSA+PSAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzT2N0YWxEaWdpdChjaCkge1xuICAgICAgICByZXR1cm4gJzAxMjM0NTY3Jy5pbmRleE9mKGNoKSA+PSAwO1xuICAgIH1cblxuXG4gICAgLy8gNy4yIFdoaXRlIFNwYWNlXG5cbiAgICBmdW5jdGlvbiBpc1doaXRlU3BhY2UoY2gpIHtcbiAgICAgICAgcmV0dXJuIChjaCA9PT0gMzIpIHx8ICAvLyBzcGFjZVxuICAgICAgICAgICAgKGNoID09PSA5KSB8fCAgICAgIC8vIHRhYlxuICAgICAgICAgICAgKGNoID09PSAweEIpIHx8XG4gICAgICAgICAgICAoY2ggPT09IDB4QykgfHxcbiAgICAgICAgICAgIChjaCA9PT0gMHhBMCkgfHxcbiAgICAgICAgICAgIChjaCA+PSAweDE2ODAgJiYgJ1xcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwM1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMEFcXHUyMDJGXFx1MjA1RlxcdTMwMDBcXHVGRUZGJy5pbmRleE9mKFN0cmluZy5mcm9tQ2hhckNvZGUoY2gpKSA+IDApO1xuICAgIH1cblxuICAgIC8vIDcuMyBMaW5lIFRlcm1pbmF0b3JzXG5cbiAgICBmdW5jdGlvbiBpc0xpbmVUZXJtaW5hdG9yKGNoKSB7XG4gICAgICAgIHJldHVybiAoY2ggPT09IDEwKSB8fCAoY2ggPT09IDEzKSB8fCAoY2ggPT09IDB4MjAyOCkgfHwgKGNoID09PSAweDIwMjkpO1xuICAgIH1cblxuICAgIC8vIDcuNiBJZGVudGlmaWVyIE5hbWVzIGFuZCBJZGVudGlmaWVyc1xuXG4gICAgZnVuY3Rpb24gaXNJZGVudGlmaWVyU3RhcnQoY2gpIHtcbiAgICAgICAgcmV0dXJuIChjaCA9PT0gMzYpIHx8IChjaCA9PT0gOTUpIHx8ICAvLyAkIChkb2xsYXIpIGFuZCBfICh1bmRlcnNjb3JlKVxuICAgICAgICAgICAgKGNoID49IDY1ICYmIGNoIDw9IDkwKSB8fCAgICAgICAgIC8vIEEuLlpcbiAgICAgICAgICAgIChjaCA+PSA5NyAmJiBjaCA8PSAxMjIpIHx8ICAgICAgICAvLyBhLi56XG4gICAgICAgICAgICAoY2ggPT09IDkyKSB8fCAgICAgICAgICAgICAgICAgICAgLy8gXFwgKGJhY2tzbGFzaClcbiAgICAgICAgICAgICgoY2ggPj0gMHg4MCkgJiYgUmVnZXguTm9uQXNjaWlJZGVudGlmaWVyU3RhcnQudGVzdChTdHJpbmcuZnJvbUNoYXJDb2RlKGNoKSkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzSWRlbnRpZmllclBhcnQoY2gpIHtcbiAgICAgICAgcmV0dXJuIChjaCA9PT0gMzYpIHx8IChjaCA9PT0gOTUpIHx8ICAvLyAkIChkb2xsYXIpIGFuZCBfICh1bmRlcnNjb3JlKVxuICAgICAgICAgICAgKGNoID49IDY1ICYmIGNoIDw9IDkwKSB8fCAgICAgICAgIC8vIEEuLlpcbiAgICAgICAgICAgIChjaCA+PSA5NyAmJiBjaCA8PSAxMjIpIHx8ICAgICAgICAvLyBhLi56XG4gICAgICAgICAgICAoY2ggPj0gNDggJiYgY2ggPD0gNTcpIHx8ICAgICAgICAgLy8gMC4uOVxuICAgICAgICAgICAgKGNoID09PSA5MikgfHwgICAgICAgICAgICAgICAgICAgIC8vIFxcIChiYWNrc2xhc2gpXG4gICAgICAgICAgICAoKGNoID49IDB4ODApICYmIFJlZ2V4Lk5vbkFzY2lpSWRlbnRpZmllclBhcnQudGVzdChTdHJpbmcuZnJvbUNoYXJDb2RlKGNoKSkpO1xuICAgIH1cblxuICAgIC8vIDcuNi4xLjIgRnV0dXJlIFJlc2VydmVkIFdvcmRzXG5cbiAgICBmdW5jdGlvbiBpc0Z1dHVyZVJlc2VydmVkV29yZChpZCkge1xuICAgICAgICBzd2l0Y2ggKGlkKSB7XG4gICAgICAgIGNhc2UgJ2NsYXNzJzpcbiAgICAgICAgY2FzZSAnZW51bSc6XG4gICAgICAgIGNhc2UgJ2V4cG9ydCc6XG4gICAgICAgIGNhc2UgJ2V4dGVuZHMnOlxuICAgICAgICBjYXNlICdpbXBvcnQnOlxuICAgICAgICBjYXNlICdzdXBlcic6XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzU3RyaWN0TW9kZVJlc2VydmVkV29yZChpZCkge1xuICAgICAgICBzd2l0Y2ggKGlkKSB7XG4gICAgICAgIGNhc2UgJ2ltcGxlbWVudHMnOlxuICAgICAgICBjYXNlICdpbnRlcmZhY2UnOlxuICAgICAgICBjYXNlICdwYWNrYWdlJzpcbiAgICAgICAgY2FzZSAncHJpdmF0ZSc6XG4gICAgICAgIGNhc2UgJ3Byb3RlY3RlZCc6XG4gICAgICAgIGNhc2UgJ3B1YmxpYyc6XG4gICAgICAgIGNhc2UgJ3N0YXRpYyc6XG4gICAgICAgIGNhc2UgJ3lpZWxkJzpcbiAgICAgICAgY2FzZSAnbGV0JzpcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNSZXN0cmljdGVkV29yZChpZCkge1xuICAgICAgICByZXR1cm4gaWQgPT09ICdldmFsJyB8fCBpZCA9PT0gJ2FyZ3VtZW50cyc7XG4gICAgfVxuXG4gICAgLy8gNy42LjEuMSBLZXl3b3Jkc1xuXG4gICAgZnVuY3Rpb24gaXNLZXl3b3JkKGlkKSB7XG4gICAgICAgIGlmIChzdHJpY3QgJiYgaXNTdHJpY3RNb2RlUmVzZXJ2ZWRXb3JkKGlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyAnY29uc3QnIGlzIHNwZWNpYWxpemVkIGFzIEtleXdvcmQgaW4gVjguXG4gICAgICAgIC8vICd5aWVsZCcgaXMgb25seSB0cmVhdGVkIGFzIGEga2V5d29yZCBpbiBzdHJpY3QgbW9kZS5cbiAgICAgICAgLy8gJ2xldCcgaXMgZm9yIGNvbXBhdGlibGl0eSB3aXRoIFNwaWRlck1vbmtleSBhbmQgRVMubmV4dC5cbiAgICAgICAgLy8gU29tZSBvdGhlcnMgYXJlIGZyb20gZnV0dXJlIHJlc2VydmVkIHdvcmRzLlxuXG4gICAgICAgIHN3aXRjaCAoaWQubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIHJldHVybiAoaWQgPT09ICdpZicpIHx8IChpZCA9PT0gJ2luJykgfHwgKGlkID09PSAnZG8nKTtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgcmV0dXJuIChpZCA9PT0gJ3ZhcicpIHx8IChpZCA9PT0gJ2ZvcicpIHx8IChpZCA9PT0gJ25ldycpIHx8XG4gICAgICAgICAgICAgICAgKGlkID09PSAndHJ5JykgfHwgKGlkID09PSAnbGV0Jyk7XG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIHJldHVybiAoaWQgPT09ICd0aGlzJykgfHwgKGlkID09PSAnZWxzZScpIHx8IChpZCA9PT0gJ2Nhc2UnKSB8fFxuICAgICAgICAgICAgICAgIChpZCA9PT0gJ3ZvaWQnKSB8fCAoaWQgPT09ICd3aXRoJykgfHwgKGlkID09PSAnZW51bScpO1xuICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICByZXR1cm4gKGlkID09PSAnd2hpbGUnKSB8fCAoaWQgPT09ICdicmVhaycpIHx8IChpZCA9PT0gJ2NhdGNoJykgfHxcbiAgICAgICAgICAgICAgICAoaWQgPT09ICd0aHJvdycpIHx8IChpZCA9PT0gJ2NvbnN0JykgfHxcbiAgICAgICAgICAgICAgICAoaWQgPT09ICdjbGFzcycpIHx8IChpZCA9PT0gJ3N1cGVyJyk7XG4gICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgIHJldHVybiAoaWQgPT09ICdyZXR1cm4nKSB8fCAoaWQgPT09ICd0eXBlb2YnKSB8fCAoaWQgPT09ICdkZWxldGUnKSB8fFxuICAgICAgICAgICAgICAgIChpZCA9PT0gJ3N3aXRjaCcpIHx8IChpZCA9PT0gJ2V4cG9ydCcpIHx8IChpZCA9PT0gJ2ltcG9ydCcpO1xuICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICByZXR1cm4gKGlkID09PSAnZGVmYXVsdCcpIHx8IChpZCA9PT0gJ2ZpbmFsbHknKSB8fCAoaWQgPT09ICdleHRlbmRzJyk7XG4gICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgIHJldHVybiAoaWQgPT09ICdmdW5jdGlvbicpIHx8IChpZCA9PT0gJ2NvbnRpbnVlJykgfHwgKGlkID09PSAnZGVidWdnZXInKTtcbiAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgIHJldHVybiAoaWQgPT09ICdpbnN0YW5jZW9mJyk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyA3LjQgQ29tbWVudHNcblxuICAgIGZ1bmN0aW9uIHNraXBDb21tZW50KCkge1xuICAgICAgICB2YXIgY2gsIGJsb2NrQ29tbWVudCwgbGluZUNvbW1lbnQ7XG5cbiAgICAgICAgYmxvY2tDb21tZW50ID0gZmFsc2U7XG4gICAgICAgIGxpbmVDb21tZW50ID0gZmFsc2U7XG5cbiAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICBjaCA9IHNvdXJjZS5jaGFyQ29kZUF0KGluZGV4KTtcblxuICAgICAgICAgICAgaWYgKGxpbmVDb21tZW50KSB7XG4gICAgICAgICAgICAgICAgKytpbmRleDtcbiAgICAgICAgICAgICAgICBpZiAoaXNMaW5lVGVybWluYXRvcihjaCkpIHtcbiAgICAgICAgICAgICAgICAgICAgbGluZUNvbW1lbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoID09PSAxMyAmJiBzb3VyY2UuY2hhckNvZGVBdChpbmRleCkgPT09IDEwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICArK2luZGV4O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICsrbGluZU51bWJlcjtcbiAgICAgICAgICAgICAgICAgICAgbGluZVN0YXJ0ID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChibG9ja0NvbW1lbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNMaW5lVGVybWluYXRvcihjaCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoID09PSAxMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgKytpbmRleDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoY2ggIT09IDEzIHx8IHNvdXJjZS5jaGFyQ29kZUF0KGluZGV4KSA9PT0gMTApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICsrbGluZU51bWJlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICsraW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lU3RhcnQgPSBpbmRleDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA+PSBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvd0Vycm9yKHt9LCBNZXNzYWdlcy5VbmV4cGVjdGVkVG9rZW4sICdJTExFR0FMJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjaCA9IHNvdXJjZS5jaGFyQ29kZUF0KGluZGV4KyspO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPj0gbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvd0Vycm9yKHt9LCBNZXNzYWdlcy5VbmV4cGVjdGVkVG9rZW4sICdJTExFR0FMJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gQmxvY2sgY29tbWVudCBlbmRzIHdpdGggJyovJyAoY2hhciAjNDIsIGNoYXIgIzQ3KS5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoID09PSA0Mikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2ggPSBzb3VyY2UuY2hhckNvZGVBdChpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2ggPT09IDQ3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKytpbmRleDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBibG9ja0NvbW1lbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2ggPT09IDQ3KSB7XG4gICAgICAgICAgICAgICAgY2ggPSBzb3VyY2UuY2hhckNvZGVBdChpbmRleCArIDEpO1xuICAgICAgICAgICAgICAgIC8vIExpbmUgY29tbWVudCBzdGFydHMgd2l0aCAnLy8nIChjaGFyICM0NywgY2hhciAjNDcpLlxuICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gNDcpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggKz0gMjtcbiAgICAgICAgICAgICAgICAgICAgbGluZUNvbW1lbnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2ggPT09IDQyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEJsb2NrIGNvbW1lbnQgc3RhcnRzIHdpdGggJy8qJyAoY2hhciAjNDcsIGNoYXIgIzQyKS5cbiAgICAgICAgICAgICAgICAgICAgaW5kZXggKz0gMjtcbiAgICAgICAgICAgICAgICAgICAgYmxvY2tDb21tZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID49IGxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3dFcnJvcih7fSwgTWVzc2FnZXMuVW5leHBlY3RlZFRva2VuLCAnSUxMRUdBTCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChpc1doaXRlU3BhY2UoY2gpKSB7XG4gICAgICAgICAgICAgICAgKytpbmRleDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNMaW5lVGVybWluYXRvcihjaCkpIHtcbiAgICAgICAgICAgICAgICArK2luZGV4O1xuICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gMTMgJiYgc291cmNlLmNoYXJDb2RlQXQoaW5kZXgpID09PSAxMCkge1xuICAgICAgICAgICAgICAgICAgICArK2luZGV4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICArK2xpbmVOdW1iZXI7XG4gICAgICAgICAgICAgICAgbGluZVN0YXJ0ID0gaW5kZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2NhbkhleEVzY2FwZShwcmVmaXgpIHtcbiAgICAgICAgdmFyIGksIGxlbiwgY2gsIGNvZGUgPSAwO1xuXG4gICAgICAgIGxlbiA9IChwcmVmaXggPT09ICd1JykgPyA0IDogMjtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPCBsZW5ndGggJiYgaXNIZXhEaWdpdChzb3VyY2VbaW5kZXhdKSkge1xuICAgICAgICAgICAgICAgIGNoID0gc291cmNlW2luZGV4KytdO1xuICAgICAgICAgICAgICAgIGNvZGUgPSBjb2RlICogMTYgKyAnMDEyMzQ1Njc4OWFiY2RlZicuaW5kZXhPZihjaC50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjYW5Vbmljb2RlQ29kZVBvaW50RXNjYXBlKCkge1xuICAgICAgICB2YXIgY2gsIGNvZGUsIGN1MSwgY3UyO1xuXG4gICAgICAgIGNoID0gc291cmNlW2luZGV4XTtcbiAgICAgICAgY29kZSA9IDA7XG5cbiAgICAgICAgLy8gQXQgbGVhc3QsIG9uZSBoZXggZGlnaXQgaXMgcmVxdWlyZWQuXG4gICAgICAgIGlmIChjaCA9PT0gJ30nKSB7XG4gICAgICAgICAgICB0aHJvd0Vycm9yKHt9LCBNZXNzYWdlcy5VbmV4cGVjdGVkVG9rZW4sICdJTExFR0FMJyk7XG4gICAgICAgIH1cblxuICAgICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIGNoID0gc291cmNlW2luZGV4KytdO1xuICAgICAgICAgICAgaWYgKCFpc0hleERpZ2l0KGNoKSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29kZSA9IGNvZGUgKiAxNiArICcwMTIzNDU2Nzg5YWJjZGVmJy5pbmRleE9mKGNoLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvZGUgPiAweDEwRkZGRiB8fCBjaCAhPT0gJ30nKSB7XG4gICAgICAgICAgICB0aHJvd0Vycm9yKHt9LCBNZXNzYWdlcy5VbmV4cGVjdGVkVG9rZW4sICdJTExFR0FMJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVVEYtMTYgRW5jb2RpbmdcbiAgICAgICAgaWYgKGNvZGUgPD0gMHhGRkZGKSB7XG4gICAgICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBjdTEgPSAoKGNvZGUgLSAweDEwMDAwKSA+PiAxMCkgKyAweEQ4MDA7XG4gICAgICAgIGN1MiA9ICgoY29kZSAtIDB4MTAwMDApICYgMTAyMykgKyAweERDMDA7XG4gICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGN1MSwgY3UyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRFc2NhcGVkSWRlbnRpZmllcigpIHtcbiAgICAgICAgdmFyIGNoLCBpZDtcblxuICAgICAgICBjaCA9IHNvdXJjZS5jaGFyQ29kZUF0KGluZGV4KyspO1xuICAgICAgICBpZCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2gpO1xuXG4gICAgICAgIC8vICdcXHUnIChjaGFyICM5MiwgY2hhciAjMTE3KSBkZW5vdGVzIGFuIGVzY2FwZWQgY2hhcmFjdGVyLlxuICAgICAgICBpZiAoY2ggPT09IDkyKSB7XG4gICAgICAgICAgICBpZiAoc291cmNlLmNoYXJDb2RlQXQoaW5kZXgpICE9PSAxMTcpIHtcbiAgICAgICAgICAgICAgICB0aHJvd0Vycm9yKHt9LCBNZXNzYWdlcy5VbmV4cGVjdGVkVG9rZW4sICdJTExFR0FMJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICArK2luZGV4O1xuICAgICAgICAgICAgY2ggPSBzY2FuSGV4RXNjYXBlKCd1Jyk7XG4gICAgICAgICAgICBpZiAoIWNoIHx8IGNoID09PSAnXFxcXCcgfHwgIWlzSWRlbnRpZmllclN0YXJ0KGNoLmNoYXJDb2RlQXQoMCkpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3dFcnJvcih7fSwgTWVzc2FnZXMuVW5leHBlY3RlZFRva2VuLCAnSUxMRUdBTCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWQgPSBjaDtcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgY2ggPSBzb3VyY2UuY2hhckNvZGVBdChpbmRleCk7XG4gICAgICAgICAgICBpZiAoIWlzSWRlbnRpZmllclBhcnQoY2gpKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICArK2luZGV4O1xuICAgICAgICAgICAgaWQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjaCk7XG5cbiAgICAgICAgICAgIC8vICdcXHUnIChjaGFyICM5MiwgY2hhciAjMTE3KSBkZW5vdGVzIGFuIGVzY2FwZWQgY2hhcmFjdGVyLlxuICAgICAgICAgICAgaWYgKGNoID09PSA5Mikge1xuICAgICAgICAgICAgICAgIGlkID0gaWQuc3Vic3RyKDAsIGlkLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgICAgIGlmIChzb3VyY2UuY2hhckNvZGVBdChpbmRleCkgIT09IDExNykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvd0Vycm9yKHt9LCBNZXNzYWdlcy5VbmV4cGVjdGVkVG9rZW4sICdJTExFR0FMJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICsraW5kZXg7XG4gICAgICAgICAgICAgICAgY2ggPSBzY2FuSGV4RXNjYXBlKCd1Jyk7XG4gICAgICAgICAgICAgICAgaWYgKCFjaCB8fCBjaCA9PT0gJ1xcXFwnIHx8ICFpc0lkZW50aWZpZXJQYXJ0KGNoLmNoYXJDb2RlQXQoMCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93RXJyb3Ioe30sIE1lc3NhZ2VzLlVuZXhwZWN0ZWRUb2tlbiwgJ0lMTEVHQUwnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWQgKz0gY2g7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0SWRlbnRpZmllcigpIHtcbiAgICAgICAgdmFyIHN0YXJ0LCBjaDtcblxuICAgICAgICBzdGFydCA9IGluZGV4Kys7XG4gICAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgY2ggPSBzb3VyY2UuY2hhckNvZGVBdChpbmRleCk7XG4gICAgICAgICAgICBpZiAoY2ggPT09IDkyKSB7XG4gICAgICAgICAgICAgICAgLy8gQmxhY2tzbGFzaCAoY2hhciAjOTIpIG1hcmtzIFVuaWNvZGUgZXNjYXBlIHNlcXVlbmNlLlxuICAgICAgICAgICAgICAgIGluZGV4ID0gc3RhcnQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldEVzY2FwZWRJZGVudGlmaWVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNJZGVudGlmaWVyUGFydChjaCkpIHtcbiAgICAgICAgICAgICAgICArK2luZGV4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzb3VyY2Uuc2xpY2Uoc3RhcnQsIGluZGV4KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzY2FuSWRlbnRpZmllcigpIHtcbiAgICAgICAgdmFyIHN0YXJ0LCBpZCwgdHlwZTtcblxuICAgICAgICBzdGFydCA9IGluZGV4O1xuXG4gICAgICAgIC8vIEJhY2tzbGFzaCAoY2hhciAjOTIpIHN0YXJ0cyBhbiBlc2NhcGVkIGNoYXJhY3Rlci5cbiAgICAgICAgaWQgPSAoc291cmNlLmNoYXJDb2RlQXQoaW5kZXgpID09PSA5MikgPyBnZXRFc2NhcGVkSWRlbnRpZmllcigpIDogZ2V0SWRlbnRpZmllcigpO1xuXG4gICAgICAgIC8vIFRoZXJlIGlzIG5vIGtleXdvcmQgb3IgbGl0ZXJhbCB3aXRoIG9ubHkgb25lIGNoYXJhY3Rlci5cbiAgICAgICAgLy8gVGh1cywgaXQgbXVzdCBiZSBhbiBpZGVudGlmaWVyLlxuICAgICAgICBpZiAoaWQubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICB0eXBlID0gVG9rZW4uSWRlbnRpZmllcjtcbiAgICAgICAgfSBlbHNlIGlmIChpc0tleXdvcmQoaWQpKSB7XG4gICAgICAgICAgICB0eXBlID0gVG9rZW4uS2V5d29yZDtcbiAgICAgICAgfSBlbHNlIGlmIChpZCA9PT0gJ251bGwnKSB7XG4gICAgICAgICAgICB0eXBlID0gVG9rZW4uTnVsbExpdGVyYWw7XG4gICAgICAgIH0gZWxzZSBpZiAoaWQgPT09ICd0cnVlJyB8fCBpZCA9PT0gJ2ZhbHNlJykge1xuICAgICAgICAgICAgdHlwZSA9IFRva2VuLkJvb2xlYW5MaXRlcmFsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHlwZSA9IFRva2VuLklkZW50aWZpZXI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICAgIHZhbHVlOiBpZCxcbiAgICAgICAgICAgIGxpbmVOdW1iZXI6IGxpbmVOdW1iZXIsXG4gICAgICAgICAgICBsaW5lU3RhcnQ6IGxpbmVTdGFydCxcbiAgICAgICAgICAgIHJhbmdlOiBbc3RhcnQsIGluZGV4XVxuICAgICAgICB9O1xuICAgIH1cblxuXG4gICAgLy8gNy43IFB1bmN0dWF0b3JzXG5cbiAgICBmdW5jdGlvbiBzY2FuUHVuY3R1YXRvcigpIHtcbiAgICAgICAgdmFyIHN0YXJ0ID0gaW5kZXgsXG4gICAgICAgICAgICBjb2RlID0gc291cmNlLmNoYXJDb2RlQXQoaW5kZXgpLFxuICAgICAgICAgICAgY29kZTIsXG4gICAgICAgICAgICBjaDEgPSBzb3VyY2VbaW5kZXhdLFxuICAgICAgICAgICAgY2gyLFxuICAgICAgICAgICAgY2gzLFxuICAgICAgICAgICAgY2g0O1xuXG4gICAgICAgIHN3aXRjaCAoY29kZSkge1xuICAgICAgICAvLyBDaGVjayBmb3IgbW9zdCBjb21tb24gc2luZ2xlLWNoYXJhY3RlciBwdW5jdHVhdG9ycy5cbiAgICAgICAgY2FzZSA0MDogICAvLyAoIG9wZW4gYnJhY2tldFxuICAgICAgICBjYXNlIDQxOiAgIC8vICkgY2xvc2UgYnJhY2tldFxuICAgICAgICBjYXNlIDU5OiAgIC8vIDsgc2VtaWNvbG9uXG4gICAgICAgIGNhc2UgNDQ6ICAgLy8gLCBjb21tYVxuICAgICAgICBjYXNlIDEyMzogIC8vIHsgb3BlbiBjdXJseSBicmFjZVxuICAgICAgICBjYXNlIDEyNTogIC8vIH0gY2xvc2UgY3VybHkgYnJhY2VcbiAgICAgICAgY2FzZSA5MTogICAvLyBbXG4gICAgICAgIGNhc2UgOTM6ICAgLy8gXVxuICAgICAgICBjYXNlIDU4OiAgIC8vIDpcbiAgICAgICAgY2FzZSA2MzogICAvLyA/XG4gICAgICAgIGNhc2UgMTI2OiAgLy8gflxuICAgICAgICAgICAgKytpbmRleDtcbiAgICAgICAgICAgIGlmIChleHRyYS50b2tlbml6ZSkge1xuICAgICAgICAgICAgICAgIGlmIChjb2RlID09PSA0MCkge1xuICAgICAgICAgICAgICAgICAgICBleHRyYS5vcGVuUGFyZW5Ub2tlbiA9IGV4dHJhLnRva2Vucy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb2RlID09PSAxMjMpIHtcbiAgICAgICAgICAgICAgICAgICAgZXh0cmEub3BlbkN1cmx5VG9rZW4gPSBleHRyYS50b2tlbnMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogVG9rZW4uUHVuY3R1YXRvcixcbiAgICAgICAgICAgICAgICB2YWx1ZTogU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKSxcbiAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiBsaW5lTnVtYmVyLFxuICAgICAgICAgICAgICAgIGxpbmVTdGFydDogbGluZVN0YXJ0LFxuICAgICAgICAgICAgICAgIHJhbmdlOiBbc3RhcnQsIGluZGV4XVxuICAgICAgICAgICAgfTtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY29kZTIgPSBzb3VyY2UuY2hhckNvZGVBdChpbmRleCArIDEpO1xuXG4gICAgICAgICAgICAvLyAnPScgKGNoYXIgIzYxKSBtYXJrcyBhbiBhc3NpZ25tZW50IG9yIGNvbXBhcmlzb24gb3BlcmF0b3IuXG4gICAgICAgICAgICBpZiAoY29kZTIgPT09IDYxKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChjb2RlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAzNzogIC8vICVcbiAgICAgICAgICAgICAgICBjYXNlIDM4OiAgLy8gJlxuICAgICAgICAgICAgICAgIGNhc2UgNDI6ICAvLyAqOlxuICAgICAgICAgICAgICAgIGNhc2UgNDM6ICAvLyArXG4gICAgICAgICAgICAgICAgY2FzZSA0NTogIC8vIC1cbiAgICAgICAgICAgICAgICBjYXNlIDQ3OiAgLy8gL1xuICAgICAgICAgICAgICAgIGNhc2UgNjA6ICAvLyA8XG4gICAgICAgICAgICAgICAgY2FzZSA2MjogIC8vID5cbiAgICAgICAgICAgICAgICBjYXNlIDk0OiAgLy8gXlxuICAgICAgICAgICAgICAgIGNhc2UgMTI0OiAvLyB8XG4gICAgICAgICAgICAgICAgICAgIGluZGV4ICs9IDI7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBUb2tlbi5QdW5jdHVhdG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSkgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IGxpbmVOdW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lU3RhcnQ6IGxpbmVTdGFydCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlOiBbc3RhcnQsIGluZGV4XVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgY2FzZSAzMzogLy8gIVxuICAgICAgICAgICAgICAgIGNhc2UgNjE6IC8vID1cbiAgICAgICAgICAgICAgICAgICAgaW5kZXggKz0gMjtcblxuICAgICAgICAgICAgICAgICAgICAvLyAhPT0gYW5kID09PVxuICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlLmNoYXJDb2RlQXQoaW5kZXgpID09PSA2MSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgKytpbmRleDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogVG9rZW4uUHVuY3R1YXRvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBzb3VyY2Uuc2xpY2Uoc3RhcnQsIGluZGV4KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IGxpbmVOdW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lU3RhcnQ6IGxpbmVTdGFydCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlOiBbc3RhcnQsIGluZGV4XVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUGVlayBtb3JlIGNoYXJhY3RlcnMuXG5cbiAgICAgICAgY2gyID0gc291cmNlW2luZGV4ICsgMV07XG4gICAgICAgIGNoMyA9IHNvdXJjZVtpbmRleCArIDJdO1xuICAgICAgICBjaDQgPSBzb3VyY2VbaW5kZXggKyAzXTtcblxuICAgICAgICAvLyA0LWNoYXJhY3RlciBwdW5jdHVhdG9yOiA+Pj49XG5cbiAgICAgICAgaWYgKGNoMSA9PT0gJz4nICYmIGNoMiA9PT0gJz4nICYmIGNoMyA9PT0gJz4nKSB7XG4gICAgICAgICAgICBpZiAoY2g0ID09PSAnPScpIHtcbiAgICAgICAgICAgICAgICBpbmRleCArPSA0O1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFRva2VuLlB1bmN0dWF0b3IsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnPj4+PScsXG4gICAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IGxpbmVOdW1iZXIsXG4gICAgICAgICAgICAgICAgICAgIGxpbmVTdGFydDogbGluZVN0YXJ0LFxuICAgICAgICAgICAgICAgICAgICByYW5nZTogW3N0YXJ0LCBpbmRleF1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gMy1jaGFyYWN0ZXIgcHVuY3R1YXRvcnM6ID09PSAhPT0gPj4+IDw8PSA+Pj1cblxuICAgICAgICBpZiAoY2gxID09PSAnPicgJiYgY2gyID09PSAnPicgJiYgY2gzID09PSAnPicpIHtcbiAgICAgICAgICAgIGluZGV4ICs9IDM7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFRva2VuLlB1bmN0dWF0b3IsXG4gICAgICAgICAgICAgICAgdmFsdWU6ICc+Pj4nLFxuICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IGxpbmVOdW1iZXIsXG4gICAgICAgICAgICAgICAgbGluZVN0YXJ0OiBsaW5lU3RhcnQsXG4gICAgICAgICAgICAgICAgcmFuZ2U6IFtzdGFydCwgaW5kZXhdXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNoMSA9PT0gJzwnICYmIGNoMiA9PT0gJzwnICYmIGNoMyA9PT0gJz0nKSB7XG4gICAgICAgICAgICBpbmRleCArPSAzO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBUb2tlbi5QdW5jdHVhdG9yLFxuICAgICAgICAgICAgICAgIHZhbHVlOiAnPDw9JyxcbiAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiBsaW5lTnVtYmVyLFxuICAgICAgICAgICAgICAgIGxpbmVTdGFydDogbGluZVN0YXJ0LFxuICAgICAgICAgICAgICAgIHJhbmdlOiBbc3RhcnQsIGluZGV4XVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaDEgPT09ICc+JyAmJiBjaDIgPT09ICc+JyAmJiBjaDMgPT09ICc9Jykge1xuICAgICAgICAgICAgaW5kZXggKz0gMztcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogVG9rZW4uUHVuY3R1YXRvcixcbiAgICAgICAgICAgICAgICB2YWx1ZTogJz4+PScsXG4gICAgICAgICAgICAgICAgbGluZU51bWJlcjogbGluZU51bWJlcixcbiAgICAgICAgICAgICAgICBsaW5lU3RhcnQ6IGxpbmVTdGFydCxcbiAgICAgICAgICAgICAgICByYW5nZTogW3N0YXJ0LCBpbmRleF1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2gxID09PSAnLicgJiYgY2gyID09PSAnLicgJiYgY2gzID09PSAnLicpIHtcbiAgICAgICAgICAgIGluZGV4ICs9IDM7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFRva2VuLlB1bmN0dWF0b3IsXG4gICAgICAgICAgICAgICAgdmFsdWU6ICcuLi4nLFxuICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IGxpbmVOdW1iZXIsXG4gICAgICAgICAgICAgICAgbGluZVN0YXJ0OiBsaW5lU3RhcnQsXG4gICAgICAgICAgICAgICAgcmFuZ2U6IFtzdGFydCwgaW5kZXhdXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gT3RoZXIgMi1jaGFyYWN0ZXIgcHVuY3R1YXRvcnM6ICsrIC0tIDw8ID4+ICYmIHx8XG5cbiAgICAgICAgaWYgKGNoMSA9PT0gY2gyICYmICgnKy08PiZ8Jy5pbmRleE9mKGNoMSkgPj0gMCkpIHtcbiAgICAgICAgICAgIGluZGV4ICs9IDI7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFRva2VuLlB1bmN0dWF0b3IsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGNoMSArIGNoMixcbiAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiBsaW5lTnVtYmVyLFxuICAgICAgICAgICAgICAgIGxpbmVTdGFydDogbGluZVN0YXJ0LFxuICAgICAgICAgICAgICAgIHJhbmdlOiBbc3RhcnQsIGluZGV4XVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaDEgPT09ICc9JyAmJiBjaDIgPT09ICc+Jykge1xuICAgICAgICAgICAgaW5kZXggKz0gMjtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogVG9rZW4uUHVuY3R1YXRvcixcbiAgICAgICAgICAgICAgICB2YWx1ZTogJz0+JyxcbiAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiBsaW5lTnVtYmVyLFxuICAgICAgICAgICAgICAgIGxpbmVTdGFydDogbGluZVN0YXJ0LFxuICAgICAgICAgICAgICAgIHJhbmdlOiBbc3RhcnQsIGluZGV4XVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgnPD49ISstKiUmfF4vJy5pbmRleE9mKGNoMSkgPj0gMCkge1xuICAgICAgICAgICAgKytpbmRleDtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogVG9rZW4uUHVuY3R1YXRvcixcbiAgICAgICAgICAgICAgICB2YWx1ZTogY2gxLFxuICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IGxpbmVOdW1iZXIsXG4gICAgICAgICAgICAgICAgbGluZVN0YXJ0OiBsaW5lU3RhcnQsXG4gICAgICAgICAgICAgICAgcmFuZ2U6IFtzdGFydCwgaW5kZXhdXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNoMSA9PT0gJy4nKSB7XG4gICAgICAgICAgICArK2luZGV4O1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBUb2tlbi5QdW5jdHVhdG9yLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBjaDEsXG4gICAgICAgICAgICAgICAgbGluZU51bWJlcjogbGluZU51bWJlcixcbiAgICAgICAgICAgICAgICBsaW5lU3RhcnQ6IGxpbmVTdGFydCxcbiAgICAgICAgICAgICAgICByYW5nZTogW3N0YXJ0LCBpbmRleF1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvd0Vycm9yKHt9LCBNZXNzYWdlcy5VbmV4cGVjdGVkVG9rZW4sICdJTExFR0FMJyk7XG4gICAgfVxuXG4gICAgLy8gNy44LjMgTnVtZXJpYyBMaXRlcmFsc1xuXG4gICAgZnVuY3Rpb24gc2NhbkhleExpdGVyYWwoc3RhcnQpIHtcbiAgICAgICAgdmFyIG51bWJlciA9ICcnO1xuXG4gICAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKCFpc0hleERpZ2l0KHNvdXJjZVtpbmRleF0pKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBudW1iZXIgKz0gc291cmNlW2luZGV4KytdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG51bWJlci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRocm93RXJyb3Ioe30sIE1lc3NhZ2VzLlVuZXhwZWN0ZWRUb2tlbiwgJ0lMTEVHQUwnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0lkZW50aWZpZXJTdGFydChzb3VyY2UuY2hhckNvZGVBdChpbmRleCkpKSB7XG4gICAgICAgICAgICB0aHJvd0Vycm9yKHt9LCBNZXNzYWdlcy5VbmV4cGVjdGVkVG9rZW4sICdJTExFR0FMJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogVG9rZW4uTnVtZXJpY0xpdGVyYWwsXG4gICAgICAgICAgICB2YWx1ZTogcGFyc2VJbnQoJzB4JyArIG51bWJlciwgMTYpLFxuICAgICAgICAgICAgbGluZU51bWJlcjogbGluZU51bWJlcixcbiAgICAgICAgICAgIGxpbmVTdGFydDogbGluZVN0YXJ0LFxuICAgICAgICAgICAgcmFuZ2U6IFtzdGFydCwgaW5kZXhdXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2Nhbk9jdGFsTGl0ZXJhbChwcmVmaXgsIHN0YXJ0KSB7XG4gICAgICAgIHZhciBudW1iZXIsIG9jdGFsO1xuXG4gICAgICAgIGlmIChpc09jdGFsRGlnaXQocHJlZml4KSkge1xuICAgICAgICAgICAgb2N0YWwgPSB0cnVlO1xuICAgICAgICAgICAgbnVtYmVyID0gJzAnICsgc291cmNlW2luZGV4KytdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2N0YWwgPSBmYWxzZTtcbiAgICAgICAgICAgICsraW5kZXg7XG4gICAgICAgICAgICBudW1iZXIgPSAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKCFpc09jdGFsRGlnaXQoc291cmNlW2luZGV4XSkpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG51bWJlciArPSBzb3VyY2VbaW5kZXgrK107XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIW9jdGFsICYmIG51bWJlci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIC8vIG9ubHkgMG8gb3IgME9cbiAgICAgICAgICAgIHRocm93RXJyb3Ioe30sIE1lc3NhZ2VzLlVuZXhwZWN0ZWRUb2tlbiwgJ0lMTEVHQUwnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0lkZW50aWZpZXJTdGFydChzb3VyY2UuY2hhckNvZGVBdChpbmRleCkpIHx8IGlzRGVjaW1hbERpZ2l0KHNvdXJjZS5jaGFyQ29kZUF0KGluZGV4KSkpIHtcbiAgICAgICAgICAgIHRocm93RXJyb3Ioe30sIE1lc3NhZ2VzLlVuZXhwZWN0ZWRUb2tlbiwgJ0lMTEVHQUwnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiBUb2tlbi5OdW1lcmljTGl0ZXJhbCxcbiAgICAgICAgICAgIHZhbHVlOiBwYXJzZUludChudW1iZXIsIDgpLFxuICAgICAgICAgICAgb2N0YWw6IG9jdGFsLFxuICAgICAgICAgICAgbGluZU51bWJlcjogbGluZU51bWJlcixcbiAgICAgICAgICAgIGxpbmVTdGFydDogbGluZVN0YXJ0LFxuICAgICAgICAgICAgcmFuZ2U6IFtzdGFydCwgaW5kZXhdXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2Nhbk51bWVyaWNMaXRlcmFsKCkge1xuICAgICAgICB2YXIgbnVtYmVyLCBzdGFydCwgY2gsIG9jdGFsO1xuXG4gICAgICAgIGNoID0gc291cmNlW2luZGV4XTtcbiAgICAgICAgYXNzZXJ0KGlzRGVjaW1hbERpZ2l0KGNoLmNoYXJDb2RlQXQoMCkpIHx8IChjaCA9PT0gJy4nKSxcbiAgICAgICAgICAgICdOdW1lcmljIGxpdGVyYWwgbXVzdCBzdGFydCB3aXRoIGEgZGVjaW1hbCBkaWdpdCBvciBhIGRlY2ltYWwgcG9pbnQnKTtcblxuICAgICAgICBzdGFydCA9IGluZGV4O1xuICAgICAgICBudW1iZXIgPSAnJztcbiAgICAgICAgaWYgKGNoICE9PSAnLicpIHtcbiAgICAgICAgICAgIG51bWJlciA9IHNvdXJjZVtpbmRleCsrXTtcbiAgICAgICAgICAgIGNoID0gc291cmNlW2luZGV4XTtcblxuICAgICAgICAgICAgLy8gSGV4IG51bWJlciBzdGFydHMgd2l0aCAnMHgnLlxuICAgICAgICAgICAgLy8gT2N0YWwgbnVtYmVyIHN0YXJ0cyB3aXRoICcwJy5cbiAgICAgICAgICAgIC8vIE9jdGFsIG51bWJlciBpbiBFUzYgc3RhcnRzIHdpdGggJzBvJy5cbiAgICAgICAgICAgIC8vIEJpbmFyeSBudW1iZXIgaW4gRVM2IHN0YXJ0cyB3aXRoICcwYicuXG4gICAgICAgICAgICBpZiAobnVtYmVyID09PSAnMCcpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2ggPT09ICd4JyB8fCBjaCA9PT0gJ1gnKSB7XG4gICAgICAgICAgICAgICAgICAgICsraW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzY2FuSGV4TGl0ZXJhbChzdGFydCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gJ2InIHx8IGNoID09PSAnQicpIHtcbiAgICAgICAgICAgICAgICAgICAgKytpbmRleDtcbiAgICAgICAgICAgICAgICAgICAgbnVtYmVyID0gJyc7XG5cbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaCA9IHNvdXJjZVtpbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2ggIT09ICcwJyAmJiBjaCAhPT0gJzEnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBudW1iZXIgKz0gc291cmNlW2luZGV4KytdO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG51bWJlci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9ubHkgMGIgb3IgMEJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93RXJyb3Ioe30sIE1lc3NhZ2VzLlVuZXhwZWN0ZWRUb2tlbiwgJ0lMTEVHQUwnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2ggPSBzb3VyY2UuY2hhckNvZGVBdChpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNJZGVudGlmaWVyU3RhcnQoY2gpIHx8IGlzRGVjaW1hbERpZ2l0KGNoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93RXJyb3Ioe30sIE1lc3NhZ2VzLlVuZXhwZWN0ZWRUb2tlbiwgJ0lMTEVHQUwnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogVG9rZW4uTnVtZXJpY0xpdGVyYWwsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcGFyc2VJbnQobnVtYmVyLCAyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IGxpbmVOdW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lU3RhcnQ6IGxpbmVTdGFydCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlOiBbc3RhcnQsIGluZGV4XVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY2ggPT09ICdvJyB8fCBjaCA9PT0gJ08nIHx8IGlzT2N0YWxEaWdpdChjaCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNjYW5PY3RhbExpdGVyYWwoY2gsIHN0YXJ0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gZGVjaW1hbCBudW1iZXIgc3RhcnRzIHdpdGggJzAnIHN1Y2ggYXMgJzA5JyBpcyBpbGxlZ2FsLlxuICAgICAgICAgICAgICAgIGlmIChjaCAmJiBpc0RlY2ltYWxEaWdpdChjaC5jaGFyQ29kZUF0KDApKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvd0Vycm9yKHt9LCBNZXNzYWdlcy5VbmV4cGVjdGVkVG9rZW4sICdJTExFR0FMJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB3aGlsZSAoaXNEZWNpbWFsRGlnaXQoc291cmNlLmNoYXJDb2RlQXQoaW5kZXgpKSkge1xuICAgICAgICAgICAgICAgIG51bWJlciArPSBzb3VyY2VbaW5kZXgrK107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaCA9IHNvdXJjZVtpbmRleF07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2ggPT09ICcuJykge1xuICAgICAgICAgICAgbnVtYmVyICs9IHNvdXJjZVtpbmRleCsrXTtcbiAgICAgICAgICAgIHdoaWxlIChpc0RlY2ltYWxEaWdpdChzb3VyY2UuY2hhckNvZGVBdChpbmRleCkpKSB7XG4gICAgICAgICAgICAgICAgbnVtYmVyICs9IHNvdXJjZVtpbmRleCsrXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNoID0gc291cmNlW2luZGV4XTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaCA9PT0gJ2UnIHx8IGNoID09PSAnRScpIHtcbiAgICAgICAgICAgIG51bWJlciArPSBzb3VyY2VbaW5kZXgrK107XG5cbiAgICAgICAgICAgIGNoID0gc291cmNlW2luZGV4XTtcbiAgICAgICAgICAgIGlmIChjaCA9PT0gJysnIHx8IGNoID09PSAnLScpIHtcbiAgICAgICAgICAgICAgICBudW1iZXIgKz0gc291cmNlW2luZGV4KytdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzRGVjaW1hbERpZ2l0KHNvdXJjZS5jaGFyQ29kZUF0KGluZGV4KSkpIHtcbiAgICAgICAgICAgICAgICB3aGlsZSAoaXNEZWNpbWFsRGlnaXQoc291cmNlLmNoYXJDb2RlQXQoaW5kZXgpKSkge1xuICAgICAgICAgICAgICAgICAgICBudW1iZXIgKz0gc291cmNlW2luZGV4KytdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3dFcnJvcih7fSwgTWVzc2FnZXMuVW5leHBlY3RlZFRva2VuLCAnSUxMRUdBTCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzSWRlbnRpZmllclN0YXJ0KHNvdXJjZS5jaGFyQ29kZUF0KGluZGV4KSkpIHtcbiAgICAgICAgICAgIHRocm93RXJyb3Ioe30sIE1lc3NhZ2VzLlVuZXhwZWN0ZWRUb2tlbiwgJ0lMTEVHQUwnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiBUb2tlbi5OdW1lcmljTGl0ZXJhbCxcbiAgICAgICAgICAgIHZhbHVlOiBwYXJzZUZsb2F0KG51bWJlciksXG4gICAgICAgICAgICBsaW5lTnVtYmVyOiBsaW5lTnVtYmVyLFxuICAgICAgICAgICAgbGluZVN0YXJ0OiBsaW5lU3RhcnQsXG4gICAgICAgICAgICByYW5nZTogW3N0YXJ0LCBpbmRleF1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyA3LjguNCBTdHJpbmcgTGl0ZXJhbHNcblxuICAgIGZ1bmN0aW9uIHNjYW5TdHJpbmdMaXRlcmFsKCkge1xuICAgICAgICB2YXIgc3RyID0gJycsIHF1b3RlLCBzdGFydCwgY2gsIGNvZGUsIHVuZXNjYXBlZCwgcmVzdG9yZSwgb2N0YWwgPSBmYWxzZTtcblxuICAgICAgICBxdW90ZSA9IHNvdXJjZVtpbmRleF07XG4gICAgICAgIGFzc2VydCgocXVvdGUgPT09ICdcXCcnIHx8IHF1b3RlID09PSAnXCInKSxcbiAgICAgICAgICAgICdTdHJpbmcgbGl0ZXJhbCBtdXN0IHN0YXJ0cyB3aXRoIGEgcXVvdGUnKTtcblxuICAgICAgICBzdGFydCA9IGluZGV4O1xuICAgICAgICArK2luZGV4O1xuXG4gICAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgY2ggPSBzb3VyY2VbaW5kZXgrK107XG5cbiAgICAgICAgICAgIGlmIChjaCA9PT0gcXVvdGUpIHtcbiAgICAgICAgICAgICAgICBxdW90ZSA9ICcnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjaCA9PT0gJ1xcXFwnKSB7XG4gICAgICAgICAgICAgICAgY2ggPSBzb3VyY2VbaW5kZXgrK107XG4gICAgICAgICAgICAgICAgaWYgKCFjaCB8fCAhaXNMaW5lVGVybWluYXRvcihjaC5jaGFyQ29kZUF0KDApKSkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ24nOlxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9ICdcXG4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3InOlxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9ICdcXHInO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9ICdcXHQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3UnOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICd4JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2VbaW5kZXhdID09PSAneycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArK2luZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSBzY2FuVW5pY29kZUNvZGVQb2ludEVzY2FwZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN0b3JlID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5lc2NhcGVkID0gc2NhbkhleEVzY2FwZShjaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVuZXNjYXBlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gdW5lc2NhcGVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gcmVzdG9yZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9IGNoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdiJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSAnXFxiJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdmJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSAnXFxmJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd2JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSAnXFx4MEInO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc09jdGFsRGlnaXQoY2gpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZSA9ICcwMTIzNDU2NycuaW5kZXhPZihjaCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBcXDAgaXMgbm90IG9jdGFsIGVzY2FwZSBzZXF1ZW5jZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb2RlICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9jdGFsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPCBsZW5ndGggJiYgaXNPY3RhbERpZ2l0KHNvdXJjZVtpbmRleF0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9jdGFsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZSA9IGNvZGUgKiA4ICsgJzAxMjM0NTY3Jy5pbmRleE9mKHNvdXJjZVtpbmRleCsrXSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMyBkaWdpdHMgYXJlIG9ubHkgYWxsb3dlZCB3aGVuIHN0cmluZyBzdGFydHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2l0aCAwLCAxLCAyLCAzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgnMDEyMycuaW5kZXhPZihjaCkgPj0gMCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4IDwgbGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNPY3RhbERpZ2l0KHNvdXJjZVtpbmRleF0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlID0gY29kZSAqIDggKyAnMDEyMzQ1NjcnLmluZGV4T2Yoc291cmNlW2luZGV4KytdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9IGNoO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICArK2xpbmVOdW1iZXI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gICdcXHInICYmIHNvdXJjZVtpbmRleF0gPT09ICdcXG4nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICArK2luZGV4O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxpbmVTdGFydCA9IGluZGV4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNMaW5lVGVybWluYXRvcihjaC5jaGFyQ29kZUF0KDApKSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdHIgKz0gY2g7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocXVvdGUgIT09ICcnKSB7XG4gICAgICAgICAgICB0aHJvd0Vycm9yKHt9LCBNZXNzYWdlcy5VbmV4cGVjdGVkVG9rZW4sICdJTExFR0FMJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogVG9rZW4uU3RyaW5nTGl0ZXJhbCxcbiAgICAgICAgICAgIHZhbHVlOiBzdHIsXG4gICAgICAgICAgICBvY3RhbDogb2N0YWwsXG4gICAgICAgICAgICBsaW5lTnVtYmVyOiBsaW5lTnVtYmVyLFxuICAgICAgICAgICAgbGluZVN0YXJ0OiBsaW5lU3RhcnQsXG4gICAgICAgICAgICByYW5nZTogW3N0YXJ0LCBpbmRleF1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzY2FuVGVtcGxhdGUoKSB7XG4gICAgICAgIHZhciBjb29rZWQgPSAnJywgY2gsIHN0YXJ0LCB0ZXJtaW5hdGVkLCB0YWlsLCByZXN0b3JlLCB1bmVzY2FwZWQsIGNvZGUsIG9jdGFsO1xuXG4gICAgICAgIHRlcm1pbmF0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGFpbCA9IGZhbHNlO1xuICAgICAgICBzdGFydCA9IGluZGV4O1xuXG4gICAgICAgICsraW5kZXg7XG5cbiAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICBjaCA9IHNvdXJjZVtpbmRleCsrXTtcbiAgICAgICAgICAgIGlmIChjaCA9PT0gJ2AnKSB7XG4gICAgICAgICAgICAgICAgdGFpbCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGVybWluYXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNoID09PSAnJCcpIHtcbiAgICAgICAgICAgICAgICBpZiAoc291cmNlW2luZGV4XSA9PT0gJ3snKSB7XG4gICAgICAgICAgICAgICAgICAgICsraW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIHRlcm1pbmF0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29va2VkICs9IGNoO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjaCA9PT0gJ1xcXFwnKSB7XG4gICAgICAgICAgICAgICAgY2ggPSBzb3VyY2VbaW5kZXgrK107XG4gICAgICAgICAgICAgICAgaWYgKCFpc0xpbmVUZXJtaW5hdG9yKGNoLmNoYXJDb2RlQXQoMCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoY2gpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbic6XG4gICAgICAgICAgICAgICAgICAgICAgICBjb29rZWQgKz0gJ1xcbic7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncic6XG4gICAgICAgICAgICAgICAgICAgICAgICBjb29rZWQgKz0gJ1xccic7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjb29rZWQgKz0gJ1xcdCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndSc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3gnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZVtpbmRleF0gPT09ICd7Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsraW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29va2VkICs9IHNjYW5Vbmljb2RlQ29kZVBvaW50RXNjYXBlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3RvcmUgPSBpbmRleDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmVzY2FwZWQgPSBzY2FuSGV4RXNjYXBlKGNoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodW5lc2NhcGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb2tlZCArPSB1bmVzY2FwZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSByZXN0b3JlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29rZWQgKz0gY2g7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2InOlxuICAgICAgICAgICAgICAgICAgICAgICAgY29va2VkICs9ICdcXGInO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2YnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY29va2VkICs9ICdcXGYnO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3YnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY29va2VkICs9ICdcXHYnO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc09jdGFsRGlnaXQoY2gpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZSA9ICcwMTIzNDU2NycuaW5kZXhPZihjaCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBcXDAgaXMgbm90IG9jdGFsIGVzY2FwZSBzZXF1ZW5jZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb2RlICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9jdGFsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPCBsZW5ndGggJiYgaXNPY3RhbERpZ2l0KHNvdXJjZVtpbmRleF0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9jdGFsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZSA9IGNvZGUgKiA4ICsgJzAxMjM0NTY3Jy5pbmRleE9mKHNvdXJjZVtpbmRleCsrXSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMyBkaWdpdHMgYXJlIG9ubHkgYWxsb3dlZCB3aGVuIHN0cmluZyBzdGFydHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2l0aCAwLCAxLCAyLCAzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgnMDEyMycuaW5kZXhPZihjaCkgPj0gMCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4IDwgbGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNPY3RhbERpZ2l0KHNvdXJjZVtpbmRleF0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlID0gY29kZSAqIDggKyAnMDEyMzQ1NjcnLmluZGV4T2Yoc291cmNlW2luZGV4KytdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29rZWQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29va2VkICs9IGNoO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICArK2xpbmVOdW1iZXI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gICdcXHInICYmIHNvdXJjZVtpbmRleF0gPT09ICdcXG4nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICArK2luZGV4O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxpbmVTdGFydCA9IGluZGV4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNMaW5lVGVybWluYXRvcihjaC5jaGFyQ29kZUF0KDApKSkge1xuICAgICAgICAgICAgICAgICsrbGluZU51bWJlcjtcbiAgICAgICAgICAgICAgICBpZiAoY2ggPT09ICAnXFxyJyAmJiBzb3VyY2VbaW5kZXhdID09PSAnXFxuJykge1xuICAgICAgICAgICAgICAgICAgICArK2luZGV4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsaW5lU3RhcnQgPSBpbmRleDtcbiAgICAgICAgICAgICAgICBjb29rZWQgKz0gJ1xcbic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvb2tlZCArPSBjaDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGVybWluYXRlZCkge1xuICAgICAgICAgICAgdGhyb3dFcnJvcih7fSwgTWVzc2FnZXMuVW5leHBlY3RlZFRva2VuLCAnSUxMRUdBTCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6IFRva2VuLlRlbXBsYXRlLFxuICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgICBjb29rZWQ6IGNvb2tlZCxcbiAgICAgICAgICAgICAgICByYXc6IHNvdXJjZS5zbGljZShzdGFydCArIDEsIGluZGV4IC0gKCh0YWlsKSA/IDEgOiAyKSlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0YWlsOiB0YWlsLFxuICAgICAgICAgICAgb2N0YWw6IG9jdGFsLFxuICAgICAgICAgICAgbGluZU51bWJlcjogbGluZU51bWJlcixcbiAgICAgICAgICAgIGxpbmVTdGFydDogbGluZVN0YXJ0LFxuICAgICAgICAgICAgcmFuZ2U6IFtzdGFydCwgaW5kZXhdXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2NhblRlbXBsYXRlRWxlbWVudChvcHRpb24pIHtcbiAgICAgICAgdmFyIHN0YXJ0c1dpdGgsIHRlbXBsYXRlO1xuXG4gICAgICAgIGxvb2thaGVhZCA9IG51bGw7XG4gICAgICAgIHNraXBDb21tZW50KCk7XG5cbiAgICAgICAgc3RhcnRzV2l0aCA9IChvcHRpb24uaGVhZCkgPyAnYCcgOiAnfSc7XG5cbiAgICAgICAgaWYgKHNvdXJjZVtpbmRleF0gIT09IHN0YXJ0c1dpdGgpIHtcbiAgICAgICAgICAgIHRocm93RXJyb3Ioe30sIE1lc3NhZ2VzLlVuZXhwZWN0ZWRUb2tlbiwgJ0lMTEVHQUwnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRlbXBsYXRlID0gc2NhblRlbXBsYXRlKCk7XG5cbiAgICAgICAgcGVlaygpO1xuXG4gICAgICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzY2FuUmVnRXhwKCkge1xuICAgICAgICB2YXIgc3RyLCBjaCwgc3RhcnQsIHBhdHRlcm4sIGZsYWdzLCB2YWx1ZSwgY2xhc3NNYXJrZXIgPSBmYWxzZSwgcmVzdG9yZSwgdGVybWluYXRlZCA9IGZhbHNlO1xuXG4gICAgICAgIGxvb2thaGVhZCA9IG51bGw7XG4gICAgICAgIHNraXBDb21tZW50KCk7XG5cbiAgICAgICAgc3RhcnQgPSBpbmRleDtcbiAgICAgICAgY2ggPSBzb3VyY2VbaW5kZXhdO1xuICAgICAgICBhc3NlcnQoY2ggPT09ICcvJywgJ1JlZ3VsYXIgZXhwcmVzc2lvbiBsaXRlcmFsIG11c3Qgc3RhcnQgd2l0aCBhIHNsYXNoJyk7XG4gICAgICAgIHN0ciA9IHNvdXJjZVtpbmRleCsrXTtcblxuICAgICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIGNoID0gc291cmNlW2luZGV4KytdO1xuICAgICAgICAgICAgc3RyICs9IGNoO1xuICAgICAgICAgICAgaWYgKGNsYXNzTWFya2VyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoID09PSAnXScpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NNYXJrZXIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gJ1xcXFwnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoID0gc291cmNlW2luZGV4KytdO1xuICAgICAgICAgICAgICAgICAgICAvLyBFQ01BLTI2MiA3LjguNVxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNMaW5lVGVybWluYXRvcihjaC5jaGFyQ29kZUF0KDApKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3dFcnJvcih7fSwgTWVzc2FnZXMuVW50ZXJtaW5hdGVkUmVnRXhwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzdHIgKz0gY2g7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjaCA9PT0gJy8nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRlcm1pbmF0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNoID09PSAnWycpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NNYXJrZXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNMaW5lVGVybWluYXRvcihjaC5jaGFyQ29kZUF0KDApKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvd0Vycm9yKHt9LCBNZXNzYWdlcy5VbnRlcm1pbmF0ZWRSZWdFeHApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGVybWluYXRlZCkge1xuICAgICAgICAgICAgdGhyb3dFcnJvcih7fSwgTWVzc2FnZXMuVW50ZXJtaW5hdGVkUmVnRXhwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEV4Y2x1ZGUgbGVhZGluZyBhbmQgdHJhaWxpbmcgc2xhc2guXG4gICAgICAgIHBhdHRlcm4gPSBzdHIuc3Vic3RyKDEsIHN0ci5sZW5ndGggLSAyKTtcblxuICAgICAgICBmbGFncyA9ICcnO1xuICAgICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIGNoID0gc291cmNlW2luZGV4XTtcbiAgICAgICAgICAgIGlmICghaXNJZGVudGlmaWVyUGFydChjaC5jaGFyQ29kZUF0KDApKSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICArK2luZGV4O1xuICAgICAgICAgICAgaWYgKGNoID09PSAnXFxcXCcgJiYgaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjaCA9IHNvdXJjZVtpbmRleF07XG4gICAgICAgICAgICAgICAgaWYgKGNoID09PSAndScpIHtcbiAgICAgICAgICAgICAgICAgICAgKytpbmRleDtcbiAgICAgICAgICAgICAgICAgICAgcmVzdG9yZSA9IGluZGV4O1xuICAgICAgICAgICAgICAgICAgICBjaCA9IHNjYW5IZXhFc2NhcGUoJ3UnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmbGFncyArPSBjaDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoc3RyICs9ICdcXFxcdSc7IHJlc3RvcmUgPCBpbmRleDsgKytyZXN0b3JlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9IHNvdXJjZVtyZXN0b3JlXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gcmVzdG9yZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsYWdzICs9ICd1JztcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSAnXFxcXHUnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3RyICs9ICdcXFxcJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZsYWdzICs9IGNoO1xuICAgICAgICAgICAgICAgIHN0ciArPSBjaDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YWx1ZSA9IG5ldyBSZWdFeHAocGF0dGVybiwgZmxhZ3MpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aHJvd0Vycm9yKHt9LCBNZXNzYWdlcy5JbnZhbGlkUmVnRXhwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBlZWsoKTtcblxuXG4gICAgICAgIGlmIChleHRyYS50b2tlbml6ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBUb2tlbi5SZWd1bGFyRXhwcmVzc2lvbixcbiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICAgICAgbGluZU51bWJlcjogbGluZU51bWJlcixcbiAgICAgICAgICAgICAgICBsaW5lU3RhcnQ6IGxpbmVTdGFydCxcbiAgICAgICAgICAgICAgICByYW5nZTogW3N0YXJ0LCBpbmRleF1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxpdGVyYWw6IHN0cixcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIHJhbmdlOiBbc3RhcnQsIGluZGV4XVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzSWRlbnRpZmllck5hbWUodG9rZW4pIHtcbiAgICAgICAgcmV0dXJuIHRva2VuLnR5cGUgPT09IFRva2VuLklkZW50aWZpZXIgfHxcbiAgICAgICAgICAgIHRva2VuLnR5cGUgPT09IFRva2VuLktleXdvcmQgfHxcbiAgICAgICAgICAgIHRva2VuLnR5cGUgPT09IFRva2VuLkJvb2xlYW5MaXRlcmFsIHx8XG4gICAgICAgICAgICB0b2tlbi50eXBlID09PSBUb2tlbi5OdWxsTGl0ZXJhbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZHZhbmNlU2xhc2goKSB7XG4gICAgICAgIHZhciBwcmV2VG9rZW4sXG4gICAgICAgICAgICBjaGVja1Rva2VuO1xuICAgICAgICAvLyBVc2luZyB0aGUgZm9sbG93aW5nIGFsZ29yaXRobTpcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvc3dlZXQuanMvd2lraS9kZXNpZ25cbiAgICAgICAgcHJldlRva2VuID0gZXh0cmEudG9rZW5zW2V4dHJhLnRva2Vucy5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKCFwcmV2VG9rZW4pIHtcbiAgICAgICAgICAgIC8vIE5vdGhpbmcgYmVmb3JlIHRoYXQ6IGl0IGNhbm5vdCBiZSBhIGRpdmlzaW9uLlxuICAgICAgICAgICAgcmV0dXJuIHNjYW5SZWdFeHAoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJldlRva2VuLnR5cGUgPT09ICdQdW5jdHVhdG9yJykge1xuICAgICAgICAgICAgaWYgKHByZXZUb2tlbi52YWx1ZSA9PT0gJyknKSB7XG4gICAgICAgICAgICAgICAgY2hlY2tUb2tlbiA9IGV4dHJhLnRva2Vuc1tleHRyYS5vcGVuUGFyZW5Ub2tlbiAtIDFdO1xuICAgICAgICAgICAgICAgIGlmIChjaGVja1Rva2VuICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja1Rva2VuLnR5cGUgPT09ICdLZXl3b3JkJyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKGNoZWNrVG9rZW4udmFsdWUgPT09ICdpZicgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja1Rva2VuLnZhbHVlID09PSAnd2hpbGUnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tUb2tlbi52YWx1ZSA9PT0gJ2ZvcicgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja1Rva2VuLnZhbHVlID09PSAnd2l0aCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzY2FuUmVnRXhwKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBzY2FuUHVuY3R1YXRvcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHByZXZUb2tlbi52YWx1ZSA9PT0gJ30nKSB7XG4gICAgICAgICAgICAgICAgLy8gRGl2aWRpbmcgYSBmdW5jdGlvbiBieSBhbnl0aGluZyBtYWtlcyBsaXR0bGUgc2Vuc2UsXG4gICAgICAgICAgICAgICAgLy8gYnV0IHdlIGhhdmUgdG8gY2hlY2sgZm9yIHRoYXQuXG4gICAgICAgICAgICAgICAgaWYgKGV4dHJhLnRva2Vuc1tleHRyYS5vcGVuQ3VybHlUb2tlbiAtIDNdICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBleHRyYS50b2tlbnNbZXh0cmEub3BlbkN1cmx5VG9rZW4gLSAzXS50eXBlID09PSAnS2V5d29yZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQW5vbnltb3VzIGZ1bmN0aW9uLlxuICAgICAgICAgICAgICAgICAgICBjaGVja1Rva2VuID0gZXh0cmEudG9rZW5zW2V4dHJhLm9wZW5DdXJseVRva2VuIC0gNF07XG4gICAgICAgICAgICAgICAgICAgIGlmICghY2hlY2tUb2tlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNjYW5QdW5jdHVhdG9yKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV4dHJhLnRva2Vuc1tleHRyYS5vcGVuQ3VybHlUb2tlbiAtIDRdICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBleHRyYS50b2tlbnNbZXh0cmEub3BlbkN1cmx5VG9rZW4gLSA0XS50eXBlID09PSAnS2V5d29yZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTmFtZWQgZnVuY3Rpb24uXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrVG9rZW4gPSBleHRyYS50b2tlbnNbZXh0cmEub3BlbkN1cmx5VG9rZW4gLSA1XTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjaGVja1Rva2VuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2NhblJlZ0V4cCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNjYW5QdW5jdHVhdG9yKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGNoZWNrVG9rZW4gZGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBmdW5jdGlvbiBpc1xuICAgICAgICAgICAgICAgIC8vIGEgZGVjbGFyYXRpb24gb3IgYW4gZXhwcmVzc2lvbi5cbiAgICAgICAgICAgICAgICBpZiAoRm5FeHByVG9rZW5zLmluZGV4T2YoY2hlY2tUb2tlbi52YWx1ZSkgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBJdCBpcyBhbiBleHByZXNzaW9uLlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2NhblB1bmN0dWF0b3IoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gSXQgaXMgYSBkZWNsYXJhdGlvbi5cbiAgICAgICAgICAgICAgICByZXR1cm4gc2NhblJlZ0V4cCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNjYW5SZWdFeHAoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJldlRva2VuLnR5cGUgPT09ICdLZXl3b3JkJykge1xuICAgICAgICAgICAgcmV0dXJuIHNjYW5SZWdFeHAoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2NhblB1bmN0dWF0b3IoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZHZhbmNlKCkge1xuICAgICAgICB2YXIgY2g7XG5cbiAgICAgICAgaWYgKCFzdGF0ZS5pblhKU0NoaWxkKSB7XG4gICAgICAgICAgICBza2lwQ29tbWVudCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluZGV4ID49IGxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBUb2tlbi5FT0YsXG4gICAgICAgICAgICAgICAgbGluZU51bWJlcjogbGluZU51bWJlcixcbiAgICAgICAgICAgICAgICBsaW5lU3RhcnQ6IGxpbmVTdGFydCxcbiAgICAgICAgICAgICAgICByYW5nZTogW2luZGV4LCBpbmRleF1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhdGUuaW5YSlNDaGlsZCkge1xuICAgICAgICAgICAgcmV0dXJuIGFkdmFuY2VYSlNDaGlsZCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgY2ggPSBzb3VyY2UuY2hhckNvZGVBdChpbmRleCk7XG5cbiAgICAgICAgLy8gVmVyeSBjb21tb246ICggYW5kICkgYW5kIDtcbiAgICAgICAgaWYgKGNoID09PSA0MCB8fCBjaCA9PT0gNDEgfHwgY2ggPT09IDU4KSB7XG4gICAgICAgICAgICByZXR1cm4gc2NhblB1bmN0dWF0b3IoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN0cmluZyBsaXRlcmFsIHN0YXJ0cyB3aXRoIHNpbmdsZSBxdW90ZSAoIzM5KSBvciBkb3VibGUgcXVvdGUgKCMzNCkuXG4gICAgICAgIGlmIChjaCA9PT0gMzkgfHwgY2ggPT09IDM0KSB7XG4gICAgICAgICAgICBpZiAoc3RhdGUuaW5YSlNUYWcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NhblhKU1N0cmluZ0xpdGVyYWwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzY2FuU3RyaW5nTGl0ZXJhbCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXRlLmluWEpTVGFnICYmIGlzWEpTSWRlbnRpZmllclN0YXJ0KGNoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjYW5YSlNJZGVudGlmaWVyKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2ggPT09IDk2KSB7XG4gICAgICAgICAgICByZXR1cm4gc2NhblRlbXBsYXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzSWRlbnRpZmllclN0YXJ0KGNoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjYW5JZGVudGlmaWVyKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEb3QgKC4pIGNoYXIgIzQ2IGNhbiBhbHNvIHN0YXJ0IGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyLCBoZW5jZSB0aGUgbmVlZFxuICAgICAgICAvLyB0byBjaGVjayB0aGUgbmV4dCBjaGFyYWN0ZXIuXG4gICAgICAgIGlmIChjaCA9PT0gNDYpIHtcbiAgICAgICAgICAgIGlmIChpc0RlY2ltYWxEaWdpdChzb3VyY2UuY2hhckNvZGVBdChpbmRleCArIDEpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzY2FuTnVtZXJpY0xpdGVyYWwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzY2FuUHVuY3R1YXRvcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVjaW1hbERpZ2l0KGNoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjYW5OdW1lcmljTGl0ZXJhbCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2xhc2ggKC8pIGNoYXIgIzQ3IGNhbiBhbHNvIHN0YXJ0IGEgcmVnZXguXG4gICAgICAgIGlmIChleHRyYS50b2tlbml6ZSAmJiBjaCA9PT0gNDcpIHtcbiAgICAgICAgICAgIHJldHVybiBhZHZhbmNlU2xhc2goKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzY2FuUHVuY3R1YXRvcigpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxleCgpIHtcbiAgICAgICAgdmFyIHRva2VuO1xuXG4gICAgICAgIHRva2VuID0gbG9va2FoZWFkO1xuICAgICAgICBpbmRleCA9IHRva2VuLnJhbmdlWzFdO1xuICAgICAgICBsaW5lTnVtYmVyID0gdG9rZW4ubGluZU51bWJlcjtcbiAgICAgICAgbGluZVN0YXJ0ID0gdG9rZW4ubGluZVN0YXJ0O1xuXG4gICAgICAgIGxvb2thaGVhZCA9IGFkdmFuY2UoKTtcblxuICAgICAgICBpbmRleCA9IHRva2VuLnJhbmdlWzFdO1xuICAgICAgICBsaW5lTnVtYmVyID0gdG9rZW4ubGluZU51bWJlcjtcbiAgICAgICAgbGluZVN0YXJ0ID0gdG9rZW4ubGluZVN0YXJ0O1xuXG4gICAgICAgIHJldHVybiB0b2tlbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWVrKCkge1xuICAgICAgICB2YXIgcG9zLCBsaW5lLCBzdGFydDtcblxuICAgICAgICBwb3MgPSBpbmRleDtcbiAgICAgICAgbGluZSA9IGxpbmVOdW1iZXI7XG4gICAgICAgIHN0YXJ0ID0gbGluZVN0YXJ0O1xuICAgICAgICBsb29rYWhlYWQgPSBhZHZhbmNlKCk7XG4gICAgICAgIGluZGV4ID0gcG9zO1xuICAgICAgICBsaW5lTnVtYmVyID0gbGluZTtcbiAgICAgICAgbGluZVN0YXJ0ID0gc3RhcnQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9va2FoZWFkMigpIHtcbiAgICAgICAgdmFyIGFkdiwgcG9zLCBsaW5lLCBzdGFydCwgcmVzdWx0O1xuXG4gICAgICAgIC8vIElmIHdlIGFyZSBjb2xsZWN0aW5nIHRoZSB0b2tlbnMsIGRvbid0IGdyYWIgdGhlIG5leHQgb25lIHlldC5cbiAgICAgICAgYWR2ID0gKHR5cGVvZiBleHRyYS5hZHZhbmNlID09PSAnZnVuY3Rpb24nKSA/IGV4dHJhLmFkdmFuY2UgOiBhZHZhbmNlO1xuXG4gICAgICAgIHBvcyA9IGluZGV4O1xuICAgICAgICBsaW5lID0gbGluZU51bWJlcjtcbiAgICAgICAgc3RhcnQgPSBsaW5lU3RhcnQ7XG5cbiAgICAgICAgLy8gU2NhbiBmb3IgdGhlIG5leHQgaW1tZWRpYXRlIHRva2VuLlxuICAgICAgICBpZiAobG9va2FoZWFkID09PSBudWxsKSB7XG4gICAgICAgICAgICBsb29rYWhlYWQgPSBhZHYoKTtcbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IGxvb2thaGVhZC5yYW5nZVsxXTtcbiAgICAgICAgbGluZU51bWJlciA9IGxvb2thaGVhZC5saW5lTnVtYmVyO1xuICAgICAgICBsaW5lU3RhcnQgPSBsb29rYWhlYWQubGluZVN0YXJ0O1xuXG4gICAgICAgIC8vIEdyYWIgdGhlIHRva2VuIHJpZ2h0IGFmdGVyLlxuICAgICAgICByZXN1bHQgPSBhZHYoKTtcbiAgICAgICAgaW5kZXggPSBwb3M7XG4gICAgICAgIGxpbmVOdW1iZXIgPSBsaW5lO1xuICAgICAgICBsaW5lU3RhcnQgPSBzdGFydDtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1hcmtlckNyZWF0ZSgpIHtcbiAgICAgICAgaWYgKCFleHRyYS5sb2MgJiYgIWV4dHJhLnJhbmdlKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHNraXBDb21tZW50KCk7XG4gICAgICAgIHJldHVybiB7b2Zmc2V0OiBpbmRleCwgbGluZTogbGluZU51bWJlciwgY29sOiBpbmRleCAtIGxpbmVTdGFydH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFya2VyQ3JlYXRlUHJlc2VydmVXaGl0ZXNwYWNlKCkge1xuICAgICAgICBpZiAoIWV4dHJhLmxvYyAmJiAhZXh0cmEucmFuZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtvZmZzZXQ6IGluZGV4LCBsaW5lOiBsaW5lTnVtYmVyLCBjb2w6IGluZGV4IC0gbGluZVN0YXJ0fTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzQ29tbWVudChub2RlKSB7XG4gICAgICAgIHZhciBsYXN0Q2hpbGQsXG4gICAgICAgICAgICB0cmFpbGluZ0NvbW1lbnRzLFxuICAgICAgICAgICAgYm90dG9tUmlnaHQgPSBleHRyYS5ib3R0b21SaWdodFN0YWNrLFxuICAgICAgICAgICAgbGFzdCA9IGJvdHRvbVJpZ2h0W2JvdHRvbVJpZ2h0Lmxlbmd0aCAtIDFdO1xuXG4gICAgICAgIGlmIChub2RlLnR5cGUgPT09IFN5bnRheC5Qcm9ncmFtKSB7XG4gICAgICAgICAgICBpZiAobm9kZS5ib2R5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXh0cmEudHJhaWxpbmdDb21tZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBpZiAoZXh0cmEudHJhaWxpbmdDb21tZW50c1swXS5yYW5nZVswXSA+PSBub2RlLnJhbmdlWzFdKSB7XG4gICAgICAgICAgICAgICAgdHJhaWxpbmdDb21tZW50cyA9IGV4dHJhLnRyYWlsaW5nQ29tbWVudHM7XG4gICAgICAgICAgICAgICAgZXh0cmEudHJhaWxpbmdDb21tZW50cyA9IFtdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBleHRyYS50cmFpbGluZ0NvbW1lbnRzLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAobGFzdCAmJiBsYXN0LnRyYWlsaW5nQ29tbWVudHMgJiYgbGFzdC50cmFpbGluZ0NvbW1lbnRzWzBdLnJhbmdlWzBdID49IG5vZGUucmFuZ2VbMV0pIHtcbiAgICAgICAgICAgICAgICB0cmFpbGluZ0NvbW1lbnRzID0gbGFzdC50cmFpbGluZ0NvbW1lbnRzO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBsYXN0LnRyYWlsaW5nQ29tbWVudHM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBFYXRpbmcgdGhlIHN0YWNrLlxuICAgICAgICBpZiAobGFzdCkge1xuICAgICAgICAgICAgd2hpbGUgKGxhc3QgJiYgbGFzdC5yYW5nZVswXSA+PSBub2RlLnJhbmdlWzBdKSB7XG4gICAgICAgICAgICAgICAgbGFzdENoaWxkID0gbGFzdDtcbiAgICAgICAgICAgICAgICBsYXN0ID0gYm90dG9tUmlnaHQucG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGFzdENoaWxkKSB7XG4gICAgICAgICAgICBpZiAobGFzdENoaWxkLmxlYWRpbmdDb21tZW50cyAmJiBsYXN0Q2hpbGQubGVhZGluZ0NvbW1lbnRzW2xhc3RDaGlsZC5sZWFkaW5nQ29tbWVudHMubGVuZ3RoIC0gMV0ucmFuZ2VbMV0gPD0gbm9kZS5yYW5nZVswXSkge1xuICAgICAgICAgICAgICAgIG5vZGUubGVhZGluZ0NvbW1lbnRzID0gbGFzdENoaWxkLmxlYWRpbmdDb21tZW50cztcbiAgICAgICAgICAgICAgICBkZWxldGUgbGFzdENoaWxkLmxlYWRpbmdDb21tZW50cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChleHRyYS5sZWFkaW5nQ29tbWVudHMubGVuZ3RoID4gMCAmJiBleHRyYS5sZWFkaW5nQ29tbWVudHNbZXh0cmEubGVhZGluZ0NvbW1lbnRzLmxlbmd0aCAtIDFdLnJhbmdlWzFdIDw9IG5vZGUucmFuZ2VbMF0pIHtcbiAgICAgICAgICAgIG5vZGUubGVhZGluZ0NvbW1lbnRzID0gZXh0cmEubGVhZGluZ0NvbW1lbnRzO1xuICAgICAgICAgICAgZXh0cmEubGVhZGluZ0NvbW1lbnRzID0gW107XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHJhaWxpbmdDb21tZW50cykge1xuICAgICAgICAgICAgbm9kZS50cmFpbGluZ0NvbW1lbnRzID0gdHJhaWxpbmdDb21tZW50cztcbiAgICAgICAgfVxuXG4gICAgICAgIGJvdHRvbVJpZ2h0LnB1c2gobm9kZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFya2VyQXBwbHkobWFya2VyLCBub2RlKSB7XG4gICAgICAgIGlmIChleHRyYS5yYW5nZSkge1xuICAgICAgICAgICAgbm9kZS5yYW5nZSA9IFttYXJrZXIub2Zmc2V0LCBpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV4dHJhLmxvYykge1xuICAgICAgICAgICAgbm9kZS5sb2MgPSB7XG4gICAgICAgICAgICAgICAgc3RhcnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgbGluZTogbWFya2VyLmxpbmUsXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbjogbWFya2VyLmNvbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW5kOiB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmU6IGxpbmVOdW1iZXIsXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbjogaW5kZXggLSBsaW5lU3RhcnRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgbm9kZSA9IGRlbGVnYXRlLnBvc3RQcm9jZXNzKG5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChleHRyYS5hdHRhY2hDb21tZW50KSB7XG4gICAgICAgICAgICBwcm9jZXNzQ29tbWVudChub2RlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG5cbiAgICBTeW50YXhUcmVlRGVsZWdhdGUgPSB7XG5cbiAgICAgICAgbmFtZTogJ1N5bnRheFRyZWUnLFxuXG4gICAgICAgIHBvc3RQcm9jZXNzOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY3JlYXRlQXJyYXlFeHByZXNzaW9uOiBmdW5jdGlvbiAoZWxlbWVudHMpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogU3ludGF4LkFycmF5RXhwcmVzc2lvbixcbiAgICAgICAgICAgICAgICBlbGVtZW50czogZWxlbWVudHNcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG5cbiAgICAgICAgY3JlYXRlQXNzaWdubWVudEV4cHJlc3Npb246IGZ1bmN0aW9uIChvcGVyYXRvciwgbGVmdCwgcmlnaHQpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogU3ludGF4LkFzc2lnbm1lbnRFeHByZXNzaW9uLFxuICAgICAgICAgICAgICAgIG9wZXJhdG9yOiBvcGVyYXRvcixcbiAgICAgICAgICAgICAgICBsZWZ0OiBsZWZ0LFxuICAgICAgICAgICAgICAgIHJpZ2h0OiByaWdodFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVCaW5hcnlFeHByZXNzaW9uOiBmdW5jdGlvbiAob3BlcmF0b3IsIGxlZnQsIHJpZ2h0KSB7XG4gICAgICAgICAgICB2YXIgdHlwZSA9IChvcGVyYXRvciA9PT0gJ3x8JyB8fCBvcGVyYXRvciA9PT0gJyYmJykgPyBTeW50YXguTG9naWNhbEV4cHJlc3Npb24gOlxuICAgICAgICAgICAgICAgICAgICAgICAgU3ludGF4LkJpbmFyeUV4cHJlc3Npb247XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgICAgICAgICAgb3BlcmF0b3I6IG9wZXJhdG9yLFxuICAgICAgICAgICAgICAgIGxlZnQ6IGxlZnQsXG4gICAgICAgICAgICAgICAgcmlnaHQ6IHJpZ2h0XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZUJsb2NrU3RhdGVtZW50OiBmdW5jdGlvbiAoYm9keSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBTeW50YXguQmxvY2tTdGF0ZW1lbnQsXG4gICAgICAgICAgICAgICAgYm9keTogYm9keVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVCcmVha1N0YXRlbWVudDogZnVuY3Rpb24gKGxhYmVsKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFN5bnRheC5CcmVha1N0YXRlbWVudCxcbiAgICAgICAgICAgICAgICBsYWJlbDogbGFiZWxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG5cbiAgICAgICAgY3JlYXRlQ2FsbEV4cHJlc3Npb246IGZ1bmN0aW9uIChjYWxsZWUsIGFyZ3MpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogU3ludGF4LkNhbGxFeHByZXNzaW9uLFxuICAgICAgICAgICAgICAgIGNhbGxlZTogY2FsbGVlLFxuICAgICAgICAgICAgICAgICdhcmd1bWVudHMnOiBhcmdzXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZUNhdGNoQ2xhdXNlOiBmdW5jdGlvbiAocGFyYW0sIGJvZHkpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogU3ludGF4LkNhdGNoQ2xhdXNlLFxuICAgICAgICAgICAgICAgIHBhcmFtOiBwYXJhbSxcbiAgICAgICAgICAgICAgICBib2R5OiBib2R5XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZUNvbmRpdGlvbmFsRXhwcmVzc2lvbjogZnVuY3Rpb24gKHRlc3QsIGNvbnNlcXVlbnQsIGFsdGVybmF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBTeW50YXguQ29uZGl0aW9uYWxFeHByZXNzaW9uLFxuICAgICAgICAgICAgICAgIHRlc3Q6IHRlc3QsXG4gICAgICAgICAgICAgICAgY29uc2VxdWVudDogY29uc2VxdWVudCxcbiAgICAgICAgICAgICAgICBhbHRlcm5hdGU6IGFsdGVybmF0ZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVDb250aW51ZVN0YXRlbWVudDogZnVuY3Rpb24gKGxhYmVsKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFN5bnRheC5Db250aW51ZVN0YXRlbWVudCxcbiAgICAgICAgICAgICAgICBsYWJlbDogbGFiZWxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG5cbiAgICAgICAgY3JlYXRlRGVidWdnZXJTdGF0ZW1lbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogU3ludGF4LkRlYnVnZ2VyU3RhdGVtZW50XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZURvV2hpbGVTdGF0ZW1lbnQ6IGZ1bmN0aW9uIChib2R5LCB0ZXN0KSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFN5bnRheC5Eb1doaWxlU3RhdGVtZW50LFxuICAgICAgICAgICAgICAgIGJvZHk6IGJvZHksXG4gICAgICAgICAgICAgICAgdGVzdDogdGVzdFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVFbXB0eVN0YXRlbWVudDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBTeW50YXguRW1wdHlTdGF0ZW1lbnRcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG5cbiAgICAgICAgY3JlYXRlRXhwcmVzc2lvblN0YXRlbWVudDogZnVuY3Rpb24gKGV4cHJlc3Npb24pIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogU3ludGF4LkV4cHJlc3Npb25TdGF0ZW1lbnQsXG4gICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogZXhwcmVzc2lvblxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVGb3JTdGF0ZW1lbnQ6IGZ1bmN0aW9uIChpbml0LCB0ZXN0LCB1cGRhdGUsIGJvZHkpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogU3ludGF4LkZvclN0YXRlbWVudCxcbiAgICAgICAgICAgICAgICBpbml0OiBpbml0LFxuICAgICAgICAgICAgICAgIHRlc3Q6IHRlc3QsXG4gICAgICAgICAgICAgICAgdXBkYXRlOiB1cGRhdGUsXG4gICAgICAgICAgICAgICAgYm9keTogYm9keVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVGb3JJblN0YXRlbWVudDogZnVuY3Rpb24gKGxlZnQsIHJpZ2h0LCBib2R5KSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFN5bnRheC5Gb3JJblN0YXRlbWVudCxcbiAgICAgICAgICAgICAgICBsZWZ0OiBsZWZ0LFxuICAgICAgICAgICAgICAgIHJpZ2h0OiByaWdodCxcbiAgICAgICAgICAgICAgICBib2R5OiBib2R5LFxuICAgICAgICAgICAgICAgIGVhY2g6IGZhbHNlXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZUZvck9mU3RhdGVtZW50OiBmdW5jdGlvbiAobGVmdCwgcmlnaHQsIGJvZHkpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogU3ludGF4LkZvck9mU3RhdGVtZW50LFxuICAgICAgICAgICAgICAgIGxlZnQ6IGxlZnQsXG4gICAgICAgICAgICAgICAgcmlnaHQ6IHJpZ2h0LFxuICAgICAgICAgICAgICAgIGJvZHk6IGJvZHlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG5cbiAgICAgICAgY3JlYXRlRnVuY3Rpb25EZWNsYXJhdGlvbjogZnVuY3Rpb24gKGlkLCBwYXJhbXMsIGRlZmF1bHRzLCBib2R5LCByZXN0LCBnZW5lcmF0b3IsIGV4cHJlc3Npb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5UeXBlLCBwYXJhbWV0cmljVHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBTeW50YXguRnVuY3Rpb25EZWNsYXJhdGlvbixcbiAgICAgICAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgICAgICAgcGFyYW1zOiBwYXJhbXMsXG4gICAgICAgICAgICAgICAgZGVmYXVsdHM6IGRlZmF1bHRzLFxuICAgICAgICAgICAgICAgIGJvZHk6IGJvZHksXG4gICAgICAgICAgICAgICAgcmVzdDogcmVzdCxcbiAgICAgICAgICAgICAgICBnZW5lcmF0b3I6IGdlbmVyYXRvcixcbiAgICAgICAgICAgICAgICBleHByZXNzaW9uOiBleHByZXNzaW9uLFxuICAgICAgICAgICAgICAgIHJldHVyblR5cGU6IHJldHVyblR5cGUsXG4gICAgICAgICAgICAgICAgcGFyYW1ldHJpY1R5cGU6IHBhcmFtZXRyaWNUeXBlXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZUZ1bmN0aW9uRXhwcmVzc2lvbjogZnVuY3Rpb24gKGlkLCBwYXJhbXMsIGRlZmF1bHRzLCBib2R5LCByZXN0LCBnZW5lcmF0b3IsIGV4cHJlc3Npb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblR5cGUsIHBhcmFtZXRyaWNUeXBlKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFN5bnRheC5GdW5jdGlvbkV4cHJlc3Npb24sXG4gICAgICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgICAgIHBhcmFtczogcGFyYW1zLFxuICAgICAgICAgICAgICAgIGRlZmF1bHRzOiBkZWZhdWx0cyxcbiAgICAgICAgICAgICAgICBib2R5OiBib2R5LFxuICAgICAgICAgICAgICAgIHJlc3Q6IHJlc3QsXG4gICAgICAgICAgICAgICAgZ2VuZXJhdG9yOiBnZW5lcmF0b3IsXG4gICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogZXhwcmVzc2lvbixcbiAgICAgICAgICAgICAgICByZXR1cm5UeXBlOiByZXR1cm5UeXBlLFxuICAgICAgICAgICAgICAgIHBhcmFtZXRyaWNUeXBlOiBwYXJhbWV0cmljVHlwZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVJZGVudGlmaWVyOiBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBTeW50YXguSWRlbnRpZmllcixcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICAgIC8vIE9ubHkgaGVyZSB0byBpbml0aWFsaXplIHRoZSBzaGFwZSBvZiB0aGUgb2JqZWN0IHRvIGVuc3VyZVxuICAgICAgICAgICAgICAgIC8vIHRoYXQgdGhlICd0eXBlQW5ub3RhdGlvbicga2V5IGlzIG9yZGVyZWQgYmVmb3JlIG90aGVycyB0aGF0XG4gICAgICAgICAgICAgICAgLy8gYXJlIGFkZGVkIGxhdGVyIChsaWtlICdsb2MnIGFuZCAncmFuZ2UnKS4gVGhpcyBqdXN0IGhlbHBzXG4gICAgICAgICAgICAgICAgLy8ga2VlcCB0aGUgc2hhcGUgb2YgSWRlbnRpZmllciBub2RlcyBjb25zaXN0ZW50IHdpdGggZXZlcnl0aGluZ1xuICAgICAgICAgICAgICAgIC8vIGVsc2UuXG4gICAgICAgICAgICAgICAgdHlwZUFubm90YXRpb246IHVuZGVmaW5lZFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVUeXBlQW5ub3RhdGlvbjogZnVuY3Rpb24gKHR5cGVJZGVudGlmaWVyLCBwYXJhbWV0cmljVHlwZSwgcGFyYW1zLCByZXR1cm5UeXBlLCBudWxsYWJsZSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBTeW50YXguVHlwZUFubm90YXRpb24sXG4gICAgICAgICAgICAgICAgaWQ6IHR5cGVJZGVudGlmaWVyLFxuICAgICAgICAgICAgICAgIHBhcmFtZXRyaWNUeXBlOiBwYXJhbWV0cmljVHlwZSxcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHBhcmFtcyxcbiAgICAgICAgICAgICAgICByZXR1cm5UeXBlOiByZXR1cm5UeXBlLFxuICAgICAgICAgICAgICAgIG51bGxhYmxlOiBudWxsYWJsZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVQYXJhbWV0cmljVHlwZUFubm90YXRpb246IGZ1bmN0aW9uIChwYXJhbWV0cmljVHlwZXMpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogU3ludGF4LlBhcmFtZXRyaWNUeXBlQW5ub3RhdGlvbixcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHBhcmFtZXRyaWNUeXBlc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVWb2lkVHlwZUFubm90YXRpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogU3ludGF4LlZvaWRUeXBlQW5ub3RhdGlvblxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVPYmplY3RUeXBlQW5ub3RhdGlvbjogZnVuY3Rpb24gKHByb3BlcnRpZXMsIG51bGxhYmxlKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFN5bnRheC5PYmplY3RUeXBlQW5ub3RhdGlvbixcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxuICAgICAgICAgICAgICAgIG51bGxhYmxlOiBudWxsYWJsZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVUeXBlQW5ub3RhdGVkSWRlbnRpZmllcjogZnVuY3Rpb24gKGlkZW50aWZpZXIsIGFubm90YXRpb24sIGlzT3B0aW9uYWxQYXJhbSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBTeW50YXguVHlwZUFubm90YXRlZElkZW50aWZpZXIsXG4gICAgICAgICAgICAgICAgaWQ6IGlkZW50aWZpZXIsXG4gICAgICAgICAgICAgICAgYW5ub3RhdGlvbjogYW5ub3RhdGlvblxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVPcHRpb25hbFBhcmFtZXRlcjogZnVuY3Rpb24gKGlkZW50aWZpZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogU3ludGF4Lk9wdGlvbmFsUGFyYW1ldGVyLFxuICAgICAgICAgICAgICAgIGlkOiBpZGVudGlmaWVyXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZVhKU0F0dHJpYnV0ZTogZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFN5bnRheC5YSlNBdHRyaWJ1dGUsXG4gICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUgfHwgbnVsbFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVYSlNTcHJlYWRBdHRyaWJ1dGU6IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBTeW50YXguWEpTU3ByZWFkQXR0cmlidXRlLFxuICAgICAgICAgICAgICAgIGFyZ3VtZW50OiBhcmd1bWVudFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVYSlNJZGVudGlmaWVyOiBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBTeW50YXguWEpTSWRlbnRpZmllcixcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZVhKU05hbWVzcGFjZWROYW1lOiBmdW5jdGlvbiAobmFtZXNwYWNlLCBuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFN5bnRheC5YSlNOYW1lc3BhY2VkTmFtZSxcbiAgICAgICAgICAgICAgICBuYW1lc3BhY2U6IG5hbWVzcGFjZSxcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZVhKU01lbWJlckV4cHJlc3Npb246IGZ1bmN0aW9uIChvYmplY3QsIHByb3BlcnR5KSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFN5bnRheC5YSlNNZW1iZXJFeHByZXNzaW9uLFxuICAgICAgICAgICAgICAgIG9iamVjdDogb2JqZWN0LFxuICAgICAgICAgICAgICAgIHByb3BlcnR5OiBwcm9wZXJ0eVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVYSlNFbGVtZW50OiBmdW5jdGlvbiAob3BlbmluZ0VsZW1lbnQsIGNsb3NpbmdFbGVtZW50LCBjaGlsZHJlbikge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBTeW50YXguWEpTRWxlbWVudCxcbiAgICAgICAgICAgICAgICBvcGVuaW5nRWxlbWVudDogb3BlbmluZ0VsZW1lbnQsXG4gICAgICAgICAgICAgICAgY2xvc2luZ0VsZW1lbnQ6IGNsb3NpbmdFbGVtZW50LFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVYSlNFbXB0eUV4cHJlc3Npb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogU3ludGF4LlhKU0VtcHR5RXhwcmVzc2lvblxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVYSlNFeHByZXNzaW9uQ29udGFpbmVyOiBmdW5jdGlvbiAoZXhwcmVzc2lvbikge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBTeW50YXguWEpTRXhwcmVzc2lvbkNvbnRhaW5lcixcbiAgICAgICAgICAgICAgICBleHByZXNzaW9uOiBleHByZXNzaW9uXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZVhKU09wZW5pbmdFbGVtZW50OiBmdW5jdGlvbiAobmFtZSwgYXR0cmlidXRlcywgc2VsZkNsb3NpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogU3ludGF4LlhKU09wZW5pbmdFbGVtZW50LFxuICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgICAgc2VsZkNsb3Npbmc6IHNlbGZDbG9zaW5nLFxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IGF0dHJpYnV0ZXNcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG5cbiAgICAgICAgY3JlYXRlWEpTQ2xvc2luZ0VsZW1lbnQ6IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFN5bnRheC5YSlNDbG9zaW5nRWxlbWVudCxcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZUlmU3RhdGVtZW50OiBmdW5jdGlvbiAodGVzdCwgY29uc2VxdWVudCwgYWx0ZXJuYXRlKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFN5bnRheC5JZlN0YXRlbWVudCxcbiAgICAgICAgICAgICAgICB0ZXN0OiB0ZXN0LFxuICAgICAgICAgICAgICAgIGNvbnNlcXVlbnQ6IGNvbnNlcXVlbnQsXG4gICAgICAgICAgICAgICAgYWx0ZXJuYXRlOiBhbHRlcm5hdGVcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG5cbiAgICAgICAgY3JlYXRlTGFiZWxlZFN0YXRlbWVudDogZnVuY3Rpb24gKGxhYmVsLCBib2R5KSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFN5bnRheC5MYWJlbGVkU3RhdGVtZW50LFxuICAgICAgICAgICAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgICAgICAgICAgICBib2R5OiBib2R5XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZUxpdGVyYWw6IGZ1bmN0aW9uICh0b2tlbikge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBTeW50YXguTGl0ZXJhbCxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdG9rZW4udmFsdWUsXG4gICAgICAgICAgICAgICAgcmF3OiBzb3VyY2Uuc2xpY2UodG9rZW4ucmFuZ2VbMF0sIHRva2VuLnJhbmdlWzFdKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVNZW1iZXJFeHByZXNzaW9uOiBmdW5jdGlvbiAoYWNjZXNzb3IsIG9iamVjdCwgcHJvcGVydHkpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogU3ludGF4Lk1lbWJlckV4cHJlc3Npb24sXG4gICAgICAgICAgICAgICAgY29tcHV0ZWQ6IGFjY2Vzc29yID09PSAnWycsXG4gICAgICAgICAgICAgICAgb2JqZWN0OiBvYmplY3QsXG4gICAgICAgICAgICAgICAgcHJvcGVydHk6IHByb3BlcnR5XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZU5ld0V4cHJlc3Npb246IGZ1bmN0aW9uIChjYWxsZWUsIGFyZ3MpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogU3ludGF4Lk5ld0V4cHJlc3Npb24sXG4gICAgICAgICAgICAgICAgY2FsbGVlOiBjYWxsZWUsXG4gICAgICAgICAgICAgICAgJ2FyZ3VtZW50cyc6IGFyZ3NcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG5cbiAgICAgICAgY3JlYXRlT2JqZWN0RXhwcmVzc2lvbjogZnVuY3Rpb24gKHByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogU3ludGF4Lk9iamVjdEV4cHJlc3Npb24sXG4gICAgICAgICAgICAgICAgcHJvcGVydGllczogcHJvcGVydGllc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVQb3N0Zml4RXhwcmVzc2lvbjogZnVuY3Rpb24gKG9wZXJhdG9yLCBhcmd1bWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBTeW50YXguVXBkYXRlRXhwcmVzc2lvbixcbiAgICAgICAgICAgICAgICBvcGVyYXRvcjogb3BlcmF0b3IsXG4gICAgICAgICAgICAgICAgYXJndW1lbnQ6IGFyZ3VtZW50LFxuICAgICAgICAgICAgICAgIHByZWZpeDogZmFsc2VcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG5cbiAgICAgICAgY3JlYXRlUHJvZ3JhbTogZnVuY3Rpb24gKGJvZHkpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogU3ludGF4LlByb2dyYW0sXG4gICAgICAgICAgICAgICAgYm9keTogYm9keVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVQcm9wZXJ0eTogZnVuY3Rpb24gKGtpbmQsIGtleSwgdmFsdWUsIG1ldGhvZCwgc2hvcnRoYW5kLCBjb21wdXRlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBTeW50YXguUHJvcGVydHksXG4gICAgICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgICAgIGtpbmQ6IGtpbmQsXG4gICAgICAgICAgICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICAgICAgICAgICAgc2hvcnRoYW5kOiBzaG9ydGhhbmQsXG4gICAgICAgICAgICAgICAgY29tcHV0ZWQ6IGNvbXB1dGVkXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZVJldHVyblN0YXRlbWVudDogZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFN5bnRheC5SZXR1cm5TdGF0ZW1lbnQsXG4gICAgICAgICAgICAgICAgYXJndW1lbnQ6IGFyZ3VtZW50XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZVNlcXVlbmNlRXhwcmVzc2lvbjogZnVuY3Rpb24gKGV4cHJlc3Npb25zKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFN5bnRheC5TZXF1ZW5jZUV4cHJlc3Npb24sXG4gICAgICAgICAgICAgICAgZXhwcmVzc2lvbnM6IGV4cHJlc3Npb25zXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZVN3aXRjaENhc2U6IGZ1bmN0aW9uICh0ZXN0LCBjb25zZXF1ZW50KSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFN5bnRheC5Td2l0Y2hDYXNlLFxuICAgICAgICAgICAgICAgIHRlc3Q6IHRlc3QsXG4gICAgICAgICAgICAgICAgY29uc2VxdWVudDogY29uc2VxdWVudFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVTd2l0Y2hTdGF0ZW1lbnQ6IGZ1bmN0aW9uIChkaXNjcmltaW5hbnQsIGNhc2VzKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFN5bnRheC5Td2l0Y2hTdGF0ZW1lbnQsXG4gICAgICAgICAgICAgICAgZGlzY3JpbWluYW50OiBkaXNjcmltaW5hbnQsXG4gICAgICAgICAgICAgICAgY2FzZXM6IGNhc2VzXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZVRoaXNFeHByZXNzaW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFN5bnRheC5UaGlzRXhwcmVzc2lvblxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVUaHJvd1N0YXRlbWVudDogZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFN5bnRheC5UaHJvd1N0YXRlbWVudCxcbiAgICAgICAgICAgICAgICBhcmd1bWVudDogYXJndW1lbnRcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG5cbiAgICAgICAgY3JlYXRlVHJ5U3RhdGVtZW50OiBmdW5jdGlvbiAoYmxvY2ssIGd1YXJkZWRIYW5kbGVycywgaGFuZGxlcnMsIGZpbmFsaXplcikge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBTeW50YXguVHJ5U3RhdGVtZW50LFxuICAgICAgICAgICAgICAgIGJsb2NrOiBibG9jayxcbiAgICAgICAgICAgICAgICBndWFyZGVkSGFuZGxlcnM6IGd1YXJkZWRIYW5kbGVycyxcbiAgICAgICAgICAgICAgICBoYW5kbGVyczogaGFuZGxlcnMsXG4gICAgICAgICAgICAgICAgZmluYWxpemVyOiBmaW5hbGl6ZXJcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG5cbiAgICAgICAgY3JlYXRlVW5hcnlFeHByZXNzaW9uOiBmdW5jdGlvbiAob3BlcmF0b3IsIGFyZ3VtZW50KSB7XG4gICAgICAgICAgICBpZiAob3BlcmF0b3IgPT09ICcrKycgfHwgb3BlcmF0b3IgPT09ICctLScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBTeW50YXguVXBkYXRlRXhwcmVzc2lvbixcbiAgICAgICAgICAgICAgICAgICAgb3BlcmF0b3I6IG9wZXJhdG9yLFxuICAgICAgICAgICAgICAgICAgICBhcmd1bWVudDogYXJndW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIHByZWZpeDogdHJ1ZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFN5bnRheC5VbmFyeUV4cHJlc3Npb24sXG4gICAgICAgICAgICAgICAgb3BlcmF0b3I6IG9wZXJhdG9yLFxuICAgICAgICAgICAgICAgIGFyZ3VtZW50OiBhcmd1bWVudCxcbiAgICAgICAgICAgICAgICBwcmVmaXg6IHRydWVcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG5cbiAgICAgICAgY3JlYXRlVmFyaWFibGVEZWNsYXJhdGlvbjogZnVuY3Rpb24gKGRlY2xhcmF0aW9ucywga2luZCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBTeW50YXguVmFyaWFibGVEZWNsYXJhdGlvbixcbiAgICAgICAgICAgICAgICBkZWNsYXJhdGlvbnM6IGRlY2xhcmF0aW9ucyxcbiAgICAgICAgICAgICAgICBraW5kOiBraW5kXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZVZhcmlhYmxlRGVjbGFyYXRvcjogZnVuY3Rpb24gKGlkLCBpbml0KSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFN5bnRheC5WYXJpYWJsZURlY2xhcmF0b3IsXG4gICAgICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgICAgIGluaXQ6IGluaXRcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG5cbiAgICAgICAgY3JlYXRlV2hpbGVTdGF0ZW1lbnQ6IGZ1bmN0aW9uICh0ZXN0LCBib2R5KSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFN5bnRheC5XaGlsZVN0YXRlbWVudCxcbiAgICAgICAgICAgICAgICB0ZXN0OiB0ZXN0LFxuICAgICAgICAgICAgICAgIGJvZHk6IGJvZHlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG5cbiAgICAgICAgY3JlYXRlV2l0aFN0YXRlbWVudDogZnVuY3Rpb24gKG9iamVjdCwgYm9keSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBTeW50YXguV2l0aFN0YXRlbWVudCxcbiAgICAgICAgICAgICAgICBvYmplY3Q6IG9iamVjdCxcbiAgICAgICAgICAgICAgICBib2R5OiBib2R5XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZVRlbXBsYXRlRWxlbWVudDogZnVuY3Rpb24gKHZhbHVlLCB0YWlsKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFN5bnRheC5UZW1wbGF0ZUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgICAgIHRhaWw6IHRhaWxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG5cbiAgICAgICAgY3JlYXRlVGVtcGxhdGVMaXRlcmFsOiBmdW5jdGlvbiAocXVhc2lzLCBleHByZXNzaW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBTeW50YXguVGVtcGxhdGVMaXRlcmFsLFxuICAgICAgICAgICAgICAgIHF1YXNpczogcXVhc2lzLFxuICAgICAgICAgICAgICAgIGV4cHJlc3Npb25zOiBleHByZXNzaW9uc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVTcHJlYWRFbGVtZW50OiBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogU3ludGF4LlNwcmVhZEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgYXJndW1lbnQ6IGFyZ3VtZW50XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZVNwcmVhZFByb3BlcnR5OiBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogU3ludGF4LlNwcmVhZFByb3BlcnR5LFxuICAgICAgICAgICAgICAgIGFyZ3VtZW50OiBhcmd1bWVudFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVUYWdnZWRUZW1wbGF0ZUV4cHJlc3Npb246IGZ1bmN0aW9uICh0YWcsIHF1YXNpKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFN5bnRheC5UYWdnZWRUZW1wbGF0ZUV4cHJlc3Npb24sXG4gICAgICAgICAgICAgICAgdGFnOiB0YWcsXG4gICAgICAgICAgICAgICAgcXVhc2k6IHF1YXNpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZUFycm93RnVuY3Rpb25FeHByZXNzaW9uOiBmdW5jdGlvbiAocGFyYW1zLCBkZWZhdWx0cywgYm9keSwgcmVzdCwgZXhwcmVzc2lvbikge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBTeW50YXguQXJyb3dGdW5jdGlvbkV4cHJlc3Npb24sXG4gICAgICAgICAgICAgICAgaWQ6IG51bGwsXG4gICAgICAgICAgICAgICAgcGFyYW1zOiBwYXJhbXMsXG4gICAgICAgICAgICAgICAgZGVmYXVsdHM6IGRlZmF1bHRzLFxuICAgICAgICAgICAgICAgIGJvZHk6IGJvZHksXG4gICAgICAgICAgICAgICAgcmVzdDogcmVzdCxcbiAgICAgICAgICAgICAgICBnZW5lcmF0b3I6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IGV4cHJlc3Npb25cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG5cbiAgICAgICAgY3JlYXRlTWV0aG9kRGVmaW5pdGlvbjogZnVuY3Rpb24gKHByb3BlcnR5VHlwZSwga2luZCwga2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBTeW50YXguTWV0aG9kRGVmaW5pdGlvbixcbiAgICAgICAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICAgICAga2luZDoga2luZCxcbiAgICAgICAgICAgICAgICAnc3RhdGljJzogcHJvcGVydHlUeXBlID09PSBDbGFzc1Byb3BlcnR5VHlwZS5zdGF0aWNcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG5cbiAgICAgICAgY3JlYXRlQ2xhc3NQcm9wZXJ0eTogZnVuY3Rpb24gKHByb3BlcnR5SWRlbnRpZmllcikge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBTeW50YXguQ2xhc3NQcm9wZXJ0eSxcbiAgICAgICAgICAgICAgICBpZDogcHJvcGVydHlJZGVudGlmaWVyXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZUNsYXNzQm9keTogZnVuY3Rpb24gKGJvZHkpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogU3ludGF4LkNsYXNzQm9keSxcbiAgICAgICAgICAgICAgICBib2R5OiBib2R5XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZUNsYXNzRXhwcmVzc2lvbjogZnVuY3Rpb24gKGlkLCBzdXBlckNsYXNzLCBib2R5LCBwYXJhbWV0cmljVHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBTeW50YXguQ2xhc3NFeHByZXNzaW9uLFxuICAgICAgICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICAgICAgICBzdXBlckNsYXNzOiBzdXBlckNsYXNzLFxuICAgICAgICAgICAgICAgIGJvZHk6IGJvZHksXG4gICAgICAgICAgICAgICAgcGFyYW1ldHJpY1R5cGU6IHBhcmFtZXRyaWNUeXBlXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZUNsYXNzRGVjbGFyYXRpb246IGZ1bmN0aW9uIChpZCwgc3VwZXJDbGFzcywgYm9keSwgcGFyYW1ldHJpY1R5cGUsIHN1cGVyUGFyYW1ldHJpY1R5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogU3ludGF4LkNsYXNzRGVjbGFyYXRpb24sXG4gICAgICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgICAgIHN1cGVyQ2xhc3M6IHN1cGVyQ2xhc3MsXG4gICAgICAgICAgICAgICAgYm9keTogYm9keSxcbiAgICAgICAgICAgICAgICBwYXJhbWV0cmljVHlwZTogcGFyYW1ldHJpY1R5cGUsXG4gICAgICAgICAgICAgICAgc3VwZXJQYXJhbWV0cmljVHlwZTogc3VwZXJQYXJhbWV0cmljVHlwZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVFeHBvcnRTcGVjaWZpZXI6IGZ1bmN0aW9uIChpZCwgbmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBTeW50YXguRXhwb3J0U3BlY2lmaWVyLFxuICAgICAgICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZUV4cG9ydEJhdGNoU3BlY2lmaWVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFN5bnRheC5FeHBvcnRCYXRjaFNwZWNpZmllclxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVFeHBvcnREZWNsYXJhdGlvbjogZnVuY3Rpb24gKGRlY2xhcmF0aW9uLCBzcGVjaWZpZXJzLCBzb3VyY2UpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogU3ludGF4LkV4cG9ydERlY2xhcmF0aW9uLFxuICAgICAgICAgICAgICAgIGRlY2xhcmF0aW9uOiBkZWNsYXJhdGlvbixcbiAgICAgICAgICAgICAgICBzcGVjaWZpZXJzOiBzcGVjaWZpZXJzLFxuICAgICAgICAgICAgICAgIHNvdXJjZTogc291cmNlXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZUltcG9ydFNwZWNpZmllcjogZnVuY3Rpb24gKGlkLCBuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFN5bnRheC5JbXBvcnRTcGVjaWZpZXIsXG4gICAgICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgICAgIG5hbWU6IG5hbWVcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG5cbiAgICAgICAgY3JlYXRlSW1wb3J0RGVjbGFyYXRpb246IGZ1bmN0aW9uIChzcGVjaWZpZXJzLCBraW5kLCBzb3VyY2UpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogU3ludGF4LkltcG9ydERlY2xhcmF0aW9uLFxuICAgICAgICAgICAgICAgIHNwZWNpZmllcnM6IHNwZWNpZmllcnMsXG4gICAgICAgICAgICAgICAga2luZDoga2luZCxcbiAgICAgICAgICAgICAgICBzb3VyY2U6IHNvdXJjZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVZaWVsZEV4cHJlc3Npb246IGZ1bmN0aW9uIChhcmd1bWVudCwgZGVsZWdhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogU3ludGF4LllpZWxkRXhwcmVzc2lvbixcbiAgICAgICAgICAgICAgICBhcmd1bWVudDogYXJndW1lbnQsXG4gICAgICAgICAgICAgICAgZGVsZWdhdGU6IGRlbGVnYXRlXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZU1vZHVsZURlY2xhcmF0aW9uOiBmdW5jdGlvbiAoaWQsIHNvdXJjZSwgYm9keSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBTeW50YXguTW9kdWxlRGVjbGFyYXRpb24sXG4gICAgICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgICAgICAgICAgIGJvZHk6IGJvZHlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG5cbiAgICAgICAgY3JlYXRlQ29tcHJlaGVuc2lvbkV4cHJlc3Npb246IGZ1bmN0aW9uIChmaWx0ZXIsIGJsb2NrcywgYm9keSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBTeW50YXguQ29tcHJlaGVuc2lvbkV4cHJlc3Npb24sXG4gICAgICAgICAgICAgICAgZmlsdGVyOiBmaWx0ZXIsXG4gICAgICAgICAgICAgICAgYmxvY2tzOiBibG9ja3MsXG4gICAgICAgICAgICAgICAgYm9keTogYm9keVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIC8vIFJldHVybiB0cnVlIGlmIHRoZXJlIGlzIGEgbGluZSB0ZXJtaW5hdG9yIGJlZm9yZSB0aGUgbmV4dCB0b2tlbi5cblxuICAgIGZ1bmN0aW9uIHBlZWtMaW5lVGVybWluYXRvcigpIHtcbiAgICAgICAgdmFyIHBvcywgbGluZSwgc3RhcnQsIGZvdW5kO1xuXG4gICAgICAgIHBvcyA9IGluZGV4O1xuICAgICAgICBsaW5lID0gbGluZU51bWJlcjtcbiAgICAgICAgc3RhcnQgPSBsaW5lU3RhcnQ7XG4gICAgICAgIHNraXBDb21tZW50KCk7XG4gICAgICAgIGZvdW5kID0gbGluZU51bWJlciAhPT0gbGluZTtcbiAgICAgICAgaW5kZXggPSBwb3M7XG4gICAgICAgIGxpbmVOdW1iZXIgPSBsaW5lO1xuICAgICAgICBsaW5lU3RhcnQgPSBzdGFydDtcblxuICAgICAgICByZXR1cm4gZm91bmQ7XG4gICAgfVxuXG4gICAgLy8gVGhyb3cgYW4gZXhjZXB0aW9uXG5cbiAgICBmdW5jdGlvbiB0aHJvd0Vycm9yKHRva2VuLCBtZXNzYWdlRm9ybWF0KSB7XG4gICAgICAgIHZhciBlcnJvcixcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpLFxuICAgICAgICAgICAgbXNnID0gbWVzc2FnZUZvcm1hdC5yZXBsYWNlKFxuICAgICAgICAgICAgICAgIC8lKFxcZCkvZyxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAod2hvbGUsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydChpbmRleCA8IGFyZ3MubGVuZ3RoLCAnTWVzc2FnZSByZWZlcmVuY2UgbXVzdCBiZSBpbiByYW5nZScpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJnc1tpbmRleF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcblxuICAgICAgICBpZiAodHlwZW9mIHRva2VuLmxpbmVOdW1iZXIgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBlcnJvciA9IG5ldyBFcnJvcignTGluZSAnICsgdG9rZW4ubGluZU51bWJlciArICc6ICcgKyBtc2cpO1xuICAgICAgICAgICAgZXJyb3IuaW5kZXggPSB0b2tlbi5yYW5nZVswXTtcbiAgICAgICAgICAgIGVycm9yLmxpbmVOdW1iZXIgPSB0b2tlbi5saW5lTnVtYmVyO1xuICAgICAgICAgICAgZXJyb3IuY29sdW1uID0gdG9rZW4ucmFuZ2VbMF0gLSBsaW5lU3RhcnQgKyAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoJ0xpbmUgJyArIGxpbmVOdW1iZXIgKyAnOiAnICsgbXNnKTtcbiAgICAgICAgICAgIGVycm9yLmluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICBlcnJvci5saW5lTnVtYmVyID0gbGluZU51bWJlcjtcbiAgICAgICAgICAgIGVycm9yLmNvbHVtbiA9IGluZGV4IC0gbGluZVN0YXJ0ICsgMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVycm9yLmRlc2NyaXB0aW9uID0gbXNnO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0aHJvd0Vycm9yVG9sZXJhbnQoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aHJvd0Vycm9yLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmIChleHRyYS5lcnJvcnMpIHtcbiAgICAgICAgICAgICAgICBleHRyYS5lcnJvcnMucHVzaChlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLy8gVGhyb3cgYW4gZXhjZXB0aW9uIGJlY2F1c2Ugb2YgdGhlIHRva2VuLlxuXG4gICAgZnVuY3Rpb24gdGhyb3dVbmV4cGVjdGVkKHRva2VuKSB7XG4gICAgICAgIGlmICh0b2tlbi50eXBlID09PSBUb2tlbi5FT0YpIHtcbiAgICAgICAgICAgIHRocm93RXJyb3IodG9rZW4sIE1lc3NhZ2VzLlVuZXhwZWN0ZWRFT1MpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09IFRva2VuLk51bWVyaWNMaXRlcmFsKSB7XG4gICAgICAgICAgICB0aHJvd0Vycm9yKHRva2VuLCBNZXNzYWdlcy5VbmV4cGVjdGVkTnVtYmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0b2tlbi50eXBlID09PSBUb2tlbi5TdHJpbmdMaXRlcmFsIHx8IHRva2VuLnR5cGUgPT09IFRva2VuLlhKU1RleHQpIHtcbiAgICAgICAgICAgIHRocm93RXJyb3IodG9rZW4sIE1lc3NhZ2VzLlVuZXhwZWN0ZWRTdHJpbmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09IFRva2VuLklkZW50aWZpZXIpIHtcbiAgICAgICAgICAgIHRocm93RXJyb3IodG9rZW4sIE1lc3NhZ2VzLlVuZXhwZWN0ZWRJZGVudGlmaWVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0b2tlbi50eXBlID09PSBUb2tlbi5LZXl3b3JkKSB7XG4gICAgICAgICAgICBpZiAoaXNGdXR1cmVSZXNlcnZlZFdvcmQodG9rZW4udmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3dFcnJvcih0b2tlbiwgTWVzc2FnZXMuVW5leHBlY3RlZFJlc2VydmVkKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RyaWN0ICYmIGlzU3RyaWN0TW9kZVJlc2VydmVkV29yZCh0b2tlbi52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvd0Vycm9yVG9sZXJhbnQodG9rZW4sIE1lc3NhZ2VzLlN0cmljdFJlc2VydmVkV29yZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3dFcnJvcih0b2tlbiwgTWVzc2FnZXMuVW5leHBlY3RlZFRva2VuLCB0b2tlbi52YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodG9rZW4udHlwZSA9PT0gVG9rZW4uVGVtcGxhdGUpIHtcbiAgICAgICAgICAgIHRocm93RXJyb3IodG9rZW4sIE1lc3NhZ2VzLlVuZXhwZWN0ZWRUZW1wbGF0ZSwgdG9rZW4udmFsdWUucmF3KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJvb2xlYW5MaXRlcmFsLCBOdWxsTGl0ZXJhbCwgb3IgUHVuY3R1YXRvci5cbiAgICAgICAgdGhyb3dFcnJvcih0b2tlbiwgTWVzc2FnZXMuVW5leHBlY3RlZFRva2VuLCB0b2tlbi52YWx1ZSk7XG4gICAgfVxuXG4gICAgLy8gRXhwZWN0IHRoZSBuZXh0IHRva2VuIHRvIG1hdGNoIHRoZSBzcGVjaWZpZWQgcHVuY3R1YXRvci5cbiAgICAvLyBJZiBub3QsIGFuIGV4Y2VwdGlvbiB3aWxsIGJlIHRocm93bi5cblxuICAgIGZ1bmN0aW9uIGV4cGVjdCh2YWx1ZSkge1xuICAgICAgICB2YXIgdG9rZW4gPSBsZXgoKTtcbiAgICAgICAgaWYgKHRva2VuLnR5cGUgIT09IFRva2VuLlB1bmN0dWF0b3IgfHwgdG9rZW4udmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICB0aHJvd1VuZXhwZWN0ZWQodG9rZW4pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gRXhwZWN0IHRoZSBuZXh0IHRva2VuIHRvIG1hdGNoIHRoZSBzcGVjaWZpZWQga2V5d29yZC5cbiAgICAvLyBJZiBub3QsIGFuIGV4Y2VwdGlvbiB3aWxsIGJlIHRocm93bi5cblxuICAgIGZ1bmN0aW9uIGV4cGVjdEtleXdvcmQoa2V5d29yZCkge1xuICAgICAgICB2YXIgdG9rZW4gPSBsZXgoKTtcbiAgICAgICAgaWYgKHRva2VuLnR5cGUgIT09IFRva2VuLktleXdvcmQgfHwgdG9rZW4udmFsdWUgIT09IGtleXdvcmQpIHtcbiAgICAgICAgICAgIHRocm93VW5leHBlY3RlZCh0b2tlbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gdHJ1ZSBpZiB0aGUgbmV4dCB0b2tlbiBtYXRjaGVzIHRoZSBzcGVjaWZpZWQgcHVuY3R1YXRvci5cblxuICAgIGZ1bmN0aW9uIG1hdGNoKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBsb29rYWhlYWQudHlwZSA9PT0gVG9rZW4uUHVuY3R1YXRvciAmJiBsb29rYWhlYWQudmFsdWUgPT09IHZhbHVlO1xuICAgIH1cblxuICAgIC8vIFJldHVybiB0cnVlIGlmIHRoZSBuZXh0IHRva2VuIG1hdGNoZXMgdGhlIHNwZWNpZmllZCBrZXl3b3JkXG5cbiAgICBmdW5jdGlvbiBtYXRjaEtleXdvcmQoa2V5d29yZCkge1xuICAgICAgICByZXR1cm4gbG9va2FoZWFkLnR5cGUgPT09IFRva2VuLktleXdvcmQgJiYgbG9va2FoZWFkLnZhbHVlID09PSBrZXl3b3JkO1xuICAgIH1cblxuXG4gICAgLy8gUmV0dXJuIHRydWUgaWYgdGhlIG5leHQgdG9rZW4gbWF0Y2hlcyB0aGUgc3BlY2lmaWVkIGNvbnRleHR1YWwga2V5d29yZFxuXG4gICAgZnVuY3Rpb24gbWF0Y2hDb250ZXh0dWFsS2V5d29yZChrZXl3b3JkKSB7XG4gICAgICAgIHJldHVybiBsb29rYWhlYWQudHlwZSA9PT0gVG9rZW4uSWRlbnRpZmllciAmJiBsb29rYWhlYWQudmFsdWUgPT09IGtleXdvcmQ7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIHRydWUgaWYgdGhlIG5leHQgdG9rZW4gaXMgYW4gYXNzaWdubWVudCBvcGVyYXRvclxuXG4gICAgZnVuY3Rpb24gbWF0Y2hBc3NpZ24oKSB7XG4gICAgICAgIHZhciBvcDtcblxuICAgICAgICBpZiAobG9va2FoZWFkLnR5cGUgIT09IFRva2VuLlB1bmN0dWF0b3IpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBvcCA9IGxvb2thaGVhZC52YWx1ZTtcbiAgICAgICAgcmV0dXJuIG9wID09PSAnPScgfHxcbiAgICAgICAgICAgIG9wID09PSAnKj0nIHx8XG4gICAgICAgICAgICBvcCA9PT0gJy89JyB8fFxuICAgICAgICAgICAgb3AgPT09ICclPScgfHxcbiAgICAgICAgICAgIG9wID09PSAnKz0nIHx8XG4gICAgICAgICAgICBvcCA9PT0gJy09JyB8fFxuICAgICAgICAgICAgb3AgPT09ICc8PD0nIHx8XG4gICAgICAgICAgICBvcCA9PT0gJz4+PScgfHxcbiAgICAgICAgICAgIG9wID09PSAnPj4+PScgfHxcbiAgICAgICAgICAgIG9wID09PSAnJj0nIHx8XG4gICAgICAgICAgICBvcCA9PT0gJ149JyB8fFxuICAgICAgICAgICAgb3AgPT09ICd8PSc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29uc3VtZVNlbWljb2xvbigpIHtcbiAgICAgICAgdmFyIGxpbmUsIG9sZEluZGV4ID0gaW5kZXgsIG9sZExpbmVOdW1iZXIgPSBsaW5lTnVtYmVyLFxuICAgICAgICAgICAgb2xkTGluZVN0YXJ0ID0gbGluZVN0YXJ0LCBvbGRMb29rYWhlYWQgPSBsb29rYWhlYWQ7XG5cbiAgICAgICAgLy8gQ2F0Y2ggdGhlIHZlcnkgY29tbW9uIGNhc2UgZmlyc3Q6IGltbWVkaWF0ZWx5IGEgc2VtaWNvbG9uIChjaGFyICM1OSkuXG4gICAgICAgIGlmIChzb3VyY2UuY2hhckNvZGVBdChpbmRleCkgPT09IDU5KSB7XG4gICAgICAgICAgICBsZXgoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxpbmUgPSBsaW5lTnVtYmVyO1xuICAgICAgICBza2lwQ29tbWVudCgpO1xuICAgICAgICBpZiAobGluZU51bWJlciAhPT0gbGluZSkge1xuICAgICAgICAgICAgaW5kZXggPSBvbGRJbmRleDtcbiAgICAgICAgICAgIGxpbmVOdW1iZXIgPSBvbGRMaW5lTnVtYmVyO1xuICAgICAgICAgICAgbGluZVN0YXJ0ID0gb2xkTGluZVN0YXJ0O1xuICAgICAgICAgICAgbG9va2FoZWFkID0gb2xkTG9va2FoZWFkO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1hdGNoKCc7JykpIHtcbiAgICAgICAgICAgIGxleCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxvb2thaGVhZC50eXBlICE9PSBUb2tlbi5FT0YgJiYgIW1hdGNoKCd9JykpIHtcbiAgICAgICAgICAgIHRocm93VW5leHBlY3RlZChsb29rYWhlYWQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIHRydWUgaWYgcHJvdmlkZWQgZXhwcmVzc2lvbiBpcyBMZWZ0SGFuZFNpZGVFeHByZXNzaW9uXG5cbiAgICBmdW5jdGlvbiBpc0xlZnRIYW5kU2lkZShleHByKSB7XG4gICAgICAgIHJldHVybiBleHByLnR5cGUgPT09IFN5bnRheC5JZGVudGlmaWVyIHx8IGV4cHIudHlwZSA9PT0gU3ludGF4Lk1lbWJlckV4cHJlc3Npb247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNBc3NpZ25hYmxlTGVmdEhhbmRTaWRlKGV4cHIpIHtcbiAgICAgICAgcmV0dXJuIGlzTGVmdEhhbmRTaWRlKGV4cHIpIHx8IGV4cHIudHlwZSA9PT0gU3ludGF4Lk9iamVjdFBhdHRlcm4gfHwgZXhwci50eXBlID09PSBTeW50YXguQXJyYXlQYXR0ZXJuO1xuICAgIH1cblxuICAgIC8vIDExLjEuNCBBcnJheSBJbml0aWFsaXNlclxuXG4gICAgZnVuY3Rpb24gcGFyc2VBcnJheUluaXRpYWxpc2VyKCkge1xuICAgICAgICB2YXIgZWxlbWVudHMgPSBbXSwgYmxvY2tzID0gW10sIGZpbHRlciA9IG51bGwsIHRtcCwgcG9zc2libGVjb21wcmVoZW5zaW9uID0gdHJ1ZSwgYm9keSxcbiAgICAgICAgICAgIG1hcmtlciA9IG1hcmtlckNyZWF0ZSgpO1xuXG4gICAgICAgIGV4cGVjdCgnWycpO1xuICAgICAgICB3aGlsZSAoIW1hdGNoKCddJykpIHtcbiAgICAgICAgICAgIGlmIChsb29rYWhlYWQudmFsdWUgPT09ICdmb3InICYmXG4gICAgICAgICAgICAgICAgICAgIGxvb2thaGVhZC50eXBlID09PSBUb2tlbi5LZXl3b3JkKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFwb3NzaWJsZWNvbXByZWhlbnNpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3dFcnJvcih7fSwgTWVzc2FnZXMuQ29tcHJlaGVuc2lvbkVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbWF0Y2hLZXl3b3JkKCdmb3InKTtcbiAgICAgICAgICAgICAgICB0bXAgPSBwYXJzZUZvclN0YXRlbWVudCh7aWdub3JlQm9keTogdHJ1ZX0pO1xuICAgICAgICAgICAgICAgIHRtcC5vZiA9IHRtcC50eXBlID09PSBTeW50YXguRm9yT2ZTdGF0ZW1lbnQ7XG4gICAgICAgICAgICAgICAgdG1wLnR5cGUgPSBTeW50YXguQ29tcHJlaGVuc2lvbkJsb2NrO1xuICAgICAgICAgICAgICAgIGlmICh0bXAubGVmdC5raW5kKSB7IC8vIGNhbid0IGJlIGxldCBvciBjb25zdFxuICAgICAgICAgICAgICAgICAgICB0aHJvd0Vycm9yKHt9LCBNZXNzYWdlcy5Db21wcmVoZW5zaW9uRXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBibG9ja3MucHVzaCh0bXApO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsb29rYWhlYWQudmFsdWUgPT09ICdpZicgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvb2thaGVhZC50eXBlID09PSBUb2tlbi5LZXl3b3JkKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFwb3NzaWJsZWNvbXByZWhlbnNpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3dFcnJvcih7fSwgTWVzc2FnZXMuQ29tcHJlaGVuc2lvbkVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZXhwZWN0S2V5d29yZCgnaWYnKTtcbiAgICAgICAgICAgICAgICBleHBlY3QoJygnKTtcbiAgICAgICAgICAgICAgICBmaWx0ZXIgPSBwYXJzZUV4cHJlc3Npb24oKTtcbiAgICAgICAgICAgICAgICBleHBlY3QoJyknKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobG9va2FoZWFkLnZhbHVlID09PSAnLCcgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvb2thaGVhZC50eXBlID09PSBUb2tlbi5QdW5jdHVhdG9yKSB7XG4gICAgICAgICAgICAgICAgcG9zc2libGVjb21wcmVoZW5zaW9uID0gZmFsc2U7IC8vIG5vIGxvbmdlciBhbGxvd2VkLlxuICAgICAgICAgICAgICAgIGxleCgpO1xuICAgICAgICAgICAgICAgIGVsZW1lbnRzLnB1c2gobnVsbCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRtcCA9IHBhcnNlU3ByZWFkT3JBc3NpZ25tZW50RXhwcmVzc2lvbigpO1xuICAgICAgICAgICAgICAgIGVsZW1lbnRzLnB1c2godG1wKTtcbiAgICAgICAgICAgICAgICBpZiAodG1wICYmIHRtcC50eXBlID09PSBTeW50YXguU3ByZWFkRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW1hdGNoKCddJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93RXJyb3Ioe30sIE1lc3NhZ2VzLkVsZW1lbnRBZnRlclNwcmVhZEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghKG1hdGNoKCddJykgfHwgbWF0Y2hLZXl3b3JkKCdmb3InKSB8fCBtYXRjaEtleXdvcmQoJ2lmJykpKSB7XG4gICAgICAgICAgICAgICAgICAgIGV4cGVjdCgnLCcpOyAvLyB0aGlzIGxleGVzLlxuICAgICAgICAgICAgICAgICAgICBwb3NzaWJsZWNvbXByZWhlbnNpb24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBleHBlY3QoJ10nKTtcblxuICAgICAgICBpZiAoZmlsdGVyICYmICFibG9ja3MubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvd0Vycm9yKHt9LCBNZXNzYWdlcy5Db21wcmVoZW5zaW9uUmVxdWlyZXNCbG9jayk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYmxvY2tzLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGVsZW1lbnRzLmxlbmd0aCAhPT0gMSkge1xuICAgICAgICAgICAgICAgIHRocm93RXJyb3Ioe30sIE1lc3NhZ2VzLkNvbXByZWhlbnNpb25FcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVDb21wcmVoZW5zaW9uRXhwcmVzc2lvbihmaWx0ZXIsIGJsb2NrcywgZWxlbWVudHNbMF0pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVBcnJheUV4cHJlc3Npb24oZWxlbWVudHMpKTtcbiAgICB9XG5cbiAgICAvLyAxMS4xLjUgT2JqZWN0IEluaXRpYWxpc2VyXG5cbiAgICBmdW5jdGlvbiBwYXJzZVByb3BlcnR5RnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICB2YXIgcHJldmlvdXNTdHJpY3QsIHByZXZpb3VzWWllbGRBbGxvd2VkLCBwYXJhbXMsIGRlZmF1bHRzLCBib2R5LFxuICAgICAgICAgICAgbWFya2VyID0gbWFya2VyQ3JlYXRlKCk7XG5cbiAgICAgICAgcHJldmlvdXNTdHJpY3QgPSBzdHJpY3Q7XG4gICAgICAgIHByZXZpb3VzWWllbGRBbGxvd2VkID0gc3RhdGUueWllbGRBbGxvd2VkO1xuICAgICAgICBzdGF0ZS55aWVsZEFsbG93ZWQgPSBvcHRpb25zLmdlbmVyYXRvcjtcbiAgICAgICAgcGFyYW1zID0gb3B0aW9ucy5wYXJhbXMgfHwgW107XG4gICAgICAgIGRlZmF1bHRzID0gb3B0aW9ucy5kZWZhdWx0cyB8fCBbXTtcblxuICAgICAgICBib2R5ID0gcGFyc2VDb25jaXNlQm9keSgpO1xuICAgICAgICBpZiAob3B0aW9ucy5uYW1lICYmIHN0cmljdCAmJiBpc1Jlc3RyaWN0ZWRXb3JkKHBhcmFtc1swXS5uYW1lKSkge1xuICAgICAgICAgICAgdGhyb3dFcnJvclRvbGVyYW50KG9wdGlvbnMubmFtZSwgTWVzc2FnZXMuU3RyaWN0UGFyYW1OYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBzdHJpY3QgPSBwcmV2aW91c1N0cmljdDtcbiAgICAgICAgc3RhdGUueWllbGRBbGxvd2VkID0gcHJldmlvdXNZaWVsZEFsbG93ZWQ7XG5cbiAgICAgICAgcmV0dXJuIG1hcmtlckFwcGx5KG1hcmtlciwgZGVsZWdhdGUuY3JlYXRlRnVuY3Rpb25FeHByZXNzaW9uKFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHBhcmFtcyxcbiAgICAgICAgICAgIGRlZmF1bHRzLFxuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIG9wdGlvbnMucmVzdCB8fCBudWxsLFxuICAgICAgICAgICAgb3B0aW9ucy5nZW5lcmF0b3IsXG4gICAgICAgICAgICBib2R5LnR5cGUgIT09IFN5bnRheC5CbG9ja1N0YXRlbWVudCxcbiAgICAgICAgICAgIG9wdGlvbnMucmV0dXJuVHlwZSxcbiAgICAgICAgICAgIG9wdGlvbnMucGFyYW1ldHJpY1R5cGVcbiAgICAgICAgKSk7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBwYXJzZVByb3BlcnR5TWV0aG9kRnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICB2YXIgcHJldmlvdXNTdHJpY3QsIHRtcCwgbWV0aG9kO1xuXG4gICAgICAgIHByZXZpb3VzU3RyaWN0ID0gc3RyaWN0O1xuICAgICAgICBzdHJpY3QgPSB0cnVlO1xuXG4gICAgICAgIHRtcCA9IHBhcnNlUGFyYW1zKCk7XG5cbiAgICAgICAgaWYgKHRtcC5zdHJpY3RlZCkge1xuICAgICAgICAgICAgdGhyb3dFcnJvclRvbGVyYW50KHRtcC5zdHJpY3RlZCwgdG1wLm1lc3NhZ2UpO1xuICAgICAgICB9XG5cblxuICAgICAgICBtZXRob2QgPSBwYXJzZVByb3BlcnR5RnVuY3Rpb24oe1xuICAgICAgICAgICAgcGFyYW1zOiB0bXAucGFyYW1zLFxuICAgICAgICAgICAgZGVmYXVsdHM6IHRtcC5kZWZhdWx0cyxcbiAgICAgICAgICAgIHJlc3Q6IHRtcC5yZXN0LFxuICAgICAgICAgICAgZ2VuZXJhdG9yOiBvcHRpb25zLmdlbmVyYXRvcixcbiAgICAgICAgICAgIHJldHVyblR5cGU6IHRtcC5yZXR1cm5UeXBlLFxuICAgICAgICAgICAgcGFyYW1ldHJpY1R5cGU6IG9wdGlvbnMucGFyYW1ldHJpY1R5cGVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc3RyaWN0ID0gcHJldmlvdXNTdHJpY3Q7XG5cbiAgICAgICAgcmV0dXJuIG1ldGhvZDtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIHBhcnNlT2JqZWN0UHJvcGVydHlLZXkoKSB7XG4gICAgICAgIHZhciBtYXJrZXIgPSBtYXJrZXJDcmVhdGUoKSxcbiAgICAgICAgICAgIHRva2VuID0gbGV4KCksXG4gICAgICAgICAgICBwcm9wZXJ0eUtleSxcbiAgICAgICAgICAgIHJlc3VsdDtcblxuICAgICAgICAvLyBOb3RlOiBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbmx5IGZyb20gcGFyc2VPYmplY3RQcm9wZXJ0eSgpLCB3aGVyZVxuICAgICAgICAvLyBFT0YgYW5kIFB1bmN0dWF0b3IgdG9rZW5zIGFyZSBhbHJlYWR5IGZpbHRlcmVkIG91dC5cblxuICAgICAgICBpZiAodG9rZW4udHlwZSA9PT0gVG9rZW4uU3RyaW5nTGl0ZXJhbCB8fCB0b2tlbi50eXBlID09PSBUb2tlbi5OdW1lcmljTGl0ZXJhbCkge1xuICAgICAgICAgICAgaWYgKHN0cmljdCAmJiB0b2tlbi5vY3RhbCkge1xuICAgICAgICAgICAgICAgIHRocm93RXJyb3JUb2xlcmFudCh0b2tlbiwgTWVzc2FnZXMuU3RyaWN0T2N0YWxMaXRlcmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtYXJrZXJBcHBseShtYXJrZXIsIGRlbGVnYXRlLmNyZWF0ZUxpdGVyYWwodG9rZW4pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0b2tlbi50eXBlID09PSBUb2tlbi5QdW5jdHVhdG9yICYmIHRva2VuLnZhbHVlID09PSAnWycpIHtcbiAgICAgICAgICAgIC8vIEZvciBjb21wdXRlZCBwcm9wZXJ0aWVzIHdlIHNob3VsZCBza2lwIHRoZSBbIGFuZCBdLCBhbmRcbiAgICAgICAgICAgIC8vIGNhcHR1cmUgaW4gbWFya2VyIG9ubHkgdGhlIGFzc2lnbm1lbnQgZXhwcmVzc2lvbiBpdHNlbGYuXG4gICAgICAgICAgICBtYXJrZXIgPSBtYXJrZXJDcmVhdGUoKTtcbiAgICAgICAgICAgIHByb3BlcnR5S2V5ID0gcGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbigpO1xuICAgICAgICAgICAgcmVzdWx0ID0gbWFya2VyQXBwbHkobWFya2VyLCBwcm9wZXJ0eUtleSk7XG4gICAgICAgICAgICBleHBlY3QoJ10nKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVJZGVudGlmaWVyKHRva2VuLnZhbHVlKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VPYmplY3RQcm9wZXJ0eSgpIHtcbiAgICAgICAgdmFyIHRva2VuLCBrZXksIGlkLCB2YWx1ZSwgcGFyYW0sIGV4cHIsIGNvbXB1dGVkLFxuICAgICAgICAgICAgbWFya2VyID0gbWFya2VyQ3JlYXRlKCk7XG5cbiAgICAgICAgdG9rZW4gPSBsb29rYWhlYWQ7XG4gICAgICAgIGNvbXB1dGVkID0gKHRva2VuLnZhbHVlID09PSAnWycpO1xuXG4gICAgICAgIGlmICh0b2tlbi50eXBlID09PSBUb2tlbi5JZGVudGlmaWVyIHx8IGNvbXB1dGVkKSB7XG5cbiAgICAgICAgICAgIGlkID0gcGFyc2VPYmplY3RQcm9wZXJ0eUtleSgpO1xuXG4gICAgICAgICAgICAvLyBQcm9wZXJ0eSBBc3NpZ25tZW50OiBHZXR0ZXIgYW5kIFNldHRlci5cblxuICAgICAgICAgICAgaWYgKHRva2VuLnZhbHVlID09PSAnZ2V0JyAmJiAhKG1hdGNoKCc6JykgfHwgbWF0Y2goJygnKSkpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlZCA9IChsb29rYWhlYWQudmFsdWUgPT09ICdbJyk7XG4gICAgICAgICAgICAgICAga2V5ID0gcGFyc2VPYmplY3RQcm9wZXJ0eUtleSgpO1xuICAgICAgICAgICAgICAgIGV4cGVjdCgnKCcpO1xuICAgICAgICAgICAgICAgIGV4cGVjdCgnKScpO1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXJrZXJBcHBseShtYXJrZXIsIGRlbGVnYXRlLmNyZWF0ZVByb3BlcnR5KCdnZXQnLCBrZXksIHBhcnNlUHJvcGVydHlGdW5jdGlvbih7IGdlbmVyYXRvcjogZmFsc2UgfSksIGZhbHNlLCBmYWxzZSwgY29tcHV0ZWQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0b2tlbi52YWx1ZSA9PT0gJ3NldCcgJiYgIShtYXRjaCgnOicpIHx8IG1hdGNoKCcoJykpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZWQgPSAobG9va2FoZWFkLnZhbHVlID09PSAnWycpO1xuICAgICAgICAgICAgICAgIGtleSA9IHBhcnNlT2JqZWN0UHJvcGVydHlLZXkoKTtcbiAgICAgICAgICAgICAgICBleHBlY3QoJygnKTtcbiAgICAgICAgICAgICAgICB0b2tlbiA9IGxvb2thaGVhZDtcbiAgICAgICAgICAgICAgICBwYXJhbSA9IFsgcGFyc2VUeXBlQW5ub3RhdGFibGVJZGVudGlmaWVyKCkgXTtcbiAgICAgICAgICAgICAgICBleHBlY3QoJyknKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVQcm9wZXJ0eSgnc2V0Jywga2V5LCBwYXJzZVByb3BlcnR5RnVuY3Rpb24oeyBwYXJhbXM6IHBhcmFtLCBnZW5lcmF0b3I6IGZhbHNlLCBuYW1lOiB0b2tlbiB9KSwgZmFsc2UsIGZhbHNlLCBjb21wdXRlZCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGNoKCc6JykpIHtcbiAgICAgICAgICAgICAgICBsZXgoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVQcm9wZXJ0eSgnaW5pdCcsIGlkLCBwYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKCksIGZhbHNlLCBmYWxzZSwgY29tcHV0ZWQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRjaCgnKCcpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hcmtlckFwcGx5KG1hcmtlciwgZGVsZWdhdGUuY3JlYXRlUHJvcGVydHkoJ2luaXQnLCBpZCwgcGFyc2VQcm9wZXJ0eU1ldGhvZEZ1bmN0aW9uKHsgZ2VuZXJhdG9yOiBmYWxzZSB9KSwgdHJ1ZSwgZmFsc2UsIGNvbXB1dGVkKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29tcHV0ZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBDb21wdXRlZCBwcm9wZXJ0aWVzIGNhbiBvbmx5IGJlIHVzZWQgd2l0aCBmdWxsIG5vdGF0aW9uLlxuICAgICAgICAgICAgICAgIHRocm93VW5leHBlY3RlZChsb29rYWhlYWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1hcmtlckFwcGx5KG1hcmtlciwgZGVsZWdhdGUuY3JlYXRlUHJvcGVydHkoJ2luaXQnLCBpZCwgaWQsIGZhbHNlLCB0cnVlLCBmYWxzZSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0b2tlbi50eXBlID09PSBUb2tlbi5FT0YgfHwgdG9rZW4udHlwZSA9PT0gVG9rZW4uUHVuY3R1YXRvcikge1xuICAgICAgICAgICAgaWYgKCFtYXRjaCgnKicpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3dVbmV4cGVjdGVkKHRva2VuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxleCgpO1xuXG4gICAgICAgICAgICBjb21wdXRlZCA9IChsb29rYWhlYWQudHlwZSA9PT0gVG9rZW4uUHVuY3R1YXRvciAmJiBsb29rYWhlYWQudmFsdWUgPT09ICdbJyk7XG5cbiAgICAgICAgICAgIGlkID0gcGFyc2VPYmplY3RQcm9wZXJ0eUtleSgpO1xuXG4gICAgICAgICAgICBpZiAoIW1hdGNoKCcoJykpIHtcbiAgICAgICAgICAgICAgICB0aHJvd1VuZXhwZWN0ZWQobGV4KCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVQcm9wZXJ0eSgnaW5pdCcsIGlkLCBwYXJzZVByb3BlcnR5TWV0aG9kRnVuY3Rpb24oeyBnZW5lcmF0b3I6IHRydWUgfSksIHRydWUsIGZhbHNlLCBjb21wdXRlZCkpO1xuICAgICAgICB9XG4gICAgICAgIGtleSA9IHBhcnNlT2JqZWN0UHJvcGVydHlLZXkoKTtcbiAgICAgICAgaWYgKG1hdGNoKCc6JykpIHtcbiAgICAgICAgICAgIGxleCgpO1xuICAgICAgICAgICAgcmV0dXJuIG1hcmtlckFwcGx5KG1hcmtlciwgZGVsZWdhdGUuY3JlYXRlUHJvcGVydHkoJ2luaXQnLCBrZXksIHBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24oKSwgZmFsc2UsIGZhbHNlLCBmYWxzZSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXRjaCgnKCcpKSB7XG4gICAgICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVQcm9wZXJ0eSgnaW5pdCcsIGtleSwgcGFyc2VQcm9wZXJ0eU1ldGhvZEZ1bmN0aW9uKHsgZ2VuZXJhdG9yOiBmYWxzZSB9KSwgdHJ1ZSwgZmFsc2UsIGZhbHNlKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3dVbmV4cGVjdGVkKGxleCgpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZU9iamVjdFNwcmVhZFByb3BlcnR5KCkge1xuICAgICAgICB2YXIgbWFya2VyID0gbWFya2VyQ3JlYXRlKCk7XG4gICAgICAgIGV4cGVjdCgnLi4uJyk7XG4gICAgICAgIHJldHVybiBtYXJrZXJBcHBseShtYXJrZXIsIGRlbGVnYXRlLmNyZWF0ZVNwcmVhZFByb3BlcnR5KHBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24oKSkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlT2JqZWN0SW5pdGlhbGlzZXIoKSB7XG4gICAgICAgIHZhciBwcm9wZXJ0aWVzID0gW10sIHByb3BlcnR5LCBuYW1lLCBrZXksIGtpbmQsIG1hcCA9IHt9LCB0b1N0cmluZyA9IFN0cmluZyxcbiAgICAgICAgICAgIG1hcmtlciA9IG1hcmtlckNyZWF0ZSgpO1xuXG4gICAgICAgIGV4cGVjdCgneycpO1xuXG4gICAgICAgIHdoaWxlICghbWF0Y2goJ30nKSkge1xuICAgICAgICAgICAgaWYgKG1hdGNoKCcuLi4nKSkge1xuICAgICAgICAgICAgICAgIHByb3BlcnR5ID0gcGFyc2VPYmplY3RTcHJlYWRQcm9wZXJ0eSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eSA9IHBhcnNlT2JqZWN0UHJvcGVydHkoKTtcblxuICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0eS5rZXkudHlwZSA9PT0gU3ludGF4LklkZW50aWZpZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZSA9IHByb3BlcnR5LmtleS5uYW1lO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWUgPSB0b1N0cmluZyhwcm9wZXJ0eS5rZXkudmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBraW5kID0gKHByb3BlcnR5LmtpbmQgPT09ICdpbml0JykgPyBQcm9wZXJ0eUtpbmQuRGF0YSA6IChwcm9wZXJ0eS5raW5kID09PSAnZ2V0JykgPyBQcm9wZXJ0eUtpbmQuR2V0IDogUHJvcGVydHlLaW5kLlNldDtcblxuICAgICAgICAgICAgICAgIGtleSA9ICckJyArIG5hbWU7XG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtYXAsIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hcFtrZXldID09PSBQcm9wZXJ0eUtpbmQuRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0cmljdCAmJiBraW5kID09PSBQcm9wZXJ0eUtpbmQuRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93RXJyb3JUb2xlcmFudCh7fSwgTWVzc2FnZXMuU3RyaWN0RHVwbGljYXRlUHJvcGVydHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChraW5kICE9PSBQcm9wZXJ0eUtpbmQuRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93RXJyb3JUb2xlcmFudCh7fSwgTWVzc2FnZXMuQWNjZXNzb3JEYXRhUHJvcGVydHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtpbmQgPT09IFByb3BlcnR5S2luZC5EYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3dFcnJvclRvbGVyYW50KHt9LCBNZXNzYWdlcy5BY2Nlc3NvckRhdGFQcm9wZXJ0eSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hcFtrZXldICYga2luZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93RXJyb3JUb2xlcmFudCh7fSwgTWVzc2FnZXMuQWNjZXNzb3JHZXRTZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1hcFtrZXldIHw9IGtpbmQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbWFwW2tleV0gPSBraW5kO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcHJvcGVydGllcy5wdXNoKHByb3BlcnR5KTtcblxuICAgICAgICAgICAgaWYgKCFtYXRjaCgnfScpKSB7XG4gICAgICAgICAgICAgICAgZXhwZWN0KCcsJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBleHBlY3QoJ30nKTtcblxuICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVPYmplY3RFeHByZXNzaW9uKHByb3BlcnRpZXMpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZVRlbXBsYXRlRWxlbWVudChvcHRpb24pIHtcbiAgICAgICAgdmFyIG1hcmtlciA9IG1hcmtlckNyZWF0ZSgpLFxuICAgICAgICAgICAgdG9rZW4gPSBzY2FuVGVtcGxhdGVFbGVtZW50KG9wdGlvbik7XG4gICAgICAgIGlmIChzdHJpY3QgJiYgdG9rZW4ub2N0YWwpIHtcbiAgICAgICAgICAgIHRocm93RXJyb3IodG9rZW4sIE1lc3NhZ2VzLlN0cmljdE9jdGFsTGl0ZXJhbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1hcmtlckFwcGx5KG1hcmtlciwgZGVsZWdhdGUuY3JlYXRlVGVtcGxhdGVFbGVtZW50KHsgcmF3OiB0b2tlbi52YWx1ZS5yYXcsIGNvb2tlZDogdG9rZW4udmFsdWUuY29va2VkIH0sIHRva2VuLnRhaWwpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZVRlbXBsYXRlTGl0ZXJhbCgpIHtcbiAgICAgICAgdmFyIHF1YXNpLCBxdWFzaXMsIGV4cHJlc3Npb25zLCBtYXJrZXIgPSBtYXJrZXJDcmVhdGUoKTtcblxuICAgICAgICBxdWFzaSA9IHBhcnNlVGVtcGxhdGVFbGVtZW50KHsgaGVhZDogdHJ1ZSB9KTtcbiAgICAgICAgcXVhc2lzID0gWyBxdWFzaSBdO1xuICAgICAgICBleHByZXNzaW9ucyA9IFtdO1xuXG4gICAgICAgIHdoaWxlICghcXVhc2kudGFpbCkge1xuICAgICAgICAgICAgZXhwcmVzc2lvbnMucHVzaChwYXJzZUV4cHJlc3Npb24oKSk7XG4gICAgICAgICAgICBxdWFzaSA9IHBhcnNlVGVtcGxhdGVFbGVtZW50KHsgaGVhZDogZmFsc2UgfSk7XG4gICAgICAgICAgICBxdWFzaXMucHVzaChxdWFzaSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVUZW1wbGF0ZUxpdGVyYWwocXVhc2lzLCBleHByZXNzaW9ucykpO1xuICAgIH1cblxuICAgIC8vIDExLjEuNiBUaGUgR3JvdXBpbmcgT3BlcmF0b3JcblxuICAgIGZ1bmN0aW9uIHBhcnNlR3JvdXBFeHByZXNzaW9uKCkge1xuICAgICAgICB2YXIgZXhwcjtcblxuICAgICAgICBleHBlY3QoJygnKTtcblxuICAgICAgICArK3N0YXRlLnBhcmVudGhlc2l6ZWRDb3VudDtcblxuICAgICAgICBleHByID0gcGFyc2VFeHByZXNzaW9uKCk7XG5cbiAgICAgICAgZXhwZWN0KCcpJyk7XG5cbiAgICAgICAgcmV0dXJuIGV4cHI7XG4gICAgfVxuXG5cbiAgICAvLyAxMS4xIFByaW1hcnkgRXhwcmVzc2lvbnNcblxuICAgIGZ1bmN0aW9uIHBhcnNlUHJpbWFyeUV4cHJlc3Npb24oKSB7XG4gICAgICAgIHZhciBtYXJrZXIsIHR5cGUsIHRva2VuLCBleHByO1xuXG4gICAgICAgIHR5cGUgPSBsb29rYWhlYWQudHlwZTtcblxuICAgICAgICBpZiAodHlwZSA9PT0gVG9rZW4uSWRlbnRpZmllcikge1xuICAgICAgICAgICAgbWFya2VyID0gbWFya2VyQ3JlYXRlKCk7XG4gICAgICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVJZGVudGlmaWVyKGxleCgpLnZhbHVlKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZSA9PT0gVG9rZW4uU3RyaW5nTGl0ZXJhbCB8fCB0eXBlID09PSBUb2tlbi5OdW1lcmljTGl0ZXJhbCkge1xuICAgICAgICAgICAgaWYgKHN0cmljdCAmJiBsb29rYWhlYWQub2N0YWwpIHtcbiAgICAgICAgICAgICAgICB0aHJvd0Vycm9yVG9sZXJhbnQobG9va2FoZWFkLCBNZXNzYWdlcy5TdHJpY3RPY3RhbExpdGVyYWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWFya2VyID0gbWFya2VyQ3JlYXRlKCk7XG4gICAgICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVMaXRlcmFsKGxleCgpKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZSA9PT0gVG9rZW4uS2V5d29yZCkge1xuICAgICAgICAgICAgaWYgKG1hdGNoS2V5d29yZCgndGhpcycpKSB7XG4gICAgICAgICAgICAgICAgbWFya2VyID0gbWFya2VyQ3JlYXRlKCk7XG4gICAgICAgICAgICAgICAgbGV4KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hcmtlckFwcGx5KG1hcmtlciwgZGVsZWdhdGUuY3JlYXRlVGhpc0V4cHJlc3Npb24oKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChtYXRjaEtleXdvcmQoJ2Z1bmN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VGdW5jdGlvbkV4cHJlc3Npb24oKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG1hdGNoS2V5d29yZCgnY2xhc3MnKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUNsYXNzRXhwcmVzc2lvbigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobWF0Y2hLZXl3b3JkKCdzdXBlcicpKSB7XG4gICAgICAgICAgICAgICAgbWFya2VyID0gbWFya2VyQ3JlYXRlKCk7XG4gICAgICAgICAgICAgICAgbGV4KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hcmtlckFwcGx5KG1hcmtlciwgZGVsZWdhdGUuY3JlYXRlSWRlbnRpZmllcignc3VwZXInKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZSA9PT0gVG9rZW4uQm9vbGVhbkxpdGVyYWwpIHtcbiAgICAgICAgICAgIG1hcmtlciA9IG1hcmtlckNyZWF0ZSgpO1xuICAgICAgICAgICAgdG9rZW4gPSBsZXgoKTtcbiAgICAgICAgICAgIHRva2VuLnZhbHVlID0gKHRva2VuLnZhbHVlID09PSAndHJ1ZScpO1xuICAgICAgICAgICAgcmV0dXJuIG1hcmtlckFwcGx5KG1hcmtlciwgZGVsZWdhdGUuY3JlYXRlTGl0ZXJhbCh0b2tlbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGUgPT09IFRva2VuLk51bGxMaXRlcmFsKSB7XG4gICAgICAgICAgICBtYXJrZXIgPSBtYXJrZXJDcmVhdGUoKTtcbiAgICAgICAgICAgIHRva2VuID0gbGV4KCk7XG4gICAgICAgICAgICB0b2tlbi52YWx1ZSA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVMaXRlcmFsKHRva2VuKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWF0Y2goJ1snKSkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlQXJyYXlJbml0aWFsaXNlcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1hdGNoKCd7JykpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZU9iamVjdEluaXRpYWxpc2VyKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWF0Y2goJygnKSkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlR3JvdXBFeHByZXNzaW9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWF0Y2goJy8nKSB8fCBtYXRjaCgnLz0nKSkge1xuICAgICAgICAgICAgbWFya2VyID0gbWFya2VyQ3JlYXRlKCk7XG4gICAgICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVMaXRlcmFsKHNjYW5SZWdFeHAoKSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGUgPT09IFRva2VuLlRlbXBsYXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VUZW1wbGF0ZUxpdGVyYWwoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtYXRjaCgnPCcpKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VYSlNFbGVtZW50KCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvd1VuZXhwZWN0ZWQobGV4KCkpO1xuICAgIH1cblxuICAgIC8vIDExLjIgTGVmdC1IYW5kLVNpZGUgRXhwcmVzc2lvbnNcblxuICAgIGZ1bmN0aW9uIHBhcnNlQXJndW1lbnRzKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBhcmc7XG5cbiAgICAgICAgZXhwZWN0KCcoJyk7XG5cbiAgICAgICAgaWYgKCFtYXRjaCgnKScpKSB7XG4gICAgICAgICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBhcmcgPSBwYXJzZVNwcmVhZE9yQXNzaWdubWVudEV4cHJlc3Npb24oKTtcbiAgICAgICAgICAgICAgICBhcmdzLnB1c2goYXJnKTtcblxuICAgICAgICAgICAgICAgIGlmIChtYXRjaCgnKScpKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYXJnLnR5cGUgPT09IFN5bnRheC5TcHJlYWRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93RXJyb3Ioe30sIE1lc3NhZ2VzLkVsZW1lbnRBZnRlclNwcmVhZEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGV4cGVjdCgnLCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZXhwZWN0KCcpJyk7XG5cbiAgICAgICAgcmV0dXJuIGFyZ3M7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VTcHJlYWRPckFzc2lnbm1lbnRFeHByZXNzaW9uKCkge1xuICAgICAgICBpZiAobWF0Y2goJy4uLicpKSB7XG4gICAgICAgICAgICB2YXIgbWFya2VyID0gbWFya2VyQ3JlYXRlKCk7XG4gICAgICAgICAgICBsZXgoKTtcbiAgICAgICAgICAgIHJldHVybiBtYXJrZXJBcHBseShtYXJrZXIsIGRlbGVnYXRlLmNyZWF0ZVNwcmVhZEVsZW1lbnQocGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbigpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24oKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZU5vbkNvbXB1dGVkUHJvcGVydHkoKSB7XG4gICAgICAgIHZhciBtYXJrZXIgPSBtYXJrZXJDcmVhdGUoKSxcbiAgICAgICAgICAgIHRva2VuID0gbGV4KCk7XG5cbiAgICAgICAgaWYgKCFpc0lkZW50aWZpZXJOYW1lKHRva2VuKSkge1xuICAgICAgICAgICAgdGhyb3dVbmV4cGVjdGVkKHRva2VuKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtYXJrZXJBcHBseShtYXJrZXIsIGRlbGVnYXRlLmNyZWF0ZUlkZW50aWZpZXIodG9rZW4udmFsdWUpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZU5vbkNvbXB1dGVkTWVtYmVyKCkge1xuICAgICAgICBleHBlY3QoJy4nKTtcblxuICAgICAgICByZXR1cm4gcGFyc2VOb25Db21wdXRlZFByb3BlcnR5KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VDb21wdXRlZE1lbWJlcigpIHtcbiAgICAgICAgdmFyIGV4cHI7XG5cbiAgICAgICAgZXhwZWN0KCdbJyk7XG5cbiAgICAgICAgZXhwciA9IHBhcnNlRXhwcmVzc2lvbigpO1xuXG4gICAgICAgIGV4cGVjdCgnXScpO1xuXG4gICAgICAgIHJldHVybiBleHByO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlTmV3RXhwcmVzc2lvbigpIHtcbiAgICAgICAgdmFyIGNhbGxlZSwgYXJncywgbWFya2VyID0gbWFya2VyQ3JlYXRlKCk7XG5cbiAgICAgICAgZXhwZWN0S2V5d29yZCgnbmV3Jyk7XG4gICAgICAgIGNhbGxlZSA9IHBhcnNlTGVmdEhhbmRTaWRlRXhwcmVzc2lvbigpO1xuICAgICAgICBhcmdzID0gbWF0Y2goJygnKSA/IHBhcnNlQXJndW1lbnRzKCkgOiBbXTtcblxuICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVOZXdFeHByZXNzaW9uKGNhbGxlZSwgYXJncykpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlTGVmdEhhbmRTaWRlRXhwcmVzc2lvbkFsbG93Q2FsbCgpIHtcbiAgICAgICAgdmFyIGV4cHIsIGFyZ3MsIG1hcmtlciA9IG1hcmtlckNyZWF0ZSgpO1xuXG4gICAgICAgIGV4cHIgPSBtYXRjaEtleXdvcmQoJ25ldycpID8gcGFyc2VOZXdFeHByZXNzaW9uKCkgOiBwYXJzZVByaW1hcnlFeHByZXNzaW9uKCk7XG5cbiAgICAgICAgd2hpbGUgKG1hdGNoKCcuJykgfHwgbWF0Y2goJ1snKSB8fCBtYXRjaCgnKCcpIHx8IGxvb2thaGVhZC50eXBlID09PSBUb2tlbi5UZW1wbGF0ZSkge1xuICAgICAgICAgICAgaWYgKG1hdGNoKCcoJykpIHtcbiAgICAgICAgICAgICAgICBhcmdzID0gcGFyc2VBcmd1bWVudHMoKTtcbiAgICAgICAgICAgICAgICBleHByID0gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVDYWxsRXhwcmVzc2lvbihleHByLCBhcmdzKSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoKCdbJykpIHtcbiAgICAgICAgICAgICAgICBleHByID0gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVNZW1iZXJFeHByZXNzaW9uKCdbJywgZXhwciwgcGFyc2VDb21wdXRlZE1lbWJlcigpKSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoKCcuJykpIHtcbiAgICAgICAgICAgICAgICBleHByID0gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVNZW1iZXJFeHByZXNzaW9uKCcuJywgZXhwciwgcGFyc2VOb25Db21wdXRlZE1lbWJlcigpKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGV4cHIgPSBtYXJrZXJBcHBseShtYXJrZXIsIGRlbGVnYXRlLmNyZWF0ZVRhZ2dlZFRlbXBsYXRlRXhwcmVzc2lvbihleHByLCBwYXJzZVRlbXBsYXRlTGl0ZXJhbCgpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZXhwcjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZUxlZnRIYW5kU2lkZUV4cHJlc3Npb24oKSB7XG4gICAgICAgIHZhciBleHByLCBtYXJrZXIgPSBtYXJrZXJDcmVhdGUoKTtcblxuICAgICAgICBleHByID0gbWF0Y2hLZXl3b3JkKCduZXcnKSA/IHBhcnNlTmV3RXhwcmVzc2lvbigpIDogcGFyc2VQcmltYXJ5RXhwcmVzc2lvbigpO1xuXG4gICAgICAgIHdoaWxlIChtYXRjaCgnLicpIHx8IG1hdGNoKCdbJykgfHwgbG9va2FoZWFkLnR5cGUgPT09IFRva2VuLlRlbXBsYXRlKSB7XG4gICAgICAgICAgICBpZiAobWF0Y2goJ1snKSkge1xuICAgICAgICAgICAgICAgIGV4cHIgPSBtYXJrZXJBcHBseShtYXJrZXIsIGRlbGVnYXRlLmNyZWF0ZU1lbWJlckV4cHJlc3Npb24oJ1snLCBleHByLCBwYXJzZUNvbXB1dGVkTWVtYmVyKCkpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2goJy4nKSkge1xuICAgICAgICAgICAgICAgIGV4cHIgPSBtYXJrZXJBcHBseShtYXJrZXIsIGRlbGVnYXRlLmNyZWF0ZU1lbWJlckV4cHJlc3Npb24oJy4nLCBleHByLCBwYXJzZU5vbkNvbXB1dGVkTWVtYmVyKCkpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZXhwciA9IG1hcmtlckFwcGx5KG1hcmtlciwgZGVsZWdhdGUuY3JlYXRlVGFnZ2VkVGVtcGxhdGVFeHByZXNzaW9uKGV4cHIsIHBhcnNlVGVtcGxhdGVMaXRlcmFsKCkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBleHByO1xuICAgIH1cblxuICAgIC8vIDExLjMgUG9zdGZpeCBFeHByZXNzaW9uc1xuXG4gICAgZnVuY3Rpb24gcGFyc2VQb3N0Zml4RXhwcmVzc2lvbigpIHtcbiAgICAgICAgdmFyIG1hcmtlciA9IG1hcmtlckNyZWF0ZSgpLFxuICAgICAgICAgICAgZXhwciA9IHBhcnNlTGVmdEhhbmRTaWRlRXhwcmVzc2lvbkFsbG93Q2FsbCgpLFxuICAgICAgICAgICAgdG9rZW47XG5cbiAgICAgICAgaWYgKGxvb2thaGVhZC50eXBlICE9PSBUb2tlbi5QdW5jdHVhdG9yKSB7XG4gICAgICAgICAgICByZXR1cm4gZXhwcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgobWF0Y2goJysrJykgfHwgbWF0Y2goJy0tJykpICYmICFwZWVrTGluZVRlcm1pbmF0b3IoKSkge1xuICAgICAgICAgICAgLy8gMTEuMy4xLCAxMS4zLjJcbiAgICAgICAgICAgIGlmIChzdHJpY3QgJiYgZXhwci50eXBlID09PSBTeW50YXguSWRlbnRpZmllciAmJiBpc1Jlc3RyaWN0ZWRXb3JkKGV4cHIubmFtZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvd0Vycm9yVG9sZXJhbnQoe30sIE1lc3NhZ2VzLlN0cmljdExIU1Bvc3RmaXgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWlzTGVmdEhhbmRTaWRlKGV4cHIpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3dFcnJvcih7fSwgTWVzc2FnZXMuSW52YWxpZExIU0luQXNzaWdubWVudCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRva2VuID0gbGV4KCk7XG4gICAgICAgICAgICBleHByID0gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVQb3N0Zml4RXhwcmVzc2lvbih0b2tlbi52YWx1ZSwgZXhwcikpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGV4cHI7XG4gICAgfVxuXG4gICAgLy8gMTEuNCBVbmFyeSBPcGVyYXRvcnNcblxuICAgIGZ1bmN0aW9uIHBhcnNlVW5hcnlFeHByZXNzaW9uKCkge1xuICAgICAgICB2YXIgbWFya2VyLCB0b2tlbiwgZXhwcjtcblxuICAgICAgICBpZiAobG9va2FoZWFkLnR5cGUgIT09IFRva2VuLlB1bmN0dWF0b3IgJiYgbG9va2FoZWFkLnR5cGUgIT09IFRva2VuLktleXdvcmQpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZVBvc3RmaXhFeHByZXNzaW9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWF0Y2goJysrJykgfHwgbWF0Y2goJy0tJykpIHtcbiAgICAgICAgICAgIG1hcmtlciA9IG1hcmtlckNyZWF0ZSgpO1xuICAgICAgICAgICAgdG9rZW4gPSBsZXgoKTtcbiAgICAgICAgICAgIGV4cHIgPSBwYXJzZVVuYXJ5RXhwcmVzc2lvbigpO1xuICAgICAgICAgICAgLy8gMTEuNC40LCAxMS40LjVcbiAgICAgICAgICAgIGlmIChzdHJpY3QgJiYgZXhwci50eXBlID09PSBTeW50YXguSWRlbnRpZmllciAmJiBpc1Jlc3RyaWN0ZWRXb3JkKGV4cHIubmFtZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvd0Vycm9yVG9sZXJhbnQoe30sIE1lc3NhZ2VzLlN0cmljdExIU1ByZWZpeCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghaXNMZWZ0SGFuZFNpZGUoZXhwcikpIHtcbiAgICAgICAgICAgICAgICB0aHJvd0Vycm9yKHt9LCBNZXNzYWdlcy5JbnZhbGlkTEhTSW5Bc3NpZ25tZW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG1hcmtlckFwcGx5KG1hcmtlciwgZGVsZWdhdGUuY3JlYXRlVW5hcnlFeHByZXNzaW9uKHRva2VuLnZhbHVlLCBleHByKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWF0Y2goJysnKSB8fCBtYXRjaCgnLScpIHx8IG1hdGNoKCd+JykgfHwgbWF0Y2goJyEnKSkge1xuICAgICAgICAgICAgbWFya2VyID0gbWFya2VyQ3JlYXRlKCk7XG4gICAgICAgICAgICB0b2tlbiA9IGxleCgpO1xuICAgICAgICAgICAgZXhwciA9IHBhcnNlVW5hcnlFeHByZXNzaW9uKCk7XG4gICAgICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVVbmFyeUV4cHJlc3Npb24odG9rZW4udmFsdWUsIGV4cHIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtYXRjaEtleXdvcmQoJ2RlbGV0ZScpIHx8IG1hdGNoS2V5d29yZCgndm9pZCcpIHx8IG1hdGNoS2V5d29yZCgndHlwZW9mJykpIHtcbiAgICAgICAgICAgIG1hcmtlciA9IG1hcmtlckNyZWF0ZSgpO1xuICAgICAgICAgICAgdG9rZW4gPSBsZXgoKTtcbiAgICAgICAgICAgIGV4cHIgPSBwYXJzZVVuYXJ5RXhwcmVzc2lvbigpO1xuICAgICAgICAgICAgZXhwciA9IG1hcmtlckFwcGx5KG1hcmtlciwgZGVsZWdhdGUuY3JlYXRlVW5hcnlFeHByZXNzaW9uKHRva2VuLnZhbHVlLCBleHByKSk7XG4gICAgICAgICAgICBpZiAoc3RyaWN0ICYmIGV4cHIub3BlcmF0b3IgPT09ICdkZWxldGUnICYmIGV4cHIuYXJndW1lbnQudHlwZSA9PT0gU3ludGF4LklkZW50aWZpZXIpIHtcbiAgICAgICAgICAgICAgICB0aHJvd0Vycm9yVG9sZXJhbnQoe30sIE1lc3NhZ2VzLlN0cmljdERlbGV0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZXhwcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwYXJzZVBvc3RmaXhFeHByZXNzaW9uKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYmluYXJ5UHJlY2VkZW5jZSh0b2tlbiwgYWxsb3dJbikge1xuICAgICAgICB2YXIgcHJlYyA9IDA7XG5cbiAgICAgICAgaWYgKHRva2VuLnR5cGUgIT09IFRva2VuLlB1bmN0dWF0b3IgJiYgdG9rZW4udHlwZSAhPT0gVG9rZW4uS2V5d29yZCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKHRva2VuLnZhbHVlKSB7XG4gICAgICAgIGNhc2UgJ3x8JzpcbiAgICAgICAgICAgIHByZWMgPSAxO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnJiYnOlxuICAgICAgICAgICAgcHJlYyA9IDI7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICd8JzpcbiAgICAgICAgICAgIHByZWMgPSAzO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnXic6XG4gICAgICAgICAgICBwcmVjID0gNDtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJyYnOlxuICAgICAgICAgICAgcHJlYyA9IDU7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICc9PSc6XG4gICAgICAgIGNhc2UgJyE9JzpcbiAgICAgICAgY2FzZSAnPT09JzpcbiAgICAgICAgY2FzZSAnIT09JzpcbiAgICAgICAgICAgIHByZWMgPSA2O1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnPCc6XG4gICAgICAgIGNhc2UgJz4nOlxuICAgICAgICBjYXNlICc8PSc6XG4gICAgICAgIGNhc2UgJz49JzpcbiAgICAgICAgY2FzZSAnaW5zdGFuY2VvZic6XG4gICAgICAgICAgICBwcmVjID0gNztcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2luJzpcbiAgICAgICAgICAgIHByZWMgPSBhbGxvd0luID8gNyA6IDA7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICc8PCc6XG4gICAgICAgIGNhc2UgJz4+JzpcbiAgICAgICAgY2FzZSAnPj4+JzpcbiAgICAgICAgICAgIHByZWMgPSA4O1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnKyc6XG4gICAgICAgIGNhc2UgJy0nOlxuICAgICAgICAgICAgcHJlYyA9IDk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICcqJzpcbiAgICAgICAgY2FzZSAnLyc6XG4gICAgICAgIGNhc2UgJyUnOlxuICAgICAgICAgICAgcHJlYyA9IDExO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHByZWM7XG4gICAgfVxuXG4gICAgLy8gMTEuNSBNdWx0aXBsaWNhdGl2ZSBPcGVyYXRvcnNcbiAgICAvLyAxMS42IEFkZGl0aXZlIE9wZXJhdG9yc1xuICAgIC8vIDExLjcgQml0d2lzZSBTaGlmdCBPcGVyYXRvcnNcbiAgICAvLyAxMS44IFJlbGF0aW9uYWwgT3BlcmF0b3JzXG4gICAgLy8gMTEuOSBFcXVhbGl0eSBPcGVyYXRvcnNcbiAgICAvLyAxMS4xMCBCaW5hcnkgQml0d2lzZSBPcGVyYXRvcnNcbiAgICAvLyAxMS4xMSBCaW5hcnkgTG9naWNhbCBPcGVyYXRvcnNcblxuICAgIGZ1bmN0aW9uIHBhcnNlQmluYXJ5RXhwcmVzc2lvbigpIHtcbiAgICAgICAgdmFyIGV4cHIsIHRva2VuLCBwcmVjLCBwcmV2aW91c0FsbG93SW4sIHN0YWNrLCByaWdodCwgb3BlcmF0b3IsIGxlZnQsIGksXG4gICAgICAgICAgICBtYXJrZXIsIG1hcmtlcnM7XG5cbiAgICAgICAgcHJldmlvdXNBbGxvd0luID0gc3RhdGUuYWxsb3dJbjtcbiAgICAgICAgc3RhdGUuYWxsb3dJbiA9IHRydWU7XG5cbiAgICAgICAgbWFya2VyID0gbWFya2VyQ3JlYXRlKCk7XG4gICAgICAgIGxlZnQgPSBwYXJzZVVuYXJ5RXhwcmVzc2lvbigpO1xuXG4gICAgICAgIHRva2VuID0gbG9va2FoZWFkO1xuICAgICAgICBwcmVjID0gYmluYXJ5UHJlY2VkZW5jZSh0b2tlbiwgcHJldmlvdXNBbGxvd0luKTtcbiAgICAgICAgaWYgKHByZWMgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBsZWZ0O1xuICAgICAgICB9XG4gICAgICAgIHRva2VuLnByZWMgPSBwcmVjO1xuICAgICAgICBsZXgoKTtcblxuICAgICAgICBtYXJrZXJzID0gW21hcmtlciwgbWFya2VyQ3JlYXRlKCldO1xuICAgICAgICByaWdodCA9IHBhcnNlVW5hcnlFeHByZXNzaW9uKCk7XG5cbiAgICAgICAgc3RhY2sgPSBbbGVmdCwgdG9rZW4sIHJpZ2h0XTtcblxuICAgICAgICB3aGlsZSAoKHByZWMgPSBiaW5hcnlQcmVjZWRlbmNlKGxvb2thaGVhZCwgcHJldmlvdXNBbGxvd0luKSkgPiAwKSB7XG5cbiAgICAgICAgICAgIC8vIFJlZHVjZTogbWFrZSBhIGJpbmFyeSBleHByZXNzaW9uIGZyb20gdGhlIHRocmVlIHRvcG1vc3QgZW50cmllcy5cbiAgICAgICAgICAgIHdoaWxlICgoc3RhY2subGVuZ3RoID4gMikgJiYgKHByZWMgPD0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMl0ucHJlYykpIHtcbiAgICAgICAgICAgICAgICByaWdodCA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgIG9wZXJhdG9yID0gc3RhY2sucG9wKCkudmFsdWU7XG4gICAgICAgICAgICAgICAgbGVmdCA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgIGV4cHIgPSBkZWxlZ2F0ZS5jcmVhdGVCaW5hcnlFeHByZXNzaW9uKG9wZXJhdG9yLCBsZWZ0LCByaWdodCk7XG4gICAgICAgICAgICAgICAgbWFya2Vycy5wb3AoKTtcbiAgICAgICAgICAgICAgICBtYXJrZXIgPSBtYXJrZXJzLnBvcCgpO1xuICAgICAgICAgICAgICAgIG1hcmtlckFwcGx5KG1hcmtlciwgZXhwcik7XG4gICAgICAgICAgICAgICAgc3RhY2sucHVzaChleHByKTtcbiAgICAgICAgICAgICAgICBtYXJrZXJzLnB1c2gobWFya2VyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2hpZnQuXG4gICAgICAgICAgICB0b2tlbiA9IGxleCgpO1xuICAgICAgICAgICAgdG9rZW4ucHJlYyA9IHByZWM7XG4gICAgICAgICAgICBzdGFjay5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgIG1hcmtlcnMucHVzaChtYXJrZXJDcmVhdGUoKSk7XG4gICAgICAgICAgICBleHByID0gcGFyc2VVbmFyeUV4cHJlc3Npb24oKTtcbiAgICAgICAgICAgIHN0YWNrLnB1c2goZXhwcik7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZS5hbGxvd0luID0gcHJldmlvdXNBbGxvd0luO1xuXG4gICAgICAgIC8vIEZpbmFsIHJlZHVjZSB0byBjbGVhbi11cCB0aGUgc3RhY2suXG4gICAgICAgIGkgPSBzdGFjay5sZW5ndGggLSAxO1xuICAgICAgICBleHByID0gc3RhY2tbaV07XG4gICAgICAgIG1hcmtlcnMucG9wKCk7XG4gICAgICAgIHdoaWxlIChpID4gMSkge1xuICAgICAgICAgICAgZXhwciA9IGRlbGVnYXRlLmNyZWF0ZUJpbmFyeUV4cHJlc3Npb24oc3RhY2tbaSAtIDFdLnZhbHVlLCBzdGFja1tpIC0gMl0sIGV4cHIpO1xuICAgICAgICAgICAgaSAtPSAyO1xuICAgICAgICAgICAgbWFya2VyID0gbWFya2Vycy5wb3AoKTtcbiAgICAgICAgICAgIG1hcmtlckFwcGx5KG1hcmtlciwgZXhwcik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZXhwcjtcbiAgICB9XG5cblxuICAgIC8vIDExLjEyIENvbmRpdGlvbmFsIE9wZXJhdG9yXG5cbiAgICBmdW5jdGlvbiBwYXJzZUNvbmRpdGlvbmFsRXhwcmVzc2lvbigpIHtcbiAgICAgICAgdmFyIGV4cHIsIHByZXZpb3VzQWxsb3dJbiwgY29uc2VxdWVudCwgYWx0ZXJuYXRlLCBtYXJrZXIgPSBtYXJrZXJDcmVhdGUoKTtcbiAgICAgICAgZXhwciA9IHBhcnNlQmluYXJ5RXhwcmVzc2lvbigpO1xuXG4gICAgICAgIGlmIChtYXRjaCgnPycpKSB7XG4gICAgICAgICAgICBsZXgoKTtcbiAgICAgICAgICAgIHByZXZpb3VzQWxsb3dJbiA9IHN0YXRlLmFsbG93SW47XG4gICAgICAgICAgICBzdGF0ZS5hbGxvd0luID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnNlcXVlbnQgPSBwYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKCk7XG4gICAgICAgICAgICBzdGF0ZS5hbGxvd0luID0gcHJldmlvdXNBbGxvd0luO1xuICAgICAgICAgICAgZXhwZWN0KCc6Jyk7XG4gICAgICAgICAgICBhbHRlcm5hdGUgPSBwYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKCk7XG5cbiAgICAgICAgICAgIGV4cHIgPSBtYXJrZXJBcHBseShtYXJrZXIsIGRlbGVnYXRlLmNyZWF0ZUNvbmRpdGlvbmFsRXhwcmVzc2lvbihleHByLCBjb25zZXF1ZW50LCBhbHRlcm5hdGUpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBleHByO1xuICAgIH1cblxuICAgIC8vIDExLjEzIEFzc2lnbm1lbnQgT3BlcmF0b3JzXG5cbiAgICBmdW5jdGlvbiByZWludGVycHJldEFzQXNzaWdubWVudEJpbmRpbmdQYXR0ZXJuKGV4cHIpIHtcbiAgICAgICAgdmFyIGksIGxlbiwgcHJvcGVydHksIGVsZW1lbnQ7XG5cbiAgICAgICAgaWYgKGV4cHIudHlwZSA9PT0gU3ludGF4Lk9iamVjdEV4cHJlc3Npb24pIHtcbiAgICAgICAgICAgIGV4cHIudHlwZSA9IFN5bnRheC5PYmplY3RQYXR0ZXJuO1xuICAgICAgICAgICAgZm9yIChpID0gMCwgbGVuID0gZXhwci5wcm9wZXJ0aWVzLmxlbmd0aDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgcHJvcGVydHkgPSBleHByLnByb3BlcnRpZXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKHByb3BlcnR5LnR5cGUgPT09IFN5bnRheC5TcHJlYWRQcm9wZXJ0eSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSA8IGxlbiAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93RXJyb3Ioe30sIE1lc3NhZ2VzLlByb3BlcnR5QWZ0ZXJTcHJlYWRQcm9wZXJ0eSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVpbnRlcnByZXRBc0Fzc2lnbm1lbnRCaW5kaW5nUGF0dGVybihwcm9wZXJ0eS5hcmd1bWVudCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BlcnR5LmtpbmQgIT09ICdpbml0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3dFcnJvcih7fSwgTWVzc2FnZXMuSW52YWxpZExIU0luQXNzaWdubWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVpbnRlcnByZXRBc0Fzc2lnbm1lbnRCaW5kaW5nUGF0dGVybihwcm9wZXJ0eS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGV4cHIudHlwZSA9PT0gU3ludGF4LkFycmF5RXhwcmVzc2lvbikge1xuICAgICAgICAgICAgZXhwci50eXBlID0gU3ludGF4LkFycmF5UGF0dGVybjtcbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IGV4cHIuZWxlbWVudHMubGVuZ3RoOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50ID0gZXhwci5lbGVtZW50c1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICByZWludGVycHJldEFzQXNzaWdubWVudEJpbmRpbmdQYXR0ZXJuKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChleHByLnR5cGUgPT09IFN5bnRheC5JZGVudGlmaWVyKSB7XG4gICAgICAgICAgICBpZiAoaXNSZXN0cmljdGVkV29yZChleHByLm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3dFcnJvcih7fSwgTWVzc2FnZXMuSW52YWxpZExIU0luQXNzaWdubWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZXhwci50eXBlID09PSBTeW50YXguU3ByZWFkRWxlbWVudCkge1xuICAgICAgICAgICAgcmVpbnRlcnByZXRBc0Fzc2lnbm1lbnRCaW5kaW5nUGF0dGVybihleHByLmFyZ3VtZW50KTtcbiAgICAgICAgICAgIGlmIChleHByLmFyZ3VtZW50LnR5cGUgPT09IFN5bnRheC5PYmplY3RQYXR0ZXJuKSB7XG4gICAgICAgICAgICAgICAgdGhyb3dFcnJvcih7fSwgTWVzc2FnZXMuT2JqZWN0UGF0dGVybkFzU3ByZWFkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChleHByLnR5cGUgIT09IFN5bnRheC5NZW1iZXJFeHByZXNzaW9uICYmIGV4cHIudHlwZSAhPT0gU3ludGF4LkNhbGxFeHByZXNzaW9uICYmIGV4cHIudHlwZSAhPT0gU3ludGF4Lk5ld0V4cHJlc3Npb24pIHtcbiAgICAgICAgICAgICAgICB0aHJvd0Vycm9yKHt9LCBNZXNzYWdlcy5JbnZhbGlkTEhTSW5Bc3NpZ25tZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gcmVpbnRlcnByZXRBc0Rlc3RydWN0dXJlZFBhcmFtZXRlcihvcHRpb25zLCBleHByKSB7XG4gICAgICAgIHZhciBpLCBsZW4sIHByb3BlcnR5LCBlbGVtZW50O1xuXG4gICAgICAgIGlmIChleHByLnR5cGUgPT09IFN5bnRheC5PYmplY3RFeHByZXNzaW9uKSB7XG4gICAgICAgICAgICBleHByLnR5cGUgPSBTeW50YXguT2JqZWN0UGF0dGVybjtcbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IGV4cHIucHJvcGVydGllcy5sZW5ndGg7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIHByb3BlcnR5ID0gZXhwci5wcm9wZXJ0aWVzW2ldO1xuICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0eS50eXBlID09PSBTeW50YXguU3ByZWFkUHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPCBsZW4gLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvd0Vycm9yKHt9LCBNZXNzYWdlcy5Qcm9wZXJ0eUFmdGVyU3ByZWFkUHJvcGVydHkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlaW50ZXJwcmV0QXNEZXN0cnVjdHVyZWRQYXJhbWV0ZXIob3B0aW9ucywgcHJvcGVydHkuYXJndW1lbnQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0eS5raW5kICE9PSAnaW5pdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93RXJyb3Ioe30sIE1lc3NhZ2VzLkludmFsaWRMSFNJbkZvcm1hbHNMaXN0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZWludGVycHJldEFzRGVzdHJ1Y3R1cmVkUGFyYW1ldGVyKG9wdGlvbnMsIHByb3BlcnR5LnZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZXhwci50eXBlID09PSBTeW50YXguQXJyYXlFeHByZXNzaW9uKSB7XG4gICAgICAgICAgICBleHByLnR5cGUgPSBTeW50YXguQXJyYXlQYXR0ZXJuO1xuICAgICAgICAgICAgZm9yIChpID0gMCwgbGVuID0gZXhwci5lbGVtZW50cy5sZW5ndGg7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBleHByLmVsZW1lbnRzW2ldO1xuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlaW50ZXJwcmV0QXNEZXN0cnVjdHVyZWRQYXJhbWV0ZXIob3B0aW9ucywgZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGV4cHIudHlwZSA9PT0gU3ludGF4LklkZW50aWZpZXIpIHtcbiAgICAgICAgICAgIHZhbGlkYXRlUGFyYW0ob3B0aW9ucywgZXhwciwgZXhwci5uYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChleHByLnR5cGUgIT09IFN5bnRheC5NZW1iZXJFeHByZXNzaW9uKSB7XG4gICAgICAgICAgICAgICAgdGhyb3dFcnJvcih7fSwgTWVzc2FnZXMuSW52YWxpZExIU0luRm9ybWFsc0xpc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVpbnRlcnByZXRBc0NvdmVyRm9ybWFsc0xpc3QoZXhwcmVzc2lvbnMpIHtcbiAgICAgICAgdmFyIGksIGxlbiwgcGFyYW0sIHBhcmFtcywgZGVmYXVsdHMsIGRlZmF1bHRDb3VudCwgb3B0aW9ucywgcmVzdDtcblxuICAgICAgICBwYXJhbXMgPSBbXTtcbiAgICAgICAgZGVmYXVsdHMgPSBbXTtcbiAgICAgICAgZGVmYXVsdENvdW50ID0gMDtcbiAgICAgICAgcmVzdCA9IG51bGw7XG4gICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBwYXJhbVNldDoge31cbiAgICAgICAgfTtcblxuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSBleHByZXNzaW9ucy5sZW5ndGg7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgcGFyYW0gPSBleHByZXNzaW9uc1tpXTtcbiAgICAgICAgICAgIGlmIChwYXJhbS50eXBlID09PSBTeW50YXguSWRlbnRpZmllcikge1xuICAgICAgICAgICAgICAgIHBhcmFtcy5wdXNoKHBhcmFtKTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0cy5wdXNoKG51bGwpO1xuICAgICAgICAgICAgICAgIHZhbGlkYXRlUGFyYW0ob3B0aW9ucywgcGFyYW0sIHBhcmFtLm5hbWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJhbS50eXBlID09PSBTeW50YXguT2JqZWN0RXhwcmVzc2lvbiB8fCBwYXJhbS50eXBlID09PSBTeW50YXguQXJyYXlFeHByZXNzaW9uKSB7XG4gICAgICAgICAgICAgICAgcmVpbnRlcnByZXRBc0Rlc3RydWN0dXJlZFBhcmFtZXRlcihvcHRpb25zLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgcGFyYW1zLnB1c2gocGFyYW0pO1xuICAgICAgICAgICAgICAgIGRlZmF1bHRzLnB1c2gobnVsbCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBhcmFtLnR5cGUgPT09IFN5bnRheC5TcHJlYWRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGkgPT09IGxlbiAtIDEsICdJdCBpcyBndWFyYW50ZWVkIHRoYXQgU3ByZWFkRWxlbWVudCBpcyBsYXN0IGVsZW1lbnQgYnkgcGFyc2VFeHByZXNzaW9uJyk7XG4gICAgICAgICAgICAgICAgcmVpbnRlcnByZXRBc0Rlc3RydWN0dXJlZFBhcmFtZXRlcihvcHRpb25zLCBwYXJhbS5hcmd1bWVudCk7XG4gICAgICAgICAgICAgICAgcmVzdCA9IHBhcmFtLmFyZ3VtZW50O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJhbS50eXBlID09PSBTeW50YXguQXNzaWdubWVudEV4cHJlc3Npb24pIHtcbiAgICAgICAgICAgICAgICBwYXJhbXMucHVzaChwYXJhbS5sZWZ0KTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0cy5wdXNoKHBhcmFtLnJpZ2h0KTtcbiAgICAgICAgICAgICAgICArK2RlZmF1bHRDb3VudDtcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZVBhcmFtKG9wdGlvbnMsIHBhcmFtLmxlZnQsIHBhcmFtLmxlZnQubmFtZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubWVzc2FnZSA9PT0gTWVzc2FnZXMuU3RyaWN0UGFyYW1EdXBlKSB7XG4gICAgICAgICAgICB0aHJvd0Vycm9yKFxuICAgICAgICAgICAgICAgIHN0cmljdCA/IG9wdGlvbnMuc3RyaWN0ZWQgOiBvcHRpb25zLmZpcnN0UmVzdHJpY3RlZCxcbiAgICAgICAgICAgICAgICBvcHRpb25zLm1lc3NhZ2VcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGVmYXVsdENvdW50ID09PSAwKSB7XG4gICAgICAgICAgICBkZWZhdWx0cyA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBhcmFtczogcGFyYW1zLFxuICAgICAgICAgICAgZGVmYXVsdHM6IGRlZmF1bHRzLFxuICAgICAgICAgICAgcmVzdDogcmVzdCxcbiAgICAgICAgICAgIHN0cmljdGVkOiBvcHRpb25zLnN0cmljdGVkLFxuICAgICAgICAgICAgZmlyc3RSZXN0cmljdGVkOiBvcHRpb25zLmZpcnN0UmVzdHJpY3RlZCxcbiAgICAgICAgICAgIG1lc3NhZ2U6IG9wdGlvbnMubWVzc2FnZVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlQXJyb3dGdW5jdGlvbkV4cHJlc3Npb24ob3B0aW9ucywgbWFya2VyKSB7XG4gICAgICAgIHZhciBwcmV2aW91c1N0cmljdCwgcHJldmlvdXNZaWVsZEFsbG93ZWQsIGJvZHk7XG5cbiAgICAgICAgZXhwZWN0KCc9PicpO1xuXG4gICAgICAgIHByZXZpb3VzU3RyaWN0ID0gc3RyaWN0O1xuICAgICAgICBwcmV2aW91c1lpZWxkQWxsb3dlZCA9IHN0YXRlLnlpZWxkQWxsb3dlZDtcbiAgICAgICAgc3RhdGUueWllbGRBbGxvd2VkID0gZmFsc2U7XG4gICAgICAgIGJvZHkgPSBwYXJzZUNvbmNpc2VCb2R5KCk7XG5cbiAgICAgICAgaWYgKHN0cmljdCAmJiBvcHRpb25zLmZpcnN0UmVzdHJpY3RlZCkge1xuICAgICAgICAgICAgdGhyb3dFcnJvcihvcHRpb25zLmZpcnN0UmVzdHJpY3RlZCwgb3B0aW9ucy5tZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RyaWN0ICYmIG9wdGlvbnMuc3RyaWN0ZWQpIHtcbiAgICAgICAgICAgIHRocm93RXJyb3JUb2xlcmFudChvcHRpb25zLnN0cmljdGVkLCBvcHRpb25zLm1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RyaWN0ID0gcHJldmlvdXNTdHJpY3Q7XG4gICAgICAgIHN0YXRlLnlpZWxkQWxsb3dlZCA9IHByZXZpb3VzWWllbGRBbGxvd2VkO1xuXG4gICAgICAgIHJldHVybiBtYXJrZXJBcHBseShtYXJrZXIsIGRlbGVnYXRlLmNyZWF0ZUFycm93RnVuY3Rpb25FeHByZXNzaW9uKFxuICAgICAgICAgICAgb3B0aW9ucy5wYXJhbXMsXG4gICAgICAgICAgICBvcHRpb25zLmRlZmF1bHRzLFxuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIG9wdGlvbnMucmVzdCxcbiAgICAgICAgICAgIGJvZHkudHlwZSAhPT0gU3ludGF4LkJsb2NrU3RhdGVtZW50XG4gICAgICAgICkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24oKSB7XG4gICAgICAgIHZhciBtYXJrZXIsIGV4cHIsIHRva2VuLCBwYXJhbXMsIG9sZFBhcmVudGhlc2l6ZWRDb3VudDtcblxuICAgICAgICAvLyBOb3RlIHRoYXQgJ3lpZWxkJyBpcyB0cmVhdGVkIGFzIGEga2V5d29yZCBpbiBzdHJpY3QgbW9kZSwgYnV0IGFcbiAgICAgICAgLy8gY29udGV4dHVhbCBrZXl3b3JkIChpZGVudGlmaWVyKSBpbiBub24tc3RyaWN0IG1vZGUsIHNvIHdlIG5lZWRcbiAgICAgICAgLy8gdG8gdXNlIG1hdGNoS2V5d29yZCBhbmQgbWF0Y2hDb250ZXh0dWFsS2V5d29yZCBhcHByb3ByaWF0ZWx5LlxuICAgICAgICBpZiAoKHN0YXRlLnlpZWxkQWxsb3dlZCAmJiBtYXRjaENvbnRleHR1YWxLZXl3b3JkKCd5aWVsZCcpKSB8fCAoc3RyaWN0ICYmIG1hdGNoS2V5d29yZCgneWllbGQnKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZVlpZWxkRXhwcmVzc2lvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgb2xkUGFyZW50aGVzaXplZENvdW50ID0gc3RhdGUucGFyZW50aGVzaXplZENvdW50O1xuXG4gICAgICAgIG1hcmtlciA9IG1hcmtlckNyZWF0ZSgpO1xuXG4gICAgICAgIGlmIChtYXRjaCgnKCcpKSB7XG4gICAgICAgICAgICB0b2tlbiA9IGxvb2thaGVhZDIoKTtcbiAgICAgICAgICAgIGlmICgodG9rZW4udHlwZSA9PT0gVG9rZW4uUHVuY3R1YXRvciAmJiB0b2tlbi52YWx1ZSA9PT0gJyknKSB8fCB0b2tlbi52YWx1ZSA9PT0gJy4uLicpIHtcbiAgICAgICAgICAgICAgICBwYXJhbXMgPSBwYXJzZVBhcmFtcygpO1xuICAgICAgICAgICAgICAgIGlmICghbWF0Y2goJz0+JykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3dVbmV4cGVjdGVkKGxleCgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlQXJyb3dGdW5jdGlvbkV4cHJlc3Npb24ocGFyYW1zLCBtYXJrZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdG9rZW4gPSBsb29rYWhlYWQ7XG4gICAgICAgIGV4cHIgPSBwYXJzZUNvbmRpdGlvbmFsRXhwcmVzc2lvbigpO1xuXG4gICAgICAgIGlmIChtYXRjaCgnPT4nKSAmJlxuICAgICAgICAgICAgICAgIChzdGF0ZS5wYXJlbnRoZXNpemVkQ291bnQgPT09IG9sZFBhcmVudGhlc2l6ZWRDb3VudCB8fFxuICAgICAgICAgICAgICAgIHN0YXRlLnBhcmVudGhlc2l6ZWRDb3VudCA9PT0gKG9sZFBhcmVudGhlc2l6ZWRDb3VudCArIDEpKSkge1xuICAgICAgICAgICAgaWYgKGV4cHIudHlwZSA9PT0gU3ludGF4LklkZW50aWZpZXIpIHtcbiAgICAgICAgICAgICAgICBwYXJhbXMgPSByZWludGVycHJldEFzQ292ZXJGb3JtYWxzTGlzdChbIGV4cHIgXSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGV4cHIudHlwZSA9PT0gU3ludGF4LlNlcXVlbmNlRXhwcmVzc2lvbikge1xuICAgICAgICAgICAgICAgIHBhcmFtcyA9IHJlaW50ZXJwcmV0QXNDb3ZlckZvcm1hbHNMaXN0KGV4cHIuZXhwcmVzc2lvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBhcmFtcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUFycm93RnVuY3Rpb25FeHByZXNzaW9uKHBhcmFtcywgbWFya2VyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtYXRjaEFzc2lnbigpKSB7XG4gICAgICAgICAgICAvLyAxMS4xMy4xXG4gICAgICAgICAgICBpZiAoc3RyaWN0ICYmIGV4cHIudHlwZSA9PT0gU3ludGF4LklkZW50aWZpZXIgJiYgaXNSZXN0cmljdGVkV29yZChleHByLm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3dFcnJvclRvbGVyYW50KHRva2VuLCBNZXNzYWdlcy5TdHJpY3RMSFNBc3NpZ25tZW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRVMubmV4dCBkcmFmIDExLjEzIFJ1bnRpbWUgU2VtYW50aWNzIHN0ZXAgMVxuICAgICAgICAgICAgaWYgKG1hdGNoKCc9JykgJiYgKGV4cHIudHlwZSA9PT0gU3ludGF4Lk9iamVjdEV4cHJlc3Npb24gfHwgZXhwci50eXBlID09PSBTeW50YXguQXJyYXlFeHByZXNzaW9uKSkge1xuICAgICAgICAgICAgICAgIHJlaW50ZXJwcmV0QXNBc3NpZ25tZW50QmluZGluZ1BhdHRlcm4oZXhwcik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFpc0xlZnRIYW5kU2lkZShleHByKSkge1xuICAgICAgICAgICAgICAgIHRocm93RXJyb3Ioe30sIE1lc3NhZ2VzLkludmFsaWRMSFNJbkFzc2lnbm1lbnQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBleHByID0gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVBc3NpZ25tZW50RXhwcmVzc2lvbihsZXgoKS52YWx1ZSwgZXhwciwgcGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbigpKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZXhwcjtcbiAgICB9XG5cbiAgICAvLyAxMS4xNCBDb21tYSBPcGVyYXRvclxuXG4gICAgZnVuY3Rpb24gcGFyc2VFeHByZXNzaW9uKCkge1xuICAgICAgICB2YXIgbWFya2VyLCBleHByLCBleHByZXNzaW9ucywgc2VxdWVuY2UsIGNvdmVyRm9ybWFsc0xpc3QsIHNwcmVhZEZvdW5kLCBvbGRQYXJlbnRoZXNpemVkQ291bnQ7XG5cbiAgICAgICAgb2xkUGFyZW50aGVzaXplZENvdW50ID0gc3RhdGUucGFyZW50aGVzaXplZENvdW50O1xuXG4gICAgICAgIG1hcmtlciA9IG1hcmtlckNyZWF0ZSgpO1xuICAgICAgICBleHByID0gcGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbigpO1xuICAgICAgICBleHByZXNzaW9ucyA9IFsgZXhwciBdO1xuXG4gICAgICAgIGlmIChtYXRjaCgnLCcpKSB7XG4gICAgICAgICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIW1hdGNoKCcsJykpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGV4KCk7XG4gICAgICAgICAgICAgICAgZXhwciA9IHBhcnNlU3ByZWFkT3JBc3NpZ25tZW50RXhwcmVzc2lvbigpO1xuICAgICAgICAgICAgICAgIGV4cHJlc3Npb25zLnB1c2goZXhwcik7XG5cbiAgICAgICAgICAgICAgICBpZiAoZXhwci50eXBlID09PSBTeW50YXguU3ByZWFkRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBzcHJlYWRGb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlmICghbWF0Y2goJyknKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3dFcnJvcih7fSwgTWVzc2FnZXMuRWxlbWVudEFmdGVyU3ByZWFkRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZXF1ZW5jZSA9IG1hcmtlckFwcGx5KG1hcmtlciwgZGVsZWdhdGUuY3JlYXRlU2VxdWVuY2VFeHByZXNzaW9uKGV4cHJlc3Npb25zKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWF0Y2goJz0+JykpIHtcbiAgICAgICAgICAgIC8vIERvIG5vdCBhbGxvdyBuZXN0ZWQgcGFyZW50aGVzZXMgb24gdGhlIExIUyBvZiB0aGUgPT4uXG4gICAgICAgICAgICBpZiAoc3RhdGUucGFyZW50aGVzaXplZENvdW50ID09PSBvbGRQYXJlbnRoZXNpemVkQ291bnQgfHwgc3RhdGUucGFyZW50aGVzaXplZENvdW50ID09PSAob2xkUGFyZW50aGVzaXplZENvdW50ICsgMSkpIHtcbiAgICAgICAgICAgICAgICBleHByID0gZXhwci50eXBlID09PSBTeW50YXguU2VxdWVuY2VFeHByZXNzaW9uID8gZXhwci5leHByZXNzaW9ucyA6IGV4cHJlc3Npb25zO1xuICAgICAgICAgICAgICAgIGNvdmVyRm9ybWFsc0xpc3QgPSByZWludGVycHJldEFzQ292ZXJGb3JtYWxzTGlzdChleHByKTtcbiAgICAgICAgICAgICAgICBpZiAoY292ZXJGb3JtYWxzTGlzdCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbihjb3ZlckZvcm1hbHNMaXN0LCBtYXJrZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93VW5leHBlY3RlZChsZXgoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3ByZWFkRm91bmQgJiYgbG9va2FoZWFkMigpLnZhbHVlICE9PSAnPT4nKSB7XG4gICAgICAgICAgICB0aHJvd0Vycm9yKHt9LCBNZXNzYWdlcy5JbGxlZ2FsU3ByZWFkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzZXF1ZW5jZSB8fCBleHByO1xuICAgIH1cblxuICAgIC8vIDEyLjEgQmxvY2tcblxuICAgIGZ1bmN0aW9uIHBhcnNlU3RhdGVtZW50TGlzdCgpIHtcbiAgICAgICAgdmFyIGxpc3QgPSBbXSxcbiAgICAgICAgICAgIHN0YXRlbWVudDtcblxuICAgICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChtYXRjaCgnfScpKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGF0ZW1lbnQgPSBwYXJzZVNvdXJjZUVsZW1lbnQoKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3RhdGVtZW50ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGlzdC5wdXNoKHN0YXRlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbGlzdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZUJsb2NrKCkge1xuICAgICAgICB2YXIgYmxvY2ssIG1hcmtlciA9IG1hcmtlckNyZWF0ZSgpO1xuXG4gICAgICAgIGV4cGVjdCgneycpO1xuXG4gICAgICAgIGJsb2NrID0gcGFyc2VTdGF0ZW1lbnRMaXN0KCk7XG5cbiAgICAgICAgZXhwZWN0KCd9Jyk7XG5cbiAgICAgICAgcmV0dXJuIG1hcmtlckFwcGx5KG1hcmtlciwgZGVsZWdhdGUuY3JlYXRlQmxvY2tTdGF0ZW1lbnQoYmxvY2spKTtcbiAgICB9XG5cbiAgICAvLyAxMi4yIFZhcmlhYmxlIFN0YXRlbWVudFxuXG4gICAgZnVuY3Rpb24gcGFyc2VPYmplY3RUeXBlQW5ub3RhdGlvbihudWxsYWJsZSkge1xuICAgICAgICB2YXIgaXNNZXRob2QsIG1hcmtlciwgcHJvcGVydGllcyA9IFtdLCBwcm9wZXJ0eSwgcHJvcGVydHlLZXksXG4gICAgICAgICAgICBwcm9wZXJ0eVR5cGVBbm5vdGF0aW9uO1xuXG4gICAgICAgIGV4cGVjdCgneycpO1xuXG4gICAgICAgIHdoaWxlICghbWF0Y2goJ30nKSkge1xuICAgICAgICAgICAgbWFya2VyID0gbWFya2VyQ3JlYXRlKCk7XG4gICAgICAgICAgICBwcm9wZXJ0eUtleSA9IHBhcnNlT2JqZWN0UHJvcGVydHlLZXkoKTtcbiAgICAgICAgICAgIGlzTWV0aG9kID0gbWF0Y2goJygnKTtcbiAgICAgICAgICAgIHByb3BlcnR5VHlwZUFubm90YXRpb24gPSBwYXJzZVR5cGVBbm5vdGF0aW9uKCk7XG4gICAgICAgICAgICBwcm9wZXJ0aWVzLnB1c2gobWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVQcm9wZXJ0eShcbiAgICAgICAgICAgICAgICAnaW5pdCcsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlLZXksXG4gICAgICAgICAgICAgICAgcHJvcGVydHlUeXBlQW5ub3RhdGlvbixcbiAgICAgICAgICAgICAgICBpc01ldGhvZCxcbiAgICAgICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICAgKSkpO1xuXG4gICAgICAgICAgICBpZiAoIW1hdGNoKCd9JykpIHtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2goJywnKSB8fCBtYXRjaCgnOycpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxleCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93VW5leHBlY3RlZChsb29rYWhlYWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGV4cGVjdCgnfScpO1xuXG4gICAgICAgIHJldHVybiBkZWxlZ2F0ZS5jcmVhdGVPYmplY3RUeXBlQW5ub3RhdGlvbihwcm9wZXJ0aWVzLCBudWxsYWJsZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VWb2lkVHlwZUFubm90YXRpb24oKSB7XG4gICAgICAgIHZhciBtYXJrZXIgPSBtYXJrZXJDcmVhdGUoKTtcbiAgICAgICAgZXhwZWN0S2V5d29yZCgndm9pZCcpO1xuICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVWb2lkVHlwZUFubm90YXRpb24oKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VQYXJhbWV0cmljVHlwZUFubm90YXRpb24oKSB7XG4gICAgICAgIHZhciBtYXJrZXIgPSBtYXJrZXJDcmVhdGUoKSwgdHlwZUlkZW50aWZpZXIsIHBhcmFtVHlwZXMgPSBbXTtcblxuICAgICAgICBleHBlY3QoJzwnKTtcbiAgICAgICAgd2hpbGUgKCFtYXRjaCgnPicpKSB7XG4gICAgICAgICAgICBwYXJhbVR5cGVzLnB1c2gocGFyc2VWYXJpYWJsZUlkZW50aWZpZXIoKSk7XG4gICAgICAgICAgICBpZiAoIW1hdGNoKCc+JykpIHtcbiAgICAgICAgICAgICAgICBleHBlY3QoJywnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBleHBlY3QoJz4nKTtcblxuICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVQYXJhbWV0cmljVHlwZUFubm90YXRpb24oXG4gICAgICAgICAgICBwYXJhbVR5cGVzXG4gICAgICAgICkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlVHlwZUFubm90YXRpb24oZG9udEV4cGVjdENvbG9uKSB7XG4gICAgICAgIHZhciB0eXBlSWRlbnRpZmllciA9IG51bGwsIHBhcmFtcyA9IG51bGwsIHJldHVyblR5cGUgPSBudWxsLFxuICAgICAgICAgICAgbnVsbGFibGUgPSBmYWxzZSwgbWFya2VyID0gbWFya2VyQ3JlYXRlKCksIHJldHVyblR5cGVNYXJrZXIgPSBudWxsLFxuICAgICAgICAgICAgcGFyYW1ldHJpY1R5cGUsIGFubm90YXRpb247XG5cbiAgICAgICAgaWYgKCFkb250RXhwZWN0Q29sb24pIHtcbiAgICAgICAgICAgIGV4cGVjdCgnOicpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1hdGNoKCc/JykpIHtcbiAgICAgICAgICAgIGxleCgpO1xuICAgICAgICAgICAgbnVsbGFibGUgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1hdGNoKCd7JykpIHtcbiAgICAgICAgICAgIHJldHVybiBtYXJrZXJBcHBseShtYXJrZXIsIHBhcnNlT2JqZWN0VHlwZUFubm90YXRpb24obnVsbGFibGUpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsb29rYWhlYWQudHlwZSA9PT0gVG9rZW4uSWRlbnRpZmllcikge1xuICAgICAgICAgICAgdHlwZUlkZW50aWZpZXIgPSBwYXJzZVZhcmlhYmxlSWRlbnRpZmllcigpO1xuICAgICAgICAgICAgaWYgKG1hdGNoKCc8JykpIHtcbiAgICAgICAgICAgICAgICBwYXJhbWV0cmljVHlwZSA9IHBhcnNlUGFyYW1ldHJpY1R5cGVBbm5vdGF0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobWF0Y2goJygnKSkge1xuICAgICAgICAgICAgbGV4KCk7XG4gICAgICAgICAgICBwYXJhbXMgPSBbXTtcbiAgICAgICAgICAgIHdoaWxlIChsb29rYWhlYWQudHlwZSA9PT0gVG9rZW4uSWRlbnRpZmllciB8fCBtYXRjaCgnPycpKSB7XG4gICAgICAgICAgICAgICAgcGFyYW1zLnB1c2gocGFyc2VUeXBlQW5ub3RhdGFibGVJZGVudGlmaWVyKFxuICAgICAgICAgICAgICAgICAgICB0cnVlLCAvKiByZXF1aXJlVHlwZUFubm90YXRpb24gKi9cbiAgICAgICAgICAgICAgICAgICAgdHJ1ZSAvKiBjYW5CZU9wdGlvbmFsUGFyYW0gKi9cbiAgICAgICAgICAgICAgICApKTtcbiAgICAgICAgICAgICAgICBpZiAoIW1hdGNoKCcpJykpIHtcbiAgICAgICAgICAgICAgICAgICAgZXhwZWN0KCcsJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXhwZWN0KCcpJyk7XG5cbiAgICAgICAgICAgIHJldHVyblR5cGVNYXJrZXIgPSBtYXJrZXJDcmVhdGUoKTtcbiAgICAgICAgICAgIGV4cGVjdCgnPT4nKTtcblxuICAgICAgICAgICAgcmV0dXJuVHlwZSA9IHBhcnNlVHlwZUFubm90YXRpb24odHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIW1hdGNoS2V5d29yZCgndm9pZCcpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3dVbmV4cGVjdGVkKGxvb2thaGVhZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXJrZXJBcHBseShtYXJrZXIsIHBhcnNlVm9pZFR5cGVBbm5vdGF0aW9uKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1hcmtlckFwcGx5KG1hcmtlciwgZGVsZWdhdGUuY3JlYXRlVHlwZUFubm90YXRpb24oXG4gICAgICAgICAgICB0eXBlSWRlbnRpZmllcixcbiAgICAgICAgICAgIHBhcmFtZXRyaWNUeXBlLFxuICAgICAgICAgICAgcGFyYW1zLFxuICAgICAgICAgICAgcmV0dXJuVHlwZSxcbiAgICAgICAgICAgIG51bGxhYmxlXG4gICAgICAgICkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlVmFyaWFibGVJZGVudGlmaWVyKCkge1xuICAgICAgICB2YXIgbWFya2VyID0gbWFya2VyQ3JlYXRlKCksXG4gICAgICAgICAgICB0b2tlbiA9IGxleCgpO1xuXG4gICAgICAgIGlmICh0b2tlbi50eXBlICE9PSBUb2tlbi5JZGVudGlmaWVyKSB7XG4gICAgICAgICAgICB0aHJvd1VuZXhwZWN0ZWQodG9rZW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1hcmtlckFwcGx5KG1hcmtlciwgZGVsZWdhdGUuY3JlYXRlSWRlbnRpZmllcih0b2tlbi52YWx1ZSkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlVHlwZUFubm90YXRhYmxlSWRlbnRpZmllcihyZXF1aXJlVHlwZUFubm90YXRpb24sIGNhbkJlT3B0aW9uYWxQYXJhbSkge1xuICAgICAgICB2YXIgbWFya2VyID0gbWFya2VyQ3JlYXRlKCksXG4gICAgICAgICAgICBpZGVudCA9IHBhcnNlVmFyaWFibGVJZGVudGlmaWVyKCksXG4gICAgICAgICAgICBpc09wdGlvbmFsUGFyYW0gPSBmYWxzZTtcblxuICAgICAgICBpZiAoY2FuQmVPcHRpb25hbFBhcmFtICYmIG1hdGNoKCc/JykpIHtcbiAgICAgICAgICAgIGV4cGVjdCgnPycpO1xuICAgICAgICAgICAgaXNPcHRpb25hbFBhcmFtID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZXF1aXJlVHlwZUFubm90YXRpb24gfHwgbWF0Y2goJzonKSkge1xuICAgICAgICAgICAgaWRlbnQgPSBtYXJrZXJBcHBseShtYXJrZXIsIGRlbGVnYXRlLmNyZWF0ZVR5cGVBbm5vdGF0ZWRJZGVudGlmaWVyKFxuICAgICAgICAgICAgICAgIGlkZW50LFxuICAgICAgICAgICAgICAgIHBhcnNlVHlwZUFubm90YXRpb24oKVxuICAgICAgICAgICAgKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNPcHRpb25hbFBhcmFtKSB7XG4gICAgICAgICAgICBpZGVudCA9IG1hcmtlckFwcGx5KG1hcmtlciwgZGVsZWdhdGUuY3JlYXRlT3B0aW9uYWxQYXJhbWV0ZXIoaWRlbnQpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpZGVudDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZVZhcmlhYmxlRGVjbGFyYXRpb24oa2luZCkge1xuICAgICAgICB2YXIgaWQsXG4gICAgICAgICAgICBtYXJrZXIgPSBtYXJrZXJDcmVhdGUoKSxcbiAgICAgICAgICAgIGluaXQgPSBudWxsO1xuICAgICAgICBpZiAobWF0Y2goJ3snKSkge1xuICAgICAgICAgICAgaWQgPSBwYXJzZU9iamVjdEluaXRpYWxpc2VyKCk7XG4gICAgICAgICAgICByZWludGVycHJldEFzQXNzaWdubWVudEJpbmRpbmdQYXR0ZXJuKGlkKTtcbiAgICAgICAgfSBlbHNlIGlmIChtYXRjaCgnWycpKSB7XG4gICAgICAgICAgICBpZCA9IHBhcnNlQXJyYXlJbml0aWFsaXNlcigpO1xuICAgICAgICAgICAgcmVpbnRlcnByZXRBc0Fzc2lnbm1lbnRCaW5kaW5nUGF0dGVybihpZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZCA9IHN0YXRlLmFsbG93S2V5d29yZCA/IHBhcnNlTm9uQ29tcHV0ZWRQcm9wZXJ0eSgpIDogcGFyc2VUeXBlQW5ub3RhdGFibGVJZGVudGlmaWVyKCk7XG4gICAgICAgICAgICAvLyAxMi4yLjFcbiAgICAgICAgICAgIGlmIChzdHJpY3QgJiYgaXNSZXN0cmljdGVkV29yZChpZC5uYW1lKSkge1xuICAgICAgICAgICAgICAgIHRocm93RXJyb3JUb2xlcmFudCh7fSwgTWVzc2FnZXMuU3RyaWN0VmFyTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoa2luZCA9PT0gJ2NvbnN0Jykge1xuICAgICAgICAgICAgaWYgKCFtYXRjaCgnPScpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3dFcnJvcih7fSwgTWVzc2FnZXMuTm9VbmludGlhbGl6ZWRDb25zdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBleHBlY3QoJz0nKTtcbiAgICAgICAgICAgIGluaXQgPSBwYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKCk7XG4gICAgICAgIH0gZWxzZSBpZiAobWF0Y2goJz0nKSkge1xuICAgICAgICAgICAgbGV4KCk7XG4gICAgICAgICAgICBpbml0ID0gcGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1hcmtlckFwcGx5KG1hcmtlciwgZGVsZWdhdGUuY3JlYXRlVmFyaWFibGVEZWNsYXJhdG9yKGlkLCBpbml0KSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VWYXJpYWJsZURlY2xhcmF0aW9uTGlzdChraW5kKSB7XG4gICAgICAgIHZhciBsaXN0ID0gW107XG5cbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgbGlzdC5wdXNoKHBhcnNlVmFyaWFibGVEZWNsYXJhdGlvbihraW5kKSk7XG4gICAgICAgICAgICBpZiAoIW1hdGNoKCcsJykpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxleCgpO1xuICAgICAgICB9IHdoaWxlIChpbmRleCA8IGxlbmd0aCk7XG5cbiAgICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VWYXJpYWJsZVN0YXRlbWVudCgpIHtcbiAgICAgICAgdmFyIGRlY2xhcmF0aW9ucywgbWFya2VyID0gbWFya2VyQ3JlYXRlKCk7XG5cbiAgICAgICAgZXhwZWN0S2V5d29yZCgndmFyJyk7XG5cbiAgICAgICAgZGVjbGFyYXRpb25zID0gcGFyc2VWYXJpYWJsZURlY2xhcmF0aW9uTGlzdCgpO1xuXG4gICAgICAgIGNvbnN1bWVTZW1pY29sb24oKTtcblxuICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVWYXJpYWJsZURlY2xhcmF0aW9uKGRlY2xhcmF0aW9ucywgJ3ZhcicpKTtcbiAgICB9XG5cbiAgICAvLyBraW5kIG1heSBiZSBgY29uc3RgIG9yIGBsZXRgXG4gICAgLy8gQm90aCBhcmUgZXhwZXJpbWVudGFsIGFuZCBub3QgaW4gdGhlIHNwZWNpZmljYXRpb24geWV0LlxuICAgIC8vIHNlZSBodHRwOi8vd2lraS5lY21hc2NyaXB0Lm9yZy9kb2t1LnBocD9pZD1oYXJtb255OmNvbnN0XG4gICAgLy8gYW5kIGh0dHA6Ly93aWtpLmVjbWFzY3JpcHQub3JnL2Rva3UucGhwP2lkPWhhcm1vbnk6bGV0XG4gICAgZnVuY3Rpb24gcGFyc2VDb25zdExldERlY2xhcmF0aW9uKGtpbmQpIHtcbiAgICAgICAgdmFyIGRlY2xhcmF0aW9ucywgbWFya2VyID0gbWFya2VyQ3JlYXRlKCk7XG5cbiAgICAgICAgZXhwZWN0S2V5d29yZChraW5kKTtcblxuICAgICAgICBkZWNsYXJhdGlvbnMgPSBwYXJzZVZhcmlhYmxlRGVjbGFyYXRpb25MaXN0KGtpbmQpO1xuXG4gICAgICAgIGNvbnN1bWVTZW1pY29sb24oKTtcblxuICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVWYXJpYWJsZURlY2xhcmF0aW9uKGRlY2xhcmF0aW9ucywga2luZCkpO1xuICAgIH1cblxuICAgIC8vIGh0dHA6Ly93aWtpLmVjbWFzY3JpcHQub3JnL2Rva3UucGhwP2lkPWhhcm1vbnk6bW9kdWxlc1xuXG4gICAgZnVuY3Rpb24gcGFyc2VNb2R1bGVEZWNsYXJhdGlvbigpIHtcbiAgICAgICAgdmFyIGlkLCBzcmMsIGJvZHksIG1hcmtlciA9IG1hcmtlckNyZWF0ZSgpO1xuXG4gICAgICAgIGxleCgpOyAgIC8vICdtb2R1bGUnXG5cbiAgICAgICAgaWYgKHBlZWtMaW5lVGVybWluYXRvcigpKSB7XG4gICAgICAgICAgICB0aHJvd0Vycm9yKHt9LCBNZXNzYWdlcy5OZXdsaW5lQWZ0ZXJNb2R1bGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChsb29rYWhlYWQudHlwZSkge1xuXG4gICAgICAgIGNhc2UgVG9rZW4uU3RyaW5nTGl0ZXJhbDpcbiAgICAgICAgICAgIGlkID0gcGFyc2VQcmltYXJ5RXhwcmVzc2lvbigpO1xuICAgICAgICAgICAgYm9keSA9IHBhcnNlTW9kdWxlQmxvY2soKTtcbiAgICAgICAgICAgIHNyYyA9IG51bGw7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFRva2VuLklkZW50aWZpZXI6XG4gICAgICAgICAgICBpZCA9IHBhcnNlVmFyaWFibGVJZGVudGlmaWVyKCk7XG4gICAgICAgICAgICBib2R5ID0gbnVsbDtcbiAgICAgICAgICAgIGlmICghbWF0Y2hDb250ZXh0dWFsS2V5d29yZCgnZnJvbScpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3dVbmV4cGVjdGVkKGxleCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxleCgpO1xuICAgICAgICAgICAgc3JjID0gcGFyc2VQcmltYXJ5RXhwcmVzc2lvbigpO1xuICAgICAgICAgICAgaWYgKHNyYy50eXBlICE9PSBTeW50YXguTGl0ZXJhbCkge1xuICAgICAgICAgICAgICAgIHRocm93RXJyb3Ioe30sIE1lc3NhZ2VzLkludmFsaWRNb2R1bGVTcGVjaWZpZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdW1lU2VtaWNvbG9uKCk7XG4gICAgICAgIHJldHVybiBtYXJrZXJBcHBseShtYXJrZXIsIGRlbGVnYXRlLmNyZWF0ZU1vZHVsZURlY2xhcmF0aW9uKGlkLCBzcmMsIGJvZHkpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZUV4cG9ydEJhdGNoU3BlY2lmaWVyKCkge1xuICAgICAgICB2YXIgbWFya2VyID0gbWFya2VyQ3JlYXRlKCk7XG4gICAgICAgIGV4cGVjdCgnKicpO1xuICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVFeHBvcnRCYXRjaFNwZWNpZmllcigpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZUV4cG9ydFNwZWNpZmllcigpIHtcbiAgICAgICAgdmFyIGlkLCBuYW1lID0gbnVsbCwgbWFya2VyID0gbWFya2VyQ3JlYXRlKCk7XG5cbiAgICAgICAgaWQgPSBwYXJzZVZhcmlhYmxlSWRlbnRpZmllcigpO1xuICAgICAgICBpZiAobWF0Y2hDb250ZXh0dWFsS2V5d29yZCgnYXMnKSkge1xuICAgICAgICAgICAgbGV4KCk7XG4gICAgICAgICAgICBuYW1lID0gcGFyc2VOb25Db21wdXRlZFByb3BlcnR5KCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVFeHBvcnRTcGVjaWZpZXIoaWQsIG5hbWUpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZUV4cG9ydERlY2xhcmF0aW9uKCkge1xuICAgICAgICB2YXIgcHJldmlvdXNBbGxvd0tleXdvcmQsIGRlY2wsIGRlZiwgc3JjLCBzcGVjaWZpZXJzLFxuICAgICAgICAgICAgbWFya2VyID0gbWFya2VyQ3JlYXRlKCk7XG5cbiAgICAgICAgZXhwZWN0S2V5d29yZCgnZXhwb3J0Jyk7XG5cbiAgICAgICAgaWYgKGxvb2thaGVhZC50eXBlID09PSBUb2tlbi5LZXl3b3JkKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGxvb2thaGVhZC52YWx1ZSkge1xuICAgICAgICAgICAgY2FzZSAnbGV0JzpcbiAgICAgICAgICAgIGNhc2UgJ2NvbnN0JzpcbiAgICAgICAgICAgIGNhc2UgJ3Zhcic6XG4gICAgICAgICAgICBjYXNlICdjbGFzcyc6XG4gICAgICAgICAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hcmtlckFwcGx5KG1hcmtlciwgZGVsZWdhdGUuY3JlYXRlRXhwb3J0RGVjbGFyYXRpb24ocGFyc2VTb3VyY2VFbGVtZW50KCksIG51bGwsIG51bGwpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0lkZW50aWZpZXJOYW1lKGxvb2thaGVhZCkpIHtcbiAgICAgICAgICAgIHByZXZpb3VzQWxsb3dLZXl3b3JkID0gc3RhdGUuYWxsb3dLZXl3b3JkO1xuICAgICAgICAgICAgc3RhdGUuYWxsb3dLZXl3b3JkID0gdHJ1ZTtcbiAgICAgICAgICAgIGRlY2wgPSBwYXJzZVZhcmlhYmxlRGVjbGFyYXRpb25MaXN0KCdsZXQnKTtcbiAgICAgICAgICAgIHN0YXRlLmFsbG93S2V5d29yZCA9IHByZXZpb3VzQWxsb3dLZXl3b3JkO1xuICAgICAgICAgICAgcmV0dXJuIG1hcmtlckFwcGx5KG1hcmtlciwgZGVsZWdhdGUuY3JlYXRlRXhwb3J0RGVjbGFyYXRpb24oZGVjbCwgbnVsbCwgbnVsbCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3BlY2lmaWVycyA9IFtdO1xuICAgICAgICBzcmMgPSBudWxsO1xuXG4gICAgICAgIGlmIChtYXRjaCgnKicpKSB7XG4gICAgICAgICAgICBzcGVjaWZpZXJzLnB1c2gocGFyc2VFeHBvcnRCYXRjaFNwZWNpZmllcigpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGV4cGVjdCgneycpO1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIHNwZWNpZmllcnMucHVzaChwYXJzZUV4cG9ydFNwZWNpZmllcigpKTtcbiAgICAgICAgICAgIH0gd2hpbGUgKG1hdGNoKCcsJykgJiYgbGV4KCkpO1xuICAgICAgICAgICAgZXhwZWN0KCd9Jyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWF0Y2hDb250ZXh0dWFsS2V5d29yZCgnZnJvbScpKSB7XG4gICAgICAgICAgICBsZXgoKTtcbiAgICAgICAgICAgIHNyYyA9IHBhcnNlUHJpbWFyeUV4cHJlc3Npb24oKTtcbiAgICAgICAgICAgIGlmIChzcmMudHlwZSAhPT0gU3ludGF4LkxpdGVyYWwpIHtcbiAgICAgICAgICAgICAgICB0aHJvd0Vycm9yKHt9LCBNZXNzYWdlcy5JbnZhbGlkTW9kdWxlU3BlY2lmaWVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN1bWVTZW1pY29sb24oKTtcblxuICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVFeHBvcnREZWNsYXJhdGlvbihudWxsLCBzcGVjaWZpZXJzLCBzcmMpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZUltcG9ydERlY2xhcmF0aW9uKCkge1xuICAgICAgICB2YXIgc3BlY2lmaWVycywga2luZCwgc3JjLCBtYXJrZXIgPSBtYXJrZXJDcmVhdGUoKTtcblxuICAgICAgICBleHBlY3RLZXl3b3JkKCdpbXBvcnQnKTtcbiAgICAgICAgc3BlY2lmaWVycyA9IFtdO1xuXG4gICAgICAgIGlmIChpc0lkZW50aWZpZXJOYW1lKGxvb2thaGVhZCkpIHtcbiAgICAgICAgICAgIGtpbmQgPSAnZGVmYXVsdCc7XG4gICAgICAgICAgICBzcGVjaWZpZXJzLnB1c2gocGFyc2VJbXBvcnRTcGVjaWZpZXIoKSk7XG5cbiAgICAgICAgICAgIGlmICghbWF0Y2hDb250ZXh0dWFsS2V5d29yZCgnZnJvbScpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3dFcnJvcih7fSwgTWVzc2FnZXMuTm9Gcm9tQWZ0ZXJJbXBvcnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV4KCk7XG4gICAgICAgIH0gZWxzZSBpZiAobWF0Y2goJ3snKSkge1xuICAgICAgICAgICAga2luZCA9ICduYW1lZCc7XG4gICAgICAgICAgICBsZXgoKTtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBzcGVjaWZpZXJzLnB1c2gocGFyc2VJbXBvcnRTcGVjaWZpZXIoKSk7XG4gICAgICAgICAgICB9IHdoaWxlIChtYXRjaCgnLCcpICYmIGxleCgpKTtcbiAgICAgICAgICAgIGV4cGVjdCgnfScpO1xuXG4gICAgICAgICAgICBpZiAoIW1hdGNoQ29udGV4dHVhbEtleXdvcmQoJ2Zyb20nKSkge1xuICAgICAgICAgICAgICAgIHRocm93RXJyb3Ioe30sIE1lc3NhZ2VzLk5vRnJvbUFmdGVySW1wb3J0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxleCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3JjID0gcGFyc2VQcmltYXJ5RXhwcmVzc2lvbigpO1xuICAgICAgICBpZiAoc3JjLnR5cGUgIT09IFN5bnRheC5MaXRlcmFsKSB7XG4gICAgICAgICAgICB0aHJvd0Vycm9yKHt9LCBNZXNzYWdlcy5JbnZhbGlkTW9kdWxlU3BlY2lmaWVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN1bWVTZW1pY29sb24oKTtcblxuICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVJbXBvcnREZWNsYXJhdGlvbihzcGVjaWZpZXJzLCBraW5kLCBzcmMpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZUltcG9ydFNwZWNpZmllcigpIHtcbiAgICAgICAgdmFyIGlkLCBuYW1lID0gbnVsbCwgbWFya2VyID0gbWFya2VyQ3JlYXRlKCk7XG5cbiAgICAgICAgaWQgPSBwYXJzZU5vbkNvbXB1dGVkUHJvcGVydHkoKTtcbiAgICAgICAgaWYgKG1hdGNoQ29udGV4dHVhbEtleXdvcmQoJ2FzJykpIHtcbiAgICAgICAgICAgIGxleCgpO1xuICAgICAgICAgICAgbmFtZSA9IHBhcnNlVmFyaWFibGVJZGVudGlmaWVyKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVJbXBvcnRTcGVjaWZpZXIoaWQsIG5hbWUpKTtcbiAgICB9XG5cbiAgICAvLyAxMi4zIEVtcHR5IFN0YXRlbWVudFxuXG4gICAgZnVuY3Rpb24gcGFyc2VFbXB0eVN0YXRlbWVudCgpIHtcbiAgICAgICAgdmFyIG1hcmtlciA9IG1hcmtlckNyZWF0ZSgpO1xuICAgICAgICBleHBlY3QoJzsnKTtcbiAgICAgICAgcmV0dXJuIG1hcmtlckFwcGx5KG1hcmtlciwgZGVsZWdhdGUuY3JlYXRlRW1wdHlTdGF0ZW1lbnQoKSk7XG4gICAgfVxuXG4gICAgLy8gMTIuNCBFeHByZXNzaW9uIFN0YXRlbWVudFxuXG4gICAgZnVuY3Rpb24gcGFyc2VFeHByZXNzaW9uU3RhdGVtZW50KCkge1xuICAgICAgICB2YXIgbWFya2VyID0gbWFya2VyQ3JlYXRlKCksIGV4cHIgPSBwYXJzZUV4cHJlc3Npb24oKTtcbiAgICAgICAgY29uc3VtZVNlbWljb2xvbigpO1xuICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVFeHByZXNzaW9uU3RhdGVtZW50KGV4cHIpKTtcbiAgICB9XG5cbiAgICAvLyAxMi41IElmIHN0YXRlbWVudFxuXG4gICAgZnVuY3Rpb24gcGFyc2VJZlN0YXRlbWVudCgpIHtcbiAgICAgICAgdmFyIHRlc3QsIGNvbnNlcXVlbnQsIGFsdGVybmF0ZSwgbWFya2VyID0gbWFya2VyQ3JlYXRlKCk7XG5cbiAgICAgICAgZXhwZWN0S2V5d29yZCgnaWYnKTtcblxuICAgICAgICBleHBlY3QoJygnKTtcblxuICAgICAgICB0ZXN0ID0gcGFyc2VFeHByZXNzaW9uKCk7XG5cbiAgICAgICAgZXhwZWN0KCcpJyk7XG5cbiAgICAgICAgY29uc2VxdWVudCA9IHBhcnNlU3RhdGVtZW50KCk7XG5cbiAgICAgICAgaWYgKG1hdGNoS2V5d29yZCgnZWxzZScpKSB7XG4gICAgICAgICAgICBsZXgoKTtcbiAgICAgICAgICAgIGFsdGVybmF0ZSA9IHBhcnNlU3RhdGVtZW50KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhbHRlcm5hdGUgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1hcmtlckFwcGx5KG1hcmtlciwgZGVsZWdhdGUuY3JlYXRlSWZTdGF0ZW1lbnQodGVzdCwgY29uc2VxdWVudCwgYWx0ZXJuYXRlKSk7XG4gICAgfVxuXG4gICAgLy8gMTIuNiBJdGVyYXRpb24gU3RhdGVtZW50c1xuXG4gICAgZnVuY3Rpb24gcGFyc2VEb1doaWxlU3RhdGVtZW50KCkge1xuICAgICAgICB2YXIgYm9keSwgdGVzdCwgb2xkSW5JdGVyYXRpb24sIG1hcmtlciA9IG1hcmtlckNyZWF0ZSgpO1xuXG4gICAgICAgIGV4cGVjdEtleXdvcmQoJ2RvJyk7XG5cbiAgICAgICAgb2xkSW5JdGVyYXRpb24gPSBzdGF0ZS5pbkl0ZXJhdGlvbjtcbiAgICAgICAgc3RhdGUuaW5JdGVyYXRpb24gPSB0cnVlO1xuXG4gICAgICAgIGJvZHkgPSBwYXJzZVN0YXRlbWVudCgpO1xuXG4gICAgICAgIHN0YXRlLmluSXRlcmF0aW9uID0gb2xkSW5JdGVyYXRpb247XG5cbiAgICAgICAgZXhwZWN0S2V5d29yZCgnd2hpbGUnKTtcblxuICAgICAgICBleHBlY3QoJygnKTtcblxuICAgICAgICB0ZXN0ID0gcGFyc2VFeHByZXNzaW9uKCk7XG5cbiAgICAgICAgZXhwZWN0KCcpJyk7XG5cbiAgICAgICAgaWYgKG1hdGNoKCc7JykpIHtcbiAgICAgICAgICAgIGxleCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1hcmtlckFwcGx5KG1hcmtlciwgZGVsZWdhdGUuY3JlYXRlRG9XaGlsZVN0YXRlbWVudChib2R5LCB0ZXN0KSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VXaGlsZVN0YXRlbWVudCgpIHtcbiAgICAgICAgdmFyIHRlc3QsIGJvZHksIG9sZEluSXRlcmF0aW9uLCBtYXJrZXIgPSBtYXJrZXJDcmVhdGUoKTtcblxuICAgICAgICBleHBlY3RLZXl3b3JkKCd3aGlsZScpO1xuXG4gICAgICAgIGV4cGVjdCgnKCcpO1xuXG4gICAgICAgIHRlc3QgPSBwYXJzZUV4cHJlc3Npb24oKTtcblxuICAgICAgICBleHBlY3QoJyknKTtcblxuICAgICAgICBvbGRJbkl0ZXJhdGlvbiA9IHN0YXRlLmluSXRlcmF0aW9uO1xuICAgICAgICBzdGF0ZS5pbkl0ZXJhdGlvbiA9IHRydWU7XG5cbiAgICAgICAgYm9keSA9IHBhcnNlU3RhdGVtZW50KCk7XG5cbiAgICAgICAgc3RhdGUuaW5JdGVyYXRpb24gPSBvbGRJbkl0ZXJhdGlvbjtcblxuICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVXaGlsZVN0YXRlbWVudCh0ZXN0LCBib2R5KSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VGb3JWYXJpYWJsZURlY2xhcmF0aW9uKCkge1xuICAgICAgICB2YXIgbWFya2VyID0gbWFya2VyQ3JlYXRlKCksXG4gICAgICAgICAgICB0b2tlbiA9IGxleCgpLFxuICAgICAgICAgICAgZGVjbGFyYXRpb25zID0gcGFyc2VWYXJpYWJsZURlY2xhcmF0aW9uTGlzdCgpO1xuXG4gICAgICAgIHJldHVybiBtYXJrZXJBcHBseShtYXJrZXIsIGRlbGVnYXRlLmNyZWF0ZVZhcmlhYmxlRGVjbGFyYXRpb24oZGVjbGFyYXRpb25zLCB0b2tlbi52YWx1ZSkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlRm9yU3RhdGVtZW50KG9wdHMpIHtcbiAgICAgICAgdmFyIGluaXQsIHRlc3QsIHVwZGF0ZSwgbGVmdCwgcmlnaHQsIGJvZHksIG9wZXJhdG9yLCBvbGRJbkl0ZXJhdGlvbixcbiAgICAgICAgICAgIG1hcmtlciA9IG1hcmtlckNyZWF0ZSgpO1xuICAgICAgICBpbml0ID0gdGVzdCA9IHVwZGF0ZSA9IG51bGw7XG4gICAgICAgIGV4cGVjdEtleXdvcmQoJ2ZvcicpO1xuXG4gICAgICAgIC8vIGh0dHA6Ly93aWtpLmVjbWFzY3JpcHQub3JnL2Rva3UucGhwP2lkPXByb3Bvc2FsczppdGVyYXRvcnNfYW5kX2dlbmVyYXRvcnMmcz1lYWNoXG4gICAgICAgIGlmIChtYXRjaENvbnRleHR1YWxLZXl3b3JkKCdlYWNoJykpIHtcbiAgICAgICAgICAgIHRocm93RXJyb3Ioe30sIE1lc3NhZ2VzLkVhY2hOb3RBbGxvd2VkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGV4cGVjdCgnKCcpO1xuXG4gICAgICAgIGlmIChtYXRjaCgnOycpKSB7XG4gICAgICAgICAgICBsZXgoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChtYXRjaEtleXdvcmQoJ3ZhcicpIHx8IG1hdGNoS2V5d29yZCgnbGV0JykgfHwgbWF0Y2hLZXl3b3JkKCdjb25zdCcpKSB7XG4gICAgICAgICAgICAgICAgc3RhdGUuYWxsb3dJbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGluaXQgPSBwYXJzZUZvclZhcmlhYmxlRGVjbGFyYXRpb24oKTtcbiAgICAgICAgICAgICAgICBzdGF0ZS5hbGxvd0luID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIGlmIChpbml0LmRlY2xhcmF0aW9ucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoS2V5d29yZCgnaW4nKSB8fCBtYXRjaENvbnRleHR1YWxLZXl3b3JkKCdvZicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRvciA9IGxvb2thaGVhZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKChvcGVyYXRvci52YWx1ZSA9PT0gJ2luJyB8fCBpbml0LmtpbmQgIT09ICd2YXInKSAmJiBpbml0LmRlY2xhcmF0aW9uc1swXS5pbml0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxleCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQgPSBpbml0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0ID0gcGFyc2VFeHByZXNzaW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0YXRlLmFsbG93SW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpbml0ID0gcGFyc2VFeHByZXNzaW9uKCk7XG4gICAgICAgICAgICAgICAgc3RhdGUuYWxsb3dJbiA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICBpZiAobWF0Y2hDb250ZXh0dWFsS2V5d29yZCgnb2YnKSkge1xuICAgICAgICAgICAgICAgICAgICBvcGVyYXRvciA9IGxleCgpO1xuICAgICAgICAgICAgICAgICAgICBsZWZ0ID0gaW5pdDtcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQgPSBwYXJzZUV4cHJlc3Npb24oKTtcbiAgICAgICAgICAgICAgICAgICAgaW5pdCA9IG51bGw7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaEtleXdvcmQoJ2luJykpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTGVmdEhhbmRTaWRlRXhwcmVzc2lvblxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzQXNzaWduYWJsZUxlZnRIYW5kU2lkZShpbml0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3dFcnJvcih7fSwgTWVzc2FnZXMuSW52YWxpZExIU0luRm9ySW4pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG9wZXJhdG9yID0gbGV4KCk7XG4gICAgICAgICAgICAgICAgICAgIGxlZnQgPSBpbml0O1xuICAgICAgICAgICAgICAgICAgICByaWdodCA9IHBhcnNlRXhwcmVzc2lvbigpO1xuICAgICAgICAgICAgICAgICAgICBpbml0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgbGVmdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBleHBlY3QoJzsnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgbGVmdCA9PT0gJ3VuZGVmaW5lZCcpIHtcblxuICAgICAgICAgICAgaWYgKCFtYXRjaCgnOycpKSB7XG4gICAgICAgICAgICAgICAgdGVzdCA9IHBhcnNlRXhwcmVzc2lvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXhwZWN0KCc7Jyk7XG5cbiAgICAgICAgICAgIGlmICghbWF0Y2goJyknKSkge1xuICAgICAgICAgICAgICAgIHVwZGF0ZSA9IHBhcnNlRXhwcmVzc2lvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZXhwZWN0KCcpJyk7XG5cbiAgICAgICAgb2xkSW5JdGVyYXRpb24gPSBzdGF0ZS5pbkl0ZXJhdGlvbjtcbiAgICAgICAgc3RhdGUuaW5JdGVyYXRpb24gPSB0cnVlO1xuXG4gICAgICAgIGlmICghKG9wdHMgIT09IHVuZGVmaW5lZCAmJiBvcHRzLmlnbm9yZUJvZHkpKSB7XG4gICAgICAgICAgICBib2R5ID0gcGFyc2VTdGF0ZW1lbnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlLmluSXRlcmF0aW9uID0gb2xkSW5JdGVyYXRpb247XG5cbiAgICAgICAgaWYgKHR5cGVvZiBsZWZ0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIG1hcmtlckFwcGx5KG1hcmtlciwgZGVsZWdhdGUuY3JlYXRlRm9yU3RhdGVtZW50KGluaXQsIHRlc3QsIHVwZGF0ZSwgYm9keSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wZXJhdG9yLnZhbHVlID09PSAnaW4nKSB7XG4gICAgICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVGb3JJblN0YXRlbWVudChsZWZ0LCByaWdodCwgYm9keSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXJrZXJBcHBseShtYXJrZXIsIGRlbGVnYXRlLmNyZWF0ZUZvck9mU3RhdGVtZW50KGxlZnQsIHJpZ2h0LCBib2R5KSk7XG4gICAgfVxuXG4gICAgLy8gMTIuNyBUaGUgY29udGludWUgc3RhdGVtZW50XG5cbiAgICBmdW5jdGlvbiBwYXJzZUNvbnRpbnVlU3RhdGVtZW50KCkge1xuICAgICAgICB2YXIgbGFiZWwgPSBudWxsLCBrZXksIG1hcmtlciA9IG1hcmtlckNyZWF0ZSgpO1xuXG4gICAgICAgIGV4cGVjdEtleXdvcmQoJ2NvbnRpbnVlJyk7XG5cbiAgICAgICAgLy8gT3B0aW1pemUgdGhlIG1vc3QgY29tbW9uIGZvcm06ICdjb250aW51ZTsnLlxuICAgICAgICBpZiAoc291cmNlLmNoYXJDb2RlQXQoaW5kZXgpID09PSA1OSkge1xuICAgICAgICAgICAgbGV4KCk7XG5cbiAgICAgICAgICAgIGlmICghc3RhdGUuaW5JdGVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICB0aHJvd0Vycm9yKHt9LCBNZXNzYWdlcy5JbGxlZ2FsQ29udGludWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVDb250aW51ZVN0YXRlbWVudChudWxsKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGVla0xpbmVUZXJtaW5hdG9yKCkpIHtcbiAgICAgICAgICAgIGlmICghc3RhdGUuaW5JdGVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICB0aHJvd0Vycm9yKHt9LCBNZXNzYWdlcy5JbGxlZ2FsQ29udGludWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVDb250aW51ZVN0YXRlbWVudChudWxsKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobG9va2FoZWFkLnR5cGUgPT09IFRva2VuLklkZW50aWZpZXIpIHtcbiAgICAgICAgICAgIGxhYmVsID0gcGFyc2VWYXJpYWJsZUlkZW50aWZpZXIoKTtcblxuICAgICAgICAgICAga2V5ID0gJyQnICsgbGFiZWwubmFtZTtcbiAgICAgICAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHN0YXRlLmxhYmVsU2V0LCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3dFcnJvcih7fSwgTWVzc2FnZXMuVW5rbm93bkxhYmVsLCBsYWJlbC5uYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN1bWVTZW1pY29sb24oKTtcblxuICAgICAgICBpZiAobGFiZWwgPT09IG51bGwgJiYgIXN0YXRlLmluSXRlcmF0aW9uKSB7XG4gICAgICAgICAgICB0aHJvd0Vycm9yKHt9LCBNZXNzYWdlcy5JbGxlZ2FsQ29udGludWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1hcmtlckFwcGx5KG1hcmtlciwgZGVsZWdhdGUuY3JlYXRlQ29udGludWVTdGF0ZW1lbnQobGFiZWwpKTtcbiAgICB9XG5cbiAgICAvLyAxMi44IFRoZSBicmVhayBzdGF0ZW1lbnRcblxuICAgIGZ1bmN0aW9uIHBhcnNlQnJlYWtTdGF0ZW1lbnQoKSB7XG4gICAgICAgIHZhciBsYWJlbCA9IG51bGwsIGtleSwgbWFya2VyID0gbWFya2VyQ3JlYXRlKCk7XG5cbiAgICAgICAgZXhwZWN0S2V5d29yZCgnYnJlYWsnKTtcblxuICAgICAgICAvLyBDYXRjaCB0aGUgdmVyeSBjb21tb24gY2FzZSBmaXJzdDogaW1tZWRpYXRlbHkgYSBzZW1pY29sb24gKGNoYXIgIzU5KS5cbiAgICAgICAgaWYgKHNvdXJjZS5jaGFyQ29kZUF0KGluZGV4KSA9PT0gNTkpIHtcbiAgICAgICAgICAgIGxleCgpO1xuXG4gICAgICAgICAgICBpZiAoIShzdGF0ZS5pbkl0ZXJhdGlvbiB8fCBzdGF0ZS5pblN3aXRjaCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvd0Vycm9yKHt9LCBNZXNzYWdlcy5JbGxlZ2FsQnJlYWspO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVCcmVha1N0YXRlbWVudChudWxsKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGVla0xpbmVUZXJtaW5hdG9yKCkpIHtcbiAgICAgICAgICAgIGlmICghKHN0YXRlLmluSXRlcmF0aW9uIHx8IHN0YXRlLmluU3dpdGNoKSkge1xuICAgICAgICAgICAgICAgIHRocm93RXJyb3Ioe30sIE1lc3NhZ2VzLklsbGVnYWxCcmVhayk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBtYXJrZXJBcHBseShtYXJrZXIsIGRlbGVnYXRlLmNyZWF0ZUJyZWFrU3RhdGVtZW50KG51bGwpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsb29rYWhlYWQudHlwZSA9PT0gVG9rZW4uSWRlbnRpZmllcikge1xuICAgICAgICAgICAgbGFiZWwgPSBwYXJzZVZhcmlhYmxlSWRlbnRpZmllcigpO1xuXG4gICAgICAgICAgICBrZXkgPSAnJCcgKyBsYWJlbC5uYW1lO1xuICAgICAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc3RhdGUubGFiZWxTZXQsIGtleSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvd0Vycm9yKHt9LCBNZXNzYWdlcy5Vbmtub3duTGFiZWwsIGxhYmVsLm5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3VtZVNlbWljb2xvbigpO1xuXG4gICAgICAgIGlmIChsYWJlbCA9PT0gbnVsbCAmJiAhKHN0YXRlLmluSXRlcmF0aW9uIHx8IHN0YXRlLmluU3dpdGNoKSkge1xuICAgICAgICAgICAgdGhyb3dFcnJvcih7fSwgTWVzc2FnZXMuSWxsZWdhbEJyZWFrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtYXJrZXJBcHBseShtYXJrZXIsIGRlbGVnYXRlLmNyZWF0ZUJyZWFrU3RhdGVtZW50KGxhYmVsKSk7XG4gICAgfVxuXG4gICAgLy8gMTIuOSBUaGUgcmV0dXJuIHN0YXRlbWVudFxuXG4gICAgZnVuY3Rpb24gcGFyc2VSZXR1cm5TdGF0ZW1lbnQoKSB7XG4gICAgICAgIHZhciBhcmd1bWVudCA9IG51bGwsIG1hcmtlciA9IG1hcmtlckNyZWF0ZSgpO1xuXG4gICAgICAgIGV4cGVjdEtleXdvcmQoJ3JldHVybicpO1xuXG4gICAgICAgIGlmICghc3RhdGUuaW5GdW5jdGlvbkJvZHkpIHtcbiAgICAgICAgICAgIHRocm93RXJyb3JUb2xlcmFudCh7fSwgTWVzc2FnZXMuSWxsZWdhbFJldHVybik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyAncmV0dXJuJyBmb2xsb3dlZCBieSBhIHNwYWNlIGFuZCBhbiBpZGVudGlmaWVyIGlzIHZlcnkgY29tbW9uLlxuICAgICAgICBpZiAoc291cmNlLmNoYXJDb2RlQXQoaW5kZXgpID09PSAzMikge1xuICAgICAgICAgICAgaWYgKGlzSWRlbnRpZmllclN0YXJ0KHNvdXJjZS5jaGFyQ29kZUF0KGluZGV4ICsgMSkpKSB7XG4gICAgICAgICAgICAgICAgYXJndW1lbnQgPSBwYXJzZUV4cHJlc3Npb24oKTtcbiAgICAgICAgICAgICAgICBjb25zdW1lU2VtaWNvbG9uKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hcmtlckFwcGx5KG1hcmtlciwgZGVsZWdhdGUuY3JlYXRlUmV0dXJuU3RhdGVtZW50KGFyZ3VtZW50KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGVla0xpbmVUZXJtaW5hdG9yKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBtYXJrZXJBcHBseShtYXJrZXIsIGRlbGVnYXRlLmNyZWF0ZVJldHVyblN0YXRlbWVudChudWxsKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIW1hdGNoKCc7JykpIHtcbiAgICAgICAgICAgIGlmICghbWF0Y2goJ30nKSAmJiBsb29rYWhlYWQudHlwZSAhPT0gVG9rZW4uRU9GKSB7XG4gICAgICAgICAgICAgICAgYXJndW1lbnQgPSBwYXJzZUV4cHJlc3Npb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN1bWVTZW1pY29sb24oKTtcblxuICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVSZXR1cm5TdGF0ZW1lbnQoYXJndW1lbnQpKTtcbiAgICB9XG5cbiAgICAvLyAxMi4xMCBUaGUgd2l0aCBzdGF0ZW1lbnRcblxuICAgIGZ1bmN0aW9uIHBhcnNlV2l0aFN0YXRlbWVudCgpIHtcbiAgICAgICAgdmFyIG9iamVjdCwgYm9keSwgbWFya2VyID0gbWFya2VyQ3JlYXRlKCk7XG5cbiAgICAgICAgaWYgKHN0cmljdCkge1xuICAgICAgICAgICAgdGhyb3dFcnJvclRvbGVyYW50KHt9LCBNZXNzYWdlcy5TdHJpY3RNb2RlV2l0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBleHBlY3RLZXl3b3JkKCd3aXRoJyk7XG5cbiAgICAgICAgZXhwZWN0KCcoJyk7XG5cbiAgICAgICAgb2JqZWN0ID0gcGFyc2VFeHByZXNzaW9uKCk7XG5cbiAgICAgICAgZXhwZWN0KCcpJyk7XG5cbiAgICAgICAgYm9keSA9IHBhcnNlU3RhdGVtZW50KCk7XG5cbiAgICAgICAgcmV0dXJuIG1hcmtlckFwcGx5KG1hcmtlciwgZGVsZWdhdGUuY3JlYXRlV2l0aFN0YXRlbWVudChvYmplY3QsIGJvZHkpKTtcbiAgICB9XG5cbiAgICAvLyAxMi4xMCBUaGUgc3dpdGggc3RhdGVtZW50XG5cbiAgICBmdW5jdGlvbiBwYXJzZVN3aXRjaENhc2UoKSB7XG4gICAgICAgIHZhciB0ZXN0LFxuICAgICAgICAgICAgY29uc2VxdWVudCA9IFtdLFxuICAgICAgICAgICAgc291cmNlRWxlbWVudCxcbiAgICAgICAgICAgIG1hcmtlciA9IG1hcmtlckNyZWF0ZSgpO1xuXG4gICAgICAgIGlmIChtYXRjaEtleXdvcmQoJ2RlZmF1bHQnKSkge1xuICAgICAgICAgICAgbGV4KCk7XG4gICAgICAgICAgICB0ZXN0ID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGV4cGVjdEtleXdvcmQoJ2Nhc2UnKTtcbiAgICAgICAgICAgIHRlc3QgPSBwYXJzZUV4cHJlc3Npb24oKTtcbiAgICAgICAgfVxuICAgICAgICBleHBlY3QoJzonKTtcblxuICAgICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChtYXRjaCgnfScpIHx8IG1hdGNoS2V5d29yZCgnZGVmYXVsdCcpIHx8IG1hdGNoS2V5d29yZCgnY2FzZScpKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzb3VyY2VFbGVtZW50ID0gcGFyc2VTb3VyY2VFbGVtZW50KCk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHNvdXJjZUVsZW1lbnQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zZXF1ZW50LnB1c2goc291cmNlRWxlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVTd2l0Y2hDYXNlKHRlc3QsIGNvbnNlcXVlbnQpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZVN3aXRjaFN0YXRlbWVudCgpIHtcbiAgICAgICAgdmFyIGRpc2NyaW1pbmFudCwgY2FzZXMsIGNsYXVzZSwgb2xkSW5Td2l0Y2gsIGRlZmF1bHRGb3VuZCwgbWFya2VyID0gbWFya2VyQ3JlYXRlKCk7XG5cbiAgICAgICAgZXhwZWN0S2V5d29yZCgnc3dpdGNoJyk7XG5cbiAgICAgICAgZXhwZWN0KCcoJyk7XG5cbiAgICAgICAgZGlzY3JpbWluYW50ID0gcGFyc2VFeHByZXNzaW9uKCk7XG5cbiAgICAgICAgZXhwZWN0KCcpJyk7XG5cbiAgICAgICAgZXhwZWN0KCd7Jyk7XG5cbiAgICAgICAgY2FzZXMgPSBbXTtcblxuICAgICAgICBpZiAobWF0Y2goJ30nKSkge1xuICAgICAgICAgICAgbGV4KCk7XG4gICAgICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVTd2l0Y2hTdGF0ZW1lbnQoZGlzY3JpbWluYW50LCBjYXNlcykpO1xuICAgICAgICB9XG5cbiAgICAgICAgb2xkSW5Td2l0Y2ggPSBzdGF0ZS5pblN3aXRjaDtcbiAgICAgICAgc3RhdGUuaW5Td2l0Y2ggPSB0cnVlO1xuICAgICAgICBkZWZhdWx0Rm91bmQgPSBmYWxzZTtcblxuICAgICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChtYXRjaCgnfScpKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjbGF1c2UgPSBwYXJzZVN3aXRjaENhc2UoKTtcbiAgICAgICAgICAgIGlmIChjbGF1c2UudGVzdCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChkZWZhdWx0Rm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3dFcnJvcih7fSwgTWVzc2FnZXMuTXVsdGlwbGVEZWZhdWx0c0luU3dpdGNoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVmYXVsdEZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2VzLnB1c2goY2xhdXNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlLmluU3dpdGNoID0gb2xkSW5Td2l0Y2g7XG5cbiAgICAgICAgZXhwZWN0KCd9Jyk7XG5cbiAgICAgICAgcmV0dXJuIG1hcmtlckFwcGx5KG1hcmtlciwgZGVsZWdhdGUuY3JlYXRlU3dpdGNoU3RhdGVtZW50KGRpc2NyaW1pbmFudCwgY2FzZXMpKTtcbiAgICB9XG5cbiAgICAvLyAxMi4xMyBUaGUgdGhyb3cgc3RhdGVtZW50XG5cbiAgICBmdW5jdGlvbiBwYXJzZVRocm93U3RhdGVtZW50KCkge1xuICAgICAgICB2YXIgYXJndW1lbnQsIG1hcmtlciA9IG1hcmtlckNyZWF0ZSgpO1xuXG4gICAgICAgIGV4cGVjdEtleXdvcmQoJ3Rocm93Jyk7XG5cbiAgICAgICAgaWYgKHBlZWtMaW5lVGVybWluYXRvcigpKSB7XG4gICAgICAgICAgICB0aHJvd0Vycm9yKHt9LCBNZXNzYWdlcy5OZXdsaW5lQWZ0ZXJUaHJvdyk7XG4gICAgICAgIH1cblxuICAgICAgICBhcmd1bWVudCA9IHBhcnNlRXhwcmVzc2lvbigpO1xuXG4gICAgICAgIGNvbnN1bWVTZW1pY29sb24oKTtcblxuICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVUaHJvd1N0YXRlbWVudChhcmd1bWVudCkpO1xuICAgIH1cblxuICAgIC8vIDEyLjE0IFRoZSB0cnkgc3RhdGVtZW50XG5cbiAgICBmdW5jdGlvbiBwYXJzZUNhdGNoQ2xhdXNlKCkge1xuICAgICAgICB2YXIgcGFyYW0sIGJvZHksIG1hcmtlciA9IG1hcmtlckNyZWF0ZSgpO1xuXG4gICAgICAgIGV4cGVjdEtleXdvcmQoJ2NhdGNoJyk7XG5cbiAgICAgICAgZXhwZWN0KCcoJyk7XG4gICAgICAgIGlmIChtYXRjaCgnKScpKSB7XG4gICAgICAgICAgICB0aHJvd1VuZXhwZWN0ZWQobG9va2FoZWFkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcmFtID0gcGFyc2VFeHByZXNzaW9uKCk7XG4gICAgICAgIC8vIDEyLjE0LjFcbiAgICAgICAgaWYgKHN0cmljdCAmJiBwYXJhbS50eXBlID09PSBTeW50YXguSWRlbnRpZmllciAmJiBpc1Jlc3RyaWN0ZWRXb3JkKHBhcmFtLm5hbWUpKSB7XG4gICAgICAgICAgICB0aHJvd0Vycm9yVG9sZXJhbnQoe30sIE1lc3NhZ2VzLlN0cmljdENhdGNoVmFyaWFibGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZXhwZWN0KCcpJyk7XG4gICAgICAgIGJvZHkgPSBwYXJzZUJsb2NrKCk7XG4gICAgICAgIHJldHVybiBtYXJrZXJBcHBseShtYXJrZXIsIGRlbGVnYXRlLmNyZWF0ZUNhdGNoQ2xhdXNlKHBhcmFtLCBib2R5KSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VUcnlTdGF0ZW1lbnQoKSB7XG4gICAgICAgIHZhciBibG9jaywgaGFuZGxlcnMgPSBbXSwgZmluYWxpemVyID0gbnVsbCwgbWFya2VyID0gbWFya2VyQ3JlYXRlKCk7XG5cbiAgICAgICAgZXhwZWN0S2V5d29yZCgndHJ5Jyk7XG5cbiAgICAgICAgYmxvY2sgPSBwYXJzZUJsb2NrKCk7XG5cbiAgICAgICAgaWYgKG1hdGNoS2V5d29yZCgnY2F0Y2gnKSkge1xuICAgICAgICAgICAgaGFuZGxlcnMucHVzaChwYXJzZUNhdGNoQ2xhdXNlKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1hdGNoS2V5d29yZCgnZmluYWxseScpKSB7XG4gICAgICAgICAgICBsZXgoKTtcbiAgICAgICAgICAgIGZpbmFsaXplciA9IHBhcnNlQmxvY2soKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYW5kbGVycy5sZW5ndGggPT09IDAgJiYgIWZpbmFsaXplcikge1xuICAgICAgICAgICAgdGhyb3dFcnJvcih7fSwgTWVzc2FnZXMuTm9DYXRjaE9yRmluYWxseSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVUcnlTdGF0ZW1lbnQoYmxvY2ssIFtdLCBoYW5kbGVycywgZmluYWxpemVyKSk7XG4gICAgfVxuXG4gICAgLy8gMTIuMTUgVGhlIGRlYnVnZ2VyIHN0YXRlbWVudFxuXG4gICAgZnVuY3Rpb24gcGFyc2VEZWJ1Z2dlclN0YXRlbWVudCgpIHtcbiAgICAgICAgdmFyIG1hcmtlciA9IG1hcmtlckNyZWF0ZSgpO1xuICAgICAgICBleHBlY3RLZXl3b3JkKCdkZWJ1Z2dlcicpO1xuXG4gICAgICAgIGNvbnN1bWVTZW1pY29sb24oKTtcblxuICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVEZWJ1Z2dlclN0YXRlbWVudCgpKTtcbiAgICB9XG5cbiAgICAvLyAxMiBTdGF0ZW1lbnRzXG5cbiAgICBmdW5jdGlvbiBwYXJzZVN0YXRlbWVudCgpIHtcbiAgICAgICAgdmFyIHR5cGUgPSBsb29rYWhlYWQudHlwZSxcbiAgICAgICAgICAgIG1hcmtlcixcbiAgICAgICAgICAgIGV4cHIsXG4gICAgICAgICAgICBsYWJlbGVkQm9keSxcbiAgICAgICAgICAgIGtleTtcblxuICAgICAgICBpZiAodHlwZSA9PT0gVG9rZW4uRU9GKSB7XG4gICAgICAgICAgICB0aHJvd1VuZXhwZWN0ZWQobG9va2FoZWFkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlID09PSBUb2tlbi5QdW5jdHVhdG9yKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGxvb2thaGVhZC52YWx1ZSkge1xuICAgICAgICAgICAgY2FzZSAnOyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlRW1wdHlTdGF0ZW1lbnQoKTtcbiAgICAgICAgICAgIGNhc2UgJ3snOlxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUJsb2NrKCk7XG4gICAgICAgICAgICBjYXNlICcoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VFeHByZXNzaW9uU3RhdGVtZW50KCk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGUgPT09IFRva2VuLktleXdvcmQpIHtcbiAgICAgICAgICAgIHN3aXRjaCAobG9va2FoZWFkLnZhbHVlKSB7XG4gICAgICAgICAgICBjYXNlICdicmVhayc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlQnJlYWtTdGF0ZW1lbnQoKTtcbiAgICAgICAgICAgIGNhc2UgJ2NvbnRpbnVlJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VDb250aW51ZVN0YXRlbWVudCgpO1xuICAgICAgICAgICAgY2FzZSAnZGVidWdnZXInOlxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZURlYnVnZ2VyU3RhdGVtZW50KCk7XG4gICAgICAgICAgICBjYXNlICdkbyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlRG9XaGlsZVN0YXRlbWVudCgpO1xuICAgICAgICAgICAgY2FzZSAnZm9yJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VGb3JTdGF0ZW1lbnQoKTtcbiAgICAgICAgICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VGdW5jdGlvbkRlY2xhcmF0aW9uKCk7XG4gICAgICAgICAgICBjYXNlICdjbGFzcyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlQ2xhc3NEZWNsYXJhdGlvbigpO1xuICAgICAgICAgICAgY2FzZSAnaWYnOlxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUlmU3RhdGVtZW50KCk7XG4gICAgICAgICAgICBjYXNlICdyZXR1cm4nOlxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZVJldHVyblN0YXRlbWVudCgpO1xuICAgICAgICAgICAgY2FzZSAnc3dpdGNoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VTd2l0Y2hTdGF0ZW1lbnQoKTtcbiAgICAgICAgICAgIGNhc2UgJ3Rocm93JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VUaHJvd1N0YXRlbWVudCgpO1xuICAgICAgICAgICAgY2FzZSAndHJ5JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VUcnlTdGF0ZW1lbnQoKTtcbiAgICAgICAgICAgIGNhc2UgJ3Zhcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlVmFyaWFibGVTdGF0ZW1lbnQoKTtcbiAgICAgICAgICAgIGNhc2UgJ3doaWxlJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VXaGlsZVN0YXRlbWVudCgpO1xuICAgICAgICAgICAgY2FzZSAnd2l0aCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlV2l0aFN0YXRlbWVudCgpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG1hcmtlciA9IG1hcmtlckNyZWF0ZSgpO1xuICAgICAgICBleHByID0gcGFyc2VFeHByZXNzaW9uKCk7XG5cbiAgICAgICAgLy8gMTIuMTIgTGFiZWxsZWQgU3RhdGVtZW50c1xuICAgICAgICBpZiAoKGV4cHIudHlwZSA9PT0gU3ludGF4LklkZW50aWZpZXIpICYmIG1hdGNoKCc6JykpIHtcbiAgICAgICAgICAgIGxleCgpO1xuXG4gICAgICAgICAgICBrZXkgPSAnJCcgKyBleHByLm5hbWU7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHN0YXRlLmxhYmVsU2V0LCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3dFcnJvcih7fSwgTWVzc2FnZXMuUmVkZWNsYXJhdGlvbiwgJ0xhYmVsJywgZXhwci5uYW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3RhdGUubGFiZWxTZXRba2V5XSA9IHRydWU7XG4gICAgICAgICAgICBsYWJlbGVkQm9keSA9IHBhcnNlU3RhdGVtZW50KCk7XG4gICAgICAgICAgICBkZWxldGUgc3RhdGUubGFiZWxTZXRba2V5XTtcbiAgICAgICAgICAgIHJldHVybiBtYXJrZXJBcHBseShtYXJrZXIsIGRlbGVnYXRlLmNyZWF0ZUxhYmVsZWRTdGF0ZW1lbnQoZXhwciwgbGFiZWxlZEJvZHkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN1bWVTZW1pY29sb24oKTtcblxuICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVFeHByZXNzaW9uU3RhdGVtZW50KGV4cHIpKTtcbiAgICB9XG5cbiAgICAvLyAxMyBGdW5jdGlvbiBEZWZpbml0aW9uXG5cbiAgICBmdW5jdGlvbiBwYXJzZUNvbmNpc2VCb2R5KCkge1xuICAgICAgICBpZiAobWF0Y2goJ3snKSkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlRnVuY3Rpb25Tb3VyY2VFbGVtZW50cygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VGdW5jdGlvblNvdXJjZUVsZW1lbnRzKCkge1xuICAgICAgICB2YXIgc291cmNlRWxlbWVudCwgc291cmNlRWxlbWVudHMgPSBbXSwgdG9rZW4sIGRpcmVjdGl2ZSwgZmlyc3RSZXN0cmljdGVkLFxuICAgICAgICAgICAgb2xkTGFiZWxTZXQsIG9sZEluSXRlcmF0aW9uLCBvbGRJblN3aXRjaCwgb2xkSW5GdW5jdGlvbkJvZHksIG9sZFBhcmVudGhlc2l6ZWRDb3VudCxcbiAgICAgICAgICAgIG1hcmtlciA9IG1hcmtlckNyZWF0ZSgpO1xuXG4gICAgICAgIGV4cGVjdCgneycpO1xuXG4gICAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGxvb2thaGVhZC50eXBlICE9PSBUb2tlbi5TdHJpbmdMaXRlcmFsKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0b2tlbiA9IGxvb2thaGVhZDtcblxuICAgICAgICAgICAgc291cmNlRWxlbWVudCA9IHBhcnNlU291cmNlRWxlbWVudCgpO1xuICAgICAgICAgICAgc291cmNlRWxlbWVudHMucHVzaChzb3VyY2VFbGVtZW50KTtcbiAgICAgICAgICAgIGlmIChzb3VyY2VFbGVtZW50LmV4cHJlc3Npb24udHlwZSAhPT0gU3ludGF4LkxpdGVyYWwpIHtcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGlzIG5vdCBkaXJlY3RpdmVcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRpcmVjdGl2ZSA9IHNvdXJjZS5zbGljZSh0b2tlbi5yYW5nZVswXSArIDEsIHRva2VuLnJhbmdlWzFdIC0gMSk7XG4gICAgICAgICAgICBpZiAoZGlyZWN0aXZlID09PSAndXNlIHN0cmljdCcpIHtcbiAgICAgICAgICAgICAgICBzdHJpY3QgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmIChmaXJzdFJlc3RyaWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3dFcnJvclRvbGVyYW50KGZpcnN0UmVzdHJpY3RlZCwgTWVzc2FnZXMuU3RyaWN0T2N0YWxMaXRlcmFsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICghZmlyc3RSZXN0cmljdGVkICYmIHRva2VuLm9jdGFsKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpcnN0UmVzdHJpY3RlZCA9IHRva2VuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG9sZExhYmVsU2V0ID0gc3RhdGUubGFiZWxTZXQ7XG4gICAgICAgIG9sZEluSXRlcmF0aW9uID0gc3RhdGUuaW5JdGVyYXRpb247XG4gICAgICAgIG9sZEluU3dpdGNoID0gc3RhdGUuaW5Td2l0Y2g7XG4gICAgICAgIG9sZEluRnVuY3Rpb25Cb2R5ID0gc3RhdGUuaW5GdW5jdGlvbkJvZHk7XG4gICAgICAgIG9sZFBhcmVudGhlc2l6ZWRDb3VudCA9IHN0YXRlLnBhcmVudGhlc2l6ZWRDb3VudDtcblxuICAgICAgICBzdGF0ZS5sYWJlbFNldCA9IHt9O1xuICAgICAgICBzdGF0ZS5pbkl0ZXJhdGlvbiA9IGZhbHNlO1xuICAgICAgICBzdGF0ZS5pblN3aXRjaCA9IGZhbHNlO1xuICAgICAgICBzdGF0ZS5pbkZ1bmN0aW9uQm9keSA9IHRydWU7XG4gICAgICAgIHN0YXRlLnBhcmVudGhlc2l6ZWRDb3VudCA9IDA7XG5cbiAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAobWF0Y2goJ30nKSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc291cmNlRWxlbWVudCA9IHBhcnNlU291cmNlRWxlbWVudCgpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2VFbGVtZW50ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc291cmNlRWxlbWVudHMucHVzaChzb3VyY2VFbGVtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGV4cGVjdCgnfScpO1xuXG4gICAgICAgIHN0YXRlLmxhYmVsU2V0ID0gb2xkTGFiZWxTZXQ7XG4gICAgICAgIHN0YXRlLmluSXRlcmF0aW9uID0gb2xkSW5JdGVyYXRpb247XG4gICAgICAgIHN0YXRlLmluU3dpdGNoID0gb2xkSW5Td2l0Y2g7XG4gICAgICAgIHN0YXRlLmluRnVuY3Rpb25Cb2R5ID0gb2xkSW5GdW5jdGlvbkJvZHk7XG4gICAgICAgIHN0YXRlLnBhcmVudGhlc2l6ZWRDb3VudCA9IG9sZFBhcmVudGhlc2l6ZWRDb3VudDtcblxuICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVCbG9ja1N0YXRlbWVudChzb3VyY2VFbGVtZW50cykpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZhbGlkYXRlUGFyYW0ob3B0aW9ucywgcGFyYW0sIG5hbWUpIHtcbiAgICAgICAgdmFyIGtleSA9ICckJyArIG5hbWU7XG4gICAgICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgICAgIGlmIChpc1Jlc3RyaWN0ZWRXb3JkKG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5zdHJpY3RlZCA9IHBhcmFtO1xuICAgICAgICAgICAgICAgIG9wdGlvbnMubWVzc2FnZSA9IE1lc3NhZ2VzLlN0cmljdFBhcmFtTmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3B0aW9ucy5wYXJhbVNldCwga2V5KSkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuc3RyaWN0ZWQgPSBwYXJhbTtcbiAgICAgICAgICAgICAgICBvcHRpb25zLm1lc3NhZ2UgPSBNZXNzYWdlcy5TdHJpY3RQYXJhbUR1cGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIW9wdGlvbnMuZmlyc3RSZXN0cmljdGVkKSB7XG4gICAgICAgICAgICBpZiAoaXNSZXN0cmljdGVkV29yZChuYW1lKSkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuZmlyc3RSZXN0cmljdGVkID0gcGFyYW07XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5tZXNzYWdlID0gTWVzc2FnZXMuU3RyaWN0UGFyYW1OYW1lO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc1N0cmljdE1vZGVSZXNlcnZlZFdvcmQobmFtZSkpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmZpcnN0UmVzdHJpY3RlZCA9IHBhcmFtO1xuICAgICAgICAgICAgICAgIG9wdGlvbnMubWVzc2FnZSA9IE1lc3NhZ2VzLlN0cmljdFJlc2VydmVkV29yZDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMucGFyYW1TZXQsIGtleSkpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmZpcnN0UmVzdHJpY3RlZCA9IHBhcmFtO1xuICAgICAgICAgICAgICAgIG9wdGlvbnMubWVzc2FnZSA9IE1lc3NhZ2VzLlN0cmljdFBhcmFtRHVwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBvcHRpb25zLnBhcmFtU2V0W2tleV0gPSB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlUGFyYW0ob3B0aW9ucykge1xuICAgICAgICB2YXIgdG9rZW4sIHJlc3QsIHBhcmFtLCBkZWY7XG5cbiAgICAgICAgdG9rZW4gPSBsb29rYWhlYWQ7XG4gICAgICAgIGlmICh0b2tlbi52YWx1ZSA9PT0gJy4uLicpIHtcbiAgICAgICAgICAgIHRva2VuID0gbGV4KCk7XG4gICAgICAgICAgICByZXN0ID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtYXRjaCgnWycpKSB7XG4gICAgICAgICAgICBwYXJhbSA9IHBhcnNlQXJyYXlJbml0aWFsaXNlcigpO1xuICAgICAgICAgICAgcmVpbnRlcnByZXRBc0Rlc3RydWN0dXJlZFBhcmFtZXRlcihvcHRpb25zLCBwYXJhbSk7XG4gICAgICAgIH0gZWxzZSBpZiAobWF0Y2goJ3snKSkge1xuICAgICAgICAgICAgaWYgKHJlc3QpIHtcbiAgICAgICAgICAgICAgICB0aHJvd0Vycm9yKHt9LCBNZXNzYWdlcy5PYmplY3RQYXR0ZXJuQXNSZXN0UGFyYW1ldGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcmFtID0gcGFyc2VPYmplY3RJbml0aWFsaXNlcigpO1xuICAgICAgICAgICAgcmVpbnRlcnByZXRBc0Rlc3RydWN0dXJlZFBhcmFtZXRlcihvcHRpb25zLCBwYXJhbSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBUeXBpbmcgcmVzdCBwYXJhbXMgaXMgYXdrd2FyZCwgc28gcHVudGluZyBvbiB0aGF0IGZvciBub3dcbiAgICAgICAgICAgIHBhcmFtID1cbiAgICAgICAgICAgICAgICByZXN0XG4gICAgICAgICAgICAgICAgPyBwYXJzZVZhcmlhYmxlSWRlbnRpZmllcigpXG4gICAgICAgICAgICAgICAgOiBwYXJzZVR5cGVBbm5vdGF0YWJsZUlkZW50aWZpZXIoXG4gICAgICAgICAgICAgICAgICAgIGZhbHNlLCAvKiByZXF1aXJlVHlwZUFubm90YXRpb24gKi9cbiAgICAgICAgICAgICAgICAgICAgdHJ1ZSAvKiBjYW5CZU9wdGlvbmFsUGFyYW0gKi9cbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICB2YWxpZGF0ZVBhcmFtKG9wdGlvbnMsIHRva2VuLCB0b2tlbi52YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWF0Y2goJz0nKSkge1xuICAgICAgICAgICAgaWYgKHJlc3QpIHtcbiAgICAgICAgICAgICAgICB0aHJvd0Vycm9yVG9sZXJhbnQobG9va2FoZWFkLCBNZXNzYWdlcy5EZWZhdWx0UmVzdFBhcmFtZXRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXgoKTtcbiAgICAgICAgICAgIGRlZiA9IHBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24oKTtcbiAgICAgICAgICAgICsrb3B0aW9ucy5kZWZhdWx0Q291bnQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVzdCkge1xuICAgICAgICAgICAgaWYgKCFtYXRjaCgnKScpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3dFcnJvcih7fSwgTWVzc2FnZXMuUGFyYW1ldGVyQWZ0ZXJSZXN0UGFyYW1ldGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdGlvbnMucmVzdCA9IHBhcmFtO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgb3B0aW9ucy5wYXJhbXMucHVzaChwYXJhbSk7XG4gICAgICAgIG9wdGlvbnMuZGVmYXVsdHMucHVzaChkZWYpO1xuICAgICAgICByZXR1cm4gIW1hdGNoKCcpJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VQYXJhbXMoZmlyc3RSZXN0cmljdGVkKSB7XG4gICAgICAgIHZhciBvcHRpb25zLCBtYXJrZXIgPSBtYXJrZXJDcmVhdGUoKTtcblxuICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgcGFyYW1zOiBbXSxcbiAgICAgICAgICAgIGRlZmF1bHRDb3VudDogMCxcbiAgICAgICAgICAgIGRlZmF1bHRzOiBbXSxcbiAgICAgICAgICAgIHJlc3Q6IG51bGwsXG4gICAgICAgICAgICBmaXJzdFJlc3RyaWN0ZWQ6IGZpcnN0UmVzdHJpY3RlZFxuICAgICAgICB9O1xuXG4gICAgICAgIGV4cGVjdCgnKCcpO1xuXG4gICAgICAgIGlmICghbWF0Y2goJyknKSkge1xuICAgICAgICAgICAgb3B0aW9ucy5wYXJhbVNldCA9IHt9O1xuICAgICAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFwYXJzZVBhcmFtKG9wdGlvbnMpKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBleHBlY3QoJywnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGV4cGVjdCgnKScpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmRlZmF1bHRDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgb3B0aW9ucy5kZWZhdWx0cyA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1hdGNoKCc6JykpIHtcbiAgICAgICAgICAgIG9wdGlvbnMucmV0dXJuVHlwZSA9IHBhcnNlVHlwZUFubm90YXRpb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtYXJrZXJBcHBseShtYXJrZXIsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlRnVuY3Rpb25EZWNsYXJhdGlvbigpIHtcbiAgICAgICAgdmFyIGlkLCBib2R5LCB0b2tlbiwgdG1wLCBmaXJzdFJlc3RyaWN0ZWQsIG1lc3NhZ2UsIHByZXZpb3VzU3RyaWN0LCBwcmV2aW91c1lpZWxkQWxsb3dlZCwgZ2VuZXJhdG9yLFxuICAgICAgICAgICAgbWFya2VyID0gbWFya2VyQ3JlYXRlKCksIHBhcmFtZXRyaWNUeXBlO1xuXG4gICAgICAgIGV4cGVjdEtleXdvcmQoJ2Z1bmN0aW9uJyk7XG5cbiAgICAgICAgZ2VuZXJhdG9yID0gZmFsc2U7XG4gICAgICAgIGlmIChtYXRjaCgnKicpKSB7XG4gICAgICAgICAgICBsZXgoKTtcbiAgICAgICAgICAgIGdlbmVyYXRvciA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICB0b2tlbiA9IGxvb2thaGVhZDtcblxuICAgICAgICBpZCA9IHBhcnNlVmFyaWFibGVJZGVudGlmaWVyKCk7XG5cbiAgICAgICAgaWYgKG1hdGNoKCc8JykpIHtcbiAgICAgICAgICAgIHBhcmFtZXRyaWNUeXBlID0gcGFyc2VQYXJhbWV0cmljVHlwZUFubm90YXRpb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgICAgIGlmIChpc1Jlc3RyaWN0ZWRXb3JkKHRva2VuLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHRocm93RXJyb3JUb2xlcmFudCh0b2tlbiwgTWVzc2FnZXMuU3RyaWN0RnVuY3Rpb25OYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChpc1Jlc3RyaWN0ZWRXb3JkKHRva2VuLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGZpcnN0UmVzdHJpY3RlZCA9IHRva2VuO1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBNZXNzYWdlcy5TdHJpY3RGdW5jdGlvbk5hbWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzU3RyaWN0TW9kZVJlc2VydmVkV29yZCh0b2tlbi52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBmaXJzdFJlc3RyaWN0ZWQgPSB0b2tlbjtcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gTWVzc2FnZXMuU3RyaWN0UmVzZXJ2ZWRXb3JkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdG1wID0gcGFyc2VQYXJhbXMoZmlyc3RSZXN0cmljdGVkKTtcbiAgICAgICAgZmlyc3RSZXN0cmljdGVkID0gdG1wLmZpcnN0UmVzdHJpY3RlZDtcbiAgICAgICAgaWYgKHRtcC5tZXNzYWdlKSB7XG4gICAgICAgICAgICBtZXNzYWdlID0gdG1wLm1lc3NhZ2U7XG4gICAgICAgIH1cblxuICAgICAgICBwcmV2aW91c1N0cmljdCA9IHN0cmljdDtcbiAgICAgICAgcHJldmlvdXNZaWVsZEFsbG93ZWQgPSBzdGF0ZS55aWVsZEFsbG93ZWQ7XG4gICAgICAgIHN0YXRlLnlpZWxkQWxsb3dlZCA9IGdlbmVyYXRvcjtcblxuICAgICAgICBib2R5ID0gcGFyc2VGdW5jdGlvblNvdXJjZUVsZW1lbnRzKCk7XG5cbiAgICAgICAgaWYgKHN0cmljdCAmJiBmaXJzdFJlc3RyaWN0ZWQpIHtcbiAgICAgICAgICAgIHRocm93RXJyb3IoZmlyc3RSZXN0cmljdGVkLCBtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RyaWN0ICYmIHRtcC5zdHJpY3RlZCkge1xuICAgICAgICAgICAgdGhyb3dFcnJvclRvbGVyYW50KHRtcC5zdHJpY3RlZCwgbWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgc3RyaWN0ID0gcHJldmlvdXNTdHJpY3Q7XG4gICAgICAgIHN0YXRlLnlpZWxkQWxsb3dlZCA9IHByZXZpb3VzWWllbGRBbGxvd2VkO1xuXG4gICAgICAgIHJldHVybiBtYXJrZXJBcHBseShtYXJrZXIsIGRlbGVnYXRlLmNyZWF0ZUZ1bmN0aW9uRGVjbGFyYXRpb24oaWQsIHRtcC5wYXJhbXMsIHRtcC5kZWZhdWx0cywgYm9keSwgdG1wLnJlc3QsIGdlbmVyYXRvciwgZmFsc2UsXG4gICAgICAgICAgICB0bXAucmV0dXJuVHlwZSwgcGFyYW1ldHJpY1R5cGUpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZUZ1bmN0aW9uRXhwcmVzc2lvbigpIHtcbiAgICAgICAgdmFyIHRva2VuLCBpZCA9IG51bGwsIGZpcnN0UmVzdHJpY3RlZCwgbWVzc2FnZSwgdG1wLCBib2R5LCBwcmV2aW91c1N0cmljdCwgcHJldmlvdXNZaWVsZEFsbG93ZWQsIGdlbmVyYXRvcixcbiAgICAgICAgICAgIG1hcmtlciA9IG1hcmtlckNyZWF0ZSgpLCBwYXJhbWV0cmljVHlwZTtcblxuICAgICAgICBleHBlY3RLZXl3b3JkKCdmdW5jdGlvbicpO1xuXG4gICAgICAgIGdlbmVyYXRvciA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChtYXRjaCgnKicpKSB7XG4gICAgICAgICAgICBsZXgoKTtcbiAgICAgICAgICAgIGdlbmVyYXRvciA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIW1hdGNoKCcoJykpIHtcbiAgICAgICAgICAgIGlmICghbWF0Y2goJzwnKSkge1xuICAgICAgICAgICAgICAgIHRva2VuID0gbG9va2FoZWFkO1xuICAgICAgICAgICAgICAgIGlkID0gcGFyc2VWYXJpYWJsZUlkZW50aWZpZXIoKTtcblxuICAgICAgICAgICAgICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzUmVzdHJpY3RlZFdvcmQodG9rZW4udmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvd0Vycm9yVG9sZXJhbnQodG9rZW4sIE1lc3NhZ2VzLlN0cmljdEZ1bmN0aW9uTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNSZXN0cmljdGVkV29yZCh0b2tlbi52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0UmVzdHJpY3RlZCA9IHRva2VuO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IE1lc3NhZ2VzLlN0cmljdEZ1bmN0aW9uTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc1N0cmljdE1vZGVSZXNlcnZlZFdvcmQodG9rZW4udmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaXJzdFJlc3RyaWN0ZWQgPSB0b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBNZXNzYWdlcy5TdHJpY3RSZXNlcnZlZFdvcmQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChtYXRjaCgnPCcpKSB7XG4gICAgICAgICAgICAgICAgcGFyYW1ldHJpY1R5cGUgPSBwYXJzZVBhcmFtZXRyaWNUeXBlQW5ub3RhdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdG1wID0gcGFyc2VQYXJhbXMoZmlyc3RSZXN0cmljdGVkKTtcbiAgICAgICAgZmlyc3RSZXN0cmljdGVkID0gdG1wLmZpcnN0UmVzdHJpY3RlZDtcbiAgICAgICAgaWYgKHRtcC5tZXNzYWdlKSB7XG4gICAgICAgICAgICBtZXNzYWdlID0gdG1wLm1lc3NhZ2U7XG4gICAgICAgIH1cblxuICAgICAgICBwcmV2aW91c1N0cmljdCA9IHN0cmljdDtcbiAgICAgICAgcHJldmlvdXNZaWVsZEFsbG93ZWQgPSBzdGF0ZS55aWVsZEFsbG93ZWQ7XG4gICAgICAgIHN0YXRlLnlpZWxkQWxsb3dlZCA9IGdlbmVyYXRvcjtcblxuICAgICAgICBib2R5ID0gcGFyc2VGdW5jdGlvblNvdXJjZUVsZW1lbnRzKCk7XG5cbiAgICAgICAgaWYgKHN0cmljdCAmJiBmaXJzdFJlc3RyaWN0ZWQpIHtcbiAgICAgICAgICAgIHRocm93RXJyb3IoZmlyc3RSZXN0cmljdGVkLCBtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RyaWN0ICYmIHRtcC5zdHJpY3RlZCkge1xuICAgICAgICAgICAgdGhyb3dFcnJvclRvbGVyYW50KHRtcC5zdHJpY3RlZCwgbWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgc3RyaWN0ID0gcHJldmlvdXNTdHJpY3Q7XG4gICAgICAgIHN0YXRlLnlpZWxkQWxsb3dlZCA9IHByZXZpb3VzWWllbGRBbGxvd2VkO1xuXG4gICAgICAgIHJldHVybiBtYXJrZXJBcHBseShtYXJrZXIsIGRlbGVnYXRlLmNyZWF0ZUZ1bmN0aW9uRXhwcmVzc2lvbihpZCwgdG1wLnBhcmFtcywgdG1wLmRlZmF1bHRzLCBib2R5LCB0bXAucmVzdCwgZ2VuZXJhdG9yLCBmYWxzZSxcbiAgICAgICAgICAgIHRtcC5yZXR1cm5UeXBlLCBwYXJhbWV0cmljVHlwZSkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlWWllbGRFeHByZXNzaW9uKCkge1xuICAgICAgICB2YXIgeWllbGRUb2tlbiwgZGVsZWdhdGVGbGFnLCBleHByLCBtYXJrZXIgPSBtYXJrZXJDcmVhdGUoKTtcblxuICAgICAgICB5aWVsZFRva2VuID0gbGV4KCk7XG4gICAgICAgIGFzc2VydCh5aWVsZFRva2VuLnZhbHVlID09PSAneWllbGQnLCAnQ2FsbGVkIHBhcnNlWWllbGRFeHByZXNzaW9uIHdpdGggbm9uLXlpZWxkIGxvb2thaGVhZC4nKTtcblxuICAgICAgICBpZiAoIXN0YXRlLnlpZWxkQWxsb3dlZCkge1xuICAgICAgICAgICAgdGhyb3dFcnJvclRvbGVyYW50KHt9LCBNZXNzYWdlcy5JbGxlZ2FsWWllbGQpO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVsZWdhdGVGbGFnID0gZmFsc2U7XG4gICAgICAgIGlmIChtYXRjaCgnKicpKSB7XG4gICAgICAgICAgICBsZXgoKTtcbiAgICAgICAgICAgIGRlbGVnYXRlRmxhZyA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBleHByID0gcGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbigpO1xuXG4gICAgICAgIHJldHVybiBtYXJrZXJBcHBseShtYXJrZXIsIGRlbGVnYXRlLmNyZWF0ZVlpZWxkRXhwcmVzc2lvbihleHByLCBkZWxlZ2F0ZUZsYWcpKTtcbiAgICB9XG5cbiAgICAvLyAxNCBDbGFzc2VzXG5cbiAgICBmdW5jdGlvbiBwYXJzZU1ldGhvZERlZmluaXRpb24oZXhpc3RpbmdQcm9wTmFtZXMpIHtcbiAgICAgICAgdmFyIHRva2VuLCBrZXksIHBhcmFtLCBwcm9wVHlwZSwgaXNWYWxpZER1cGxpY2F0ZVByb3AgPSBmYWxzZSxcbiAgICAgICAgICAgIG1hcmtlciA9IG1hcmtlckNyZWF0ZSgpLCB0b2tlbjIsIHBhcmFtZXRyaWNUeXBlLFxuICAgICAgICAgICAgcGFyYW1ldHJpY1R5cGVNYXJrZXIsIGFubm90YXRpb25NYXJrZXI7XG5cbiAgICAgICAgaWYgKGxvb2thaGVhZC52YWx1ZSA9PT0gJ3N0YXRpYycpIHtcbiAgICAgICAgICAgIHByb3BUeXBlID0gQ2xhc3NQcm9wZXJ0eVR5cGUuc3RhdGljO1xuICAgICAgICAgICAgbGV4KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm9wVHlwZSA9IENsYXNzUHJvcGVydHlUeXBlLnByb3RvdHlwZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtYXRjaCgnKicpKSB7XG4gICAgICAgICAgICBsZXgoKTtcbiAgICAgICAgICAgIHJldHVybiBtYXJrZXJBcHBseShtYXJrZXIsIGRlbGVnYXRlLmNyZWF0ZU1ldGhvZERlZmluaXRpb24oXG4gICAgICAgICAgICAgICAgcHJvcFR5cGUsXG4gICAgICAgICAgICAgICAgJycsXG4gICAgICAgICAgICAgICAgcGFyc2VPYmplY3RQcm9wZXJ0eUtleSgpLFxuICAgICAgICAgICAgICAgIHBhcnNlUHJvcGVydHlNZXRob2RGdW5jdGlvbih7IGdlbmVyYXRvcjogdHJ1ZSB9KVxuICAgICAgICAgICAgKSk7XG4gICAgICAgIH1cblxuICAgICAgICB0b2tlbiA9IGxvb2thaGVhZDtcbiAgICAgICAgLy9wYXJhbWV0cmljVHlwZU1hcmtlciA9IG1hcmtlckNyZWF0ZSgpO1xuICAgICAgICBrZXkgPSBwYXJzZU9iamVjdFByb3BlcnR5S2V5KCk7XG5cbiAgICAgICAgaWYgKHRva2VuLnZhbHVlID09PSAnZ2V0JyAmJiAhbWF0Y2goJygnKSkge1xuICAgICAgICAgICAga2V5ID0gcGFyc2VPYmplY3RQcm9wZXJ0eUtleSgpO1xuXG4gICAgICAgICAgICAvLyBJdCBpcyBhIHN5bnRheCBlcnJvciBpZiBhbnkgb3RoZXIgcHJvcGVydGllcyBoYXZlIGEgbmFtZVxuICAgICAgICAgICAgLy8gZHVwbGljYXRpbmcgdGhpcyBvbmUgdW5sZXNzIHRoZXkgYXJlIGEgc2V0dGVyXG4gICAgICAgICAgICBpZiAoZXhpc3RpbmdQcm9wTmFtZXNbcHJvcFR5cGVdLmhhc093blByb3BlcnR5KGtleS5uYW1lKSkge1xuICAgICAgICAgICAgICAgIGlzVmFsaWREdXBsaWNhdGVQcm9wID1cbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlcmUgaXNuJ3QgYWxyZWFkeSBhIGdldHRlciBmb3IgdGhpcyBwcm9wXG4gICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nUHJvcE5hbWVzW3Byb3BUeXBlXVtrZXkubmFtZV0uZ2V0ID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlcmUgaXNuJ3QgYWxyZWFkeSBhIGRhdGEgcHJvcCBieSB0aGlzIG5hbWVcbiAgICAgICAgICAgICAgICAgICAgJiYgZXhpc3RpbmdQcm9wTmFtZXNbcHJvcFR5cGVdW2tleS5uYW1lXS5kYXRhID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIG9ubHkgZXhpc3RpbmcgcHJvcCBieSB0aGlzIG5hbWUgaXMgYSBzZXR0ZXJcbiAgICAgICAgICAgICAgICAgICAgJiYgZXhpc3RpbmdQcm9wTmFtZXNbcHJvcFR5cGVdW2tleS5uYW1lXS5zZXQgIT09IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWREdXBsaWNhdGVQcm9wKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93RXJyb3Ioa2V5LCBNZXNzYWdlcy5JbGxlZ2FsRHVwbGljYXRlQ2xhc3NQcm9wZXJ0eSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBleGlzdGluZ1Byb3BOYW1lc1twcm9wVHlwZV1ba2V5Lm5hbWVdID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBleGlzdGluZ1Byb3BOYW1lc1twcm9wVHlwZV1ba2V5Lm5hbWVdLmdldCA9IHRydWU7XG5cbiAgICAgICAgICAgIGV4cGVjdCgnKCcpO1xuICAgICAgICAgICAgZXhwZWN0KCcpJyk7XG4gICAgICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVNZXRob2REZWZpbml0aW9uKFxuICAgICAgICAgICAgICAgIHByb3BUeXBlLFxuICAgICAgICAgICAgICAgICdnZXQnLFxuICAgICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgICBwYXJzZVByb3BlcnR5RnVuY3Rpb24oeyBnZW5lcmF0b3I6IGZhbHNlIH0pXG4gICAgICAgICAgICApKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodG9rZW4udmFsdWUgPT09ICdzZXQnICYmICFtYXRjaCgnKCcpKSB7XG4gICAgICAgICAgICBrZXkgPSBwYXJzZU9iamVjdFByb3BlcnR5S2V5KCk7XG5cbiAgICAgICAgICAgIC8vIEl0IGlzIGEgc3ludGF4IGVycm9yIGlmIGFueSBvdGhlciBwcm9wZXJ0aWVzIGhhdmUgYSBuYW1lXG4gICAgICAgICAgICAvLyBkdXBsaWNhdGluZyB0aGlzIG9uZSB1bmxlc3MgdGhleSBhcmUgYSBnZXR0ZXJcbiAgICAgICAgICAgIGlmIChleGlzdGluZ1Byb3BOYW1lc1twcm9wVHlwZV0uaGFzT3duUHJvcGVydHkoa2V5Lm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgaXNWYWxpZER1cGxpY2F0ZVByb3AgPVxuICAgICAgICAgICAgICAgICAgICAvLyBUaGVyZSBpc24ndCBhbHJlYWR5IGEgc2V0dGVyIGZvciB0aGlzIHByb3BcbiAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdQcm9wTmFtZXNbcHJvcFR5cGVdW2tleS5uYW1lXS5zZXQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAvLyBUaGVyZSBpc24ndCBhbHJlYWR5IGEgZGF0YSBwcm9wIGJ5IHRoaXMgbmFtZVxuICAgICAgICAgICAgICAgICAgICAmJiBleGlzdGluZ1Byb3BOYW1lc1twcm9wVHlwZV1ba2V5Lm5hbWVdLmRhdGEgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgb25seSBleGlzdGluZyBwcm9wIGJ5IHRoaXMgbmFtZSBpcyBhIGdldHRlclxuICAgICAgICAgICAgICAgICAgICAmJiBleGlzdGluZ1Byb3BOYW1lc1twcm9wVHlwZV1ba2V5Lm5hbWVdLmdldCAhPT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZER1cGxpY2F0ZVByb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3dFcnJvcihrZXksIE1lc3NhZ2VzLklsbGVnYWxEdXBsaWNhdGVDbGFzc1Byb3BlcnR5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGV4aXN0aW5nUHJvcE5hbWVzW3Byb3BUeXBlXVtrZXkubmFtZV0gPSB7fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGV4aXN0aW5nUHJvcE5hbWVzW3Byb3BUeXBlXVtrZXkubmFtZV0uc2V0ID0gdHJ1ZTtcblxuICAgICAgICAgICAgZXhwZWN0KCcoJyk7XG4gICAgICAgICAgICB0b2tlbiA9IGxvb2thaGVhZDtcbiAgICAgICAgICAgIHBhcmFtID0gWyBwYXJzZVR5cGVBbm5vdGF0YWJsZUlkZW50aWZpZXIoKSBdO1xuICAgICAgICAgICAgZXhwZWN0KCcpJyk7XG4gICAgICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVNZXRob2REZWZpbml0aW9uKFxuICAgICAgICAgICAgICAgIHByb3BUeXBlLFxuICAgICAgICAgICAgICAgICdzZXQnLFxuICAgICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgICBwYXJzZVByb3BlcnR5RnVuY3Rpb24oeyBwYXJhbXM6IHBhcmFtLCBnZW5lcmF0b3I6IGZhbHNlLCBuYW1lOiB0b2tlbiB9KVxuICAgICAgICAgICAgKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWF0Y2goJzwnKSkge1xuICAgICAgICAgICAgcGFyYW1ldHJpY1R5cGUgPSBwYXJzZVBhcmFtZXRyaWNUeXBlQW5ub3RhdGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSXQgaXMgYSBzeW50YXggZXJyb3IgaWYgYW55IG90aGVyIHByb3BlcnRpZXMgaGF2ZSB0aGUgc2FtZSBuYW1lIGFzIGFcbiAgICAgICAgLy8gbm9uLWdldHRlciwgbm9uLXNldHRlciBtZXRob2RcbiAgICAgICAgaWYgKGV4aXN0aW5nUHJvcE5hbWVzW3Byb3BUeXBlXS5oYXNPd25Qcm9wZXJ0eShrZXkubmFtZSkpIHtcbiAgICAgICAgICAgIHRocm93RXJyb3Ioa2V5LCBNZXNzYWdlcy5JbGxlZ2FsRHVwbGljYXRlQ2xhc3NQcm9wZXJ0eSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBleGlzdGluZ1Byb3BOYW1lc1twcm9wVHlwZV1ba2V5Lm5hbWVdID0ge307XG4gICAgICAgIH1cbiAgICAgICAgZXhpc3RpbmdQcm9wTmFtZXNbcHJvcFR5cGVdW2tleS5uYW1lXS5kYXRhID0gdHJ1ZTtcblxuICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVNZXRob2REZWZpbml0aW9uKFxuICAgICAgICAgICAgcHJvcFR5cGUsXG4gICAgICAgICAgICAnJyxcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIHBhcnNlUHJvcGVydHlNZXRob2RGdW5jdGlvbih7XG4gICAgICAgICAgICAgICAgZ2VuZXJhdG9yOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBwYXJhbWV0cmljVHlwZTogcGFyYW1ldHJpY1R5cGVcbiAgICAgICAgICAgIH0pXG4gICAgICAgICkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlQ2xhc3NQcm9wZXJ0eShleGlzdGluZ1Byb3BOYW1lcykge1xuICAgICAgICB2YXIgbWFya2VyID0gbWFya2VyQ3JlYXRlKCksIHByb3BlcnR5SWRlbnRpZmllcjtcblxuICAgICAgICBwcm9wZXJ0eUlkZW50aWZpZXIgPSBwYXJzZVR5cGVBbm5vdGF0YWJsZUlkZW50aWZpZXIoKTtcbiAgICAgICAgZXhwZWN0KCc7Jyk7XG5cbiAgICAgICAgcmV0dXJuIG1hcmtlckFwcGx5KG1hcmtlciwgZGVsZWdhdGUuY3JlYXRlQ2xhc3NQcm9wZXJ0eShcbiAgICAgICAgICAgIHByb3BlcnR5SWRlbnRpZmllclxuICAgICAgICApKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZUNsYXNzRWxlbWVudChleGlzdGluZ1Byb3BzKSB7XG4gICAgICAgIGlmIChtYXRjaCgnOycpKSB7XG4gICAgICAgICAgICBsZXgoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkb3VibGVMb29rYWhlYWQgPSBsb29rYWhlYWQyKCk7XG4gICAgICAgIGlmIChkb3VibGVMb29rYWhlYWQudHlwZSA9PT0gVG9rZW4uUHVuY3R1YXRvcikge1xuICAgICAgICAgICAgaWYgKGRvdWJsZUxvb2thaGVhZC52YWx1ZSA9PT0gJzonKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlQ2xhc3NQcm9wZXJ0eShleGlzdGluZ1Byb3BzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwYXJzZU1ldGhvZERlZmluaXRpb24oZXhpc3RpbmdQcm9wcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VDbGFzc0JvZHkoKSB7XG4gICAgICAgIHZhciBjbGFzc0VsZW1lbnQsIGNsYXNzRWxlbWVudHMgPSBbXSwgZXhpc3RpbmdQcm9wcyA9IHt9LCBtYXJrZXIgPSBtYXJrZXJDcmVhdGUoKTtcblxuICAgICAgICBleGlzdGluZ1Byb3BzW0NsYXNzUHJvcGVydHlUeXBlLnN0YXRpY10gPSB7fTtcbiAgICAgICAgZXhpc3RpbmdQcm9wc1tDbGFzc1Byb3BlcnR5VHlwZS5wcm90b3R5cGVdID0ge307XG5cbiAgICAgICAgZXhwZWN0KCd7Jyk7XG5cbiAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAobWF0Y2goJ30nKSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2xhc3NFbGVtZW50ID0gcGFyc2VDbGFzc0VsZW1lbnQoZXhpc3RpbmdQcm9wcyk7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2xhc3NFbGVtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGNsYXNzRWxlbWVudHMucHVzaChjbGFzc0VsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZXhwZWN0KCd9Jyk7XG5cbiAgICAgICAgcmV0dXJuIG1hcmtlckFwcGx5KG1hcmtlciwgZGVsZWdhdGUuY3JlYXRlQ2xhc3NCb2R5KGNsYXNzRWxlbWVudHMpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZUNsYXNzRXhwcmVzc2lvbigpIHtcbiAgICAgICAgdmFyIGlkLCBwcmV2aW91c1lpZWxkQWxsb3dlZCwgc3VwZXJDbGFzcyA9IG51bGwsIG1hcmtlciA9IG1hcmtlckNyZWF0ZSgpLFxuICAgICAgICAgICAgcGFyYW1ldHJpY1R5cGU7XG5cbiAgICAgICAgZXhwZWN0S2V5d29yZCgnY2xhc3MnKTtcblxuICAgICAgICBpZiAoIW1hdGNoS2V5d29yZCgnZXh0ZW5kcycpICYmICFtYXRjaCgneycpKSB7XG4gICAgICAgICAgICBpZCA9IHBhcnNlVmFyaWFibGVJZGVudGlmaWVyKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWF0Y2goJzwnKSkge1xuICAgICAgICAgICAgcGFyYW1ldHJpY1R5cGUgPSBwYXJzZVBhcmFtZXRyaWNUeXBlQW5ub3RhdGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1hdGNoS2V5d29yZCgnZXh0ZW5kcycpKSB7XG4gICAgICAgICAgICBleHBlY3RLZXl3b3JkKCdleHRlbmRzJyk7XG4gICAgICAgICAgICBwcmV2aW91c1lpZWxkQWxsb3dlZCA9IHN0YXRlLnlpZWxkQWxsb3dlZDtcbiAgICAgICAgICAgIHN0YXRlLnlpZWxkQWxsb3dlZCA9IGZhbHNlO1xuICAgICAgICAgICAgc3VwZXJDbGFzcyA9IHBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24oKTtcbiAgICAgICAgICAgIHN0YXRlLnlpZWxkQWxsb3dlZCA9IHByZXZpb3VzWWllbGRBbGxvd2VkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1hcmtlckFwcGx5KG1hcmtlciwgZGVsZWdhdGUuY3JlYXRlQ2xhc3NFeHByZXNzaW9uKGlkLCBzdXBlckNsYXNzLCBwYXJzZUNsYXNzQm9keSgpLCBwYXJhbWV0cmljVHlwZSkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlQ2xhc3NEZWNsYXJhdGlvbigpIHtcbiAgICAgICAgdmFyIGlkLCBwcmV2aW91c1lpZWxkQWxsb3dlZCwgc3VwZXJDbGFzcyA9IG51bGwsIG1hcmtlciA9IG1hcmtlckNyZWF0ZSgpLFxuICAgICAgICAgICAgcGFyYW1ldHJpY1R5cGUsIHN1cGVyUGFyYW1ldHJpY1R5cGU7XG5cbiAgICAgICAgZXhwZWN0S2V5d29yZCgnY2xhc3MnKTtcblxuICAgICAgICBpZCA9IHBhcnNlVmFyaWFibGVJZGVudGlmaWVyKCk7XG5cbiAgICAgICAgaWYgKG1hdGNoKCc8JykpIHtcbiAgICAgICAgICAgIHBhcmFtZXRyaWNUeXBlID0gcGFyc2VQYXJhbWV0cmljVHlwZUFubm90YXRpb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtYXRjaEtleXdvcmQoJ2V4dGVuZHMnKSkge1xuICAgICAgICAgICAgZXhwZWN0S2V5d29yZCgnZXh0ZW5kcycpO1xuICAgICAgICAgICAgcHJldmlvdXNZaWVsZEFsbG93ZWQgPSBzdGF0ZS55aWVsZEFsbG93ZWQ7XG4gICAgICAgICAgICBzdGF0ZS55aWVsZEFsbG93ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHN1cGVyQ2xhc3MgPSBwYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKCk7XG4gICAgICAgICAgICBzdGF0ZS55aWVsZEFsbG93ZWQgPSBwcmV2aW91c1lpZWxkQWxsb3dlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtYXJrZXJBcHBseShtYXJrZXIsIGRlbGVnYXRlLmNyZWF0ZUNsYXNzRGVjbGFyYXRpb24oaWQsIHN1cGVyQ2xhc3MsIHBhcnNlQ2xhc3NCb2R5KCksIHBhcmFtZXRyaWNUeXBlLCBzdXBlclBhcmFtZXRyaWNUeXBlKSk7XG4gICAgfVxuXG4gICAgLy8gMTUgUHJvZ3JhbVxuXG4gICAgZnVuY3Rpb24gbWF0Y2hNb2R1bGVEZWNsYXJhdGlvbigpIHtcbiAgICAgICAgdmFyIGlkO1xuICAgICAgICBpZiAobWF0Y2hDb250ZXh0dWFsS2V5d29yZCgnbW9kdWxlJykpIHtcbiAgICAgICAgICAgIGlkID0gbG9va2FoZWFkMigpO1xuICAgICAgICAgICAgcmV0dXJuIGlkLnR5cGUgPT09IFRva2VuLlN0cmluZ0xpdGVyYWwgfHwgaWQudHlwZSA9PT0gVG9rZW4uSWRlbnRpZmllcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VTb3VyY2VFbGVtZW50KCkge1xuICAgICAgICBpZiAobG9va2FoZWFkLnR5cGUgPT09IFRva2VuLktleXdvcmQpIHtcbiAgICAgICAgICAgIHN3aXRjaCAobG9va2FoZWFkLnZhbHVlKSB7XG4gICAgICAgICAgICBjYXNlICdjb25zdCc6XG4gICAgICAgICAgICBjYXNlICdsZXQnOlxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUNvbnN0TGV0RGVjbGFyYXRpb24obG9va2FoZWFkLnZhbHVlKTtcbiAgICAgICAgICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VGdW5jdGlvbkRlY2xhcmF0aW9uKCk7XG4gICAgICAgICAgICBjYXNlICdleHBvcnQnOlxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUV4cG9ydERlY2xhcmF0aW9uKCk7XG4gICAgICAgICAgICBjYXNlICdpbXBvcnQnOlxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUltcG9ydERlY2xhcmF0aW9uKCk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZVN0YXRlbWVudCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1hdGNoTW9kdWxlRGVjbGFyYXRpb24oKSkge1xuICAgICAgICAgICAgdGhyb3dFcnJvcih7fSwgTWVzc2FnZXMuTmVzdGVkTW9kdWxlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsb29rYWhlYWQudHlwZSAhPT0gVG9rZW4uRU9GKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VTdGF0ZW1lbnQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlUHJvZ3JhbUVsZW1lbnQoKSB7XG4gICAgICAgIGlmIChsb29rYWhlYWQudHlwZSA9PT0gVG9rZW4uS2V5d29yZCkge1xuICAgICAgICAgICAgc3dpdGNoIChsb29rYWhlYWQudmFsdWUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2V4cG9ydCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlRXhwb3J0RGVjbGFyYXRpb24oKTtcbiAgICAgICAgICAgIGNhc2UgJ2ltcG9ydCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW1wb3J0RGVjbGFyYXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtYXRjaE1vZHVsZURlY2xhcmF0aW9uKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZU1vZHVsZURlY2xhcmF0aW9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGFyc2VTb3VyY2VFbGVtZW50KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VQcm9ncmFtRWxlbWVudHMoKSB7XG4gICAgICAgIHZhciBzb3VyY2VFbGVtZW50LCBzb3VyY2VFbGVtZW50cyA9IFtdLCB0b2tlbiwgZGlyZWN0aXZlLCBmaXJzdFJlc3RyaWN0ZWQ7XG5cbiAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICB0b2tlbiA9IGxvb2thaGVhZDtcbiAgICAgICAgICAgIGlmICh0b2tlbi50eXBlICE9PSBUb2tlbi5TdHJpbmdMaXRlcmFsKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNvdXJjZUVsZW1lbnQgPSBwYXJzZVByb2dyYW1FbGVtZW50KCk7XG4gICAgICAgICAgICBzb3VyY2VFbGVtZW50cy5wdXNoKHNvdXJjZUVsZW1lbnQpO1xuICAgICAgICAgICAgaWYgKHNvdXJjZUVsZW1lbnQuZXhwcmVzc2lvbi50eXBlICE9PSBTeW50YXguTGl0ZXJhbCkge1xuICAgICAgICAgICAgICAgIC8vIHRoaXMgaXMgbm90IGRpcmVjdGl2ZVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGlyZWN0aXZlID0gc291cmNlLnNsaWNlKHRva2VuLnJhbmdlWzBdICsgMSwgdG9rZW4ucmFuZ2VbMV0gLSAxKTtcbiAgICAgICAgICAgIGlmIChkaXJlY3RpdmUgPT09ICd1c2Ugc3RyaWN0Jykge1xuICAgICAgICAgICAgICAgIHN0cmljdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKGZpcnN0UmVzdHJpY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvd0Vycm9yVG9sZXJhbnQoZmlyc3RSZXN0cmljdGVkLCBNZXNzYWdlcy5TdHJpY3RPY3RhbExpdGVyYWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCFmaXJzdFJlc3RyaWN0ZWQgJiYgdG9rZW4ub2N0YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RSZXN0cmljdGVkID0gdG9rZW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICBzb3VyY2VFbGVtZW50ID0gcGFyc2VQcm9ncmFtRWxlbWVudCgpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2VFbGVtZW50ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc291cmNlRWxlbWVudHMucHVzaChzb3VyY2VFbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc291cmNlRWxlbWVudHM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VNb2R1bGVFbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gcGFyc2VTb3VyY2VFbGVtZW50KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VNb2R1bGVFbGVtZW50cygpIHtcbiAgICAgICAgdmFyIGxpc3QgPSBbXSxcbiAgICAgICAgICAgIHN0YXRlbWVudDtcblxuICAgICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChtYXRjaCgnfScpKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGF0ZW1lbnQgPSBwYXJzZU1vZHVsZUVsZW1lbnQoKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3RhdGVtZW50ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGlzdC5wdXNoKHN0YXRlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbGlzdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZU1vZHVsZUJsb2NrKCkge1xuICAgICAgICB2YXIgYmxvY2ssIG1hcmtlciA9IG1hcmtlckNyZWF0ZSgpO1xuXG4gICAgICAgIGV4cGVjdCgneycpO1xuXG4gICAgICAgIGJsb2NrID0gcGFyc2VNb2R1bGVFbGVtZW50cygpO1xuXG4gICAgICAgIGV4cGVjdCgnfScpO1xuXG4gICAgICAgIHJldHVybiBtYXJrZXJBcHBseShtYXJrZXIsIGRlbGVnYXRlLmNyZWF0ZUJsb2NrU3RhdGVtZW50KGJsb2NrKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VQcm9ncmFtKCkge1xuICAgICAgICB2YXIgYm9keSwgbWFya2VyID0gbWFya2VyQ3JlYXRlKCk7XG4gICAgICAgIHN0cmljdCA9IGZhbHNlO1xuICAgICAgICBwZWVrKCk7XG4gICAgICAgIGJvZHkgPSBwYXJzZVByb2dyYW1FbGVtZW50cygpO1xuICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVQcm9ncmFtKGJvZHkpKTtcbiAgICB9XG5cbiAgICAvLyBUaGUgZm9sbG93aW5nIGZ1bmN0aW9ucyBhcmUgbmVlZGVkIG9ubHkgd2hlbiB0aGUgb3B0aW9uIHRvIHByZXNlcnZlXG4gICAgLy8gdGhlIGNvbW1lbnRzIGlzIGFjdGl2ZS5cblxuICAgIGZ1bmN0aW9uIGFkZENvbW1lbnQodHlwZSwgdmFsdWUsIHN0YXJ0LCBlbmQsIGxvYykge1xuICAgICAgICB2YXIgY29tbWVudDtcblxuICAgICAgICBhc3NlcnQodHlwZW9mIHN0YXJ0ID09PSAnbnVtYmVyJywgJ0NvbW1lbnQgbXVzdCBoYXZlIHZhbGlkIHBvc2l0aW9uJyk7XG5cbiAgICAgICAgLy8gQmVjYXVzZSB0aGUgd2F5IHRoZSBhY3R1YWwgdG9rZW4gaXMgc2Nhbm5lZCwgb2Z0ZW4gdGhlIGNvbW1lbnRzXG4gICAgICAgIC8vIChpZiBhbnkpIGFyZSBza2lwcGVkIHR3aWNlIGR1cmluZyB0aGUgbGV4aWNhbCBhbmFseXNpcy5cbiAgICAgICAgLy8gVGh1cywgd2UgbmVlZCB0byBza2lwIGFkZGluZyBhIGNvbW1lbnQgaWYgdGhlIGNvbW1lbnQgYXJyYXkgYWxyZWFkeVxuICAgICAgICAvLyBoYW5kbGVkIGl0LlxuICAgICAgICBpZiAoc3RhdGUubGFzdENvbW1lbnRTdGFydCA+PSBzdGFydCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLmxhc3RDb21tZW50U3RhcnQgPSBzdGFydDtcblxuICAgICAgICBjb21tZW50ID0ge1xuICAgICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICB9O1xuICAgICAgICBpZiAoZXh0cmEucmFuZ2UpIHtcbiAgICAgICAgICAgIGNvbW1lbnQucmFuZ2UgPSBbc3RhcnQsIGVuZF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV4dHJhLmxvYykge1xuICAgICAgICAgICAgY29tbWVudC5sb2MgPSBsb2M7XG4gICAgICAgIH1cbiAgICAgICAgZXh0cmEuY29tbWVudHMucHVzaChjb21tZW50KTtcbiAgICAgICAgaWYgKGV4dHJhLmF0dGFjaENvbW1lbnQpIHtcbiAgICAgICAgICAgIGV4dHJhLmxlYWRpbmdDb21tZW50cy5wdXNoKGNvbW1lbnQpO1xuICAgICAgICAgICAgZXh0cmEudHJhaWxpbmdDb21tZW50cy5wdXNoKGNvbW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2NhbkNvbW1lbnQoKSB7XG4gICAgICAgIHZhciBjb21tZW50LCBjaCwgbG9jLCBzdGFydCwgYmxvY2tDb21tZW50LCBsaW5lQ29tbWVudDtcblxuICAgICAgICBjb21tZW50ID0gJyc7XG4gICAgICAgIGJsb2NrQ29tbWVudCA9IGZhbHNlO1xuICAgICAgICBsaW5lQ29tbWVudCA9IGZhbHNlO1xuXG4gICAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgY2ggPSBzb3VyY2VbaW5kZXhdO1xuXG4gICAgICAgICAgICBpZiAobGluZUNvbW1lbnQpIHtcbiAgICAgICAgICAgICAgICBjaCA9IHNvdXJjZVtpbmRleCsrXTtcbiAgICAgICAgICAgICAgICBpZiAoaXNMaW5lVGVybWluYXRvcihjaC5jaGFyQ29kZUF0KDApKSkge1xuICAgICAgICAgICAgICAgICAgICBsb2MuZW5kID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogbGluZU51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogaW5kZXggLSBsaW5lU3RhcnQgLSAxXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGxpbmVDb21tZW50ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGFkZENvbW1lbnQoJ0xpbmUnLCBjb21tZW50LCBzdGFydCwgaW5kZXggLSAxLCBsb2MpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2ggPT09ICdcXHInICYmIHNvdXJjZVtpbmRleF0gPT09ICdcXG4nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICArK2luZGV4O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICsrbGluZU51bWJlcjtcbiAgICAgICAgICAgICAgICAgICAgbGluZVN0YXJ0ID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIGNvbW1lbnQgPSAnJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGluZGV4ID49IGxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBsaW5lQ29tbWVudCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBjb21tZW50ICs9IGNoO1xuICAgICAgICAgICAgICAgICAgICBsb2MuZW5kID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogbGluZU51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogbGVuZ3RoIC0gbGluZVN0YXJ0XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGFkZENvbW1lbnQoJ0xpbmUnLCBjb21tZW50LCBzdGFydCwgbGVuZ3RoLCBsb2MpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbW1lbnQgKz0gY2g7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChibG9ja0NvbW1lbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNMaW5lVGVybWluYXRvcihjaC5jaGFyQ29kZUF0KDApKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2ggPT09ICdcXHInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICArK2luZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudCArPSAnXFxyJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoY2ggIT09ICdcXHInIHx8IHNvdXJjZVtpbmRleF0gPT09ICdcXG4nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50ICs9IHNvdXJjZVtpbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICArK2xpbmVOdW1iZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICArK2luZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluZVN0YXJ0ID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPj0gbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3dFcnJvcih7fSwgTWVzc2FnZXMuVW5leHBlY3RlZFRva2VuLCAnSUxMRUdBTCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2ggPSBzb3VyY2VbaW5kZXgrK107XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA+PSBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93RXJyb3Ioe30sIE1lc3NhZ2VzLlVuZXhwZWN0ZWRUb2tlbiwgJ0lMTEVHQUwnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb21tZW50ICs9IGNoO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2ggPT09ICcqJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2ggPSBzb3VyY2VbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoID09PSAnLycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50ID0gY29tbWVudC5zdWJzdHIoMCwgY29tbWVudC5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBibG9ja0NvbW1lbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArK2luZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvYy5lbmQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmU6IGxpbmVOdW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogaW5kZXggLSBsaW5lU3RhcnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZENvbW1lbnQoJ0Jsb2NrJywgY29tbWVudCwgc3RhcnQsIGluZGV4LCBsb2MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnQgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2ggPT09ICcvJykge1xuICAgICAgICAgICAgICAgIGNoID0gc291cmNlW2luZGV4ICsgMV07XG4gICAgICAgICAgICAgICAgaWYgKGNoID09PSAnLycpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9jID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lOiBsaW5lTnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogaW5kZXggLSBsaW5lU3RhcnRcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBpbmRleDtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggKz0gMjtcbiAgICAgICAgICAgICAgICAgICAgbGluZUNvbW1lbnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPj0gbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2MuZW5kID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmU6IGxpbmVOdW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiBpbmRleCAtIGxpbmVTdGFydFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVDb21tZW50ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRDb21tZW50KCdMaW5lJywgY29tbWVudCwgc3RhcnQsIGluZGV4LCBsb2MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjaCA9PT0gJyonKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4ICs9IDI7XG4gICAgICAgICAgICAgICAgICAgIGJsb2NrQ29tbWVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGxvYyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogbGluZU51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW46IGluZGV4IC0gbGluZVN0YXJ0IC0gMlxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPj0gbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvd0Vycm9yKHt9LCBNZXNzYWdlcy5VbmV4cGVjdGVkVG9rZW4sICdJTExFR0FMJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzV2hpdGVTcGFjZShjaC5jaGFyQ29kZUF0KDApKSkge1xuICAgICAgICAgICAgICAgICsraW5kZXg7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzTGluZVRlcm1pbmF0b3IoY2guY2hhckNvZGVBdCgwKSkpIHtcbiAgICAgICAgICAgICAgICArK2luZGV4O1xuICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gICdcXHInICYmIHNvdXJjZVtpbmRleF0gPT09ICdcXG4nKSB7XG4gICAgICAgICAgICAgICAgICAgICsraW5kZXg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICsrbGluZU51bWJlcjtcbiAgICAgICAgICAgICAgICBsaW5lU3RhcnQgPSBpbmRleDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyAxNiBYSlNcblxuICAgIFhIVE1MRW50aXRpZXMgPSB7XG4gICAgICAgIHF1b3Q6ICdcXHUwMDIyJyxcbiAgICAgICAgYW1wOiAnJicsXG4gICAgICAgIGFwb3M6ICdcXHUwMDI3JyxcbiAgICAgICAgbHQ6ICc8JyxcbiAgICAgICAgZ3Q6ICc+JyxcbiAgICAgICAgbmJzcDogJ1xcdTAwQTAnLFxuICAgICAgICBpZXhjbDogJ1xcdTAwQTEnLFxuICAgICAgICBjZW50OiAnXFx1MDBBMicsXG4gICAgICAgIHBvdW5kOiAnXFx1MDBBMycsXG4gICAgICAgIGN1cnJlbjogJ1xcdTAwQTQnLFxuICAgICAgICB5ZW46ICdcXHUwMEE1JyxcbiAgICAgICAgYnJ2YmFyOiAnXFx1MDBBNicsXG4gICAgICAgIHNlY3Q6ICdcXHUwMEE3JyxcbiAgICAgICAgdW1sOiAnXFx1MDBBOCcsXG4gICAgICAgIGNvcHk6ICdcXHUwMEE5JyxcbiAgICAgICAgb3JkZjogJ1xcdTAwQUEnLFxuICAgICAgICBsYXF1bzogJ1xcdTAwQUInLFxuICAgICAgICBub3Q6ICdcXHUwMEFDJyxcbiAgICAgICAgc2h5OiAnXFx1MDBBRCcsXG4gICAgICAgIHJlZzogJ1xcdTAwQUUnLFxuICAgICAgICBtYWNyOiAnXFx1MDBBRicsXG4gICAgICAgIGRlZzogJ1xcdTAwQjAnLFxuICAgICAgICBwbHVzbW46ICdcXHUwMEIxJyxcbiAgICAgICAgc3VwMjogJ1xcdTAwQjInLFxuICAgICAgICBzdXAzOiAnXFx1MDBCMycsXG4gICAgICAgIGFjdXRlOiAnXFx1MDBCNCcsXG4gICAgICAgIG1pY3JvOiAnXFx1MDBCNScsXG4gICAgICAgIHBhcmE6ICdcXHUwMEI2JyxcbiAgICAgICAgbWlkZG90OiAnXFx1MDBCNycsXG4gICAgICAgIGNlZGlsOiAnXFx1MDBCOCcsXG4gICAgICAgIHN1cDE6ICdcXHUwMEI5JyxcbiAgICAgICAgb3JkbTogJ1xcdTAwQkEnLFxuICAgICAgICByYXF1bzogJ1xcdTAwQkInLFxuICAgICAgICBmcmFjMTQ6ICdcXHUwMEJDJyxcbiAgICAgICAgZnJhYzEyOiAnXFx1MDBCRCcsXG4gICAgICAgIGZyYWMzNDogJ1xcdTAwQkUnLFxuICAgICAgICBpcXVlc3Q6ICdcXHUwMEJGJyxcbiAgICAgICAgQWdyYXZlOiAnXFx1MDBDMCcsXG4gICAgICAgIEFhY3V0ZTogJ1xcdTAwQzEnLFxuICAgICAgICBBY2lyYzogJ1xcdTAwQzInLFxuICAgICAgICBBdGlsZGU6ICdcXHUwMEMzJyxcbiAgICAgICAgQXVtbDogJ1xcdTAwQzQnLFxuICAgICAgICBBcmluZzogJ1xcdTAwQzUnLFxuICAgICAgICBBRWxpZzogJ1xcdTAwQzYnLFxuICAgICAgICBDY2VkaWw6ICdcXHUwMEM3JyxcbiAgICAgICAgRWdyYXZlOiAnXFx1MDBDOCcsXG4gICAgICAgIEVhY3V0ZTogJ1xcdTAwQzknLFxuICAgICAgICBFY2lyYzogJ1xcdTAwQ0EnLFxuICAgICAgICBFdW1sOiAnXFx1MDBDQicsXG4gICAgICAgIElncmF2ZTogJ1xcdTAwQ0MnLFxuICAgICAgICBJYWN1dGU6ICdcXHUwMENEJyxcbiAgICAgICAgSWNpcmM6ICdcXHUwMENFJyxcbiAgICAgICAgSXVtbDogJ1xcdTAwQ0YnLFxuICAgICAgICBFVEg6ICdcXHUwMEQwJyxcbiAgICAgICAgTnRpbGRlOiAnXFx1MDBEMScsXG4gICAgICAgIE9ncmF2ZTogJ1xcdTAwRDInLFxuICAgICAgICBPYWN1dGU6ICdcXHUwMEQzJyxcbiAgICAgICAgT2NpcmM6ICdcXHUwMEQ0JyxcbiAgICAgICAgT3RpbGRlOiAnXFx1MDBENScsXG4gICAgICAgIE91bWw6ICdcXHUwMEQ2JyxcbiAgICAgICAgdGltZXM6ICdcXHUwMEQ3JyxcbiAgICAgICAgT3NsYXNoOiAnXFx1MDBEOCcsXG4gICAgICAgIFVncmF2ZTogJ1xcdTAwRDknLFxuICAgICAgICBVYWN1dGU6ICdcXHUwMERBJyxcbiAgICAgICAgVWNpcmM6ICdcXHUwMERCJyxcbiAgICAgICAgVXVtbDogJ1xcdTAwREMnLFxuICAgICAgICBZYWN1dGU6ICdcXHUwMEREJyxcbiAgICAgICAgVEhPUk46ICdcXHUwMERFJyxcbiAgICAgICAgc3psaWc6ICdcXHUwMERGJyxcbiAgICAgICAgYWdyYXZlOiAnXFx1MDBFMCcsXG4gICAgICAgIGFhY3V0ZTogJ1xcdTAwRTEnLFxuICAgICAgICBhY2lyYzogJ1xcdTAwRTInLFxuICAgICAgICBhdGlsZGU6ICdcXHUwMEUzJyxcbiAgICAgICAgYXVtbDogJ1xcdTAwRTQnLFxuICAgICAgICBhcmluZzogJ1xcdTAwRTUnLFxuICAgICAgICBhZWxpZzogJ1xcdTAwRTYnLFxuICAgICAgICBjY2VkaWw6ICdcXHUwMEU3JyxcbiAgICAgICAgZWdyYXZlOiAnXFx1MDBFOCcsXG4gICAgICAgIGVhY3V0ZTogJ1xcdTAwRTknLFxuICAgICAgICBlY2lyYzogJ1xcdTAwRUEnLFxuICAgICAgICBldW1sOiAnXFx1MDBFQicsXG4gICAgICAgIGlncmF2ZTogJ1xcdTAwRUMnLFxuICAgICAgICBpYWN1dGU6ICdcXHUwMEVEJyxcbiAgICAgICAgaWNpcmM6ICdcXHUwMEVFJyxcbiAgICAgICAgaXVtbDogJ1xcdTAwRUYnLFxuICAgICAgICBldGg6ICdcXHUwMEYwJyxcbiAgICAgICAgbnRpbGRlOiAnXFx1MDBGMScsXG4gICAgICAgIG9ncmF2ZTogJ1xcdTAwRjInLFxuICAgICAgICBvYWN1dGU6ICdcXHUwMEYzJyxcbiAgICAgICAgb2NpcmM6ICdcXHUwMEY0JyxcbiAgICAgICAgb3RpbGRlOiAnXFx1MDBGNScsXG4gICAgICAgIG91bWw6ICdcXHUwMEY2JyxcbiAgICAgICAgZGl2aWRlOiAnXFx1MDBGNycsXG4gICAgICAgIG9zbGFzaDogJ1xcdTAwRjgnLFxuICAgICAgICB1Z3JhdmU6ICdcXHUwMEY5JyxcbiAgICAgICAgdWFjdXRlOiAnXFx1MDBGQScsXG4gICAgICAgIHVjaXJjOiAnXFx1MDBGQicsXG4gICAgICAgIHV1bWw6ICdcXHUwMEZDJyxcbiAgICAgICAgeWFjdXRlOiAnXFx1MDBGRCcsXG4gICAgICAgIHRob3JuOiAnXFx1MDBGRScsXG4gICAgICAgIHl1bWw6ICdcXHUwMEZGJyxcbiAgICAgICAgT0VsaWc6ICdcXHUwMTUyJyxcbiAgICAgICAgb2VsaWc6ICdcXHUwMTUzJyxcbiAgICAgICAgU2Nhcm9uOiAnXFx1MDE2MCcsXG4gICAgICAgIHNjYXJvbjogJ1xcdTAxNjEnLFxuICAgICAgICBZdW1sOiAnXFx1MDE3OCcsXG4gICAgICAgIGZub2Y6ICdcXHUwMTkyJyxcbiAgICAgICAgY2lyYzogJ1xcdTAyQzYnLFxuICAgICAgICB0aWxkZTogJ1xcdTAyREMnLFxuICAgICAgICBBbHBoYTogJ1xcdTAzOTEnLFxuICAgICAgICBCZXRhOiAnXFx1MDM5MicsXG4gICAgICAgIEdhbW1hOiAnXFx1MDM5MycsXG4gICAgICAgIERlbHRhOiAnXFx1MDM5NCcsXG4gICAgICAgIEVwc2lsb246ICdcXHUwMzk1JyxcbiAgICAgICAgWmV0YTogJ1xcdTAzOTYnLFxuICAgICAgICBFdGE6ICdcXHUwMzk3JyxcbiAgICAgICAgVGhldGE6ICdcXHUwMzk4JyxcbiAgICAgICAgSW90YTogJ1xcdTAzOTknLFxuICAgICAgICBLYXBwYTogJ1xcdTAzOUEnLFxuICAgICAgICBMYW1iZGE6ICdcXHUwMzlCJyxcbiAgICAgICAgTXU6ICdcXHUwMzlDJyxcbiAgICAgICAgTnU6ICdcXHUwMzlEJyxcbiAgICAgICAgWGk6ICdcXHUwMzlFJyxcbiAgICAgICAgT21pY3JvbjogJ1xcdTAzOUYnLFxuICAgICAgICBQaTogJ1xcdTAzQTAnLFxuICAgICAgICBSaG86ICdcXHUwM0ExJyxcbiAgICAgICAgU2lnbWE6ICdcXHUwM0EzJyxcbiAgICAgICAgVGF1OiAnXFx1MDNBNCcsXG4gICAgICAgIFVwc2lsb246ICdcXHUwM0E1JyxcbiAgICAgICAgUGhpOiAnXFx1MDNBNicsXG4gICAgICAgIENoaTogJ1xcdTAzQTcnLFxuICAgICAgICBQc2k6ICdcXHUwM0E4JyxcbiAgICAgICAgT21lZ2E6ICdcXHUwM0E5JyxcbiAgICAgICAgYWxwaGE6ICdcXHUwM0IxJyxcbiAgICAgICAgYmV0YTogJ1xcdTAzQjInLFxuICAgICAgICBnYW1tYTogJ1xcdTAzQjMnLFxuICAgICAgICBkZWx0YTogJ1xcdTAzQjQnLFxuICAgICAgICBlcHNpbG9uOiAnXFx1MDNCNScsXG4gICAgICAgIHpldGE6ICdcXHUwM0I2JyxcbiAgICAgICAgZXRhOiAnXFx1MDNCNycsXG4gICAgICAgIHRoZXRhOiAnXFx1MDNCOCcsXG4gICAgICAgIGlvdGE6ICdcXHUwM0I5JyxcbiAgICAgICAga2FwcGE6ICdcXHUwM0JBJyxcbiAgICAgICAgbGFtYmRhOiAnXFx1MDNCQicsXG4gICAgICAgIG11OiAnXFx1MDNCQycsXG4gICAgICAgIG51OiAnXFx1MDNCRCcsXG4gICAgICAgIHhpOiAnXFx1MDNCRScsXG4gICAgICAgIG9taWNyb246ICdcXHUwM0JGJyxcbiAgICAgICAgcGk6ICdcXHUwM0MwJyxcbiAgICAgICAgcmhvOiAnXFx1MDNDMScsXG4gICAgICAgIHNpZ21hZjogJ1xcdTAzQzInLFxuICAgICAgICBzaWdtYTogJ1xcdTAzQzMnLFxuICAgICAgICB0YXU6ICdcXHUwM0M0JyxcbiAgICAgICAgdXBzaWxvbjogJ1xcdTAzQzUnLFxuICAgICAgICBwaGk6ICdcXHUwM0M2JyxcbiAgICAgICAgY2hpOiAnXFx1MDNDNycsXG4gICAgICAgIHBzaTogJ1xcdTAzQzgnLFxuICAgICAgICBvbWVnYTogJ1xcdTAzQzknLFxuICAgICAgICB0aGV0YXN5bTogJ1xcdTAzRDEnLFxuICAgICAgICB1cHNpaDogJ1xcdTAzRDInLFxuICAgICAgICBwaXY6ICdcXHUwM0Q2JyxcbiAgICAgICAgZW5zcDogJ1xcdTIwMDInLFxuICAgICAgICBlbXNwOiAnXFx1MjAwMycsXG4gICAgICAgIHRoaW5zcDogJ1xcdTIwMDknLFxuICAgICAgICB6d25qOiAnXFx1MjAwQycsXG4gICAgICAgIHp3ajogJ1xcdTIwMEQnLFxuICAgICAgICBscm06ICdcXHUyMDBFJyxcbiAgICAgICAgcmxtOiAnXFx1MjAwRicsXG4gICAgICAgIG5kYXNoOiAnXFx1MjAxMycsXG4gICAgICAgIG1kYXNoOiAnXFx1MjAxNCcsXG4gICAgICAgIGxzcXVvOiAnXFx1MjAxOCcsXG4gICAgICAgIHJzcXVvOiAnXFx1MjAxOScsXG4gICAgICAgIHNicXVvOiAnXFx1MjAxQScsXG4gICAgICAgIGxkcXVvOiAnXFx1MjAxQycsXG4gICAgICAgIHJkcXVvOiAnXFx1MjAxRCcsXG4gICAgICAgIGJkcXVvOiAnXFx1MjAxRScsXG4gICAgICAgIGRhZ2dlcjogJ1xcdTIwMjAnLFxuICAgICAgICBEYWdnZXI6ICdcXHUyMDIxJyxcbiAgICAgICAgYnVsbDogJ1xcdTIwMjInLFxuICAgICAgICBoZWxsaXA6ICdcXHUyMDI2JyxcbiAgICAgICAgcGVybWlsOiAnXFx1MjAzMCcsXG4gICAgICAgIHByaW1lOiAnXFx1MjAzMicsXG4gICAgICAgIFByaW1lOiAnXFx1MjAzMycsXG4gICAgICAgIGxzYXF1bzogJ1xcdTIwMzknLFxuICAgICAgICByc2FxdW86ICdcXHUyMDNBJyxcbiAgICAgICAgb2xpbmU6ICdcXHUyMDNFJyxcbiAgICAgICAgZnJhc2w6ICdcXHUyMDQ0JyxcbiAgICAgICAgZXVybzogJ1xcdTIwQUMnLFxuICAgICAgICBpbWFnZTogJ1xcdTIxMTEnLFxuICAgICAgICB3ZWllcnA6ICdcXHUyMTE4JyxcbiAgICAgICAgcmVhbDogJ1xcdTIxMUMnLFxuICAgICAgICB0cmFkZTogJ1xcdTIxMjInLFxuICAgICAgICBhbGVmc3ltOiAnXFx1MjEzNScsXG4gICAgICAgIGxhcnI6ICdcXHUyMTkwJyxcbiAgICAgICAgdWFycjogJ1xcdTIxOTEnLFxuICAgICAgICByYXJyOiAnXFx1MjE5MicsXG4gICAgICAgIGRhcnI6ICdcXHUyMTkzJyxcbiAgICAgICAgaGFycjogJ1xcdTIxOTQnLFxuICAgICAgICBjcmFycjogJ1xcdTIxQjUnLFxuICAgICAgICBsQXJyOiAnXFx1MjFEMCcsXG4gICAgICAgIHVBcnI6ICdcXHUyMUQxJyxcbiAgICAgICAgckFycjogJ1xcdTIxRDInLFxuICAgICAgICBkQXJyOiAnXFx1MjFEMycsXG4gICAgICAgIGhBcnI6ICdcXHUyMUQ0JyxcbiAgICAgICAgZm9yYWxsOiAnXFx1MjIwMCcsXG4gICAgICAgIHBhcnQ6ICdcXHUyMjAyJyxcbiAgICAgICAgZXhpc3Q6ICdcXHUyMjAzJyxcbiAgICAgICAgZW1wdHk6ICdcXHUyMjA1JyxcbiAgICAgICAgbmFibGE6ICdcXHUyMjA3JyxcbiAgICAgICAgaXNpbjogJ1xcdTIyMDgnLFxuICAgICAgICBub3RpbjogJ1xcdTIyMDknLFxuICAgICAgICBuaTogJ1xcdTIyMEInLFxuICAgICAgICBwcm9kOiAnXFx1MjIwRicsXG4gICAgICAgIHN1bTogJ1xcdTIyMTEnLFxuICAgICAgICBtaW51czogJ1xcdTIyMTInLFxuICAgICAgICBsb3dhc3Q6ICdcXHUyMjE3JyxcbiAgICAgICAgcmFkaWM6ICdcXHUyMjFBJyxcbiAgICAgICAgcHJvcDogJ1xcdTIyMUQnLFxuICAgICAgICBpbmZpbjogJ1xcdTIyMUUnLFxuICAgICAgICBhbmc6ICdcXHUyMjIwJyxcbiAgICAgICAgYW5kOiAnXFx1MjIyNycsXG4gICAgICAgIG9yOiAnXFx1MjIyOCcsXG4gICAgICAgIGNhcDogJ1xcdTIyMjknLFxuICAgICAgICBjdXA6ICdcXHUyMjJBJyxcbiAgICAgICAgJ2ludCc6ICdcXHUyMjJCJyxcbiAgICAgICAgdGhlcmU0OiAnXFx1MjIzNCcsXG4gICAgICAgIHNpbTogJ1xcdTIyM0MnLFxuICAgICAgICBjb25nOiAnXFx1MjI0NScsXG4gICAgICAgIGFzeW1wOiAnXFx1MjI0OCcsXG4gICAgICAgIG5lOiAnXFx1MjI2MCcsXG4gICAgICAgIGVxdWl2OiAnXFx1MjI2MScsXG4gICAgICAgIGxlOiAnXFx1MjI2NCcsXG4gICAgICAgIGdlOiAnXFx1MjI2NScsXG4gICAgICAgIHN1YjogJ1xcdTIyODInLFxuICAgICAgICBzdXA6ICdcXHUyMjgzJyxcbiAgICAgICAgbnN1YjogJ1xcdTIyODQnLFxuICAgICAgICBzdWJlOiAnXFx1MjI4NicsXG4gICAgICAgIHN1cGU6ICdcXHUyMjg3JyxcbiAgICAgICAgb3BsdXM6ICdcXHUyMjk1JyxcbiAgICAgICAgb3RpbWVzOiAnXFx1MjI5NycsXG4gICAgICAgIHBlcnA6ICdcXHUyMkE1JyxcbiAgICAgICAgc2RvdDogJ1xcdTIyQzUnLFxuICAgICAgICBsY2VpbDogJ1xcdTIzMDgnLFxuICAgICAgICByY2VpbDogJ1xcdTIzMDknLFxuICAgICAgICBsZmxvb3I6ICdcXHUyMzBBJyxcbiAgICAgICAgcmZsb29yOiAnXFx1MjMwQicsXG4gICAgICAgIGxhbmc6ICdcXHUyMzI5JyxcbiAgICAgICAgcmFuZzogJ1xcdTIzMkEnLFxuICAgICAgICBsb3o6ICdcXHUyNUNBJyxcbiAgICAgICAgc3BhZGVzOiAnXFx1MjY2MCcsXG4gICAgICAgIGNsdWJzOiAnXFx1MjY2MycsXG4gICAgICAgIGhlYXJ0czogJ1xcdTI2NjUnLFxuICAgICAgICBkaWFtczogJ1xcdTI2NjYnXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGdldFF1YWxpZmllZFhKU05hbWUob2JqZWN0KSB7XG4gICAgICAgIGlmIChvYmplY3QudHlwZSA9PT0gU3ludGF4LlhKU0lkZW50aWZpZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBvYmplY3QubmFtZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2JqZWN0LnR5cGUgPT09IFN5bnRheC5YSlNOYW1lc3BhY2VkTmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIG9iamVjdC5uYW1lc3BhY2UubmFtZSArICc6JyArIG9iamVjdC5uYW1lLm5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9iamVjdC50eXBlID09PSBTeW50YXguWEpTTWVtYmVyRXhwcmVzc2lvbikge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICBnZXRRdWFsaWZpZWRYSlNOYW1lKG9iamVjdC5vYmplY3QpICsgJy4nICtcbiAgICAgICAgICAgICAgICBnZXRRdWFsaWZpZWRYSlNOYW1lKG9iamVjdC5wcm9wZXJ0eSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1hKU0lkZW50aWZpZXJTdGFydChjaCkge1xuICAgICAgICAvLyBleGNsdWRlIGJhY2tzbGFzaCAoXFwpXG4gICAgICAgIHJldHVybiAoY2ggIT09IDkyKSAmJiBpc0lkZW50aWZpZXJTdGFydChjaCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNYSlNJZGVudGlmaWVyUGFydChjaCkge1xuICAgICAgICAvLyBleGNsdWRlIGJhY2tzbGFzaCAoXFwpIGFuZCBhZGQgaHlwaGVuICgtKVxuICAgICAgICByZXR1cm4gKGNoICE9PSA5MikgJiYgKGNoID09PSA0NSB8fCBpc0lkZW50aWZpZXJQYXJ0KGNoKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2NhblhKU0lkZW50aWZpZXIoKSB7XG4gICAgICAgIHZhciBjaCwgc3RhcnQsIHZhbHVlID0gJyc7XG5cbiAgICAgICAgc3RhcnQgPSBpbmRleDtcbiAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICBjaCA9IHNvdXJjZS5jaGFyQ29kZUF0KGluZGV4KTtcbiAgICAgICAgICAgIGlmICghaXNYSlNJZGVudGlmaWVyUGFydChjaCkpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhbHVlICs9IHNvdXJjZVtpbmRleCsrXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiBUb2tlbi5YSlNJZGVudGlmaWVyLFxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgbGluZU51bWJlcjogbGluZU51bWJlcixcbiAgICAgICAgICAgIGxpbmVTdGFydDogbGluZVN0YXJ0LFxuICAgICAgICAgICAgcmFuZ2U6IFtzdGFydCwgaW5kZXhdXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2NhblhKU0VudGl0eSgpIHtcbiAgICAgICAgdmFyIGNoLCBzdHIgPSAnJywgY291bnQgPSAwLCBlbnRpdHk7XG4gICAgICAgIGNoID0gc291cmNlW2luZGV4XTtcbiAgICAgICAgYXNzZXJ0KGNoID09PSAnJicsICdFbnRpdHkgbXVzdCBzdGFydCB3aXRoIGFuIGFtcGVyc2FuZCcpO1xuICAgICAgICBpbmRleCsrO1xuICAgICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGggJiYgY291bnQrKyA8IDEwKSB7XG4gICAgICAgICAgICBjaCA9IHNvdXJjZVtpbmRleCsrXTtcbiAgICAgICAgICAgIGlmIChjaCA9PT0gJzsnKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdHIgKz0gY2g7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RyWzBdID09PSAnIycgJiYgc3RyWzFdID09PSAneCcpIHtcbiAgICAgICAgICAgIGVudGl0eSA9IFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoc3RyLnN1YnN0cigyKSwgMTYpKTtcbiAgICAgICAgfSBlbHNlIGlmIChzdHJbMF0gPT09ICcjJykge1xuICAgICAgICAgICAgZW50aXR5ID0gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChzdHIuc3Vic3RyKDEpLCAxMCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZW50aXR5ID0gWEhUTUxFbnRpdGllc1tzdHJdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbnRpdHk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2NhblhKU1RleHQoc3RvcENoYXJzKSB7XG4gICAgICAgIHZhciBjaCwgc3RyID0gJycsIHN0YXJ0O1xuICAgICAgICBzdGFydCA9IGluZGV4O1xuICAgICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIGNoID0gc291cmNlW2luZGV4XTtcbiAgICAgICAgICAgIGlmIChzdG9wQ2hhcnMuaW5kZXhPZihjaCkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2ggPT09ICcmJykge1xuICAgICAgICAgICAgICAgIHN0ciArPSBzY2FuWEpTRW50aXR5KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgICAgICAgICAgaWYgKGNoID09PSAnXFxyJyAmJiBzb3VyY2VbaW5kZXhdID09PSAnXFxuJykge1xuICAgICAgICAgICAgICAgICAgICBzdHIgKz0gY2g7XG4gICAgICAgICAgICAgICAgICAgIGNoID0gc291cmNlW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGlzTGluZVRlcm1pbmF0b3IoY2guY2hhckNvZGVBdCgwKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgKytsaW5lTnVtYmVyO1xuICAgICAgICAgICAgICAgICAgICBsaW5lU3RhcnQgPSBpbmRleDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3RyICs9IGNoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiBUb2tlbi5YSlNUZXh0LFxuICAgICAgICAgICAgdmFsdWU6IHN0cixcbiAgICAgICAgICAgIGxpbmVOdW1iZXI6IGxpbmVOdW1iZXIsXG4gICAgICAgICAgICBsaW5lU3RhcnQ6IGxpbmVTdGFydCxcbiAgICAgICAgICAgIHJhbmdlOiBbc3RhcnQsIGluZGV4XVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjYW5YSlNTdHJpbmdMaXRlcmFsKCkge1xuICAgICAgICB2YXIgaW5uZXJUb2tlbiwgcXVvdGUsIHN0YXJ0O1xuXG4gICAgICAgIHF1b3RlID0gc291cmNlW2luZGV4XTtcbiAgICAgICAgYXNzZXJ0KChxdW90ZSA9PT0gJ1xcJycgfHwgcXVvdGUgPT09ICdcIicpLFxuICAgICAgICAgICAgJ1N0cmluZyBsaXRlcmFsIG11c3Qgc3RhcnRzIHdpdGggYSBxdW90ZScpO1xuXG4gICAgICAgIHN0YXJ0ID0gaW5kZXg7XG4gICAgICAgICsraW5kZXg7XG5cbiAgICAgICAgaW5uZXJUb2tlbiA9IHNjYW5YSlNUZXh0KFtxdW90ZV0pO1xuXG4gICAgICAgIGlmIChxdW90ZSAhPT0gc291cmNlW2luZGV4XSkge1xuICAgICAgICAgICAgdGhyb3dFcnJvcih7fSwgTWVzc2FnZXMuVW5leHBlY3RlZFRva2VuLCAnSUxMRUdBTCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgKytpbmRleDtcblxuICAgICAgICBpbm5lclRva2VuLnJhbmdlID0gW3N0YXJ0LCBpbmRleF07XG5cbiAgICAgICAgcmV0dXJuIGlubmVyVG9rZW47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQmV0d2VlbiBYSlMgb3BlbmluZyBhbmQgY2xvc2luZyB0YWdzIChlLmcuIDxmb28+SEVSRTwvZm9vPiksIGFueXRoaW5nIHRoYXRcbiAgICAgKiBpcyBub3QgYW5vdGhlciBYSlMgdGFnIGFuZCBpcyBub3QgYW4gZXhwcmVzc2lvbiB3cmFwcGVkIGJ5IHt9IGlzIHRleHQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWR2YW5jZVhKU0NoaWxkKCkge1xuICAgICAgICB2YXIgY2ggPSBzb3VyY2UuY2hhckNvZGVBdChpbmRleCk7XG5cbiAgICAgICAgLy8geyAoMTIzKSBhbmQgPCAoNjApXG4gICAgICAgIGlmIChjaCAhPT0gMTIzICYmIGNoICE9PSA2MCkge1xuICAgICAgICAgICAgcmV0dXJuIHNjYW5YSlNUZXh0KFsnPCcsICd7J10pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNjYW5QdW5jdHVhdG9yKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VYSlNJZGVudGlmaWVyKCkge1xuICAgICAgICB2YXIgdG9rZW4sIG1hcmtlciA9IG1hcmtlckNyZWF0ZSgpO1xuXG4gICAgICAgIGlmIChsb29rYWhlYWQudHlwZSAhPT0gVG9rZW4uWEpTSWRlbnRpZmllcikge1xuICAgICAgICAgICAgdGhyb3dVbmV4cGVjdGVkKGxvb2thaGVhZCk7XG4gICAgICAgIH1cblxuICAgICAgICB0b2tlbiA9IGxleCgpO1xuICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVYSlNJZGVudGlmaWVyKHRva2VuLnZhbHVlKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VYSlNOYW1lc3BhY2VkTmFtZSgpIHtcbiAgICAgICAgdmFyIG5hbWVzcGFjZSwgbmFtZSwgbWFya2VyID0gbWFya2VyQ3JlYXRlKCk7XG5cbiAgICAgICAgbmFtZXNwYWNlID0gcGFyc2VYSlNJZGVudGlmaWVyKCk7XG4gICAgICAgIGV4cGVjdCgnOicpO1xuICAgICAgICBuYW1lID0gcGFyc2VYSlNJZGVudGlmaWVyKCk7XG5cbiAgICAgICAgcmV0dXJuIG1hcmtlckFwcGx5KG1hcmtlciwgZGVsZWdhdGUuY3JlYXRlWEpTTmFtZXNwYWNlZE5hbWUobmFtZXNwYWNlLCBuYW1lKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VYSlNNZW1iZXJFeHByZXNzaW9uKCkge1xuICAgICAgICB2YXIgbWFya2VyID0gbWFya2VyQ3JlYXRlKCksXG4gICAgICAgICAgICBleHByID0gcGFyc2VYSlNJZGVudGlmaWVyKCk7XG5cbiAgICAgICAgd2hpbGUgKG1hdGNoKCcuJykpIHtcbiAgICAgICAgICAgIGxleCgpO1xuICAgICAgICAgICAgZXhwciA9IG1hcmtlckFwcGx5KG1hcmtlciwgZGVsZWdhdGUuY3JlYXRlWEpTTWVtYmVyRXhwcmVzc2lvbihleHByLCBwYXJzZVhKU0lkZW50aWZpZXIoKSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGV4cHI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VYSlNFbGVtZW50TmFtZSgpIHtcbiAgICAgICAgaWYgKGxvb2thaGVhZDIoKS52YWx1ZSA9PT0gJzonKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VYSlNOYW1lc3BhY2VkTmFtZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsb29rYWhlYWQyKCkudmFsdWUgPT09ICcuJykge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlWEpTTWVtYmVyRXhwcmVzc2lvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBhcnNlWEpTSWRlbnRpZmllcigpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlWEpTQXR0cmlidXRlTmFtZSgpIHtcbiAgICAgICAgaWYgKGxvb2thaGVhZDIoKS52YWx1ZSA9PT0gJzonKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VYSlNOYW1lc3BhY2VkTmFtZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBhcnNlWEpTSWRlbnRpZmllcigpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlWEpTQXR0cmlidXRlVmFsdWUoKSB7XG4gICAgICAgIHZhciB2YWx1ZSwgbWFya2VyO1xuICAgICAgICBpZiAobWF0Y2goJ3snKSkge1xuICAgICAgICAgICAgdmFsdWUgPSBwYXJzZVhKU0V4cHJlc3Npb25Db250YWluZXIoKTtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5leHByZXNzaW9uLnR5cGUgPT09IFN5bnRheC5YSlNFbXB0eUV4cHJlc3Npb24pIHtcbiAgICAgICAgICAgICAgICB0aHJvd0Vycm9yKFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgJ1hKUyBhdHRyaWJ1dGVzIG11c3Qgb25seSBiZSBhc3NpZ25lZCBhIG5vbi1lbXB0eSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdleHByZXNzaW9uJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobWF0Y2goJzwnKSkge1xuICAgICAgICAgICAgdmFsdWUgPSBwYXJzZVhKU0VsZW1lbnQoKTtcbiAgICAgICAgfSBlbHNlIGlmIChsb29rYWhlYWQudHlwZSA9PT0gVG9rZW4uWEpTVGV4dCkge1xuICAgICAgICAgICAgbWFya2VyID0gbWFya2VyQ3JlYXRlKCk7XG4gICAgICAgICAgICB2YWx1ZSA9IG1hcmtlckFwcGx5KG1hcmtlciwgZGVsZWdhdGUuY3JlYXRlTGl0ZXJhbChsZXgoKSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3dFcnJvcih7fSwgTWVzc2FnZXMuSW52YWxpZFhKU0F0dHJpYnV0ZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VYSlNFbXB0eUV4cHJlc3Npb24oKSB7XG4gICAgICAgIHZhciBtYXJrZXIgPSBtYXJrZXJDcmVhdGVQcmVzZXJ2ZVdoaXRlc3BhY2UoKTtcbiAgICAgICAgd2hpbGUgKHNvdXJjZS5jaGFyQXQoaW5kZXgpICE9PSAnfScpIHtcbiAgICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1hcmtlckFwcGx5KG1hcmtlciwgZGVsZWdhdGUuY3JlYXRlWEpTRW1wdHlFeHByZXNzaW9uKCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlWEpTRXhwcmVzc2lvbkNvbnRhaW5lcigpIHtcbiAgICAgICAgdmFyIGV4cHJlc3Npb24sIG9yaWdJblhKU0NoaWxkLCBvcmlnSW5YSlNUYWcsIG1hcmtlciA9IG1hcmtlckNyZWF0ZSgpO1xuXG4gICAgICAgIG9yaWdJblhKU0NoaWxkID0gc3RhdGUuaW5YSlNDaGlsZDtcbiAgICAgICAgb3JpZ0luWEpTVGFnID0gc3RhdGUuaW5YSlNUYWc7XG4gICAgICAgIHN0YXRlLmluWEpTQ2hpbGQgPSBmYWxzZTtcbiAgICAgICAgc3RhdGUuaW5YSlNUYWcgPSBmYWxzZTtcblxuICAgICAgICBleHBlY3QoJ3snKTtcblxuICAgICAgICBpZiAobWF0Y2goJ30nKSkge1xuICAgICAgICAgICAgZXhwcmVzc2lvbiA9IHBhcnNlWEpTRW1wdHlFeHByZXNzaW9uKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBleHByZXNzaW9uID0gcGFyc2VFeHByZXNzaW9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZS5pblhKU0NoaWxkID0gb3JpZ0luWEpTQ2hpbGQ7XG4gICAgICAgIHN0YXRlLmluWEpTVGFnID0gb3JpZ0luWEpTVGFnO1xuXG4gICAgICAgIGV4cGVjdCgnfScpO1xuXG4gICAgICAgIHJldHVybiBtYXJrZXJBcHBseShtYXJrZXIsIGRlbGVnYXRlLmNyZWF0ZVhKU0V4cHJlc3Npb25Db250YWluZXIoZXhwcmVzc2lvbikpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlWEpTU3ByZWFkQXR0cmlidXRlKCkge1xuICAgICAgICB2YXIgZXhwcmVzc2lvbiwgb3JpZ0luWEpTQ2hpbGQsIG9yaWdJblhKU1RhZywgbWFya2VyID0gbWFya2VyQ3JlYXRlKCk7XG5cbiAgICAgICAgb3JpZ0luWEpTQ2hpbGQgPSBzdGF0ZS5pblhKU0NoaWxkO1xuICAgICAgICBvcmlnSW5YSlNUYWcgPSBzdGF0ZS5pblhKU1RhZztcbiAgICAgICAgc3RhdGUuaW5YSlNDaGlsZCA9IGZhbHNlO1xuICAgICAgICBzdGF0ZS5pblhKU1RhZyA9IGZhbHNlO1xuXG4gICAgICAgIGV4cGVjdCgneycpO1xuICAgICAgICBleHBlY3QoJy4uLicpO1xuXG4gICAgICAgIGV4cHJlc3Npb24gPSBwYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKCk7XG5cbiAgICAgICAgc3RhdGUuaW5YSlNDaGlsZCA9IG9yaWdJblhKU0NoaWxkO1xuICAgICAgICBzdGF0ZS5pblhKU1RhZyA9IG9yaWdJblhKU1RhZztcblxuICAgICAgICBleHBlY3QoJ30nKTtcblxuICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVYSlNTcHJlYWRBdHRyaWJ1dGUoZXhwcmVzc2lvbikpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlWEpTQXR0cmlidXRlKCkge1xuICAgICAgICB2YXIgbmFtZSwgbWFya2VyO1xuXG4gICAgICAgIGlmIChtYXRjaCgneycpKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VYSlNTcHJlYWRBdHRyaWJ1dGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1hcmtlciA9IG1hcmtlckNyZWF0ZSgpO1xuXG4gICAgICAgIG5hbWUgPSBwYXJzZVhKU0F0dHJpYnV0ZU5hbWUoKTtcblxuICAgICAgICAvLyBIVE1MIGVtcHR5IGF0dHJpYnV0ZVxuICAgICAgICBpZiAobWF0Y2goJz0nKSkge1xuICAgICAgICAgICAgbGV4KCk7XG4gICAgICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVYSlNBdHRyaWJ1dGUobmFtZSwgcGFyc2VYSlNBdHRyaWJ1dGVWYWx1ZSgpKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVYSlNBdHRyaWJ1dGUobmFtZSkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlWEpTQ2hpbGQoKSB7XG4gICAgICAgIHZhciB0b2tlbiwgbWFya2VyO1xuICAgICAgICBpZiAobWF0Y2goJ3snKSkge1xuICAgICAgICAgICAgdG9rZW4gPSBwYXJzZVhKU0V4cHJlc3Npb25Db250YWluZXIoKTtcbiAgICAgICAgfSBlbHNlIGlmIChsb29rYWhlYWQudHlwZSA9PT0gVG9rZW4uWEpTVGV4dCkge1xuICAgICAgICAgICAgbWFya2VyID0gbWFya2VyQ3JlYXRlUHJlc2VydmVXaGl0ZXNwYWNlKCk7XG4gICAgICAgICAgICB0b2tlbiA9IG1hcmtlckFwcGx5KG1hcmtlciwgZGVsZWdhdGUuY3JlYXRlTGl0ZXJhbChsZXgoKSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdG9rZW4gPSBwYXJzZVhKU0VsZW1lbnQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VYSlNDbG9zaW5nRWxlbWVudCgpIHtcbiAgICAgICAgdmFyIG5hbWUsIG9yaWdJblhKU0NoaWxkLCBvcmlnSW5YSlNUYWcsIG1hcmtlciA9IG1hcmtlckNyZWF0ZSgpO1xuICAgICAgICBvcmlnSW5YSlNDaGlsZCA9IHN0YXRlLmluWEpTQ2hpbGQ7XG4gICAgICAgIG9yaWdJblhKU1RhZyA9IHN0YXRlLmluWEpTVGFnO1xuICAgICAgICBzdGF0ZS5pblhKU0NoaWxkID0gZmFsc2U7XG4gICAgICAgIHN0YXRlLmluWEpTVGFnID0gdHJ1ZTtcbiAgICAgICAgZXhwZWN0KCc8Jyk7XG4gICAgICAgIGV4cGVjdCgnLycpO1xuICAgICAgICBuYW1lID0gcGFyc2VYSlNFbGVtZW50TmFtZSgpO1xuICAgICAgICAvLyBCZWNhdXNlIGFkdmFuY2UoKSAoY2FsbGVkIGJ5IGxleCgpIGNhbGxlZCBieSBleHBlY3QoKSkgZXhwZWN0cyB0aGVyZVxuICAgICAgICAvLyB0byBiZSBhIHZhbGlkIHRva2VuIGFmdGVyID4sIGl0IG5lZWRzIHRvIGtub3cgd2hldGhlciB0byBsb29rIGZvciBhXG4gICAgICAgIC8vIHN0YW5kYXJkIEpTIHRva2VuIG9yIGFuIFhKUyB0ZXh0IG5vZGVcbiAgICAgICAgc3RhdGUuaW5YSlNDaGlsZCA9IG9yaWdJblhKU0NoaWxkO1xuICAgICAgICBzdGF0ZS5pblhKU1RhZyA9IG9yaWdJblhKU1RhZztcbiAgICAgICAgZXhwZWN0KCc+Jyk7XG4gICAgICAgIHJldHVybiBtYXJrZXJBcHBseShtYXJrZXIsIGRlbGVnYXRlLmNyZWF0ZVhKU0Nsb3NpbmdFbGVtZW50KG5hbWUpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZVhKU09wZW5pbmdFbGVtZW50KCkge1xuICAgICAgICB2YXIgbmFtZSwgYXR0cmlidXRlLCBhdHRyaWJ1dGVzID0gW10sIHNlbGZDbG9zaW5nID0gZmFsc2UsIG9yaWdJblhKU0NoaWxkLCBvcmlnSW5YSlNUYWcsIG1hcmtlciA9IG1hcmtlckNyZWF0ZSgpO1xuXG4gICAgICAgIG9yaWdJblhKU0NoaWxkID0gc3RhdGUuaW5YSlNDaGlsZDtcbiAgICAgICAgb3JpZ0luWEpTVGFnID0gc3RhdGUuaW5YSlNUYWc7XG4gICAgICAgIHN0YXRlLmluWEpTQ2hpbGQgPSBmYWxzZTtcbiAgICAgICAgc3RhdGUuaW5YSlNUYWcgPSB0cnVlO1xuXG4gICAgICAgIGV4cGVjdCgnPCcpO1xuXG4gICAgICAgIG5hbWUgPSBwYXJzZVhKU0VsZW1lbnROYW1lKCk7XG5cbiAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgbG9va2FoZWFkLnZhbHVlICE9PSAnLycgJiZcbiAgICAgICAgICAgICAgICBsb29rYWhlYWQudmFsdWUgIT09ICc+Jykge1xuICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKHBhcnNlWEpTQXR0cmlidXRlKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUuaW5YSlNUYWcgPSBvcmlnSW5YSlNUYWc7XG5cbiAgICAgICAgaWYgKGxvb2thaGVhZC52YWx1ZSA9PT0gJy8nKSB7XG4gICAgICAgICAgICBleHBlY3QoJy8nKTtcbiAgICAgICAgICAgIC8vIEJlY2F1c2UgYWR2YW5jZSgpIChjYWxsZWQgYnkgbGV4KCkgY2FsbGVkIGJ5IGV4cGVjdCgpKSBleHBlY3RzXG4gICAgICAgICAgICAvLyB0aGVyZSB0byBiZSBhIHZhbGlkIHRva2VuIGFmdGVyID4sIGl0IG5lZWRzIHRvIGtub3cgd2hldGhlciB0b1xuICAgICAgICAgICAgLy8gbG9vayBmb3IgYSBzdGFuZGFyZCBKUyB0b2tlbiBvciBhbiBYSlMgdGV4dCBub2RlXG4gICAgICAgICAgICBzdGF0ZS5pblhKU0NoaWxkID0gb3JpZ0luWEpTQ2hpbGQ7XG4gICAgICAgICAgICBleHBlY3QoJz4nKTtcbiAgICAgICAgICAgIHNlbGZDbG9zaW5nID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXRlLmluWEpTQ2hpbGQgPSB0cnVlO1xuICAgICAgICAgICAgZXhwZWN0KCc+Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1hcmtlckFwcGx5KG1hcmtlciwgZGVsZWdhdGUuY3JlYXRlWEpTT3BlbmluZ0VsZW1lbnQobmFtZSwgYXR0cmlidXRlcywgc2VsZkNsb3NpbmcpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZVhKU0VsZW1lbnQoKSB7XG4gICAgICAgIHZhciBvcGVuaW5nRWxlbWVudCwgY2xvc2luZ0VsZW1lbnQgPSBudWxsLCBjaGlsZHJlbiA9IFtdLCBvcmlnSW5YSlNDaGlsZCwgb3JpZ0luWEpTVGFnLCBtYXJrZXIgPSBtYXJrZXJDcmVhdGUoKTtcblxuICAgICAgICBvcmlnSW5YSlNDaGlsZCA9IHN0YXRlLmluWEpTQ2hpbGQ7XG4gICAgICAgIG9yaWdJblhKU1RhZyA9IHN0YXRlLmluWEpTVGFnO1xuICAgICAgICBvcGVuaW5nRWxlbWVudCA9IHBhcnNlWEpTT3BlbmluZ0VsZW1lbnQoKTtcblxuICAgICAgICBpZiAoIW9wZW5pbmdFbGVtZW50LnNlbGZDbG9zaW5nKSB7XG4gICAgICAgICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBzdGF0ZS5pblhKU0NoaWxkID0gZmFsc2U7IC8vIENhbGwgbG9va2FoZWFkMigpIHdpdGggaW5YSlNDaGlsZCA9IGZhbHNlIGJlY2F1c2UgPC8gc2hvdWxkIG5vdCBiZSBjb25zaWRlcmVkIGluIHRoZSBjaGlsZFxuICAgICAgICAgICAgICAgIGlmIChsb29rYWhlYWQudmFsdWUgPT09ICc8JyAmJiBsb29rYWhlYWQyKCkudmFsdWUgPT09ICcvJykge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3RhdGUuaW5YSlNDaGlsZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChwYXJzZVhKU0NoaWxkKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RhdGUuaW5YSlNDaGlsZCA9IG9yaWdJblhKU0NoaWxkO1xuICAgICAgICAgICAgc3RhdGUuaW5YSlNUYWcgPSBvcmlnSW5YSlNUYWc7XG4gICAgICAgICAgICBjbG9zaW5nRWxlbWVudCA9IHBhcnNlWEpTQ2xvc2luZ0VsZW1lbnQoKTtcbiAgICAgICAgICAgIGlmIChnZXRRdWFsaWZpZWRYSlNOYW1lKGNsb3NpbmdFbGVtZW50Lm5hbWUpICE9PSBnZXRRdWFsaWZpZWRYSlNOYW1lKG9wZW5pbmdFbGVtZW50Lm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3dFcnJvcih7fSwgTWVzc2FnZXMuRXhwZWN0ZWRYSlNDbG9zaW5nVGFnLCBnZXRRdWFsaWZpZWRYSlNOYW1lKG9wZW5pbmdFbGVtZW50Lm5hbWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdoZW4gKGVycm9uZW91c2x5KSB3cml0aW5nIHR3byBhZGphY2VudCB0YWdzIGxpa2VcbiAgICAgICAgLy9cbiAgICAgICAgLy8gICAgIHZhciB4ID0gPGRpdj5vbmU8L2Rpdj48ZGl2PnR3bzwvZGl2PjtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gdGhlIGRlZmF1bHQgZXJyb3IgbWVzc2FnZSBpcyBhIGJpdCBpbmNvbXByZWhlbnNpYmxlLiBTaW5jZSBpdCdzXG4gICAgICAgIC8vIHJhcmVseSAobmV2ZXI/KSB1c2VmdWwgdG8gd3JpdGUgYSBsZXNzLXRoYW4gc2lnbiBhZnRlciBhbiBYSlNcbiAgICAgICAgLy8gZWxlbWVudCwgd2UgZGlzYWxsb3cgaXQgaGVyZSBpbiB0aGUgcGFyc2VyIGluIG9yZGVyIHRvIHByb3ZpZGUgYVxuICAgICAgICAvLyBiZXR0ZXIgZXJyb3IgbWVzc2FnZS4gKEluIHRoZSByYXJlIGNhc2UgdGhhdCB0aGUgbGVzcy10aGFuIG9wZXJhdG9yXG4gICAgICAgIC8vIHdhcyBpbnRlbmRlZCwgdGhlIGxlZnQgdGFnIGNhbiBiZSB3cmFwcGVkIGluIHBhcmVudGhlc2VzLilcbiAgICAgICAgaWYgKCFvcmlnSW5YSlNDaGlsZCAmJiBtYXRjaCgnPCcpKSB7XG4gICAgICAgICAgICB0aHJvd0Vycm9yKGxvb2thaGVhZCwgTWVzc2FnZXMuQWRqYWNlbnRYSlNFbGVtZW50cyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWFya2VyQXBwbHkobWFya2VyLCBkZWxlZ2F0ZS5jcmVhdGVYSlNFbGVtZW50KG9wZW5pbmdFbGVtZW50LCBjbG9zaW5nRWxlbWVudCwgY2hpbGRyZW4pKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb2xsZWN0VG9rZW4oKSB7XG4gICAgICAgIHZhciBzdGFydCwgbG9jLCB0b2tlbiwgcmFuZ2UsIHZhbHVlO1xuXG4gICAgICAgIGlmICghc3RhdGUuaW5YSlNDaGlsZCkge1xuICAgICAgICAgICAgc2tpcENvbW1lbnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXJ0ID0gaW5kZXg7XG4gICAgICAgIGxvYyA9IHtcbiAgICAgICAgICAgIHN0YXJ0OiB7XG4gICAgICAgICAgICAgICAgbGluZTogbGluZU51bWJlcixcbiAgICAgICAgICAgICAgICBjb2x1bW46IGluZGV4IC0gbGluZVN0YXJ0XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdG9rZW4gPSBleHRyYS5hZHZhbmNlKCk7XG4gICAgICAgIGxvYy5lbmQgPSB7XG4gICAgICAgICAgICBsaW5lOiBsaW5lTnVtYmVyLFxuICAgICAgICAgICAgY29sdW1uOiBpbmRleCAtIGxpbmVTdGFydFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh0b2tlbi50eXBlICE9PSBUb2tlbi5FT0YpIHtcbiAgICAgICAgICAgIHJhbmdlID0gW3Rva2VuLnJhbmdlWzBdLCB0b2tlbi5yYW5nZVsxXV07XG4gICAgICAgICAgICB2YWx1ZSA9IHNvdXJjZS5zbGljZSh0b2tlbi5yYW5nZVswXSwgdG9rZW4ucmFuZ2VbMV0pO1xuICAgICAgICAgICAgZXh0cmEudG9rZW5zLnB1c2goe1xuICAgICAgICAgICAgICAgIHR5cGU6IFRva2VuTmFtZVt0b2tlbi50eXBlXSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICAgICAgcmFuZ2U6IHJhbmdlLFxuICAgICAgICAgICAgICAgIGxvYzogbG9jXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0b2tlbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb2xsZWN0UmVnZXgoKSB7XG4gICAgICAgIHZhciBwb3MsIGxvYywgcmVnZXgsIHRva2VuO1xuXG4gICAgICAgIHNraXBDb21tZW50KCk7XG5cbiAgICAgICAgcG9zID0gaW5kZXg7XG4gICAgICAgIGxvYyA9IHtcbiAgICAgICAgICAgIHN0YXJ0OiB7XG4gICAgICAgICAgICAgICAgbGluZTogbGluZU51bWJlcixcbiAgICAgICAgICAgICAgICBjb2x1bW46IGluZGV4IC0gbGluZVN0YXJ0XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcmVnZXggPSBleHRyYS5zY2FuUmVnRXhwKCk7XG4gICAgICAgIGxvYy5lbmQgPSB7XG4gICAgICAgICAgICBsaW5lOiBsaW5lTnVtYmVyLFxuICAgICAgICAgICAgY29sdW1uOiBpbmRleCAtIGxpbmVTdGFydFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICghZXh0cmEudG9rZW5pemUpIHtcbiAgICAgICAgICAgIC8vIFBvcCB0aGUgcHJldmlvdXMgdG9rZW4sIHdoaWNoIGlzIGxpa2VseSAnLycgb3IgJy89J1xuICAgICAgICAgICAgaWYgKGV4dHJhLnRva2Vucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdG9rZW4gPSBleHRyYS50b2tlbnNbZXh0cmEudG9rZW5zLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgIGlmICh0b2tlbi5yYW5nZVswXSA9PT0gcG9zICYmIHRva2VuLnR5cGUgPT09ICdQdW5jdHVhdG9yJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW4udmFsdWUgPT09ICcvJyB8fCB0b2tlbi52YWx1ZSA9PT0gJy89Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmEudG9rZW5zLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBleHRyYS50b2tlbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ1JlZ3VsYXJFeHByZXNzaW9uJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogcmVnZXgubGl0ZXJhbCxcbiAgICAgICAgICAgICAgICByYW5nZTogW3BvcywgaW5kZXhdLFxuICAgICAgICAgICAgICAgIGxvYzogbG9jXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZWdleDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmaWx0ZXJUb2tlbkxvY2F0aW9uKCkge1xuICAgICAgICB2YXIgaSwgZW50cnksIHRva2VuLCB0b2tlbnMgPSBbXTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZXh0cmEudG9rZW5zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBlbnRyeSA9IGV4dHJhLnRva2Vuc1tpXTtcbiAgICAgICAgICAgIHRva2VuID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6IGVudHJ5LnR5cGUsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGVudHJ5LnZhbHVlXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGV4dHJhLnJhbmdlKSB7XG4gICAgICAgICAgICAgICAgdG9rZW4ucmFuZ2UgPSBlbnRyeS5yYW5nZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChleHRyYS5sb2MpIHtcbiAgICAgICAgICAgICAgICB0b2tlbi5sb2MgPSBlbnRyeS5sb2M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgIH1cblxuICAgICAgICBleHRyYS50b2tlbnMgPSB0b2tlbnM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGF0Y2goKSB7XG4gICAgICAgIGlmIChleHRyYS5jb21tZW50cykge1xuICAgICAgICAgICAgZXh0cmEuc2tpcENvbW1lbnQgPSBza2lwQ29tbWVudDtcbiAgICAgICAgICAgIHNraXBDb21tZW50ID0gc2NhbkNvbW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGV4dHJhLnRva2VucyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGV4dHJhLmFkdmFuY2UgPSBhZHZhbmNlO1xuICAgICAgICAgICAgZXh0cmEuc2NhblJlZ0V4cCA9IHNjYW5SZWdFeHA7XG5cbiAgICAgICAgICAgIGFkdmFuY2UgPSBjb2xsZWN0VG9rZW47XG4gICAgICAgICAgICBzY2FuUmVnRXhwID0gY29sbGVjdFJlZ2V4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdW5wYXRjaCgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBleHRyYS5za2lwQ29tbWVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgc2tpcENvbW1lbnQgPSBleHRyYS5za2lwQ29tbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgZXh0cmEuc2NhblJlZ0V4cCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgYWR2YW5jZSA9IGV4dHJhLmFkdmFuY2U7XG4gICAgICAgICAgICBzY2FuUmVnRXhwID0gZXh0cmEuc2NhblJlZ0V4cDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRoaXMgaXMgdXNlZCB0byBtb2RpZnkgdGhlIGRlbGVnYXRlLlxuXG4gICAgZnVuY3Rpb24gZXh0ZW5kKG9iamVjdCwgcHJvcGVydGllcykge1xuICAgICAgICB2YXIgZW50cnksIHJlc3VsdCA9IHt9O1xuXG4gICAgICAgIGZvciAoZW50cnkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgICBpZiAob2JqZWN0Lmhhc093blByb3BlcnR5KGVudHJ5KSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdFtlbnRyeV0gPSBvYmplY3RbZW50cnldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChlbnRyeSBpbiBwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICBpZiAocHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShlbnRyeSkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHRbZW50cnldID0gcHJvcGVydGllc1tlbnRyeV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRva2VuaXplKGNvZGUsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIHRvU3RyaW5nLFxuICAgICAgICAgICAgdG9rZW4sXG4gICAgICAgICAgICB0b2tlbnM7XG5cbiAgICAgICAgdG9TdHJpbmcgPSBTdHJpbmc7XG4gICAgICAgIGlmICh0eXBlb2YgY29kZSAhPT0gJ3N0cmluZycgJiYgIShjb2RlIGluc3RhbmNlb2YgU3RyaW5nKSkge1xuICAgICAgICAgICAgY29kZSA9IHRvU3RyaW5nKGNvZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVsZWdhdGUgPSBTeW50YXhUcmVlRGVsZWdhdGU7XG4gICAgICAgIHNvdXJjZSA9IGNvZGU7XG4gICAgICAgIGluZGV4ID0gMDtcbiAgICAgICAgbGluZU51bWJlciA9IChzb3VyY2UubGVuZ3RoID4gMCkgPyAxIDogMDtcbiAgICAgICAgbGluZVN0YXJ0ID0gMDtcbiAgICAgICAgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcbiAgICAgICAgbG9va2FoZWFkID0gbnVsbDtcbiAgICAgICAgc3RhdGUgPSB7XG4gICAgICAgICAgICBhbGxvd0tleXdvcmQ6IHRydWUsXG4gICAgICAgICAgICBhbGxvd0luOiB0cnVlLFxuICAgICAgICAgICAgbGFiZWxTZXQ6IHt9LFxuICAgICAgICAgICAgaW5GdW5jdGlvbkJvZHk6IGZhbHNlLFxuICAgICAgICAgICAgaW5JdGVyYXRpb246IGZhbHNlLFxuICAgICAgICAgICAgaW5Td2l0Y2g6IGZhbHNlLFxuICAgICAgICAgICAgbGFzdENvbW1lbnRTdGFydDogLTFcbiAgICAgICAgfTtcblxuICAgICAgICBleHRyYSA9IHt9O1xuXG4gICAgICAgIC8vIE9wdGlvbnMgbWF0Y2hpbmcuXG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgICAgIC8vIE9mIGNvdXJzZSB3ZSBjb2xsZWN0IHRva2VucyBoZXJlLlxuICAgICAgICBvcHRpb25zLnRva2VucyA9IHRydWU7XG4gICAgICAgIGV4dHJhLnRva2VucyA9IFtdO1xuICAgICAgICBleHRyYS50b2tlbml6ZSA9IHRydWU7XG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgdHdvIGZpZWxkcyBhcmUgbmVjZXNzYXJ5IHRvIGNvbXB1dGUgdGhlIFJlZ2V4IHRva2Vucy5cbiAgICAgICAgZXh0cmEub3BlblBhcmVuVG9rZW4gPSAtMTtcbiAgICAgICAgZXh0cmEub3BlbkN1cmx5VG9rZW4gPSAtMTtcblxuICAgICAgICBleHRyYS5yYW5nZSA9ICh0eXBlb2Ygb3B0aW9ucy5yYW5nZSA9PT0gJ2Jvb2xlYW4nKSAmJiBvcHRpb25zLnJhbmdlO1xuICAgICAgICBleHRyYS5sb2MgPSAodHlwZW9mIG9wdGlvbnMubG9jID09PSAnYm9vbGVhbicpICYmIG9wdGlvbnMubG9jO1xuXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5jb21tZW50ID09PSAnYm9vbGVhbicgJiYgb3B0aW9ucy5jb21tZW50KSB7XG4gICAgICAgICAgICBleHRyYS5jb21tZW50cyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy50b2xlcmFudCA9PT0gJ2Jvb2xlYW4nICYmIG9wdGlvbnMudG9sZXJhbnQpIHtcbiAgICAgICAgICAgIGV4dHJhLmVycm9ycyA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc291cmNlWzBdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIC8vIFRyeSBmaXJzdCB0byBjb252ZXJ0IHRvIGEgc3RyaW5nLiBUaGlzIGlzIGdvb2QgYXMgZmFzdCBwYXRoXG4gICAgICAgICAgICAgICAgLy8gZm9yIG9sZCBJRSB3aGljaCB1bmRlcnN0YW5kcyBzdHJpbmcgaW5kZXhpbmcgZm9yIHN0cmluZ1xuICAgICAgICAgICAgICAgIC8vIGxpdGVyYWxzIG9ubHkgYW5kIG5vdCBmb3Igc3RyaW5nIG9iamVjdC5cbiAgICAgICAgICAgICAgICBpZiAoY29kZSBpbnN0YW5jZW9mIFN0cmluZykge1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2UgPSBjb2RlLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwYXRjaCgpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwZWVrKCk7XG4gICAgICAgICAgICBpZiAobG9va2FoZWFkLnR5cGUgPT09IFRva2VuLkVPRikge1xuICAgICAgICAgICAgICAgIHJldHVybiBleHRyYS50b2tlbnM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRva2VuID0gbGV4KCk7XG4gICAgICAgICAgICB3aGlsZSAobG9va2FoZWFkLnR5cGUgIT09IFRva2VuLkVPRikge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHRva2VuID0gbGV4KCk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAobGV4RXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSBsb29rYWhlYWQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChleHRyYS5lcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhLmVycm9ycy5wdXNoKGxleEVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIGhhdmUgdG8gYnJlYWsgb24gdGhlIGZpcnN0IGVycm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0byBhdm9pZCBpbmZpbml0ZSBsb29wcy5cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbGV4RXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZpbHRlclRva2VuTG9jYXRpb24oKTtcbiAgICAgICAgICAgIHRva2VucyA9IGV4dHJhLnRva2VucztcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZXh0cmEuY29tbWVudHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgdG9rZW5zLmNvbW1lbnRzID0gZXh0cmEuY29tbWVudHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIGV4dHJhLmVycm9ycyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICB0b2tlbnMuZXJyb3JzID0gZXh0cmEuZXJyb3JzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgdW5wYXRjaCgpO1xuICAgICAgICAgICAgZXh0cmEgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9rZW5zO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlKGNvZGUsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIHByb2dyYW0sIHRvU3RyaW5nO1xuXG4gICAgICAgIHRvU3RyaW5nID0gU3RyaW5nO1xuICAgICAgICBpZiAodHlwZW9mIGNvZGUgIT09ICdzdHJpbmcnICYmICEoY29kZSBpbnN0YW5jZW9mIFN0cmluZykpIHtcbiAgICAgICAgICAgIGNvZGUgPSB0b1N0cmluZyhjb2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlbGVnYXRlID0gU3ludGF4VHJlZURlbGVnYXRlO1xuICAgICAgICBzb3VyY2UgPSBjb2RlO1xuICAgICAgICBpbmRleCA9IDA7XG4gICAgICAgIGxpbmVOdW1iZXIgPSAoc291cmNlLmxlbmd0aCA+IDApID8gMSA6IDA7XG4gICAgICAgIGxpbmVTdGFydCA9IDA7XG4gICAgICAgIGxlbmd0aCA9IHNvdXJjZS5sZW5ndGg7XG4gICAgICAgIGxvb2thaGVhZCA9IG51bGw7XG4gICAgICAgIHN0YXRlID0ge1xuICAgICAgICAgICAgYWxsb3dLZXl3b3JkOiBmYWxzZSxcbiAgICAgICAgICAgIGFsbG93SW46IHRydWUsXG4gICAgICAgICAgICBsYWJlbFNldDoge30sXG4gICAgICAgICAgICBwYXJlbnRoZXNpemVkQ291bnQ6IDAsXG4gICAgICAgICAgICBpbkZ1bmN0aW9uQm9keTogZmFsc2UsXG4gICAgICAgICAgICBpbkl0ZXJhdGlvbjogZmFsc2UsXG4gICAgICAgICAgICBpblN3aXRjaDogZmFsc2UsXG4gICAgICAgICAgICBpblhKU0NoaWxkOiBmYWxzZSxcbiAgICAgICAgICAgIGluWEpTVGFnOiBmYWxzZSxcbiAgICAgICAgICAgIGxhc3RDb21tZW50U3RhcnQ6IC0xLFxuICAgICAgICAgICAgeWllbGRBbGxvd2VkOiBmYWxzZVxuICAgICAgICB9O1xuXG4gICAgICAgIGV4dHJhID0ge307XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGV4dHJhLnJhbmdlID0gKHR5cGVvZiBvcHRpb25zLnJhbmdlID09PSAnYm9vbGVhbicpICYmIG9wdGlvbnMucmFuZ2U7XG4gICAgICAgICAgICBleHRyYS5sb2MgPSAodHlwZW9mIG9wdGlvbnMubG9jID09PSAnYm9vbGVhbicpICYmIG9wdGlvbnMubG9jO1xuICAgICAgICAgICAgZXh0cmEuYXR0YWNoQ29tbWVudCA9ICh0eXBlb2Ygb3B0aW9ucy5hdHRhY2hDb21tZW50ID09PSAnYm9vbGVhbicpICYmIG9wdGlvbnMuYXR0YWNoQ29tbWVudDtcblxuICAgICAgICAgICAgaWYgKGV4dHJhLmxvYyAmJiBvcHRpb25zLnNvdXJjZSAhPT0gbnVsbCAmJiBvcHRpb25zLnNvdXJjZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZGVsZWdhdGUgPSBleHRlbmQoZGVsZWdhdGUsIHtcbiAgICAgICAgICAgICAgICAgICAgJ3Bvc3RQcm9jZXNzJzogZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUubG9jLnNvdXJjZSA9IHRvU3RyaW5nKG9wdGlvbnMuc291cmNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy50b2tlbnMgPT09ICdib29sZWFuJyAmJiBvcHRpb25zLnRva2Vucykge1xuICAgICAgICAgICAgICAgIGV4dHJhLnRva2VucyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmNvbW1lbnQgPT09ICdib29sZWFuJyAmJiBvcHRpb25zLmNvbW1lbnQpIHtcbiAgICAgICAgICAgICAgICBleHRyYS5jb21tZW50cyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLnRvbGVyYW50ID09PSAnYm9vbGVhbicgJiYgb3B0aW9ucy50b2xlcmFudCkge1xuICAgICAgICAgICAgICAgIGV4dHJhLmVycm9ycyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGV4dHJhLmF0dGFjaENvbW1lbnQpIHtcbiAgICAgICAgICAgICAgICBleHRyYS5yYW5nZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgZXh0cmEuY29tbWVudHMgPSBbXTtcbiAgICAgICAgICAgICAgICBleHRyYS5ib3R0b21SaWdodFN0YWNrID0gW107XG4gICAgICAgICAgICAgICAgZXh0cmEudHJhaWxpbmdDb21tZW50cyA9IFtdO1xuICAgICAgICAgICAgICAgIGV4dHJhLmxlYWRpbmdDb21tZW50cyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc291cmNlWzBdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIC8vIFRyeSBmaXJzdCB0byBjb252ZXJ0IHRvIGEgc3RyaW5nLiBUaGlzIGlzIGdvb2QgYXMgZmFzdCBwYXRoXG4gICAgICAgICAgICAgICAgLy8gZm9yIG9sZCBJRSB3aGljaCB1bmRlcnN0YW5kcyBzdHJpbmcgaW5kZXhpbmcgZm9yIHN0cmluZ1xuICAgICAgICAgICAgICAgIC8vIGxpdGVyYWxzIG9ubHkgYW5kIG5vdCBmb3Igc3RyaW5nIG9iamVjdC5cbiAgICAgICAgICAgICAgICBpZiAoY29kZSBpbnN0YW5jZW9mIFN0cmluZykge1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2UgPSBjb2RlLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwYXRjaCgpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcHJvZ3JhbSA9IHBhcnNlUHJvZ3JhbSgpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBleHRyYS5jb21tZW50cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBwcm9ncmFtLmNvbW1lbnRzID0gZXh0cmEuY29tbWVudHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIGV4dHJhLnRva2VucyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBmaWx0ZXJUb2tlbkxvY2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgcHJvZ3JhbS50b2tlbnMgPSBleHRyYS50b2tlbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIGV4dHJhLmVycm9ycyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBwcm9ncmFtLmVycm9ycyA9IGV4dHJhLmVycm9ycztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIHVucGF0Y2goKTtcbiAgICAgICAgICAgIGV4dHJhID0ge307XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcHJvZ3JhbTtcbiAgICB9XG5cbiAgICAvLyBTeW5jIHdpdGggKi5qc29uIG1hbmlmZXN0cy5cbiAgICBleHBvcnRzLnZlcnNpb24gPSAnNjAwMS4wMDAxLjAwMDAtZGV2LWhhcm1vbnktZmInO1xuXG4gICAgZXhwb3J0cy50b2tlbml6ZSA9IHRva2VuaXplO1xuXG4gICAgZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xuXG4gICAgLy8gRGVlcCBjb3B5LlxuICAgIGV4cG9ydHMuU3ludGF4ID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5hbWUsIHR5cGVzID0ge307XG5cbiAgICAgICAgaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0eXBlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKG5hbWUgaW4gU3ludGF4KSB7XG4gICAgICAgICAgICBpZiAoU3ludGF4Lmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgdHlwZXNbbmFtZV0gPSBTeW50YXhbbmFtZV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIE9iamVjdC5mcmVlemUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIE9iamVjdC5mcmVlemUodHlwZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHR5cGVzO1xuICAgIH0oKSk7XG5cbn0pKTtcbi8qIHZpbTogc2V0IHN3PTQgdHM9NCBldCB0dz04MCA6ICovXG4iLCIvKipcbiAqIFRoaXMgaXMgdGhlIG1haW4gZW50cnkgcG9pbnQgZm9yIEthVGVYLiBIZXJlLCB3ZSBleHBvc2UgZnVuY3Rpb25zIGZvclxuICogcmVuZGVyaW5nIGV4cHJlc3Npb25zIGVpdGhlciB0byBET00gbm9kZXMgb3IgdG8gbWFya3VwIHN0cmluZ3MuXG4gKlxuICogV2UgYWxzbyBleHBvc2UgdGhlIFBhcnNlRXJyb3IgY2xhc3MgdG8gY2hlY2sgaWYgZXJyb3JzIHRocm93biBmcm9tIEthVGVYIGFyZVxuICogZXJyb3JzIGluIHRoZSBleHByZXNzaW9uLCBvciBlcnJvcnMgaW4gamF2YXNjcmlwdCBoYW5kbGluZy5cbiAqL1xuXG52YXIgUGFyc2VFcnJvciA9IHJlcXVpcmUoXCIuL3NyYy9QYXJzZUVycm9yXCIpO1xuXG52YXIgYnVpbGRUcmVlID0gcmVxdWlyZShcIi4vc3JjL2J1aWxkVHJlZVwiKTtcbnZhciBwYXJzZVRyZWUgPSByZXF1aXJlKFwiLi9zcmMvcGFyc2VUcmVlXCIpO1xudmFyIHV0aWxzID0gcmVxdWlyZShcIi4vc3JjL3V0aWxzXCIpO1xuXG4vKipcbiAqIFBhcnNlIGFuZCBidWlsZCBhbiBleHByZXNzaW9uLCBhbmQgcGxhY2UgdGhhdCBleHByZXNzaW9uIGluIHRoZSBET00gbm9kZVxuICogZ2l2ZW4uXG4gKi9cbnZhciByZW5kZXIgPSBmdW5jdGlvbih0b1BhcnNlLCBiYXNlTm9kZSkge1xuICAgIHV0aWxzLmNsZWFyTm9kZShiYXNlTm9kZSk7XG5cbiAgICB2YXIgdHJlZSA9IHBhcnNlVHJlZSh0b1BhcnNlKTtcbiAgICB2YXIgbm9kZSA9IGJ1aWxkVHJlZSh0cmVlKS50b05vZGUoKTtcblxuICAgIGJhc2VOb2RlLmFwcGVuZENoaWxkKG5vZGUpO1xufTtcblxuLy8gS2FUZVgncyBzdHlsZXMgZG9uJ3Qgd29yayBwcm9wZXJseSBpbiBxdWlya3MgbW9kZS4gUHJpbnQgb3V0IGFuIGVycm9yLCBhbmRcbi8vIGRpc2FibGUgcmVuZGVyaW5nLlxuaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGlmIChkb2N1bWVudC5jb21wYXRNb2RlICE9PSBcIkNTUzFDb21wYXRcIikge1xuICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICBcIldhcm5pbmc6IEthVGVYIGRvZXNuJ3Qgd29yayBpbiBxdWlya3MgbW9kZS4gTWFrZSBzdXJlIHlvdXIgXCIgK1xuICAgICAgICAgICAgICAgIFwid2Vic2l0ZSBoYXMgYSBzdWl0YWJsZSBkb2N0eXBlLlwiKTtcblxuICAgICAgICByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBQYXJzZUVycm9yKFwiS2FUZVggZG9lc24ndCB3b3JrIGluIHF1aXJrcyBtb2RlLlwiKTtcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbi8qKlxuICogUGFyc2UgYW5kIGJ1aWxkIGFuIGV4cHJlc3Npb24sIGFuZCByZXR1cm4gdGhlIG1hcmt1cCBmb3IgdGhhdC5cbiAqL1xudmFyIHJlbmRlclRvU3RyaW5nID0gZnVuY3Rpb24odG9QYXJzZSkge1xuICAgIHZhciB0cmVlID0gcGFyc2VUcmVlKHRvUGFyc2UpO1xuICAgIHJldHVybiBidWlsZFRyZWUodHJlZSkudG9NYXJrdXAoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIHJlbmRlcjogcmVuZGVyLFxuICAgIHJlbmRlclRvU3RyaW5nOiByZW5kZXJUb1N0cmluZyxcbiAgICBQYXJzZUVycm9yOiBQYXJzZUVycm9yXG59O1xuIiwiLyoqXG4gKiBUaGUgTGV4ZXIgY2xhc3MgaGFuZGxlcyB0b2tlbml6aW5nIHRoZSBpbnB1dCBpbiB2YXJpb3VzIHdheXMuIFNpbmNlIG91clxuICogcGFyc2VyIGV4cGVjdHMgdXMgdG8gYmUgYWJsZSB0byBiYWNrdHJhY2ssIHRoZSBsZXhlciBhbGxvd3MgbGV4aW5nIGZyb20gYW55XG4gKiBnaXZlbiBzdGFydGluZyBwb2ludC5cbiAqXG4gKiBJdHMgbWFpbiBleHBvc2VkIGZ1bmN0aW9uIGlzIHRoZSBgbGV4YCBmdW5jdGlvbiwgd2hpY2ggdGFrZXMgYSBwb3NpdGlvbiB0b1xuICogbGV4IGZyb20gYW5kIGEgdHlwZSBvZiB0b2tlbiB0byBsZXguIEl0IGRlZmVycyB0byB0aGUgYXBwcm9wcmlhdGUgYF9pbm5lckxleGBcbiAqIGZ1bmN0aW9uLlxuICpcbiAqIFRoZSB2YXJpb3VzIGBfaW5uZXJMZXhgIGZ1bmN0aW9ucyBwZXJmb3JtIHRoZSBhY3R1YWwgbGV4aW5nIG9mIGRpZmZlcmVudFxuICoga2luZHMuXG4gKi9cblxudmFyIFBhcnNlRXJyb3IgPSByZXF1aXJlKFwiLi9QYXJzZUVycm9yXCIpO1xuXG4vLyBUaGUgbWFpbiBsZXhlciBjbGFzc1xuZnVuY3Rpb24gTGV4ZXIoaW5wdXQpIHtcbiAgICB0aGlzLl9pbnB1dCA9IGlucHV0O1xufVxuXG4vLyBUaGUgcmVzdWx0aW5nIHRva2VuIHJldHVybmVkIGZyb20gYGxleGAuXG5mdW5jdGlvbiBUb2tlbih0ZXh0LCBkYXRhLCBwb3NpdGlvbikge1xuICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB0aGlzLnBvc2l0aW9uID0gcG9zaXRpb247XG59XG5cbi8vIFwibm9ybWFsXCIgdHlwZXMgb2YgdG9rZW5zLiBUaGVzZSBhcmUgdG9rZW5zIHdoaWNoIGNhbiBiZSBtYXRjaGVkIGJ5IGEgc2ltcGxlXG4vLyByZWdleFxudmFyIG1hdGhOb3JtYWxzID0gW1xuICAgIC9eWy98QC5cIlwiYDAtOWEtekEtWl0vLCAvLyBvcmRzXG4gICAgL15bKistXS8sIC8vIGJpbnNcbiAgICAvXls9PD46XS8sIC8vIHJlbHNcbiAgICAvXlssO10vLCAvLyBwdW5jdHVhdGlvblxuICAgIC9eWydcXF5fe31dLywgLy8gbWlzY1xuICAgIC9eWyhcXFtdLywgLy8gb3BlbnNcbiAgICAvXlspXFxdPyFdLywgLy8gY2xvc2VzXG4gICAgL15+LyAvLyBzcGFjaW5nXG5dO1xuXG4vLyBUaGVzZSBhcmUgXCJub3JtYWxcIiB0b2tlbnMgbGlrZSBhYm92ZSwgYnV0IHNob3VsZCBpbnN0ZWFkIGJlIHBhcnNlZCBpbiB0ZXh0XG4vLyBtb2RlLlxudmFyIHRleHROb3JtYWxzID0gW1xuICAgIC9eW2EtekEtWjAtOWAhQCooKS09K1xcW1xcXSdcIjs6P1xcLy4sXS8sIC8vIG9yZHNcbiAgICAvXlt7fV0vLCAvLyBncm91cGluZ1xuICAgIC9efi8gLy8gc3BhY2luZ1xuXTtcblxuLy8gUmVnZXhlcyBmb3IgbWF0Y2hpbmcgd2hpdGVzcGFjZVxudmFyIHdoaXRlc3BhY2VSZWdleCA9IC9eXFxzKi87XG52YXIgd2hpdGVzcGFjZUNvbmNhdFJlZ2V4ID0gL14oICt8XFxcXCAgKykvO1xuXG4vLyBUaGlzIHJlZ2V4IG1hdGNoZXMgYW55IG90aGVyIFRlWCBmdW5jdGlvbiwgd2hpY2ggaXMgYSBiYWNrc2xhc2ggZm9sbG93ZWQgYnkgYVxuLy8gd29yZCBvciBhIHNpbmdsZSBzeW1ib2xcbnZhciBhbnlGdW5jID0gL15cXFxcKD86W2EtekEtWl0rfC4pLztcblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGxleGVzIGEgc2luZ2xlIG5vcm1hbCB0b2tlbi4gSXQgdGFrZXMgYSBwb3NpdGlvbiwgYSBsaXN0IG9mXG4gKiBcIm5vcm1hbFwiIHRva2VucyB0byB0cnksIGFuZCB3aGV0aGVyIGl0IHNob3VsZCBjb21wbGV0ZWx5IGlnbm9yZSB3aGl0ZXNwYWNlIG9yXG4gKiBub3QuXG4gKi9cbkxleGVyLnByb3RvdHlwZS5faW5uZXJMZXggPSBmdW5jdGlvbihwb3MsIG5vcm1hbHMsIGlnbm9yZVdoaXRlc3BhY2UpIHtcbiAgICB2YXIgaW5wdXQgPSB0aGlzLl9pbnB1dC5zbGljZShwb3MpO1xuICAgIHZhciB3aGl0ZXNwYWNlO1xuXG4gICAgaWYgKGlnbm9yZVdoaXRlc3BhY2UpIHtcbiAgICAgICAgLy8gR2V0IHJpZCBvZiB3aGl0ZXNwYWNlLlxuICAgICAgICB3aGl0ZXNwYWNlID0gaW5wdXQubWF0Y2god2hpdGVzcGFjZVJlZ2V4KVswXTtcbiAgICAgICAgcG9zICs9IHdoaXRlc3BhY2UubGVuZ3RoO1xuICAgICAgICBpbnB1dCA9IGlucHV0LnNsaWNlKHdoaXRlc3BhY2UubGVuZ3RoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBEbyB0aGUgZnVua3kgY29uY2F0ZW5hdGlvbiBvZiB3aGl0ZXNwYWNlIHRoYXQgaGFwcGVucyBpbiB0ZXh0IG1vZGUuXG4gICAgICAgIHdoaXRlc3BhY2UgPSBpbnB1dC5tYXRjaCh3aGl0ZXNwYWNlQ29uY2F0UmVnZXgpO1xuICAgICAgICBpZiAod2hpdGVzcGFjZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBUb2tlbihcIiBcIiwgbnVsbCwgcG9zICsgd2hpdGVzcGFjZVswXS5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlcmUncyBubyBtb3JlIGlucHV0IHRvIHBhcnNlLCByZXR1cm4gYW4gRU9GIHRva2VuXG4gICAgaWYgKGlucHV0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gbmV3IFRva2VuKFwiRU9GXCIsIG51bGwsIHBvcyk7XG4gICAgfVxuXG4gICAgdmFyIG1hdGNoO1xuICAgIGlmICgobWF0Y2ggPSBpbnB1dC5tYXRjaChhbnlGdW5jKSkpIHtcbiAgICAgICAgLy8gSWYgd2UgbWF0Y2ggYSBmdW5jdGlvbiB0b2tlbiwgcmV0dXJuIGl0XG4gICAgICAgIHJldHVybiBuZXcgVG9rZW4obWF0Y2hbMF0sIG51bGwsIHBvcyArIG1hdGNoWzBdLmxlbmd0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gT3RoZXJ3aXNlLCB3ZSBsb29rIHRocm91Z2ggdGhlIG5vcm1hbCB0b2tlbiByZWdleGVzIGFuZCBzZWUgaWYgaXQnc1xuICAgICAgICAvLyBvbmUgb2YgdGhlbS5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub3JtYWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgbm9ybWFsID0gbm9ybWFsc1tpXTtcblxuICAgICAgICAgICAgaWYgKChtYXRjaCA9IGlucHV0Lm1hdGNoKG5vcm1hbCkpKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgaXQgaXMsIHJldHVybiBpdFxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVG9rZW4oXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoWzBdLCBudWxsLCBwb3MgKyBtYXRjaFswXS5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IFBhcnNlRXJyb3IoXCJVbmV4cGVjdGVkIGNoYXJhY3RlcjogJ1wiICsgaW5wdXRbMF0gK1xuICAgICAgICBcIidcIiwgdGhpcywgcG9zKTtcbn07XG5cbi8vIEEgcmVnZXggdG8gbWF0Y2ggYSBDU1MgY29sb3IgKGxpa2UgI2ZmZmZmZiBvciBCbHVlVmlvbGV0KVxudmFyIGNzc0NvbG9yID0gL14oI1thLXowLTldK3xbYS16XSspL2k7XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBsZXhlcyBhIENTUyBjb2xvci5cbiAqL1xuTGV4ZXIucHJvdG90eXBlLl9pbm5lckxleENvbG9yID0gZnVuY3Rpb24ocG9zKSB7XG4gICAgdmFyIGlucHV0ID0gdGhpcy5faW5wdXQuc2xpY2UocG9zKTtcblxuICAgIC8vIElnbm9yZSB3aGl0ZXNwYWNlXG4gICAgdmFyIHdoaXRlc3BhY2UgPSBpbnB1dC5tYXRjaCh3aGl0ZXNwYWNlUmVnZXgpWzBdO1xuICAgIHBvcyArPSB3aGl0ZXNwYWNlLmxlbmd0aDtcbiAgICBpbnB1dCA9IGlucHV0LnNsaWNlKHdoaXRlc3BhY2UubGVuZ3RoKTtcblxuICAgIHZhciBtYXRjaDtcbiAgICBpZiAoKG1hdGNoID0gaW5wdXQubWF0Y2goY3NzQ29sb3IpKSkge1xuICAgICAgICAvLyBJZiB3ZSBsb29rIGxpa2UgYSBjb2xvciwgcmV0dXJuIGEgY29sb3JcbiAgICAgICAgcmV0dXJuIG5ldyBUb2tlbihtYXRjaFswXSwgbnVsbCwgcG9zICsgbWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgUGFyc2VFcnJvcihcIkludmFsaWQgY29sb3JcIiwgdGhpcywgcG9zKTtcbiAgICB9XG59O1xuXG4vLyBBIHJlZ2V4IHRvIG1hdGNoIGEgZGltZW5zaW9uLiBEaW1lbnNpb25zIGxvb2sgbGlrZVxuLy8gXCIxLjJlbVwiIG9yIFwiLjRwdFwiIG9yIFwiMSBleFwiXG52YXIgc2l6ZVJlZ2V4ID0gL14oLT8pXFxzKihcXGQrKD86XFwuXFxkKik/fFxcLlxcZCspXFxzKihbYS16XXsyfSkvO1xuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gbGV4ZXMgYSBkaW1lbnNpb24uXG4gKi9cbkxleGVyLnByb3RvdHlwZS5faW5uZXJMZXhTaXplID0gZnVuY3Rpb24ocG9zKSB7XG4gICAgdmFyIGlucHV0ID0gdGhpcy5faW5wdXQuc2xpY2UocG9zKTtcblxuICAgIC8vIElnbm9yZSB3aGl0ZXNwYWNlXG4gICAgdmFyIHdoaXRlc3BhY2UgPSBpbnB1dC5tYXRjaCh3aGl0ZXNwYWNlUmVnZXgpWzBdO1xuICAgIHBvcyArPSB3aGl0ZXNwYWNlLmxlbmd0aDtcbiAgICBpbnB1dCA9IGlucHV0LnNsaWNlKHdoaXRlc3BhY2UubGVuZ3RoKTtcblxuICAgIHZhciBtYXRjaDtcbiAgICBpZiAoKG1hdGNoID0gaW5wdXQubWF0Y2goc2l6ZVJlZ2V4KSkpIHtcbiAgICAgICAgdmFyIHVuaXQgPSBtYXRjaFszXTtcbiAgICAgICAgLy8gV2Ugb25seSBjdXJyZW50bHkgaGFuZGxlIFwiZW1cIiBhbmQgXCJleFwiIHVuaXRzXG4gICAgICAgIGlmICh1bml0ICE9PSBcImVtXCIgJiYgdW5pdCAhPT0gXCJleFwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUGFyc2VFcnJvcihcIkludmFsaWQgdW5pdDogJ1wiICsgdW5pdCArIFwiJ1wiLCB0aGlzLCBwb3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgVG9rZW4obWF0Y2hbMF0sIHtcbiAgICAgICAgICAgICAgICBudW1iZXI6ICsobWF0Y2hbMV0gKyBtYXRjaFsyXSksXG4gICAgICAgICAgICAgICAgdW5pdDogdW5pdFxuICAgICAgICAgICAgfSwgcG9zICsgbWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgUGFyc2VFcnJvcihcIkludmFsaWQgc2l6ZVwiLCB0aGlzLCBwb3MpO1xufTtcblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGxleGVzIGEgc3RyaW5nIG9mIHdoaXRlc3BhY2UuXG4gKi9cbkxleGVyLnByb3RvdHlwZS5faW5uZXJMZXhXaGl0ZXNwYWNlID0gZnVuY3Rpb24ocG9zKSB7XG4gICAgdmFyIGlucHV0ID0gdGhpcy5faW5wdXQuc2xpY2UocG9zKTtcblxuICAgIHZhciB3aGl0ZXNwYWNlID0gaW5wdXQubWF0Y2god2hpdGVzcGFjZVJlZ2V4KVswXTtcbiAgICBwb3MgKz0gd2hpdGVzcGFjZS5sZW5ndGg7XG5cbiAgICByZXR1cm4gbmV3IFRva2VuKHdoaXRlc3BhY2UsIG51bGwsIHBvcyk7XG59O1xuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gbGV4ZXMgYSBzaW5nbGUgdG9rZW4gc3RhcnRpbmcgYXQgYHBvc2AgYW5kIG9mIHRoZSBnaXZlbiBtb2RlLlxuICogQmFzZWQgb24gdGhlIG1vZGUsIHdlIGRlZmVyIHRvIG9uZSBvZiB0aGUgYF9pbm5lckxleGAgZnVuY3Rpb25zLlxuICovXG5MZXhlci5wcm90b3R5cGUubGV4ID0gZnVuY3Rpb24ocG9zLCBtb2RlKSB7XG4gICAgaWYgKG1vZGUgPT09IFwibWF0aFwiKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbm5lckxleChwb3MsIG1hdGhOb3JtYWxzLCB0cnVlKTtcbiAgICB9IGVsc2UgaWYgKG1vZGUgPT09IFwidGV4dFwiKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbm5lckxleChwb3MsIHRleHROb3JtYWxzLCBmYWxzZSk7XG4gICAgfSBlbHNlIGlmIChtb2RlID09PSBcImNvbG9yXCIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lubmVyTGV4Q29sb3IocG9zKTtcbiAgICB9IGVsc2UgaWYgKG1vZGUgPT09IFwic2l6ZVwiKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbm5lckxleFNpemUocG9zKTtcbiAgICB9IGVsc2UgaWYgKG1vZGUgPT09IFwid2hpdGVzcGFjZVwiKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbm5lckxleFdoaXRlc3BhY2UocG9zKTtcbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExleGVyO1xuIiwiLyoqXG4gKiBUaGlzIGZpbGUgY29udGFpbnMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9wdGlvbnMgdGhhdCB0aGUgUGFyc2VyIGNhcnJpZXNcbiAqIGFyb3VuZCB3aXRoIGl0IHdoaWxlIHBhcnNpbmcuIERhdGEgaXMgaGVsZCBpbiBhbiBgT3B0aW9uc2Agb2JqZWN0LCBhbmQgd2hlblxuICogcmVjdXJzaW5nLCBhIG5ldyBgT3B0aW9uc2Agb2JqZWN0IGNhbiBiZSBjcmVhdGVkIHdpdGggdGhlIGAud2l0aCpgIGFuZFxuICogYC5yZXNldGAgZnVuY3Rpb25zLlxuICovXG5cbi8qKlxuICogVGhpcyBpcyB0aGUgbWFpbiBvcHRpb25zIGNsYXNzLiBJdCBjb250YWlucyB0aGUgc3R5bGUsIHNpemUsIGFuZCBjb2xvciBvZiB0aGVcbiAqIGN1cnJlbnQgcGFyc2UgbGV2ZWwuIEl0IGFsc28gY29udGFpbnMgdGhlIHN0eWxlIGFuZCBzaXplIG9mIHRoZSBwYXJlbnQgcGFyc2VcbiAqIGxldmVsLCBzbyBzaXplIGNoYW5nZXMgY2FuIGJlIGhhbmRsZWQgZWZmaWNpZW50bHkuXG4gKlxuICogRWFjaCBvZiB0aGUgYC53aXRoKmAgYW5kIGAucmVzZXRgIGZ1bmN0aW9ucyBwYXNzZXMgaXRzIGN1cnJlbnQgc3R5bGUgYW5kIHNpemVcbiAqIGFzIHRoZSBwYXJlbnRTdHlsZSBhbmQgcGFyZW50U2l6ZSBvZiB0aGUgbmV3IG9wdGlvbnMgY2xhc3MsIHNvIHBhcmVudFxuICogaGFuZGxpbmcgaXMgdGFrZW4gY2FyZSBvZiBhdXRvbWF0aWNhbGx5LlxuICovXG5mdW5jdGlvbiBPcHRpb25zKHN0eWxlLCBzaXplLCBjb2xvciwgcGFyZW50U3R5bGUsIHBhcmVudFNpemUpIHtcbiAgICB0aGlzLnN0eWxlID0gc3R5bGU7XG4gICAgdGhpcy5jb2xvciA9IGNvbG9yO1xuICAgIHRoaXMuc2l6ZSA9IHNpemU7XG5cbiAgICBpZiAocGFyZW50U3R5bGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwYXJlbnRTdHlsZSA9IHN0eWxlO1xuICAgIH1cbiAgICB0aGlzLnBhcmVudFN0eWxlID0gcGFyZW50U3R5bGU7XG5cbiAgICBpZiAocGFyZW50U2l6ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHBhcmVudFNpemUgPSBzaXplO1xuICAgIH1cbiAgICB0aGlzLnBhcmVudFNpemUgPSBwYXJlbnRTaXplO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBvcHRpb25zIG9iamVjdCB3aXRoIHRoZSBnaXZlbiBzdHlsZS5cbiAqL1xuT3B0aW9ucy5wcm90b3R5cGUud2l0aFN0eWxlID0gZnVuY3Rpb24oc3R5bGUpIHtcbiAgICByZXR1cm4gbmV3IE9wdGlvbnMoc3R5bGUsIHRoaXMuc2l6ZSwgdGhpcy5jb2xvciwgdGhpcy5zdHlsZSwgdGhpcy5zaXplKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IG9wdGlvbnMgb2JqZWN0IHdpdGggdGhlIGdpdmVuIHNpemUuXG4gKi9cbk9wdGlvbnMucHJvdG90eXBlLndpdGhTaXplID0gZnVuY3Rpb24oc2l6ZSkge1xuICAgIHJldHVybiBuZXcgT3B0aW9ucyh0aGlzLnN0eWxlLCBzaXplLCB0aGlzLmNvbG9yLCB0aGlzLnN0eWxlLCB0aGlzLnNpemUpO1xufTtcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgb3B0aW9ucyBvYmplY3Qgd2l0aCB0aGUgZ2l2ZW4gY29sb3IuXG4gKi9cbk9wdGlvbnMucHJvdG90eXBlLndpdGhDb2xvciA9IGZ1bmN0aW9uKGNvbG9yKSB7XG4gICAgcmV0dXJuIG5ldyBPcHRpb25zKHRoaXMuc3R5bGUsIHRoaXMuc2l6ZSwgY29sb3IsIHRoaXMuc3R5bGUsIHRoaXMuc2l6ZSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBvcHRpb25zIG9iamVjdCB3aXRoIHRoZSBzYW1lIHN0eWxlLCBzaXplLCBhbmQgY29sb3IuIFRoaXMgaXNcbiAqIHVzZWQgc28gdGhhdCBwYXJlbnQgc3R5bGUgYW5kIHNpemUgY2hhbmdlcyBhcmUgaGFuZGxlZCBjb3JyZWN0bHkuXG4gKi9cbk9wdGlvbnMucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBPcHRpb25zKFxuICAgICAgICB0aGlzLnN0eWxlLCB0aGlzLnNpemUsIHRoaXMuY29sb3IsIHRoaXMuc3R5bGUsIHRoaXMuc2l6ZSk7XG59O1xuXG4vKipcbiAqIEEgbWFwIG9mIGNvbG9yIG5hbWVzIHRvIENTUyBjb2xvcnMuXG4gKiBUT0RPKGVtaWx5KTogUmVtb3ZlIHRoaXMgd2hlbiB3ZSBoYXZlIHJlYWwgbWFjcm9zXG4gKi9cbnZhciBjb2xvck1hcCA9IHtcbiAgICBcImthdGV4LWJsdWVcIjogXCIjNjQ5NWVkXCIsXG4gICAgXCJrYXRleC1vcmFuZ2VcIjogXCIjZmZhNTAwXCIsXG4gICAgXCJrYXRleC1waW5rXCI6IFwiI2ZmMDBhZlwiLFxuICAgIFwia2F0ZXgtcmVkXCI6IFwiI2RmMDAzMFwiLFxuICAgIFwia2F0ZXgtZ3JlZW5cIjogXCIjMjhhZTdiXCIsXG4gICAgXCJrYXRleC1ncmF5XCI6IFwiZ3JheVwiLFxuICAgIFwia2F0ZXgtcHVycGxlXCI6IFwiIzlkMzhiZFwiXG59O1xuXG4vKipcbiAqIEdldHMgdGhlIENTUyBjb2xvciBvZiB0aGUgY3VycmVudCBvcHRpb25zIG9iamVjdCwgYWNjb3VudGluZyBmb3IgdGhlXG4gKiBgY29sb3JNYXBgLlxuICovXG5PcHRpb25zLnByb3RvdHlwZS5nZXRDb2xvciA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb2xvck1hcFt0aGlzLmNvbG9yXSB8fCB0aGlzLmNvbG9yO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBPcHRpb25zO1xuIiwiLyoqXG4gKiBUaGlzIGlzIHRoZSBQYXJzZUVycm9yIGNsYXNzLCB3aGljaCBpcyB0aGUgbWFpbiBlcnJvciB0aHJvd24gYnkgS2FUZVhcbiAqIGZ1bmN0aW9ucyB3aGVuIHNvbWV0aGluZyBoYXMgZ29uZSB3cm9uZy4gVGhpcyBpcyB1c2VkIHRvIGRpc3Rpbmd1aXNoIGludGVybmFsXG4gKiBlcnJvcnMgZnJvbSBlcnJvcnMgaW4gdGhlIGV4cHJlc3Npb24gdGhhdCB0aGUgdXNlciBwcm92aWRlZC5cbiAqL1xuZnVuY3Rpb24gUGFyc2VFcnJvcihtZXNzYWdlLCBsZXhlciwgcG9zaXRpb24pIHtcbiAgICB2YXIgZXJyb3IgPSBcIkthVGVYIHBhcnNlIGVycm9yOiBcIiArIG1lc3NhZ2U7XG5cbiAgICBpZiAobGV4ZXIgIT09IHVuZGVmaW5lZCAmJiBwb3NpdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIElmIHdlIGhhdmUgdGhlIGlucHV0IGFuZCBhIHBvc2l0aW9uLCBtYWtlIHRoZSBlcnJvciBhIGJpdCBmYW5jaWVyXG5cbiAgICAgICAgLy8gUHJlcGVuZCBzb21lIGluZm9ybWF0aW9uXG4gICAgICAgIGVycm9yICs9IFwiIGF0IHBvc2l0aW9uIFwiICsgcG9zaXRpb24gKyBcIjogXCI7XG5cbiAgICAgICAgLy8gR2V0IHRoZSBpbnB1dFxuICAgICAgICB2YXIgaW5wdXQgPSBsZXhlci5faW5wdXQ7XG4gICAgICAgIC8vIEluc2VydCBhIGNvbWJpbmluZyB1bmRlcnNjb3JlIGF0IHRoZSBjb3JyZWN0IHBvc2l0aW9uXG4gICAgICAgIGlucHV0ID0gaW5wdXQuc2xpY2UoMCwgcG9zaXRpb24pICsgXCJcXHUwMzMyXCIgK1xuICAgICAgICAgICAgaW5wdXQuc2xpY2UocG9zaXRpb24pO1xuXG4gICAgICAgIC8vIEV4dHJhY3Qgc29tZSBjb250ZXh0IGZyb20gdGhlIGlucHV0IGFuZCBhZGQgaXQgdG8gdGhlIGVycm9yXG4gICAgICAgIHZhciBiZWdpbiA9IE1hdGgubWF4KDAsIHBvc2l0aW9uIC0gMTUpO1xuICAgICAgICB2YXIgZW5kID0gcG9zaXRpb24gKyAxNTtcbiAgICAgICAgZXJyb3IgKz0gaW5wdXQuc2xpY2UoYmVnaW4sIGVuZCk7XG4gICAgfVxuXG4gICAgLy8gU29tZSBoYWNrZXJ5IHRvIG1ha2UgUGFyc2VFcnJvciBhIHByb3RvdHlwZSBvZiBFcnJvclxuICAgIC8vIFNlZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS84NDYwNzUzXG4gICAgdmFyIHNlbGYgPSBuZXcgRXJyb3IoZXJyb3IpO1xuICAgIHNlbGYubmFtZSA9IFwiUGFyc2VFcnJvclwiO1xuICAgIHNlbGYuX19wcm90b19fID0gUGFyc2VFcnJvci5wcm90b3R5cGU7XG5cbiAgICBzZWxmLnBvc2l0aW9uID0gcG9zaXRpb247XG4gICAgcmV0dXJuIHNlbGY7XG59XG5cbi8vIE1vcmUgaGFja2VyeVxuUGFyc2VFcnJvci5wcm90b3R5cGUuX19wcm90b19fID0gRXJyb3IucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBhcnNlRXJyb3I7XG4iLCJ2YXIgZnVuY3Rpb25zID0gcmVxdWlyZShcIi4vZnVuY3Rpb25zXCIpO1xudmFyIExleGVyID0gcmVxdWlyZShcIi4vTGV4ZXJcIik7XG52YXIgc3ltYm9scyA9IHJlcXVpcmUoXCIuL3N5bWJvbHNcIik7XG52YXIgdXRpbHMgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcblxudmFyIFBhcnNlRXJyb3IgPSByZXF1aXJlKFwiLi9QYXJzZUVycm9yXCIpO1xuXG4vKipcbiAqIFRoaXMgZmlsZSBjb250YWlucyB0aGUgcGFyc2VyIHVzZWQgdG8gcGFyc2Ugb3V0IGEgVGVYIGV4cHJlc3Npb24gZnJvbSB0aGVcbiAqIGlucHV0LiBTaW5jZSBUZVggaXNuJ3QgY29udGV4dC1mcmVlLCBzdGFuZGFyZCBwYXJzZXJzIGRvbid0IHdvcmsgcGFydGljdWxhcmx5XG4gKiB3ZWxsLlxuICpcbiAqIFRoZSBzdHJhdGVneSBvZiB0aGlzIHBhcnNlciBpcyBhcyBzdWNoOlxuICpcbiAqIFRoZSBtYWluIGZ1bmN0aW9ucyAodGhlIGAucGFyc2UuLi5gIG9uZXMpIHRha2UgYSBwb3NpdGlvbiBpbiB0aGUgY3VycmVudFxuICogcGFyc2Ugc3RyaW5nIHRvIHBhcnNlIHRva2VucyBmcm9tLiBUaGUgbGV4ZXIgKGZvdW5kIGluIExleGVyLmpzLCBzdG9yZWQgYXRcbiAqIHRoaXMubGV4ZXIpIGFsc28gc3VwcG9ydHMgcHVsbGluZyBvdXQgdG9rZW5zIGF0IGFyYml0cmFyeSBwbGFjZXMuIFdoZW5cbiAqIGluZGl2aWR1YWwgdG9rZW5zIGFyZSBuZWVkZWQgYXQgYSBwb3NpdGlvbiwgdGhlIGxleGVyIGlzIGNhbGxlZCB0byBwdWxsIG91dCBhXG4gKiB0b2tlbiwgd2hpY2ggaXMgdGhlbiB1c2VkLlxuICpcbiAqIFRoZSBtYWluIGZ1bmN0aW9ucyBhbHNvIHRha2UgYSBtb2RlIHRoYXQgdGhlIHBhcnNlciBpcyBjdXJyZW50bHkgaW5cbiAqIChjdXJyZW50bHkgXCJtYXRoXCIgb3IgXCJ0ZXh0XCIpLCB3aGljaCBkZW5vdGVzIHdoZXRoZXIgdGhlIGN1cnJlbnQgZW52aXJvbm1lbnRcbiAqIGlzIGEgbWF0aC15IG9uZSBvciBhIHRleHQteSBvbmUgKGUuZy4gaW5zaWRlIFxcdGV4dCkuIEN1cnJlbnRseSwgdGhpcyBzZXJ2ZXNcbiAqIHRvIGxpbWl0IHRoZSBmdW5jdGlvbnMgd2hpY2ggY2FuIGJlIHVzZWQgaW4gdGV4dCBtb2RlLlxuICpcbiAqIFRoZSBtYWluIGZ1bmN0aW9ucyB0aGVuIHJldHVybiBhbiBvYmplY3Qgd2hpY2ggY29udGFpbnMgdGhlIHVzZWZ1bCBkYXRhIHRoYXRcbiAqIHdhcyBwYXJzZWQgYXQgaXRzIGdpdmVuIHBvaW50LCBhbmQgYSBuZXcgcG9zaXRpb24gYXQgdGhlIGVuZCBvZiB0aGUgcGFyc2VkXG4gKiBkYXRhLiBUaGUgbWFpbiBmdW5jdGlvbnMgY2FuIGNhbGwgZWFjaCBvdGhlciBhbmQgY29udGludWUgdGhlIHBhcnNpbmcgYnlcbiAqIHVzaW5nIHRoZSByZXR1cm5lZCBwb3NpdGlvbiBhcyBhIG5ldyBzdGFydGluZyBwb2ludC5cbiAqXG4gKiBUaGVyZSBhcmUgYWxzbyBleHRyYSBgLmhhbmRsZS4uLmAgZnVuY3Rpb25zLCB3aGljaCBwdWxsIG91dCBzb21lIHJldXNlZFxuICogZnVuY3Rpb25hbGl0eSBpbnRvIHNlbGYtY29udGFpbmVkIGZ1bmN0aW9ucy5cbiAqXG4gKiBUaGUgZWFybGllciBmdW5jdGlvbnMgcmV0dXJuIGBQYXJzZVJlc3VsdGBzLCB3aGljaCBjb250YWluIGEgUGFyc2VOb2RlIGFuZCBhXG4gKiBuZXcgcG9zaXRpb24uXG4gKlxuICogVGhlIGxhdGVyIGZ1bmN0aW9ucyAod2hpY2ggYXJlIGNhbGxlZCBkZWVwZXIgaW4gdGhlIHBhcnNlKSBzb21ldGltZXMgcmV0dXJuXG4gKiBQYXJzZUZ1bmNPckFyZ3VtZW50LCB3aGljaCBjb250YWluIGEgUGFyc2VSZXN1bHQgYXMgd2VsbCBhcyBzb21lIGRhdGEgYWJvdXRcbiAqIHdoZXRoZXIgdGhlIHBhcnNlZCBvYmplY3QgaXMgYSBmdW5jdGlvbiB3aGljaCBpcyBtaXNzaW5nIHNvbWUgYXJndW1lbnRzLCBvciBhXG4gKiBzdGFuZGFsb25lIG9iamVjdCB3aGljaCBjYW4gYmUgdXNlZCBhcyBhbiBhcmd1bWVudCB0byBhbm90aGVyIGZ1bmN0aW9uLlxuICovXG5cbi8qKlxuICogTWFpbiBQYXJzZXIgY2xhc3NcbiAqL1xuZnVuY3Rpb24gUGFyc2VyKGlucHV0KSB7XG4gICAgLy8gTWFrZSBhIG5ldyBsZXhlclxuICAgIHRoaXMubGV4ZXIgPSBuZXcgTGV4ZXIoaW5wdXQpO1xufVxuXG4vKipcbiAqIFRoZSByZXN1bHRpbmcgcGFyc2UgdHJlZSBub2RlcyBvZiB0aGUgcGFyc2UgdHJlZS5cbiAqL1xuZnVuY3Rpb24gUGFyc2VOb2RlKHR5cGUsIHZhbHVlLCBtb2RlKSB7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5tb2RlID0gbW9kZTtcbn1cblxuLyoqXG4gKiBBIHJlc3VsdCBhbmQgZmluYWwgcG9zaXRpb24gcmV0dXJuZWQgYnkgdGhlIGAucGFyc2UuLi5gIGZ1bmN0aW9ucy5cbiAqL1xuZnVuY3Rpb24gUGFyc2VSZXN1bHQocmVzdWx0LCBuZXdQb3NpdGlvbikge1xuICAgIHRoaXMucmVzdWx0ID0gcmVzdWx0O1xuICAgIHRoaXMucG9zaXRpb24gPSBuZXdQb3NpdGlvbjtcbn1cblxuLyoqXG4gKiBBbiBpbml0aWFsIGZ1bmN0aW9uICh3aXRob3V0IGl0cyBhcmd1bWVudHMpLCBvciBhbiBhcmd1bWVudCB0byBhIGZ1bmN0aW9uLlxuICogVGhlIGByZXN1bHRgIGFyZ3VtZW50IHNob3VsZCBiZSBhIFBhcnNlUmVzdWx0LlxuICovXG5mdW5jdGlvbiBQYXJzZUZ1bmNPckFyZ3VtZW50KHJlc3VsdCwgaXNGdW5jdGlvbiwgYWxsb3dlZEluVGV4dCwgbnVtQXJncywgbnVtT3B0aW9uYWxBcmdzLCBhcmdUeXBlcykge1xuICAgIHRoaXMucmVzdWx0ID0gcmVzdWx0O1xuICAgIC8vIElzIHRoaXMgYSBmdW5jdGlvbiAoaS5lLiBpcyBpdCBzb21ldGhpbmcgZGVmaW5lZCBpbiBmdW5jdGlvbnMuanMpP1xuICAgIHRoaXMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG4gICAgLy8gSXMgaXQgYWxsb3dlZCBpbiB0ZXh0IG1vZGU/XG4gICAgdGhpcy5hbGxvd2VkSW5UZXh0ID0gYWxsb3dlZEluVGV4dDtcbiAgICAvLyBIb3cgbWFueSBhcmd1bWVudHM/XG4gICAgdGhpcy5udW1BcmdzID0gbnVtQXJncztcbiAgICAvLyBIb3cgbWFueSBvcHRpb25hbCBhcmd1bWVudHM/XG4gICAgdGhpcy5udW1PcHRpb25hbEFyZ3MgPSBudW1PcHRpb25hbEFyZ3M7XG4gICAgLy8gV2hhdCB0eXBlcyBvZiBhcmd1bWVudHM/XG4gICAgdGhpcy5hcmdUeXBlcyA9IGFyZ1R5cGVzO1xufVxuXG4vKipcbiAqIENoZWNrcyBhIHJlc3VsdCB0byBtYWtlIHN1cmUgaXQgaGFzIHRoZSByaWdodCB0eXBlLCBhbmQgdGhyb3dzIGFuXG4gKiBhcHByb3ByaWF0ZSBlcnJvciBvdGhlcndpc2UuXG4gKi9cblBhcnNlci5wcm90b3R5cGUuZXhwZWN0ID0gZnVuY3Rpb24ocmVzdWx0LCB0ZXh0KSB7XG4gICAgaWYgKHJlc3VsdC50ZXh0ICE9PSB0ZXh0KSB7XG4gICAgICAgIHRocm93IG5ldyBQYXJzZUVycm9yKFxuICAgICAgICAgICAgXCJFeHBlY3RlZCAnXCIgKyB0ZXh0ICsgXCInLCBnb3QgJ1wiICsgcmVzdWx0LnRleHQgKyBcIidcIixcbiAgICAgICAgICAgIHRoaXMubGV4ZXIsIHJlc3VsdC5wb3NpdGlvblxuICAgICAgICApO1xuICAgIH1cbn07XG5cbi8qKlxuICogTWFpbiBwYXJzaW5nIGZ1bmN0aW9uLCB3aGljaCBwYXJzZXMgYW4gZW50aXJlIGlucHV0LlxuICpcbiAqIEByZXR1cm4gez9BcnJheS48UGFyc2VOb2RlPn1cbiAqL1xuUGFyc2VyLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgLy8gVHJ5IHRvIHBhcnNlIHRoZSBpbnB1dFxuICAgIHZhciBwYXJzZSA9IHRoaXMucGFyc2VJbnB1dCgwLCBcIm1hdGhcIik7XG4gICAgcmV0dXJuIHBhcnNlLnJlc3VsdDtcbn07XG5cbi8qKlxuICogUGFyc2VzIGFuIGVudGlyZSBpbnB1dCB0cmVlLlxuICovXG5QYXJzZXIucHJvdG90eXBlLnBhcnNlSW5wdXQgPSBmdW5jdGlvbihwb3MsIG1vZGUpIHtcbiAgICAvLyBQYXJzZSBhbiBleHByZXNzaW9uXG4gICAgdmFyIGV4cHJlc3Npb24gPSB0aGlzLnBhcnNlRXhwcmVzc2lvbihwb3MsIG1vZGUsIGZhbHNlLCBudWxsKTtcbiAgICAvLyBJZiB3ZSBzdWNjZWVkZWQsIG1ha2Ugc3VyZSB0aGVyZSdzIGFuIEVPRiBhdCB0aGUgZW5kXG4gICAgdmFyIEVPRiA9IHRoaXMubGV4ZXIubGV4KGV4cHJlc3Npb24ucG9zaXRpb24sIG1vZGUpO1xuICAgIHRoaXMuZXhwZWN0KEVPRiwgXCJFT0ZcIik7XG4gICAgcmV0dXJuIGV4cHJlc3Npb247XG59O1xuXG4vKipcbiAqIFBhcnNlcyBhbiBcImV4cHJlc3Npb25cIiwgd2hpY2ggaXMgYSBsaXN0IG9mIGF0b21zLlxuICpcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYnJlYWtPbkluZml4IFNob3VsZCB0aGUgcGFyc2luZyBzdG9wIHdoZW4gd2UgaGl0IGluZml4XG4gKiAgICAgICAgICAgICAgICAgIG5vZGVzPyBUaGlzIGhhcHBlbnMgd2hlbiBmdW5jdGlvbnMgaGF2ZSBoaWdoZXIgcHJlY2VuZGVuY2VcbiAqICAgICAgICAgICAgICAgICAgdGhhbiBpbmZpeCBub2RlcyBpbiBpbXBsaWNpdCBwYXJzZXMuXG4gKlxuICogQHBhcmFtIHs/c3RyaW5nfSBicmVha09uVG9rZW4gVGhlIHRva2VuIHRoYXQgdGhlIGV4cHJlc3Npb24gc2hvdWxkIGVuZCB3aXRoLFxuICogICAgICAgICAgICAgICAgICBvciBgbnVsbGAgaWYgc29tZXRoaW5nIGVsc2Ugc2hvdWxkIGVuZCB0aGUgZXhwcmVzc2lvbi5cbiAqXG4gKiBAcmV0dXJuIHtQYXJzZVJlc3VsdH1cbiAqL1xuUGFyc2VyLnByb3RvdHlwZS5wYXJzZUV4cHJlc3Npb24gPSBmdW5jdGlvbihwb3MsIG1vZGUsIGJyZWFrT25JbmZpeCwgYnJlYWtPblRva2VuKSB7XG4gICAgdmFyIGJvZHkgPSBbXTtcbiAgICAvLyBLZWVwIGFkZGluZyBhdG9tcyB0byB0aGUgYm9keSB1bnRpbCB3ZSBjYW4ndCBwYXJzZSBhbnkgbW9yZSBhdG9tcyAoZWl0aGVyXG4gICAgLy8gd2UgcmVhY2hlZCB0aGUgZW5kLCBhIH0sIG9yIGEgXFxyaWdodClcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgbGV4ID0gdGhpcy5sZXhlci5sZXgocG9zLCBtb2RlKTtcbiAgICAgICAgaWYgKGJyZWFrT25Ub2tlbiAhPSBudWxsICYmIGxleC50ZXh0ID09PSBicmVha09uVG9rZW4pIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhdG9tID0gdGhpcy5wYXJzZUF0b20ocG9zLCBtb2RlKTtcbiAgICAgICAgaWYgKCFhdG9tKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoYnJlYWtPbkluZml4ICYmIGF0b20ucmVzdWx0LnR5cGUgPT09IFwiaW5maXhcIikge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgYm9keS5wdXNoKGF0b20ucmVzdWx0KTtcbiAgICAgICAgcG9zID0gYXRvbS5wb3NpdGlvbjtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBQYXJzZVJlc3VsdCh0aGlzLmhhbmRsZUluZml4Tm9kZXMoYm9keSwgbW9kZSksIHBvcyk7XG59O1xuXG4vKipcbiAqIFJld3JpdGVzIGluZml4IG9wZXJhdG9ycyBzdWNoIGFzIFxcb3ZlciB3aXRoIGNvcnJlc3BvbmRpbmcgY29tbWFuZHMgc3VjaFxuICogYXMgXFxmcmFjLlxuICpcbiAqIFRoZXJlIGNhbiBvbmx5IGJlIG9uZSBpbmZpeCBvcGVyYXRvciBwZXIgZ3JvdXAuICBJZiB0aGVyZSdzIG1vcmUgdGhhbiBvbmVcbiAqIHRoZW4gdGhlIGV4cHJlc3Npb24gaXMgYW1iaWd1b3VzLiAgVGhpcyBjYW4gYmUgcmVzb2x2ZWQgYnkgYWRkaW5nIHt9LlxuICpcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuUGFyc2VyLnByb3RvdHlwZS5oYW5kbGVJbmZpeE5vZGVzID0gZnVuY3Rpb24gKGJvZHksIG1vZGUpIHtcbiAgICB2YXIgb3ZlckluZGV4ID0gLTE7XG4gICAgdmFyIGZ1bmM7XG4gICAgdmFyIGZ1bmNOYW1lO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib2R5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBub2RlID0gYm9keVtpXTtcbiAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gXCJpbmZpeFwiKSB7XG4gICAgICAgICAgICBpZiAob3ZlckluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBQYXJzZUVycm9yKFwib25seSBvbmUgaW5maXggb3BlcmF0b3IgcGVyIGdyb3VwXCIsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGV4ZXIsIC0xKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG92ZXJJbmRleCA9IGk7XG4gICAgICAgICAgICBmdW5jTmFtZSA9IG5vZGUudmFsdWUucmVwbGFjZVdpdGg7XG4gICAgICAgICAgICBmdW5jID0gZnVuY3Rpb25zLmZ1bmNzW2Z1bmNOYW1lXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvdmVySW5kZXggIT09IC0xKSB7XG4gICAgICAgIHZhciBudW1lck5vZGUsIGRlbm9tTm9kZTtcblxuICAgICAgICB2YXIgbnVtZXJCb2R5ID0gYm9keS5zbGljZSgwLCBvdmVySW5kZXgpO1xuICAgICAgICB2YXIgZGVub21Cb2R5ID0gYm9keS5zbGljZShvdmVySW5kZXggKyAxKTtcblxuICAgICAgICBpZiAobnVtZXJCb2R5Lmxlbmd0aCA9PT0gMSAmJiBudW1lckJvZHlbMF0udHlwZSA9PT0gXCJvcmRncm91cFwiKSB7XG4gICAgICAgICAgICBudW1lck5vZGUgPSBudW1lckJvZHlbMF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBudW1lck5vZGUgPSBuZXcgUGFyc2VOb2RlKFwib3JkZ3JvdXBcIiwgbnVtZXJCb2R5LCBtb2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkZW5vbUJvZHkubGVuZ3RoID09PSAxICYmIGRlbm9tQm9keVswXS50eXBlID09PSBcIm9yZGdyb3VwXCIpIHtcbiAgICAgICAgICAgIGRlbm9tTm9kZSA9IGRlbm9tQm9keVswXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlbm9tTm9kZSA9IG5ldyBQYXJzZU5vZGUoXCJvcmRncm91cFwiLCBkZW5vbUJvZHksIG1vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHZhbHVlID0gZnVuYy5oYW5kbGVyKGZ1bmNOYW1lLCBudW1lck5vZGUsIGRlbm9tTm9kZSk7XG4gICAgICAgIHJldHVybiBbbmV3IFBhcnNlTm9kZSh2YWx1ZS50eXBlLCB2YWx1ZSwgbW9kZSldO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBib2R5O1xuICAgIH1cbn07XG5cbi8vIFRoZSBncmVlZGluZXNzIG9mIGEgc3VwZXJzY3JpcHQgb3Igc3Vic2NyaXB0XG52YXIgU1VQU1VCX0dSRUVESU5FU1MgPSAxO1xuXG4vKipcbiAqIEhhbmRsZSBhIHN1YnNjcmlwdCBvciBzdXBlcnNjcmlwdCB3aXRoIG5pY2UgZXJyb3JzLlxuICovXG5QYXJzZXIucHJvdG90eXBlLmhhbmRsZVN1cFN1YnNjcmlwdCA9IGZ1bmN0aW9uKHBvcywgbW9kZSwgc3ltYm9sLCBuYW1lKSB7XG4gICAgdmFyIGdyb3VwID0gdGhpcy5wYXJzZUdyb3VwKHBvcywgbW9kZSk7XG5cbiAgICBpZiAoIWdyb3VwKSB7XG4gICAgICAgIHRocm93IG5ldyBQYXJzZUVycm9yKFxuICAgICAgICAgICAgXCJFeHBlY3RlZCBncm91cCBhZnRlciAnXCIgKyBzeW1ib2wgKyBcIidcIiwgdGhpcy5sZXhlciwgcG9zKTtcbiAgICB9IGVsc2UgaWYgKGdyb3VwLm51bUFyZ3MgPiAwKSB7XG4gICAgICAgIC8vIF4gYW5kIF8gaGF2ZSBhIGdyZWVkaW5lc3MsIHNvIGhhbmRsZSBpbnRlcmFjdGlvbnMgd2l0aCBmdW5jdGlvbnMnXG4gICAgICAgIC8vIGdyZWVkaW5lc3NcbiAgICAgICAgdmFyIGZ1bmNHcmVlZGluZXNzID0gZnVuY3Rpb25zLmdldEdyZWVkaW5lc3MoZ3JvdXAucmVzdWx0LnJlc3VsdCk7XG4gICAgICAgIGlmIChmdW5jR3JlZWRpbmVzcyA+IFNVUFNVQl9HUkVFRElORVNTKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUZ1bmN0aW9uKHBvcywgbW9kZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUGFyc2VFcnJvcihcbiAgICAgICAgICAgICAgICBcIkdvdCBmdW5jdGlvbiAnXCIgKyBncm91cC5yZXN1bHQucmVzdWx0ICsgXCInIHdpdGggbm8gYXJndW1lbnRzIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJhcyBcIiArIG5hbWUsXG4gICAgICAgICAgICAgICAgdGhpcy5sZXhlciwgcG9zKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBncm91cC5yZXN1bHQ7XG4gICAgfVxufTtcblxuLyoqXG4gKiBQYXJzZXMgYSBncm91cCB3aXRoIG9wdGlvbmFsIHN1cGVyL3N1YnNjcmlwdHMuXG4gKlxuICogQHJldHVybiB7P1BhcnNlUmVzdWx0fVxuICovXG5QYXJzZXIucHJvdG90eXBlLnBhcnNlQXRvbSA9IGZ1bmN0aW9uKHBvcywgbW9kZSkge1xuICAgIC8vIFRoZSBib2R5IG9mIGFuIGF0b20gaXMgYW4gaW1wbGljaXQgZ3JvdXAsIHNvIHRoYXQgdGhpbmdzIGxpa2VcbiAgICAvLyBcXGxlZnQoeFxccmlnaHQpXjIgd29yayBjb3JyZWN0bHkuXG4gICAgdmFyIGJhc2UgPSB0aGlzLnBhcnNlSW1wbGljaXRHcm91cChwb3MsIG1vZGUpO1xuXG4gICAgLy8gSW4gdGV4dCBtb2RlLCB3ZSBkb24ndCBoYXZlIHN1cGVyc2NyaXB0cyBvciBzdWJzY3JpcHRzXG4gICAgaWYgKG1vZGUgPT09IFwidGV4dFwiKSB7XG4gICAgICAgIHJldHVybiBiYXNlO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBhbiBlbXB0eSBiYXNlXG4gICAgdmFyIGN1cnJQb3M7XG4gICAgaWYgKCFiYXNlKSB7XG4gICAgICAgIGN1cnJQb3MgPSBwb3M7XG4gICAgICAgIGJhc2UgPSB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY3VyclBvcyA9IGJhc2UucG9zaXRpb247XG4gICAgfVxuXG4gICAgdmFyIHN1cGVyc2NyaXB0O1xuICAgIHZhciBzdWJzY3JpcHQ7XG4gICAgdmFyIHJlc3VsdDtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAvLyBMZXggdGhlIGZpcnN0IHRva2VuXG4gICAgICAgIHZhciBsZXggPSB0aGlzLmxleGVyLmxleChjdXJyUG9zLCBtb2RlKTtcblxuICAgICAgICBpZiAobGV4LnRleHQgPT09IFwiXlwiKSB7XG4gICAgICAgICAgICAvLyBXZSBnb3QgYSBzdXBlcnNjcmlwdCBzdGFydFxuICAgICAgICAgICAgaWYgKHN1cGVyc2NyaXB0KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFBhcnNlRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgIFwiRG91YmxlIHN1cGVyc2NyaXB0XCIsIHRoaXMubGV4ZXIsIGN1cnJQb3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5oYW5kbGVTdXBTdWJzY3JpcHQoXG4gICAgICAgICAgICAgICAgbGV4LnBvc2l0aW9uLCBtb2RlLCBsZXgudGV4dCwgXCJzdXBlcnNjcmlwdFwiKTtcbiAgICAgICAgICAgIGN1cnJQb3MgPSByZXN1bHQucG9zaXRpb247XG4gICAgICAgICAgICBzdXBlcnNjcmlwdCA9IHJlc3VsdC5yZXN1bHQ7XG4gICAgICAgIH0gZWxzZSBpZiAobGV4LnRleHQgPT09IFwiX1wiKSB7XG4gICAgICAgICAgICAvLyBXZSBnb3QgYSBzdWJzY3JpcHQgc3RhcnRcbiAgICAgICAgICAgIGlmIChzdWJzY3JpcHQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUGFyc2VFcnJvcihcbiAgICAgICAgICAgICAgICAgICAgXCJEb3VibGUgc3Vic2NyaXB0XCIsIHRoaXMubGV4ZXIsIGN1cnJQb3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5oYW5kbGVTdXBTdWJzY3JpcHQoXG4gICAgICAgICAgICAgICAgbGV4LnBvc2l0aW9uLCBtb2RlLCBsZXgudGV4dCwgXCJzdWJzY3JpcHRcIik7XG4gICAgICAgICAgICBjdXJyUG9zID0gcmVzdWx0LnBvc2l0aW9uO1xuICAgICAgICAgICAgc3Vic2NyaXB0ID0gcmVzdWx0LnJlc3VsdDtcbiAgICAgICAgfSBlbHNlIGlmIChsZXgudGV4dCA9PT0gXCInXCIpIHtcbiAgICAgICAgICAgIC8vIFdlIGdvdCBhIHByaW1lXG4gICAgICAgICAgICB2YXIgcHJpbWUgPSBuZXcgUGFyc2VOb2RlKFwidGV4dG9yZFwiLCBcIlxcXFxwcmltZVwiLCBtb2RlKTtcblxuICAgICAgICAgICAgLy8gTWFueSBwcmltZXMgY2FuIGJlIGdyb3VwZWQgdG9nZXRoZXIsIHNvIHdlIGhhbmRsZSB0aGlzIGhlcmVcbiAgICAgICAgICAgIHZhciBwcmltZXMgPSBbcHJpbWVdO1xuICAgICAgICAgICAgY3VyclBvcyA9IGxleC5wb3NpdGlvbjtcbiAgICAgICAgICAgIC8vIEtlZXAgbGV4aW5nIHRva2VucyB1bnRpbCB3ZSBnZXQgc29tZXRoaW5nIHRoYXQncyBub3QgYSBwcmltZVxuICAgICAgICAgICAgd2hpbGUgKChsZXggPSB0aGlzLmxleGVyLmxleChjdXJyUG9zLCBtb2RlKSkudGV4dCA9PT0gXCInXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBGb3IgZWFjaCBvbmUsIGFkZCBhbm90aGVyIHByaW1lIHRvIHRoZSBsaXN0XG4gICAgICAgICAgICAgICAgcHJpbWVzLnB1c2gocHJpbWUpO1xuICAgICAgICAgICAgICAgIGN1cnJQb3MgPSBsZXgucG9zaXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBQdXQgdGhlbSBpbnRvIGFuIG9yZGdyb3VwIGFzIHRoZSBzdXBlcnNjcmlwdFxuICAgICAgICAgICAgc3VwZXJzY3JpcHQgPSBuZXcgUGFyc2VOb2RlKFwib3JkZ3JvdXBcIiwgcHJpbWVzLCBtb2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIElmIGl0IHdhc24ndCBeLCBfLCBvciAnLCBzdG9wIHBhcnNpbmcgc3VwZXIvc3Vic2NyaXB0c1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3VwZXJzY3JpcHQgfHwgc3Vic2NyaXB0KSB7XG4gICAgICAgIC8vIElmIHdlIGdvdCBlaXRoZXIgYSBzdXBlcnNjcmlwdCBvciBzdWJzY3JpcHQsIGNyZWF0ZSBhIHN1cHN1YlxuICAgICAgICByZXR1cm4gbmV3IFBhcnNlUmVzdWx0KFxuICAgICAgICAgICAgbmV3IFBhcnNlTm9kZShcInN1cHN1YlwiLCB7XG4gICAgICAgICAgICAgICAgYmFzZTogYmFzZSAmJiBiYXNlLnJlc3VsdCxcbiAgICAgICAgICAgICAgICBzdXA6IHN1cGVyc2NyaXB0LFxuICAgICAgICAgICAgICAgIHN1Yjogc3Vic2NyaXB0XG4gICAgICAgICAgICB9LCBtb2RlKSxcbiAgICAgICAgICAgIGN1cnJQb3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE90aGVyd2lzZSByZXR1cm4gdGhlIG9yaWdpbmFsIGJvZHlcbiAgICAgICAgcmV0dXJuIGJhc2U7XG4gICAgfVxufTtcblxuLy8gQSBsaXN0IG9mIHRoZSBzaXplLWNoYW5naW5nIGZ1bmN0aW9ucywgZm9yIHVzZSBpbiBwYXJzZUltcGxpY2l0R3JvdXBcbnZhciBzaXplRnVuY3MgPSBbXG4gICAgXCJcXFxcdGlueVwiLCBcIlxcXFxzY3JpcHRzaXplXCIsIFwiXFxcXGZvb3Rub3Rlc2l6ZVwiLCBcIlxcXFxzbWFsbFwiLCBcIlxcXFxub3JtYWxzaXplXCIsXG4gICAgXCJcXFxcbGFyZ2VcIiwgXCJcXFxcTGFyZ2VcIiwgXCJcXFxcTEFSR0VcIiwgXCJcXFxcaHVnZVwiLCBcIlxcXFxIdWdlXCJcbl07XG5cbi8vIEEgbGlzdCBvZiB0aGUgc3R5bGUtY2hhbmdpbmcgZnVuY3Rpb25zLCBmb3IgdXNlIGluIHBhcnNlSW1wbGljaXRHcm91cFxudmFyIHN0eWxlRnVuY3MgPSBbXG4gICAgXCJcXFxcZGlzcGxheXN0eWxlXCIsIFwiXFxcXHRleHRzdHlsZVwiLCBcIlxcXFxzY3JpcHRzdHlsZVwiLCBcIlxcXFxzY3JpcHRzY3JpcHRzdHlsZVwiXG5dO1xuXG4vKipcbiAqIFBhcnNlcyBhbiBpbXBsaWNpdCBncm91cCwgd2hpY2ggaXMgYSBncm91cCB0aGF0IHN0YXJ0cyBhdCB0aGUgZW5kIG9mIGFcbiAqIHNwZWNpZmllZCwgYW5kIGVuZHMgcmlnaHQgYmVmb3JlIGEgaGlnaGVyIGV4cGxpY2l0IGdyb3VwIGVuZHMsIG9yIGF0IEVPTC4gSXRcbiAqIGlzIHVzZWQgZm9yIGZ1bmN0aW9ucyB0aGF0IGFwcGVhciB0byBhZmZlY3QgdGhlIGN1cnJlbnQgc3R5bGUsIGxpa2UgXFxMYXJnZSBvclxuICogXFx0ZXh0cm0sIHdoZXJlIGluc3RlYWQgb2Yga2VlcGluZyBhIHN0eWxlIHdlIGp1c3QgcHJldGVuZCB0aGF0IHRoZXJlIGlzIGFuXG4gKiBpbXBsaWNpdCBncm91cGluZyBhZnRlciBpdCB1bnRpbCB0aGUgZW5kIG9mIHRoZSBncm91cC4gRS5nLlxuICogICBzbWFsbCB0ZXh0IHtcXExhcmdlIGxhcmdlIHRleHR9IHNtYWxsIHRleHQgYWdhaW5cbiAqIEl0IGlzIGFsc28gdXNlZCBmb3IgXFxsZWZ0IGFuZCBcXHJpZ2h0IHRvIGdldCB0aGUgY29ycmVjdCBncm91cGluZy5cbiAqXG4gKiBAcmV0dXJuIHs/UGFyc2VSZXN1bHR9XG4gKi9cblBhcnNlci5wcm90b3R5cGUucGFyc2VJbXBsaWNpdEdyb3VwID0gZnVuY3Rpb24ocG9zLCBtb2RlKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5wYXJzZVN5bWJvbChwb3MsIG1vZGUpO1xuXG4gICAgaWYgKCFzdGFydCB8fCAhc3RhcnQucmVzdWx0KSB7XG4gICAgICAgIC8vIElmIHdlIGRpZG4ndCBnZXQgYW55dGhpbmcgd2UgaGFuZGxlLCBmYWxsIGJhY2sgdG8gcGFyc2VGdW5jdGlvblxuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUZ1bmN0aW9uKHBvcywgbW9kZSk7XG4gICAgfVxuXG4gICAgdmFyIGZ1bmMgPSBzdGFydC5yZXN1bHQucmVzdWx0O1xuICAgIHZhciBib2R5O1xuXG4gICAgaWYgKGZ1bmMgPT09IFwiXFxcXGxlZnRcIikge1xuICAgICAgICAvLyBJZiB3ZSBzZWUgYSBsZWZ0OlxuICAgICAgICAvLyBQYXJzZSB0aGUgZW50aXJlIGxlZnQgZnVuY3Rpb24gKGluY2x1ZGluZyB0aGUgZGVsaW1pdGVyKVxuICAgICAgICB2YXIgbGVmdCA9IHRoaXMucGFyc2VGdW5jdGlvbihwb3MsIG1vZGUpO1xuICAgICAgICAvLyBQYXJzZSBvdXQgdGhlIGltcGxpY2l0IGJvZHlcbiAgICAgICAgYm9keSA9IHRoaXMucGFyc2VFeHByZXNzaW9uKGxlZnQucG9zaXRpb24sIG1vZGUsIGZhbHNlLCBcIn1cIik7XG4gICAgICAgIC8vIENoZWNrIHRoZSBuZXh0IHRva2VuXG4gICAgICAgIHZhciByaWdodExleCA9IHRoaXMucGFyc2VTeW1ib2woYm9keS5wb3NpdGlvbiwgbW9kZSk7XG5cbiAgICAgICAgaWYgKHJpZ2h0TGV4ICYmIHJpZ2h0TGV4LnJlc3VsdC5yZXN1bHQgPT09IFwiXFxcXHJpZ2h0XCIpIHtcbiAgICAgICAgICAgIC8vIElmIGl0J3MgYSBcXHJpZ2h0LCBwYXJzZSB0aGUgZW50aXJlIHJpZ2h0IGZ1bmN0aW9uIChpbmNsdWRpbmcgdGhlIGRlbGltaXRlcilcbiAgICAgICAgICAgIHZhciByaWdodCA9IHRoaXMucGFyc2VGdW5jdGlvbihib2R5LnBvc2l0aW9uLCBtb2RlKTtcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQYXJzZVJlc3VsdChcbiAgICAgICAgICAgICAgICBuZXcgUGFyc2VOb2RlKFwibGVmdHJpZ2h0XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgYm9keTogYm9keS5yZXN1bHQsXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IGxlZnQucmVzdWx0LnZhbHVlLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICByaWdodDogcmlnaHQucmVzdWx0LnZhbHVlLnZhbHVlXG4gICAgICAgICAgICAgICAgfSwgbW9kZSksXG4gICAgICAgICAgICAgICAgcmlnaHQucG9zaXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFBhcnNlRXJyb3IoXCJNaXNzaW5nIFxcXFxyaWdodFwiLCB0aGlzLmxleGVyLCBib2R5LnBvc2l0aW9uKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZnVuYyA9PT0gXCJcXFxccmlnaHRcIikge1xuICAgICAgICAvLyBJZiB3ZSBzZWUgYSByaWdodCwgZXhwbGljaXRseSBmYWlsIHRoZSBwYXJzaW5nIGhlcmUgc28gdGhlIFxcbGVmdFxuICAgICAgICAvLyBoYW5kbGluZyBlbmRzIHRoZSBncm91cFxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmNvbnRhaW5zKHNpemVGdW5jcywgZnVuYykpIHtcbiAgICAgICAgLy8gSWYgd2Ugc2VlIGEgc2l6aW5nIGZ1bmN0aW9uLCBwYXJzZSBvdXQgdGhlIGltcGxpY3QgYm9keVxuICAgICAgICBib2R5ID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oc3RhcnQucmVzdWx0LnBvc2l0aW9uLCBtb2RlLCBmYWxzZSwgXCJ9XCIpO1xuICAgICAgICByZXR1cm4gbmV3IFBhcnNlUmVzdWx0KFxuICAgICAgICAgICAgbmV3IFBhcnNlTm9kZShcInNpemluZ1wiLCB7XG4gICAgICAgICAgICAgICAgLy8gRmlndXJlIG91dCB3aGF0IHNpemUgdG8gdXNlIGJhc2VkIG9uIHRoZSBsaXN0IG9mIGZ1bmN0aW9ucyBhYm92ZVxuICAgICAgICAgICAgICAgIHNpemU6IFwic2l6ZVwiICsgKHV0aWxzLmluZGV4T2Yoc2l6ZUZ1bmNzLCBmdW5jKSArIDEpLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBib2R5LnJlc3VsdFxuICAgICAgICAgICAgfSwgbW9kZSksXG4gICAgICAgICAgICBib2R5LnBvc2l0aW9uKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmNvbnRhaW5zKHN0eWxlRnVuY3MsIGZ1bmMpKSB7XG4gICAgICAgIC8vIElmIHdlIHNlZSBhIHN0eWxpbmcgZnVuY3Rpb24sIHBhcnNlIG91dCB0aGUgaW1wbGljdCBib2R5XG4gICAgICAgIGJvZHkgPSB0aGlzLnBhcnNlRXhwcmVzc2lvbihzdGFydC5yZXN1bHQucG9zaXRpb24sIG1vZGUsIHRydWUsIFwifVwiKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQYXJzZVJlc3VsdChcbiAgICAgICAgICAgIG5ldyBQYXJzZU5vZGUoXCJzdHlsaW5nXCIsIHtcbiAgICAgICAgICAgICAgICAvLyBGaWd1cmUgb3V0IHdoYXQgc3R5bGUgdG8gdXNlIGJ5IHB1bGxpbmcgb3V0IHRoZSBzdHlsZSBmcm9tXG4gICAgICAgICAgICAgICAgLy8gdGhlIGZ1bmN0aW9uIG5hbWVcbiAgICAgICAgICAgICAgICBzdHlsZTogZnVuYy5zbGljZSgxLCBmdW5jLmxlbmd0aCAtIDUpLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBib2R5LnJlc3VsdFxuICAgICAgICAgICAgfSwgbW9kZSksXG4gICAgICAgICAgICBib2R5LnBvc2l0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBEZWZlciB0byBwYXJzZUZ1bmN0aW9uIGlmIGl0J3Mgbm90IGEgZnVuY3Rpb24gd2UgaGFuZGxlXG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlRnVuY3Rpb24ocG9zLCBtb2RlKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIFBhcnNlcyBhbiBlbnRpcmUgZnVuY3Rpb24sIGluY2x1ZGluZyBpdHMgYmFzZSBhbmQgYWxsIG9mIGl0cyBhcmd1bWVudHNcbiAqXG4gKiBAcmV0dXJuIHs/UGFyc2VSZXN1bHR9XG4gKi9cblBhcnNlci5wcm90b3R5cGUucGFyc2VGdW5jdGlvbiA9IGZ1bmN0aW9uKHBvcywgbW9kZSkge1xuICAgIHZhciBiYXNlR3JvdXAgPSB0aGlzLnBhcnNlR3JvdXAocG9zLCBtb2RlKTtcblxuICAgIGlmIChiYXNlR3JvdXApIHtcbiAgICAgICAgaWYgKGJhc2VHcm91cC5pc0Z1bmN0aW9uKSB7XG4gICAgICAgICAgICB2YXIgZnVuYyA9IGJhc2VHcm91cC5yZXN1bHQucmVzdWx0O1xuICAgICAgICAgICAgaWYgKG1vZGUgPT09IFwidGV4dFwiICYmICFiYXNlR3JvdXAuYWxsb3dlZEluVGV4dCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBQYXJzZUVycm9yKFxuICAgICAgICAgICAgICAgICAgICBcIkNhbid0IHVzZSBmdW5jdGlvbiAnXCIgKyBmdW5jICsgXCInIGluIHRleHQgbW9kZVwiLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxleGVyLCBiYXNlR3JvdXAucG9zaXRpb24pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgbmV3UG9zID0gYmFzZUdyb3VwLnJlc3VsdC5wb3NpdGlvbjtcbiAgICAgICAgICAgIHZhciByZXN1bHQ7XG5cbiAgICAgICAgICAgIHZhciB0b3RhbEFyZ3MgPSBiYXNlR3JvdXAubnVtQXJncyArIGJhc2VHcm91cC5udW1PcHRpb25hbEFyZ3M7XG5cbiAgICAgICAgICAgIGlmICh0b3RhbEFyZ3MgPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJhc2VHcmVlZGluZXNzID0gZnVuY3Rpb25zLmdldEdyZWVkaW5lc3MoZnVuYyk7XG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbZnVuY107XG4gICAgICAgICAgICAgICAgdmFyIHBvc2l0aW9ucyA9IFtuZXdQb3NdO1xuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b3RhbEFyZ3M7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXJnVHlwZSA9IGJhc2VHcm91cC5hcmdUeXBlcyAmJiBiYXNlR3JvdXAuYXJnVHlwZXNbaV07XG4gICAgICAgICAgICAgICAgICAgIHZhciBhcmc7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpIDwgYmFzZUdyb3VwLm51bU9wdGlvbmFsQXJncykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ1R5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSB0aGlzLnBhcnNlU3BlY2lhbEdyb3VwKG5ld1BvcywgYXJnVHlwZSwgbW9kZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IHRoaXMucGFyc2VPcHRpb25hbEdyb3VwKG5ld1BvcywgbW9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWFyZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbnMucHVzaChuZXdQb3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ1R5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSB0aGlzLnBhcnNlU3BlY2lhbEdyb3VwKG5ld1BvcywgYXJnVHlwZSwgbW9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IHRoaXMucGFyc2VHcm91cChuZXdQb3MsIG1vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhcmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUGFyc2VFcnJvcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJFeHBlY3RlZCBncm91cCBhZnRlciAnXCIgKyBiYXNlR3JvdXAucmVzdWx0LnJlc3VsdCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIidcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sZXhlciwgbmV3UG9zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgYXJnTm9kZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZy5udW1BcmdzID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFyZ0dyZWVkaW5lc3MgPSBmdW5jdGlvbnMuZ2V0R3JlZWRpbmVzcyhhcmcucmVzdWx0LnJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJnR3JlZWRpbmVzcyA+IGJhc2VHcmVlZGluZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnTm9kZSA9IHRoaXMucGFyc2VGdW5jdGlvbihuZXdQb3MsIG1vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUGFyc2VFcnJvcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJHb3QgZnVuY3Rpb24gJ1wiICsgYXJnLnJlc3VsdC5yZXN1bHQgKyBcIicgYXMgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhcmd1bWVudCB0byBmdW5jdGlvbiAnXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFzZUdyb3VwLnJlc3VsdC5yZXN1bHQgKyBcIidcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sZXhlciwgYXJnLnJlc3VsdC5wb3NpdGlvbiAtIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnTm9kZSA9IGFyZy5yZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKGFyZ05vZGUucmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25zLnB1c2goYXJnTm9kZS5wb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIG5ld1BvcyA9IGFyZ05vZGUucG9zaXRpb247XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYXJncy5wdXNoKHBvc2l0aW9ucyk7XG5cbiAgICAgICAgICAgICAgICByZXN1bHQgPSBmdW5jdGlvbnMuZnVuY3NbZnVuY10uaGFuZGxlci5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gZnVuY3Rpb25zLmZ1bmNzW2Z1bmNdLmhhbmRsZXIuYXBwbHkodGhpcywgW2Z1bmNdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQYXJzZVJlc3VsdChcbiAgICAgICAgICAgICAgICBuZXcgUGFyc2VOb2RlKHJlc3VsdC50eXBlLCByZXN1bHQsIG1vZGUpLFxuICAgICAgICAgICAgICAgIG5ld1Bvcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYmFzZUdyb3VwLnJlc3VsdDtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn07XG5cbi8qKlxuICogUGFyc2VzIGEgZ3JvdXAgd2hlbiB0aGUgbW9kZSBpcyBjaGFuZ2luZy4gVGFrZXMgYSBwb3NpdGlvbiwgYSBuZXcgbW9kZSwgYW5kXG4gKiBhbiBvdXRlciBtb2RlIHRoYXQgaXMgdXNlZCB0byBwYXJzZSB0aGUgb3V0c2lkZS5cbiAqXG4gKiBAcmV0dXJuIHs/UGFyc2VGdW5jT3JBcmd1bWVudH1cbiAqL1xuUGFyc2VyLnByb3RvdHlwZS5wYXJzZVNwZWNpYWxHcm91cCA9IGZ1bmN0aW9uKHBvcywgbW9kZSwgb3V0ZXJNb2RlLCBvcHRpb25hbCkge1xuICAgIGlmIChtb2RlID09PSBcImNvbG9yXCIgfHwgbW9kZSA9PT0gXCJzaXplXCIpIHtcbiAgICAgICAgLy8gY29sb3IgYW5kIHNpemUgbW9kZXMgYXJlIHNwZWNpYWwgYmVjYXVzZSB0aGV5IHNob3VsZCBoYXZlIGJyYWNlcyBhbmRcbiAgICAgICAgLy8gc2hvdWxkIG9ubHkgbGV4IGEgc2luZ2xlIHN5bWJvbCBpbnNpZGVcbiAgICAgICAgdmFyIG9wZW5CcmFjZSA9IHRoaXMubGV4ZXIubGV4KHBvcywgb3V0ZXJNb2RlKTtcbiAgICAgICAgaWYgKG9wdGlvbmFsICYmIG9wZW5CcmFjZS50ZXh0ICE9PSBcIltcIikge1xuICAgICAgICAgICAgLy8gb3B0aW9uYWwgYXJndW1lbnRzIHNob3VsZCByZXR1cm4gbnVsbCBpZiB0aGV5IGRvbid0IGV4aXN0XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmV4cGVjdChvcGVuQnJhY2UsIG9wdGlvbmFsID8gXCJbXCIgOiBcIntcIik7XG4gICAgICAgIHZhciBpbm5lciA9IHRoaXMubGV4ZXIubGV4KG9wZW5CcmFjZS5wb3NpdGlvbiwgbW9kZSk7XG4gICAgICAgIHZhciBkYXRhO1xuICAgICAgICBpZiAobW9kZSA9PT0gXCJjb2xvclwiKSB7XG4gICAgICAgICAgICBkYXRhID0gaW5uZXIudGV4dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRhdGEgPSBpbm5lci5kYXRhO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjbG9zZUJyYWNlID0gdGhpcy5sZXhlci5sZXgoaW5uZXIucG9zaXRpb24sIG91dGVyTW9kZSk7XG4gICAgICAgIHRoaXMuZXhwZWN0KGNsb3NlQnJhY2UsIG9wdGlvbmFsID8gXCJdXCIgOiBcIn1cIik7XG4gICAgICAgIHJldHVybiBuZXcgUGFyc2VGdW5jT3JBcmd1bWVudChcbiAgICAgICAgICAgIG5ldyBQYXJzZVJlc3VsdChcbiAgICAgICAgICAgICAgICBuZXcgUGFyc2VOb2RlKG1vZGUsIGRhdGEsIG91dGVyTW9kZSksXG4gICAgICAgICAgICAgICAgY2xvc2VCcmFjZS5wb3NpdGlvbiksXG4gICAgICAgICAgICBmYWxzZSk7XG4gICAgfSBlbHNlIGlmIChtb2RlID09PSBcInRleHRcIikge1xuICAgICAgICAvLyB0ZXh0IG1vZGUgaXMgc3BlY2lhbCBiZWNhdXNlIGl0IHNob3VsZCBpZ25vcmUgdGhlIHdoaXRlc3BhY2UgYmVmb3JlXG4gICAgICAgIC8vIGl0XG4gICAgICAgIHZhciB3aGl0ZXNwYWNlID0gdGhpcy5sZXhlci5sZXgocG9zLCBcIndoaXRlc3BhY2VcIik7XG4gICAgICAgIHBvcyA9IHdoaXRlc3BhY2UucG9zaXRpb247XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbmFsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlT3B0aW9uYWxHcm91cChwb3MsIG1vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlR3JvdXAocG9zLCBtb2RlKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIFBhcnNlcyBhIGdyb3VwLCB3aGljaCBpcyBlaXRoZXIgYSBzaW5nbGUgbnVjbGV1cyAobGlrZSBcInhcIikgb3IgYW4gZXhwcmVzc2lvblxuICogaW4gYnJhY2VzIChsaWtlIFwie3greX1cIilcbiAqXG4gKiBAcmV0dXJuIHs/UGFyc2VGdW5jT3JBcmd1bWVudH1cbiAqL1xuUGFyc2VyLnByb3RvdHlwZS5wYXJzZUdyb3VwID0gZnVuY3Rpb24ocG9zLCBtb2RlKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5sZXhlci5sZXgocG9zLCBtb2RlKTtcbiAgICAvLyBUcnkgdG8gcGFyc2UgYW4gb3BlbiBicmFjZVxuICAgIGlmIChzdGFydC50ZXh0ID09PSBcIntcIikge1xuICAgICAgICAvLyBJZiB3ZSBnZXQgYSBicmFjZSwgcGFyc2UgYW4gZXhwcmVzc2lvblxuICAgICAgICB2YXIgZXhwcmVzc2lvbiA9IHRoaXMucGFyc2VFeHByZXNzaW9uKHN0YXJ0LnBvc2l0aW9uLCBtb2RlLCBmYWxzZSwgXCJ9XCIpO1xuICAgICAgICAvLyBNYWtlIHN1cmUgd2UgZ2V0IGEgY2xvc2UgYnJhY2VcbiAgICAgICAgdmFyIGNsb3NlQnJhY2UgPSB0aGlzLmxleGVyLmxleChleHByZXNzaW9uLnBvc2l0aW9uLCBtb2RlKTtcbiAgICAgICAgdGhpcy5leHBlY3QoY2xvc2VCcmFjZSwgXCJ9XCIpO1xuICAgICAgICByZXR1cm4gbmV3IFBhcnNlRnVuY09yQXJndW1lbnQoXG4gICAgICAgICAgICBuZXcgUGFyc2VSZXN1bHQoXG4gICAgICAgICAgICAgICAgbmV3IFBhcnNlTm9kZShcIm9yZGdyb3VwXCIsIGV4cHJlc3Npb24ucmVzdWx0LCBtb2RlKSxcbiAgICAgICAgICAgICAgICBjbG9zZUJyYWNlLnBvc2l0aW9uKSxcbiAgICAgICAgICAgIGZhbHNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBPdGhlcndpc2UsIGp1c3QgcmV0dXJuIGEgbnVjbGV1c1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVN5bWJvbChwb3MsIG1vZGUpO1xuICAgIH1cbn07XG5cbi8qKlxuICogUGFyc2VzIGEgZ3JvdXAsIHdoaWNoIGlzIGFuIGV4cHJlc3Npb24gaW4gYnJhY2tldHMgKGxpa2UgXCJbeCt5XVwiKVxuICpcbiAqIEByZXR1cm4gez9QYXJzZUZ1bmNPckFyZ3VtZW50fVxuICovXG5QYXJzZXIucHJvdG90eXBlLnBhcnNlT3B0aW9uYWxHcm91cCA9IGZ1bmN0aW9uKHBvcywgbW9kZSkge1xuICAgIHZhciBzdGFydCA9IHRoaXMubGV4ZXIubGV4KHBvcywgbW9kZSk7XG4gICAgLy8gVHJ5IHRvIHBhcnNlIGFuIG9wZW4gYnJhY2tldFxuICAgIGlmIChzdGFydC50ZXh0ID09PSBcIltcIikge1xuICAgICAgICAvLyBJZiB3ZSBnZXQgYSBicmFjZSwgcGFyc2UgYW4gZXhwcmVzc2lvblxuICAgICAgICB2YXIgZXhwcmVzc2lvbiA9IHRoaXMucGFyc2VFeHByZXNzaW9uKHN0YXJ0LnBvc2l0aW9uLCBtb2RlLCBmYWxzZSwgXCJdXCIpO1xuICAgICAgICAvLyBNYWtlIHN1cmUgd2UgZ2V0IGEgY2xvc2UgYnJhY2tldFxuICAgICAgICB2YXIgY2xvc2VCcmFja2V0ID0gdGhpcy5sZXhlci5sZXgoZXhwcmVzc2lvbi5wb3NpdGlvbiwgbW9kZSk7XG4gICAgICAgIHRoaXMuZXhwZWN0KGNsb3NlQnJhY2tldCwgXCJdXCIpO1xuICAgICAgICByZXR1cm4gbmV3IFBhcnNlRnVuY09yQXJndW1lbnQoXG4gICAgICAgICAgICBuZXcgUGFyc2VSZXN1bHQoXG4gICAgICAgICAgICAgICAgbmV3IFBhcnNlTm9kZShcIm9yZGdyb3VwXCIsIGV4cHJlc3Npb24ucmVzdWx0LCBtb2RlKSxcbiAgICAgICAgICAgICAgICBjbG9zZUJyYWNrZXQucG9zaXRpb24pLFxuICAgICAgICAgICAgZmFsc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE90aGVyd2lzZSwgcmV0dXJuIG51bGwsXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn07XG5cbi8qKlxuICogUGFyc2UgYSBzaW5nbGUgc3ltYm9sIG91dCBvZiB0aGUgc3RyaW5nLiBIZXJlLCB3ZSBoYW5kbGUgYm90aCB0aGUgZnVuY3Rpb25zXG4gKiB3ZSBoYXZlIGRlZmluZWQsIGFzIHdlbGwgYXMgdGhlIHNpbmdsZSBjaGFyYWN0ZXIgc3ltYm9sc1xuICpcbiAqIEByZXR1cm4gez9QYXJzZUZ1bmNPckFyZ3VtZW50fVxuICovXG5QYXJzZXIucHJvdG90eXBlLnBhcnNlU3ltYm9sID0gZnVuY3Rpb24ocG9zLCBtb2RlKSB7XG4gICAgdmFyIG51Y2xldXMgPSB0aGlzLmxleGVyLmxleChwb3MsIG1vZGUpO1xuXG4gICAgaWYgKGZ1bmN0aW9ucy5mdW5jc1tudWNsZXVzLnRleHRdKSB7XG4gICAgICAgIC8vIElmIHRoZXJlIGlzIGEgZnVuY3Rpb24gd2l0aCB0aGlzIG5hbWUsIHdlIHVzZSBpdHMgZGF0YVxuICAgICAgICB2YXIgZnVuYyA9IGZ1bmN0aW9ucy5mdW5jc1tudWNsZXVzLnRleHRdO1xuXG4gICAgICAgIC8vIEhlcmUsIHdlIHJlcGxhY2UgXCJvcmlnaW5hbFwiIGFyZ1R5cGVzIHdpdGggdGhlIGN1cnJlbnQgbW9kZVxuICAgICAgICB2YXIgYXJnVHlwZXMgPSBmdW5jLmFyZ1R5cGVzO1xuICAgICAgICBpZiAoYXJnVHlwZXMpIHtcbiAgICAgICAgICAgIGFyZ1R5cGVzID0gYXJnVHlwZXMuc2xpY2UoKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJnVHlwZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoYXJnVHlwZXNbaV0gPT09IFwib3JpZ2luYWxcIikge1xuICAgICAgICAgICAgICAgICAgICBhcmdUeXBlc1tpXSA9IG1vZGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQYXJzZUZ1bmNPckFyZ3VtZW50KFxuICAgICAgICAgICAgbmV3IFBhcnNlUmVzdWx0KG51Y2xldXMudGV4dCwgbnVjbGV1cy5wb3NpdGlvbiksXG4gICAgICAgICAgICB0cnVlLCBmdW5jLmFsbG93ZWRJblRleHQsIGZ1bmMubnVtQXJncywgZnVuYy5udW1PcHRpb25hbEFyZ3MsIGFyZ1R5cGVzKTtcbiAgICB9IGVsc2UgaWYgKHN5bWJvbHNbbW9kZV1bbnVjbGV1cy50ZXh0XSkge1xuICAgICAgICAvLyBPdGhlcndpc2UgaWYgdGhpcyBpcyBhIG5vLWFyZ3VtZW50IGZ1bmN0aW9uLCBmaW5kIHRoZSB0eXBlIGl0XG4gICAgICAgIC8vIGNvcnJlc3BvbmRzIHRvIGluIHRoZSBzeW1ib2xzIG1hcFxuICAgICAgICByZXR1cm4gbmV3IFBhcnNlRnVuY09yQXJndW1lbnQoXG4gICAgICAgICAgICBuZXcgUGFyc2VSZXN1bHQoXG4gICAgICAgICAgICAgICAgbmV3IFBhcnNlTm9kZShzeW1ib2xzW21vZGVdW251Y2xldXMudGV4dF0uZ3JvdXAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWNsZXVzLnRleHQsIG1vZGUpLFxuICAgICAgICAgICAgICAgIG51Y2xldXMucG9zaXRpb24pLFxuICAgICAgICAgICAgZmFsc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUGFyc2VyO1xuIiwiLyoqXG4gKiBUaGlzIGZpbGUgY29udGFpbnMgaW5mb3JtYXRpb24gYW5kIGNsYXNzZXMgZm9yIHRoZSB2YXJpb3VzIGtpbmRzIG9mIHN0eWxlc1xuICogdXNlZCBpbiBUZVguIEl0IHByb3ZpZGVzIGEgZ2VuZXJpYyBgU3R5bGVgIGNsYXNzLCB3aGljaCBob2xkcyBpbmZvcm1hdGlvblxuICogYWJvdXQgYSBzcGVjaWZpYyBzdHlsZS4gSXQgdGhlbiBwcm92aWRlcyBpbnN0YW5jZXMgb2YgYWxsIHRoZSBkaWZmZXJlbnQga2luZHNcbiAqIG9mIHN0eWxlcyBwb3NzaWJsZSwgYW5kIHByb3ZpZGVzIGZ1bmN0aW9ucyB0byBtb3ZlIGJldHdlZW4gdGhlbSBhbmQgZ2V0XG4gKiBpbmZvcm1hdGlvbiBhYm91dCB0aGVtLlxuICovXG5cbi8qKlxuICogVGhlIG1haW4gc3R5bGUgY2xhc3MuIENvbnRhaW5zIGEgdW5pcXVlIGlkIGZvciB0aGUgc3R5bGUsIGEgc2l6ZSAod2hpY2ggaXNcbiAqIHRoZSBzYW1lIGZvciBjcmFtcGVkIGFuZCB1bmNyYW1wZWQgdmVyc2lvbiBvZiBhIHN0eWxlKSwgYSBjcmFtcGVkIGZsYWcsIGFuZCBhXG4gKiBzaXplIG11bHRpcGxpZXIsIHdoaWNoIGdpdmVzIHRoZSBzaXplIGRpZmZlcmVuY2UgYmV0d2VlbiBhIHN0eWxlIGFuZFxuICogdGV4dHN0eWxlLlxuICovXG5mdW5jdGlvbiBTdHlsZShpZCwgc2l6ZSwgbXVsdGlwbGllciwgY3JhbXBlZCkge1xuICAgIHRoaXMuaWQgPSBpZDtcbiAgICB0aGlzLnNpemUgPSBzaXplO1xuICAgIHRoaXMuY3JhbXBlZCA9IGNyYW1wZWQ7XG4gICAgdGhpcy5zaXplTXVsdGlwbGllciA9IG11bHRpcGxpZXI7XG59XG5cbi8qKlxuICogR2V0IHRoZSBzdHlsZSBvZiBhIHN1cGVyc2NyaXB0IGdpdmVuIGEgYmFzZSBpbiB0aGUgY3VycmVudCBzdHlsZS5cbiAqL1xuU3R5bGUucHJvdG90eXBlLnN1cCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzdHlsZXNbc3VwW3RoaXMuaWRdXTtcbn07XG5cbi8qKlxuICogR2V0IHRoZSBzdHlsZSBvZiBhIHN1YnNjcmlwdCBnaXZlbiBhIGJhc2UgaW4gdGhlIGN1cnJlbnQgc3R5bGUuXG4gKi9cblN0eWxlLnByb3RvdHlwZS5zdWIgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc3R5bGVzW3N1Ylt0aGlzLmlkXV07XG59O1xuXG4vKipcbiAqIEdldCB0aGUgc3R5bGUgb2YgYSBmcmFjdGlvbiBudW1lcmF0b3IgZ2l2ZW4gdGhlIGZyYWN0aW9uIGluIHRoZSBjdXJyZW50XG4gKiBzdHlsZS5cbiAqL1xuU3R5bGUucHJvdG90eXBlLmZyYWNOdW0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc3R5bGVzW2ZyYWNOdW1bdGhpcy5pZF1dO1xufTtcblxuLyoqXG4gKiBHZXQgdGhlIHN0eWxlIG9mIGEgZnJhY3Rpb24gZGVub21pbmF0b3IgZ2l2ZW4gdGhlIGZyYWN0aW9uIGluIHRoZSBjdXJyZW50XG4gKiBzdHlsZS5cbiAqL1xuU3R5bGUucHJvdG90eXBlLmZyYWNEZW4gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc3R5bGVzW2ZyYWNEZW5bdGhpcy5pZF1dO1xufTtcblxuLyoqXG4gKiBHZXQgdGhlIGNyYW1wZWQgdmVyc2lvbiBvZiBhIHN0eWxlIChpbiBwYXJ0aWN1bGFyLCBjcmFtcGluZyBhIGNyYW1wZWQgc3R5bGVcbiAqIGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHlsZSkuXG4gKi9cblN0eWxlLnByb3RvdHlwZS5jcmFtcCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzdHlsZXNbY3JhbXBbdGhpcy5pZF1dO1xufTtcblxuLyoqXG4gKiBIVE1MIGNsYXNzIG5hbWUsIGxpa2UgXCJkaXNwbGF5c3R5bGUgY3JhbXBlZFwiXG4gKi9cblN0eWxlLnByb3RvdHlwZS5jbHMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc2l6ZU5hbWVzW3RoaXMuc2l6ZV0gKyAodGhpcy5jcmFtcGVkID8gXCIgY3JhbXBlZFwiIDogXCIgdW5jcmFtcGVkXCIpO1xufTtcblxuLyoqXG4gKiBIVE1MIFJlc2V0IGNsYXNzIG5hbWUsIGxpa2UgXCJyZXNldC10ZXh0c3R5bGVcIlxuICovXG5TdHlsZS5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gcmVzZXROYW1lc1t0aGlzLnNpemVdO1xufTtcblxuLy8gSURzIG9mIHRoZSBkaWZmZXJlbnQgc3R5bGVzXG52YXIgRCA9IDA7XG52YXIgRGMgPSAxO1xudmFyIFQgPSAyO1xudmFyIFRjID0gMztcbnZhciBTID0gNDtcbnZhciBTYyA9IDU7XG52YXIgU1MgPSA2O1xudmFyIFNTYyA9IDc7XG5cbi8vIFN0cmluZyBuYW1lcyBmb3IgdGhlIGRpZmZlcmVudCBzaXplc1xudmFyIHNpemVOYW1lcyA9IFtcbiAgICBcImRpc3BsYXlzdHlsZSB0ZXh0c3R5bGVcIixcbiAgICBcInRleHRzdHlsZVwiLFxuICAgIFwic2NyaXB0c3R5bGVcIixcbiAgICBcInNjcmlwdHNjcmlwdHN0eWxlXCJcbl07XG5cbi8vIFJlc2V0IG5hbWVzIGZvciB0aGUgZGlmZmVyZW50IHNpemVzXG52YXIgcmVzZXROYW1lcyA9IFtcbiAgICBcInJlc2V0LXRleHRzdHlsZVwiLFxuICAgIFwicmVzZXQtdGV4dHN0eWxlXCIsXG4gICAgXCJyZXNldC1zY3JpcHRzdHlsZVwiLFxuICAgIFwicmVzZXQtc2NyaXB0c2NyaXB0c3R5bGVcIlxuXTtcblxuLy8gSW5zdGFuY2VzIG9mIHRoZSBkaWZmZXJlbnQgc3R5bGVzXG52YXIgc3R5bGVzID0gW1xuICAgIG5ldyBTdHlsZShELCAwLCAxLjAsIGZhbHNlKSxcbiAgICBuZXcgU3R5bGUoRGMsIDAsIDEuMCwgdHJ1ZSksXG4gICAgbmV3IFN0eWxlKFQsIDEsIDEuMCwgZmFsc2UpLFxuICAgIG5ldyBTdHlsZShUYywgMSwgMS4wLCB0cnVlKSxcbiAgICBuZXcgU3R5bGUoUywgMiwgMC43LCBmYWxzZSksXG4gICAgbmV3IFN0eWxlKFNjLCAyLCAwLjcsIHRydWUpLFxuICAgIG5ldyBTdHlsZShTUywgMywgMC41LCBmYWxzZSksXG4gICAgbmV3IFN0eWxlKFNTYywgMywgMC41LCB0cnVlKVxuXTtcblxuLy8gTG9va3VwIHRhYmxlcyBmb3Igc3dpdGNoaW5nIGZyb20gb25lIHN0eWxlIHRvIGFub3RoZXJcbnZhciBzdXAgPSBbUywgU2MsIFMsIFNjLCBTUywgU1NjLCBTUywgU1NjXTtcbnZhciBzdWIgPSBbU2MsIFNjLCBTYywgU2MsIFNTYywgU1NjLCBTU2MsIFNTY107XG52YXIgZnJhY051bSA9IFtULCBUYywgUywgU2MsIFNTLCBTU2MsIFNTLCBTU2NdO1xudmFyIGZyYWNEZW4gPSBbVGMsIFRjLCBTYywgU2MsIFNTYywgU1NjLCBTU2MsIFNTY107XG52YXIgY3JhbXAgPSBbRGMsIERjLCBUYywgVGMsIFNjLCBTYywgU1NjLCBTU2NdO1xuXG4vLyBXZSBvbmx5IGV4cG9ydCBzb21lIG9mIHRoZSBzdHlsZXMuIEFsc28sIHdlIGRvbid0IGV4cG9ydCB0aGUgYFN0eWxlYCBjbGFzcyBzb1xuLy8gbm8gbW9yZSBzdHlsZXMgY2FuIGJlIGdlbmVyYXRlZC5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIERJU1BMQVk6IHN0eWxlc1tEXSxcbiAgICBURVhUOiBzdHlsZXNbVF0sXG4gICAgU0NSSVBUOiBzdHlsZXNbU10sXG4gICAgU0NSSVBUU0NSSVBUOiBzdHlsZXNbU1NdXG59O1xuIiwiLyoqXG4gKiBUaGlzIG1vZHVsZSBjb250YWlucyBnZW5lcmFsIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSB1c2VkIGZvciBidWlsZGluZ1xuICogZGlmZmVyZW50IGtpbmRzIG9mIGRvbVRyZWUgbm9kZXMgaW4gYSBjb25zaXN0ZW50IG1hbm5lci5cbiAqL1xuXG52YXIgZG9tVHJlZSA9IHJlcXVpcmUoXCIuL2RvbVRyZWVcIik7XG52YXIgZm9udE1ldHJpY3MgPSByZXF1aXJlKFwiLi9mb250TWV0cmljc1wiKTtcbnZhciBzeW1ib2xzID0gcmVxdWlyZShcIi4vc3ltYm9sc1wiKTtcblxuLyoqXG4gKiBNYWtlcyBhIHN5bWJvbE5vZGUgYWZ0ZXIgdHJhbnNsYXRpb24gdmlhIHRoZSBsaXN0IG9mIHN5bWJvbHMgaW4gc3ltYm9scy5qcy5cbiAqIENvcnJlY3RseSBwdWxscyBvdXQgbWV0cmljcyBmb3IgdGhlIGNoYXJhY3RlciwgYW5kIG9wdGlvbmFsbHkgdGFrZXMgYSBsaXN0IG9mXG4gKiBjbGFzc2VzIHRvIGJlIGF0dGFjaGVkIHRvIHRoZSBub2RlLlxuICovXG52YXIgbWFrZVN5bWJvbCA9IGZ1bmN0aW9uKHZhbHVlLCBzdHlsZSwgbW9kZSwgY29sb3IsIGNsYXNzZXMpIHtcbiAgICAvLyBSZXBsYWNlIHRoZSB2YWx1ZSB3aXRoIGl0cyByZXBsYWNlZCB2YWx1ZSBmcm9tIHN5bWJvbC5qc1xuICAgIGlmIChzeW1ib2xzW21vZGVdW3ZhbHVlXSAmJiBzeW1ib2xzW21vZGVdW3ZhbHVlXS5yZXBsYWNlKSB7XG4gICAgICAgIHZhbHVlID0gc3ltYm9sc1ttb2RlXVt2YWx1ZV0ucmVwbGFjZTtcbiAgICB9XG5cbiAgICB2YXIgbWV0cmljcyA9IGZvbnRNZXRyaWNzLmdldENoYXJhY3Rlck1ldHJpY3ModmFsdWUsIHN0eWxlKTtcblxuICAgIHZhciBzeW1ib2xOb2RlO1xuICAgIGlmIChtZXRyaWNzKSB7XG4gICAgICAgIHN5bWJvbE5vZGUgPSBuZXcgZG9tVHJlZS5zeW1ib2xOb2RlKFxuICAgICAgICAgICAgdmFsdWUsIG1ldHJpY3MuaGVpZ2h0LCBtZXRyaWNzLmRlcHRoLCBtZXRyaWNzLml0YWxpYywgbWV0cmljcy5za2V3LFxuICAgICAgICAgICAgY2xhc3Nlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVE9ETyhlbWlseSk6IEZpZ3VyZSBvdXQgYSBnb29kIHdheSB0byBvbmx5IHByaW50IHRoaXMgaW4gZGV2ZWxvcG1lbnRcbiAgICAgICAgdHlwZW9mIGNvbnNvbGUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgXCJObyBjaGFyYWN0ZXIgbWV0cmljcyBmb3IgJ1wiICsgdmFsdWUgKyBcIicgaW4gc3R5bGUgJ1wiICtcbiAgICAgICAgICAgICAgICBzdHlsZSArIFwiJ1wiKTtcbiAgICAgICAgc3ltYm9sTm9kZSA9IG5ldyBkb21UcmVlLnN5bWJvbE5vZGUodmFsdWUsIDAsIDAsIDAsIDAsIGNsYXNzZXMpO1xuICAgIH1cblxuICAgIGlmIChjb2xvcikge1xuICAgICAgICBzeW1ib2xOb2RlLnN0eWxlLmNvbG9yID0gY29sb3I7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN5bWJvbE5vZGU7XG59O1xuXG4vKipcbiAqIE1ha2VzIGEgc3ltYm9sIGluIHRoZSBpdGFsaWMgbWF0aCBmb250LlxuICovXG52YXIgbWF0aGl0ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUsIGNvbG9yLCBjbGFzc2VzKSB7XG4gICAgcmV0dXJuIG1ha2VTeW1ib2woXG4gICAgICAgIHZhbHVlLCBcIk1hdGgtSXRhbGljXCIsIG1vZGUsIGNvbG9yLCBjbGFzc2VzLmNvbmNhdChbXCJtYXRoaXRcIl0pKTtcbn07XG5cbi8qKlxuICogTWFrZXMgYSBzeW1ib2wgaW4gdGhlIHVwcmlnaHQgcm9tYW4gZm9udC5cbiAqL1xudmFyIG1hdGhybSA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlLCBjb2xvciwgY2xhc3Nlcykge1xuICAgIC8vIERlY2lkZSB3aGF0IGZvbnQgdG8gcmVuZGVyIHRoZSBzeW1ib2wgaW4gYnkgaXRzIGVudHJ5IGluIHRoZSBzeW1ib2xzXG4gICAgLy8gdGFibGUuXG4gICAgaWYgKHN5bWJvbHNbbW9kZV1bdmFsdWVdLmZvbnQgPT09IFwibWFpblwiKSB7XG4gICAgICAgIHJldHVybiBtYWtlU3ltYm9sKHZhbHVlLCBcIk1haW4tUmVndWxhclwiLCBtb2RlLCBjb2xvciwgY2xhc3Nlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG1ha2VTeW1ib2woXG4gICAgICAgICAgICB2YWx1ZSwgXCJBTVMtUmVndWxhclwiLCBtb2RlLCBjb2xvciwgY2xhc3Nlcy5jb25jYXQoW1wiYW1zcm1cIl0pKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIENhbGN1bGF0ZSB0aGUgaGVpZ2h0LCBkZXB0aCwgYW5kIG1heEZvbnRTaXplIG9mIGFuIGVsZW1lbnQgYmFzZWQgb24gaXRzXG4gKiBjaGlsZHJlbi5cbiAqL1xudmFyIHNpemVFbGVtZW50RnJvbUNoaWxkcmVuID0gZnVuY3Rpb24oZWxlbSkge1xuICAgIHZhciBoZWlnaHQgPSAwO1xuICAgIHZhciBkZXB0aCA9IDA7XG4gICAgdmFyIG1heEZvbnRTaXplID0gMDtcblxuICAgIGlmIChlbGVtLmNoaWxkcmVuKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGVsZW0uY2hpbGRyZW5baV0uaGVpZ2h0ID4gaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gZWxlbS5jaGlsZHJlbltpXS5oZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZWxlbS5jaGlsZHJlbltpXS5kZXB0aCA+IGRlcHRoKSB7XG4gICAgICAgICAgICAgICAgZGVwdGggPSBlbGVtLmNoaWxkcmVuW2ldLmRlcHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVsZW0uY2hpbGRyZW5baV0ubWF4Rm9udFNpemUgPiBtYXhGb250U2l6ZSkge1xuICAgICAgICAgICAgICAgIG1heEZvbnRTaXplID0gZWxlbS5jaGlsZHJlbltpXS5tYXhGb250U2l6ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGVsZW0uaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIGVsZW0uZGVwdGggPSBkZXB0aDtcbiAgICBlbGVtLm1heEZvbnRTaXplID0gbWF4Rm9udFNpemU7XG59O1xuXG4vKipcbiAqIE1ha2VzIGEgc3BhbiB3aXRoIHRoZSBnaXZlbiBsaXN0IG9mIGNsYXNzZXMsIGxpc3Qgb2YgY2hpbGRyZW4sIGFuZCBjb2xvci5cbiAqL1xudmFyIG1ha2VTcGFuID0gZnVuY3Rpb24oY2xhc3NlcywgY2hpbGRyZW4sIGNvbG9yKSB7XG4gICAgdmFyIHNwYW4gPSBuZXcgZG9tVHJlZS5zcGFuKGNsYXNzZXMsIGNoaWxkcmVuKTtcblxuICAgIHNpemVFbGVtZW50RnJvbUNoaWxkcmVuKHNwYW4pO1xuXG4gICAgaWYgKGNvbG9yKSB7XG4gICAgICAgIHNwYW4uc3R5bGUuY29sb3IgPSBjb2xvcjtcbiAgICB9XG5cbiAgICByZXR1cm4gc3Bhbjtcbn07XG5cbi8qKlxuICogTWFrZXMgYSBkb2N1bWVudCBmcmFnbWVudCB3aXRoIHRoZSBnaXZlbiBsaXN0IG9mIGNoaWxkcmVuLlxuICovXG52YXIgbWFrZUZyYWdtZW50ID0gZnVuY3Rpb24oY2hpbGRyZW4pIHtcbiAgICB2YXIgZnJhZ21lbnQgPSBuZXcgZG9tVHJlZS5kb2N1bWVudEZyYWdtZW50KGNoaWxkcmVuKTtcblxuICAgIHNpemVFbGVtZW50RnJvbUNoaWxkcmVuKGZyYWdtZW50KTtcblxuICAgIHJldHVybiBmcmFnbWVudDtcbn07XG5cbi8qKlxuICogTWFrZXMgYW4gZWxlbWVudCBwbGFjZWQgaW4gZWFjaCBvZiB0aGUgdmxpc3QgZWxlbWVudHMgdG8gZW5zdXJlIHRoYXQgZWFjaFxuICogZWxlbWVudCBoYXMgdGhlIHNhbWUgbWF4IGZvbnQgc2l6ZS4gVG8gZG8gdGhpcywgd2UgY3JlYXRlIGEgemVyby13aWR0aCBzcGFjZVxuICogd2l0aCB0aGUgY29ycmVjdCBmb250IHNpemUuXG4gKi9cbnZhciBtYWtlRm9udFNpemVyID0gZnVuY3Rpb24ob3B0aW9ucywgZm9udFNpemUpIHtcbiAgICB2YXIgZm9udFNpemVJbm5lciA9IG1ha2VTcGFuKFtdLCBbbmV3IGRvbVRyZWUuc3ltYm9sTm9kZShcIlxcdTIwMGJcIildKTtcbiAgICBmb250U2l6ZUlubmVyLnN0eWxlLmZvbnRTaXplID0gKGZvbnRTaXplIC8gb3B0aW9ucy5zdHlsZS5zaXplTXVsdGlwbGllcikgKyBcImVtXCI7XG5cbiAgICB2YXIgZm9udFNpemVyID0gbWFrZVNwYW4oXG4gICAgICAgIFtcImZvbnRzaXplLWVuc3VyZXJcIiwgXCJyZXNldC1cIiArIG9wdGlvbnMuc2l6ZSwgXCJzaXplNVwiXSxcbiAgICAgICAgW2ZvbnRTaXplSW5uZXJdKTtcblxuICAgIHJldHVybiBmb250U2l6ZXI7XG59O1xuXG4vKipcbiAqIE1ha2VzIGEgdmVydGljYWwgbGlzdCBieSBzdGFja2luZyBlbGVtZW50cyBhbmQga2VybnMgb24gdG9wIG9mIGVhY2ggb3RoZXIuXG4gKiBBbGxvd3MgZm9yIG1hbnkgZGlmZmVyZW50IHdheXMgb2Ygc3BlY2lmeWluZyB0aGUgcG9zaXRpb25pbmcgbWV0aG9kLlxuICpcbiAqIEFyZ3VtZW50czpcbiAqICAtIGNoaWxkcmVuOiBBIGxpc3Qgb2YgY2hpbGQgb3Iga2VybiBub2RlcyB0byBiZSBzdGFja2VkIG9uIHRvcCBvZiBlYWNoIG90aGVyXG4gKiAgICAgICAgICAgICAgKGkuZS4gdGhlIGZpcnN0IGVsZW1lbnQgd2lsbCBiZSBhdCB0aGUgYm90dG9tLCBhbmQgdGhlIGxhc3QgYXRcbiAqICAgICAgICAgICAgICB0aGUgdG9wKS4gRWxlbWVudCBub2RlcyBhcmUgc3BlY2lmaWVkIGFzXG4gKiAgICAgICAgICAgICAgICB7dHlwZTogXCJlbGVtXCIsIGVsZW06IG5vZGV9XG4gKiAgICAgICAgICAgICAgd2hpbGUga2VybiBub2RlcyBhcmUgc3BlY2lmaWVkIGFzXG4gKiAgICAgICAgICAgICAgICB7dHlwZTogXCJrZXJuXCIsIHNpemU6IHNpemV9XG4gKiAgLSBwb3NpdGlvblR5cGU6IFRoZSBtZXRob2QgYnkgd2hpY2ggdGhlIHZsaXN0IHNob3VsZCBiZSBwb3NpdGlvbmVkLiBWYWxpZFxuICogICAgICAgICAgICAgICAgICB2YWx1ZXMgYXJlOlxuICogICAgICAgICAgICAgICAgICAgLSBcImluZGl2aWR1YWxTaGlmdFwiOiBUaGUgY2hpbGRyZW4gbGlzdCBvbmx5IGNvbnRhaW5zIGVsZW1cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzLCBhbmQgZWFjaCBub2RlIGNvbnRhaW5zIGFuIGV4dHJhXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInNoaWZ0XCIgdmFsdWUgb2YgaG93IG11Y2ggaXQgc2hvdWxkIGJlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGlmdGVkIChub3RlIHRoYXQgc2hpZnRpbmcgaXMgYWx3YXlzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3ZpbmcgZG93bndhcmRzKS4gcG9zaXRpb25EYXRhIGlzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZ25vcmVkLlxuICogICAgICAgICAgICAgICAgICAgLSBcInRvcFwiOiBUaGUgcG9zaXRpb25EYXRhIHNwZWNpZmllcyB0aGUgdG9wbW9zdCBwb2ludCBvZlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHZsaXN0IChub3RlIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYSBoZWlnaHQsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbyBwb3NpdGl2ZSB2YWx1ZXMgbW92ZSB1cClcbiAqICAgICAgICAgICAgICAgICAgIC0gXCJib3R0b21cIjogVGhlIHBvc2l0aW9uRGF0YSBzcGVjaWZpZXMgdGhlIGJvdHRvbW1vc3QgcG9pbnRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIHRoZSB2bGlzdCAobm90ZSB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcHRoLCBzbyBwb3NpdGl2ZSB2YWx1ZXMgbW92ZSBkb3duXG4gKiAgICAgICAgICAgICAgICAgICAtIFwic2hpZnRcIjogVGhlIHZsaXN0IHdpbGwgYmUgcG9zaXRpb25lZCBzdWNoIHRoYXQgaXRzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhc2VsaW5lIGlzIHBvc2l0aW9uRGF0YSBhd2F5IGZyb20gdGhlIGJhc2VsaW5lXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIHRoZSBmaXJzdCBjaGlsZC4gUG9zaXRpdmUgdmFsdWVzIG1vdmVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG93bndhcmRzLlxuICogICAgICAgICAgICAgICAgICAgLSBcImZpcnN0QmFzZWxpbmVcIjogVGhlIHZsaXN0IHdpbGwgYmUgcG9zaXRpb25lZCBzdWNoIHRoYXRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdHMgYmFzZWxpbmUgaXMgYWxpZ25lZCB3aXRoIHRoZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhc2VsaW5lIG9mIHRoZSBmaXJzdCBjaGlsZC5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbkRhdGEgaXMgaWdub3JlZC4gKHRoaXMgaXNcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcXVpdmFsZW50IHRvIFwic2hpZnRcIiB3aXRoXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25EYXRhPTApXG4gKiAgLSBwb3NpdGlvbkRhdGE6IERhdGEgdXNlZCBpbiBkaWZmZXJlbnQgd2F5cyBkZXBlbmRpbmcgb24gcG9zaXRpb25UeXBlXG4gKiAgLSBvcHRpb25zOiBBbiBPcHRpb25zIG9iamVjdFxuICpcbiAqL1xudmFyIG1ha2VWTGlzdCA9IGZ1bmN0aW9uKGNoaWxkcmVuLCBwb3NpdGlvblR5cGUsIHBvc2l0aW9uRGF0YSwgb3B0aW9ucykge1xuICAgIHZhciBkZXB0aDtcbiAgICB2YXIgY3VyclBvcztcbiAgICB2YXIgaTtcbiAgICBpZiAocG9zaXRpb25UeXBlID09PSBcImluZGl2aWR1YWxTaGlmdFwiKSB7XG4gICAgICAgIHZhciBvbGRDaGlsZHJlbiA9IGNoaWxkcmVuO1xuICAgICAgICBjaGlsZHJlbiA9IFtvbGRDaGlsZHJlblswXV07XG5cbiAgICAgICAgLy8gQWRkIGluIGtlcm5zIHRvIHRoZSBsaXN0IG9mIGNoaWxkcmVuIHRvIGdldCBlYWNoIGVsZW1lbnQgdG8gYmVcbiAgICAgICAgLy8gc2hpZnRlZCB0byB0aGUgY29ycmVjdCBzcGVjaWZpZWQgc2hpZnRcbiAgICAgICAgZGVwdGggPSAtb2xkQ2hpbGRyZW5bMF0uc2hpZnQgLSBvbGRDaGlsZHJlblswXS5lbGVtLmRlcHRoO1xuICAgICAgICBjdXJyUG9zID0gZGVwdGg7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBvbGRDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGRpZmYgPSAtb2xkQ2hpbGRyZW5baV0uc2hpZnQgLSBjdXJyUG9zIC1cbiAgICAgICAgICAgICAgICBvbGRDaGlsZHJlbltpXS5lbGVtLmRlcHRoO1xuICAgICAgICAgICAgdmFyIHNpemUgPSBkaWZmIC1cbiAgICAgICAgICAgICAgICAob2xkQ2hpbGRyZW5baSAtIDFdLmVsZW0uaGVpZ2h0ICtcbiAgICAgICAgICAgICAgICAgb2xkQ2hpbGRyZW5baSAtIDFdLmVsZW0uZGVwdGgpO1xuXG4gICAgICAgICAgICBjdXJyUG9zID0gY3VyclBvcyArIGRpZmY7XG5cbiAgICAgICAgICAgIGNoaWxkcmVuLnB1c2goe3R5cGU6IFwia2VyblwiLCBzaXplOiBzaXplfSk7XG4gICAgICAgICAgICBjaGlsZHJlbi5wdXNoKG9sZENoaWxkcmVuW2ldKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAocG9zaXRpb25UeXBlID09PSBcInRvcFwiKSB7XG4gICAgICAgIC8vIFdlIGFsd2F5cyBzdGFydCBhdCB0aGUgYm90dG9tLCBzbyBjYWxjdWxhdGUgdGhlIGJvdHRvbSBieSBhZGRpbmcgdXBcbiAgICAgICAgLy8gYWxsIHRoZSBzaXplc1xuICAgICAgICB2YXIgYm90dG9tID0gcG9zaXRpb25EYXRhO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChjaGlsZHJlbltpXS50eXBlID09PSBcImtlcm5cIikge1xuICAgICAgICAgICAgICAgIGJvdHRvbSAtPSBjaGlsZHJlbltpXS5zaXplO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBib3R0b20gLT0gY2hpbGRyZW5baV0uZWxlbS5oZWlnaHQgKyBjaGlsZHJlbltpXS5lbGVtLmRlcHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGRlcHRoID0gYm90dG9tO1xuICAgIH0gZWxzZSBpZiAocG9zaXRpb25UeXBlID09PSBcImJvdHRvbVwiKSB7XG4gICAgICAgIGRlcHRoID0gLXBvc2l0aW9uRGF0YTtcbiAgICB9IGVsc2UgaWYgKHBvc2l0aW9uVHlwZSA9PT0gXCJzaGlmdFwiKSB7XG4gICAgICAgIGRlcHRoID0gLWNoaWxkcmVuWzBdLmVsZW0uZGVwdGggLSBwb3NpdGlvbkRhdGE7XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvblR5cGUgPT09IFwiZmlyc3RCYXNlbGluZVwiKSB7XG4gICAgICAgIGRlcHRoID0gLWNoaWxkcmVuWzBdLmVsZW0uZGVwdGg7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZGVwdGggPSAwO1xuICAgIH1cblxuICAgIC8vIE1ha2UgdGhlIGZvbnRTaXplclxuICAgIHZhciBtYXhGb250U2l6ZSA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChjaGlsZHJlbltpXS50eXBlID09PSBcImVsZW1cIikge1xuICAgICAgICAgICAgbWF4Rm9udFNpemUgPSBNYXRoLm1heChtYXhGb250U2l6ZSwgY2hpbGRyZW5baV0uZWxlbS5tYXhGb250U2l6ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIGZvbnRTaXplciA9IG1ha2VGb250U2l6ZXIob3B0aW9ucywgbWF4Rm9udFNpemUpO1xuXG4gICAgLy8gQ3JlYXRlIGEgbmV3IGxpc3Qgb2YgYWN0dWFsIGNoaWxkcmVuIGF0IHRoZSBjb3JyZWN0IG9mZnNldHNcbiAgICB2YXIgcmVhbENoaWxkcmVuID0gW107XG4gICAgY3VyclBvcyA9IGRlcHRoO1xuICAgIGZvciAoaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoY2hpbGRyZW5baV0udHlwZSA9PT0gXCJrZXJuXCIpIHtcbiAgICAgICAgICAgIGN1cnJQb3MgKz0gY2hpbGRyZW5baV0uc2l6ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2ldLmVsZW07XG5cbiAgICAgICAgICAgIHZhciBzaGlmdCA9IC1jaGlsZC5kZXB0aCAtIGN1cnJQb3M7XG4gICAgICAgICAgICBjdXJyUG9zICs9IGNoaWxkLmhlaWdodCArIGNoaWxkLmRlcHRoO1xuXG4gICAgICAgICAgICB2YXIgY2hpbGRXcmFwID0gbWFrZVNwYW4oW10sIFtmb250U2l6ZXIsIGNoaWxkXSk7XG4gICAgICAgICAgICBjaGlsZFdyYXAuaGVpZ2h0IC09IHNoaWZ0O1xuICAgICAgICAgICAgY2hpbGRXcmFwLmRlcHRoICs9IHNoaWZ0O1xuICAgICAgICAgICAgY2hpbGRXcmFwLnN0eWxlLnRvcCA9IHNoaWZ0ICsgXCJlbVwiO1xuXG4gICAgICAgICAgICByZWFsQ2hpbGRyZW4ucHVzaChjaGlsZFdyYXApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGluIGFuIGVsZW1lbnQgYXQgdGhlIGVuZCB3aXRoIG5vIG9mZnNldCB0byBmaXggdGhlIGNhbGN1bGF0aW9uIG9mXG4gICAgLy8gYmFzZWxpbmVzIGluIHNvbWUgYnJvd3NlcnMgKG5hbWVseSBJRSwgc29tZXRpbWVzIHNhZmFyaSlcbiAgICB2YXIgYmFzZWxpbmVGaXggPSBtYWtlU3BhbihcbiAgICAgICAgW1wiYmFzZWxpbmUtZml4XCJdLCBbZm9udFNpemVyLCBuZXcgZG9tVHJlZS5zeW1ib2xOb2RlKFwiXFx1MjAwYlwiKV0pO1xuICAgIHJlYWxDaGlsZHJlbi5wdXNoKGJhc2VsaW5lRml4KTtcblxuICAgIHZhciB2bGlzdCA9IG1ha2VTcGFuKFtcInZsaXN0XCJdLCByZWFsQ2hpbGRyZW4pO1xuICAgIC8vIEZpeCB0aGUgZmluYWwgaGVpZ2h0IGFuZCBkZXB0aCwgaW4gY2FzZSB0aGVyZSB3ZXJlIGtlcm5zIGF0IHRoZSBlbmRzXG4gICAgLy8gc2luY2UgdGhlIG1ha2VTcGFuIGNhbGN1bGF0aW9uIHdvbid0IHRha2UgdGhhdCBpbiB0byBhY2NvdW50LlxuICAgIHZsaXN0LmhlaWdodCA9IE1hdGgubWF4KGN1cnJQb3MsIHZsaXN0LmhlaWdodCk7XG4gICAgdmxpc3QuZGVwdGggPSBNYXRoLm1heCgtZGVwdGgsIHZsaXN0LmRlcHRoKTtcbiAgICByZXR1cm4gdmxpc3Q7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBtYWtlU3ltYm9sOiBtYWtlU3ltYm9sLFxuICAgIG1hdGhpdDogbWF0aGl0LFxuICAgIG1hdGhybTogbWF0aHJtLFxuICAgIG1ha2VTcGFuOiBtYWtlU3BhbixcbiAgICBtYWtlRnJhZ21lbnQ6IG1ha2VGcmFnbWVudCxcbiAgICBtYWtlVkxpc3Q6IG1ha2VWTGlzdFxufTtcbiIsIi8qKlxuICogVGhpcyBmaWxlIGRvZXMgdGhlIG1haW4gd29yayBvZiBidWlsZGluZyBhIGRvbVRyZWUgc3RydWN0dXJlIGZyb20gYSBwYXJzZVxuICogdHJlZS4gVGhlIGVudHJ5IHBvaW50IGlzIHRoZSBgYnVpbGRUcmVlYCBmdW5jdGlvbiwgd2hpY2ggdGFrZXMgYSBwYXJzZSB0cmVlLlxuICogVGhlbiwgdGhlIGJ1aWxkRXhwcmVzc2lvbiwgYnVpbGRHcm91cCwgYW5kIHZhcmlvdXMgZ3JvdXBUeXBlcyBmdW5jdGlvbnMgYXJlXG4gKiBjYWxsZWQsIHRvIHByb2R1Y2UgYSBmaW5hbCB0cmVlLlxuICovXG5cbnZhciBPcHRpb25zID0gcmVxdWlyZShcIi4vT3B0aW9uc1wiKTtcbnZhciBQYXJzZUVycm9yID0gcmVxdWlyZShcIi4vUGFyc2VFcnJvclwiKTtcbnZhciBTdHlsZSA9IHJlcXVpcmUoXCIuL1N0eWxlXCIpO1xuXG52YXIgYnVpbGRDb21tb24gPSByZXF1aXJlKFwiLi9idWlsZENvbW1vblwiKTtcbnZhciBkZWxpbWl0ZXIgPSByZXF1aXJlKFwiLi9kZWxpbWl0ZXJcIik7XG52YXIgZG9tVHJlZSA9IHJlcXVpcmUoXCIuL2RvbVRyZWVcIik7XG52YXIgZm9udE1ldHJpY3MgPSByZXF1aXJlKFwiLi9mb250TWV0cmljc1wiKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuXG52YXIgbWFrZVNwYW4gPSBidWlsZENvbW1vbi5tYWtlU3BhbjtcblxuLyoqXG4gKiBUYWtlIGEgbGlzdCBvZiBub2RlcywgYnVpbGQgdGhlbSBpbiBvcmRlciwgYW5kIHJldHVybiBhIGxpc3Qgb2YgdGhlIGJ1aWx0XG4gKiBub2Rlcy4gVGhpcyBmdW5jdGlvbiBoYW5kbGVzIHRoZSBgcHJldmAgbm9kZSBjb3JyZWN0bHksIGFuZCBwYXNzZXMgdGhlXG4gKiBwcmV2aW91cyBlbGVtZW50IGZyb20gdGhlIGxpc3QgYXMgdGhlIHByZXYgb2YgdGhlIG5leHQgZWxlbWVudC5cbiAqL1xudmFyIGJ1aWxkRXhwcmVzc2lvbiA9IGZ1bmN0aW9uKGV4cHJlc3Npb24sIG9wdGlvbnMsIHByZXYpIHtcbiAgICB2YXIgZ3JvdXBzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBleHByZXNzaW9uLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBncm91cCA9IGV4cHJlc3Npb25baV07XG4gICAgICAgIGdyb3Vwcy5wdXNoKGJ1aWxkR3JvdXAoZ3JvdXAsIG9wdGlvbnMsIHByZXYpKTtcbiAgICAgICAgcHJldiA9IGdyb3VwO1xuICAgIH1cbiAgICByZXR1cm4gZ3JvdXBzO1xufTtcblxuLy8gTGlzdCBvZiB0eXBlcyB1c2VkIGJ5IGdldFR5cGVPZkdyb3VwXG52YXIgZ3JvdXBUb1R5cGUgPSB7XG4gICAgbWF0aG9yZDogXCJtb3JkXCIsXG4gICAgdGV4dG9yZDogXCJtb3JkXCIsXG4gICAgYmluOiBcIm1iaW5cIixcbiAgICByZWw6IFwibXJlbFwiLFxuICAgIHRleHQ6IFwibW9yZFwiLFxuICAgIG9wZW46IFwibW9wZW5cIixcbiAgICBjbG9zZTogXCJtY2xvc2VcIixcbiAgICBpbm5lcjogXCJtaW5uZXJcIixcbiAgICBmcmFjOiBcIm1pbm5lclwiLFxuICAgIHNwYWNpbmc6IFwibW9yZFwiLFxuICAgIHB1bmN0OiBcIm1wdW5jdFwiLFxuICAgIG9yZGdyb3VwOiBcIm1vcmRcIixcbiAgICBvcDogXCJtb3BcIixcbiAgICBrYXRleDogXCJtb3JkXCIsXG4gICAgb3ZlcmxpbmU6IFwibW9yZFwiLFxuICAgIHJ1bGU6IFwibW9yZFwiLFxuICAgIGxlZnRyaWdodDogXCJtaW5uZXJcIixcbiAgICBzcXJ0OiBcIm1vcmRcIixcbiAgICBhY2NlbnQ6IFwibW9yZFwiXG59O1xuXG4vKipcbiAqIEdldHMgdGhlIGZpbmFsIG1hdGggdHlwZSBvZiBhbiBleHByZXNzaW9uLCBnaXZlbiBpdHMgZ3JvdXAgdHlwZS4gVGhpcyB0eXBlIGlzXG4gKiB1c2VkIHRvIGRldGVybWluZSBzcGFjaW5nIGJldHdlZW4gZWxlbWVudHMsIGFuZCBhZmZlY3RzIGJpbiBlbGVtZW50cyBieVxuICogY2F1c2luZyB0aGVtIHRvIGNoYW5nZSBkZXBlbmRpbmcgb24gd2hhdCB0eXBlcyBhcmUgYXJvdW5kIHRoZW0uIFRoaXMgdHlwZVxuICogbXVzdCBiZSBhdHRhY2hlZCB0byB0aGUgb3V0ZXJtb3N0IG5vZGUgb2YgYW4gZWxlbWVudCBhcyBhIENTUyBjbGFzcyBzbyB0aGF0XG4gKiBzcGFjaW5nIHdpdGggaXRzIHN1cnJvdW5kaW5nIGVsZW1lbnRzIHdvcmtzIGNvcnJlY3RseS5cbiAqXG4gKiBTb21lIGVsZW1lbnRzIGNhbiBiZSBtYXBwZWQgb25lLXRvLW9uZSBmcm9tIGdyb3VwIHR5cGUgdG8gbWF0aCB0eXBlLCBhbmRcbiAqIHRob3NlIGFyZSBsaXN0ZWQgaW4gdGhlIGBncm91cFRvVHlwZWAgdGFibGUuXG4gKlxuICogT3RoZXJzICh1c3VhbGx5IGVsZW1lbnRzIHRoYXQgd3JhcCBhcm91bmQgb3RoZXIgZWxlbWVudHMpIG9mdGVuIGhhdmVcbiAqIHJlY3Vyc2l2ZSBkZWZpbml0aW9ucywgYW5kIHRodXMgY2FsbCBgZ2V0VHlwZU9mR3JvdXBgIG9uIHRoZWlyIGlubmVyXG4gKiBlbGVtZW50cy5cbiAqL1xudmFyIGdldFR5cGVPZkdyb3VwID0gZnVuY3Rpb24oZ3JvdXApIHtcbiAgICBpZiAoZ3JvdXAgPT0gbnVsbCkge1xuICAgICAgICAvLyBMaWtlIHdoZW4gdHlwZXNldHRpbmcgJF4zJFxuICAgICAgICByZXR1cm4gZ3JvdXBUb1R5cGUubWF0aG9yZDtcbiAgICB9IGVsc2UgaWYgKGdyb3VwLnR5cGUgPT09IFwic3Vwc3ViXCIpIHtcbiAgICAgICAgcmV0dXJuIGdldFR5cGVPZkdyb3VwKGdyb3VwLnZhbHVlLmJhc2UpO1xuICAgIH0gZWxzZSBpZiAoZ3JvdXAudHlwZSA9PT0gXCJsbGFwXCIgfHwgZ3JvdXAudHlwZSA9PT0gXCJybGFwXCIpIHtcbiAgICAgICAgcmV0dXJuIGdldFR5cGVPZkdyb3VwKGdyb3VwLnZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKGdyb3VwLnR5cGUgPT09IFwiY29sb3JcIikge1xuICAgICAgICByZXR1cm4gZ2V0VHlwZU9mR3JvdXAoZ3JvdXAudmFsdWUudmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoZ3JvdXAudHlwZSA9PT0gXCJzaXppbmdcIikge1xuICAgICAgICByZXR1cm4gZ2V0VHlwZU9mR3JvdXAoZ3JvdXAudmFsdWUudmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoZ3JvdXAudHlwZSA9PT0gXCJzdHlsaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIGdldFR5cGVPZkdyb3VwKGdyb3VwLnZhbHVlLnZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKGdyb3VwLnR5cGUgPT09IFwiZGVsaW1zaXppbmdcIikge1xuICAgICAgICByZXR1cm4gZ3JvdXBUb1R5cGVbZ3JvdXAudmFsdWUuZGVsaW1UeXBlXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZ3JvdXBUb1R5cGVbZ3JvdXAudHlwZV07XG4gICAgfVxufTtcblxuLyoqXG4gKiBTb21ldGltZXMsIGdyb3VwcyBwZXJmb3JtIHNwZWNpYWwgcnVsZXMgd2hlbiB0aGV5IGhhdmUgc3VwZXJzY3JpcHRzIG9yXG4gKiBzdWJzY3JpcHRzIGF0dGFjaGVkIHRvIHRoZW0uIFRoaXMgZnVuY3Rpb24gbGV0cyB0aGUgYHN1cHN1YmAgZ3JvdXAga25vdyB0aGF0XG4gKiBpdHMgaW5uZXIgZWxlbWVudCBzaG91bGQgaGFuZGxlIHRoZSBzdXBlcnNjcmlwdHMgYW5kIHN1YnNjcmlwdHMgaW5zdGVhZCBvZlxuICogaGFuZGxpbmcgdGhlbSBpdHNlbGYuXG4gKi9cbnZhciBzaG91bGRIYW5kbGVTdXBTdWIgPSBmdW5jdGlvbihncm91cCwgb3B0aW9ucykge1xuICAgIGlmICghZ3JvdXApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoZ3JvdXAudHlwZSA9PT0gXCJvcFwiKSB7XG4gICAgICAgIC8vIE9wZXJhdG9ycyBoYW5kbGUgc3Vwc3VicyBkaWZmZXJlbnRseSB3aGVuIHRoZXkgaGF2ZSBsaW1pdHNcbiAgICAgICAgLy8gKGUuZy4gYFxcZGlzcGxheXN0eWxlXFxzdW1fMl4zYClcbiAgICAgICAgcmV0dXJuIGdyb3VwLnZhbHVlLmxpbWl0cyAmJiBvcHRpb25zLnN0eWxlLnNpemUgPT09IFN0eWxlLkRJU1BMQVkuc2l6ZTtcbiAgICB9IGVsc2UgaWYgKGdyb3VwLnR5cGUgPT09IFwiYWNjZW50XCIpIHtcbiAgICAgICAgcmV0dXJuIGlzQ2hhcmFjdGVyQm94KGdyb3VwLnZhbHVlLmJhc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn07XG5cbi8qKlxuICogU29tZXRpbWVzIHdlIHdhbnQgdG8gcHVsbCBvdXQgdGhlIGlubmVybW9zdCBlbGVtZW50IG9mIGEgZ3JvdXAuIEluIG1vc3RcbiAqIGNhc2VzLCB0aGlzIHdpbGwganVzdCBiZSB0aGUgZ3JvdXAgaXRzZWxmLCBidXQgd2hlbiBvcmRncm91cHMgYW5kIGNvbG9ycyBoYXZlXG4gKiBhIHNpbmdsZSBlbGVtZW50LCB3ZSB3YW50IHRvIHB1bGwgdGhhdCBvdXQuXG4gKi9cbnZhciBnZXRCYXNlRWxlbSA9IGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgaWYgKCFncm91cCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIGlmIChncm91cC50eXBlID09PSBcIm9yZGdyb3VwXCIpIHtcbiAgICAgICAgaWYgKGdyb3VwLnZhbHVlLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIGdldEJhc2VFbGVtKGdyb3VwLnZhbHVlWzBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBncm91cDtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZ3JvdXAudHlwZSA9PT0gXCJjb2xvclwiKSB7XG4gICAgICAgIGlmIChncm91cC52YWx1ZS52YWx1ZS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRCYXNlRWxlbShncm91cC52YWx1ZS52YWx1ZVswXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZ3JvdXA7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZ3JvdXA7XG4gICAgfVxufTtcblxuLyoqXG4gKiBUZVhib29rIGFsZ29yaXRobXMgb2Z0ZW4gcmVmZXJlbmNlIFwiY2hhcmFjdGVyIGJveGVzXCIsIHdoaWNoIGFyZSBzaW1wbHkgZ3JvdXBzXG4gKiB3aXRoIGEgc2luZ2xlIGNoYXJhY3RlciBpbiB0aGVtLiBUbyBkZWNpZGUgaWYgc29tZXRoaW5nIGlzIGEgY2hhcmFjdGVyIGJveCxcbiAqIHdlIGZpbmQgaXRzIGlubmVybW9zdCBncm91cCwgYW5kIHNlZSBpZiBpdCBpcyBhIHNpbmdsZSBjaGFyYWN0ZXIuXG4gKi9cbnZhciBpc0NoYXJhY3RlckJveCA9IGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgdmFyIGJhc2VFbGVtID0gZ2V0QmFzZUVsZW0oZ3JvdXApO1xuXG4gICAgLy8gVGhlc2UgYXJlIGFsbCB0aGV5IHR5cGVzIG9mIGdyb3VwcyB3aGljaCBob2xkIHNpbmdsZSBjaGFyYWN0ZXJzXG4gICAgcmV0dXJuIGJhc2VFbGVtLnR5cGUgPT09IFwibWF0aG9yZFwiIHx8XG4gICAgICAgIGJhc2VFbGVtLnR5cGUgPT09IFwidGV4dG9yZFwiIHx8XG4gICAgICAgIGJhc2VFbGVtLnR5cGUgPT09IFwiYmluXCIgfHxcbiAgICAgICAgYmFzZUVsZW0udHlwZSA9PT0gXCJyZWxcIiB8fFxuICAgICAgICBiYXNlRWxlbS50eXBlID09PSBcImlubmVyXCIgfHxcbiAgICAgICAgYmFzZUVsZW0udHlwZSA9PT0gXCJvcGVuXCIgfHxcbiAgICAgICAgYmFzZUVsZW0udHlwZSA9PT0gXCJjbG9zZVwiIHx8XG4gICAgICAgIGJhc2VFbGVtLnR5cGUgPT09IFwicHVuY3RcIjtcbn07XG5cbi8qKlxuICogVGhpcyBpcyBhIG1hcCBvZiBncm91cCB0eXBlcyB0byB0aGUgZnVuY3Rpb24gdXNlZCB0byBoYW5kbGUgdGhhdCB0eXBlLlxuICogU2ltcGxlciB0eXBlcyBjb21lIGF0IHRoZSBiZWdpbm5pbmcsIHdoaWxlIGNvbXBsaWNhdGVkIHR5cGVzIGNvbWUgYWZ0ZXJ3YXJkcy5cbiAqL1xudmFyIGdyb3VwVHlwZXMgPSB7XG4gICAgbWF0aG9yZDogZnVuY3Rpb24oZ3JvdXAsIG9wdGlvbnMsIHByZXYpIHtcbiAgICAgICAgcmV0dXJuIGJ1aWxkQ29tbW9uLm1hdGhpdChcbiAgICAgICAgICAgIGdyb3VwLnZhbHVlLCBncm91cC5tb2RlLCBvcHRpb25zLmdldENvbG9yKCksIFtcIm1vcmRcIl0pO1xuICAgIH0sXG5cbiAgICB0ZXh0b3JkOiBmdW5jdGlvbihncm91cCwgb3B0aW9ucywgcHJldikge1xuICAgICAgICByZXR1cm4gYnVpbGRDb21tb24ubWF0aHJtKFxuICAgICAgICAgICAgZ3JvdXAudmFsdWUsIGdyb3VwLm1vZGUsIG9wdGlvbnMuZ2V0Q29sb3IoKSwgW1wibW9yZFwiXSk7XG4gICAgfSxcblxuICAgIGJpbjogZnVuY3Rpb24oZ3JvdXAsIG9wdGlvbnMsIHByZXYpIHtcbiAgICAgICAgdmFyIGNsYXNzTmFtZSA9IFwibWJpblwiO1xuICAgICAgICAvLyBQdWxsIG91dCB0aGUgbW9zdCByZWNlbnQgZWxlbWVudC4gRG8gc29tZSBzcGVjaWFsIGhhbmRsaW5nIHRvIGZpbmRcbiAgICAgICAgLy8gdGhpbmdzIGF0IHRoZSBlbmQgb2YgYSBcXGNvbG9yIGdyb3VwLiBOb3RlIHRoYXQgd2UgZG9uJ3QgdXNlIHRoZSBzYW1lXG4gICAgICAgIC8vIGxvZ2ljIGZvciBvcmRncm91cHMgKHdoaWNoIGNvdW50IGFzIG9yZHMpLlxuICAgICAgICB2YXIgcHJldkF0b20gPSBwcmV2O1xuICAgICAgICB3aGlsZSAocHJldkF0b20gJiYgcHJldkF0b20udHlwZSA9PSBcImNvbG9yXCIpIHtcbiAgICAgICAgICAgIHZhciBhdG9tcyA9IHByZXZBdG9tLnZhbHVlLnZhbHVlO1xuICAgICAgICAgICAgcHJldkF0b20gPSBhdG9tc1thdG9tcy5sZW5ndGggLSAxXTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTZWUgVGVYYm9vayBwZy4gNDQyLTQ0NiwgUnVsZXMgNSBhbmQgNiwgYW5kIHRoZSB0ZXh0IGJlZm9yZSBSdWxlIDE5LlxuICAgICAgICAvLyBIZXJlLCB3ZSBkZXRlcm1pbmUgd2hldGhlciB0aGUgYmluIHNob3VsZCB0dXJuIGludG8gYW4gb3JkLiBXZVxuICAgICAgICAvLyBjdXJyZW50bHkgb25seSBhcHBseSBSdWxlIDUuXG4gICAgICAgIGlmICghcHJldiB8fCB1dGlscy5jb250YWlucyhbXCJtYmluXCIsIFwibW9wZW5cIiwgXCJtcmVsXCIsIFwibW9wXCIsIFwibXB1bmN0XCJdLFxuICAgICAgICAgICAgICAgIGdldFR5cGVPZkdyb3VwKHByZXZBdG9tKSkpIHtcbiAgICAgICAgICAgIGdyb3VwLnR5cGUgPSBcInRleHRvcmRcIjtcbiAgICAgICAgICAgIGNsYXNzTmFtZSA9IFwibW9yZFwiO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGJ1aWxkQ29tbW9uLm1hdGhybShcbiAgICAgICAgICAgIGdyb3VwLnZhbHVlLCBncm91cC5tb2RlLCBvcHRpb25zLmdldENvbG9yKCksIFtjbGFzc05hbWVdKTtcbiAgICB9LFxuXG4gICAgcmVsOiBmdW5jdGlvbihncm91cCwgb3B0aW9ucywgcHJldikge1xuICAgICAgICByZXR1cm4gYnVpbGRDb21tb24ubWF0aHJtKFxuICAgICAgICAgICAgZ3JvdXAudmFsdWUsIGdyb3VwLm1vZGUsIG9wdGlvbnMuZ2V0Q29sb3IoKSwgW1wibXJlbFwiXSk7XG4gICAgfSxcblxuICAgIG9wZW46IGZ1bmN0aW9uKGdyb3VwLCBvcHRpb25zLCBwcmV2KSB7XG4gICAgICAgIHJldHVybiBidWlsZENvbW1vbi5tYXRocm0oXG4gICAgICAgICAgICBncm91cC52YWx1ZSwgZ3JvdXAubW9kZSwgb3B0aW9ucy5nZXRDb2xvcigpLCBbXCJtb3BlblwiXSk7XG4gICAgfSxcblxuICAgIGNsb3NlOiBmdW5jdGlvbihncm91cCwgb3B0aW9ucywgcHJldikge1xuICAgICAgICByZXR1cm4gYnVpbGRDb21tb24ubWF0aHJtKFxuICAgICAgICAgICAgZ3JvdXAudmFsdWUsIGdyb3VwLm1vZGUsIG9wdGlvbnMuZ2V0Q29sb3IoKSwgW1wibWNsb3NlXCJdKTtcbiAgICB9LFxuXG4gICAgaW5uZXI6IGZ1bmN0aW9uKGdyb3VwLCBvcHRpb25zLCBwcmV2KSB7XG4gICAgICAgIHJldHVybiBidWlsZENvbW1vbi5tYXRocm0oXG4gICAgICAgICAgICBncm91cC52YWx1ZSwgZ3JvdXAubW9kZSwgb3B0aW9ucy5nZXRDb2xvcigpLCBbXCJtaW5uZXJcIl0pO1xuICAgIH0sXG5cbiAgICBwdW5jdDogZnVuY3Rpb24oZ3JvdXAsIG9wdGlvbnMsIHByZXYpIHtcbiAgICAgICAgcmV0dXJuIGJ1aWxkQ29tbW9uLm1hdGhybShcbiAgICAgICAgICAgIGdyb3VwLnZhbHVlLCBncm91cC5tb2RlLCBvcHRpb25zLmdldENvbG9yKCksIFtcIm1wdW5jdFwiXSk7XG4gICAgfSxcblxuICAgIG9yZGdyb3VwOiBmdW5jdGlvbihncm91cCwgb3B0aW9ucywgcHJldikge1xuICAgICAgICByZXR1cm4gbWFrZVNwYW4oXG4gICAgICAgICAgICBbXCJtb3JkXCIsIG9wdGlvbnMuc3R5bGUuY2xzKCldLFxuICAgICAgICAgICAgYnVpbGRFeHByZXNzaW9uKGdyb3VwLnZhbHVlLCBvcHRpb25zLnJlc2V0KCkpXG4gICAgICAgICk7XG4gICAgfSxcblxuICAgIHRleHQ6IGZ1bmN0aW9uKGdyb3VwLCBvcHRpb25zLCBwcmV2KSB7XG4gICAgICAgIHJldHVybiBtYWtlU3BhbihbXCJ0ZXh0XCIsIFwibW9yZFwiLCBvcHRpb25zLnN0eWxlLmNscygpXSxcbiAgICAgICAgICAgIGJ1aWxkRXhwcmVzc2lvbihncm91cC52YWx1ZS5ib2R5LCBvcHRpb25zLnJlc2V0KCkpKTtcbiAgICB9LFxuXG4gICAgY29sb3I6IGZ1bmN0aW9uKGdyb3VwLCBvcHRpb25zLCBwcmV2KSB7XG4gICAgICAgIHZhciBlbGVtZW50cyA9IGJ1aWxkRXhwcmVzc2lvbihcbiAgICAgICAgICAgIGdyb3VwLnZhbHVlLnZhbHVlLFxuICAgICAgICAgICAgb3B0aW9ucy53aXRoQ29sb3IoZ3JvdXAudmFsdWUuY29sb3IpLFxuICAgICAgICAgICAgcHJldlxuICAgICAgICApO1xuXG4gICAgICAgIC8vIFxcY29sb3IgaXNuJ3Qgc3VwcG9zZWQgdG8gYWZmZWN0IHRoZSB0eXBlIG9mIHRoZSBlbGVtZW50cyBpdCBjb250YWlucy5cbiAgICAgICAgLy8gVG8gYWNjb21wbGlzaCB0aGlzLCB3ZSB3cmFwIHRoZSByZXN1bHRzIGluIGEgZnJhZ21lbnQsIHNvIHRoZSBpbm5lclxuICAgICAgICAvLyBlbGVtZW50cyB3aWxsIGJlIGFibGUgdG8gZGlyZWN0bHkgaW50ZXJhY3Qgd2l0aCB0aGVpciBuZWlnaGJvcnMuIEZvclxuICAgICAgICAvLyBleGFtcGxlLCBgXFxjb2xvcntyZWR9ezIgK30gM2AgaGFzIHRoZSBzYW1lIHNwYWNpbmcgYXMgYDIgKyAzYFxuICAgICAgICByZXR1cm4gbmV3IGJ1aWxkQ29tbW9uLm1ha2VGcmFnbWVudChlbGVtZW50cyk7XG4gICAgfSxcblxuICAgIHN1cHN1YjogZnVuY3Rpb24oZ3JvdXAsIG9wdGlvbnMsIHByZXYpIHtcbiAgICAgICAgLy8gU3VwZXJzY3JpcHQgYW5kIHN1YnNjcmlwdHMgYXJlIGhhbmRsZWQgaW4gdGhlIFRlWGJvb2sgb24gcGFnZVxuICAgICAgICAvLyA0NDUtNDQ2LCBydWxlcyAxOChhLWYpLlxuXG4gICAgICAgIC8vIEhlcmUgaXMgd2hlcmUgd2UgZGVmZXIgdG8gdGhlIGlubmVyIGdyb3VwIGlmIGl0IHNob3VsZCBoYW5kbGVcbiAgICAgICAgLy8gc3VwZXJzY3JpcHRzIGFuZCBzdWJzY3JpcHRzIGl0c2VsZi5cbiAgICAgICAgaWYgKHNob3VsZEhhbmRsZVN1cFN1Yihncm91cC52YWx1ZS5iYXNlLCBvcHRpb25zKSkge1xuICAgICAgICAgICAgcmV0dXJuIGdyb3VwVHlwZXNbZ3JvdXAudmFsdWUuYmFzZS50eXBlXShncm91cCwgb3B0aW9ucywgcHJldik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYmFzZSA9IGJ1aWxkR3JvdXAoZ3JvdXAudmFsdWUuYmFzZSwgb3B0aW9ucy5yZXNldCgpKTtcbiAgICAgICAgdmFyIHN1cG1pZCwgc3VibWlkLCBzdXAsIHN1YjtcblxuICAgICAgICBpZiAoZ3JvdXAudmFsdWUuc3VwKSB7XG4gICAgICAgICAgICBzdXAgPSBidWlsZEdyb3VwKGdyb3VwLnZhbHVlLnN1cCxcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy53aXRoU3R5bGUob3B0aW9ucy5zdHlsZS5zdXAoKSkpO1xuICAgICAgICAgICAgc3VwbWlkID0gbWFrZVNwYW4oXG4gICAgICAgICAgICAgICAgICAgIFtvcHRpb25zLnN0eWxlLnJlc2V0KCksIG9wdGlvbnMuc3R5bGUuc3VwKCkuY2xzKCldLCBbc3VwXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZ3JvdXAudmFsdWUuc3ViKSB7XG4gICAgICAgICAgICBzdWIgPSBidWlsZEdyb3VwKGdyb3VwLnZhbHVlLnN1YixcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy53aXRoU3R5bGUob3B0aW9ucy5zdHlsZS5zdWIoKSkpO1xuICAgICAgICAgICAgc3VibWlkID0gbWFrZVNwYW4oXG4gICAgICAgICAgICAgICAgICAgIFtvcHRpb25zLnN0eWxlLnJlc2V0KCksIG9wdGlvbnMuc3R5bGUuc3ViKCkuY2xzKCldLCBbc3ViXSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSdWxlIDE4YVxuICAgICAgICB2YXIgc3VwU2hpZnQsIHN1YlNoaWZ0O1xuICAgICAgICBpZiAoaXNDaGFyYWN0ZXJCb3goZ3JvdXAudmFsdWUuYmFzZSkpIHtcbiAgICAgICAgICAgIHN1cFNoaWZ0ID0gMDtcbiAgICAgICAgICAgIHN1YlNoaWZ0ID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN1cFNoaWZ0ID0gYmFzZS5oZWlnaHQgLSBmb250TWV0cmljcy5tZXRyaWNzLnN1cERyb3A7XG4gICAgICAgICAgICBzdWJTaGlmdCA9IGJhc2UuZGVwdGggKyBmb250TWV0cmljcy5tZXRyaWNzLnN1YkRyb3A7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSdWxlIDE4Y1xuICAgICAgICB2YXIgbWluU3VwU2hpZnQ7XG4gICAgICAgIGlmIChvcHRpb25zLnN0eWxlID09PSBTdHlsZS5ESVNQTEFZKSB7XG4gICAgICAgICAgICBtaW5TdXBTaGlmdCA9IGZvbnRNZXRyaWNzLm1ldHJpY3Muc3VwMTtcbiAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLnN0eWxlLmNyYW1wZWQpIHtcbiAgICAgICAgICAgIG1pblN1cFNoaWZ0ID0gZm9udE1ldHJpY3MubWV0cmljcy5zdXAzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWluU3VwU2hpZnQgPSBmb250TWV0cmljcy5tZXRyaWNzLnN1cDI7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzY3JpcHRzcGFjZSBpcyBhIGZvbnQtc2l6ZS1pbmRlcGVuZGVudCBzaXplLCBzbyBzY2FsZSBpdFxuICAgICAgICAvLyBhcHByb3ByaWF0ZWx5XG4gICAgICAgIHZhciBtdWx0aXBsaWVyID0gU3R5bGUuVEVYVC5zaXplTXVsdGlwbGllciAqXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5zdHlsZS5zaXplTXVsdGlwbGllcjtcbiAgICAgICAgdmFyIHNjcmlwdHNwYWNlID1cbiAgICAgICAgICAgICgwLjUgLyBmb250TWV0cmljcy5tZXRyaWNzLnB0UGVyRW0pIC8gbXVsdGlwbGllciArIFwiZW1cIjtcblxuICAgICAgICB2YXIgc3Vwc3ViO1xuICAgICAgICBpZiAoIWdyb3VwLnZhbHVlLnN1cCkge1xuICAgICAgICAgICAgLy8gUnVsZSAxOGJcbiAgICAgICAgICAgIHN1YlNoaWZ0ID0gTWF0aC5tYXgoXG4gICAgICAgICAgICAgICAgc3ViU2hpZnQsIGZvbnRNZXRyaWNzLm1ldHJpY3Muc3ViMSxcbiAgICAgICAgICAgICAgICBzdWIuaGVpZ2h0IC0gMC44ICogZm9udE1ldHJpY3MubWV0cmljcy54SGVpZ2h0KTtcblxuICAgICAgICAgICAgc3Vwc3ViID0gYnVpbGRDb21tb24ubWFrZVZMaXN0KFtcbiAgICAgICAgICAgICAgICB7dHlwZTogXCJlbGVtXCIsIGVsZW06IHN1Ym1pZH1cbiAgICAgICAgICAgIF0sIFwic2hpZnRcIiwgc3ViU2hpZnQsIG9wdGlvbnMpO1xuXG4gICAgICAgICAgICBzdXBzdWIuY2hpbGRyZW5bMF0uc3R5bGUubWFyZ2luUmlnaHQgPSBzY3JpcHRzcGFjZTtcblxuICAgICAgICAgICAgLy8gU3Vic2NyaXB0cyBzaG91bGRuJ3QgYmUgc2hpZnRlZCBieSB0aGUgYmFzZSdzIGl0YWxpYyBjb3JyZWN0aW9uLlxuICAgICAgICAgICAgLy8gQWNjb3VudCBmb3IgdGhhdCBieSBzaGlmdGluZyB0aGUgc3Vic2NyaXB0IGJhY2sgdGhlIGFwcHJvcHJpYXRlXG4gICAgICAgICAgICAvLyBhbW91bnQuIE5vdGUgd2Ugb25seSBkbyB0aGlzIHdoZW4gdGhlIGJhc2UgaXMgYSBzaW5nbGUgc3ltYm9sLlxuICAgICAgICAgICAgaWYgKGJhc2UgaW5zdGFuY2VvZiBkb21UcmVlLnN5bWJvbE5vZGUpIHtcbiAgICAgICAgICAgICAgICBzdXBzdWIuY2hpbGRyZW5bMF0uc3R5bGUubWFyZ2luTGVmdCA9IC1iYXNlLml0YWxpYyArIFwiZW1cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghZ3JvdXAudmFsdWUuc3ViKSB7XG4gICAgICAgICAgICAvLyBSdWxlIDE4YywgZFxuICAgICAgICAgICAgc3VwU2hpZnQgPSBNYXRoLm1heChzdXBTaGlmdCwgbWluU3VwU2hpZnQsXG4gICAgICAgICAgICAgICAgc3VwLmRlcHRoICsgMC4yNSAqIGZvbnRNZXRyaWNzLm1ldHJpY3MueEhlaWdodCk7XG5cbiAgICAgICAgICAgIHN1cHN1YiA9IGJ1aWxkQ29tbW9uLm1ha2VWTGlzdChbXG4gICAgICAgICAgICAgICAge3R5cGU6IFwiZWxlbVwiLCBlbGVtOiBzdXBtaWR9XG4gICAgICAgICAgICBdLCBcInNoaWZ0XCIsIC1zdXBTaGlmdCwgb3B0aW9ucyk7XG5cbiAgICAgICAgICAgIHN1cHN1Yi5jaGlsZHJlblswXS5zdHlsZS5tYXJnaW5SaWdodCA9IHNjcmlwdHNwYWNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3VwU2hpZnQgPSBNYXRoLm1heChcbiAgICAgICAgICAgICAgICBzdXBTaGlmdCwgbWluU3VwU2hpZnQsXG4gICAgICAgICAgICAgICAgc3VwLmRlcHRoICsgMC4yNSAqIGZvbnRNZXRyaWNzLm1ldHJpY3MueEhlaWdodCk7XG4gICAgICAgICAgICBzdWJTaGlmdCA9IE1hdGgubWF4KHN1YlNoaWZ0LCBmb250TWV0cmljcy5tZXRyaWNzLnN1YjIpO1xuXG4gICAgICAgICAgICB2YXIgcnVsZVdpZHRoID0gZm9udE1ldHJpY3MubWV0cmljcy5kZWZhdWx0UnVsZVRoaWNrbmVzcztcblxuICAgICAgICAgICAgLy8gUnVsZSAxOGVcbiAgICAgICAgICAgIGlmICgoc3VwU2hpZnQgLSBzdXAuZGVwdGgpIC0gKHN1Yi5oZWlnaHQgLSBzdWJTaGlmdCkgPFxuICAgICAgICAgICAgICAgICAgICA0ICogcnVsZVdpZHRoKSB7XG4gICAgICAgICAgICAgICAgc3ViU2hpZnQgPSA0ICogcnVsZVdpZHRoIC0gKHN1cFNoaWZ0IC0gc3VwLmRlcHRoKSArIHN1Yi5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgdmFyIHBzaSA9IDAuOCAqIGZvbnRNZXRyaWNzLm1ldHJpY3MueEhlaWdodCAtXG4gICAgICAgICAgICAgICAgICAgIChzdXBTaGlmdCAtIHN1cC5kZXB0aCk7XG4gICAgICAgICAgICAgICAgaWYgKHBzaSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc3VwU2hpZnQgKz0gcHNpO1xuICAgICAgICAgICAgICAgICAgICBzdWJTaGlmdCAtPSBwc2k7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzdXBzdWIgPSBidWlsZENvbW1vbi5tYWtlVkxpc3QoW1xuICAgICAgICAgICAgICAgIHt0eXBlOiBcImVsZW1cIiwgZWxlbTogc3VibWlkLCBzaGlmdDogc3ViU2hpZnR9LFxuICAgICAgICAgICAgICAgIHt0eXBlOiBcImVsZW1cIiwgZWxlbTogc3VwbWlkLCBzaGlmdDogLXN1cFNoaWZ0fVxuICAgICAgICAgICAgXSwgXCJpbmRpdmlkdWFsU2hpZnRcIiwgbnVsbCwgb3B0aW9ucyk7XG5cbiAgICAgICAgICAgIC8vIFNlZSBjb21tZW50IGFib3ZlIGFib3V0IHN1YnNjcmlwdHMgbm90IGJlaW5nIHNoaWZ0ZWRcbiAgICAgICAgICAgIGlmIChiYXNlIGluc3RhbmNlb2YgZG9tVHJlZS5zeW1ib2xOb2RlKSB7XG4gICAgICAgICAgICAgICAgc3Vwc3ViLmNoaWxkcmVuWzBdLnN0eWxlLm1hcmdpbkxlZnQgPSAtYmFzZS5pdGFsaWMgKyBcImVtXCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN1cHN1Yi5jaGlsZHJlblswXS5zdHlsZS5tYXJnaW5SaWdodCA9IHNjcmlwdHNwYWNlO1xuICAgICAgICAgICAgc3Vwc3ViLmNoaWxkcmVuWzFdLnN0eWxlLm1hcmdpblJpZ2h0ID0gc2NyaXB0c3BhY2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWFrZVNwYW4oW2dldFR5cGVPZkdyb3VwKGdyb3VwLnZhbHVlLmJhc2UpXSxcbiAgICAgICAgICAgIFtiYXNlLCBzdXBzdWJdKTtcbiAgICB9LFxuXG4gICAgZ2VuZnJhYzogZnVuY3Rpb24oZ3JvdXAsIG9wdGlvbnMsIHByZXYpIHtcbiAgICAgICAgLy8gRnJhY3Rpb25zIGFyZSBoYW5kbGVkIGluIHRoZSBUZVhib29rIG9uIHBhZ2VzIDQ0NC00NDUsIHJ1bGVzIDE1KGEtZSkuXG4gICAgICAgIC8vIEZpZ3VyZSBvdXQgd2hhdCBzdHlsZSB0aGlzIGZyYWN0aW9uIHNob3VsZCBiZSBpbiBiYXNlZCBvbiB0aGVcbiAgICAgICAgLy8gZnVuY3Rpb24gdXNlZFxuICAgICAgICB2YXIgZnN0eWxlID0gb3B0aW9ucy5zdHlsZTtcbiAgICAgICAgaWYgKGdyb3VwLnZhbHVlLnNpemUgPT09IFwiZGlzcGxheVwiKSB7XG4gICAgICAgICAgICBmc3R5bGUgPSBTdHlsZS5ESVNQTEFZO1xuICAgICAgICB9IGVsc2UgaWYgKGdyb3VwLnZhbHVlLnNpemUgPT09IFwidGV4dFwiKSB7XG4gICAgICAgICAgICBmc3R5bGUgPSBTdHlsZS5URVhUO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG5zdHlsZSA9IGZzdHlsZS5mcmFjTnVtKCk7XG4gICAgICAgIHZhciBkc3R5bGUgPSBmc3R5bGUuZnJhY0RlbigpO1xuXG4gICAgICAgIHZhciBudW1lciA9IGJ1aWxkR3JvdXAoZ3JvdXAudmFsdWUubnVtZXIsIG9wdGlvbnMud2l0aFN0eWxlKG5zdHlsZSkpO1xuICAgICAgICB2YXIgbnVtZXJyZXNldCA9IG1ha2VTcGFuKFtmc3R5bGUucmVzZXQoKSwgbnN0eWxlLmNscygpXSwgW251bWVyXSk7XG5cbiAgICAgICAgdmFyIGRlbm9tID0gYnVpbGRHcm91cChncm91cC52YWx1ZS5kZW5vbSwgb3B0aW9ucy53aXRoU3R5bGUoZHN0eWxlKSk7XG4gICAgICAgIHZhciBkZW5vbXJlc2V0ID0gbWFrZVNwYW4oW2ZzdHlsZS5yZXNldCgpLCBkc3R5bGUuY2xzKCldLCBbZGVub21dKTtcblxuICAgICAgICB2YXIgcnVsZVdpZHRoO1xuICAgICAgICBpZiAoZ3JvdXAudmFsdWUuaGFzQmFyTGluZSkge1xuICAgICAgICAgICAgcnVsZVdpZHRoID0gZm9udE1ldHJpY3MubWV0cmljcy5kZWZhdWx0UnVsZVRoaWNrbmVzcyAvXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5zdHlsZS5zaXplTXVsdGlwbGllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJ1bGVXaWR0aCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSdWxlIDE1YlxuICAgICAgICB2YXIgbnVtU2hpZnQ7XG4gICAgICAgIHZhciBjbGVhcmFuY2U7XG4gICAgICAgIHZhciBkZW5vbVNoaWZ0O1xuICAgICAgICBpZiAoZnN0eWxlLnNpemUgPT09IFN0eWxlLkRJU1BMQVkuc2l6ZSkge1xuICAgICAgICAgICAgbnVtU2hpZnQgPSBmb250TWV0cmljcy5tZXRyaWNzLm51bTE7XG4gICAgICAgICAgICBpZiAocnVsZVdpZHRoID4gMCkge1xuICAgICAgICAgICAgICAgIGNsZWFyYW5jZSA9IDMgKiBydWxlV2lkdGg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNsZWFyYW5jZSA9IDcgKiBmb250TWV0cmljcy5tZXRyaWNzLmRlZmF1bHRSdWxlVGhpY2tuZXNzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVub21TaGlmdCA9IGZvbnRNZXRyaWNzLm1ldHJpY3MuZGVub20xO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHJ1bGVXaWR0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBudW1TaGlmdCA9IGZvbnRNZXRyaWNzLm1ldHJpY3MubnVtMjtcbiAgICAgICAgICAgICAgICBjbGVhcmFuY2UgPSBydWxlV2lkdGg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG51bVNoaWZ0ID0gZm9udE1ldHJpY3MubWV0cmljcy5udW0zO1xuICAgICAgICAgICAgICAgIGNsZWFyYW5jZSA9IDMgKiBmb250TWV0cmljcy5tZXRyaWNzLmRlZmF1bHRSdWxlVGhpY2tuZXNzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVub21TaGlmdCA9IGZvbnRNZXRyaWNzLm1ldHJpY3MuZGVub20yO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGZyYWM7XG4gICAgICAgIGlmIChydWxlV2lkdGggPT09IDApIHtcbiAgICAgICAgICAgIC8vIFJ1bGUgMTVjXG4gICAgICAgICAgICB2YXIgY2FuZGlhdGVDbGVhcmFuY2UgPVxuICAgICAgICAgICAgICAgIChudW1TaGlmdCAtIG51bWVyLmRlcHRoKSAtIChkZW5vbS5oZWlnaHQgLSBkZW5vbVNoaWZ0KTtcbiAgICAgICAgICAgIGlmIChjYW5kaWF0ZUNsZWFyYW5jZSA8IGNsZWFyYW5jZSkge1xuICAgICAgICAgICAgICAgIG51bVNoaWZ0ICs9IDAuNSAqIChjbGVhcmFuY2UgLSBjYW5kaWF0ZUNsZWFyYW5jZSk7XG4gICAgICAgICAgICAgICAgZGVub21TaGlmdCArPSAwLjUgKiAoY2xlYXJhbmNlIC0gY2FuZGlhdGVDbGVhcmFuY2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmcmFjID0gYnVpbGRDb21tb24ubWFrZVZMaXN0KFtcbiAgICAgICAgICAgICAgICB7dHlwZTogXCJlbGVtXCIsIGVsZW06IGRlbm9tcmVzZXQsIHNoaWZ0OiBkZW5vbVNoaWZ0fSxcbiAgICAgICAgICAgICAgICB7dHlwZTogXCJlbGVtXCIsIGVsZW06IG51bWVycmVzZXQsIHNoaWZ0OiAtbnVtU2hpZnR9XG4gICAgICAgICAgICBdLCBcImluZGl2aWR1YWxTaGlmdFwiLCBudWxsLCBvcHRpb25zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFJ1bGUgMTVkXG4gICAgICAgICAgICB2YXIgYXhpc0hlaWdodCA9IGZvbnRNZXRyaWNzLm1ldHJpY3MuYXhpc0hlaWdodDtcblxuICAgICAgICAgICAgaWYgKChudW1TaGlmdCAtIG51bWVyLmRlcHRoKSAtIChheGlzSGVpZ2h0ICsgMC41ICogcnVsZVdpZHRoKVxuICAgICAgICAgICAgICAgICAgICA8IGNsZWFyYW5jZSkge1xuICAgICAgICAgICAgICAgIG51bVNoaWZ0ICs9XG4gICAgICAgICAgICAgICAgICAgIGNsZWFyYW5jZSAtICgobnVtU2hpZnQgLSBudW1lci5kZXB0aCkgLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGF4aXNIZWlnaHQgKyAwLjUgKiBydWxlV2lkdGgpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKChheGlzSGVpZ2h0IC0gMC41ICogcnVsZVdpZHRoKSAtIChkZW5vbS5oZWlnaHQgLSBkZW5vbVNoaWZ0KVxuICAgICAgICAgICAgICAgICAgICA8IGNsZWFyYW5jZSkge1xuICAgICAgICAgICAgICAgIGRlbm9tU2hpZnQgKz1cbiAgICAgICAgICAgICAgICAgICAgY2xlYXJhbmNlIC0gKChheGlzSGVpZ2h0IC0gMC41ICogcnVsZVdpZHRoKSAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZGVub20uaGVpZ2h0IC0gZGVub21TaGlmdCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgbWlkID0gbWFrZVNwYW4oXG4gICAgICAgICAgICAgICAgW29wdGlvbnMuc3R5bGUucmVzZXQoKSwgU3R5bGUuVEVYVC5jbHMoKSwgXCJmcmFjLWxpbmVcIl0pO1xuICAgICAgICAgICAgLy8gTWFudWFsbHkgc2V0IHRoZSBoZWlnaHQgb2YgdGhlIGxpbmUgYmVjYXVzZSBpdHMgaGVpZ2h0IGlzXG4gICAgICAgICAgICAvLyBjcmVhdGVkIGluIENTU1xuICAgICAgICAgICAgbWlkLmhlaWdodCA9IHJ1bGVXaWR0aDtcblxuICAgICAgICAgICAgdmFyIG1pZFNoaWZ0ID0gLShheGlzSGVpZ2h0IC0gMC41ICogcnVsZVdpZHRoKTtcblxuICAgICAgICAgICAgZnJhYyA9IGJ1aWxkQ29tbW9uLm1ha2VWTGlzdChbXG4gICAgICAgICAgICAgICAge3R5cGU6IFwiZWxlbVwiLCBlbGVtOiBkZW5vbXJlc2V0LCBzaGlmdDogZGVub21TaGlmdH0sXG4gICAgICAgICAgICAgICAge3R5cGU6IFwiZWxlbVwiLCBlbGVtOiBtaWQsICAgICAgICBzaGlmdDogbWlkU2hpZnR9LFxuICAgICAgICAgICAgICAgIHt0eXBlOiBcImVsZW1cIiwgZWxlbTogbnVtZXJyZXNldCwgc2hpZnQ6IC1udW1TaGlmdH1cbiAgICAgICAgICAgIF0sIFwiaW5kaXZpZHVhbFNoaWZ0XCIsIG51bGwsIG9wdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2luY2Ugd2UgbWFudWFsbHkgY2hhbmdlIHRoZSBzdHlsZSBzb21ldGltZXMgKHdpdGggXFxkZnJhYyBvciBcXHRmcmFjKSxcbiAgICAgICAgLy8gYWNjb3VudCBmb3IgdGhlIHBvc3NpYmxlIHNpemUgY2hhbmdlIGhlcmUuXG4gICAgICAgIGZyYWMuaGVpZ2h0ICo9IGZzdHlsZS5zaXplTXVsdGlwbGllciAvIG9wdGlvbnMuc3R5bGUuc2l6ZU11bHRpcGxpZXI7XG4gICAgICAgIGZyYWMuZGVwdGggKj0gZnN0eWxlLnNpemVNdWx0aXBsaWVyIC8gb3B0aW9ucy5zdHlsZS5zaXplTXVsdGlwbGllcjtcblxuICAgICAgICAvLyBSdWxlIDE1ZVxuICAgICAgICB2YXIgaW5uZXJDaGlsZHJlbiA9IFttYWtlU3BhbihbXCJtZnJhY1wiXSwgW2ZyYWNdKV07XG5cbiAgICAgICAgdmFyIGRlbGltU2l6ZTtcbiAgICAgICAgaWYgKGZzdHlsZS5zaXplID09PSBTdHlsZS5ESVNQTEFZLnNpemUpIHtcbiAgICAgICAgICAgIGRlbGltU2l6ZSA9IGZvbnRNZXRyaWNzLm1ldHJpY3MuZGVsaW0xO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVsaW1TaXplID0gZm9udE1ldHJpY3MubWV0cmljcy5nZXREZWxpbTIoZnN0eWxlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChncm91cC52YWx1ZS5sZWZ0RGVsaW0gIT0gbnVsbCkge1xuICAgICAgICAgICAgaW5uZXJDaGlsZHJlbi51bnNoaWZ0KFxuICAgICAgICAgICAgICAgIGRlbGltaXRlci5jdXN0b21TaXplZERlbGltKFxuICAgICAgICAgICAgICAgICAgICBncm91cC52YWx1ZS5sZWZ0RGVsaW0sIGRlbGltU2l6ZSwgdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy53aXRoU3R5bGUoZnN0eWxlKSwgZ3JvdXAubW9kZSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdyb3VwLnZhbHVlLnJpZ2h0RGVsaW0gIT0gbnVsbCkge1xuICAgICAgICAgICAgaW5uZXJDaGlsZHJlbi5wdXNoKFxuICAgICAgICAgICAgICAgIGRlbGltaXRlci5jdXN0b21TaXplZERlbGltKFxuICAgICAgICAgICAgICAgICAgICBncm91cC52YWx1ZS5yaWdodERlbGltLCBkZWxpbVNpemUsIHRydWUsXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMud2l0aFN0eWxlKGZzdHlsZSksIGdyb3VwLm1vZGUpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1ha2VTcGFuKFxuICAgICAgICAgICAgW1wibWlubmVyXCIsIG9wdGlvbnMuc3R5bGUucmVzZXQoKSwgZnN0eWxlLmNscygpXSxcbiAgICAgICAgICAgIGlubmVyQ2hpbGRyZW4sXG4gICAgICAgICAgICBvcHRpb25zLmdldENvbG9yKCkpO1xuICAgIH0sXG5cbiAgICBzcGFjaW5nOiBmdW5jdGlvbihncm91cCwgb3B0aW9ucywgcHJldikge1xuICAgICAgICBpZiAoZ3JvdXAudmFsdWUgPT09IFwiXFxcXCBcIiB8fCBncm91cC52YWx1ZSA9PT0gXCJcXFxcc3BhY2VcIiB8fFxuICAgICAgICAgICAgZ3JvdXAudmFsdWUgPT09IFwiIFwiIHx8IGdyb3VwLnZhbHVlID09PSBcIn5cIikge1xuICAgICAgICAgICAgLy8gU3BhY2VzIGFyZSBnZW5lcmF0ZWQgYnkgYWRkaW5nIGFuIGFjdHVhbCBzcGFjZS4gRWFjaCBvZiB0aGVzZVxuICAgICAgICAgICAgLy8gdGhpbmdzIGhhcyBhbiBlbnRyeSBpbiB0aGUgc3ltYm9scyB0YWJsZSwgc28gdGhlc2Ugd2lsbCBiZSB0dXJuZWRcbiAgICAgICAgICAgIC8vIGludG8gYXBwcm9wcmlhdGUgb3V0cHV0cy5cbiAgICAgICAgICAgIHJldHVybiBtYWtlU3BhbihcbiAgICAgICAgICAgICAgICBbXCJtb3JkXCIsIFwibXNwYWNlXCJdLFxuICAgICAgICAgICAgICAgIFtidWlsZENvbW1vbi5tYXRocm0oZ3JvdXAudmFsdWUsIGdyb3VwLm1vZGUpXVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIE90aGVyIGtpbmRzIG9mIHNwYWNlcyBhcmUgb2YgYXJiaXRyYXJ5IHdpZHRoLiBXZSB1c2UgQ1NTIHRvXG4gICAgICAgICAgICAvLyBnZW5lcmF0ZSB0aGVzZS5cbiAgICAgICAgICAgIHZhciBzcGFjaW5nQ2xhc3NNYXAgPSB7XG4gICAgICAgICAgICAgICAgXCJcXFxccXF1YWRcIjogXCJxcXVhZFwiLFxuICAgICAgICAgICAgICAgIFwiXFxcXHF1YWRcIjogXCJxdWFkXCIsXG4gICAgICAgICAgICAgICAgXCJcXFxcZW5zcGFjZVwiOiBcImVuc3BhY2VcIixcbiAgICAgICAgICAgICAgICBcIlxcXFw7XCI6IFwidGhpY2tzcGFjZVwiLFxuICAgICAgICAgICAgICAgIFwiXFxcXDpcIjogXCJtZWRpdW1zcGFjZVwiLFxuICAgICAgICAgICAgICAgIFwiXFxcXCxcIjogXCJ0aGluc3BhY2VcIixcbiAgICAgICAgICAgICAgICBcIlxcXFwhXCI6IFwibmVnYXRpdmV0aGluc3BhY2VcIlxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIG1ha2VTcGFuKFxuICAgICAgICAgICAgICAgIFtcIm1vcmRcIiwgXCJtc3BhY2VcIiwgc3BhY2luZ0NsYXNzTWFwW2dyb3VwLnZhbHVlXV0pO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGxsYXA6IGZ1bmN0aW9uKGdyb3VwLCBvcHRpb25zLCBwcmV2KSB7XG4gICAgICAgIHZhciBpbm5lciA9IG1ha2VTcGFuKFxuICAgICAgICAgICAgW1wiaW5uZXJcIl0sIFtidWlsZEdyb3VwKGdyb3VwLnZhbHVlLmJvZHksIG9wdGlvbnMucmVzZXQoKSldKTtcbiAgICAgICAgdmFyIGZpeCA9IG1ha2VTcGFuKFtcImZpeFwiXSwgW10pO1xuICAgICAgICByZXR1cm4gbWFrZVNwYW4oXG4gICAgICAgICAgICBbXCJsbGFwXCIsIG9wdGlvbnMuc3R5bGUuY2xzKCldLCBbaW5uZXIsIGZpeF0pO1xuICAgIH0sXG5cbiAgICBybGFwOiBmdW5jdGlvbihncm91cCwgb3B0aW9ucywgcHJldikge1xuICAgICAgICB2YXIgaW5uZXIgPSBtYWtlU3BhbihcbiAgICAgICAgICAgIFtcImlubmVyXCJdLCBbYnVpbGRHcm91cChncm91cC52YWx1ZS5ib2R5LCBvcHRpb25zLnJlc2V0KCkpXSk7XG4gICAgICAgIHZhciBmaXggPSBtYWtlU3BhbihbXCJmaXhcIl0sIFtdKTtcbiAgICAgICAgcmV0dXJuIG1ha2VTcGFuKFxuICAgICAgICAgICAgW1wicmxhcFwiLCBvcHRpb25zLnN0eWxlLmNscygpXSwgW2lubmVyLCBmaXhdKTtcbiAgICB9LFxuXG4gICAgb3A6IGZ1bmN0aW9uKGdyb3VwLCBvcHRpb25zLCBwcmV2KSB7XG4gICAgICAgIC8vIE9wZXJhdG9ycyBhcmUgaGFuZGxlZCBpbiB0aGUgVGVYYm9vayBwZy4gNDQzLTQ0NCwgcnVsZSAxMyhhKS5cbiAgICAgICAgdmFyIHN1cEdyb3VwO1xuICAgICAgICB2YXIgc3ViR3JvdXA7XG4gICAgICAgIHZhciBoYXNMaW1pdHMgPSBmYWxzZTtcbiAgICAgICAgaWYgKGdyb3VwLnR5cGUgPT09IFwic3Vwc3ViXCIgKSB7XG4gICAgICAgICAgICAvLyBJZiB3ZSBoYXZlIGxpbWl0cywgc3Vwc3ViIHdpbGwgcGFzcyB1cyBpdHMgZ3JvdXAgdG8gaGFuZGxlLiBQdWxsXG4gICAgICAgICAgICAvLyBvdXQgdGhlIHN1cGVyc2NyaXB0IGFuZCBzdWJzY3JpcHQgYW5kIHNldCB0aGUgZ3JvdXAgdG8gdGhlIG9wIGluXG4gICAgICAgICAgICAvLyBpdHMgYmFzZS5cbiAgICAgICAgICAgIHN1cEdyb3VwID0gZ3JvdXAudmFsdWUuc3VwO1xuICAgICAgICAgICAgc3ViR3JvdXAgPSBncm91cC52YWx1ZS5zdWI7XG4gICAgICAgICAgICBncm91cCA9IGdyb3VwLnZhbHVlLmJhc2U7XG4gICAgICAgICAgICBoYXNMaW1pdHMgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTW9zdCBvcGVyYXRvcnMgaGF2ZSBhIGxhcmdlIHN1Y2Nlc3NvciBzeW1ib2wsIGJ1dCB0aGVzZSBkb24ndC5cbiAgICAgICAgdmFyIG5vU3VjY2Vzc29yID0gW1xuICAgICAgICAgICAgXCJcXFxcc21hbGxpbnRcIlxuICAgICAgICBdO1xuXG4gICAgICAgIHZhciBsYXJnZSA9IGZhbHNlO1xuICAgICAgICBpZiAob3B0aW9ucy5zdHlsZS5zaXplID09PSBTdHlsZS5ESVNQTEFZLnNpemUgJiZcbiAgICAgICAgICAgIGdyb3VwLnZhbHVlLnN5bWJvbCAmJlxuICAgICAgICAgICAgIXV0aWxzLmNvbnRhaW5zKG5vU3VjY2Vzc29yLCBncm91cC52YWx1ZS5ib2R5KSkge1xuXG4gICAgICAgICAgICAvLyBNb3N0IHN5bWJvbCBvcGVyYXRvcnMgZ2V0IGxhcmdlciBpbiBkaXNwbGF5c3R5bGUgKHJ1bGUgMTMpXG4gICAgICAgICAgICBsYXJnZSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYmFzZTtcbiAgICAgICAgdmFyIGJhc2VTaGlmdCA9IDA7XG4gICAgICAgIHZhciBzbGFudCA9IDA7XG4gICAgICAgIGlmIChncm91cC52YWx1ZS5zeW1ib2wpIHtcbiAgICAgICAgICAgIC8vIElmIHRoaXMgaXMgYSBzeW1ib2wsIGNyZWF0ZSB0aGUgc3ltYm9sLlxuICAgICAgICAgICAgdmFyIHN0eWxlID0gbGFyZ2UgPyBcIlNpemUyLVJlZ3VsYXJcIiA6IFwiU2l6ZTEtUmVndWxhclwiO1xuICAgICAgICAgICAgYmFzZSA9IGJ1aWxkQ29tbW9uLm1ha2VTeW1ib2woXG4gICAgICAgICAgICAgICAgZ3JvdXAudmFsdWUuYm9keSwgc3R5bGUsIFwibWF0aFwiLCBvcHRpb25zLmdldENvbG9yKCksXG4gICAgICAgICAgICAgICAgW1wib3Atc3ltYm9sXCIsIGxhcmdlID8gXCJsYXJnZS1vcFwiIDogXCJzbWFsbC1vcFwiLCBcIm1vcFwiXSk7XG5cbiAgICAgICAgICAgIC8vIFNoaWZ0IHRoZSBzeW1ib2wgc28gaXRzIGNlbnRlciBsaWVzIG9uIHRoZSBheGlzIChydWxlIDEzKS4gSXRcbiAgICAgICAgICAgIC8vIGFwcGVhcnMgdGhhdCBvdXIgZm9udHMgaGF2ZSB0aGUgY2VudGVycyBvZiB0aGUgc3ltYm9scyBhbHJlYWR5XG4gICAgICAgICAgICAvLyBhbG1vc3Qgb24gdGhlIGF4aXMsIHNvIHRoZXNlIG51bWJlcnMgYXJlIHZlcnkgc21hbGwuIE5vdGUgd2VcbiAgICAgICAgICAgIC8vIGRvbid0IGFjdHVhbGx5IGFwcGx5IHRoaXMgaGVyZSwgYnV0IGluc3RlYWQgaXQgaXMgdXNlZCBlaXRoZXIgaW5cbiAgICAgICAgICAgIC8vIHRoZSB2bGlzdCBjcmVhdGlvbiBvciBzZXBhcmF0ZWx5IHdoZW4gdGhlcmUgYXJlIG5vIGxpbWl0cy5cbiAgICAgICAgICAgIGJhc2VTaGlmdCA9IChiYXNlLmhlaWdodCAtIGJhc2UuZGVwdGgpIC8gMiAtXG4gICAgICAgICAgICAgICAgZm9udE1ldHJpY3MubWV0cmljcy5heGlzSGVpZ2h0ICpcbiAgICAgICAgICAgICAgICBvcHRpb25zLnN0eWxlLnNpemVNdWx0aXBsaWVyO1xuXG4gICAgICAgICAgICAvLyBUaGUgc2xhbnQgb2YgdGhlIHN5bWJvbCBpcyBqdXN0IGl0cyBpdGFsaWMgY29ycmVjdGlvbi5cbiAgICAgICAgICAgIHNsYW50ID0gYmFzZS5pdGFsaWM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBPdGhlcndpc2UsIHRoaXMgaXMgYSB0ZXh0IG9wZXJhdG9yLiBCdWlsZCB0aGUgdGV4dCBmcm9tIHRoZVxuICAgICAgICAgICAgLy8gb3BlcmF0b3IncyBuYW1lLlxuICAgICAgICAgICAgLy8gVE9ETyhlbWlseSk6IEFkZCBhIHNwYWNlIGluIHRoZSBtaWRkbGUgb2Ygc29tZSBvZiB0aGVzZVxuICAgICAgICAgICAgLy8gb3BlcmF0b3JzLCBsaWtlIFxcbGltc3VwXG4gICAgICAgICAgICB2YXIgb3V0cHV0ID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGdyb3VwLnZhbHVlLmJvZHkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQucHVzaChidWlsZENvbW1vbi5tYXRocm0oZ3JvdXAudmFsdWUuYm9keVtpXSwgZ3JvdXAubW9kZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYmFzZSA9IG1ha2VTcGFuKFtcIm1vcFwiXSwgb3V0cHV0LCBvcHRpb25zLmdldENvbG9yKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc0xpbWl0cykge1xuICAgICAgICAgICAgLy8gSUUgOCBjbGlwcyBcXGludCBpZiBpdCBpcyBpbiBhIGRpc3BsYXk6IGlubGluZS1ibG9jay4gV2Ugd3JhcCBpdFxuICAgICAgICAgICAgLy8gaW4gYSBuZXcgc3BhbiBzbyBpdCBpcyBhbiBpbmxpbmUsIGFuZCB3b3Jrcy5cbiAgICAgICAgICAgIGJhc2UgPSBtYWtlU3BhbihbXSwgW2Jhc2VdKTtcblxuICAgICAgICAgICAgdmFyIHN1cG1pZCwgc3VwS2Vybiwgc3VibWlkLCBzdWJLZXJuO1xuICAgICAgICAgICAgLy8gV2UgbWFudWFsbHkgaGF2ZSB0byBoYW5kbGUgdGhlIHN1cGVyc2NyaXB0cyBhbmQgc3Vic2NyaXB0cy4gVGhpcyxcbiAgICAgICAgICAgIC8vIGFzaWRlIGZyb20gdGhlIGtlcm4gY2FsY3VsYXRpb25zLCBpcyBjb3BpZWQgZnJvbSBzdXBzdWIuXG4gICAgICAgICAgICBpZiAoc3VwR3JvdXApIHtcbiAgICAgICAgICAgICAgICB2YXIgc3VwID0gYnVpbGRHcm91cChcbiAgICAgICAgICAgICAgICAgICAgc3VwR3JvdXAsIG9wdGlvbnMud2l0aFN0eWxlKG9wdGlvbnMuc3R5bGUuc3VwKCkpKTtcbiAgICAgICAgICAgICAgICBzdXBtaWQgPSBtYWtlU3BhbihcbiAgICAgICAgICAgICAgICAgICAgW29wdGlvbnMuc3R5bGUucmVzZXQoKSwgb3B0aW9ucy5zdHlsZS5zdXAoKS5jbHMoKV0sIFtzdXBdKTtcblxuICAgICAgICAgICAgICAgIHN1cEtlcm4gPSBNYXRoLm1heChcbiAgICAgICAgICAgICAgICAgICAgZm9udE1ldHJpY3MubWV0cmljcy5iaWdPcFNwYWNpbmcxLFxuICAgICAgICAgICAgICAgICAgICBmb250TWV0cmljcy5tZXRyaWNzLmJpZ09wU3BhY2luZzMgLSBzdXAuZGVwdGgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc3ViR3JvdXApIHtcbiAgICAgICAgICAgICAgICB2YXIgc3ViID0gYnVpbGRHcm91cChcbiAgICAgICAgICAgICAgICAgICAgc3ViR3JvdXAsIG9wdGlvbnMud2l0aFN0eWxlKG9wdGlvbnMuc3R5bGUuc3ViKCkpKTtcbiAgICAgICAgICAgICAgICBzdWJtaWQgPSBtYWtlU3BhbihcbiAgICAgICAgICAgICAgICAgICAgW29wdGlvbnMuc3R5bGUucmVzZXQoKSwgb3B0aW9ucy5zdHlsZS5zdWIoKS5jbHMoKV0sXG4gICAgICAgICAgICAgICAgICAgIFtzdWJdKTtcblxuICAgICAgICAgICAgICAgIHN1Yktlcm4gPSBNYXRoLm1heChcbiAgICAgICAgICAgICAgICAgICAgZm9udE1ldHJpY3MubWV0cmljcy5iaWdPcFNwYWNpbmcyLFxuICAgICAgICAgICAgICAgICAgICBmb250TWV0cmljcy5tZXRyaWNzLmJpZ09wU3BhY2luZzQgLSBzdWIuaGVpZ2h0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQnVpbGQgdGhlIGZpbmFsIGdyb3VwIGFzIGEgdmxpc3Qgb2YgdGhlIHBvc3NpYmxlIHN1YnNjcmlwdCwgYmFzZSxcbiAgICAgICAgICAgIC8vIGFuZCBwb3NzaWJsZSBzdXBlcnNjcmlwdC5cbiAgICAgICAgICAgIHZhciBmaW5hbEdyb3VwLCB0b3AsIGJvdHRvbTtcbiAgICAgICAgICAgIGlmICghc3VwR3JvdXApIHtcbiAgICAgICAgICAgICAgICB0b3AgPSBiYXNlLmhlaWdodCAtIGJhc2VTaGlmdDtcblxuICAgICAgICAgICAgICAgIGZpbmFsR3JvdXAgPSBidWlsZENvbW1vbi5tYWtlVkxpc3QoW1xuICAgICAgICAgICAgICAgICAgICB7dHlwZTogXCJrZXJuXCIsIHNpemU6IGZvbnRNZXRyaWNzLm1ldHJpY3MuYmlnT3BTcGFjaW5nNX0sXG4gICAgICAgICAgICAgICAgICAgIHt0eXBlOiBcImVsZW1cIiwgZWxlbTogc3VibWlkfSxcbiAgICAgICAgICAgICAgICAgICAge3R5cGU6IFwia2VyblwiLCBzaXplOiBzdWJLZXJufSxcbiAgICAgICAgICAgICAgICAgICAge3R5cGU6IFwiZWxlbVwiLCBlbGVtOiBiYXNlfVxuICAgICAgICAgICAgICAgIF0sIFwidG9wXCIsIHRvcCwgb3B0aW9ucyk7XG5cbiAgICAgICAgICAgICAgICAvLyBIZXJlLCB3ZSBzaGlmdCB0aGUgbGltaXRzIGJ5IHRoZSBzbGFudCBvZiB0aGUgc3ltYm9sLiBOb3RlXG4gICAgICAgICAgICAgICAgLy8gdGhhdCB3ZSBhcmUgc3VwcG9zZWQgdG8gc2hpZnQgdGhlIGxpbWl0cyBieSAxLzIgb2YgdGhlIHNsYW50LFxuICAgICAgICAgICAgICAgIC8vIGJ1dCBzaW5jZSB3ZSBhcmUgY2VudGVyaW5nIHRoZSBsaW1pdHMgYWRkaW5nIGEgZnVsbCBzbGFudCBvZlxuICAgICAgICAgICAgICAgIC8vIG1hcmdpbiB3aWxsIHNoaWZ0IGJ5IDEvMiB0aGF0LlxuICAgICAgICAgICAgICAgIGZpbmFsR3JvdXAuY2hpbGRyZW5bMF0uc3R5bGUubWFyZ2luTGVmdCA9IC1zbGFudCArIFwiZW1cIjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXN1Ykdyb3VwKSB7XG4gICAgICAgICAgICAgICAgYm90dG9tID0gYmFzZS5kZXB0aCArIGJhc2VTaGlmdDtcblxuICAgICAgICAgICAgICAgIGZpbmFsR3JvdXAgPSBidWlsZENvbW1vbi5tYWtlVkxpc3QoW1xuICAgICAgICAgICAgICAgICAgICB7dHlwZTogXCJlbGVtXCIsIGVsZW06IGJhc2V9LFxuICAgICAgICAgICAgICAgICAgICB7dHlwZTogXCJrZXJuXCIsIHNpemU6IHN1cEtlcm59LFxuICAgICAgICAgICAgICAgICAgICB7dHlwZTogXCJlbGVtXCIsIGVsZW06IHN1cG1pZH0sXG4gICAgICAgICAgICAgICAgICAgIHt0eXBlOiBcImtlcm5cIiwgc2l6ZTogZm9udE1ldHJpY3MubWV0cmljcy5iaWdPcFNwYWNpbmc1fVxuICAgICAgICAgICAgICAgIF0sIFwiYm90dG9tXCIsIGJvdHRvbSwgb3B0aW9ucyk7XG5cbiAgICAgICAgICAgICAgICAvLyBTZWUgY29tbWVudCBhYm92ZSBhYm91dCBzbGFudHNcbiAgICAgICAgICAgICAgICBmaW5hbEdyb3VwLmNoaWxkcmVuWzFdLnN0eWxlLm1hcmdpbkxlZnQgPSBzbGFudCArIFwiZW1cIjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXN1cEdyb3VwICYmICFzdWJHcm91cCkge1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgY2FzZSBwcm9iYWJseSBzaG91bGRuJ3Qgb2NjdXIgKHRoaXMgd291bGQgbWVhbiB0aGVcbiAgICAgICAgICAgICAgICAvLyBzdXBzdWIgd2FzIHNlbmRpbmcgdXMgYSBncm91cCB3aXRoIG5vIHN1cGVyc2NyaXB0IG9yXG4gICAgICAgICAgICAgICAgLy8gc3Vic2NyaXB0KSBidXQgYmUgc2FmZS5cbiAgICAgICAgICAgICAgICByZXR1cm4gYmFzZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYm90dG9tID0gZm9udE1ldHJpY3MubWV0cmljcy5iaWdPcFNwYWNpbmc1ICtcbiAgICAgICAgICAgICAgICAgICAgc3VibWlkLmhlaWdodCArIHN1Ym1pZC5kZXB0aCArXG4gICAgICAgICAgICAgICAgICAgIHN1Yktlcm4gK1xuICAgICAgICAgICAgICAgICAgICBiYXNlLmRlcHRoICsgYmFzZVNoaWZ0O1xuXG4gICAgICAgICAgICAgICAgZmluYWxHcm91cCA9IGJ1aWxkQ29tbW9uLm1ha2VWTGlzdChbXG4gICAgICAgICAgICAgICAgICAgIHt0eXBlOiBcImtlcm5cIiwgc2l6ZTogZm9udE1ldHJpY3MubWV0cmljcy5iaWdPcFNwYWNpbmc1fSxcbiAgICAgICAgICAgICAgICAgICAge3R5cGU6IFwiZWxlbVwiLCBlbGVtOiBzdWJtaWR9LFxuICAgICAgICAgICAgICAgICAgICB7dHlwZTogXCJrZXJuXCIsIHNpemU6IHN1Yktlcm59LFxuICAgICAgICAgICAgICAgICAgICB7dHlwZTogXCJlbGVtXCIsIGVsZW06IGJhc2V9LFxuICAgICAgICAgICAgICAgICAgICB7dHlwZTogXCJrZXJuXCIsIHNpemU6IHN1cEtlcm59LFxuICAgICAgICAgICAgICAgICAgICB7dHlwZTogXCJlbGVtXCIsIGVsZW06IHN1cG1pZH0sXG4gICAgICAgICAgICAgICAgICAgIHt0eXBlOiBcImtlcm5cIiwgc2l6ZTogZm9udE1ldHJpY3MubWV0cmljcy5iaWdPcFNwYWNpbmc1fVxuICAgICAgICAgICAgICAgIF0sIFwiYm90dG9tXCIsIGJvdHRvbSwgb3B0aW9ucyk7XG5cbiAgICAgICAgICAgICAgICAvLyBTZWUgY29tbWVudCBhYm92ZSBhYm91dCBzbGFudHNcbiAgICAgICAgICAgICAgICBmaW5hbEdyb3VwLmNoaWxkcmVuWzBdLnN0eWxlLm1hcmdpbkxlZnQgPSAtc2xhbnQgKyBcImVtXCI7XG4gICAgICAgICAgICAgICAgZmluYWxHcm91cC5jaGlsZHJlblsyXS5zdHlsZS5tYXJnaW5MZWZ0ID0gc2xhbnQgKyBcImVtXCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBtYWtlU3BhbihbXCJtb3BcIiwgXCJvcC1saW1pdHNcIl0sIFtmaW5hbEdyb3VwXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoZ3JvdXAudmFsdWUuc3ltYm9sKSB7XG4gICAgICAgICAgICAgICAgYmFzZS5zdHlsZS50b3AgPSBiYXNlU2hpZnQgKyBcImVtXCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBiYXNlO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGthdGV4OiBmdW5jdGlvbihncm91cCwgb3B0aW9ucywgcHJldikge1xuICAgICAgICAvLyBUaGUgS2FUZVggbG9nby4gVGhlIG9mZnNldHMgZm9yIHRoZSBLIGFuZCBhIHdlcmUgY2hvc2VuIHRvIGxvb2tcbiAgICAgICAgLy8gZ29vZCwgYnV0IHRoZSBvZmZzZXRzIGZvciB0aGUgVCwgRSwgYW5kIFggd2VyZSB0YWtlbiBmcm9tIHRoZVxuICAgICAgICAvLyBkZWZpbml0aW9uIG9mIFxcVGVYIGluIFRlWCAoc2VlIFRlWGJvb2sgcGcuIDM1NilcbiAgICAgICAgdmFyIGsgPSBtYWtlU3BhbihcbiAgICAgICAgICAgIFtcImtcIl0sIFtidWlsZENvbW1vbi5tYXRocm0oXCJLXCIsIGdyb3VwLm1vZGUpXSk7XG4gICAgICAgIHZhciBhID0gbWFrZVNwYW4oXG4gICAgICAgICAgICBbXCJhXCJdLCBbYnVpbGRDb21tb24ubWF0aHJtKFwiQVwiLCBncm91cC5tb2RlKV0pO1xuXG4gICAgICAgIGEuaGVpZ2h0ID0gKGEuaGVpZ2h0ICsgMC4yKSAqIDAuNzU7XG4gICAgICAgIGEuZGVwdGggPSAoYS5oZWlnaHQgLSAwLjIpICogMC43NTtcblxuICAgICAgICB2YXIgdCA9IG1ha2VTcGFuKFxuICAgICAgICAgICAgW1widFwiXSwgW2J1aWxkQ29tbW9uLm1hdGhybShcIlRcIiwgZ3JvdXAubW9kZSldKTtcbiAgICAgICAgdmFyIGUgPSBtYWtlU3BhbihcbiAgICAgICAgICAgIFtcImVcIl0sIFtidWlsZENvbW1vbi5tYXRocm0oXCJFXCIsIGdyb3VwLm1vZGUpXSk7XG5cbiAgICAgICAgZS5oZWlnaHQgPSAoZS5oZWlnaHQgLSAwLjIxNTUpO1xuICAgICAgICBlLmRlcHRoID0gKGUuZGVwdGggKyAwLjIxNTUpO1xuXG4gICAgICAgIHZhciB4ID0gbWFrZVNwYW4oXG4gICAgICAgICAgICBbXCJ4XCJdLCBbYnVpbGRDb21tb24ubWF0aHJtKFwiWFwiLCBncm91cC5tb2RlKV0pO1xuXG4gICAgICAgIHJldHVybiBtYWtlU3BhbihcbiAgICAgICAgICAgIFtcImthdGV4LWxvZ29cIl0sIFtrLCBhLCB0LCBlLCB4XSwgb3B0aW9ucy5nZXRDb2xvcigpKTtcbiAgICB9LFxuXG4gICAgb3ZlcmxpbmU6IGZ1bmN0aW9uKGdyb3VwLCBvcHRpb25zLCBwcmV2KSB7XG4gICAgICAgIC8vIE92ZXJsaW5lcyBhcmUgaGFuZGxlZCBpbiB0aGUgVGVYYm9vayBwZyA0NDMsIFJ1bGUgOS5cblxuICAgICAgICAvLyBCdWlsZCB0aGUgaW5uZXIgZ3JvdXAgaW4gdGhlIGNyYW1wZWQgc3R5bGUuXG4gICAgICAgIHZhciBpbm5lckdyb3VwID0gYnVpbGRHcm91cChncm91cC52YWx1ZS5ib2R5LFxuICAgICAgICAgICAgICAgIG9wdGlvbnMud2l0aFN0eWxlKG9wdGlvbnMuc3R5bGUuY3JhbXAoKSkpO1xuXG4gICAgICAgIHZhciBydWxlV2lkdGggPSBmb250TWV0cmljcy5tZXRyaWNzLmRlZmF1bHRSdWxlVGhpY2tuZXNzIC9cbiAgICAgICAgICAgIG9wdGlvbnMuc3R5bGUuc2l6ZU11bHRpcGxpZXI7XG5cbiAgICAgICAgLy8gQ3JlYXRlIHRoZSBsaW5lIGFib3ZlIHRoZSBib2R5XG4gICAgICAgIHZhciBsaW5lID0gbWFrZVNwYW4oXG4gICAgICAgICAgICBbb3B0aW9ucy5zdHlsZS5yZXNldCgpLCBTdHlsZS5URVhULmNscygpLCBcIm92ZXJsaW5lLWxpbmVcIl0pO1xuICAgICAgICBsaW5lLmhlaWdodCA9IHJ1bGVXaWR0aDtcbiAgICAgICAgbGluZS5tYXhGb250U2l6ZSA9IDEuMDtcblxuICAgICAgICAvLyBHZW5lcmF0ZSB0aGUgdmxpc3QsIHdpdGggdGhlIGFwcHJvcHJpYXRlIGtlcm5zXG4gICAgICAgIHZhciB2bGlzdCA9IGJ1aWxkQ29tbW9uLm1ha2VWTGlzdChbXG4gICAgICAgICAgICB7dHlwZTogXCJlbGVtXCIsIGVsZW06IGlubmVyR3JvdXB9LFxuICAgICAgICAgICAge3R5cGU6IFwia2VyblwiLCBzaXplOiAzICogcnVsZVdpZHRofSxcbiAgICAgICAgICAgIHt0eXBlOiBcImVsZW1cIiwgZWxlbTogbGluZX0sXG4gICAgICAgICAgICB7dHlwZTogXCJrZXJuXCIsIHNpemU6IHJ1bGVXaWR0aH1cbiAgICAgICAgXSwgXCJmaXJzdEJhc2VsaW5lXCIsIG51bGwsIG9wdGlvbnMpO1xuXG4gICAgICAgIHJldHVybiBtYWtlU3BhbihbXCJvdmVybGluZVwiLCBcIm1vcmRcIl0sIFt2bGlzdF0sIG9wdGlvbnMuZ2V0Q29sb3IoKSk7XG4gICAgfSxcblxuICAgIHNxcnQ6IGZ1bmN0aW9uKGdyb3VwLCBvcHRpb25zLCBwcmV2KSB7XG4gICAgICAgIC8vIFNxdWFyZSByb290cyBhcmUgaGFuZGxlZCBpbiB0aGUgVGVYYm9vayBwZy4gNDQzLCBSdWxlIDExLlxuXG4gICAgICAgIC8vIEZpcnN0LCB3ZSBkbyB0aGUgc2FtZSBzdGVwcyBhcyBpbiBvdmVybGluZSB0byBidWlsZCB0aGUgaW5uZXIgZ3JvdXBcbiAgICAgICAgLy8gYW5kIGxpbmVcbiAgICAgICAgdmFyIGlubmVyID0gYnVpbGRHcm91cChncm91cC52YWx1ZS5ib2R5LFxuICAgICAgICAgICAgICAgIG9wdGlvbnMud2l0aFN0eWxlKG9wdGlvbnMuc3R5bGUuY3JhbXAoKSkpO1xuXG4gICAgICAgIHZhciBydWxlV2lkdGggPSBmb250TWV0cmljcy5tZXRyaWNzLmRlZmF1bHRSdWxlVGhpY2tuZXNzIC9cbiAgICAgICAgICAgIG9wdGlvbnMuc3R5bGUuc2l6ZU11bHRpcGxpZXI7XG5cbiAgICAgICAgdmFyIGxpbmUgPSBtYWtlU3BhbihcbiAgICAgICAgICAgIFtvcHRpb25zLnN0eWxlLnJlc2V0KCksIFN0eWxlLlRFWFQuY2xzKCksIFwic3FydC1saW5lXCJdLCBbXSxcbiAgICAgICAgICAgIG9wdGlvbnMuZ2V0Q29sb3IoKSk7XG4gICAgICAgIGxpbmUuaGVpZ2h0ID0gcnVsZVdpZHRoO1xuICAgICAgICBsaW5lLm1heEZvbnRTaXplID0gMS4wO1xuXG4gICAgICAgIHZhciBwaGkgPSBydWxlV2lkdGg7XG4gICAgICAgIGlmIChvcHRpb25zLnN0eWxlLmlkIDwgU3R5bGUuVEVYVC5pZCkge1xuICAgICAgICAgICAgcGhpID0gZm9udE1ldHJpY3MubWV0cmljcy54SGVpZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBjbGVhcmFuY2UgYmV0d2VlbiB0aGUgYm9keSBhbmQgbGluZVxuICAgICAgICB2YXIgbGluZUNsZWFyYW5jZSA9IHJ1bGVXaWR0aCArIHBoaSAvIDQ7XG5cbiAgICAgICAgdmFyIGlubmVySGVpZ2h0ID1cbiAgICAgICAgICAgIChpbm5lci5oZWlnaHQgKyBpbm5lci5kZXB0aCkgKiBvcHRpb25zLnN0eWxlLnNpemVNdWx0aXBsaWVyO1xuICAgICAgICB2YXIgbWluRGVsaW1pdGVySGVpZ2h0ID0gaW5uZXJIZWlnaHQgKyBsaW5lQ2xlYXJhbmNlICsgcnVsZVdpZHRoO1xuXG4gICAgICAgIC8vIENyZWF0ZSBhIFxcc3VyZCBkZWxpbWl0ZXIgb2YgdGhlIHJlcXVpcmVkIG1pbmltdW0gc2l6ZVxuICAgICAgICB2YXIgZGVsaW0gPSBtYWtlU3BhbihbXCJzcXJ0LXNpZ25cIl0sIFtcbiAgICAgICAgICAgIGRlbGltaXRlci5jdXN0b21TaXplZERlbGltKFwiXFxcXHN1cmRcIiwgbWluRGVsaW1pdGVySGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2UsIG9wdGlvbnMsIGdyb3VwLm1vZGUpXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5nZXRDb2xvcigpKTtcblxuICAgICAgICB2YXIgZGVsaW1EZXB0aCA9IChkZWxpbS5oZWlnaHQgKyBkZWxpbS5kZXB0aCkgLSBydWxlV2lkdGg7XG5cbiAgICAgICAgLy8gQWRqdXN0IHRoZSBjbGVhcmFuY2UgYmFzZWQgb24gdGhlIGRlbGltaXRlciBzaXplXG4gICAgICAgIGlmIChkZWxpbURlcHRoID4gaW5uZXIuaGVpZ2h0ICsgaW5uZXIuZGVwdGggKyBsaW5lQ2xlYXJhbmNlKSB7XG4gICAgICAgICAgICBsaW5lQ2xlYXJhbmNlID1cbiAgICAgICAgICAgICAgICAobGluZUNsZWFyYW5jZSArIGRlbGltRGVwdGggLSBpbm5lci5oZWlnaHQgLSBpbm5lci5kZXB0aCkgLyAyO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2hpZnQgdGhlIGRlbGltaXRlciBzbyB0aGF0IGl0cyB0b3AgbGluZXMgdXAgd2l0aCB0aGUgdG9wIG9mIHRoZSBsaW5lXG4gICAgICAgIHZhciBkZWxpbVNoaWZ0ID0gLShpbm5lci5oZWlnaHQgKyBsaW5lQ2xlYXJhbmNlICsgcnVsZVdpZHRoKSArIGRlbGltLmhlaWdodDtcbiAgICAgICAgZGVsaW0uc3R5bGUudG9wID0gZGVsaW1TaGlmdCArIFwiZW1cIjtcbiAgICAgICAgZGVsaW0uaGVpZ2h0IC09IGRlbGltU2hpZnQ7XG4gICAgICAgIGRlbGltLmRlcHRoICs9IGRlbGltU2hpZnQ7XG5cbiAgICAgICAgLy8gV2UgYWRkIGEgc3BlY2lhbCBjYXNlIGhlcmUsIGJlY2F1c2UgZXZlbiB3aGVuIGBpbm5lcmAgaXMgZW1wdHksIHdlXG4gICAgICAgIC8vIHN0aWxsIGdldCBhIGxpbmUuIFNvLCB3ZSB1c2UgYSBzaW1wbGUgaGV1cmlzdGljIHRvIGRlY2lkZSBpZiB3ZVxuICAgICAgICAvLyBzaG91bGQgb21pdCB0aGUgYm9keSBlbnRpcmVseS4gKG5vdGUgdGhpcyBkb2Vzbid0IHdvcmsgZm9yIHNvbWV0aGluZ1xuICAgICAgICAvLyBsaWtlIGBcXHNxcnR7XFxybGFwe3h9fWAsIGJ1dCBpZiBzb21lb25lIGlzIGRvaW5nIHRoYXQgdGhleSBkZXNlcnZlIGZvclxuICAgICAgICAvLyBpdCBub3QgdG8gd29yay5cbiAgICAgICAgdmFyIGJvZHk7XG4gICAgICAgIGlmIChpbm5lci5oZWlnaHQgPT09IDAgJiYgaW5uZXIuZGVwdGggPT09IDApIHtcbiAgICAgICAgICAgIGJvZHkgPSBtYWtlU3BhbigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYm9keSA9IGJ1aWxkQ29tbW9uLm1ha2VWTGlzdChbXG4gICAgICAgICAgICAgICAge3R5cGU6IFwiZWxlbVwiLCBlbGVtOiBpbm5lcn0sXG4gICAgICAgICAgICAgICAge3R5cGU6IFwia2VyblwiLCBzaXplOiBsaW5lQ2xlYXJhbmNlfSxcbiAgICAgICAgICAgICAgICB7dHlwZTogXCJlbGVtXCIsIGVsZW06IGxpbmV9LFxuICAgICAgICAgICAgICAgIHt0eXBlOiBcImtlcm5cIiwgc2l6ZTogcnVsZVdpZHRofVxuICAgICAgICAgICAgXSwgXCJmaXJzdEJhc2VsaW5lXCIsIG51bGwsIG9wdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1ha2VTcGFuKFtcInNxcnRcIiwgXCJtb3JkXCJdLCBbZGVsaW0sIGJvZHldKTtcbiAgICB9LFxuXG4gICAgc2l6aW5nOiBmdW5jdGlvbihncm91cCwgb3B0aW9ucywgcHJldikge1xuICAgICAgICAvLyBIYW5kbGUgc2l6aW5nIG9wZXJhdG9ycyBsaWtlIFxcSHVnZS4gUmVhbCBUZVggZG9lc24ndCBhY3R1YWxseSBhbGxvd1xuICAgICAgICAvLyB0aGVzZSBmdW5jdGlvbnMgaW5zaWRlIG9mIG1hdGggZXhwcmVzc2lvbnMsIHNvIHdlIGRvIHNvbWUgc3BlY2lhbFxuICAgICAgICAvLyBoYW5kbGluZy5cbiAgICAgICAgdmFyIGlubmVyID0gYnVpbGRFeHByZXNzaW9uKGdyb3VwLnZhbHVlLnZhbHVlLFxuICAgICAgICAgICAgICAgIG9wdGlvbnMud2l0aFNpemUoZ3JvdXAudmFsdWUuc2l6ZSksIHByZXYpO1xuXG4gICAgICAgIHZhciBzcGFuID0gbWFrZVNwYW4oW1wibW9yZFwiXSxcbiAgICAgICAgICAgIFttYWtlU3BhbihbXCJzaXppbmdcIiwgXCJyZXNldC1cIiArIG9wdGlvbnMuc2l6ZSwgZ3JvdXAudmFsdWUuc2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5zdHlsZS5jbHMoKV0sXG4gICAgICAgICAgICAgICAgICAgICAgaW5uZXIpXSk7XG5cbiAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBjb3JyZWN0IG1heEZvbnRTaXplIG1hbnVhbGx5XG4gICAgICAgIHZhciBmb250U2l6ZSA9IHNpemluZ011bHRpcGxpZXJbZ3JvdXAudmFsdWUuc2l6ZV07XG4gICAgICAgIHNwYW4ubWF4Rm9udFNpemUgPSBmb250U2l6ZSAqIG9wdGlvbnMuc3R5bGUuc2l6ZU11bHRpcGxpZXI7XG5cbiAgICAgICAgcmV0dXJuIHNwYW47XG4gICAgfSxcblxuICAgIHN0eWxpbmc6IGZ1bmN0aW9uKGdyb3VwLCBvcHRpb25zLCBwcmV2KSB7XG4gICAgICAgIC8vIFN0eWxlIGNoYW5nZXMgYXJlIGhhbmRsZWQgaW4gdGhlIFRlWGJvb2sgb24gcGcuIDQ0MiwgUnVsZSAzLlxuXG4gICAgICAgIC8vIEZpZ3VyZSBvdXQgd2hhdCBzdHlsZSB3ZSdyZSBjaGFuZ2luZyB0by5cbiAgICAgICAgdmFyIHN0eWxlID0ge1xuICAgICAgICAgICAgXCJkaXNwbGF5XCI6IFN0eWxlLkRJU1BMQVksXG4gICAgICAgICAgICBcInRleHRcIjogU3R5bGUuVEVYVCxcbiAgICAgICAgICAgIFwic2NyaXB0XCI6IFN0eWxlLlNDUklQVCxcbiAgICAgICAgICAgIFwic2NyaXB0c2NyaXB0XCI6IFN0eWxlLlNDUklQVFNDUklQVFxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBuZXdTdHlsZSA9IHN0eWxlW2dyb3VwLnZhbHVlLnN0eWxlXTtcblxuICAgICAgICAvLyBCdWlsZCB0aGUgaW5uZXIgZXhwcmVzc2lvbiBpbiB0aGUgbmV3IHN0eWxlLlxuICAgICAgICB2YXIgaW5uZXIgPSBidWlsZEV4cHJlc3Npb24oXG4gICAgICAgICAgICBncm91cC52YWx1ZS52YWx1ZSwgb3B0aW9ucy53aXRoU3R5bGUobmV3U3R5bGUpLCBwcmV2KTtcblxuICAgICAgICByZXR1cm4gbWFrZVNwYW4oW29wdGlvbnMuc3R5bGUucmVzZXQoKSwgbmV3U3R5bGUuY2xzKCldLCBpbm5lcik7XG4gICAgfSxcblxuICAgIGRlbGltc2l6aW5nOiBmdW5jdGlvbihncm91cCwgb3B0aW9ucywgcHJldikge1xuICAgICAgICB2YXIgZGVsaW0gPSBncm91cC52YWx1ZS52YWx1ZTtcblxuICAgICAgICBpZiAoZGVsaW0gPT09IFwiLlwiKSB7XG4gICAgICAgICAgICAvLyBFbXB0eSBkZWxpbWl0ZXJzIHN0aWxsIGNvdW50IGFzIGVsZW1lbnRzLCBldmVuIHRob3VnaCB0aGV5IGRvbid0XG4gICAgICAgICAgICAvLyBzaG93IGFueXRoaW5nLlxuICAgICAgICAgICAgcmV0dXJuIG1ha2VTcGFuKFtncm91cFRvVHlwZVtncm91cC52YWx1ZS5kZWxpbVR5cGVdXSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVc2UgZGVsaW1pdGVyLnNpemVkRGVsaW0gdG8gZ2VuZXJhdGUgdGhlIGRlbGltaXRlci5cbiAgICAgICAgcmV0dXJuIG1ha2VTcGFuKFxuICAgICAgICAgICAgW2dyb3VwVG9UeXBlW2dyb3VwLnZhbHVlLmRlbGltVHlwZV1dLFxuICAgICAgICAgICAgW2RlbGltaXRlci5zaXplZERlbGltKFxuICAgICAgICAgICAgICAgIGRlbGltLCBncm91cC52YWx1ZS5zaXplLCBvcHRpb25zLCBncm91cC5tb2RlKV0pO1xuICAgIH0sXG5cbiAgICBsZWZ0cmlnaHQ6IGZ1bmN0aW9uKGdyb3VwLCBvcHRpb25zLCBwcmV2KSB7XG4gICAgICAgIC8vIEJ1aWxkIHRoZSBpbm5lciBleHByZXNzaW9uXG4gICAgICAgIHZhciBpbm5lciA9IGJ1aWxkRXhwcmVzc2lvbihncm91cC52YWx1ZS5ib2R5LCBvcHRpb25zLnJlc2V0KCkpO1xuXG4gICAgICAgIHZhciBpbm5lckhlaWdodCA9IDA7XG4gICAgICAgIHZhciBpbm5lckRlcHRoID0gMDtcblxuICAgICAgICAvLyBDYWxjdWxhdGUgaXRzIGhlaWdodCBhbmQgZGVwdGhcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbm5lci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaW5uZXJIZWlnaHQgPSBNYXRoLm1heChpbm5lcltpXS5oZWlnaHQsIGlubmVySGVpZ2h0KTtcbiAgICAgICAgICAgIGlubmVyRGVwdGggPSBNYXRoLm1heChpbm5lcltpXS5kZXB0aCwgaW5uZXJEZXB0aCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgc2l6ZSBvZiBkZWxpbWl0ZXJzIGlzIHRoZSBzYW1lLCByZWdhcmRsZXNzIG9mIHdoYXQgc3R5bGUgd2UgYXJlXG4gICAgICAgIC8vIGluLiBUaHVzLCB0byBjb3JyZWN0bHkgY2FsY3VsYXRlIHRoZSBzaXplIG9mIGRlbGltaXRlciB3ZSBuZWVkIGFyb3VuZFxuICAgICAgICAvLyBhIGdyb3VwLCB3ZSBzY2FsZSBkb3duIHRoZSBpbm5lciBzaXplIGJhc2VkIG9uIHRoZSBzaXplLlxuICAgICAgICBpbm5lckhlaWdodCAqPSBvcHRpb25zLnN0eWxlLnNpemVNdWx0aXBsaWVyO1xuICAgICAgICBpbm5lckRlcHRoICo9IG9wdGlvbnMuc3R5bGUuc2l6ZU11bHRpcGxpZXI7XG5cbiAgICAgICAgdmFyIGxlZnREZWxpbTtcbiAgICAgICAgaWYgKGdyb3VwLnZhbHVlLmxlZnQgPT09IFwiLlwiKSB7XG4gICAgICAgICAgICAvLyBFbXB0eSBkZWxpbWl0ZXJzIGluIFxcbGVmdCBhbmQgXFxyaWdodCBtYWtlIG51bGwgZGVsaW1pdGVyIHNwYWNlcy5cbiAgICAgICAgICAgIGxlZnREZWxpbSA9IG1ha2VTcGFuKFtcIm51bGxkZWxpbWl0ZXJcIl0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCB1c2UgbGVmdFJpZ2h0RGVsaW0gdG8gZ2VuZXJhdGUgdGhlIGNvcnJlY3Qgc2l6ZWRcbiAgICAgICAgICAgIC8vIGRlbGltaXRlci5cbiAgICAgICAgICAgIGxlZnREZWxpbSA9IGRlbGltaXRlci5sZWZ0UmlnaHREZWxpbShcbiAgICAgICAgICAgICAgICBncm91cC52YWx1ZS5sZWZ0LCBpbm5lckhlaWdodCwgaW5uZXJEZXB0aCwgb3B0aW9ucyxcbiAgICAgICAgICAgICAgICBncm91cC5tb2RlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBZGQgaXQgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGUgZXhwcmVzc2lvblxuICAgICAgICBpbm5lci51bnNoaWZ0KGxlZnREZWxpbSk7XG5cbiAgICAgICAgdmFyIHJpZ2h0RGVsaW07XG4gICAgICAgIC8vIFNhbWUgZm9yIHRoZSByaWdodCBkZWxpbWl0ZXJcbiAgICAgICAgaWYgKGdyb3VwLnZhbHVlLnJpZ2h0ID09PSBcIi5cIikge1xuICAgICAgICAgICAgcmlnaHREZWxpbSA9IG1ha2VTcGFuKFtcIm51bGxkZWxpbWl0ZXJcIl0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmlnaHREZWxpbSA9IGRlbGltaXRlci5sZWZ0UmlnaHREZWxpbShcbiAgICAgICAgICAgICAgICBncm91cC52YWx1ZS5yaWdodCwgaW5uZXJIZWlnaHQsIGlubmVyRGVwdGgsIG9wdGlvbnMsXG4gICAgICAgICAgICAgICAgZ3JvdXAubW9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWRkIGl0IHRvIHRoZSBlbmQgb2YgdGhlIGV4cHJlc3Npb24uXG4gICAgICAgIGlubmVyLnB1c2gocmlnaHREZWxpbSk7XG5cbiAgICAgICAgcmV0dXJuIG1ha2VTcGFuKFxuICAgICAgICAgICAgW1wibWlubmVyXCIsIG9wdGlvbnMuc3R5bGUuY2xzKCldLCBpbm5lciwgb3B0aW9ucy5nZXRDb2xvcigpKTtcbiAgICB9LFxuXG4gICAgcnVsZTogZnVuY3Rpb24oZ3JvdXAsIG9wdGlvbnMsIHByZXYpIHtcbiAgICAgICAgLy8gTWFrZSBhbiBlbXB0eSBzcGFuIGZvciB0aGUgcnVsZVxuICAgICAgICB2YXIgcnVsZSA9IG1ha2VTcGFuKFtcIm1vcmRcIiwgXCJydWxlXCJdLCBbXSwgb3B0aW9ucy5nZXRDb2xvcigpKTtcblxuICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIHNoaWZ0LCB3aWR0aCwgYW5kIGhlaWdodCBvZiB0aGUgcnVsZSwgYW5kIGFjY291bnQgZm9yIHVuaXRzXG4gICAgICAgIHZhciBzaGlmdCA9IDA7XG4gICAgICAgIGlmIChncm91cC52YWx1ZS5zaGlmdCkge1xuICAgICAgICAgICAgc2hpZnQgPSBncm91cC52YWx1ZS5zaGlmdC5udW1iZXI7XG4gICAgICAgICAgICBpZiAoZ3JvdXAudmFsdWUuc2hpZnQudW5pdCA9PT0gXCJleFwiKSB7XG4gICAgICAgICAgICAgICAgc2hpZnQgKj0gZm9udE1ldHJpY3MubWV0cmljcy54SGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHdpZHRoID0gZ3JvdXAudmFsdWUud2lkdGgubnVtYmVyO1xuICAgICAgICBpZiAoZ3JvdXAudmFsdWUud2lkdGgudW5pdCA9PT0gXCJleFwiKSB7XG4gICAgICAgICAgICB3aWR0aCAqPSBmb250TWV0cmljcy5tZXRyaWNzLnhIZWlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaGVpZ2h0ID0gZ3JvdXAudmFsdWUuaGVpZ2h0Lm51bWJlcjtcbiAgICAgICAgaWYgKGdyb3VwLnZhbHVlLmhlaWdodC51bml0ID09PSBcImV4XCIpIHtcbiAgICAgICAgICAgIGhlaWdodCAqPSBmb250TWV0cmljcy5tZXRyaWNzLnhIZWlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgc2l6ZXMgb2YgcnVsZXMgYXJlIGFic29sdXRlLCBzbyBtYWtlIGl0IGxhcmdlciBpZiB3ZSBhcmUgaW4gYVxuICAgICAgICAvLyBzbWFsbGVyIHN0eWxlLlxuICAgICAgICBzaGlmdCAvPSBvcHRpb25zLnN0eWxlLnNpemVNdWx0aXBsaWVyO1xuICAgICAgICB3aWR0aCAvPSBvcHRpb25zLnN0eWxlLnNpemVNdWx0aXBsaWVyO1xuICAgICAgICBoZWlnaHQgLz0gb3B0aW9ucy5zdHlsZS5zaXplTXVsdGlwbGllcjtcblxuICAgICAgICAvLyBTdHlsZSB0aGUgcnVsZSB0byB0aGUgcmlnaHQgc2l6ZVxuICAgICAgICBydWxlLnN0eWxlLmJvcmRlclJpZ2h0V2lkdGggPSB3aWR0aCArIFwiZW1cIjtcbiAgICAgICAgcnVsZS5zdHlsZS5ib3JkZXJUb3BXaWR0aCA9IGhlaWdodCArIFwiZW1cIjtcbiAgICAgICAgcnVsZS5zdHlsZS5ib3R0b20gPSBzaGlmdCArIFwiZW1cIjtcblxuICAgICAgICAvLyBSZWNvcmQgdGhlIGhlaWdodCBhbmQgd2lkdGhcbiAgICAgICAgcnVsZS53aWR0aCA9IHdpZHRoO1xuICAgICAgICBydWxlLmhlaWdodCA9IGhlaWdodCArIHNoaWZ0O1xuICAgICAgICBydWxlLmRlcHRoID0gLXNoaWZ0O1xuXG4gICAgICAgIHJldHVybiBydWxlO1xuICAgIH0sXG5cbiAgICBhY2NlbnQ6IGZ1bmN0aW9uKGdyb3VwLCBvcHRpb25zLCBwcmV2KSB7XG4gICAgICAgIC8vIEFjY2VudHMgYXJlIGhhbmRsZWQgaW4gdGhlIFRlWGJvb2sgcGcuIDQ0MywgcnVsZSAxMi5cbiAgICAgICAgdmFyIGJhc2UgPSBncm91cC52YWx1ZS5iYXNlO1xuXG4gICAgICAgIHZhciBzdXBzdWJHcm91cDtcbiAgICAgICAgaWYgKGdyb3VwLnR5cGUgPT09IFwic3Vwc3ViXCIpIHtcbiAgICAgICAgICAgIC8vIElmIG91ciBiYXNlIGlzIGEgY2hhcmFjdGVyIGJveCwgYW5kIHdlIGhhdmUgc3VwZXJzY3JpcHRzIGFuZFxuICAgICAgICAgICAgLy8gc3Vic2NyaXB0cywgdGhlIHN1cHN1YiB3aWxsIGRlZmVyIHRvIHVzLiBJbiBwYXJ0aWN1bGFyLCB3ZSB3YW50XG4gICAgICAgICAgICAvLyB0byBhdHRhY2ggdGhlIHN1cGVyc2NyaXB0cyBhbmQgc3Vic2NyaXB0cyB0byB0aGUgaW5uZXIgYm9keSAoc29cbiAgICAgICAgICAgIC8vIHRoYXQgdGhlIHBvc2l0aW9uIG9mIHRoZSBzdXBlcnNjcmlwdHMgYW5kIHN1YnNjcmlwdHMgd29uJ3QgYmVcbiAgICAgICAgICAgIC8vIGFmZmVjdGVkIGJ5IHRoZSBoZWlnaHQgb2YgdGhlIGFjY2VudCkuIFdlIGFjY29tcGxpc2ggdGhpcyBieVxuICAgICAgICAgICAgLy8gc3RpY2tpbmcgdGhlIGJhc2Ugb2YgdGhlIGFjY2VudCBpbnRvIHRoZSBiYXNlIG9mIHRoZSBzdXBzdWIsIGFuZFxuICAgICAgICAgICAgLy8gcmVuZGVyaW5nIHRoYXQsIHdoaWxlIGtlZXBpbmcgdHJhY2sgb2Ygd2hlcmUgdGhlIGFjY2VudCBpcy5cblxuICAgICAgICAgICAgLy8gVGhlIHN1cHN1YiBncm91cCBpcyB0aGUgZ3JvdXAgdGhhdCB3YXMgcGFzc2VkIGluXG4gICAgICAgICAgICB2YXIgc3Vwc3ViID0gZ3JvdXA7XG4gICAgICAgICAgICAvLyBUaGUgcmVhbCBhY2NlbnQgZ3JvdXAgaXMgdGhlIGJhc2Ugb2YgdGhlIHN1cHN1YiBncm91cFxuICAgICAgICAgICAgZ3JvdXAgPSBzdXBzdWIudmFsdWUuYmFzZTtcbiAgICAgICAgICAgIC8vIFRoZSBjaGFyYWN0ZXIgYm94IGlzIHRoZSBiYXNlIG9mIHRoZSBhY2NlbnQgZ3JvdXBcbiAgICAgICAgICAgIGJhc2UgPSBncm91cC52YWx1ZS5iYXNlO1xuICAgICAgICAgICAgLy8gU3RpY2sgdGhlIGNoYXJhY3RlciBib3ggaW50byB0aGUgYmFzZSBvZiB0aGUgc3Vwc3ViIGdyb3VwXG4gICAgICAgICAgICBzdXBzdWIudmFsdWUuYmFzZSA9IGJhc2U7XG5cbiAgICAgICAgICAgIC8vIFJlcmVuZGVyIHRoZSBzdXBzdWIgZ3JvdXAgd2l0aCBpdHMgbmV3IGJhc2UsIGFuZCBzdG9yZSB0aGF0XG4gICAgICAgICAgICAvLyByZXN1bHQuXG4gICAgICAgICAgICBzdXBzdWJHcm91cCA9IGJ1aWxkR3JvdXAoXG4gICAgICAgICAgICAgICAgc3Vwc3ViLCBvcHRpb25zLnJlc2V0KCksIHByZXYpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQnVpbGQgdGhlIGJhc2UgZ3JvdXBcbiAgICAgICAgdmFyIGJvZHkgPSBidWlsZEdyb3VwKFxuICAgICAgICAgICAgYmFzZSwgb3B0aW9ucy53aXRoU3R5bGUob3B0aW9ucy5zdHlsZS5jcmFtcCgpKSk7XG5cbiAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBza2V3IG9mIHRoZSBhY2NlbnQuIFRoaXMgaXMgYmFzZWQgb24gdGhlIGxpbmUgXCJJZiB0aGVcbiAgICAgICAgLy8gbnVjbGV1cyBpcyBub3QgYSBzaW5nbGUgY2hhcmFjdGVyLCBsZXQgcyA9IDA7IG90aGVyd2lzZSBzZXQgcyB0byB0aGVcbiAgICAgICAgLy8ga2VybiBhbW91bnQgZm9yIHRoZSBudWNsZXVzIGZvbGxvd2VkIGJ5IHRoZSBcXHNrZXdjaGFyIG9mIGl0cyBmb250LlwiXG4gICAgICAgIC8vIE5vdGUgdGhhdCBvdXIgc2tldyBtZXRyaWNzIGFyZSBqdXN0IHRoZSBrZXJuIGJldHdlZW4gZWFjaCBjaGFyYWN0ZXJcbiAgICAgICAgLy8gYW5kIHRoZSBza2V3Y2hhci5cbiAgICAgICAgdmFyIHNrZXc7XG4gICAgICAgIGlmIChpc0NoYXJhY3RlckJveChiYXNlKSkge1xuICAgICAgICAgICAgLy8gSWYgdGhlIGJhc2UgaXMgYSBjaGFyYWN0ZXIgYm94LCB0aGVuIHdlIHdhbnQgdGhlIHNrZXcgb2YgdGhlXG4gICAgICAgICAgICAvLyBpbm5lcm1vc3QgY2hhcmFjdGVyLiBUbyBkbyB0aGF0LCB3ZSBmaW5kIHRoZSBpbm5lcm1vc3QgY2hhcmFjdGVyOlxuICAgICAgICAgICAgdmFyIGJhc2VDaGFyID0gZ2V0QmFzZUVsZW0oYmFzZSk7XG4gICAgICAgICAgICAvLyBUaGVuLCB3ZSByZW5kZXIgaXRzIGdyb3VwIHRvIGdldCB0aGUgc3ltYm9sIGluc2lkZSBpdFxuICAgICAgICAgICAgdmFyIGJhc2VHcm91cCA9IGJ1aWxkR3JvdXAoXG4gICAgICAgICAgICAgICAgYmFzZUNoYXIsIG9wdGlvbnMud2l0aFN0eWxlKG9wdGlvbnMuc3R5bGUuY3JhbXAoKSkpO1xuICAgICAgICAgICAgLy8gRmluYWxseSwgd2UgcHVsbCB0aGUgc2tldyBvZmYgb2YgdGhlIHN5bWJvbC5cbiAgICAgICAgICAgIHNrZXcgPSBiYXNlR3JvdXAuc2tldztcbiAgICAgICAgICAgIC8vIE5vdGUgdGhhdCB3ZSBub3cgdGhyb3cgYXdheSBiYXNlR3JvdXAsIGJlY2F1c2UgdGhlIGxheWVycyB3ZVxuICAgICAgICAgICAgLy8gcmVtb3ZlZCB3aXRoIGdldEJhc2VFbGVtIG1pZ2h0IGNvbnRhaW4gdGhpbmdzIGxpa2UgXFxjb2xvciB3aGljaFxuICAgICAgICAgICAgLy8gd2UgY2FuJ3QgZ2V0IHJpZCBvZi5cbiAgICAgICAgICAgIC8vIFRPRE8oZW1pbHkpOiBGaW5kIGEgYmV0dGVyIHdheSB0byBnZXQgdGhlIHNrZXdcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNrZXcgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2FsY3VsYXRlIHRoZSBhbW91bnQgb2Ygc3BhY2UgYmV0d2VlbiB0aGUgYm9keSBhbmQgdGhlIGFjY2VudFxuICAgICAgICB2YXIgY2xlYXJhbmNlID0gTWF0aC5taW4oYm9keS5oZWlnaHQsIGZvbnRNZXRyaWNzLm1ldHJpY3MueEhlaWdodCk7XG5cbiAgICAgICAgLy8gQnVpbGQgdGhlIGFjY2VudFxuICAgICAgICB2YXIgYWNjZW50ID0gYnVpbGRDb21tb24ubWFrZVN5bWJvbChcbiAgICAgICAgICAgIGdyb3VwLnZhbHVlLmFjY2VudCwgXCJNYWluLVJlZ3VsYXJcIiwgXCJtYXRoXCIsIG9wdGlvbnMuZ2V0Q29sb3IoKSk7XG4gICAgICAgIC8vIFJlbW92ZSB0aGUgaXRhbGljIGNvcnJlY3Rpb24gb2YgdGhlIGFjY2VudCwgYmVjYXVzZSBpdCBvbmx5IHNlcnZlcyB0b1xuICAgICAgICAvLyBzaGlmdCB0aGUgYWNjZW50IG92ZXIgdG8gYSBwbGFjZSB3ZSBkb24ndCB3YW50LlxuICAgICAgICBhY2NlbnQuaXRhbGljID0gMDtcblxuICAgICAgICAvLyBUaGUgXFx2ZWMgY2hhcmFjdGVyIHRoYXQgdGhlIGZvbnRzIHVzZSBpcyBhIGNvbWJpbmluZyBjaGFyYWN0ZXIsIGFuZFxuICAgICAgICAvLyB0aHVzIHNob3dzIHVwIG11Y2ggdG9vIGZhciB0byB0aGUgbGVmdC4gVG8gYWNjb3VudCBmb3IgdGhpcywgd2UgYWRkIGFcbiAgICAgICAgLy8gc3BlY2lmaWMgY2xhc3Mgd2hpY2ggc2hpZnRzIHRoZSBhY2NlbnQgb3ZlciB0byB3aGVyZSB3ZSB3YW50IGl0LlxuICAgICAgICAvLyBUT0RPKGVtaWx5KTogRml4IHRoaXMgaW4gYSBiZXR0ZXIgd2F5LCBsaWtlIGJ5IGNoYW5naW5nIHRoZSBmb250XG4gICAgICAgIHZhciB2ZWNDbGFzcyA9IGdyb3VwLnZhbHVlLmFjY2VudCA9PT0gXCJcXFxcdmVjXCIgPyBcImFjY2VudC12ZWNcIiA6IG51bGw7XG5cbiAgICAgICAgdmFyIGFjY2VudEJvZHkgPSBtYWtlU3BhbihbXCJhY2NlbnQtYm9keVwiLCB2ZWNDbGFzc10sIFtcbiAgICAgICAgICAgIG1ha2VTcGFuKFtdLCBbYWNjZW50XSldKTtcblxuICAgICAgICBhY2NlbnRCb2R5ID0gYnVpbGRDb21tb24ubWFrZVZMaXN0KFtcbiAgICAgICAgICAgIHt0eXBlOiBcImVsZW1cIiwgZWxlbTogYm9keX0sXG4gICAgICAgICAgICB7dHlwZTogXCJrZXJuXCIsIHNpemU6IC1jbGVhcmFuY2V9LFxuICAgICAgICAgICAge3R5cGU6IFwiZWxlbVwiLCBlbGVtOiBhY2NlbnRCb2R5fVxuICAgICAgICBdLCBcImZpcnN0QmFzZWxpbmVcIiwgbnVsbCwgb3B0aW9ucyk7XG5cbiAgICAgICAgLy8gU2hpZnQgdGhlIGFjY2VudCBvdmVyIGJ5IHRoZSBza2V3LiBOb3RlIHdlIHNoaWZ0IGJ5IHR3aWNlIHRoZSBza2V3XG4gICAgICAgIC8vIGJlY2F1c2Ugd2UgYXJlIGNlbnRlcmluZyB0aGUgYWNjZW50LCBzbyBieSBhZGRpbmcgMipza2V3IHRvIHRoZSBsZWZ0LFxuICAgICAgICAvLyB3ZSBzaGlmdCBpdCB0byB0aGUgcmlnaHQgYnkgMSpza2V3LlxuICAgICAgICBhY2NlbnRCb2R5LmNoaWxkcmVuWzFdLnN0eWxlLm1hcmdpbkxlZnQgPSAyICogc2tldyArIFwiZW1cIjtcblxuICAgICAgICB2YXIgYWNjZW50V3JhcCA9IG1ha2VTcGFuKFtcIm1vcmRcIiwgXCJhY2NlbnRcIl0sIFthY2NlbnRCb2R5XSk7XG5cbiAgICAgICAgaWYgKHN1cHN1Ykdyb3VwKSB7XG4gICAgICAgICAgICAvLyBIZXJlLCB3ZSByZXBsYWNlIHRoZSBcImJhc2VcIiBjaGlsZCBvZiB0aGUgc3Vwc3ViIHdpdGggb3VyIG5ld2x5XG4gICAgICAgICAgICAvLyBnZW5lcmF0ZWQgYWNjZW50LlxuICAgICAgICAgICAgc3Vwc3ViR3JvdXAuY2hpbGRyZW5bMF0gPSBhY2NlbnRXcmFwO1xuXG4gICAgICAgICAgICAvLyBTaW5jZSB3ZSBkb24ndCByZXJ1biB0aGUgaGVpZ2h0IGNhbGN1bGF0aW9uIGFmdGVyIHJlcGxhY2luZyB0aGVcbiAgICAgICAgICAgIC8vIGFjY2VudCwgd2UgbWFudWFsbHkgcmVjYWxjdWxhdGUgaGVpZ2h0LlxuICAgICAgICAgICAgc3Vwc3ViR3JvdXAuaGVpZ2h0ID0gTWF0aC5tYXgoYWNjZW50V3JhcC5oZWlnaHQsIHN1cHN1Ykdyb3VwLmhlaWdodCk7XG5cbiAgICAgICAgICAgIC8vIEFjY2VudHMgc2hvdWxkIGFsd2F5cyBiZSBvcmRzLCBldmVuIHdoZW4gdGhlaXIgaW5uYXJkcyBhcmUgbm90LlxuICAgICAgICAgICAgc3Vwc3ViR3JvdXAuY2xhc3Nlc1swXSA9IFwibW9yZFwiO1xuXG4gICAgICAgICAgICByZXR1cm4gc3Vwc3ViR3JvdXA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYWNjZW50V3JhcDtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbnZhciBzaXppbmdNdWx0aXBsaWVyID0ge1xuICAgIHNpemUxOiAwLjUsXG4gICAgc2l6ZTI6IDAuNyxcbiAgICBzaXplMzogMC44LFxuICAgIHNpemU0OiAwLjksXG4gICAgc2l6ZTU6IDEuMCxcbiAgICBzaXplNjogMS4yLFxuICAgIHNpemU3OiAxLjQ0LFxuICAgIHNpemU4OiAxLjczLFxuICAgIHNpemU5OiAyLjA3LFxuICAgIHNpemUxMDogMi40OVxufTtcblxuLyoqXG4gKiBidWlsZEdyb3VwIGlzIHRoZSBmdW5jdGlvbiB0aGF0IHRha2VzIGEgZ3JvdXAgYW5kIGNhbGxzIHRoZSBjb3JyZWN0IGdyb3VwVHlwZVxuICogZnVuY3Rpb24gZm9yIGl0LiBJdCBhbHNvIGhhbmRsZXMgdGhlIGludGVyYWN0aW9uIG9mIHNpemUgYW5kIHN0eWxlIGNoYW5nZXNcbiAqIGJldHdlZW4gcGFyZW50cyBhbmQgY2hpbGRyZW4uXG4gKi9cbnZhciBidWlsZEdyb3VwID0gZnVuY3Rpb24oZ3JvdXAsIG9wdGlvbnMsIHByZXYpIHtcbiAgICBpZiAoIWdyb3VwKSB7XG4gICAgICAgIHJldHVybiBtYWtlU3BhbigpO1xuICAgIH1cblxuICAgIGlmIChncm91cFR5cGVzW2dyb3VwLnR5cGVdKSB7XG4gICAgICAgIC8vIENhbGwgdGhlIGdyb3VwVHlwZXMgZnVuY3Rpb25cbiAgICAgICAgdmFyIGdyb3VwTm9kZSA9IGdyb3VwVHlwZXNbZ3JvdXAudHlwZV0oZ3JvdXAsIG9wdGlvbnMsIHByZXYpO1xuICAgICAgICB2YXIgbXVsdGlwbGllcjtcblxuICAgICAgICAvLyBJZiB0aGUgc3R5bGUgY2hhbmdlZCBiZXR3ZWVuIHRoZSBwYXJlbnQgYW5kIHRoZSBjdXJyZW50IGdyb3VwLFxuICAgICAgICAvLyBhY2NvdW50IGZvciB0aGUgc2l6ZSBkaWZmZXJlbmNlXG4gICAgICAgIGlmIChvcHRpb25zLnN0eWxlICE9PSBvcHRpb25zLnBhcmVudFN0eWxlKSB7XG4gICAgICAgICAgICBtdWx0aXBsaWVyID0gb3B0aW9ucy5zdHlsZS5zaXplTXVsdGlwbGllciAvXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMucGFyZW50U3R5bGUuc2l6ZU11bHRpcGxpZXI7XG5cbiAgICAgICAgICAgIGdyb3VwTm9kZS5oZWlnaHQgKj0gbXVsdGlwbGllcjtcbiAgICAgICAgICAgIGdyb3VwTm9kZS5kZXB0aCAqPSBtdWx0aXBsaWVyO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgdGhlIHNpemUgY2hhbmdlZCBiZXR3ZWVuIHRoZSBwYXJlbnQgYW5kIHRoZSBjdXJyZW50IGdyb3VwLCBhY2NvdW50XG4gICAgICAgIC8vIGZvciB0aGF0IHNpemUgZGlmZmVyZW5jZS5cbiAgICAgICAgaWYgKG9wdGlvbnMuc2l6ZSAhPT0gb3B0aW9ucy5wYXJlbnRTaXplKSB7XG4gICAgICAgICAgICBtdWx0aXBsaWVyID0gc2l6aW5nTXVsdGlwbGllcltvcHRpb25zLnNpemVdIC9cbiAgICAgICAgICAgICAgICAgICAgc2l6aW5nTXVsdGlwbGllcltvcHRpb25zLnBhcmVudFNpemVdO1xuXG4gICAgICAgICAgICBncm91cE5vZGUuaGVpZ2h0ICo9IG11bHRpcGxpZXI7XG4gICAgICAgICAgICBncm91cE5vZGUuZGVwdGggKj0gbXVsdGlwbGllcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBncm91cE5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IFBhcnNlRXJyb3IoXG4gICAgICAgICAgICBcIkdvdCBncm91cCBvZiB1bmtub3duIHR5cGU6ICdcIiArIGdyb3VwLnR5cGUgKyBcIidcIik7XG4gICAgfVxufTtcblxuLyoqXG4gKiBUYWtlIGFuIGVudGlyZSBwYXJzZSB0cmVlLCBhbmQgYnVpbGQgaXQgaW50byBhbiBhcHByb3ByaWF0ZSBzZXQgb2Ygbm9kZXMuXG4gKi9cbnZhciBidWlsZFRyZWUgPSBmdW5jdGlvbih0cmVlKSB7XG4gICAgLy8gU2V0dXAgdGhlIGRlZmF1bHQgb3B0aW9uc1xuICAgIHZhciBvcHRpb25zID0gbmV3IE9wdGlvbnMoU3R5bGUuVEVYVCwgXCJzaXplNVwiLCBcIlwiKTtcblxuICAgIC8vIEJ1aWxkIHRoZSBleHByZXNzaW9uIGNvbnRhaW5lZCBpbiB0aGUgdHJlZVxuICAgIHZhciBleHByZXNzaW9uID0gYnVpbGRFeHByZXNzaW9uKHRyZWUsIG9wdGlvbnMpO1xuICAgIHZhciBib2R5ID0gbWFrZVNwYW4oW1wiYmFzZVwiLCBvcHRpb25zLnN0eWxlLmNscygpXSwgZXhwcmVzc2lvbik7XG5cbiAgICAvLyBBZGQgc3RydXRzLCB3aGljaCBlbnN1cmUgdGhhdCB0aGUgdG9wIG9mIHRoZSBIVE1MIGVsZW1lbnQgZmFsbHMgYXQgdGhlXG4gICAgLy8gaGVpZ2h0IG9mIHRoZSBleHByZXNzaW9uLCBhbmQgdGhlIGJvdHRvbSBvZiB0aGUgSFRNTCBlbGVtZW50IGZhbGxzIGF0IHRoZVxuICAgIC8vIGRlcHRoIG9mIHRoZSBleHByZXNzaW9uLlxuICAgIHZhciB0b3BTdHJ1dCA9IG1ha2VTcGFuKFtcInN0cnV0XCJdKTtcbiAgICB2YXIgYm90dG9tU3RydXQgPSBtYWtlU3BhbihbXCJzdHJ1dFwiLCBcImJvdHRvbVwiXSk7XG5cbiAgICB0b3BTdHJ1dC5zdHlsZS5oZWlnaHQgPSBib2R5LmhlaWdodCArIFwiZW1cIjtcbiAgICBib3R0b21TdHJ1dC5zdHlsZS5oZWlnaHQgPSAoYm9keS5oZWlnaHQgKyBib2R5LmRlcHRoKSArIFwiZW1cIjtcbiAgICAvLyBXZSdkIGxpa2UgdG8gdXNlIGB2ZXJ0aWNhbC1hbGlnbjogdG9wYCBidXQgaW4gSUUgOSB0aGlzIGxvd2VycyB0aGVcbiAgICAvLyBiYXNlbGluZSBvZiB0aGUgYm94IHRvIHRoZSBib3R0b20gb2YgdGhpcyBzdHJ1dCAoaW5zdGVhZCBzdGF5aW5nIGluIHRoZVxuICAgIC8vIG5vcm1hbCBwbGFjZSkgc28gd2UgdXNlIGFuIGFic29sdXRlIHZhbHVlIGZvciB2ZXJ0aWNhbC1hbGlnbiBpbnN0ZWFkXG4gICAgYm90dG9tU3RydXQuc3R5bGUudmVydGljYWxBbGlnbiA9IC1ib2R5LmRlcHRoICsgXCJlbVwiO1xuXG4gICAgLy8gV3JhcCB0aGUgc3RydXRzIGFuZCBib2R5IHRvZ2V0aGVyXG4gICAgdmFyIGthdGV4Tm9kZSA9IG1ha2VTcGFuKFtcImthdGV4XCJdLCBbXG4gICAgICAgIG1ha2VTcGFuKFtcImthdGV4LWlubmVyXCJdLCBbdG9wU3RydXQsIGJvdHRvbVN0cnV0LCBib2R5XSlcbiAgICBdKTtcblxuICAgIHJldHVybiBrYXRleE5vZGU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJ1aWxkVHJlZTtcbiIsIi8qKlxuICogVGhpcyBmaWxlIGRlYWxzIHdpdGggY3JlYXRpbmcgZGVsaW1pdGVycyBvZiB2YXJpb3VzIHNpemVzLiBUaGUgVGVYYm9va1xuICogZGlzY3Vzc2VzIHRoZXNlIHJvdXRpbmVzIG9uIHBhZ2UgNDQxLTQ0MiwgaW4gdGhlIFwiQW5vdGhlciBzdWJyb3V0aW5lIHNldHMgYm94XG4gKiB4IHRvIGEgc3BlY2lmaWVkIHZhcmlhYmxlIGRlbGltaXRlclwiIHBhcmFncmFwaC5cbiAqXG4gKiBUaGVyZSBhcmUgdGhyZWUgbWFpbiByb3V0aW5lcyBoZXJlLiBgbWFrZVNtYWxsRGVsaW1gIG1ha2VzIGEgZGVsaW1pdGVyIGluIHRoZVxuICogbm9ybWFsIGZvbnQsIGJ1dCBpbiBlaXRoZXIgdGV4dCwgc2NyaXB0LCBvciBzY3JpcHRzY3JpcHQgc3R5bGUuXG4gKiBgbWFrZUxhcmdlRGVsaW1gIG1ha2VzIGEgZGVsaW1pdGVyIGluIHRleHRzdHlsZSwgYnV0IGluIG9uZSBvZiB0aGUgU2l6ZTEsXG4gKiBTaXplMiwgU2l6ZTMsIG9yIFNpemU0IGZvbnRzLiBgbWFrZVN0YWNrZWREZWxpbWAgbWFrZXMgYSBkZWxpbWl0ZXIgb3V0IG9mXG4gKiBzbWFsbGVyIHBpZWNlcyB0aGF0IGFyZSBzdGFja2VkIG9uIHRvcCBvZiBvbmUgYW5vdGhlci5cbiAqXG4gKiBUaGUgZnVuY3Rpb25zIHRha2UgYSBwYXJhbWV0ZXIgYGNlbnRlcmAsIHdoaWNoIGRldGVybWluZXMgaWYgdGhlIGRlbGltaXRlclxuICogc2hvdWxkIGJlIGNlbnRlcmVkIGFyb3VuZCB0aGUgYXhpcy5cbiAqXG4gKiBUaGVuLCB0aGVyZSBhcmUgdGhyZWUgZXhwb3NlZCBmdW5jdGlvbnMuIGBzaXplZERlbGltYCBtYWtlcyBhIGRlbGltaXRlciBpblxuICogb25lIG9mIHRoZSBnaXZlbiBzaXplcy4gVGhpcyBpcyB1c2VkIGZvciB0aGluZ3MgbGlrZSBgXFxiaWdsYC5cbiAqIGBjdXN0b21TaXplZERlbGltYCBtYWtlcyBhIGRlbGltaXRlciB3aXRoIGEgZ2l2ZW4gdG90YWwgaGVpZ2h0K2RlcHRoLiBJdCBpc1xuICogY2FsbGVkIGluIHBsYWNlcyBsaWtlIGBcXHNxcnRgLiBgbGVmdFJpZ2h0RGVsaW1gIG1ha2VzIGFuIGFwcHJvcHJpYXRlXG4gKiBkZWxpbWl0ZXIgd2hpY2ggc3Vycm91bmRzIGFuIGV4cHJlc3Npb24gb2YgYSBnaXZlbiBoZWlnaHQgYW4gZGVwdGguIEl0IGlzXG4gKiB1c2VkIGluIGBcXGxlZnRgIGFuZCBgXFxyaWdodGAuXG4gKi9cblxudmFyIFBhcnNlRXJyb3IgPSByZXF1aXJlKFwiLi9QYXJzZUVycm9yXCIpO1xudmFyIFN0eWxlID0gcmVxdWlyZShcIi4vU3R5bGVcIik7XG5cbnZhciBidWlsZENvbW1vbiA9IHJlcXVpcmUoXCIuL2J1aWxkQ29tbW9uXCIpO1xudmFyIGZvbnRNZXRyaWNzID0gcmVxdWlyZShcIi4vZm9udE1ldHJpY3NcIik7XG52YXIgc3ltYm9scyA9IHJlcXVpcmUoXCIuL3N5bWJvbHNcIik7XG52YXIgdXRpbHMgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcblxudmFyIG1ha2VTcGFuID0gYnVpbGRDb21tb24ubWFrZVNwYW47XG5cbi8qKlxuICogR2V0IHRoZSBtZXRyaWNzIGZvciBhIGdpdmVuIHN5bWJvbCBhbmQgZm9udCwgYWZ0ZXIgdHJhbnNmb3JtYXRpb24gKGkuZS5cbiAqIGFmdGVyIGZvbGxvd2luZyByZXBsYWNlbWVudCBmcm9tIHN5bWJvbHMuanMpXG4gKi9cbnZhciBnZXRNZXRyaWNzID0gZnVuY3Rpb24oc3ltYm9sLCBmb250KSB7XG4gICAgaWYgKHN5bWJvbHMubWF0aFtzeW1ib2xdICYmIHN5bWJvbHMubWF0aFtzeW1ib2xdLnJlcGxhY2UpIHtcbiAgICAgICAgcmV0dXJuIGZvbnRNZXRyaWNzLmdldENoYXJhY3Rlck1ldHJpY3MoXG4gICAgICAgICAgICBzeW1ib2xzLm1hdGhbc3ltYm9sXS5yZXBsYWNlLCBmb250KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZm9udE1ldHJpY3MuZ2V0Q2hhcmFjdGVyTWV0cmljcyhcbiAgICAgICAgICAgIHN5bWJvbCwgZm9udCk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBCdWlsZHMgYSBzeW1ib2wgaW4gdGhlIGdpdmVuIGZvbnQgc2l6ZSAobm90ZSBzaXplIGlzIGFuIGludGVnZXIpXG4gKi9cbnZhciBtYXRocm1TaXplID0gZnVuY3Rpb24odmFsdWUsIHNpemUsIG1vZGUpIHtcbiAgICByZXR1cm4gYnVpbGRDb21tb24ubWFrZVN5bWJvbCh2YWx1ZSwgXCJTaXplXCIgKyBzaXplICsgXCItUmVndWxhclwiLCBtb2RlKTtcbn07XG5cbi8qKlxuICogUHV0cyBhIGRlbGltaXRlciBzcGFuIGluIGEgZ2l2ZW4gc3R5bGUsIGFuZCBhZGRzIGFwcHJvcHJpYXRlIGhlaWdodCwgZGVwdGgsXG4gKiBhbmQgbWF4Rm9udFNpemVzLlxuICovXG52YXIgc3R5bGVXcmFwID0gZnVuY3Rpb24oZGVsaW0sIHRvU3R5bGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgc3BhbiA9IG1ha2VTcGFuKFxuICAgICAgICBbXCJzdHlsZS13cmFwXCIsIG9wdGlvbnMuc3R5bGUucmVzZXQoKSwgdG9TdHlsZS5jbHMoKV0sIFtkZWxpbV0pO1xuXG4gICAgdmFyIG11bHRpcGxpZXIgPSB0b1N0eWxlLnNpemVNdWx0aXBsaWVyIC8gb3B0aW9ucy5zdHlsZS5zaXplTXVsdGlwbGllcjtcblxuICAgIHNwYW4uaGVpZ2h0ICo9IG11bHRpcGxpZXI7XG4gICAgc3Bhbi5kZXB0aCAqPSBtdWx0aXBsaWVyO1xuICAgIHNwYW4ubWF4Rm9udFNpemUgPSB0b1N0eWxlLnNpemVNdWx0aXBsaWVyO1xuXG4gICAgcmV0dXJuIHNwYW47XG59O1xuXG4vKipcbiAqIE1ha2VzIGEgc21hbGwgZGVsaW1pdGVyLiBUaGlzIGlzIGEgZGVsaW1pdGVyIHRoYXQgY29tZXMgaW4gdGhlIE1haW4tUmVndWxhclxuICogZm9udCwgYnV0IGlzIHJlc3R5bGVkIHRvIGVpdGhlciBiZSBpbiB0ZXh0c3R5bGUsIHNjcmlwdHN0eWxlLCBvclxuICogc2NyaXB0c2NyaXB0c3R5bGUuXG4gKi9cbnZhciBtYWtlU21hbGxEZWxpbSA9IGZ1bmN0aW9uKGRlbGltLCBzdHlsZSwgY2VudGVyLCBvcHRpb25zLCBtb2RlKSB7XG4gICAgdmFyIHRleHQgPSBidWlsZENvbW1vbi5tYWtlU3ltYm9sKGRlbGltLCBcIk1haW4tUmVndWxhclwiLCBtb2RlKTtcblxuICAgIHZhciBzcGFuID0gc3R5bGVXcmFwKHRleHQsIHN0eWxlLCBvcHRpb25zKTtcblxuICAgIGlmIChjZW50ZXIpIHtcbiAgICAgICAgdmFyIHNoaWZ0ID1cbiAgICAgICAgICAgICgxIC0gb3B0aW9ucy5zdHlsZS5zaXplTXVsdGlwbGllciAvIHN0eWxlLnNpemVNdWx0aXBsaWVyKSAqXG4gICAgICAgICAgICBmb250TWV0cmljcy5tZXRyaWNzLmF4aXNIZWlnaHQ7XG5cbiAgICAgICAgc3Bhbi5zdHlsZS50b3AgPSBzaGlmdCArIFwiZW1cIjtcbiAgICAgICAgc3Bhbi5oZWlnaHQgLT0gc2hpZnQ7XG4gICAgICAgIHNwYW4uZGVwdGggKz0gc2hpZnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNwYW47XG59O1xuXG4vKipcbiAqIE1ha2VzIGEgbGFyZ2UgZGVsaW1pdGVyLiBUaGlzIGlzIGEgZGVsaW1pdGVyIHRoYXQgY29tZXMgaW4gdGhlIFNpemUxLCBTaXplMixcbiAqIFNpemUzLCBvciBTaXplNCBmb250cy4gSXQgaXMgYWx3YXlzIHJlbmRlcmVkIGluIHRleHRzdHlsZS5cbiAqL1xudmFyIG1ha2VMYXJnZURlbGltID0gZnVuY3Rpb24oZGVsaW0sIHNpemUsIGNlbnRlciwgb3B0aW9ucywgbW9kZSkge1xuICAgIHZhciBpbm5lciA9IG1hdGhybVNpemUoZGVsaW0sIHNpemUsIG1vZGUpO1xuXG4gICAgdmFyIHNwYW4gPSBzdHlsZVdyYXAoXG4gICAgICAgIG1ha2VTcGFuKFtcImRlbGltc2l6aW5nXCIsIFwic2l6ZVwiICsgc2l6ZV0sXG4gICAgICAgICAgICAgICAgIFtpbm5lcl0sIG9wdGlvbnMuZ2V0Q29sb3IoKSksXG4gICAgICAgIFN0eWxlLlRFWFQsIG9wdGlvbnMpO1xuXG4gICAgaWYgKGNlbnRlcikge1xuICAgICAgICB2YXIgc2hpZnQgPSAoMSAtIG9wdGlvbnMuc3R5bGUuc2l6ZU11bHRpcGxpZXIpICpcbiAgICAgICAgICAgIGZvbnRNZXRyaWNzLm1ldHJpY3MuYXhpc0hlaWdodDtcblxuICAgICAgICBzcGFuLnN0eWxlLnRvcCA9IHNoaWZ0ICsgXCJlbVwiO1xuICAgICAgICBzcGFuLmhlaWdodCAtPSBzaGlmdDtcbiAgICAgICAgc3Bhbi5kZXB0aCArPSBzaGlmdDtcbiAgICB9XG5cbiAgICByZXR1cm4gc3Bhbjtcbn07XG5cbi8qKlxuICogTWFrZSBhbiBpbm5lciBzcGFuIHdpdGggdGhlIGdpdmVuIG9mZnNldCBhbmQgaW4gdGhlIGdpdmVuIGZvbnQuIFRoaXMgaXMgdXNlZFxuICogaW4gYG1ha2VTdGFja2VkRGVsaW1gIHRvIG1ha2UgdGhlIHN0YWNraW5nIHBpZWNlcyBmb3IgdGhlIGRlbGltaXRlci5cbiAqL1xudmFyIG1ha2VJbm5lciA9IGZ1bmN0aW9uKHN5bWJvbCwgZm9udCwgbW9kZSkge1xuICAgIHZhciBzaXplQ2xhc3M7XG4gICAgLy8gQXBwbHkgdGhlIGNvcnJlY3QgQ1NTIGNsYXNzIHRvIGNob29zZSB0aGUgcmlnaHQgZm9udC5cbiAgICBpZiAoZm9udCA9PT0gXCJTaXplMS1SZWd1bGFyXCIpIHtcbiAgICAgICAgc2l6ZUNsYXNzID0gXCJkZWxpbS1zaXplMVwiO1xuICAgIH0gZWxzZSBpZiAoZm9udCA9PT0gXCJTaXplNC1SZWd1bGFyXCIpIHtcbiAgICAgICAgc2l6ZUNsYXNzID0gXCJkZWxpbS1zaXplNFwiO1xuICAgIH1cblxuICAgIHZhciBpbm5lciA9IG1ha2VTcGFuKFxuICAgICAgICBbXCJkZWxpbXNpemluZ2lubmVyXCIsIHNpemVDbGFzc10sXG4gICAgICAgIFttYWtlU3BhbihbXSwgW2J1aWxkQ29tbW9uLm1ha2VTeW1ib2woc3ltYm9sLCBmb250LCBtb2RlKV0pXSk7XG5cbiAgICAvLyBTaW5jZSB0aGlzIHdpbGwgYmUgcGFzc2VkIGludG8gYG1ha2VWTGlzdGAgaW4gdGhlIGVuZCwgd3JhcCB0aGUgZWxlbWVudFxuICAgIC8vIGluIHRoZSBhcHByb3ByaWF0ZSB0YWcgdGhhdCBWTGlzdCB1c2VzLlxuICAgIHJldHVybiB7dHlwZTogXCJlbGVtXCIsIGVsZW06IGlubmVyfTtcbn07XG5cbi8qKlxuICogTWFrZSBhIHN0YWNrZWQgZGVsaW1pdGVyIG91dCBvZiBhIGdpdmVuIGRlbGltaXRlciwgd2l0aCB0aGUgdG90YWwgaGVpZ2h0IGF0XG4gKiBsZWFzdCBgaGVpZ2h0VG90YWxgLiBUaGlzIHJvdXRpbmUgaXMgbWVudGlvbmVkIG9uIHBhZ2UgNDQyIG9mIHRoZSBUZVhib29rLlxuICovXG52YXIgbWFrZVN0YWNrZWREZWxpbSA9IGZ1bmN0aW9uKGRlbGltLCBoZWlnaHRUb3RhbCwgY2VudGVyLCBvcHRpb25zLCBtb2RlKSB7XG4gICAgLy8gVGhlcmUgYXJlIGZvdXIgcGFydHMsIHRoZSB0b3AsIGFuIG9wdGlvbmFsIG1pZGRsZSwgYSByZXBlYXRlZCBwYXJ0LCBhbmQgYVxuICAgIC8vIGJvdHRvbS5cbiAgICB2YXIgdG9wLCBtaWRkbGUsIHJlcGVhdCwgYm90dG9tO1xuICAgIHRvcCA9IHJlcGVhdCA9IGJvdHRvbSA9IGRlbGltO1xuICAgIG1pZGRsZSA9IG51bGw7XG4gICAgLy8gQWxzbyBrZWVwIHRyYWNrIG9mIHdoYXQgZm9udCB0aGUgZGVsaW1pdGVycyBhcmUgaW5cbiAgICB2YXIgZm9udCA9IFwiU2l6ZTEtUmVndWxhclwiO1xuXG4gICAgLy8gV2Ugc2V0IHRoZSBwYXJ0cyBhbmQgZm9udCBiYXNlZCBvbiB0aGUgc3ltYm9sLiBOb3RlIHRoYXQgd2UgdXNlXG4gICAgLy8gJ1xcdTIzZDAnIGluc3RlYWQgb2YgJ3wnIGFuZCAnXFx1MjAxNicgaW5zdGVhZCBvZiAnXFxcXHwnIGZvciB0aGVcbiAgICAvLyByZXBlYXRzIG9mIHRoZSBhcnJvd3NcbiAgICBpZiAoZGVsaW0gPT09IFwiXFxcXHVwYXJyb3dcIikge1xuICAgICAgICByZXBlYXQgPSBib3R0b20gPSBcIlxcdTIzZDBcIjtcbiAgICB9IGVsc2UgaWYgKGRlbGltID09PSBcIlxcXFxVcGFycm93XCIpIHtcbiAgICAgICAgcmVwZWF0ID0gYm90dG9tID0gXCJcXHUyMDE2XCI7XG4gICAgfSBlbHNlIGlmIChkZWxpbSA9PT0gXCJcXFxcZG93bmFycm93XCIpIHtcbiAgICAgICAgdG9wID0gcmVwZWF0ID0gXCJcXHUyM2QwXCI7XG4gICAgfSBlbHNlIGlmIChkZWxpbSA9PT0gXCJcXFxcRG93bmFycm93XCIpIHtcbiAgICAgICAgdG9wID0gcmVwZWF0ID0gXCJcXHUyMDE2XCI7XG4gICAgfSBlbHNlIGlmIChkZWxpbSA9PT0gXCJcXFxcdXBkb3duYXJyb3dcIikge1xuICAgICAgICB0b3AgPSBcIlxcXFx1cGFycm93XCI7XG4gICAgICAgIHJlcGVhdCA9IFwiXFx1MjNkMFwiO1xuICAgICAgICBib3R0b20gPSBcIlxcXFxkb3duYXJyb3dcIjtcbiAgICB9IGVsc2UgaWYgKGRlbGltID09PSBcIlxcXFxVcGRvd25hcnJvd1wiKSB7XG4gICAgICAgIHRvcCA9IFwiXFxcXFVwYXJyb3dcIjtcbiAgICAgICAgcmVwZWF0ID0gXCJcXHUyMDE2XCI7XG4gICAgICAgIGJvdHRvbSA9IFwiXFxcXERvd25hcnJvd1wiO1xuICAgIH0gZWxzZSBpZiAoZGVsaW0gPT09IFwiW1wiIHx8IGRlbGltID09PSBcIlxcXFxsYnJhY2tcIikge1xuICAgICAgICB0b3AgPSBcIlxcdTIzYTFcIjtcbiAgICAgICAgcmVwZWF0ID0gXCJcXHUyM2EyXCI7XG4gICAgICAgIGJvdHRvbSA9IFwiXFx1MjNhM1wiO1xuICAgICAgICBmb250ID0gXCJTaXplNC1SZWd1bGFyXCI7XG4gICAgfSBlbHNlIGlmIChkZWxpbSA9PT0gXCJdXCIgfHwgZGVsaW0gPT09IFwiXFxcXHJicmFja1wiKSB7XG4gICAgICAgIHRvcCA9IFwiXFx1MjNhNFwiO1xuICAgICAgICByZXBlYXQgPSBcIlxcdTIzYTVcIjtcbiAgICAgICAgYm90dG9tID0gXCJcXHUyM2E2XCI7XG4gICAgICAgIGZvbnQgPSBcIlNpemU0LVJlZ3VsYXJcIjtcbiAgICB9IGVsc2UgaWYgKGRlbGltID09PSBcIlxcXFxsZmxvb3JcIikge1xuICAgICAgICByZXBlYXQgPSB0b3AgPSBcIlxcdTIzYTJcIjtcbiAgICAgICAgYm90dG9tID0gXCJcXHUyM2EzXCI7XG4gICAgICAgIGZvbnQgPSBcIlNpemU0LVJlZ3VsYXJcIjtcbiAgICB9IGVsc2UgaWYgKGRlbGltID09PSBcIlxcXFxsY2VpbFwiKSB7XG4gICAgICAgIHRvcCA9IFwiXFx1MjNhMVwiO1xuICAgICAgICByZXBlYXQgPSBib3R0b20gPSBcIlxcdTIzYTJcIjtcbiAgICAgICAgZm9udCA9IFwiU2l6ZTQtUmVndWxhclwiO1xuICAgIH0gZWxzZSBpZiAoZGVsaW0gPT09IFwiXFxcXHJmbG9vclwiKSB7XG4gICAgICAgIHJlcGVhdCA9IHRvcCA9IFwiXFx1MjNhNVwiO1xuICAgICAgICBib3R0b20gPSBcIlxcdTIzYTZcIjtcbiAgICAgICAgZm9udCA9IFwiU2l6ZTQtUmVndWxhclwiO1xuICAgIH0gZWxzZSBpZiAoZGVsaW0gPT09IFwiXFxcXHJjZWlsXCIpIHtcbiAgICAgICAgdG9wID0gXCJcXHUyM2E0XCI7XG4gICAgICAgIHJlcGVhdCA9IGJvdHRvbSA9IFwiXFx1MjNhNVwiO1xuICAgICAgICBmb250ID0gXCJTaXplNC1SZWd1bGFyXCI7XG4gICAgfSBlbHNlIGlmIChkZWxpbSA9PT0gXCIoXCIpIHtcbiAgICAgICAgdG9wID0gXCJcXHUyMzliXCI7XG4gICAgICAgIHJlcGVhdCA9IFwiXFx1MjM5Y1wiO1xuICAgICAgICBib3R0b20gPSBcIlxcdTIzOWRcIjtcbiAgICAgICAgZm9udCA9IFwiU2l6ZTQtUmVndWxhclwiO1xuICAgIH0gZWxzZSBpZiAoZGVsaW0gPT09IFwiKVwiKSB7XG4gICAgICAgIHRvcCA9IFwiXFx1MjM5ZVwiO1xuICAgICAgICByZXBlYXQgPSBcIlxcdTIzOWZcIjtcbiAgICAgICAgYm90dG9tID0gXCJcXHUyM2EwXCI7XG4gICAgICAgIGZvbnQgPSBcIlNpemU0LVJlZ3VsYXJcIjtcbiAgICB9IGVsc2UgaWYgKGRlbGltID09PSBcIlxcXFx7XCIgfHwgZGVsaW0gPT09IFwiXFxcXGxicmFjZVwiKSB7XG4gICAgICAgIHRvcCA9IFwiXFx1MjNhN1wiO1xuICAgICAgICBtaWRkbGUgPSBcIlxcdTIzYThcIjtcbiAgICAgICAgYm90dG9tID0gXCJcXHUyM2E5XCI7XG4gICAgICAgIHJlcGVhdCA9IFwiXFx1MjNhYVwiO1xuICAgICAgICBmb250ID0gXCJTaXplNC1SZWd1bGFyXCI7XG4gICAgfSBlbHNlIGlmIChkZWxpbSA9PT0gXCJcXFxcfVwiIHx8IGRlbGltID09PSBcIlxcXFxyYnJhY2VcIikge1xuICAgICAgICB0b3AgPSBcIlxcdTIzYWJcIjtcbiAgICAgICAgbWlkZGxlID0gXCJcXHUyM2FjXCI7XG4gICAgICAgIGJvdHRvbSA9IFwiXFx1MjNhZFwiO1xuICAgICAgICByZXBlYXQgPSBcIlxcdTIzYWFcIjtcbiAgICAgICAgZm9udCA9IFwiU2l6ZTQtUmVndWxhclwiO1xuICAgIH0gZWxzZSBpZiAoZGVsaW0gPT09IFwiXFxcXHN1cmRcIikge1xuICAgICAgICB0b3AgPSBcIlxcdWUwMDFcIjtcbiAgICAgICAgYm90dG9tID0gXCJcXHUyM2I3XCI7XG4gICAgICAgIHJlcGVhdCA9IFwiXFx1ZTAwMFwiO1xuICAgICAgICBmb250ID0gXCJTaXplNC1SZWd1bGFyXCI7XG4gICAgfVxuXG4gICAgLy8gR2V0IHRoZSBtZXRyaWNzIG9mIHRoZSBmb3VyIHNlY3Rpb25zXG4gICAgdmFyIHRvcE1ldHJpY3MgPSBnZXRNZXRyaWNzKHRvcCwgZm9udCk7XG4gICAgdmFyIHRvcEhlaWdodFRvdGFsID0gdG9wTWV0cmljcy5oZWlnaHQgKyB0b3BNZXRyaWNzLmRlcHRoO1xuICAgIHZhciByZXBlYXRNZXRyaWNzID0gZ2V0TWV0cmljcyhyZXBlYXQsIGZvbnQpO1xuICAgIHZhciByZXBlYXRIZWlnaHRUb3RhbCA9IHJlcGVhdE1ldHJpY3MuaGVpZ2h0ICsgcmVwZWF0TWV0cmljcy5kZXB0aDtcbiAgICB2YXIgYm90dG9tTWV0cmljcyA9IGdldE1ldHJpY3MoYm90dG9tLCBmb250KTtcbiAgICB2YXIgYm90dG9tSGVpZ2h0VG90YWwgPSBib3R0b21NZXRyaWNzLmhlaWdodCArIGJvdHRvbU1ldHJpY3MuZGVwdGg7XG4gICAgdmFyIG1pZGRsZU1ldHJpY3MsIG1pZGRsZUhlaWdodFRvdGFsO1xuICAgIGlmIChtaWRkbGUgIT09IG51bGwpIHtcbiAgICAgICAgbWlkZGxlTWV0cmljcyA9IGdldE1ldHJpY3MobWlkZGxlLCBmb250KTtcbiAgICAgICAgbWlkZGxlSGVpZ2h0VG90YWwgPSBtaWRkbGVNZXRyaWNzLmhlaWdodCArIG1pZGRsZU1ldHJpY3MuZGVwdGg7XG4gICAgfVxuXG4gICAgLy8gQ2FsY3VhdGUgdGhlIHJlYWwgaGVpZ2h0IHRoYXQgdGhlIGRlbGltaXRlciB3aWxsIGhhdmUuIEl0IGlzIGF0IGxlYXN0IHRoZVxuICAgIC8vIHNpemUgb2YgdGhlIHRvcCwgYm90dG9tLCBhbmQgb3B0aW9uYWwgbWlkZGxlIGNvbWJpbmVkLlxuICAgIHZhciByZWFsSGVpZ2h0VG90YWwgPSB0b3BIZWlnaHRUb3RhbCArIGJvdHRvbUhlaWdodFRvdGFsO1xuICAgIGlmIChtaWRkbGUgIT09IG51bGwpIHtcbiAgICAgICAgcmVhbEhlaWdodFRvdGFsICs9IG1pZGRsZUhlaWdodFRvdGFsO1xuICAgIH1cblxuICAgIC8vIFRoZW4gYWRkIHJlcGVhdGVkIHBpZWNlcyB1bnRpbCB3ZSByZWFjaCB0aGUgc3BlY2lmaWVkIGhlaWdodC5cbiAgICB3aGlsZSAocmVhbEhlaWdodFRvdGFsIDwgaGVpZ2h0VG90YWwpIHtcbiAgICAgICAgcmVhbEhlaWdodFRvdGFsICs9IHJlcGVhdEhlaWdodFRvdGFsO1xuICAgICAgICBpZiAobWlkZGxlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGVyZSBpcyBhIG1pZGRsZSBzZWN0aW9uLCB3ZSBuZWVkIGFuIGVxdWFsIG51bWJlciBvZiBwaWVjZXNcbiAgICAgICAgICAgIC8vIG9uIHRoZSB0b3AgYW5kIGJvdHRvbS5cbiAgICAgICAgICAgIHJlYWxIZWlnaHRUb3RhbCArPSByZXBlYXRIZWlnaHRUb3RhbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRoZSBjZW50ZXIgb2YgdGhlIGRlbGltaXRlciBpcyBwbGFjZWQgYXQgdGhlIGNlbnRlciBvZiB0aGUgYXhpcy4gTm90ZVxuICAgIC8vIHRoYXQgaW4gdGhpcyBjb250ZXh0LCBcImNlbnRlclwiIG1lYW5zIHRoYXQgdGhlIGRlbGltaXRlciBzaG91bGQgYmVcbiAgICAvLyBjZW50ZXJlZCBhcm91bmQgdGhlIGF4aXMgaW4gdGhlIGN1cnJlbnQgc3R5bGUsIHdoaWxlIG5vcm1hbGx5IGl0IGlzXG4gICAgLy8gY2VudGVyZWQgYXJvdW5kIHRoZSBheGlzIGluIHRleHRzdHlsZS5cbiAgICB2YXIgYXhpc0hlaWdodCA9IGZvbnRNZXRyaWNzLm1ldHJpY3MuYXhpc0hlaWdodDtcbiAgICBpZiAoY2VudGVyKSB7XG4gICAgICAgIGF4aXNIZWlnaHQgKj0gb3B0aW9ucy5zdHlsZS5zaXplTXVsdGlwbGllcjtcbiAgICB9XG4gICAgLy8gQ2FsY3VsYXRlIHRoZSBkZXB0aFxuICAgIHZhciBkZXB0aCA9IHJlYWxIZWlnaHRUb3RhbCAvIDIgLSBheGlzSGVpZ2h0O1xuXG4gICAgLy8gTm93LCB3ZSBzdGFydCBidWlsZGluZyB0aGUgcGllY2VzIHRoYXQgd2lsbCBnbyBpbnRvIHRoZSB2bGlzdFxuXG4gICAgLy8gS2VlcCBhIGxpc3Qgb2YgdGhlIGlubmVyIHBpZWNlc1xuICAgIHZhciBpbm5lcnMgPSBbXTtcblxuICAgIC8vIEFkZCB0aGUgYm90dG9tIHN5bWJvbFxuICAgIGlubmVycy5wdXNoKG1ha2VJbm5lcihib3R0b20sIGZvbnQsIG1vZGUpKTtcblxuICAgIHZhciBpO1xuICAgIGlmIChtaWRkbGUgPT09IG51bGwpIHtcbiAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBudW1iZXIgb2YgcmVwZWF0ZWQgc3ltYm9scyB3ZSBuZWVkXG4gICAgICAgIHZhciByZXBlYXRIZWlnaHQgPSByZWFsSGVpZ2h0VG90YWwgLSB0b3BIZWlnaHRUb3RhbCAtIGJvdHRvbUhlaWdodFRvdGFsO1xuICAgICAgICB2YXIgc3ltYm9sQ291bnQgPSBNYXRoLmNlaWwocmVwZWF0SGVpZ2h0IC8gcmVwZWF0SGVpZ2h0VG90YWwpO1xuXG4gICAgICAgIC8vIEFkZCB0aGF0IG1hbnkgc3ltYm9sc1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc3ltYm9sQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgaW5uZXJzLnB1c2gobWFrZUlubmVyKHJlcGVhdCwgZm9udCwgbW9kZSkpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gV2hlbiB0aGVyZSBpcyBhIG1pZGRsZSBiaXQsIHdlIG5lZWQgdGhlIG1pZGRsZSBwYXJ0IGFuZCB0d28gcmVwZWF0ZWRcbiAgICAgICAgLy8gc2VjdGlvbnNcblxuICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIG51bWJlciBvZiBzeW1ib2xzIG5lZWRlZCBmb3IgdGhlIHRvcCBhbmQgYm90dG9tXG4gICAgICAgIC8vIHJlcGVhdGVkIHBhcnRzXG4gICAgICAgIHZhciB0b3BSZXBlYXRIZWlnaHQgPVxuICAgICAgICAgICAgcmVhbEhlaWdodFRvdGFsIC8gMiAtIHRvcEhlaWdodFRvdGFsIC0gbWlkZGxlSGVpZ2h0VG90YWwgLyAyO1xuICAgICAgICB2YXIgdG9wU3ltYm9sQ291bnQgPSBNYXRoLmNlaWwodG9wUmVwZWF0SGVpZ2h0IC8gcmVwZWF0SGVpZ2h0VG90YWwpO1xuXG4gICAgICAgIHZhciBib3R0b21SZXBlYXRIZWlnaHQgPVxuICAgICAgICAgICAgcmVhbEhlaWdodFRvdGFsIC8gMiAtIHRvcEhlaWdodFRvdGFsIC0gbWlkZGxlSGVpZ2h0VG90YWwgLyAyO1xuICAgICAgICB2YXIgYm90dG9tU3ltYm9sQ291bnQgPVxuICAgICAgICAgICAgTWF0aC5jZWlsKGJvdHRvbVJlcGVhdEhlaWdodCAvIHJlcGVhdEhlaWdodFRvdGFsKTtcblxuICAgICAgICAvLyBBZGQgdGhlIHRvcCByZXBlYXRlZCBwYXJ0XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0b3BTeW1ib2xDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBpbm5lcnMucHVzaChtYWtlSW5uZXIocmVwZWF0LCBmb250LCBtb2RlKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBZGQgdGhlIG1pZGRsZSBwaWVjZVxuICAgICAgICBpbm5lcnMucHVzaChtYWtlSW5uZXIobWlkZGxlLCBmb250LCBtb2RlKSk7XG5cbiAgICAgICAgLy8gQWRkIHRoZSBib3R0b20gcmVwZWF0ZWQgcGFydFxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYm90dG9tU3ltYm9sQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgaW5uZXJzLnB1c2gobWFrZUlubmVyKHJlcGVhdCwgZm9udCwgbW9kZSkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIHRoZSB0b3Agc3ltYm9sXG4gICAgaW5uZXJzLnB1c2gobWFrZUlubmVyKHRvcCwgZm9udCwgbW9kZSkpO1xuXG4gICAgLy8gRmluYWxseSwgYnVpbGQgdGhlIHZsaXN0XG4gICAgdmFyIGlubmVyID0gYnVpbGRDb21tb24ubWFrZVZMaXN0KGlubmVycywgXCJib3R0b21cIiwgZGVwdGgsIG9wdGlvbnMpO1xuXG4gICAgcmV0dXJuIHN0eWxlV3JhcChcbiAgICAgICAgbWFrZVNwYW4oW1wiZGVsaW1zaXppbmdcIiwgXCJtdWx0XCJdLCBbaW5uZXJdLCBvcHRpb25zLmdldENvbG9yKCkpLFxuICAgICAgICBTdHlsZS5URVhULCBvcHRpb25zKTtcbn07XG5cbi8vIFRoZXJlIGFyZSB0aHJlZSBraW5kcyBvZiBkZWxpbWl0ZXJzLCBkZWxpbWl0ZXJzIHRoYXQgc3RhY2sgd2hlbiB0aGV5IGJlY29tZVxuLy8gdG9vIGxhcmdlXG52YXIgc3RhY2tMYXJnZURlbGltaXRlcnMgPSBbXG4gICAgXCIoXCIsIFwiKVwiLCBcIltcIiwgXCJcXFxcbGJyYWNrXCIsIFwiXVwiLCBcIlxcXFxyYnJhY2tcIixcbiAgICBcIlxcXFx7XCIsIFwiXFxcXGxicmFjZVwiLCBcIlxcXFx9XCIsIFwiXFxcXHJicmFjZVwiLFxuICAgIFwiXFxcXGxmbG9vclwiLCBcIlxcXFxyZmxvb3JcIiwgXCJcXFxcbGNlaWxcIiwgXCJcXFxccmNlaWxcIixcbiAgICBcIlxcXFxzdXJkXCJcbl07XG5cbi8vIGRlbGltaXRlcnMgdGhhdCBhbHdheXMgc3RhY2tcbnZhciBzdGFja0Fsd2F5c0RlbGltaXRlcnMgPSBbXG4gICAgXCJcXFxcdXBhcnJvd1wiLCBcIlxcXFxkb3duYXJyb3dcIiwgXCJcXFxcdXBkb3duYXJyb3dcIixcbiAgICBcIlxcXFxVcGFycm93XCIsIFwiXFxcXERvd25hcnJvd1wiLCBcIlxcXFxVcGRvd25hcnJvd1wiLFxuICAgIFwifFwiLCBcIlxcXFx8XCIsIFwiXFxcXHZlcnRcIiwgXCJcXFxcVmVydFwiXG5dO1xuXG4vLyBhbmQgZGVsaW1pdGVycyB0aGF0IG5ldmVyIHN0YWNrXG52YXIgc3RhY2tOZXZlckRlbGltaXRlcnMgPSBbXG4gICAgXCI8XCIsIFwiPlwiLCBcIlxcXFxsYW5nbGVcIiwgXCJcXFxccmFuZ2xlXCIsIFwiL1wiLCBcIlxcXFxiYWNrc2xhc2hcIlxuXTtcblxuLy8gTWV0cmljcyBvZiB0aGUgZGlmZmVyZW50IHNpemVzLiBGb3VuZCBieSBsb29raW5nIGF0IFRlWCdzIG91dHB1dCBvZlxuLy8gJFxcYmlnbHwgLy8gXFxCaWdsfCBcXGJpZ2dsfCBcXEJpZ2dsfCBcXHNob3dsaXN0cyRcbi8vIFVzZWQgdG8gY3JlYXRlIHN0YWNrZWQgZGVsaW1pdGVycyBvZiBhcHByb3ByaWF0ZSBzaXplcyBpbiBtYWtlU2l6ZWREZWxpbS5cbnZhciBzaXplVG9NYXhIZWlnaHQgPSBbMCwgMS4yLCAxLjgsIDIuNCwgMy4wXTtcblxuLyoqXG4gKiBVc2VkIHRvIGNyZWF0ZSBhIGRlbGltaXRlciBvZiBhIHNwZWNpZmljIHNpemUsIHdoZXJlIGBzaXplYCBpcyAxLCAyLCAzLCBvciA0LlxuICovXG52YXIgbWFrZVNpemVkRGVsaW0gPSBmdW5jdGlvbihkZWxpbSwgc2l6ZSwgb3B0aW9ucywgbW9kZSkge1xuICAgIC8vIDwgYW5kID4gdHVybiBpbnRvIFxcbGFuZ2xlIGFuZCBcXHJhbmdsZSBpbiBkZWxpbWl0ZXJzXG4gICAgaWYgKGRlbGltID09PSBcIjxcIikge1xuICAgICAgICBkZWxpbSA9IFwiXFxcXGxhbmdsZVwiO1xuICAgIH0gZWxzZSBpZiAoZGVsaW0gPT09IFwiPlwiKSB7XG4gICAgICAgIGRlbGltID0gXCJcXFxccmFuZ2xlXCI7XG4gICAgfVxuXG4gICAgLy8gU2l6ZWQgZGVsaW1pdGVycyBhcmUgbmV2ZXIgY2VudGVyZWQuXG4gICAgaWYgKHV0aWxzLmNvbnRhaW5zKHN0YWNrTGFyZ2VEZWxpbWl0ZXJzLCBkZWxpbSkgfHxcbiAgICAgICAgdXRpbHMuY29udGFpbnMoc3RhY2tOZXZlckRlbGltaXRlcnMsIGRlbGltKSkge1xuICAgICAgICByZXR1cm4gbWFrZUxhcmdlRGVsaW0oZGVsaW0sIHNpemUsIGZhbHNlLCBvcHRpb25zLCBtb2RlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmNvbnRhaW5zKHN0YWNrQWx3YXlzRGVsaW1pdGVycywgZGVsaW0pKSB7XG4gICAgICAgIHJldHVybiBtYWtlU3RhY2tlZERlbGltKFxuICAgICAgICAgICAgZGVsaW0sIHNpemVUb01heEhlaWdodFtzaXplXSwgZmFsc2UsIG9wdGlvbnMsIG1vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBQYXJzZUVycm9yKFwiSWxsZWdhbCBkZWxpbWl0ZXI6ICdcIiArIGRlbGltICsgXCInXCIpO1xuICAgIH1cbn07XG5cbi8qKlxuICogVGhlcmUgYXJlIHRocmVlIGRpZmZlcmVudCBzZXF1ZW5jZXMgb2YgZGVsaW1pdGVyIHNpemVzIHRoYXQgdGhlIGRlbGltaXRlcnNcbiAqIGZvbGxvdyBkZXBlbmRpbmcgb24gdGhlIGtpbmQgb2YgZGVsaW1pdGVyLiBUaGlzIGlzIHVzZWQgd2hlbiBjcmVhdGluZyBjdXN0b21cbiAqIHNpemVkIGRlbGltaXRlcnMgdG8gZGVjaWRlIHdoZXRoZXIgdG8gY3JlYXRlIGEgc21hbGwsIGxhcmdlLCBvciBzdGFja2VkXG4gKiBkZWxpbWl0ZXIuXG4gKlxuICogSW4gcmVhbCBUZVgsIHRoZXNlIHNlcXVlbmNlcyBhcmVuJ3QgZXhwbGljaXRseSBkZWZpbmVkLCBidXQgYXJlIGluc3RlYWRcbiAqIGRlZmluZWQgaW5zaWRlIHRoZSBmb250IG1ldHJpY3MuIFNpbmNlIHRoZXJlIGFyZSBvbmx5IHRocmVlIHNlcXVlbmNlcyB0aGF0XG4gKiBhcmUgcG9zc2libGUgZm9yIHRoZSBkZWxpbWl0ZXJzIHRoYXQgVGVYIGRlZmluZXMsIGl0IGlzIGVhc2llciB0byBqdXN0IGVuY29kZVxuICogdGhlbSBleHBsaWNpdGx5IGhlcmUuXG4gKi9cblxuLy8gRGVsaW1pdGVycyB0aGF0IG5ldmVyIHN0YWNrIHRyeSBzbWFsbCBkZWxpbWl0ZXJzIGFuZCBsYXJnZSBkZWxpbWl0ZXJzIG9ubHlcbnZhciBzdGFja05ldmVyRGVsaW1pdGVyU2VxdWVuY2UgPSBbXG4gICAge3R5cGU6IFwic21hbGxcIiwgc3R5bGU6IFN0eWxlLlNDUklQVFNDUklQVH0sXG4gICAge3R5cGU6IFwic21hbGxcIiwgc3R5bGU6IFN0eWxlLlNDUklQVH0sXG4gICAge3R5cGU6IFwic21hbGxcIiwgc3R5bGU6IFN0eWxlLlRFWFR9LFxuICAgIHt0eXBlOiBcImxhcmdlXCIsIHNpemU6IDF9LFxuICAgIHt0eXBlOiBcImxhcmdlXCIsIHNpemU6IDJ9LFxuICAgIHt0eXBlOiBcImxhcmdlXCIsIHNpemU6IDN9LFxuICAgIHt0eXBlOiBcImxhcmdlXCIsIHNpemU6IDR9XG5dO1xuXG4vLyBEZWxpbWl0ZXJzIHRoYXQgYWx3YXlzIHN0YWNrIHRyeSB0aGUgc21hbGwgZGVsaW1pdGVycyBmaXJzdCwgdGhlbiBzdGFja1xudmFyIHN0YWNrQWx3YXlzRGVsaW1pdGVyU2VxdWVuY2UgPSBbXG4gICAge3R5cGU6IFwic21hbGxcIiwgc3R5bGU6IFN0eWxlLlNDUklQVFNDUklQVH0sXG4gICAge3R5cGU6IFwic21hbGxcIiwgc3R5bGU6IFN0eWxlLlNDUklQVH0sXG4gICAge3R5cGU6IFwic21hbGxcIiwgc3R5bGU6IFN0eWxlLlRFWFR9LFxuICAgIHt0eXBlOiBcInN0YWNrXCJ9XG5dO1xuXG4vLyBEZWxpbWl0ZXJzIHRoYXQgc3RhY2sgd2hlbiBsYXJnZSB0cnkgdGhlIHNtYWxsIGFuZCB0aGVuIGxhcmdlIGRlbGltaXRlcnMsIGFuZFxuLy8gc3RhY2sgYWZ0ZXJ3YXJkc1xudmFyIHN0YWNrTGFyZ2VEZWxpbWl0ZXJTZXF1ZW5jZSA9IFtcbiAgICB7dHlwZTogXCJzbWFsbFwiLCBzdHlsZTogU3R5bGUuU0NSSVBUU0NSSVBUfSxcbiAgICB7dHlwZTogXCJzbWFsbFwiLCBzdHlsZTogU3R5bGUuU0NSSVBUfSxcbiAgICB7dHlwZTogXCJzbWFsbFwiLCBzdHlsZTogU3R5bGUuVEVYVH0sXG4gICAge3R5cGU6IFwibGFyZ2VcIiwgc2l6ZTogMX0sXG4gICAge3R5cGU6IFwibGFyZ2VcIiwgc2l6ZTogMn0sXG4gICAge3R5cGU6IFwibGFyZ2VcIiwgc2l6ZTogM30sXG4gICAge3R5cGU6IFwibGFyZ2VcIiwgc2l6ZTogNH0sXG4gICAge3R5cGU6IFwic3RhY2tcIn1cbl07XG5cbi8qKlxuICogR2V0IHRoZSBmb250IHVzZWQgaW4gYSBkZWxpbWl0ZXIgYmFzZWQgb24gd2hhdCBraW5kIG9mIGRlbGltaXRlciBpdCBpcy5cbiAqL1xudmFyIGRlbGltVHlwZVRvRm9udCA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICBpZiAodHlwZS50eXBlID09PSBcInNtYWxsXCIpIHtcbiAgICAgICAgcmV0dXJuIFwiTWFpbi1SZWd1bGFyXCI7XG4gICAgfSBlbHNlIGlmICh0eXBlLnR5cGUgPT09IFwibGFyZ2VcIikge1xuICAgICAgICByZXR1cm4gXCJTaXplXCIgKyB0eXBlLnNpemUgKyBcIi1SZWd1bGFyXCI7XG4gICAgfSBlbHNlIGlmICh0eXBlLnR5cGUgPT09IFwic3RhY2tcIikge1xuICAgICAgICByZXR1cm4gXCJTaXplNC1SZWd1bGFyXCI7XG4gICAgfVxufTtcblxuLyoqXG4gKiBUcmF2ZXJzZSBhIHNlcXVlbmNlIG9mIHR5cGVzIG9mIGRlbGltaXRlcnMgdG8gZGVjaWRlIHdoYXQga2luZCBvZiBkZWxpbWl0ZXJcbiAqIHNob3VsZCBiZSB1c2VkIHRvIGNyZWF0ZSBhIGRlbGltaXRlciBvZiB0aGUgZ2l2ZW4gaGVpZ2h0K2RlcHRoLlxuICovXG52YXIgdHJhdmVyc2VTZXF1ZW5jZSA9IGZ1bmN0aW9uKGRlbGltLCBoZWlnaHQsIHNlcXVlbmNlLCBvcHRpb25zKSB7XG4gICAgLy8gSGVyZSwgd2UgY2hvb3NlIHRoZSBpbmRleCB3ZSBzaG91bGQgc3RhcnQgYXQgaW4gdGhlIHNlcXVlbmNlcy4gSW4gc21hbGxlclxuICAgIC8vIHNpemVzICh3aGljaCBjb3JyZXNwb25kIHRvIGxhcmdlciBudW1iZXJzIGluIHN0eWxlLnNpemUpIHdlIHN0YXJ0IGVhcmxpZXJcbiAgICAvLyBpbiB0aGUgc2VxdWVuY2UuIFRodXMsIHNjcmlwdHNjcmlwdCBzdGFydHMgYXQgaW5kZXggMy0zPTAsIHNjcmlwdCBzdGFydHNcbiAgICAvLyBhdCBpbmRleCAzLTI9MSwgdGV4dCBzdGFydHMgYXQgMy0xPTIsIGFuZCBkaXNwbGF5IHN0YXJ0cyBhdCBtaW4oMiwzLTApPTJcbiAgICB2YXIgc3RhcnQgPSBNYXRoLm1pbigyLCAzIC0gb3B0aW9ucy5zdHlsZS5zaXplKTtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBzZXF1ZW5jZS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoc2VxdWVuY2VbaV0udHlwZSA9PT0gXCJzdGFja1wiKSB7XG4gICAgICAgICAgICAvLyBUaGlzIGlzIGFsd2F5cyB0aGUgbGFzdCBkZWxpbWl0ZXIsIHNvIHdlIGp1c3QgYnJlYWsgdGhlIGxvb3Agbm93LlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbWV0cmljcyA9IGdldE1ldHJpY3MoZGVsaW0sIGRlbGltVHlwZVRvRm9udChzZXF1ZW5jZVtpXSkpO1xuICAgICAgICB2YXIgaGVpZ2h0RGVwdGggPSBtZXRyaWNzLmhlaWdodCArIG1ldHJpY3MuZGVwdGg7XG5cbiAgICAgICAgLy8gU21hbGwgZGVsaW1pdGVycyBhcmUgc2NhbGVkIGRvd24gdmVyc2lvbnMgb2YgdGhlIHNhbWUgZm9udCwgc28gd2VcbiAgICAgICAgLy8gYWNjb3VudCBmb3IgdGhlIHN0eWxlIGNoYW5nZSBzaXplLlxuXG4gICAgICAgIGlmIChzZXF1ZW5jZVtpXS50eXBlID09PSBcInNtYWxsXCIpIHtcbiAgICAgICAgICAgIGhlaWdodERlcHRoICo9IHNlcXVlbmNlW2ldLnN0eWxlLnNpemVNdWx0aXBsaWVyO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGRlbGltaXRlciBhdCB0aGlzIHNpemUgd29ya3MgZm9yIHRoZSBnaXZlbiBoZWlnaHQuXG4gICAgICAgIGlmIChoZWlnaHREZXB0aCA+IGhlaWdodCkge1xuICAgICAgICAgICAgcmV0dXJuIHNlcXVlbmNlW2ldO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gSWYgd2UgcmVhY2hlZCB0aGUgZW5kIG9mIHRoZSBzZXF1ZW5jZSwgcmV0dXJuIHRoZSBsYXN0IHNlcXVlbmNlIGVsZW1lbnQuXG4gICAgcmV0dXJuIHNlcXVlbmNlW3NlcXVlbmNlLmxlbmd0aCAtIDFdO1xufTtcblxuLyoqXG4gKiBNYWtlIGEgZGVsaW1pdGVyIG9mIGEgZ2l2ZW4gaGVpZ2h0K2RlcHRoLCB3aXRoIG9wdGlvbmFsIGNlbnRlcmluZy4gSGVyZSwgd2VcbiAqIHRyYXZlcnNlIHRoZSBzZXF1ZW5jZXMsIGFuZCBjcmVhdGUgYSBkZWxpbWl0ZXIgdGhhdCB0aGUgc2VxdWVuY2UgdGVsbHMgdXMgdG8uXG4gKi9cbnZhciBtYWtlQ3VzdG9tU2l6ZWREZWxpbSA9IGZ1bmN0aW9uKGRlbGltLCBoZWlnaHQsIGNlbnRlciwgb3B0aW9ucywgbW9kZSkge1xuICAgIGlmIChkZWxpbSA9PT0gXCI8XCIpIHtcbiAgICAgICAgZGVsaW0gPSBcIlxcXFxsYW5nbGVcIjtcbiAgICB9IGVsc2UgaWYgKGRlbGltID09PSBcIj5cIikge1xuICAgICAgICBkZWxpbSA9IFwiXFxcXHJhbmdsZVwiO1xuICAgIH1cblxuICAgIC8vIERlY2lkZSB3aGF0IHNlcXVlbmNlIHRvIHVzZVxuICAgIHZhciBzZXF1ZW5jZTtcbiAgICBpZiAodXRpbHMuY29udGFpbnMoc3RhY2tOZXZlckRlbGltaXRlcnMsIGRlbGltKSkge1xuICAgICAgICBzZXF1ZW5jZSA9IHN0YWNrTmV2ZXJEZWxpbWl0ZXJTZXF1ZW5jZTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmNvbnRhaW5zKHN0YWNrTGFyZ2VEZWxpbWl0ZXJzLCBkZWxpbSkpIHtcbiAgICAgICAgc2VxdWVuY2UgPSBzdGFja0xhcmdlRGVsaW1pdGVyU2VxdWVuY2U7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc2VxdWVuY2UgPSBzdGFja0Fsd2F5c0RlbGltaXRlclNlcXVlbmNlO1xuICAgIH1cblxuICAgIC8vIExvb2sgdGhyb3VnaCB0aGUgc2VxdWVuY2VcbiAgICB2YXIgZGVsaW1UeXBlID0gdHJhdmVyc2VTZXF1ZW5jZShkZWxpbSwgaGVpZ2h0LCBzZXF1ZW5jZSwgb3B0aW9ucyk7XG5cbiAgICAvLyBEZXBlbmRpbmcgb24gdGhlIHNlcXVlbmNlIGVsZW1lbnQgd2UgZGVjaWRlZCBvbiwgY2FsbCB0aGUgYXBwcm9wcmlhdGVcbiAgICAvLyBmdW5jdGlvbi5cbiAgICBpZiAoZGVsaW1UeXBlLnR5cGUgPT09IFwic21hbGxcIikge1xuICAgICAgICByZXR1cm4gbWFrZVNtYWxsRGVsaW0oZGVsaW0sIGRlbGltVHlwZS5zdHlsZSwgY2VudGVyLCBvcHRpb25zLCBtb2RlKTtcbiAgICB9IGVsc2UgaWYgKGRlbGltVHlwZS50eXBlID09PSBcImxhcmdlXCIpIHtcbiAgICAgICAgcmV0dXJuIG1ha2VMYXJnZURlbGltKGRlbGltLCBkZWxpbVR5cGUuc2l6ZSwgY2VudGVyLCBvcHRpb25zLCBtb2RlKTtcbiAgICB9IGVsc2UgaWYgKGRlbGltVHlwZS50eXBlID09PSBcInN0YWNrXCIpIHtcbiAgICAgICAgcmV0dXJuIG1ha2VTdGFja2VkRGVsaW0oZGVsaW0sIGhlaWdodCwgY2VudGVyLCBvcHRpb25zLCBtb2RlKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIE1ha2UgYSBkZWxpbWl0ZXIgZm9yIHVzZSB3aXRoIGBcXGxlZnRgIGFuZCBgXFxyaWdodGAsIGdpdmVuIGEgaGVpZ2h0IGFuZCBkZXB0aFxuICogb2YgYW4gZXhwcmVzc2lvbiB0aGF0IHRoZSBkZWxpbWl0ZXJzIHN1cnJvdW5kLlxuICovXG52YXIgbWFrZUxlZnRSaWdodERlbGltID0gZnVuY3Rpb24oZGVsaW0sIGhlaWdodCwgZGVwdGgsIG9wdGlvbnMsIG1vZGUpIHtcbiAgICAvLyBXZSBhbHdheXMgY2VudGVyIFxcbGVmdC9cXHJpZ2h0IGRlbGltaXRlcnMsIHNvIHRoZSBheGlzIGlzIGFsd2F5cyBzaGlmdGVkXG4gICAgdmFyIGF4aXNIZWlnaHQgPVxuICAgICAgICBmb250TWV0cmljcy5tZXRyaWNzLmF4aXNIZWlnaHQgKiBvcHRpb25zLnN0eWxlLnNpemVNdWx0aXBsaWVyO1xuXG4gICAgLy8gVGFrZW4gZnJvbSBUZVggc291cmNlLCB0ZXgud2ViLCBmdW5jdGlvbiBtYWtlX2xlZnRfcmlnaHRcbiAgICB2YXIgZGVsaW1pdGVyRmFjdG9yID0gOTAxO1xuICAgIHZhciBkZWxpbWl0ZXJFeHRlbmQgPSA1LjAgLyBmb250TWV0cmljcy5tZXRyaWNzLnB0UGVyRW07XG5cbiAgICB2YXIgbWF4RGlzdEZyb21BeGlzID0gTWF0aC5tYXgoXG4gICAgICAgIGhlaWdodCAtIGF4aXNIZWlnaHQsIGRlcHRoICsgYXhpc0hlaWdodCk7XG5cbiAgICB2YXIgdG90YWxIZWlnaHQgPSBNYXRoLm1heChcbiAgICAgICAgLy8gSW4gcmVhbCBUZVgsIGNhbGN1bGF0aW9ucyBhcmUgZG9uZSB1c2luZyBpbnRlZ3JhbCB2YWx1ZXMgd2hpY2ggYXJlXG4gICAgICAgIC8vIDY1NTM2IHBlciBwdCwgb3IgNjU1MzYwIHBlciBlbS4gU28sIHRoZSBkaXZpc2lvbiBoZXJlIHRydW5jYXRlcyBpblxuICAgICAgICAvLyBUZVggYnV0IGRvZXNuJ3QgaGVyZSwgcHJvZHVjaW5nIGRpZmZlcmVudCByZXN1bHRzLiBJZiB3ZSB3YW50ZWQgdG9cbiAgICAgICAgLy8gZXhhY3RseSBtYXRjaCBUZVgncyBjYWxjdWxhdGlvbiwgd2UgY291bGQgZG9cbiAgICAgICAgLy8gICBNYXRoLmZsb29yKDY1NTM2MCAqIG1heERpc3RGcm9tQXhpcyAvIDUwMCkgKlxuICAgICAgICAvLyAgICBkZWxpbWl0ZXJGYWN0b3IgLyA2NTUzNjBcbiAgICAgICAgLy8gKFRvIHNlZSB0aGUgZGlmZmVyZW5jZSwgY29tcGFyZVxuICAgICAgICAvLyAgICB4Xnt4XntcXGxlZnQoXFxydWxlezAuMWVtfXswLjY4ZW19XFxyaWdodCl9fVxuICAgICAgICAvLyBpbiBUZVggYW5kIEthVGVYKVxuICAgICAgICBtYXhEaXN0RnJvbUF4aXMgLyA1MDAgKiBkZWxpbWl0ZXJGYWN0b3IsXG4gICAgICAgIDIgKiBtYXhEaXN0RnJvbUF4aXMgLSBkZWxpbWl0ZXJFeHRlbmQpO1xuXG4gICAgLy8gRmluYWxseSwgd2UgZGVmZXIgdG8gYG1ha2VDdXN0b21TaXplZERlbGltYCB3aXRoIG91ciBjYWxjdWxhdGVkIHRvdGFsXG4gICAgLy8gaGVpZ2h0XG4gICAgcmV0dXJuIG1ha2VDdXN0b21TaXplZERlbGltKGRlbGltLCB0b3RhbEhlaWdodCwgdHJ1ZSwgb3B0aW9ucywgbW9kZSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBzaXplZERlbGltOiBtYWtlU2l6ZWREZWxpbSxcbiAgICBjdXN0b21TaXplZERlbGltOiBtYWtlQ3VzdG9tU2l6ZWREZWxpbSxcbiAgICBsZWZ0UmlnaHREZWxpbTogbWFrZUxlZnRSaWdodERlbGltXG59O1xuIiwiLyoqXG4gKiBUaGVzZSBvYmplY3RzIHN0b3JlIHRoZSBkYXRhIGFib3V0IHRoZSBET00gbm9kZXMgd2UgY3JlYXRlLCBhcyB3ZWxsIGFzIHNvbWVcbiAqIGV4dHJhIGRhdGEuIFRoZXkgY2FuIHRoZW4gYmUgdHJhbnNmb3JtZWQgaW50byByZWFsIERPTSBub2RlcyB3aXRoIHRoZSB0b05vZGVcbiAqIGZ1bmN0aW9uIG9yIEhUTUwgbWFya3VwIHVzaW5nIHRvTWFya3VwLiBUaGV5IGFyZSB1c2VmdWwgZm9yIGJvdGggc3RvcmluZ1xuICogZXh0cmEgcHJvcGVydGllcyBvbiB0aGUgbm9kZXMsIGFzIHdlbGwgYXMgcHJvdmlkaW5nIGEgd2F5IHRvIGVhc2lseSB3b3JrXG4gKiB3aXRoIHRoZSBET00uXG4gKi9cblxudmFyIHV0aWxzID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEhUTUwgY2xhc3NOYW1lIGJhc2VkIG9uIGEgbGlzdCBvZiBjbGFzc2VzLiBJbiBhZGRpdGlvbiB0byBqb2luaW5nXG4gKiB3aXRoIHNwYWNlcywgd2UgYWxzbyByZW1vdmUgbnVsbCBvciBlbXB0eSBjbGFzc2VzLlxuICovXG52YXIgY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbihjbGFzc2VzKSB7XG4gICAgY2xhc3NlcyA9IGNsYXNzZXMuc2xpY2UoKTtcbiAgICBmb3IgKHZhciBpID0gY2xhc3Nlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBpZiAoIWNsYXNzZXNbaV0pIHtcbiAgICAgICAgICAgIGNsYXNzZXMuc3BsaWNlKGksIDEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsYXNzZXMuam9pbihcIiBcIik7XG59O1xuXG4vKipcbiAqIFRoaXMgbm9kZSByZXByZXNlbnRzIGEgc3BhbiBub2RlLCB3aXRoIGEgY2xhc3NOYW1lLCBhIGxpc3Qgb2YgY2hpbGRyZW4sIGFuZFxuICogYW4gaW5saW5lIHN0eWxlLiBJdCBhbHNvIGNvbnRhaW5zIGluZm9ybWF0aW9uIGFib3V0IGl0cyBoZWlnaHQsIGRlcHRoLCBhbmRcbiAqIG1heEZvbnRTaXplLlxuICovXG5mdW5jdGlvbiBzcGFuKGNsYXNzZXMsIGNoaWxkcmVuLCBoZWlnaHQsIGRlcHRoLCBtYXhGb250U2l6ZSwgc3R5bGUpIHtcbiAgICB0aGlzLmNsYXNzZXMgPSBjbGFzc2VzIHx8IFtdO1xuICAgIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbiB8fCBbXTtcbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodCB8fCAwO1xuICAgIHRoaXMuZGVwdGggPSBkZXB0aCB8fCAwO1xuICAgIHRoaXMubWF4Rm9udFNpemUgPSBtYXhGb250U2l6ZSB8fCAwO1xuICAgIHRoaXMuc3R5bGUgPSBzdHlsZSB8fCB7fTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IHRoZSBzcGFuIGludG8gYW4gSFRNTCBub2RlXG4gKi9cbnNwYW4ucHJvdG90eXBlLnRvTm9kZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG5cbiAgICAvLyBBcHBseSB0aGUgY2xhc3NcbiAgICBzcGFuLmNsYXNzTmFtZSA9IGNyZWF0ZUNsYXNzKHRoaXMuY2xhc3Nlcyk7XG5cbiAgICAvLyBBcHBseSBpbmxpbmUgc3R5bGVzXG4gICAgZm9yICh2YXIgc3R5bGUgaW4gdGhpcy5zdHlsZSkge1xuICAgICAgICBpZiAodGhpcy5zdHlsZS5oYXNPd25Qcm9wZXJ0eShzdHlsZSkpIHtcbiAgICAgICAgICAgIHNwYW4uc3R5bGVbc3R5bGVdID0gdGhpcy5zdHlsZVtzdHlsZV07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBcHBlbmQgdGhlIGNoaWxkcmVuLCBhbHNvIGFzIEhUTUwgbm9kZXNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc3Bhbi5hcHBlbmRDaGlsZCh0aGlzLmNoaWxkcmVuW2ldLnRvTm9kZSgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3Bhbjtcbn07XG5cbi8qKlxuICogQ29udmVydCB0aGUgc3BhbiBpbnRvIGFuIEhUTUwgbWFya3VwIHN0cmluZ1xuICovXG5zcGFuLnByb3RvdHlwZS50b01hcmt1cCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBtYXJrdXAgPSBcIjxzcGFuXCI7XG5cbiAgICAvLyBBZGQgdGhlIGNsYXNzXG4gICAgaWYgKHRoaXMuY2xhc3Nlcy5sZW5ndGgpIHtcbiAgICAgICAgbWFya3VwICs9IFwiIGNsYXNzPVxcXCJcIjtcbiAgICAgICAgbWFya3VwICs9IHV0aWxzLmVzY2FwZShjcmVhdGVDbGFzcyh0aGlzLmNsYXNzZXMpKTtcbiAgICAgICAgbWFya3VwICs9IFwiXFxcIlwiO1xuICAgIH1cblxuICAgIHZhciBzdHlsZXMgPSBcIlwiO1xuXG4gICAgLy8gQWRkIHRoZSBzdHlsZXMsIGFmdGVyIGh5cGhlbmF0aW9uXG4gICAgZm9yICh2YXIgc3R5bGUgaW4gdGhpcy5zdHlsZSkge1xuICAgICAgICBpZiAodGhpcy5zdHlsZS5oYXNPd25Qcm9wZXJ0eShzdHlsZSkpIHtcbiAgICAgICAgICAgIHN0eWxlcyArPSB1dGlscy5oeXBoZW5hdGUoc3R5bGUpICsgXCI6XCIgKyB0aGlzLnN0eWxlW3N0eWxlXSArIFwiO1wiO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN0eWxlcykge1xuICAgICAgICBtYXJrdXAgKz0gXCIgc3R5bGU9XFxcIlwiICsgdXRpbHMuZXNjYXBlKHN0eWxlcykgKyBcIlxcXCJcIjtcbiAgICB9XG5cbiAgICBtYXJrdXAgKz0gXCI+XCI7XG5cbiAgICAvLyBBZGQgdGhlIG1hcmt1cCBvZiB0aGUgY2hpbGRyZW4sIGFsc28gYXMgbWFya3VwXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG1hcmt1cCArPSB0aGlzLmNoaWxkcmVuW2ldLnRvTWFya3VwKCk7XG4gICAgfVxuXG4gICAgbWFya3VwICs9IFwiPC9zcGFuPlwiO1xuXG4gICAgcmV0dXJuIG1hcmt1cDtcbn07XG5cbi8qKlxuICogVGhpcyBub2RlIHJlcHJlc2VudHMgYSBkb2N1bWVudCBmcmFnbWVudCwgd2hpY2ggY29udGFpbnMgZWxlbWVudHMsIGJ1dCB3aGVuXG4gKiBwbGFjZWQgaW50byB0aGUgRE9NIGRvZXNuJ3QgaGF2ZSBhbnkgcmVwcmVzZW50YXRpb24gaXRzZWxmLiBUaHVzLCBpdCBvbmx5XG4gKiBjb250YWlucyBjaGlsZHJlbiBhbmQgZG9lc24ndCBoYXZlIGFueSBIVE1MIHByb3BlcnRpZXMuIEl0IGFsc28ga2VlcHMgdHJhY2tcbiAqIG9mIGEgaGVpZ2h0LCBkZXB0aCwgYW5kIG1heEZvbnRTaXplLlxuICovXG5mdW5jdGlvbiBkb2N1bWVudEZyYWdtZW50KGNoaWxkcmVuLCBoZWlnaHQsIGRlcHRoLCBtYXhGb250U2l6ZSkge1xuICAgIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbiB8fCBbXTtcbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodCB8fCAwO1xuICAgIHRoaXMuZGVwdGggPSBkZXB0aCB8fCAwO1xuICAgIHRoaXMubWF4Rm9udFNpemUgPSBtYXhGb250U2l6ZSB8fCAwO1xufVxuXG4vKipcbiAqIENvbnZlcnQgdGhlIGZyYWdtZW50IGludG8gYSBub2RlXG4gKi9cbmRvY3VtZW50RnJhZ21lbnQucHJvdG90eXBlLnRvTm9kZSA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIENyZWF0ZSBhIGZyYWdtZW50XG4gICAgdmFyIGZyYWcgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG5cbiAgICAvLyBBcHBlbmQgdGhlIGNoaWxkcmVuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZyYWcuYXBwZW5kQ2hpbGQodGhpcy5jaGlsZHJlbltpXS50b05vZGUoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZyYWc7XG59O1xuXG4vKipcbiAqIENvbnZlcnQgdGhlIGZyYWdtZW50IGludG8gSFRNTCBtYXJrdXBcbiAqL1xuZG9jdW1lbnRGcmFnbWVudC5wcm90b3R5cGUudG9NYXJrdXAgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbWFya3VwID0gXCJcIjtcblxuICAgIC8vIFNpbXBseSBjb25jYXRlbmF0ZSB0aGUgbWFya3VwIGZvciB0aGUgY2hpbGRyZW4gdG9nZXRoZXJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbWFya3VwICs9IHRoaXMuY2hpbGRyZW5baV0udG9NYXJrdXAoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWFya3VwO1xufTtcblxuLyoqXG4gKiBBIHN5bWJvbCBub2RlIGNvbnRhaW5zIGluZm9ybWF0aW9uIGFib3V0IGEgc2luZ2xlIHN5bWJvbC4gSXQgZWl0aGVyIHJlbmRlcnNcbiAqIHRvIGEgc2luZ2xlIHRleHQgbm9kZSwgb3IgYSBzcGFuIHdpdGggYSBzaW5nbGUgdGV4dCBub2RlIGluIGl0LCBkZXBlbmRpbmcgb25cbiAqIHdoZXRoZXIgaXQgaGFzIENTUyBjbGFzc2VzLCBzdHlsZXMsIG9yIG5lZWRzIGl0YWxpYyBjb3JyZWN0aW9uLlxuICovXG5mdW5jdGlvbiBzeW1ib2xOb2RlKHZhbHVlLCBoZWlnaHQsIGRlcHRoLCBpdGFsaWMsIHNrZXcsIGNsYXNzZXMsIHN0eWxlKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlIHx8IFwiXCI7XG4gICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQgfHwgMDtcbiAgICB0aGlzLmRlcHRoID0gZGVwdGggfHwgMDtcbiAgICB0aGlzLml0YWxpYyA9IGl0YWxpYyB8fCAwO1xuICAgIHRoaXMuc2tldyA9IHNrZXcgfHwgMDtcbiAgICB0aGlzLmNsYXNzZXMgPSBjbGFzc2VzIHx8IFtdO1xuICAgIHRoaXMuc3R5bGUgPSBzdHlsZSB8fCB7fTtcbiAgICB0aGlzLm1heEZvbnRTaXplID0gMDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgdGV4dCBub2RlIG9yIHNwYW4gZnJvbSBhIHN5bWJvbCBub2RlLiBOb3RlIHRoYXQgYSBzcGFuIGlzIG9ubHlcbiAqIGNyZWF0ZWQgaWYgaXQgaXMgbmVlZGVkLlxuICovXG5zeW1ib2xOb2RlLnByb3RvdHlwZS50b05vZGUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRoaXMudmFsdWUpO1xuICAgIHZhciBzcGFuID0gbnVsbDtcblxuICAgIGlmICh0aGlzLml0YWxpYyA+IDApIHtcbiAgICAgICAgc3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgICBzcGFuLnN0eWxlLm1hcmdpblJpZ2h0ID0gdGhpcy5pdGFsaWMgKyBcImVtXCI7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY2xhc3Nlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHNwYW4gPSBzcGFuIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgICBzcGFuLmNsYXNzTmFtZSA9IGNyZWF0ZUNsYXNzKHRoaXMuY2xhc3Nlcyk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgc3R5bGUgaW4gdGhpcy5zdHlsZSkge1xuICAgICAgICBpZiAodGhpcy5zdHlsZS5oYXNPd25Qcm9wZXJ0eShzdHlsZSkpIHtcbiAgICAgICAgICAgIHNwYW4gPSBzcGFuIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgICAgICAgc3Bhbi5zdHlsZVtzdHlsZV0gPSB0aGlzLnN0eWxlW3N0eWxlXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzcGFuKSB7XG4gICAgICAgIHNwYW4uYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgICAgIHJldHVybiBzcGFuO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbn07XG5cbi8qKlxuICogQ3JlYXRlcyBtYXJrdXAgZm9yIGEgc3ltYm9sIG5vZGUuXG4gKi9cbnN5bWJvbE5vZGUucHJvdG90eXBlLnRvTWFya3VwID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gVE9ETyhhbHBlcnQpOiBNb3JlIGR1cGxpY2F0aW9uIHRoYW4gSSdkIGxpa2UgZnJvbVxuICAgIC8vIHNwYW4ucHJvdG90eXBlLnRvTWFya3VwIGFuZCBzeW1ib2xOb2RlLnByb3RvdHlwZS50b05vZGUuLi5cbiAgICB2YXIgbmVlZHNTcGFuID0gZmFsc2U7XG5cbiAgICB2YXIgbWFya3VwID0gXCI8c3BhblwiO1xuXG4gICAgaWYgKHRoaXMuY2xhc3Nlcy5sZW5ndGgpIHtcbiAgICAgICAgbmVlZHNTcGFuID0gdHJ1ZTtcbiAgICAgICAgbWFya3VwICs9IFwiIGNsYXNzPVxcXCJcIjtcbiAgICAgICAgbWFya3VwICs9IHV0aWxzLmVzY2FwZShjcmVhdGVDbGFzcyh0aGlzLmNsYXNzZXMpKTtcbiAgICAgICAgbWFya3VwICs9IFwiXFxcIlwiO1xuICAgIH1cblxuICAgIHZhciBzdHlsZXMgPSBcIlwiO1xuXG4gICAgaWYgKHRoaXMuaXRhbGljID4gMCkge1xuICAgICAgICBzdHlsZXMgKz0gXCJtYXJnaW4tcmlnaHQ6XCIgKyB0aGlzLml0YWxpYyArIFwiZW07XCI7XG4gICAgfVxuICAgIGZvciAodmFyIHN0eWxlIGluIHRoaXMuc3R5bGUpIHtcbiAgICAgICAgaWYgKHRoaXMuc3R5bGUuaGFzT3duUHJvcGVydHkoc3R5bGUpKSB7XG4gICAgICAgICAgICBzdHlsZXMgKz0gdXRpbHMuaHlwaGVuYXRlKHN0eWxlKSArIFwiOlwiICsgdGhpcy5zdHlsZVtzdHlsZV0gKyBcIjtcIjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzdHlsZXMpIHtcbiAgICAgICAgbmVlZHNTcGFuID0gdHJ1ZTtcbiAgICAgICAgbWFya3VwICs9IFwiIHN0eWxlPVxcXCJcIiArIHV0aWxzLmVzY2FwZShzdHlsZXMpICsgXCJcXFwiXCI7XG4gICAgfVxuXG4gICAgdmFyIGVzY2FwZWQgPSB1dGlscy5lc2NhcGUodGhpcy52YWx1ZSk7XG4gICAgaWYgKG5lZWRzU3Bhbikge1xuICAgICAgICBtYXJrdXAgKz0gXCI+XCI7XG4gICAgICAgIG1hcmt1cCArPSBlc2NhcGVkO1xuICAgICAgICBtYXJrdXAgKz0gXCI8L3NwYW4+XCI7XG4gICAgICAgIHJldHVybiBtYXJrdXA7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGVzY2FwZWQ7XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgc3Bhbjogc3BhbixcbiAgICBkb2N1bWVudEZyYWdtZW50OiBkb2N1bWVudEZyYWdtZW50LFxuICAgIHN5bWJvbE5vZGU6IHN5bWJvbE5vZGVcbn07XG4iLCIvKiBqc2hpbnQgdW51c2VkOmZhbHNlICovXG5cbnZhciBTdHlsZSA9IHJlcXVpcmUoXCIuL1N0eWxlXCIpO1xuXG4vKipcbiAqIFRoaXMgZmlsZSBjb250YWlucyBtZXRyaWNzIHJlZ2FyZGluZyBmb250cyBhbmQgaW5kaXZpZHVhbCBzeW1ib2xzLiBUaGUgc2lnbWFcbiAqIGFuZCB4aSB2YXJpYWJsZXMsIGFzIHdlbGwgYXMgdGhlIG1ldHJpY01hcCBtYXAgY29udGFpbiBkYXRhIGV4dHJhY3RlZCBmcm9tXG4gKiBUZVgsIFRlWCBmb250IG1ldHJpY3MsIGFuZCB0aGUgVFRGIGZpbGVzLiBUaGVzZSBkYXRhIGFyZSB0aGVuIGV4cG9zZWQgdmlhIHRoZVxuICogYG1ldHJpY3NgIHZhcmlhYmxlIGFuZCB0aGUgZ2V0Q2hhcmFjdGVyTWV0cmljcyBmdW5jdGlvbi5cbiAqL1xuXG4vLyBUaGVzZSBmb250IG1ldHJpY3MgYXJlIGV4dHJhY3RlZCBmcm9tIFRlWCBieSB1c2luZ1xuLy8gXFxmb250XFxhPWNtbWkxMFxuLy8gXFxzaG93dGhlXFxmb250ZGltZW5YXFxhXG4vLyB3aGVyZSBYIGlzIHRoZSBjb3JyZXNwb25kaW5nIHZhcmlhYmxlIG51bWJlci4gVGhlc2UgY29ycmVzcG9uZCB0byB0aGUgZm9udFxuLy8gcGFyYW1ldGVycyBvZiB0aGUgc3ltYm9sIGZvbnRzLiBJbiBUZVgsIHRoZXJlIGFyZSBhY3R1YWxseSB0aHJlZSBzZXRzIG9mXG4vLyBkaW1lbnNpb25zLCBvbmUgZm9yIGVhY2ggb2YgdGV4dHN0eWxlLCBzY3JpcHRzdHlsZSwgYW5kIHNjcmlwdHNjcmlwdHN0eWxlLFxuLy8gYnV0IHdlIG9ubHkgdXNlIHRoZSB0ZXh0c3R5bGUgb25lcywgYW5kIHNjYWxlIGNlcnRhaW4gZGltZW5zaW9ucyBhY2NvcmRpbmdseS5cbi8vIFNlZSB0aGUgVGVYYm9vaywgcGFnZSA0NDEuXG52YXIgc2lnbWExID0gMC4wMjU7XG52YXIgc2lnbWEyID0gMDtcbnZhciBzaWdtYTMgPSAwO1xudmFyIHNpZ21hNCA9IDA7XG52YXIgc2lnbWE1ID0gMC40MzE7XG52YXIgc2lnbWE2ID0gMTtcbnZhciBzaWdtYTcgPSAwO1xudmFyIHNpZ21hOCA9IDAuNjc3O1xudmFyIHNpZ21hOSA9IDAuMzk0O1xudmFyIHNpZ21hMTAgPSAwLjQ0NDtcbnZhciBzaWdtYTExID0gMC42ODY7XG52YXIgc2lnbWExMiA9IDAuMzQ1O1xudmFyIHNpZ21hMTMgPSAwLjQxMztcbnZhciBzaWdtYTE0ID0gMC4zNjM7XG52YXIgc2lnbWExNSA9IDAuMjg5O1xudmFyIHNpZ21hMTYgPSAwLjE1MDtcbnZhciBzaWdtYTE3ID0gMC4yNDc7XG52YXIgc2lnbWExOCA9IDAuMzg2O1xudmFyIHNpZ21hMTkgPSAwLjA1MDtcbnZhciBzaWdtYTIwID0gMi4zOTA7XG52YXIgc2lnbWEyMSA9IDEuMDE7XG52YXIgc2lnbWEyMVNjcmlwdCA9IDAuODE7XG52YXIgc2lnbWEyMVNjcmlwdFNjcmlwdCA9IDAuNzE7XG52YXIgc2lnbWEyMiA9IDAuMjUwO1xuXG4vLyBUaGVzZSBmb250IG1ldHJpY3MgYXJlIGV4dHJhY3RlZCBmcm9tIFRlWCBieSB1c2luZ1xuLy8gXFxmb250XFxhPWNtZXgxMFxuLy8gXFxzaG93dGhlXFxmb250ZGltZW5YXFxhXG4vLyB3aGVyZSBYIGlzIHRoZSBjb3JyZXNwb25kaW5nIHZhcmlhYmxlIG51bWJlci4gVGhlc2UgY29ycmVzcG9uZCB0byB0aGUgZm9udFxuLy8gcGFyYW1ldGVycyBvZiB0aGUgZXh0ZW5zaW9uIGZvbnRzIChmYW1pbHkgMykuIFNlZSB0aGUgVGVYYm9vaywgcGFnZSA0NDEuXG52YXIgeGkxID0gMDtcbnZhciB4aTIgPSAwO1xudmFyIHhpMyA9IDA7XG52YXIgeGk0ID0gMDtcbnZhciB4aTUgPSAwLjQzMTtcbnZhciB4aTYgPSAxO1xudmFyIHhpNyA9IDA7XG52YXIgeGk4ID0gMC4wNDtcbnZhciB4aTkgPSAwLjExMTtcbnZhciB4aTEwID0gMC4xNjY7XG52YXIgeGkxMSA9IDAuMjtcbnZhciB4aTEyID0gMC42O1xudmFyIHhpMTMgPSAwLjE7XG5cbi8vIFRoaXMgdmFsdWUgZGV0ZXJtaW5lcyBob3cgbGFyZ2UgYSBwdCBpcywgZm9yIG1ldHJpY3Mgd2hpY2ggYXJlIGRlZmluZWQgaW5cbi8vIHRlcm1zIG9mIHB0cy5cbi8vIFRoaXMgdmFsdWUgaXMgYWxzbyB1c2VkIGluIGthdGV4Lmxlc3M7IGlmIHlvdSBjaGFuZ2UgaXQgbWFrZSBzdXJlIHRoZSB2YWx1ZXNcbi8vIG1hdGNoLlxudmFyIHB0UGVyRW0gPSAxMC4wO1xuXG4vKipcbiAqIFRoaXMgaXMganVzdCBhIG1hcHBpbmcgZnJvbSBjb21tb24gbmFtZXMgdG8gcmVhbCBtZXRyaWNzXG4gKi9cbnZhciBtZXRyaWNzID0ge1xuICAgIHhIZWlnaHQ6IHNpZ21hNSxcbiAgICBxdWFkOiBzaWdtYTYsXG4gICAgbnVtMTogc2lnbWE4LFxuICAgIG51bTI6IHNpZ21hOSxcbiAgICBudW0zOiBzaWdtYTEwLFxuICAgIGRlbm9tMTogc2lnbWExMSxcbiAgICBkZW5vbTI6IHNpZ21hMTIsXG4gICAgc3VwMTogc2lnbWExMyxcbiAgICBzdXAyOiBzaWdtYTE0LFxuICAgIHN1cDM6IHNpZ21hMTUsXG4gICAgc3ViMTogc2lnbWExNixcbiAgICBzdWIyOiBzaWdtYTE3LFxuICAgIHN1cERyb3A6IHNpZ21hMTgsXG4gICAgc3ViRHJvcDogc2lnbWExOSxcbiAgICBheGlzSGVpZ2h0OiBzaWdtYTIyLFxuICAgIGRlZmF1bHRSdWxlVGhpY2tuZXNzOiB4aTgsXG4gICAgYmlnT3BTcGFjaW5nMTogeGk5LFxuICAgIGJpZ09wU3BhY2luZzI6IHhpMTAsXG4gICAgYmlnT3BTcGFjaW5nMzogeGkxMSxcbiAgICBiaWdPcFNwYWNpbmc0OiB4aTEyLFxuICAgIGJpZ09wU3BhY2luZzU6IHhpMTMsXG4gICAgcHRQZXJFbTogcHRQZXJFbSxcblxuICAgIC8vIFRPRE8oYWxwZXJ0KTogTWlzc2luZyBwYXJhbGxlbCBzdHJ1Y3R1cmUgaGVyZS4gV2Ugc2hvdWxkIHByb2JhYmx5IGFkZFxuICAgIC8vIHN0eWxlLXNwZWNpZmljIG1ldHJpY3MgZm9yIGFsbCBvZiB0aGVzZS5cbiAgICBkZWxpbTE6IHNpZ21hMjAsXG4gICAgZ2V0RGVsaW0yOiBmdW5jdGlvbihzdHlsZSkge1xuICAgICAgICBpZiAoc3R5bGUuc2l6ZSA9PT0gU3R5bGUuVEVYVC5zaXplKSB7XG4gICAgICAgICAgICByZXR1cm4gc2lnbWEyMTtcbiAgICAgICAgfSBlbHNlIGlmIChzdHlsZS5zaXplID09PSBTdHlsZS5TQ1JJUFQuc2l6ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHNpZ21hMjFTY3JpcHQ7XG4gICAgICAgIH0gZWxzZSBpZiAoc3R5bGUuc2l6ZSA9PT0gU3R5bGUuU0NSSVBUU0NSSVBULnNpemUpIHtcbiAgICAgICAgICAgIHJldHVybiBzaWdtYTIxU2NyaXB0U2NyaXB0O1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgc3R5bGUgc2l6ZTogXCIgKyBzdHlsZS5zaXplKTtcbiAgICB9XG59O1xuXG4vLyBUaGlzIG1hcCBjb250YWlucyBhIG1hcHBpbmcgZnJvbSBmb250IG5hbWUgYW5kIGNoYXJhY3RlciBjb2RlIHRvIGNoYXJhY3RlclxuLy8gbWV0cmljcywgaW5jbHVkaW5nIGhlaWdodCwgZGVwdGgsIGl0YWxpYyBjb3JyZWN0aW9uLCBhbmQgc2tldyAoa2VybiBmcm9tIHRoZVxuLy8gY2hhcmFjdGVyIHRvIHRoZSBjb3JyZXNwb25kaW5nIFxcc2tld2NoYXIpXG4vLyBUaGlzIG1hcCBpcyBnZW5lcmF0ZWQgdmlhIGBtYWtlIG1ldHJpY3NgLiBJdCBzaG91bGQgbm90IGJlIGNoYW5nZWQgbWFudWFsbHkuXG52YXIgbWV0cmljTWFwID0ge1wiQU1TLVJlZ3VsYXJcIjp7XCIxMDAwM1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTIyNCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTAwMTZcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjkyMjQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjEwMDhcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjA0MDI4LFwic2tld1wiOjAuMH0sXCIxMDdcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjg4ODksXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjEwNzMxXCI6e1wiZGVwdGhcIjowLjExMTExLFwiaGVpZ2h0XCI6MC42OTIyNCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTA4NDZcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjc1NTgzLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIxMDg3N1wiOntcImRlcHRoXCI6MC4xMzY2NyxcImhlaWdodFwiOjAuNjM2NjcsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjEwODc4XCI6e1wiZGVwdGhcIjowLjEzNjY3LFwiaGVpZ2h0XCI6MC42MzY2NyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTA4ODVcIjp7XCJkZXB0aFwiOjAuMjU1ODMsXCJoZWlnaHRcIjowLjc1NTgzLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIxMDg4NlwiOntcImRlcHRoXCI6MC4yNTU4MyxcImhlaWdodFwiOjAuNzU1ODMsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjEwODg3XCI6e1wiZGVwdGhcIjowLjEzNTk3LFwiaGVpZ2h0XCI6MC42MzU5NyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTA4ODhcIjp7XCJkZXB0aFwiOjAuMTM1OTcsXCJoZWlnaHRcIjowLjYzNTk3LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIxMDg4OVwiOntcImRlcHRoXCI6MC4yNjE2NyxcImhlaWdodFwiOjAuNzU3MjYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjEwODkwXCI6e1wiZGVwdGhcIjowLjI2MTY3LFwiaGVpZ2h0XCI6MC43NTcyNixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTA4OTFcIjp7XCJkZXB0aFwiOjAuNDgyNTYsXCJoZWlnaHRcIjowLjk4MjU2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIxMDg5MlwiOntcImRlcHRoXCI6MC40ODI1NixcImhlaWdodFwiOjAuOTgyNTYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjEwOTAxXCI6e1wiZGVwdGhcIjowLjEzNjY3LFwiaGVpZ2h0XCI6MC42MzY2NyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTA5MDJcIjp7XCJkZXB0aFwiOjAuMTM2NjcsXCJoZWlnaHRcIjowLjYzNjY3LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIxMDkzM1wiOntcImRlcHRoXCI6MC4yNTE0MixcImhlaWdodFwiOjAuNzU3MjYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjEwOTM0XCI6e1wiZGVwdGhcIjowLjI1MTQyLFwiaGVpZ2h0XCI6MC43NTcyNixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTA5MzVcIjp7XCJkZXB0aFwiOjAuMjYxNjcsXCJoZWlnaHRcIjowLjc1NzI2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIxMDkzNlwiOntcImRlcHRoXCI6MC4yNjE2NyxcImhlaWdodFwiOjAuNzU3MjYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjEwOTM3XCI6e1wiZGVwdGhcIjowLjI2MTY3LFwiaGVpZ2h0XCI6MC43NTcyNixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTA5MzhcIjp7XCJkZXB0aFwiOjAuMjYxNjcsXCJoZWlnaHRcIjowLjc1NzI2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIxMDk0OVwiOntcImRlcHRoXCI6MC4yNTU4MyxcImhlaWdodFwiOjAuNzU1ODMsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjEwOTUwXCI6e1wiZGVwdGhcIjowLjI1NTgzLFwiaGVpZ2h0XCI6MC43NTU4MyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTA5NTVcIjp7XCJkZXB0aFwiOjAuMjg0ODEsXCJoZWlnaHRcIjowLjc5MzgzLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIxMDk1NlwiOntcImRlcHRoXCI6MC4yODQ4MSxcImhlaWdodFwiOjAuNzkzODMsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjE2NVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42NzUsXCJpdGFsaWNcIjowLjAyNSxcInNrZXdcIjowLjB9LFwiMTc0XCI6e1wiZGVwdGhcIjowLjE1NTU5LFwiaGVpZ2h0XCI6MC42OTIyNCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMjQwXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4ODg5LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIyOTVcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjg4ODksXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjU3MzUwXCI6e1wiZGVwdGhcIjowLjA4MTY3LFwiaGVpZ2h0XCI6MC41ODE2NyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNTczNTFcIjp7XCJkZXB0aFwiOjAuMDgxNjcsXCJoZWlnaHRcIjowLjU4MTY3LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI1NzM1MlwiOntcImRlcHRoXCI6MC4wODE2NyxcImhlaWdodFwiOjAuNTgxNjcsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjU3MzUzXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wNDAyOCxcInNrZXdcIjowLjB9LFwiNTczNTZcIjp7XCJkZXB0aFwiOjAuMjUxNDIsXCJoZWlnaHRcIjowLjc1NzI2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI1NzM1N1wiOntcImRlcHRoXCI6MC4yNTE0MixcImhlaWdodFwiOjAuNzU3MjYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjU3MzU4XCI6e1wiZGVwdGhcIjowLjQxOTUxLFwiaGVpZ2h0XCI6MC45MTk1MSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNTczNTlcIjp7XCJkZXB0aFwiOjAuMzAyNzQsXCJoZWlnaHRcIjowLjc5MzgzLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI1NzM2MFwiOntcImRlcHRoXCI6MC4zMDI3NCxcImhlaWdodFwiOjAuNzkzODMsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjU3MzYxXCI6e1wiZGVwdGhcIjowLjQxOTUxLFwiaGVpZ2h0XCI6MC45MTk1MSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNTczNjZcIjp7XCJkZXB0aFwiOjAuMjUxNDIsXCJoZWlnaHRcIjowLjc1NzI2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI1NzM2N1wiOntcImRlcHRoXCI6MC4yNTE0MixcImhlaWdodFwiOjAuNzU3MjYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjU3MzY4XCI6e1wiZGVwdGhcIjowLjI1MTQyLFwiaGVpZ2h0XCI6MC43NTcyNixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNTczNjlcIjp7XCJkZXB0aFwiOjAuMjUxNDIsXCJoZWlnaHRcIjowLjc1NzI2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI1NzM3MFwiOntcImRlcHRoXCI6MC4xMzU5NyxcImhlaWdodFwiOjAuNjM1OTcsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjU3MzcxXCI6e1wiZGVwdGhcIjowLjEzNTk3LFwiaGVpZ2h0XCI6MC42MzU5NyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNjVcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjg4ODksXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjY2XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4ODg5LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI2N1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODg4OSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNjhcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjg4ODksXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjY5XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4ODg5LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI3MFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODg4OSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNzFcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjg4ODksXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjcxMFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC44MjUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjcyXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4ODg5LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI3M1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODg4OSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNzMyXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjksXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjc0XCI6e1wiZGVwdGhcIjowLjE2NjY3LFwiaGVpZ2h0XCI6MC42ODg4OSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNzVcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjg4ODksXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjc2XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4ODg5LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI3N1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODg4OSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNzcwXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjgyNSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNzcxXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjksXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjc4XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4ODg5LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI3OVwiOntcImRlcHRoXCI6MC4xNjY2NyxcImhlaWdodFwiOjAuNjg4ODksXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjgwXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4ODg5LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4MVwiOntcImRlcHRoXCI6MC4xNjY2NyxcImhlaWdodFwiOjAuNjg4ODksXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjgyXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4ODg5LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4MjQ1XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjU0OTg2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4M1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODg4OSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODRcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjg4ODksXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg0NjNcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjg4ODksXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg0ODdcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjg4ODksXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg0OThcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjg4ODksXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg1XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4ODg5LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NTAyXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4ODg5LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NTAzXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4ODg5LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NTA0XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4ODg5LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NTEzXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4ODg5LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NTkyXCI6e1wiZGVwdGhcIjotMC4wMzU5OCxcImhlaWdodFwiOjAuNDY0MDIsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg1OTRcIjp7XCJkZXB0aFwiOi0wLjAzNTk4LFwiaGVpZ2h0XCI6MC40NjQwMixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODZcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjg4ODksXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg2MDJcIjp7XCJkZXB0aFwiOi0wLjEzMzEzLFwiaGVpZ2h0XCI6MC4zNjY4NyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODYwM1wiOntcImRlcHRoXCI6LTAuMTMzMTMsXCJoZWlnaHRcIjowLjM2Njg3LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NjA2XCI6e1wiZGVwdGhcIjowLjAxMzU0LFwiaGVpZ2h0XCI6MC41MjIzOSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODYwOFwiOntcImRlcHRoXCI6MC4wMTM1NCxcImhlaWdodFwiOjAuNTIyMzksXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg2MTBcIjp7XCJkZXB0aFwiOjAuMDEzNTQsXCJoZWlnaHRcIjowLjUyMjM5LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NjExXCI6e1wiZGVwdGhcIjowLjAxMzU0LFwiaGVpZ2h0XCI6MC41MjIzOSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODYxOVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC41NDk4NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODYyMFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC41NDk4NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODYyMVwiOntcImRlcHRoXCI6LTAuMTMzMTMsXCJoZWlnaHRcIjowLjM3Nzg4LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NjIyXCI6e1wiZGVwdGhcIjotMC4xMzMxMyxcImhlaWdodFwiOjAuMzY2ODcsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg2MjRcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjkyMjQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg2MjVcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjkyMjQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg2MzBcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg2MzFcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg2MzRcIjp7XCJkZXB0aFwiOjAuMDgxOTgsXCJoZWlnaHRcIjowLjU4MTk4LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NjM1XCI6e1wiZGVwdGhcIjowLjA4MTk4LFwiaGVpZ2h0XCI6MC41ODE5OCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODYzOFwiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNjkyMjQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg2MzlcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjY5MjI0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NjQyXCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC42OTIyNCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODY0M1wiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNjkyMjQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg2NDRcIjp7XCJkZXB0aFwiOjAuMTgwOCxcImhlaWdodFwiOjAuNjc1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NjQ2XCI6e1wiZGVwdGhcIjowLjE4MDgsXCJoZWlnaHRcIjowLjY3NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODY0N1wiOntcImRlcHRoXCI6MC4xODA4LFwiaGVpZ2h0XCI6MC42NzUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg2NDhcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjY5MjI0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NjQ5XCI6e1wiZGVwdGhcIjowLjE4MDgsXCJoZWlnaHRcIjowLjY3NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODY1MFwiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNjkyMjQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg2NTFcIjp7XCJkZXB0aFwiOjAuMDEzNTQsXCJoZWlnaHRcIjowLjUyMjM5LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NjUyXCI6e1wiZGVwdGhcIjowLjAxMzU0LFwiaGVpZ2h0XCI6MC41MjIzOSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODY1M1wiOntcImRlcHRoXCI6LTAuMTMzMTMsXCJoZWlnaHRcIjowLjM2Njg3LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NjU0XCI6e1wiZGVwdGhcIjotMC4xMzMxMyxcImhlaWdodFwiOjAuMzY2ODcsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg2NTVcIjp7XCJkZXB0aFwiOi0wLjEzMzEzLFwiaGVpZ2h0XCI6MC4zNjY4NyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODY2NlwiOntcImRlcHRoXCI6MC4xMzY2NyxcImhlaWdodFwiOjAuNjM2NjcsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg2NjdcIjp7XCJkZXB0aFwiOjAuMTM2NjcsXCJoZWlnaHRcIjowLjYzNjY3LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NjY5XCI6e1wiZGVwdGhcIjotMC4xMzMxMyxcImhlaWdodFwiOjAuMzc3ODgsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg3XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4ODg5LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NzA1XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjgyNSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODcwOFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODg4OSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODcwOVwiOntcImRlcHRoXCI6MC4wODE2NyxcImhlaWdodFwiOjAuNTgxNjcsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg3MTdcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg3MjJcIjp7XCJkZXB0aFwiOi0wLjAzNTk4LFwiaGVpZ2h0XCI6MC40NjQwMixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODcyNFwiOntcImRlcHRoXCI6MC4wODE5OCxcImhlaWdodFwiOjAuNjkyMjQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg3MjZcIjp7XCJkZXB0aFwiOjAuMDgxNjcsXCJoZWlnaHRcIjowLjU4MTY3LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NzMzXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5MjI0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NzM2XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5MjI0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NzM3XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5MjI0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NzM4XCI6e1wiZGVwdGhcIjowLjAzNTE3LFwiaGVpZ2h0XCI6MC41MjIzOSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODczOVwiOntcImRlcHRoXCI6MC4wODE2NyxcImhlaWdodFwiOjAuNTgxNjcsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg3NDBcIjp7XCJkZXB0aFwiOjAuMjUxNDIsXCJoZWlnaHRcIjowLjc0MTExLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NzQxXCI6e1wiZGVwdGhcIjowLjA4MTY3LFwiaGVpZ2h0XCI6MC41ODE2NyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODc0MlwiOntcImRlcHRoXCI6MC4yNTE0MixcImhlaWdodFwiOjAuNzQxMTEsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg3NTZcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjkyMjQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg3NTdcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjkyMjQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg3NjRcIjp7XCJkZXB0aFwiOi0wLjEzMzEzLFwiaGVpZ2h0XCI6MC4zNjY4NyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODc2NVwiOntcImRlcHRoXCI6LTAuMTMzMTMsXCJoZWlnaHRcIjowLjM3Nzg4LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NzY5XCI6e1wiZGVwdGhcIjotMC4xMzMxMyxcImhlaWdodFwiOjAuMzY2ODcsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg3NzBcIjp7XCJkZXB0aFwiOi0wLjAzNjI1LFwiaGVpZ2h0XCI6MC40NjM3NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODc3NFwiOntcImRlcHRoXCI6MC4zMDI3NCxcImhlaWdodFwiOjAuNzkzODMsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg3NzZcIjp7XCJkZXB0aFwiOi0wLjAxNjg4LFwiaGVpZ2h0XCI6MC40ODMxMixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODc3OFwiOntcImRlcHRoXCI6MC4wODE2NyxcImhlaWdodFwiOjAuNTgxNjcsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg3ODJcIjp7XCJkZXB0aFwiOjAuMDYwNjIsXCJoZWlnaHRcIjowLjU0OTg2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NzgzXCI6e1wiZGVwdGhcIjowLjA2MDYyLFwiaGVpZ2h0XCI6MC41NDk4NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODc4NVwiOntcImRlcHRoXCI6MC4wODE5OCxcImhlaWdodFwiOjAuNTgxOTgsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg3ODZcIjp7XCJkZXB0aFwiOjAuMDgxOTgsXCJoZWlnaHRcIjowLjU4MTk4LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4Nzg3XCI6e1wiZGVwdGhcIjowLjA4MTk4LFwiaGVpZ2h0XCI6MC41ODE5OCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODc5MFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTIyNCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODc5MVwiOntcImRlcHRoXCI6MC4yMjk1OCxcImhlaWdodFwiOjAuNzI5NTgsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg3OTZcIjp7XCJkZXB0aFwiOjAuMDgxOTgsXCJoZWlnaHRcIjowLjkxNjY3LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4OFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODg4OSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODgwNlwiOntcImRlcHRoXCI6MC4yNTU4MyxcImhlaWdodFwiOjAuNzU1ODMsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg4MDdcIjp7XCJkZXB0aFwiOjAuMjU1ODMsXCJoZWlnaHRcIjowLjc1NTgzLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4ODA4XCI6e1wiZGVwdGhcIjowLjI1MTQyLFwiaGVpZ2h0XCI6MC43NTcyNixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODgwOVwiOntcImRlcHRoXCI6MC4yNTE0MixcImhlaWdodFwiOjAuNzU3MjYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg4MTJcIjp7XCJkZXB0aFwiOjAuMjU1ODMsXCJoZWlnaHRcIjowLjc1NTgzLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4ODE0XCI6e1wiZGVwdGhcIjowLjIwNTc2LFwiaGVpZ2h0XCI6MC43MDU3NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODgxNVwiOntcImRlcHRoXCI6MC4yMDU3NixcImhlaWdodFwiOjAuNzA1NzYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg4MTZcIjp7XCJkZXB0aFwiOjAuMzAyNzQsXCJoZWlnaHRcIjowLjc5MzgzLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4ODE3XCI6e1wiZGVwdGhcIjowLjMwMjc0LFwiaGVpZ2h0XCI6MC43OTM4MyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODgxOFwiOntcImRlcHRoXCI6MC4yMjk1OCxcImhlaWdodFwiOjAuNzI5NTgsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg4MTlcIjp7XCJkZXB0aFwiOjAuMjI5NTgsXCJoZWlnaHRcIjowLjcyOTU4LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4ODIyXCI6e1wiZGVwdGhcIjowLjE4MDgsXCJoZWlnaHRcIjowLjY3NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODgyM1wiOntcImRlcHRoXCI6MC4xODA4LFwiaGVpZ2h0XCI6MC42NzUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg4MjhcIjp7XCJkZXB0aFwiOjAuMTM2NjcsXCJoZWlnaHRcIjowLjYzNjY3LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4ODI5XCI6e1wiZGVwdGhcIjowLjEzNjY3LFwiaGVpZ2h0XCI6MC42MzY2NyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODgzMFwiOntcImRlcHRoXCI6MC4yMjk1OCxcImhlaWdodFwiOjAuNzI5NTgsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg4MzFcIjp7XCJkZXB0aFwiOjAuMjI5NTgsXCJoZWlnaHRcIjowLjcyOTU4LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4ODMyXCI6e1wiZGVwdGhcIjowLjIwNTc2LFwiaGVpZ2h0XCI6MC43MDU3NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODgzM1wiOntcImRlcHRoXCI6MC4yMDU3NixcImhlaWdodFwiOjAuNzA1NzYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg4NDBcIjp7XCJkZXB0aFwiOjAuMzAyNzQsXCJoZWlnaHRcIjowLjc5MzgzLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4ODQxXCI6e1wiZGVwdGhcIjowLjMwMjc0LFwiaGVpZ2h0XCI6MC43OTM4MyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODg0MlwiOntcImRlcHRoXCI6MC4xMzU5NyxcImhlaWdodFwiOjAuNjM1OTcsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg4NDNcIjp7XCJkZXB0aFwiOjAuMTM1OTcsXCJoZWlnaHRcIjowLjYzNTk3LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4ODQ3XCI6e1wiZGVwdGhcIjowLjAzNTE3LFwiaGVpZ2h0XCI6MC41NDk4NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODg0OFwiOntcImRlcHRoXCI6MC4wMzUxNyxcImhlaWdodFwiOjAuNTQ5ODYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg4NThcIjp7XCJkZXB0aFwiOjAuMDgxOTgsXCJoZWlnaHRcIjowLjU4MTk4LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4ODU5XCI6e1wiZGVwdGhcIjowLjA4MTk4LFwiaGVpZ2h0XCI6MC41ODE5OCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODg2MVwiOntcImRlcHRoXCI6MC4wODE5OCxcImhlaWdodFwiOjAuNTgxOTgsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg4NjJcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjc1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4ODYzXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY3NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODg2NFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42NzUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg4NjVcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjc1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4ODcyXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5MjI0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4ODczXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5MjI0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4ODc0XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5MjI0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4ODc2XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4ODg5LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4ODc3XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4ODg5LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4ODc4XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4ODg5LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4ODc5XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4ODg5LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4ODgyXCI6e1wiZGVwdGhcIjowLjAzNTE3LFwiaGVpZ2h0XCI6MC41NDk4NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODg4M1wiOntcImRlcHRoXCI6MC4wMzUxNyxcImhlaWdodFwiOjAuNTQ5ODYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg4ODRcIjp7XCJkZXB0aFwiOjAuMTM2NjcsXCJoZWlnaHRcIjowLjYzNjY3LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4ODg1XCI6e1wiZGVwdGhcIjowLjEzNjY3LFwiaGVpZ2h0XCI6MC42MzY2NyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODg4OFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC41NDk4NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODg5MFwiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg4OTFcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjY5MjI0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4ODkyXCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC42OTIyNCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODlcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjg4ODksXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg5MDFcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNTQ5ODYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg5MDNcIjp7XCJkZXB0aFwiOjAuMDgxNjcsXCJoZWlnaHRcIjowLjU4MTY3LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4OTA1XCI6e1wiZGVwdGhcIjowLjA4MTY3LFwiaGVpZ2h0XCI6MC41ODE2NyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODkwNlwiOntcImRlcHRoXCI6MC4wODE2NyxcImhlaWdodFwiOjAuNTgxNjcsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg5MDdcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjkyMjQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg5MDhcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjkyMjQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg5MDlcIjp7XCJkZXB0aFwiOi0wLjAzNTk4LFwiaGVpZ2h0XCI6MC40NjQwMixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODkxMFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC41NDk4NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODkxMVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC41NDk4NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODkxMlwiOntcImRlcHRoXCI6MC4wMzUxNyxcImhlaWdodFwiOjAuNTQ5ODYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg5MTNcIjp7XCJkZXB0aFwiOjAuMDM1MTcsXCJoZWlnaHRcIjowLjU0OTg2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4OTE0XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjU0OTg2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4OTE1XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjU0OTg2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4OTE2XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5MjI0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4OTE4XCI6e1wiZGVwdGhcIjowLjAzOTEsXCJoZWlnaHRcIjowLjUzOTEsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg5MTlcIjp7XCJkZXB0aFwiOjAuMDM5MSxcImhlaWdodFwiOjAuNTM5MSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODkyMFwiOntcImRlcHRoXCI6MC4wMzUxNyxcImhlaWdodFwiOjAuNTQ5ODYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg5MjFcIjp7XCJkZXB0aFwiOjAuMDM1MTcsXCJoZWlnaHRcIjowLjU0OTg2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4OTIyXCI6e1wiZGVwdGhcIjowLjM4NTY5LFwiaGVpZ2h0XCI6MC44ODU2OSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODkyM1wiOntcImRlcHRoXCI6MC4zODU2OSxcImhlaWdodFwiOjAuODg1NjksXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg5MjZcIjp7XCJkZXB0aFwiOjAuMTM2NjcsXCJoZWlnaHRcIjowLjYzNjY3LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4OTI3XCI6e1wiZGVwdGhcIjowLjEzNjY3LFwiaGVpZ2h0XCI6MC42MzY2NyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODkyOFwiOntcImRlcHRoXCI6MC4zMDI3NCxcImhlaWdodFwiOjAuNzkzODMsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg5MjlcIjp7XCJkZXB0aFwiOjAuMzAyNzQsXCJoZWlnaHRcIjowLjc5MzgzLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4OTM0XCI6e1wiZGVwdGhcIjowLjIzMjIyLFwiaGVpZ2h0XCI6MC43NDExMSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODkzNVwiOntcImRlcHRoXCI6MC4yMzIyMixcImhlaWdodFwiOjAuNzQxMTEsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg5MzZcIjp7XCJkZXB0aFwiOjAuMjMyMjIsXCJoZWlnaHRcIjowLjc0MTExLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4OTM3XCI6e1wiZGVwdGhcIjowLjIzMjIyLFwiaGVpZ2h0XCI6MC43NDExMSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODkzOFwiOntcImRlcHRoXCI6MC4yMDU3NixcImhlaWdodFwiOjAuNzA1NzYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg5MzlcIjp7XCJkZXB0aFwiOjAuMjA1NzYsXCJoZWlnaHRcIjowLjcwNTc2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4OTQwXCI6e1wiZGVwdGhcIjowLjMwMjc0LFwiaGVpZ2h0XCI6MC43OTM4MyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODk0MVwiOntcImRlcHRoXCI6MC4zMDI3NCxcImhlaWdodFwiOjAuNzkzODMsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg5OTRcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjY5MjI0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4OTk1XCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC42OTIyNCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTBcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjg4ODksXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjk0MTZcIjp7XCJkZXB0aFwiOjAuMTU1NTksXCJoZWlnaHRcIjowLjY5MjI0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5NDg0XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5MjI0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5NDg4XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5MjI0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5NDkyXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjM3Nzg4LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5NDk2XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjM3Nzg4LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5NTg1XCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC42ODg4OSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTU4NlwiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNzQxMTEsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjk2MzJcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjc1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5NjMzXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY3NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTY1MFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC41NDk4NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTY1MVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC41NDk4NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTY1NFwiOntcImRlcHRoXCI6MC4wMzUxNyxcImhlaWdodFwiOjAuNTQ5ODYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjk2NjBcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNTQ5ODYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjk2NjFcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNTQ5ODYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjk2NjRcIjp7XCJkZXB0aFwiOjAuMDM1MTcsXCJoZWlnaHRcIjowLjU0OTg2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5Njc0XCI6e1wiZGVwdGhcIjowLjExMTExLFwiaGVpZ2h0XCI6MC42OTIyNCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTczM1wiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNjkyMjQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjk4OVwiOntcImRlcHRoXCI6MC4wODE2NyxcImhlaWdodFwiOjAuNTgxNjcsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfX0sXCJNYWluLUJvbGRcIjp7XCIxMDBcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjEwMVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40NDQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTAyXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4xMDkwMyxcInNrZXdcIjowLjB9LFwiMTAyMTZcIjp7XCJkZXB0aFwiOjAuMjUsXCJoZWlnaHRcIjowLjc1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIxMDIxN1wiOntcImRlcHRoXCI6MC4yNSxcImhlaWdodFwiOjAuNzUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjEwM1wiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNDQ0NDQsXCJpdGFsaWNcIjowLjAxNTk3LFwic2tld1wiOjAuMH0sXCIxMDRcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjEwNVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTA2XCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTA3XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIxMDhcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjEwODE1XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4NjExLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIxMDlcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDQ0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjEwOTI3XCI6e1wiZGVwdGhcIjowLjE5NjY3LFwiaGVpZ2h0XCI6MC42OTY2NyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTA5MjhcIjp7XCJkZXB0aFwiOjAuMTk2NjcsXCJoZWlnaHRcIjowLjY5NjY3LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIxMTBcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDQ0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjExMVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40NDQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTEyXCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC40NDQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTEzXCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC40NDQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTE0XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQ0NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIxMTVcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDQ0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjExNlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42MzQ5MixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTE3XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQ0NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIxMThcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDQ0NDQsXCJpdGFsaWNcIjowLjAxNTk3LFwic2tld1wiOjAuMH0sXCIxMTlcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDQ0NDQsXCJpdGFsaWNcIjowLjAxNTk3LFwic2tld1wiOjAuMH0sXCIxMjBcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDQ0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjEyMVwiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNDQ0NDQsXCJpdGFsaWNcIjowLjAxNTk3LFwic2tld1wiOjAuMH0sXCIxMjJcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDQ0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjEyM1wiOntcImRlcHRoXCI6MC4yNSxcImhlaWdodFwiOjAuNzUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjEyNFwiOntcImRlcHRoXCI6MC4yNSxcImhlaWdodFwiOjAuNzUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjEyNVwiOntcImRlcHRoXCI6MC4yNSxcImhlaWdodFwiOjAuNzUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjEyNlwiOntcImRlcHRoXCI6MC4zNSxcImhlaWdodFwiOjAuMzQ0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjE2OFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTcyXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQ0NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIxNzVcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNTk2MTEsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjE3NlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTc3XCI6e1wiZGVwdGhcIjowLjEzMzMzLFwiaGVpZ2h0XCI6MC42MzMzMyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTgwXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIyMTVcIjp7XCJkZXB0aFwiOjAuMTMzMzMsXCJoZWlnaHRcIjowLjYzMzMzLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIyNDdcIjp7XCJkZXB0aFwiOjAuMTMzMzMsXCJoZWlnaHRcIjowLjYzMzMzLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIzMDVcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDQ0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjMzXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIzNFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMzVcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIzNlwiOntcImRlcHRoXCI6MC4wNTU1NixcImhlaWdodFwiOjAuNzUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjM3XCI6e1wiZGVwdGhcIjowLjA1NTU2LFwiaGVpZ2h0XCI6MC43NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMzhcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjM5XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI0MFwiOntcImRlcHRoXCI6MC4yNSxcImhlaWdodFwiOjAuNzUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjQxXCI6e1wiZGVwdGhcIjowLjI1LFwiaGVpZ2h0XCI6MC43NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNDJcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNzUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjQzXCI6e1wiZGVwdGhcIjowLjEzMzMzLFwiaGVpZ2h0XCI6MC42MzMzMyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNDRcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjE1NTU2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI0NVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40NDQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNDZcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuMTU1NTYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjQ3XCI6e1wiZGVwdGhcIjowLjI1LFwiaGVpZ2h0XCI6MC43NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNDhcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjQ0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjQ5XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY0NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI1MFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42NDQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNTFcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjQ0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjUyXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY0NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI1M1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42NDQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNTRcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjQ0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjU1XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY0NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI1NlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42NDQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNTY3XCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC40NDQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNTdcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjQ0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjU4XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQ0NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI1OVwiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNDQ0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjYwXCI6e1wiZGVwdGhcIjowLjA4NTU2LFwiaGVpZ2h0XCI6MC41ODU1NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNjFcIjp7XCJkZXB0aFwiOi0wLjEwODg5LFwiaGVpZ2h0XCI6MC4zOTExMSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNjJcIjp7XCJkZXB0aFwiOjAuMDg1NTYsXCJoZWlnaHRcIjowLjU4NTU2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI2M1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNjRcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjY1XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4NjExLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI2NlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODYxMSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNjdcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjg2MTEsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjY4XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4NjExLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI2OVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODYxMSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNzBcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjg2MTEsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjcxXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4NjExLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI3MTBcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjcxMVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42MzE5NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNzEzXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjU5NjExLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI3MTRcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjcxNVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNzJcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjg2MTEsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjcyOFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNzI5XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI3M1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODYxMSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNzMwXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI3MzJcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjc0XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4NjExLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI3NVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODYxMSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNzZcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjg2MTEsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjc2OFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNzY5XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI3N1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODYxMSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNzcwXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI3NzFcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjc3MlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC41OTYxMSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNzc0XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI3NzVcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjc3NlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNzc4XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI3NzlcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjc4XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4NjExLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI3ODBcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjMxOTQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjc5XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4NjExLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4MFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODYxMSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODFcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjY4NjExLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4MlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODYxMSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODIxMVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40NDQ0NCxcIml0YWxpY1wiOjAuMDMxOTQsXCJza2V3XCI6MC4wfSxcIjgyMTJcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDQ0NDQsXCJpdGFsaWNcIjowLjAzMTk0LFwic2tld1wiOjAuMH0sXCI4MjE2XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4MjE3XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4MjIwXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4MjIxXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4MjI0XCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODIyNVwiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjgyNFwiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjgyNDJcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNTU1NTYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjgzXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4NjExLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODYxMSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODQwN1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC43MjQ0NCxcIml0YWxpY1wiOjAuMTU0ODYsXCJza2V3XCI6MC4wfSxcIjg0NjNcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg0NjVcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg0NjdcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg0NzJcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjQ0NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NDc2XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODYxMSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODUwMVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODU5MlwiOntcImRlcHRoXCI6LTAuMTA4ODksXCJoZWlnaHRcIjowLjM5MTExLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NTkzXCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODU5NFwiOntcImRlcHRoXCI6LTAuMTA4ODksXCJoZWlnaHRcIjowLjM5MTExLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NTk1XCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODU5NlwiOntcImRlcHRoXCI6LTAuMTA4ODksXCJoZWlnaHRcIjowLjM5MTExLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NTk3XCI6e1wiZGVwdGhcIjowLjI1LFwiaGVpZ2h0XCI6MC43NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODU5OFwiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg1OTlcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODYxMSxcIml0YWxpY1wiOjAuMDE1OTcsXCJza2V3XCI6MC4wfSxcIjg2MDBcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NjAxXCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODYzNlwiOntcImRlcHRoXCI6LTAuMTA4ODksXCJoZWlnaHRcIjowLjM5MTExLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NjM3XCI6e1wiZGVwdGhcIjotMC4xMDg4OSxcImhlaWdodFwiOjAuMzkxMTEsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg2NDBcIjp7XCJkZXB0aFwiOi0wLjEwODg5LFwiaGVpZ2h0XCI6MC4zOTExMSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODY0MVwiOntcImRlcHRoXCI6LTAuMTA4ODksXCJoZWlnaHRcIjowLjM5MTExLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NjU2XCI6e1wiZGVwdGhcIjotMC4xMDg4OSxcImhlaWdodFwiOjAuMzkxMTEsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg2NTdcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NjU4XCI6e1wiZGVwdGhcIjotMC4xMDg4OSxcImhlaWdodFwiOjAuMzkxMTEsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg2NTlcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NjYwXCI6e1wiZGVwdGhcIjotMC4xMDg4OSxcImhlaWdodFwiOjAuMzkxMTEsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg2NjFcIjp7XCJkZXB0aFwiOjAuMjUsXCJoZWlnaHRcIjowLjc1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4N1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODYxMSxcIml0YWxpY1wiOjAuMDE1OTcsXCJza2V3XCI6MC4wfSxcIjg3MDRcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg3MDZcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjA2Mzg5LFwic2tld1wiOjAuMH0sXCI4NzA3XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NzA5XCI6e1wiZGVwdGhcIjowLjA1NTU2LFwiaGVpZ2h0XCI6MC43NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODcxMVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODYxMSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODcxMlwiOntcImRlcHRoXCI6MC4wODU1NixcImhlaWdodFwiOjAuNTg1NTYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg3MTVcIjp7XCJkZXB0aFwiOjAuMDg1NTYsXCJoZWlnaHRcIjowLjU4NTU2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NzIyXCI6e1wiZGVwdGhcIjowLjEzMzMzLFwiaGVpZ2h0XCI6MC42MzMzMyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODcyM1wiOntcImRlcHRoXCI6MC4xMzMzMyxcImhlaWdodFwiOjAuNjMzMzMsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg3MjVcIjp7XCJkZXB0aFwiOjAuMjUsXCJoZWlnaHRcIjowLjc1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NzI2XCI6e1wiZGVwdGhcIjowLjI1LFwiaGVpZ2h0XCI6MC43NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODcyN1wiOntcImRlcHRoXCI6LTAuMDI3NzgsXCJoZWlnaHRcIjowLjQ3MjIyLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NzI4XCI6e1wiZGVwdGhcIjotMC4wMjYzOSxcImhlaWdodFwiOjAuNDczNjEsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg3MjlcIjp7XCJkZXB0aFwiOi0wLjAyNjM5LFwiaGVpZ2h0XCI6MC40NzM2MSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODczMFwiOntcImRlcHRoXCI6MC4xOCxcImhlaWdodFwiOjAuODIsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg3MzNcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDQ0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg3MzRcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDQ0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg3MzZcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjkyMjQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg3MzlcIjp7XCJkZXB0aFwiOjAuMjUsXCJoZWlnaHRcIjowLjc1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NzQxXCI6e1wiZGVwdGhcIjowLjI1LFwiaGVpZ2h0XCI6MC43NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODc0M1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC41NTU1NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODc0NFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC41NTU1NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODc0NVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC41NTU1NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODc0NlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC41NTU1NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODc0N1wiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjEyNzc4LFwic2tld1wiOjAuMH0sXCI4NzY0XCI6e1wiZGVwdGhcIjotMC4xMDg4OSxcImhlaWdodFwiOjAuMzkxMTEsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg3NjhcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NzcxXCI6e1wiZGVwdGhcIjowLjAwMjIyLFwiaGVpZ2h0XCI6MC41MDIyMixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODc3NlwiOntcImRlcHRoXCI6MC4wMjQ0NCxcImhlaWdodFwiOjAuNTI0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg3ODFcIjp7XCJkZXB0aFwiOjAuMDAyMjIsXCJoZWlnaHRcIjowLjUwMjIyLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4OFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODYxMSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODgwMVwiOntcImRlcHRoXCI6MC4wMDIyMixcImhlaWdodFwiOjAuNTAyMjIsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg4MDRcIjp7XCJkZXB0aFwiOjAuMTk2NjcsXCJoZWlnaHRcIjowLjY5NjY3LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4ODA1XCI6e1wiZGVwdGhcIjowLjE5NjY3LFwiaGVpZ2h0XCI6MC42OTY2NyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODgxMFwiOntcImRlcHRoXCI6MC4wODU1NixcImhlaWdodFwiOjAuNTg1NTYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg4MTFcIjp7XCJkZXB0aFwiOjAuMDg1NTYsXCJoZWlnaHRcIjowLjU4NTU2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4ODI2XCI6e1wiZGVwdGhcIjowLjA4NTU2LFwiaGVpZ2h0XCI6MC41ODU1NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODgyN1wiOntcImRlcHRoXCI6MC4wODU1NixcImhlaWdodFwiOjAuNTg1NTYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg4MzRcIjp7XCJkZXB0aFwiOjAuMDg1NTYsXCJoZWlnaHRcIjowLjU4NTU2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4ODM1XCI6e1wiZGVwdGhcIjowLjA4NTU2LFwiaGVpZ2h0XCI6MC41ODU1NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODgzOFwiOntcImRlcHRoXCI6MC4xOTY2NyxcImhlaWdodFwiOjAuNjk2NjcsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg4MzlcIjp7XCJkZXB0aFwiOjAuMTk2NjcsXCJoZWlnaHRcIjowLjY5NjY3LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4ODQ2XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjU1NTU2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4ODQ5XCI6e1wiZGVwdGhcIjowLjE5NjY3LFwiaGVpZ2h0XCI6MC42OTY2NyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODg1MFwiOntcImRlcHRoXCI6MC4xOTY2NyxcImhlaWdodFwiOjAuNjk2NjcsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg4NTFcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNTU1NTYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg4NTJcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNTU1NTYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg4NTNcIjp7XCJkZXB0aFwiOjAuMTMzMzMsXCJoZWlnaHRcIjowLjYzMzMzLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4ODU0XCI6e1wiZGVwdGhcIjowLjEzMzMzLFwiaGVpZ2h0XCI6MC42MzMzMyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODg1NVwiOntcImRlcHRoXCI6MC4xMzMzMyxcImhlaWdodFwiOjAuNjMzMzMsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg4NTZcIjp7XCJkZXB0aFwiOjAuMTMzMzMsXCJoZWlnaHRcIjowLjYzMzMzLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4ODU3XCI6e1wiZGVwdGhcIjowLjEzMzMzLFwiaGVpZ2h0XCI6MC42MzMzMyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODg2NlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODg2N1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODg2OFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODg2OVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODlcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjg2MTEsXCJpdGFsaWNcIjowLjAyODc1LFwic2tld1wiOjAuMH0sXCI4OTAwXCI6e1wiZGVwdGhcIjotMC4wMjYzOSxcImhlaWdodFwiOjAuNDczNjEsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg5MDFcIjp7XCJkZXB0aFwiOi0wLjAyNjM5LFwiaGVpZ2h0XCI6MC40NzM2MSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODkwMlwiOntcImRlcHRoXCI6LTAuMDI3NzgsXCJoZWlnaHRcIjowLjQ3MjIyLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4OTY4XCI6e1wiZGVwdGhcIjowLjI1LFwiaGVpZ2h0XCI6MC43NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODk2OVwiOntcImRlcHRoXCI6MC4yNSxcImhlaWdodFwiOjAuNzUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg5NzBcIjp7XCJkZXB0aFwiOjAuMjUsXCJoZWlnaHRcIjowLjc1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4OTcxXCI6e1wiZGVwdGhcIjowLjI1LFwiaGVpZ2h0XCI6MC43NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODk5NFwiOntcImRlcHRoXCI6LTAuMTM4ODksXCJoZWlnaHRcIjowLjM2MTExLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4OTk1XCI6e1wiZGVwdGhcIjotMC4xMzg4OSxcImhlaWdodFwiOjAuMzYxMTEsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjkwXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4NjExLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5MVwiOntcImRlcHRoXCI6MC4yNSxcImhlaWdodFwiOjAuNzUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjkxNVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODYxMSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTE2XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4NjExLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5MlwiOntcImRlcHRoXCI6MC4yNSxcImhlaWdodFwiOjAuNzUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjkyMFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODYxMSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTIzXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4NjExLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5MjZcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjg2MTEsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjkyOFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODYxMSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTNcIjp7XCJkZXB0aFwiOjAuMjUsXCJoZWlnaHRcIjowLjc1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5MzFcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjg2MTEsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjkzM1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODYxMSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTM0XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4NjExLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5MzZcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjg2MTEsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjkzN1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODYxMSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTRcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjk1XCI6e1wiZGVwdGhcIjowLjMxLFwiaGVpZ2h0XCI6MC4xMzQ0NCxcIml0YWxpY1wiOjAuMDMxOTQsXCJza2V3XCI6MC4wfSxcIjk2XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5NjUxXCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTY1N1wiOntcImRlcHRoXCI6LTAuMDI3NzgsXCJoZWlnaHRcIjowLjQ3MjIyLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5NjYxXCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTY2N1wiOntcImRlcHRoXCI6LTAuMDI3NzgsXCJoZWlnaHRcIjowLjQ3MjIyLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5N1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40NDQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTcxMVwiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjk4XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5ODI0XCI6e1wiZGVwdGhcIjowLjEyOTYzLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTgyNVwiOntcImRlcHRoXCI6MC4xMjk2MyxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjk4MjZcIjp7XCJkZXB0aFwiOjAuMTI5NjMsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5ODI3XCI6e1wiZGVwdGhcIjowLjEyOTYzLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTgzN1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC43NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTgzOFwiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjk4MzlcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5OVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40NDQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9fSxcIk1haW4tSXRhbGljXCI6e1wiMTAwXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4xMDMzMyxcInNrZXdcIjowLjB9LFwiMTAxXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wNzUxNCxcInNrZXdcIjowLjB9LFwiMTAyXCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMjExOTQsXCJza2V3XCI6MC4wfSxcIjEwM1wiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjA4ODQ3LFwic2tld1wiOjAuMH0sXCIxMDRcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjA3NjcxLFwic2tld1wiOjAuMH0sXCIxMDVcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjU1MzYsXCJpdGFsaWNcIjowLjEwMTksXCJza2V3XCI6MC4wfSxcIjEwNlwiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNjU1MzYsXCJpdGFsaWNcIjowLjE0NDY3LFwic2tld1wiOjAuMH0sXCIxMDdcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjEwNzY0LFwic2tld1wiOjAuMH0sXCIxMDhcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjEwMzMzLFwic2tld1wiOjAuMH0sXCIxMDlcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjA3NjcxLFwic2tld1wiOjAuMH0sXCIxMTBcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjA3NjcxLFwic2tld1wiOjAuMH0sXCIxMTFcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjA2MzEyLFwic2tld1wiOjAuMH0sXCIxMTJcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wNjMxMixcInNrZXdcIjowLjB9LFwiMTEzXCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMDg4NDcsXCJza2V3XCI6MC4wfSxcIjExNFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMTA3NjQsXCJza2V3XCI6MC4wfSxcIjExNVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMDgyMDgsXCJza2V3XCI6MC4wfSxcIjExNlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42MTUwOCxcIml0YWxpY1wiOjAuMDk0ODYsXCJza2V3XCI6MC4wfSxcIjExN1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMDc2NzEsXCJza2V3XCI6MC4wfSxcIjExOFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMTA3NjQsXCJza2V3XCI6MC4wfSxcIjExOVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMTA3NjQsXCJza2V3XCI6MC4wfSxcIjEyMFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMTIwNDIsXCJza2V3XCI6MC4wfSxcIjEyMVwiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjA4ODQ3LFwic2tld1wiOjAuMH0sXCIxMjJcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjEyMjkyLFwic2tld1wiOjAuMH0sXCIxMjZcIjp7XCJkZXB0aFwiOjAuMzUsXCJoZWlnaHRcIjowLjMxNzg2LFwiaXRhbGljXCI6MC4xMTU4NSxcInNrZXdcIjowLjB9LFwiMTYzXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIzMDVcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjA3NjcxLFwic2tld1wiOjAuMH0sXCIzM1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMTI0MTcsXCJza2V3XCI6MC4wfSxcIjM0XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wNjk2MSxcInNrZXdcIjowLjB9LFwiMzVcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wNjYxNixcInNrZXdcIjowLjB9LFwiMzdcIjp7XCJkZXB0aFwiOjAuMDU1NTYsXCJoZWlnaHRcIjowLjc1LFwiaXRhbGljXCI6MC4xMzYzOSxcInNrZXdcIjowLjB9LFwiMzhcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjA5Njk0LFwic2tld1wiOjAuMH0sXCIzOVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMTI0MTcsXCJza2V3XCI6MC4wfSxcIjQwXCI6e1wiZGVwdGhcIjowLjI1LFwiaGVpZ2h0XCI6MC43NSxcIml0YWxpY1wiOjAuMTYxOTQsXCJza2V3XCI6MC4wfSxcIjQxXCI6e1wiZGVwdGhcIjowLjI1LFwiaGVpZ2h0XCI6MC43NSxcIml0YWxpY1wiOjAuMDM2OTQsXCJza2V3XCI6MC4wfSxcIjQyXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjc1LFwiaXRhbGljXCI6MC4xNDkxNyxcInNrZXdcIjowLjB9LFwiNDNcIjp7XCJkZXB0aFwiOjAuMDU2NjcsXCJoZWlnaHRcIjowLjU2MTY3LFwiaXRhbGljXCI6MC4wMzY5NCxcInNrZXdcIjowLjB9LFwiNDRcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjEwNTU2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI0NVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMDI4MjYsXCJza2V3XCI6MC4wfSxcIjQ2XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjEwNTU2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI0N1wiOntcImRlcHRoXCI6MC4yNSxcImhlaWdodFwiOjAuNzUsXCJpdGFsaWNcIjowLjE2MTk0LFwic2tld1wiOjAuMH0sXCI0OFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42NDQ0NCxcIml0YWxpY1wiOjAuMTM1NTYsXCJza2V3XCI6MC4wfSxcIjQ5XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY0NDQ0LFwiaXRhbGljXCI6MC4xMzU1NixcInNrZXdcIjowLjB9LFwiNTBcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjQ0NDQsXCJpdGFsaWNcIjowLjEzNTU2LFwic2tld1wiOjAuMH0sXCI1MVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42NDQ0NCxcIml0YWxpY1wiOjAuMTM1NTYsXCJza2V3XCI6MC4wfSxcIjUyXCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC42NDQ0NCxcIml0YWxpY1wiOjAuMTM1NTYsXCJza2V3XCI6MC4wfSxcIjUzXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY0NDQ0LFwiaXRhbGljXCI6MC4xMzU1NixcInNrZXdcIjowLjB9LFwiNTRcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjQ0NDQsXCJpdGFsaWNcIjowLjEzNTU2LFwic2tld1wiOjAuMH0sXCI1NVwiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNjQ0NDQsXCJpdGFsaWNcIjowLjEzNTU2LFwic2tld1wiOjAuMH0sXCI1NlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42NDQ0NCxcIml0YWxpY1wiOjAuMTM1NTYsXCJza2V3XCI6MC4wfSxcIjU2N1wiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjAzNzM2LFwic2tld1wiOjAuMH0sXCI1N1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42NDQ0NCxcIml0YWxpY1wiOjAuMTM1NTYsXCJza2V3XCI6MC4wfSxcIjU4XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wNTgyLFwic2tld1wiOjAuMH0sXCI1OVwiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjA1ODIsXCJza2V3XCI6MC4wfSxcIjYxXCI6e1wiZGVwdGhcIjotMC4xMzMxMyxcImhlaWdodFwiOjAuMzY2ODcsXCJpdGFsaWNcIjowLjA2NjE2LFwic2tld1wiOjAuMH0sXCI2M1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMTIyNSxcInNrZXdcIjowLjB9LFwiNjRcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjA5NTk3LFwic2tld1wiOjAuMH0sXCI2NVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNjZcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjEwMjU3LFwic2tld1wiOjAuMH0sXCI2N1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMTQ1MjgsXCJza2V3XCI6MC4wfSxcIjY4XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4wOTQwMyxcInNrZXdcIjowLjB9LFwiNjlcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjEyMDI4LFwic2tld1wiOjAuMH0sXCI3MFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMTMzMDUsXCJza2V3XCI6MC4wfSxcIjcxXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4wODcyMixcInNrZXdcIjowLjB9LFwiNzJcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjE2Mzg5LFwic2tld1wiOjAuMH0sXCI3M1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMTU4MDYsXCJza2V3XCI6MC4wfSxcIjc0XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4xNDAyOCxcInNrZXdcIjowLjB9LFwiNzVcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjE0NTI4LFwic2tld1wiOjAuMH0sXCI3NlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNzY4XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI3NjlcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjA5Njk0LFwic2tld1wiOjAuMH0sXCI3N1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMTYzODksXCJza2V3XCI6MC4wfSxcIjc3MFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMDY2NDYsXCJza2V3XCI6MC4wfSxcIjc3MVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42Njc4NixcIml0YWxpY1wiOjAuMTE1ODUsXCJza2V3XCI6MC4wfSxcIjc3MlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC41NjE2NyxcIml0YWxpY1wiOjAuMTAzMzMsXCJza2V3XCI6MC4wfSxcIjc3NFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMTA4MDYsXCJza2V3XCI6MC4wfSxcIjc3NVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42Njc4NixcIml0YWxpY1wiOjAuMTE3NTIsXCJza2V3XCI6MC4wfSxcIjc3NlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42Njc4NixcIml0YWxpY1wiOjAuMTA0NzQsXCJza2V3XCI6MC4wfSxcIjc3OFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNzc5XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4xMjI1LFwic2tld1wiOjAuMH0sXCI3OFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMTYzODksXCJza2V3XCI6MC4wfSxcIjc4MFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42Mjg0NyxcIml0YWxpY1wiOjAuMDgyOTUsXCJza2V3XCI6MC4wfSxcIjc5XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4wOTQwMyxcInNrZXdcIjowLjB9LFwiODBcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjEwMjU3LFwic2tld1wiOjAuMH0sXCI4MVwiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjA5NDAzLFwic2tld1wiOjAuMH0sXCI4MlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMDM4NjgsXCJza2V3XCI6MC4wfSxcIjgyMTFcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjA5MjA4LFwic2tld1wiOjAuMH0sXCI4MjEyXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wOTIwOCxcInNrZXdcIjowLjB9LFwiODIxNlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMTI0MTcsXCJza2V3XCI6MC4wfSxcIjgyMTdcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjEyNDE3LFwic2tld1wiOjAuMH0sXCI4MjIwXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4xNjg1LFwic2tld1wiOjAuMH0sXCI4MjIxXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wNjk2MSxcInNrZXdcIjowLjB9LFwiODNcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjExOTcyLFwic2tld1wiOjAuMH0sXCI4NFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMTMzMDUsXCJza2V3XCI6MC4wfSxcIjg0NjNcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjg4ODksXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg1XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4xNjM4OSxcInNrZXdcIjowLjB9LFwiODZcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjE4MzYxLFwic2tld1wiOjAuMH0sXCI4N1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMTgzNjEsXCJza2V3XCI6MC4wfSxcIjg4XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4xNTgwNixcInNrZXdcIjowLjB9LFwiODlcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjE5MzgzLFwic2tld1wiOjAuMH0sXCI5MFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMTQ1MjgsXCJza2V3XCI6MC4wfSxcIjkxXCI6e1wiZGVwdGhcIjowLjI1LFwiaGVpZ2h0XCI6MC43NSxcIml0YWxpY1wiOjAuMTg3NSxcInNrZXdcIjowLjB9LFwiOTE1XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4xMzMwNSxcInNrZXdcIjowLjB9LFwiOTE2XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5MjBcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjA5NDAzLFwic2tld1wiOjAuMH0sXCI5MjNcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjkyNlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMTUyOTQsXCJza2V3XCI6MC4wfSxcIjkyOFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMTYzODksXCJza2V3XCI6MC4wfSxcIjkzXCI6e1wiZGVwdGhcIjowLjI1LFwiaGVpZ2h0XCI6MC43NSxcIml0YWxpY1wiOjAuMTA1MjgsXCJza2V3XCI6MC4wfSxcIjkzMVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMTIwMjgsXCJza2V3XCI6MC4wfSxcIjkzM1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMTExMTEsXCJza2V3XCI6MC4wfSxcIjkzNFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMDU5ODYsXCJza2V3XCI6MC4wfSxcIjkzNlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMTExMTEsXCJza2V3XCI6MC4wfSxcIjkzN1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMTAyNTcsXCJza2V3XCI6MC4wfSxcIjk0XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wNjY0NixcInNrZXdcIjowLjB9LFwiOTVcIjp7XCJkZXB0aFwiOjAuMzEsXCJoZWlnaHRcIjowLjEyMDU2LFwiaXRhbGljXCI6MC4wOTIwOCxcInNrZXdcIjowLjB9LFwiOTdcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjA3NjcxLFwic2tld1wiOjAuMH0sXCI5OFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMDYzMTIsXCJza2V3XCI6MC4wfSxcIjk5XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wNTY1MyxcInNrZXdcIjowLjB9fSxcIk1haW4tUmVndWxhclwiOntcIjMyXCI6e1wiZGVwdGhcIjotMC4wLFwiaGVpZ2h0XCI6MC4wLFwiaXRhbGljXCI6MCxcInNrZXdcIjowfSxcIjE2MFwiOntcImRlcHRoXCI6LTAuMCxcImhlaWdodFwiOjAuMCxcIml0YWxpY1wiOjAsXCJza2V3XCI6MH0sXCI4MjMwXCI6e1wiZGVwdGhcIjotMC4wLFwiaGVpZ2h0XCI6MC4xMixcIml0YWxpY1wiOjAsXCJza2V3XCI6MH0sXCI4NzczXCI6e1wiZGVwdGhcIjotMC4wMjIsXCJoZWlnaHRcIjowLjU4OSxcIml0YWxpY1wiOjAsXCJza2V3XCI6MH0sXCI4ODAwXCI6e1wiZGVwdGhcIjowLjIxNSxcImhlaWdodFwiOjAuNzE2LFwiaXRhbGljXCI6MCxcInNrZXdcIjowfSxcIjg5NDJcIjp7XCJkZXB0aFwiOjAuMDMsXCJoZWlnaHRcIjowLjksXCJpdGFsaWNcIjowLFwic2tld1wiOjB9LFwiODk0M1wiOntcImRlcHRoXCI6LTAuMTksXCJoZWlnaHRcIjowLjMxLFwiaXRhbGljXCI6MCxcInNrZXdcIjowfSxcIjg5NDVcIjp7XCJkZXB0aFwiOi0wLjEsXCJoZWlnaHRcIjowLjgyLFwiaXRhbGljXCI6MCxcInNrZXdcIjowfSxcIjEwMFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTAxXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIxMDJcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjA3Nzc4LFwic2tld1wiOjAuMH0sXCIxMDIxNlwiOntcImRlcHRoXCI6MC4yNSxcImhlaWdodFwiOjAuNzUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjEwMjE3XCI6e1wiZGVwdGhcIjowLjI1LFwiaGVpZ2h0XCI6MC43NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTAzXCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMDEzODksXCJza2V3XCI6MC4wfSxcIjEwNFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTA1XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY2Nzg2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIxMDZcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjY2Nzg2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIxMDdcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjEwOFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTA4MTVcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjEwOVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTA5MjdcIjp7XCJkZXB0aFwiOjAuMTM1OTcsXCJoZWlnaHRcIjowLjYzNTk3LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIxMDkyOFwiOntcImRlcHRoXCI6MC4xMzU5NyxcImhlaWdodFwiOjAuNjM1OTcsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjExMFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTExXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIxMTJcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIxMTNcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIxMTRcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjExNVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTE2XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjYxNTA4LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIxMTdcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjExOFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMDEzODksXCJza2V3XCI6MC4wfSxcIjExOVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMDEzODksXCJza2V3XCI6MC4wfSxcIjEyMFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTIxXCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMDEzODksXCJza2V3XCI6MC4wfSxcIjEyMlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTIzXCI6e1wiZGVwdGhcIjowLjI1LFwiaGVpZ2h0XCI6MC43NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTI0XCI6e1wiZGVwdGhcIjowLjI1LFwiaGVpZ2h0XCI6MC43NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTI1XCI6e1wiZGVwdGhcIjowLjI1LFwiaGVpZ2h0XCI6MC43NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTI2XCI6e1wiZGVwdGhcIjowLjM1LFwiaGVpZ2h0XCI6MC4zMTc4NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTY4XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY2Nzg2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIxNzJcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjE3NVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC41Njc3OCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTc2XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIxNzdcIjp7XCJkZXB0aFwiOjAuMDgzMzMsXCJoZWlnaHRcIjowLjU4MzMzLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIxODBcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjIxNVwiOntcImRlcHRoXCI6MC4wODMzMyxcImhlaWdodFwiOjAuNTgzMzMsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjI0N1wiOntcImRlcHRoXCI6MC4wODMzMyxcImhlaWdodFwiOjAuNTgzMzMsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjMwNVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMzNcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjM0XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIzNVwiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjM2XCI6e1wiZGVwdGhcIjowLjA1NTU2LFwiaGVpZ2h0XCI6MC43NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMzdcIjp7XCJkZXB0aFwiOjAuMDU1NTYsXCJoZWlnaHRcIjowLjc1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIzOFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMzlcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjQwXCI6e1wiZGVwdGhcIjowLjI1LFwiaGVpZ2h0XCI6MC43NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNDFcIjp7XCJkZXB0aFwiOjAuMjUsXCJoZWlnaHRcIjowLjc1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI0MlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC43NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNDNcIjp7XCJkZXB0aFwiOjAuMDgzMzMsXCJoZWlnaHRcIjowLjU4MzMzLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI0NFwiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuMTA1NTYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjQ1XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI0NlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC4xMDU1NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNDdcIjp7XCJkZXB0aFwiOjAuMjUsXCJoZWlnaHRcIjowLjc1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI0OFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42NDQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNDlcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjQ0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjUwXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY0NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI1MVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42NDQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNTJcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjQ0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjUzXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY0NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI1NFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42NDQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNTVcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjQ0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjU2XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY0NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI1NjdcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI1N1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42NDQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNThcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjU5XCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNjBcIjp7XCJkZXB0aFwiOjAuMDM5MSxcImhlaWdodFwiOjAuNTM5MSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNjFcIjp7XCJkZXB0aFwiOi0wLjEzMzEzLFwiaGVpZ2h0XCI6MC4zNjY4NyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNjJcIjp7XCJkZXB0aFwiOjAuMDM5MSxcImhlaWdodFwiOjAuNTM5MSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNjNcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjY0XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI2NVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNjZcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjY3XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI2OFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNjlcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjcwXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI3MVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNzEwXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI3MTFcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjI4NDcsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjcxM1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC41Njc3OCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNzE0XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI3MTVcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjcyXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI3MjhcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjcyOVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42Njc4NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNzNcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjczMFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNzMyXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY2Nzg2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI3NFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNzVcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjc2XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI3NjhcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjc2OVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNzdcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjc3MFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNzcxXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY2Nzg2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI3NzJcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNTY3NzgsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjc3NFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNzc1XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY2Nzg2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI3NzZcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjY3ODYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjc3OFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNzc5XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI3OFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNzgwXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjYyODQ3LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI3OVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODBcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjgxXCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODJcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjgyMTFcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjAyNzc4LFwic2tld1wiOjAuMH0sXCI4MjEyXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wMjc3OCxcInNrZXdcIjowLjB9LFwiODIxNlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODIxN1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODIyMFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODIyMVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODIyNFwiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjgyMjVcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4MjRcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4MjQyXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjU1NTU2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4M1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODRcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg0MDdcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNzE0NDQsXCJpdGFsaWNcIjowLjE1MzgyLFwic2tld1wiOjAuMH0sXCI4NDYzXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4ODg5LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NDY1XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NDY3XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMTExMTF9LFwiODQ3MlwiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4xMTExMX0sXCI4NDc2XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODUwMVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODU5MlwiOntcImRlcHRoXCI6LTAuMTMzMTMsXCJoZWlnaHRcIjowLjM2Njg3LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NTkzXCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODU5NFwiOntcImRlcHRoXCI6LTAuMTMzMTMsXCJoZWlnaHRcIjowLjM2Njg3LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NTk1XCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODU5NlwiOntcImRlcHRoXCI6LTAuMTMzMTMsXCJoZWlnaHRcIjowLjM2Njg3LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NTk3XCI6e1wiZGVwdGhcIjowLjI1LFwiaGVpZ2h0XCI6MC43NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODU5OFwiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg1OTlcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMDEzODksXCJza2V3XCI6MC4wfSxcIjg2MDBcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NjAxXCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODYzNlwiOntcImRlcHRoXCI6LTAuMTMzMTMsXCJoZWlnaHRcIjowLjM2Njg3LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NjM3XCI6e1wiZGVwdGhcIjotMC4xMzMxMyxcImhlaWdodFwiOjAuMzY2ODcsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg2NDBcIjp7XCJkZXB0aFwiOi0wLjEzMzEzLFwiaGVpZ2h0XCI6MC4zNjY4NyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODY0MVwiOntcImRlcHRoXCI6LTAuMTMzMTMsXCJoZWlnaHRcIjowLjM2Njg3LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NjU2XCI6e1wiZGVwdGhcIjotMC4xMzMxMyxcImhlaWdodFwiOjAuMzY2ODcsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg2NTdcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NjU4XCI6e1wiZGVwdGhcIjotMC4xMzMxMyxcImhlaWdodFwiOjAuMzY2ODcsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg2NTlcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NjYwXCI6e1wiZGVwdGhcIjotMC4xMzMxMyxcImhlaWdodFwiOjAuMzY2ODcsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg2NjFcIjp7XCJkZXB0aFwiOjAuMjUsXCJoZWlnaHRcIjowLjc1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4N1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMDEzODksXCJza2V3XCI6MC4wfSxcIjg3MDRcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg3MDZcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjA1NTU2LFwic2tld1wiOjAuMDgzMzR9LFwiODcwN1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODcwOVwiOntcImRlcHRoXCI6MC4wNTU1NixcImhlaWdodFwiOjAuNzUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg3MTFcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg3MTJcIjp7XCJkZXB0aFwiOjAuMDM5MSxcImhlaWdodFwiOjAuNTM5MSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODcxNVwiOntcImRlcHRoXCI6MC4wMzkxLFwiaGVpZ2h0XCI6MC41MzkxLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NzIyXCI6e1wiZGVwdGhcIjowLjA4MzMzLFwiaGVpZ2h0XCI6MC41ODMzMyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODcyM1wiOntcImRlcHRoXCI6MC4wODMzMyxcImhlaWdodFwiOjAuNTgzMzMsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg3MjVcIjp7XCJkZXB0aFwiOjAuMjUsXCJoZWlnaHRcIjowLjc1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NzI2XCI6e1wiZGVwdGhcIjowLjI1LFwiaGVpZ2h0XCI6MC43NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODcyN1wiOntcImRlcHRoXCI6LTAuMDM0NzIsXCJoZWlnaHRcIjowLjQ2NTI4LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NzI4XCI6e1wiZGVwdGhcIjotMC4wNTU1NSxcImhlaWdodFwiOjAuNDQ0NDUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg3MjlcIjp7XCJkZXB0aFwiOi0wLjA1NTU1LFwiaGVpZ2h0XCI6MC40NDQ0NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODczMFwiOntcImRlcHRoXCI6MC4yLFwiaGVpZ2h0XCI6MC44LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NzMzXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NzM0XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NzM2XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5MjI0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NzM5XCI6e1wiZGVwdGhcIjowLjI1LFwiaGVpZ2h0XCI6MC43NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODc0MVwiOntcImRlcHRoXCI6MC4yNSxcImhlaWdodFwiOjAuNzUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg3NDNcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNTU1NTYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg3NDRcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNTU1NTYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg3NDVcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNTU1NTYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg3NDZcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNTU1NTYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg3NDdcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4xMTExMSxcInNrZXdcIjowLjB9LFwiODc2NFwiOntcImRlcHRoXCI6LTAuMTMzMTMsXCJoZWlnaHRcIjowLjM2Njg3LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NzY4XCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODc3MVwiOntcImRlcHRoXCI6LTAuMDM2MjUsXCJoZWlnaHRcIjowLjQ2Mzc1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4Nzc2XCI6e1wiZGVwdGhcIjotMC4wMTY4OCxcImhlaWdodFwiOjAuNDgzMTIsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg3ODFcIjp7XCJkZXB0aFwiOi0wLjAzNjI1LFwiaGVpZ2h0XCI6MC40NjM3NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODhcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg4MDFcIjp7XCJkZXB0aFwiOi0wLjAzNjI1LFwiaGVpZ2h0XCI6MC40NjM3NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODgwNFwiOntcImRlcHRoXCI6MC4xMzU5NyxcImhlaWdodFwiOjAuNjM1OTcsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg4MDVcIjp7XCJkZXB0aFwiOjAuMTM1OTcsXCJoZWlnaHRcIjowLjYzNTk3LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4ODEwXCI6e1wiZGVwdGhcIjowLjAzOTEsXCJoZWlnaHRcIjowLjUzOTEsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg4MTFcIjp7XCJkZXB0aFwiOjAuMDM5MSxcImhlaWdodFwiOjAuNTM5MSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODgyNlwiOntcImRlcHRoXCI6MC4wMzkxLFwiaGVpZ2h0XCI6MC41MzkxLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4ODI3XCI6e1wiZGVwdGhcIjowLjAzOTEsXCJoZWlnaHRcIjowLjUzOTEsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg4MzRcIjp7XCJkZXB0aFwiOjAuMDM5MSxcImhlaWdodFwiOjAuNTM5MSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODgzNVwiOntcImRlcHRoXCI6MC4wMzkxLFwiaGVpZ2h0XCI6MC41MzkxLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4ODM4XCI6e1wiZGVwdGhcIjowLjEzNTk3LFwiaGVpZ2h0XCI6MC42MzU5NyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODgzOVwiOntcImRlcHRoXCI6MC4xMzU5NyxcImhlaWdodFwiOjAuNjM1OTcsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg4NDZcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNTU1NTYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg4NDlcIjp7XCJkZXB0aFwiOjAuMTM1OTcsXCJoZWlnaHRcIjowLjYzNTk3LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4ODUwXCI6e1wiZGVwdGhcIjowLjEzNTk3LFwiaGVpZ2h0XCI6MC42MzU5NyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODg1MVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC41NTU1NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODg1MlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC41NTU1NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODg1M1wiOntcImRlcHRoXCI6MC4wODMzMyxcImhlaWdodFwiOjAuNTgzMzMsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg4NTRcIjp7XCJkZXB0aFwiOjAuMDgzMzMsXCJoZWlnaHRcIjowLjU4MzMzLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4ODU1XCI6e1wiZGVwdGhcIjowLjA4MzMzLFwiaGVpZ2h0XCI6MC41ODMzMyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODg1NlwiOntcImRlcHRoXCI6MC4wODMzMyxcImhlaWdodFwiOjAuNTgzMzMsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg4NTdcIjp7XCJkZXB0aFwiOjAuMDgzMzMsXCJoZWlnaHRcIjowLjU4MzMzLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4ODY2XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4ODY3XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4ODY4XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4ODY5XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4OVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMDI1LFwic2tld1wiOjAuMH0sXCI4OTAwXCI6e1wiZGVwdGhcIjotMC4wNTU1NSxcImhlaWdodFwiOjAuNDQ0NDUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg5MDFcIjp7XCJkZXB0aFwiOi0wLjA1NTU1LFwiaGVpZ2h0XCI6MC40NDQ0NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODkwMlwiOntcImRlcHRoXCI6LTAuMDM0NzIsXCJoZWlnaHRcIjowLjQ2NTI4LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4OTY4XCI6e1wiZGVwdGhcIjowLjI1LFwiaGVpZ2h0XCI6MC43NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODk2OVwiOntcImRlcHRoXCI6MC4yNSxcImhlaWdodFwiOjAuNzUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg5NzBcIjp7XCJkZXB0aFwiOjAuMjUsXCJoZWlnaHRcIjowLjc1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4OTcxXCI6e1wiZGVwdGhcIjowLjI1LFwiaGVpZ2h0XCI6MC43NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODk5NFwiOntcImRlcHRoXCI6LTAuMTQyMzYsXCJoZWlnaHRcIjowLjM1NzY0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4OTk1XCI6e1wiZGVwdGhcIjotMC4xNDIzNixcImhlaWdodFwiOjAuMzU3NjQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjkwXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5MVwiOntcImRlcHRoXCI6MC4yNSxcImhlaWdodFwiOjAuNzUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjkxNVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTE2XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5MlwiOntcImRlcHRoXCI6MC4yNSxcImhlaWdodFwiOjAuNzUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjkyMFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTIzXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5MjZcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjkyOFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTNcIjp7XCJkZXB0aFwiOjAuMjUsXCJoZWlnaHRcIjowLjc1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5MzFcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjkzM1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTM0XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5MzZcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjkzN1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTRcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjk1XCI6e1wiZGVwdGhcIjowLjMxLFwiaGVpZ2h0XCI6MC4xMjA1NixcIml0YWxpY1wiOjAuMDI3NzgsXCJza2V3XCI6MC4wfSxcIjk2XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5NjUxXCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTY1N1wiOntcImRlcHRoXCI6LTAuMDM0NzIsXCJoZWlnaHRcIjowLjQ2NTI4LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5NjYxXCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTY2N1wiOntcImRlcHRoXCI6LTAuMDM0NzIsXCJoZWlnaHRcIjowLjQ2NTI4LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5N1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTcxMVwiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjk4XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5ODI0XCI6e1wiZGVwdGhcIjowLjEyOTYzLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTgyNVwiOntcImRlcHRoXCI6MC4xMjk2MyxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjk4MjZcIjp7XCJkZXB0aFwiOjAuMTI5NjMsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5ODI3XCI6e1wiZGVwdGhcIjowLjEyOTYzLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTgzN1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC43NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTgzOFwiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjk4MzlcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5OVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9fSxcIk1hdGgtQm9sZEl0YWxpY1wiOntcIjEwMFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTAwOVwiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNDQ0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjEwMVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40NDQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTAxM1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40NDQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTAyXCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMTEwNDIsXCJza2V3XCI6MC4wfSxcIjEwM1wiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNDQ0NDQsXCJpdGFsaWNcIjowLjAzNzA0LFwic2tld1wiOjAuMH0sXCIxMDRcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjEwNVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTMyNixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTA2XCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC42OTMyNixcIml0YWxpY1wiOjAuMDYyMixcInNrZXdcIjowLjB9LFwiMTA3XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wMTg1MixcInNrZXdcIjowLjB9LFwiMTA4XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wMDg4LFwic2tld1wiOjAuMH0sXCIxMDlcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDQ0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjExMFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40NDQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTExXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQ0NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIxMTJcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjQ0NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIxMTNcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjQ0NDQ0LFwiaXRhbGljXCI6MC4wMzcwNCxcInNrZXdcIjowLjB9LFwiMTE0XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQ0NDQ0LFwiaXRhbGljXCI6MC4wMzE5NCxcInNrZXdcIjowLjB9LFwiMTE1XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQ0NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIxMTZcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjM0OTIsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjExN1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40NDQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTE4XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQ0NDQ0LFwiaXRhbGljXCI6MC4wMzcwNCxcInNrZXdcIjowLjB9LFwiMTE5XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQ0NDQ0LFwiaXRhbGljXCI6MC4wMjc3OCxcInNrZXdcIjowLjB9LFwiMTIwXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQ0NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIxMjFcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjQ0NDQ0LFwiaXRhbGljXCI6MC4wMzcwNCxcInNrZXdcIjowLjB9LFwiMTIyXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQ0NDQ0LFwiaXRhbGljXCI6MC4wNDIxMyxcInNrZXdcIjowLjB9LFwiNDdcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI2NVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODYxMSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNjZcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjg2MTEsXCJpdGFsaWNcIjowLjA0ODM1LFwic2tld1wiOjAuMH0sXCI2N1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODYxMSxcIml0YWxpY1wiOjAuMDY5NzksXCJza2V3XCI6MC4wfSxcIjY4XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4NjExLFwiaXRhbGljXCI6MC4wMzE5NCxcInNrZXdcIjowLjB9LFwiNjlcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjg2MTEsXCJpdGFsaWNcIjowLjA1NDUxLFwic2tld1wiOjAuMH0sXCI3MFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODYxMSxcIml0YWxpY1wiOjAuMTU5NzIsXCJza2V3XCI6MC4wfSxcIjcxXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4NjExLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI3MlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODYxMSxcIml0YWxpY1wiOjAuMDgyMjksXCJza2V3XCI6MC4wfSxcIjczXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4NjExLFwiaXRhbGljXCI6MC4wNzc3OCxcInNrZXdcIjowLjB9LFwiNzRcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjg2MTEsXCJpdGFsaWNcIjowLjEwMDY5LFwic2tld1wiOjAuMH0sXCI3NVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODYxMSxcIml0YWxpY1wiOjAuMDY5NzksXCJza2V3XCI6MC4wfSxcIjc2XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4NjExLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI3N1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODYxMSxcIml0YWxpY1wiOjAuMTE0MjQsXCJza2V3XCI6MC4wfSxcIjc4XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4NjExLFwiaXRhbGljXCI6MC4xMTQyNCxcInNrZXdcIjowLjB9LFwiNzlcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjg2MTEsXCJpdGFsaWNcIjowLjAzMTk0LFwic2tld1wiOjAuMH0sXCI4MFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODYxMSxcIml0YWxpY1wiOjAuMTU5NzIsXCJza2V3XCI6MC4wfSxcIjgxXCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC42ODYxMSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODJcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjg2MTEsXCJpdGFsaWNcIjowLjAwNDIxLFwic2tld1wiOjAuMH0sXCI4M1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODYxMSxcIml0YWxpY1wiOjAuMDUzODIsXCJza2V3XCI6MC4wfSxcIjg0XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4NjExLFwiaXRhbGljXCI6MC4xNTk3MixcInNrZXdcIjowLjB9LFwiODVcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjg2MTEsXCJpdGFsaWNcIjowLjExNDI0LFwic2tld1wiOjAuMH0sXCI4NlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODYxMSxcIml0YWxpY1wiOjAuMjU1NTUsXCJza2V3XCI6MC4wfSxcIjg3XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4NjExLFwiaXRhbGljXCI6MC4xNTk3MixcInNrZXdcIjowLjB9LFwiODhcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjg2MTEsXCJpdGFsaWNcIjowLjA3Nzc4LFwic2tld1wiOjAuMH0sXCI4OVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODYxMSxcIml0YWxpY1wiOjAuMjU1NTUsXCJza2V3XCI6MC4wfSxcIjkwXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4NjExLFwiaXRhbGljXCI6MC4wNjk3OSxcInNrZXdcIjowLjB9LFwiOTE1XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4NjExLFwiaXRhbGljXCI6MC4xNTk3MixcInNrZXdcIjowLjB9LFwiOTE2XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4NjExLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5MjBcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjg2MTEsXCJpdGFsaWNcIjowLjAzMTk0LFwic2tld1wiOjAuMH0sXCI5MjNcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjg2MTEsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjkyNlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODYxMSxcIml0YWxpY1wiOjAuMDc0NTgsXCJza2V3XCI6MC4wfSxcIjkyOFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODYxMSxcIml0YWxpY1wiOjAuMDgyMjksXCJza2V3XCI6MC4wfSxcIjkzMVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODYxMSxcIml0YWxpY1wiOjAuMDU0NTEsXCJza2V3XCI6MC4wfSxcIjkzM1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODYxMSxcIml0YWxpY1wiOjAuMTU5NzIsXCJza2V3XCI6MC4wfSxcIjkzNFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODYxMSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTM2XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4NjExLFwiaXRhbGljXCI6MC4xMTY1MyxcInNrZXdcIjowLjB9LFwiOTM3XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4NjExLFwiaXRhbGljXCI6MC4wNDgzNSxcInNrZXdcIjowLjB9LFwiOTQ1XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQ0NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5NDZcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wMzQwMyxcInNrZXdcIjowLjB9LFwiOTQ3XCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC40NDQ0NCxcIml0YWxpY1wiOjAuMDYzODksXCJza2V3XCI6MC4wfSxcIjk0OFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMDM4MTksXCJza2V3XCI6MC4wfSxcIjk0OVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40NDQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTUwXCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMDYyMTUsXCJza2V3XCI6MC4wfSxcIjk1MVwiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNDQ0NDQsXCJpdGFsaWNcIjowLjAzNzA0LFwic2tld1wiOjAuMH0sXCI5NTJcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAzMTk0LFwic2tld1wiOjAuMH0sXCI5NTNcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDQ0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjk1NFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40NDQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTU1XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5NTZcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjQ0NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5NTdcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDQ0NDQsXCJpdGFsaWNcIjowLjA2ODk4LFwic2tld1wiOjAuMH0sXCI5NThcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wMzAyMSxcInNrZXdcIjowLjB9LFwiOTU5XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQ0NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5NjBcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDQ0NDQsXCJpdGFsaWNcIjowLjAzNzA0LFwic2tld1wiOjAuMH0sXCI5NjFcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjQ0NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5NjJcIjp7XCJkZXB0aFwiOjAuMDk3MjIsXCJoZWlnaHRcIjowLjQ0NDQ0LFwiaXRhbGljXCI6MC4wNzkxNyxcInNrZXdcIjowLjB9LFwiOTYzXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQ0NDQ0LFwiaXRhbGljXCI6MC4wMzcwNCxcInNrZXdcIjowLjB9LFwiOTY0XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQ0NDQ0LFwiaXRhbGljXCI6MC4xMzQ3MixcInNrZXdcIjowLjB9LFwiOTY1XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQ0NDQ0LFwiaXRhbGljXCI6MC4wMzcwNCxcInNrZXdcIjowLjB9LFwiOTY2XCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC40NDQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTY3XCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC40NDQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTY4XCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMDM3MDQsXCJza2V3XCI6MC4wfSxcIjk2OVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40NDQ0NCxcIml0YWxpY1wiOjAuMDM3MDQsXCJza2V3XCI6MC4wfSxcIjk3XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQ0NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5NzdcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjk4XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5ODFcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5ODJcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDQ0NDQsXCJpdGFsaWNcIjowLjAzMTk0LFwic2tld1wiOjAuMH0sXCI5OVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40NDQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9fSxcIk1hdGgtSXRhbGljXCI6e1wiMTAwXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMTY2Njd9LFwiMTAwOVwiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wODMzNH0sXCIxMDFcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wNTU1Nn0sXCIxMDEzXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMDU1NTZ9LFwiMTAyXCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMTA3NjQsXCJza2V3XCI6MC4xNjY2N30sXCIxMDNcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wMzU4OCxcInNrZXdcIjowLjAyNzc4fSxcIjEwNFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTA1XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY1OTUyLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIxMDZcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjY1OTUyLFwiaXRhbGljXCI6MC4wNTcyNCxcInNrZXdcIjowLjB9LFwiMTA3XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wMzE0OCxcInNrZXdcIjowLjB9LFwiMTA4XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wMTk2OCxcInNrZXdcIjowLjA4MzM0fSxcIjEwOVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTEwXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIxMTFcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wNTU1Nn0sXCIxMTJcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMDgzMzR9LFwiMTEzXCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMDM1ODgsXCJza2V3XCI6MC4wODMzNH0sXCIxMTRcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjAyNzc4LFwic2tld1wiOjAuMDU1NTZ9LFwiMTE1XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMDU1NTZ9LFwiMTE2XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjYxNTA4LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMDgzMzR9LFwiMTE3XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMDI3Nzh9LFwiMTE4XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wMzU4OCxcInNrZXdcIjowLjAyNzc4fSxcIjExOVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMDI2OTEsXCJza2V3XCI6MC4wODMzNH0sXCIxMjBcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wMjc3OH0sXCIxMjFcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wMzU4OCxcInNrZXdcIjowLjA1NTU2fSxcIjEyMlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMDQzOTgsXCJza2V3XCI6MC4wNTU1Nn0sXCI0N1wiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjY1XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMTM4ODl9LFwiNjZcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjA1MDE3LFwic2tld1wiOjAuMDgzMzR9LFwiNjdcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjA3MTUzLFwic2tld1wiOjAuMDgzMzR9LFwiNjhcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjAyNzc4LFwic2tld1wiOjAuMDU1NTZ9LFwiNjlcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjA1NzY0LFwic2tld1wiOjAuMDgzMzR9LFwiNzBcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjEzODg5LFwic2tld1wiOjAuMDgzMzR9LFwiNzFcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wODMzNH0sXCI3MlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMDgxMjUsXCJza2V3XCI6MC4wNTU1Nn0sXCI3M1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMDc4NDcsXCJza2V3XCI6MC4xMTExMX0sXCI3NFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMDk2MTgsXCJza2V3XCI6MC4xNjY2N30sXCI3NVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMDcxNTMsXCJza2V3XCI6MC4wNTU1Nn0sXCI3NlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjAyNzc4fSxcIjc3XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4xMDkwMyxcInNrZXdcIjowLjA4MzM0fSxcIjc4XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4xMDkwMyxcInNrZXdcIjowLjA4MzM0fSxcIjc5XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4wMjc3OCxcInNrZXdcIjowLjA4MzM0fSxcIjgwXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4xMzg4OSxcInNrZXdcIjowLjA4MzM0fSxcIjgxXCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjA4MzM0fSxcIjgyXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4wMDc3MyxcInNrZXdcIjowLjA4MzM0fSxcIjgzXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4wNTc2NCxcInNrZXdcIjowLjA4MzM0fSxcIjg0XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4xMzg4OSxcInNrZXdcIjowLjA4MzM0fSxcIjg1XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4xMDkwMyxcInNrZXdcIjowLjAyNzc4fSxcIjg2XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4yMjIyMixcInNrZXdcIjowLjB9LFwiODdcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjEzODg5LFwic2tld1wiOjAuMH0sXCI4OFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMDc4NDcsXCJza2V3XCI6MC4wODMzNH0sXCI4OVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMjIyMjIsXCJza2V3XCI6MC4wfSxcIjkwXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4wNzE1MyxcInNrZXdcIjowLjA4MzM0fSxcIjkxNVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMTM4ODksXCJza2V3XCI6MC4wODMzNH0sXCI5MTZcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4xNjY2N30sXCI5MjBcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjAyNzc4LFwic2tld1wiOjAuMDgzMzR9LFwiOTIzXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMTY2Njd9LFwiOTI2XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4wNzU2OSxcInNrZXdcIjowLjA4MzM0fSxcIjkyOFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMDgxMjUsXCJza2V3XCI6MC4wNTU1Nn0sXCI5MzFcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjA1NzY0LFwic2tld1wiOjAuMDgzMzR9LFwiOTMzXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4xMzg4OSxcInNrZXdcIjowLjA1NTU2fSxcIjkzNFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjA4MzM0fSxcIjkzNlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMTEsXCJza2V3XCI6MC4wNTU1Nn0sXCI5MzdcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjA1MDE3LFwic2tld1wiOjAuMDgzMzR9LFwiOTQ1XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wMDM3LFwic2tld1wiOjAuMDI3Nzh9LFwiOTQ2XCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMDUyNzgsXCJza2V3XCI6MC4wODMzNH0sXCI5NDdcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wNTU1NixcInNrZXdcIjowLjB9LFwiOTQ4XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wMzc4NSxcInNrZXdcIjowLjA1NTU2fSxcIjk0OVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjA4MzM0fSxcIjk1MFwiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjA3Mzc4LFwic2tld1wiOjAuMDgzMzR9LFwiOTUxXCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMDM1ODgsXCJza2V3XCI6MC4wNTU1Nn0sXCI5NTJcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAyNzc4LFwic2tld1wiOjAuMDgzMzR9LFwiOTUzXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMDU1NTZ9LFwiOTU0XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5NTVcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjk1NlwiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wMjc3OH0sXCI5NTdcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjA2MzY2LFwic2tld1wiOjAuMDI3Nzh9LFwiOTU4XCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMDQ2MDEsXCJza2V3XCI6MC4xMTExMX0sXCI5NTlcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wNTU1Nn0sXCI5NjBcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjAzNTg4LFwic2tld1wiOjAuMH0sXCI5NjFcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMDgzMzR9LFwiOTYyXCI6e1wiZGVwdGhcIjowLjA5NzIyLFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMDc5ODYsXCJza2V3XCI6MC4wODMzNH0sXCI5NjNcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjAzNTg4LFwic2tld1wiOjAuMH0sXCI5NjRcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjExMzIsXCJza2V3XCI6MC4wMjc3OH0sXCI5NjVcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjAzNTg4LFwic2tld1wiOjAuMDI3Nzh9LFwiOTY2XCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjA4MzM0fSxcIjk2N1wiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wNTU1Nn0sXCI5NjhcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wMzU4OCxcInNrZXdcIjowLjExMTExfSxcIjk2OVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMDM1ODgsXCJza2V3XCI6MC4wfSxcIjk3XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5NzdcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wODMzNH0sXCI5OFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTgxXCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjA4MzM0fSxcIjk4MlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMDI3NzgsXCJza2V3XCI6MC4wfSxcIjk5XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMDU1NTZ9fSxcIk1hdGgtUmVndWxhclwiOntcIjEwMFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjE2NjY3fSxcIjEwMDlcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMDgzMzR9LFwiMTAxXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMDU1NTZ9LFwiMTAxM1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjA1NTU2fSxcIjEwMlwiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjEwNzY0LFwic2tld1wiOjAuMTY2Njd9LFwiMTAzXCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMDM1ODgsXCJza2V3XCI6MC4wMjc3OH0sXCIxMDRcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjEwNVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42NTk1MixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTA2XCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC42NTk1MixcIml0YWxpY1wiOjAuMDU3MjQsXCJza2V3XCI6MC4wfSxcIjEwN1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMDMxNDgsXCJza2V3XCI6MC4wfSxcIjEwOFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMDE5NjgsXCJza2V3XCI6MC4wODMzNH0sXCIxMDlcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjExMFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTExXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMDU1NTZ9LFwiMTEyXCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjA4MzM0fSxcIjExM1wiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjAzNTg4LFwic2tld1wiOjAuMDgzMzR9LFwiMTE0XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wMjc3OCxcInNrZXdcIjowLjA1NTU2fSxcIjExNVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjA1NTU2fSxcIjExNlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42MTUwOCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjA4MzM0fSxcIjExN1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjAyNzc4fSxcIjExOFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMDM1ODgsXCJza2V3XCI6MC4wMjc3OH0sXCIxMTlcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjAyNjkxLFwic2tld1wiOjAuMDgzMzR9LFwiMTIwXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMDI3Nzh9LFwiMTIxXCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMDM1ODgsXCJza2V3XCI6MC4wNTU1Nn0sXCIxMjJcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjA0Mzk4LFwic2tld1wiOjAuMDU1NTZ9LFwiNjVcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4xMzg4OX0sXCI2NlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMDUwMTcsXCJza2V3XCI6MC4wODMzNH0sXCI2N1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMDcxNTMsXCJza2V3XCI6MC4wODMzNH0sXCI2OFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMDI3NzgsXCJza2V3XCI6MC4wNTU1Nn0sXCI2OVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMDU3NjQsXCJza2V3XCI6MC4wODMzNH0sXCI3MFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMTM4ODksXCJza2V3XCI6MC4wODMzNH0sXCI3MVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjA4MzM0fSxcIjcyXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4wODEyNSxcInNrZXdcIjowLjA1NTU2fSxcIjczXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4wNzg0NyxcInNrZXdcIjowLjExMTExfSxcIjc0XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4wOTYxOCxcInNrZXdcIjowLjE2NjY3fSxcIjc1XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4wNzE1MyxcInNrZXdcIjowLjA1NTU2fSxcIjc2XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMDI3Nzh9LFwiNzdcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjEwOTAzLFwic2tld1wiOjAuMDgzMzR9LFwiNzhcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjEwOTAzLFwic2tld1wiOjAuMDgzMzR9LFwiNzlcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjAyNzc4LFwic2tld1wiOjAuMDgzMzR9LFwiODBcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjEzODg5LFwic2tld1wiOjAuMDgzMzR9LFwiODFcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMDgzMzR9LFwiODJcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjAwNzczLFwic2tld1wiOjAuMDgzMzR9LFwiODNcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjA1NzY0LFwic2tld1wiOjAuMDgzMzR9LFwiODRcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjEzODg5LFwic2tld1wiOjAuMDgzMzR9LFwiODVcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjEwOTAzLFwic2tld1wiOjAuMDI3Nzh9LFwiODZcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjIyMjIyLFwic2tld1wiOjAuMH0sXCI4N1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMTM4ODksXCJza2V3XCI6MC4wfSxcIjg4XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4wNzg0NyxcInNrZXdcIjowLjA4MzM0fSxcIjg5XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4yMjIyMixcInNrZXdcIjowLjB9LFwiOTBcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjA3MTUzLFwic2tld1wiOjAuMDgzMzR9LFwiOTE1XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4xMzg4OSxcInNrZXdcIjowLjA4MzM0fSxcIjkxNlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjE2NjY3fSxcIjkyMFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMDI3NzgsXCJza2V3XCI6MC4wODMzNH0sXCI5MjNcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4xNjY2N30sXCI5MjZcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjA3NTY5LFwic2tld1wiOjAuMDgzMzR9LFwiOTI4XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4wODEyNSxcInNrZXdcIjowLjA1NTU2fSxcIjkzMVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMDU3NjQsXCJza2V3XCI6MC4wODMzNH0sXCI5MzNcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjgzMzMsXCJpdGFsaWNcIjowLjEzODg5LFwic2tld1wiOjAuMDU1NTZ9LFwiOTM0XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMDgzMzR9LFwiOTM2XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY4MzMzLFwiaXRhbGljXCI6MC4xMSxcInNrZXdcIjowLjA1NTU2fSxcIjkzN1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42ODMzMyxcIml0YWxpY1wiOjAuMDUwMTcsXCJza2V3XCI6MC4wODMzNH0sXCI5NDVcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjAwMzcsXCJza2V3XCI6MC4wMjc3OH0sXCI5NDZcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wNTI3OCxcInNrZXdcIjowLjA4MzM0fSxcIjk0N1wiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjA1NTU2LFwic2tld1wiOjAuMH0sXCI5NDhcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAzNzg1LFwic2tld1wiOjAuMDU1NTZ9LFwiOTQ5XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMDgzMzR9LFwiOTUwXCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMDczNzgsXCJza2V3XCI6MC4wODMzNH0sXCI5NTFcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wMzU4OCxcInNrZXdcIjowLjA1NTU2fSxcIjk1MlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMDI3NzgsXCJza2V3XCI6MC4wODMzNH0sXCI5NTNcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wNTU1Nn0sXCI5NTRcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjk1NVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTU2XCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjAyNzc4fSxcIjk1N1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMDYzNjYsXCJza2V3XCI6MC4wMjc3OH0sXCI5NThcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wNDYwMSxcInNrZXdcIjowLjExMTExfSxcIjk1OVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjA1NTU2fSxcIjk2MFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMDM1ODgsXCJza2V3XCI6MC4wfSxcIjk2MVwiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wODMzNH0sXCI5NjJcIjp7XCJkZXB0aFwiOjAuMDk3MjIsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wNzk4NixcInNrZXdcIjowLjA4MzM0fSxcIjk2M1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMDM1ODgsXCJza2V3XCI6MC4wfSxcIjk2NFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMTEzMixcInNrZXdcIjowLjAyNzc4fSxcIjk2NVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMDM1ODgsXCJza2V3XCI6MC4wMjc3OH0sXCI5NjZcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMDgzMzR9LFwiOTY3XCI6e1wiZGVwdGhcIjowLjE5NDQ0LFwiaGVpZ2h0XCI6MC40MzA1NixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjA1NTU2fSxcIjk2OFwiOntcImRlcHRoXCI6MC4xOTQ0NCxcImhlaWdodFwiOjAuNjk0NDQsXCJpdGFsaWNcIjowLjAzNTg4LFwic2tld1wiOjAuMTExMTF9LFwiOTY5XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wMzU4OCxcInNrZXdcIjowLjB9LFwiOTdcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjk3N1wiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC42OTQ0NCxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjA4MzM0fSxcIjk4XCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5ODFcIjp7XCJkZXB0aFwiOjAuMTk0NDQsXCJoZWlnaHRcIjowLjY5NDQ0LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMDgzMzR9LFwiOTgyXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjQzMDU2LFwiaXRhbGljXCI6MC4wMjc3OCxcInNrZXdcIjowLjB9LFwiOTlcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNDMwNTYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wNTU1Nn19LFwiU2l6ZTEtUmVndWxhclwiOntcIjg3NDhcIjp7XCJkZXB0aFwiOjAuMzA2LFwiaGVpZ2h0XCI6MC44MDUsXCJpdGFsaWNcIjowLjE5NDQ1LFwic2tld1wiOjAuMH0sXCI4NzQ5XCI6e1wiZGVwdGhcIjowLjMwNixcImhlaWdodFwiOjAuODA1LFwiaXRhbGljXCI6MC4xOTQ0NSxcInNrZXdcIjowLjB9LFwiMTAyMTZcIjp7XCJkZXB0aFwiOjAuMzUwMDEsXCJoZWlnaHRcIjowLjg1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIxMDIxN1wiOntcImRlcHRoXCI6MC4zNTAwMSxcImhlaWdodFwiOjAuODUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjEwNzUyXCI6e1wiZGVwdGhcIjowLjI1MDAxLFwiaGVpZ2h0XCI6MC43NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTA3NTNcIjp7XCJkZXB0aFwiOjAuMjUwMDEsXCJoZWlnaHRcIjowLjc1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIxMDc1NFwiOntcImRlcHRoXCI6MC4yNTAwMSxcImhlaWdodFwiOjAuNzUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjEwNzU2XCI6e1wiZGVwdGhcIjowLjI1MDAxLFwiaGVpZ2h0XCI6MC43NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTA3NThcIjp7XCJkZXB0aFwiOjAuMjUwMDEsXCJoZWlnaHRcIjowLjc1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIxMjNcIjp7XCJkZXB0aFwiOjAuMzUwMDEsXCJoZWlnaHRcIjowLjg1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIxMjVcIjp7XCJkZXB0aFwiOjAuMzUwMDEsXCJoZWlnaHRcIjowLjg1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI0MFwiOntcImRlcHRoXCI6MC4zNTAwMSxcImhlaWdodFwiOjAuODUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjQxXCI6e1wiZGVwdGhcIjowLjM1MDAxLFwiaGVpZ2h0XCI6MC44NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNDdcIjp7XCJkZXB0aFwiOjAuMzUwMDEsXCJoZWlnaHRcIjowLjg1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI3MTBcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNzIyMjIsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjczMlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC43MjIyMixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNzcwXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjcyMjIyLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI3NzFcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNzIyMjIsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjgyMTRcIjp7XCJkZXB0aFwiOi0wLjAwMDk5LFwiaGVpZ2h0XCI6MC42MDEsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg1OTNcIjp7XCJkZXB0aFwiOjFlLTA1LFwiaGVpZ2h0XCI6MC42LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NTk1XCI6e1wiZGVwdGhcIjoxZS0wNSxcImhlaWdodFwiOjAuNixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODY1N1wiOntcImRlcHRoXCI6MWUtMDUsXCJoZWlnaHRcIjowLjYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg2NTlcIjp7XCJkZXB0aFwiOjFlLTA1LFwiaGVpZ2h0XCI6MC42LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NzE5XCI6e1wiZGVwdGhcIjowLjI1MDAxLFwiaGVpZ2h0XCI6MC43NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODcyMFwiOntcImRlcHRoXCI6MC4yNTAwMSxcImhlaWdodFwiOjAuNzUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg3MjFcIjp7XCJkZXB0aFwiOjAuMjUwMDEsXCJoZWlnaHRcIjowLjc1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NzMwXCI6e1wiZGVwdGhcIjowLjM1MDAxLFwiaGVpZ2h0XCI6MC44NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODczOVwiOntcImRlcHRoXCI6LTAuMDA1OTksXCJoZWlnaHRcIjowLjYwNixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODc0MVwiOntcImRlcHRoXCI6LTAuMDA1OTksXCJoZWlnaHRcIjowLjYwNixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODc0N1wiOntcImRlcHRoXCI6MC4zMDYxMixcImhlaWdodFwiOjAuODA1LFwiaXRhbGljXCI6MC4xOTQ0NSxcInNrZXdcIjowLjB9LFwiODc1MFwiOntcImRlcHRoXCI6MC4zMDYxMixcImhlaWdodFwiOjAuODA1LFwiaXRhbGljXCI6MC4xOTQ0NSxcInNrZXdcIjowLjB9LFwiODg5NlwiOntcImRlcHRoXCI6MC4yNTAwMSxcImhlaWdodFwiOjAuNzUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg4OTdcIjp7XCJkZXB0aFwiOjAuMjUwMDEsXCJoZWlnaHRcIjowLjc1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4ODk4XCI6e1wiZGVwdGhcIjowLjI1MDAxLFwiaGVpZ2h0XCI6MC43NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODg5OVwiOntcImRlcHRoXCI6MC4yNTAwMSxcImhlaWdodFwiOjAuNzUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg5NjhcIjp7XCJkZXB0aFwiOjAuMzUwMDEsXCJoZWlnaHRcIjowLjg1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4OTY5XCI6e1wiZGVwdGhcIjowLjM1MDAxLFwiaGVpZ2h0XCI6MC44NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODk3MFwiOntcImRlcHRoXCI6MC4zNTAwMSxcImhlaWdodFwiOjAuODUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg5NzFcIjp7XCJkZXB0aFwiOjAuMzUwMDEsXCJoZWlnaHRcIjowLjg1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5MVwiOntcImRlcHRoXCI6MC4zNTAwMSxcImhlaWdodFwiOjAuODUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjkxNjhcIjp7XCJkZXB0aFwiOi0wLjAwMDk5LFwiaGVpZ2h0XCI6MC42MDEsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjkyXCI6e1wiZGVwdGhcIjowLjM1MDAxLFwiaGVpZ2h0XCI6MC44NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTNcIjp7XCJkZXB0aFwiOjAuMzUwMDEsXCJoZWlnaHRcIjowLjg1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH19LFwiU2l6ZTItUmVndWxhclwiOntcIjg3NDhcIjp7XCJkZXB0aFwiOjAuODYyLFwiaGVpZ2h0XCI6MS4zNixcIml0YWxpY1wiOjAuNDQ0NDUsXCJza2V3XCI6MC4wfSxcIjg3NDlcIjp7XCJkZXB0aFwiOjAuODYyLFwiaGVpZ2h0XCI6MS4zNixcIml0YWxpY1wiOjAuNDQ0NDUsXCJza2V3XCI6MC4wfSxcIjEwMjE2XCI6e1wiZGVwdGhcIjowLjY1MDAyLFwiaGVpZ2h0XCI6MS4xNSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTAyMTdcIjp7XCJkZXB0aFwiOjAuNjUwMDIsXCJoZWlnaHRcIjoxLjE1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIxMDc1MlwiOntcImRlcHRoXCI6MC41NTAwMSxcImhlaWdodFwiOjEuMDUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjEwNzUzXCI6e1wiZGVwdGhcIjowLjU1MDAxLFwiaGVpZ2h0XCI6MS4wNSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTA3NTRcIjp7XCJkZXB0aFwiOjAuNTUwMDEsXCJoZWlnaHRcIjoxLjA1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIxMDc1NlwiOntcImRlcHRoXCI6MC41NTAwMSxcImhlaWdodFwiOjEuMDUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjEwNzU4XCI6e1wiZGVwdGhcIjowLjU1MDAxLFwiaGVpZ2h0XCI6MS4wNSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTIzXCI6e1wiZGVwdGhcIjowLjY1MDAyLFwiaGVpZ2h0XCI6MS4xNSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTI1XCI6e1wiZGVwdGhcIjowLjY1MDAyLFwiaGVpZ2h0XCI6MS4xNSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNDBcIjp7XCJkZXB0aFwiOjAuNjUwMDIsXCJoZWlnaHRcIjoxLjE1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI0MVwiOntcImRlcHRoXCI6MC42NTAwMixcImhlaWdodFwiOjEuMTUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjQ3XCI6e1wiZGVwdGhcIjowLjY1MDAyLFwiaGVpZ2h0XCI6MS4xNSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNzEwXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjc1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI3MzJcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNzUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjc3MFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC43NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNzcxXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjc1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NzE5XCI6e1wiZGVwdGhcIjowLjU1MDAxLFwiaGVpZ2h0XCI6MS4wNSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODcyMFwiOntcImRlcHRoXCI6MC41NTAwMSxcImhlaWdodFwiOjEuMDUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg3MjFcIjp7XCJkZXB0aFwiOjAuNTUwMDEsXCJoZWlnaHRcIjoxLjA1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NzMwXCI6e1wiZGVwdGhcIjowLjY1MDAyLFwiaGVpZ2h0XCI6MS4xNSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODc0N1wiOntcImRlcHRoXCI6MC44NjIyNSxcImhlaWdodFwiOjEuMzYsXCJpdGFsaWNcIjowLjQ0NDQ1LFwic2tld1wiOjAuMH0sXCI4NzUwXCI6e1wiZGVwdGhcIjowLjg2MjI1LFwiaGVpZ2h0XCI6MS4zNixcIml0YWxpY1wiOjAuNDQ0NDUsXCJza2V3XCI6MC4wfSxcIjg4OTZcIjp7XCJkZXB0aFwiOjAuNTUwMDEsXCJoZWlnaHRcIjoxLjA1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4ODk3XCI6e1wiZGVwdGhcIjowLjU1MDAxLFwiaGVpZ2h0XCI6MS4wNSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODg5OFwiOntcImRlcHRoXCI6MC41NTAwMSxcImhlaWdodFwiOjEuMDUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg4OTlcIjp7XCJkZXB0aFwiOjAuNTUwMDEsXCJoZWlnaHRcIjoxLjA1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4OTY4XCI6e1wiZGVwdGhcIjowLjY1MDAyLFwiaGVpZ2h0XCI6MS4xNSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODk2OVwiOntcImRlcHRoXCI6MC42NTAwMixcImhlaWdodFwiOjEuMTUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg5NzBcIjp7XCJkZXB0aFwiOjAuNjUwMDIsXCJoZWlnaHRcIjoxLjE1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4OTcxXCI6e1wiZGVwdGhcIjowLjY1MDAyLFwiaGVpZ2h0XCI6MS4xNSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTFcIjp7XCJkZXB0aFwiOjAuNjUwMDIsXCJoZWlnaHRcIjoxLjE1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5MlwiOntcImRlcHRoXCI6MC42NTAwMixcImhlaWdodFwiOjEuMTUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjkzXCI6e1wiZGVwdGhcIjowLjY1MDAyLFwiaGVpZ2h0XCI6MS4xNSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9fSxcIlNpemUzLVJlZ3VsYXJcIjp7XCIxMDIxNlwiOntcImRlcHRoXCI6MC45NTAwMyxcImhlaWdodFwiOjEuNDUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjEwMjE3XCI6e1wiZGVwdGhcIjowLjk1MDAzLFwiaGVpZ2h0XCI6MS40NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTIzXCI6e1wiZGVwdGhcIjowLjk1MDAzLFwiaGVpZ2h0XCI6MS40NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiMTI1XCI6e1wiZGVwdGhcIjowLjk1MDAzLFwiaGVpZ2h0XCI6MS40NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNDBcIjp7XCJkZXB0aFwiOjAuOTUwMDMsXCJoZWlnaHRcIjoxLjQ1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI0MVwiOntcImRlcHRoXCI6MC45NTAwMyxcImhlaWdodFwiOjEuNDUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjQ3XCI6e1wiZGVwdGhcIjowLjk1MDAzLFwiaGVpZ2h0XCI6MS40NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNzEwXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjc1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI3MzJcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuNzUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjc3MFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC43NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNzcxXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjc1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4NzMwXCI6e1wiZGVwdGhcIjowLjk1MDAzLFwiaGVpZ2h0XCI6MS40NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODk2OFwiOntcImRlcHRoXCI6MC45NTAwMyxcImhlaWdodFwiOjEuNDUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg5NjlcIjp7XCJkZXB0aFwiOjAuOTUwMDMsXCJoZWlnaHRcIjoxLjQ1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4OTcwXCI6e1wiZGVwdGhcIjowLjk1MDAzLFwiaGVpZ2h0XCI6MS40NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODk3MVwiOntcImRlcHRoXCI6MC45NTAwMyxcImhlaWdodFwiOjEuNDUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjkxXCI6e1wiZGVwdGhcIjowLjk1MDAzLFwiaGVpZ2h0XCI6MS40NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTJcIjp7XCJkZXB0aFwiOjAuOTUwMDMsXCJoZWlnaHRcIjoxLjQ1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5M1wiOntcImRlcHRoXCI6MC45NTAwMyxcImhlaWdodFwiOjEuNDUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfX0sXCJTaXplNC1SZWd1bGFyXCI6e1wiMTAyMTZcIjp7XCJkZXB0aFwiOjEuMjUwMDMsXCJoZWlnaHRcIjoxLjc1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCIxMDIxN1wiOntcImRlcHRoXCI6MS4yNTAwMyxcImhlaWdodFwiOjEuNzUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjEyM1wiOntcImRlcHRoXCI6MS4yNTAwMyxcImhlaWdodFwiOjEuNzUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjEyNVwiOntcImRlcHRoXCI6MS4yNTAwMyxcImhlaWdodFwiOjEuNzUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjQwXCI6e1wiZGVwdGhcIjoxLjI1MDAzLFwiaGVpZ2h0XCI6MS43NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNDFcIjp7XCJkZXB0aFwiOjEuMjUwMDMsXCJoZWlnaHRcIjoxLjc1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI0N1wiOntcImRlcHRoXCI6MS4yNTAwMyxcImhlaWdodFwiOjEuNzUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjU3MzQ0XCI6e1wiZGVwdGhcIjotMC4wMDQ5OSxcImhlaWdodFwiOjAuNjA1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI1NzM0NVwiOntcImRlcHRoXCI6LTAuMDA0OTksXCJoZWlnaHRcIjowLjYwNSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNTc2ODBcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuMTIsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjU3NjgxXCI6e1wiZGVwdGhcIjowLjAsXCJoZWlnaHRcIjowLjEyLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI1NzY4MlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC4xMixcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiNTc2ODNcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuMTIsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjcxMFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC44MjUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjczMlwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC44MjUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjc3MFwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC44MjUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjc3MVwiOntcImRlcHRoXCI6MC4wLFwiaGVpZ2h0XCI6MC44MjUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg3MzBcIjp7XCJkZXB0aFwiOjEuMjUwMDMsXCJoZWlnaHRcIjoxLjc1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4OTY4XCI6e1wiZGVwdGhcIjoxLjI1MDAzLFwiaGVpZ2h0XCI6MS43NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiODk2OVwiOntcImRlcHRoXCI6MS4yNTAwMyxcImhlaWdodFwiOjEuNzUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjg5NzBcIjp7XCJkZXB0aFwiOjEuMjUwMDMsXCJoZWlnaHRcIjoxLjc1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI4OTcxXCI6e1wiZGVwdGhcIjoxLjI1MDAzLFwiaGVpZ2h0XCI6MS43NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTFcIjp7XCJkZXB0aFwiOjEuMjUwMDMsXCJoZWlnaHRcIjoxLjc1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5MTE1XCI6e1wiZGVwdGhcIjowLjY0NTAyLFwiaGVpZ2h0XCI6MS4xNTUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjkxMTZcIjp7XCJkZXB0aFwiOjFlLTA1LFwiaGVpZ2h0XCI6MC42LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5MTE3XCI6e1wiZGVwdGhcIjowLjY0NTAyLFwiaGVpZ2h0XCI6MS4xNTUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjkxMThcIjp7XCJkZXB0aFwiOjAuNjQ1MDIsXCJoZWlnaHRcIjoxLjE1NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTExOVwiOntcImRlcHRoXCI6MWUtMDUsXCJoZWlnaHRcIjowLjYsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjkxMjBcIjp7XCJkZXB0aFwiOjAuNjQ1MDIsXCJoZWlnaHRcIjoxLjE1NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTEyMVwiOntcImRlcHRoXCI6MC42NDUwMixcImhlaWdodFwiOjEuMTU1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5MTIyXCI6e1wiZGVwdGhcIjotMC4wMDA5OSxcImhlaWdodFwiOjAuNjAxLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5MTIzXCI6e1wiZGVwdGhcIjowLjY0NTAyLFwiaGVpZ2h0XCI6MS4xNTUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjkxMjRcIjp7XCJkZXB0aFwiOjAuNjQ1MDIsXCJoZWlnaHRcIjoxLjE1NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTEyNVwiOntcImRlcHRoXCI6LTAuMDAwOTksXCJoZWlnaHRcIjowLjYwMSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTEyNlwiOntcImRlcHRoXCI6MC42NDUwMixcImhlaWdodFwiOjEuMTU1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5MTI3XCI6e1wiZGVwdGhcIjoxZS0wNSxcImhlaWdodFwiOjAuOSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTEyOFwiOntcImRlcHRoXCI6MC42NTAwMixcImhlaWdodFwiOjEuMTUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjkxMjlcIjp7XCJkZXB0aFwiOjAuOTAwMDEsXCJoZWlnaHRcIjowLjAsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjkxMzBcIjp7XCJkZXB0aFwiOjAuMCxcImhlaWdodFwiOjAuMyxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTEzMVwiOntcImRlcHRoXCI6MWUtMDUsXCJoZWlnaHRcIjowLjksXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjkxMzJcIjp7XCJkZXB0aFwiOjAuNjUwMDIsXCJoZWlnaHRcIjoxLjE1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5MTMzXCI6e1wiZGVwdGhcIjowLjkwMDAxLFwiaGVpZ2h0XCI6MC4wLFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH0sXCI5MTQzXCI6e1wiZGVwdGhcIjowLjg4NTAyLFwiaGVpZ2h0XCI6MC45MTUsXCJpdGFsaWNcIjowLjAsXCJza2V3XCI6MC4wfSxcIjkyXCI6e1wiZGVwdGhcIjoxLjI1MDAzLFwiaGVpZ2h0XCI6MS43NSxcIml0YWxpY1wiOjAuMCxcInNrZXdcIjowLjB9LFwiOTNcIjp7XCJkZXB0aFwiOjEuMjUwMDMsXCJoZWlnaHRcIjoxLjc1LFwiaXRhbGljXCI6MC4wLFwic2tld1wiOjAuMH19fTtcblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGEgY29udmllbmNlIGZ1bmN0aW9uIGZvciBsb29raW5nIHVwIGluZm9ybWF0aW9uIGluIHRoZVxuICogbWV0cmljTWFwIHRhYmxlLiBJdCB0YWtlcyBhIGNoYXJhY3RlciBhcyBhIHN0cmluZywgYW5kIGEgc3R5bGVcbiAqL1xudmFyIGdldENoYXJhY3Rlck1ldHJpY3MgPSBmdW5jdGlvbihjaGFyYWN0ZXIsIHN0eWxlKSB7XG4gICAgcmV0dXJuIG1ldHJpY01hcFtzdHlsZV1bY2hhcmFjdGVyLmNoYXJDb2RlQXQoMCldO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgbWV0cmljczogbWV0cmljcyxcbiAgICBnZXRDaGFyYWN0ZXJNZXRyaWNzOiBnZXRDaGFyYWN0ZXJNZXRyaWNzXG59O1xuIiwidmFyIHV0aWxzID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG52YXIgUGFyc2VFcnJvciA9IHJlcXVpcmUoXCIuL1BhcnNlRXJyb3JcIik7XG5cbi8vIFRoaXMgZmlsZSBjb250YWlucyBhIGxpc3Qgb2YgZnVuY3Rpb25zIHRoYXQgd2UgcGFyc2UuIFRoZSBmdW5jdGlvbnMgbWFwXG4vLyBjb250YWlucyB0aGUgZm9sbG93aW5nIGRhdGE6XG5cbi8qXG4gKiBLZXlzIGFyZSB0aGUgbmFtZSBvZiB0aGUgZnVuY3Rpb25zIHRvIHBhcnNlXG4gKiBUaGUgZGF0YSBjb250YWlucyB0aGUgZm9sbG93aW5nIGtleXM6XG4gKiAgLSBudW1BcmdzOiBUaGUgbnVtYmVyIG9mIGFyZ3VtZW50cyB0aGUgZnVuY3Rpb24gdGFrZXMuXG4gKiAgLSBhcmdUeXBlczogKG9wdGlvbmFsKSBBbiBhcnJheSBjb3JyZXNwb25kaW5nIHRvIGVhY2ggYXJndW1lbnQgb2YgdGhlXG4gKiAgICAgICAgICAgICAgZnVuY3Rpb24sIGdpdmluZyB0aGUgdHlwZSBvZiBhcmd1bWVudCB0aGF0IHNob3VsZCBiZSBwYXJzZWQuIEl0c1xuICogICAgICAgICAgICAgIGxlbmd0aCBzaG91bGQgYmUgZXF1YWwgdG8gYG51bUFyZ3MgKyBudW1PcHRpb25hbEFyZ3NgLiBWYWxpZFxuICogICAgICAgICAgICAgIHR5cGVzOlxuICogICAgICAgICAgICAgICAtIFwic2l6ZVwiOiBBIHNpemUtbGlrZSB0aGluZywgc3VjaCBhcyBcIjFlbVwiIG9yIFwiNWV4XCJcbiAqICAgICAgICAgICAgICAgLSBcImNvbG9yXCI6IEFuIGh0bWwgY29sb3IsIGxpa2UgXCIjYWJjXCIgb3IgXCJibHVlXCJcbiAqICAgICAgICAgICAgICAgLSBcIm9yaWdpbmFsXCI6IFRoZSBzYW1lIHR5cGUgYXMgdGhlIGVudmlyb25tZW50IHRoYXQgdGhlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gYmVpbmcgcGFyc2VkIGlzIGluIChlLmcuIHVzZWQgZm9yIHRoZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZGllcyBvZiBmdW5jdGlvbnMgbGlrZSBcXGNvbG9yIHdoZXJlIHRoZSBmaXJzdFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50IGlzIHNwZWNpYWwgYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgaXNcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZWQgbm9ybWFsbHkpXG4gKiAgICAgICAgICAgICAgT3RoZXIgcG9zc2libGUgdHlwZXMgKHByb2JhYmx5IHNob3VsZG4ndCBiZSB1c2VkKVxuICogICAgICAgICAgICAgICAtIFwidGV4dFwiOiBUZXh0LWxpa2UgKGUuZy4gXFx0ZXh0KVxuICogICAgICAgICAgICAgICAtIFwibWF0aFwiOiBOb3JtYWwgbWF0aFxuICogICAgICAgICAgICAgIElmIHVuZGVmaW5lZCwgdGhpcyB3aWxsIGJlIHRyZWF0ZWQgYXMgYW4gYXBwcm9wcmlhdGUgbGVuZ3RoXG4gKiAgICAgICAgICAgICAgYXJyYXkgb2YgXCJvcmlnaW5hbFwiIHN0cmluZ3NcbiAqICAtIGdyZWVkaW5lc3M6IChvcHRpb25hbCkgVGhlIGdyZWVkaW5lc3Mgb2YgdGhlIGZ1bmN0aW9uIHRvIHVzZSB1bmdyb3VwZWRcbiAqICAgICAgICAgICAgICAgIGFyZ3VtZW50cy5cbiAqXG4gKiAgICAgICAgICAgICAgICBFLmcuIGlmIHlvdSBoYXZlIGFuIGV4cHJlc3Npb25cbiAqICAgICAgICAgICAgICAgICAgXFxzcXJ0IFxcZnJhYyAxIDJcbiAqICAgICAgICAgICAgICAgIHNpbmNlIFxcZnJhYyBoYXMgZ3JlZWRpbmVzcz0yIHZzIFxcc3FydCdzIGdyZWVkaW5lc3M9MSwgXFxmcmFjXG4gKiAgICAgICAgICAgICAgICB3aWxsIHVzZSB0aGUgdHdvIGFyZ3VtZW50cyAnMScgYW5kICcyJyBhcyBpdHMgdHdvIGFyZ3VtZW50cyxcbiAqICAgICAgICAgICAgICAgIHRoZW4gdGhhdCB3aG9sZSBmdW5jdGlvbiB3aWxsIGJlIHVzZWQgYXMgdGhlIGFyZ3VtZW50IHRvXG4gKiAgICAgICAgICAgICAgICBcXHNxcnQuIE9uIHRoZSBvdGhlciBoYW5kLCB0aGUgZXhwcmVzc2lvbnNcbiAqICAgICAgICAgICAgICAgICAgXFxmcmFjIFxcZnJhYyAxIDIgM1xuICogICAgICAgICAgICAgICAgYW5kXG4gKiAgICAgICAgICAgICAgICAgIFxcZnJhYyBcXHNxcnQgMSAyXG4gKiAgICAgICAgICAgICAgICB3aWxsIGZhaWwgYmVjYXVzZSBcXGZyYWMgYW5kIFxcZnJhYyBoYXZlIGVxdWFsIGdyZWVkaW5lc3NcbiAqICAgICAgICAgICAgICAgIGFuZCBcXHNxcnQgaGFzIGEgbG93ZXIgZ3JlZWRpbmVzcyB0aGFuIFxcZnJhYyByZXNwZWN0aXZlbHkuIFRvXG4gKiAgICAgICAgICAgICAgICBtYWtlIHRoZXNlIHBhcnNlLCB3ZSB3b3VsZCBoYXZlIHRvIGNoYW5nZSB0aGVtIHRvOlxuICogICAgICAgICAgICAgICAgICBcXGZyYWMge1xcZnJhYyAxIDJ9IDNcbiAqICAgICAgICAgICAgICAgIGFuZFxuICogICAgICAgICAgICAgICAgICBcXGZyYWMge1xcc3FydCAxfSAyXG4gKlxuICogICAgICAgICAgICAgICAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgYDFgXG4gKiAgLSBhbGxvd2VkSW5UZXh0OiAob3B0aW9uYWwpIFdoZXRoZXIgb3Igbm90IHRoZSBmdW5jdGlvbiBpcyBhbGxvd2VkIGluc2lkZVxuICogICAgICAgICAgICAgICAgICAgdGV4dCBtb2RlIChkZWZhdWx0IGZhbHNlKVxuICogIC0gbnVtT3B0aW9uYWxBcmdzOiAob3B0aW9uYWwpIFRoZSBudW1iZXIgb2Ygb3B0aW9uYWwgYXJndW1lbnRzIHRoZSBmdW5jdGlvblxuICogICAgICAgICAgICAgICAgICAgICBzaG91bGQgcGFyc2UuIElmIHRoZSBvcHRpb25hbCBhcmd1bWVudHMgYXJlbid0IGZvdW5kLFxuICogICAgICAgICAgICAgICAgICAgICBgbnVsbGAgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIGhhbmRsZXIgaW4gdGhlaXIgcGxhY2UuXG4gKiAgICAgICAgICAgICAgICAgICAgIChkZWZhdWx0IDApXG4gKiAgLSBoYW5kbGVyOiBUaGUgZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgdG8gaGFuZGxlIHRoaXMgZnVuY3Rpb24gYW5kIGl0c1xuICogICAgICAgICAgICAgYXJndW1lbnRzLiBUaGUgYXJndW1lbnRzIGFyZTpcbiAqICAgICAgICAgICAgICAtIGZ1bmM6IHRoZSB0ZXh0IG9mIHRoZSBmdW5jdGlvblxuICogICAgICAgICAgICAgIC0gW2FyZ3NdOiB0aGUgbmV4dCBhcmd1bWVudHMgYXJlIHRoZSBhcmd1bWVudHMgdG8gdGhlIGZ1bmN0aW9uLFxuICogICAgICAgICAgICAgICAgICAgICAgICBvZiB3aGljaCB0aGVyZSBhcmUgbnVtQXJncyBvZiB0aGVtXG4gKiAgICAgICAgICAgICAgLSBwb3NpdGlvbnM6IHRoZSBwb3NpdGlvbnMgaW4gdGhlIG92ZXJhbGwgc3RyaW5nIG9mIHRoZSBmdW5jdGlvblxuICogICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIGFyZ3VtZW50cy4gU2hvdWxkIG9ubHkgYmUgdXNlZCB0byBwcm9kdWNlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yIG1lc3NhZ2VzXG4gKiAgICAgICAgICAgICBUaGUgZnVuY3Rpb24gc2hvdWxkIHJldHVybiBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIGtleXM6XG4gKiAgICAgICAgICAgICAgLSB0eXBlOiBUaGUgdHlwZSBvZiBlbGVtZW50IHRoYXQgdGhpcyBpcy4gVGhpcyBpcyB0aGVuIHVzZWQgaW5cbiAqICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkVHJlZSB0byBkZXRlcm1pbmUgd2hpY2ggZnVuY3Rpb24gc2hvdWxkIGJlIGNhbGxlZFxuICogICAgICAgICAgICAgICAgICAgICAgdG8gYnVpbGQgdGhpcyBub2RlIGludG8gYSBET00gbm9kZVxuICogICAgICAgICAgICAgQW55IG90aGVyIGRhdGEgY2FuIGJlIGFkZGVkIHRvIHRoZSBvYmplY3QsIHdoaWNoIHdpbGwgYmUgcGFzc2VkXG4gKiAgICAgICAgICAgICBpbiB0byB0aGUgZnVuY3Rpb24gaW4gYnVpbGRUcmVlIGFzIGBncm91cC52YWx1ZWAuXG4gKi9cblxudmFyIGZ1bmN0aW9ucyA9IHtcbiAgICAvLyBBIG5vcm1hbCBzcXVhcmUgcm9vdFxuICAgIFwiXFxcXHNxcnRcIjoge1xuICAgICAgICBudW1BcmdzOiAxLFxuICAgICAgICBudW1PcHRpb25hbEFyZ3M6IDEsXG4gICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGZ1bmMsIG9wdGlvbmFsLCBib2R5LCBwb3NpdGlvbnMpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25hbCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFBhcnNlRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgIFwiT3B0aW9uYWwgYXJndW1lbnRzIHRvIFxcXFxzcXJ0IGFyZW4ndCBzdXBwb3J0ZWQgeWV0XCIsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGV4ZXIsIHBvc2l0aW9uc1sxXSAtIDEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwic3FydFwiLFxuICAgICAgICAgICAgICAgIGJvZHk6IGJvZHlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gU29tZSBub24tbWF0aHkgdGV4dFxuICAgIFwiXFxcXHRleHRcIjoge1xuICAgICAgICBudW1BcmdzOiAxLFxuICAgICAgICBhcmdUeXBlczogW1widGV4dFwiXSxcbiAgICAgICAgZ3JlZWRpbmVzczogMixcbiAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oZnVuYywgYm9keSkge1xuICAgICAgICAgICAgLy8gU2luY2UgdGhlIGNvcnJlc3BvbmRpbmcgYnVpbGRUcmVlIGZ1bmN0aW9uIGV4cGVjdHMgYSBsaXN0IG9mXG4gICAgICAgICAgICAvLyBlbGVtZW50cywgd2Ugbm9ybWFsaXplIGZvciBkaWZmZXJlbnQga2luZHMgb2YgYXJndW1lbnRzXG4gICAgICAgICAgICAvLyBUT0RPKGVtaWx5KTogbWF5YmUgdGhpcyBzaG91bGQgYmUgZG9uZSBzb21ld2hlcmUgZWxzZVxuICAgICAgICAgICAgdmFyIGlubmVyO1xuICAgICAgICAgICAgaWYgKGJvZHkudHlwZSA9PT0gXCJvcmRncm91cFwiKSB7XG4gICAgICAgICAgICAgICAgaW5uZXIgPSBib2R5LnZhbHVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbm5lciA9IFtib2R5XTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgICAgICAgICBib2R5OiBpbm5lclxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyBBIHR3by1hcmd1bWVudCBjdXN0b20gY29sb3JcbiAgICBcIlxcXFxjb2xvclwiOiB7XG4gICAgICAgIG51bUFyZ3M6IDIsXG4gICAgICAgIGFsbG93ZWRJblRleHQ6IHRydWUsXG4gICAgICAgIGFyZ1R5cGVzOiBbXCJjb2xvclwiLCBcIm9yaWdpbmFsXCJdLFxuICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihmdW5jLCBjb2xvciwgYm9keSkge1xuICAgICAgICAgICAgLy8gTm9ybWFsaXplIHRoZSBkaWZmZXJlbnQga2luZHMgb2YgYm9kaWVzIChzZWUgXFx0ZXh0IGFib3ZlKVxuICAgICAgICAgICAgdmFyIGlubmVyO1xuICAgICAgICAgICAgaWYgKGJvZHkudHlwZSA9PT0gXCJvcmRncm91cFwiKSB7XG4gICAgICAgICAgICAgICAgaW5uZXIgPSBib2R5LnZhbHVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbm5lciA9IFtib2R5XTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImNvbG9yXCIsXG4gICAgICAgICAgICAgICAgY29sb3I6IGNvbG9yLnZhbHVlLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBpbm5lclxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyBBbiBvdmVybGluZVxuICAgIFwiXFxcXG92ZXJsaW5lXCI6IHtcbiAgICAgICAgbnVtQXJnczogMSxcbiAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oZnVuYywgYm9keSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcIm92ZXJsaW5lXCIsXG4gICAgICAgICAgICAgICAgYm9keTogYm9keVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyBBIGJveCBvZiB0aGUgd2lkdGggYW5kIGhlaWdodFxuICAgIFwiXFxcXHJ1bGVcIjoge1xuICAgICAgICBudW1BcmdzOiAyLFxuICAgICAgICBudW1PcHRpb25hbEFyZ3M6IDEsXG4gICAgICAgIGFyZ1R5cGVzOiBbXCJzaXplXCIsIFwic2l6ZVwiLCBcInNpemVcIl0sXG4gICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGZ1bmMsIHNoaWZ0LCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwicnVsZVwiLFxuICAgICAgICAgICAgICAgIHNoaWZ0OiBzaGlmdCAmJiBzaGlmdC52YWx1ZSxcbiAgICAgICAgICAgICAgICB3aWR0aDogd2lkdGgudmFsdWUsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQudmFsdWVcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gQSBLYVRlWCBsb2dvXG4gICAgXCJcXFxcS2FUZVhcIjoge1xuICAgICAgICBudW1BcmdzOiAwLFxuICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihmdW5jKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwia2F0ZXhcIlxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbi8vIEV4dHJhIGRhdGEgbmVlZGVkIGZvciB0aGUgZGVsaW1pdGVyIGhhbmRsZXIgZG93biBiZWxvd1xudmFyIGRlbGltaXRlclNpemVzID0ge1xuICAgIFwiXFxcXGJpZ2xcIiA6IHt0eXBlOiBcIm9wZW5cIiwgICAgc2l6ZTogMX0sXG4gICAgXCJcXFxcQmlnbFwiIDoge3R5cGU6IFwib3BlblwiLCAgICBzaXplOiAyfSxcbiAgICBcIlxcXFxiaWdnbFwiOiB7dHlwZTogXCJvcGVuXCIsICAgIHNpemU6IDN9LFxuICAgIFwiXFxcXEJpZ2dsXCI6IHt0eXBlOiBcIm9wZW5cIiwgICAgc2l6ZTogNH0sXG4gICAgXCJcXFxcYmlnclwiIDoge3R5cGU6IFwiY2xvc2VcIiwgICBzaXplOiAxfSxcbiAgICBcIlxcXFxCaWdyXCIgOiB7dHlwZTogXCJjbG9zZVwiLCAgIHNpemU6IDJ9LFxuICAgIFwiXFxcXGJpZ2dyXCI6IHt0eXBlOiBcImNsb3NlXCIsICAgc2l6ZTogM30sXG4gICAgXCJcXFxcQmlnZ3JcIjoge3R5cGU6IFwiY2xvc2VcIiwgICBzaXplOiA0fSxcbiAgICBcIlxcXFxiaWdtXCIgOiB7dHlwZTogXCJyZWxcIiwgICAgIHNpemU6IDF9LFxuICAgIFwiXFxcXEJpZ21cIiA6IHt0eXBlOiBcInJlbFwiLCAgICAgc2l6ZTogMn0sXG4gICAgXCJcXFxcYmlnZ21cIjoge3R5cGU6IFwicmVsXCIsICAgICBzaXplOiAzfSxcbiAgICBcIlxcXFxCaWdnbVwiOiB7dHlwZTogXCJyZWxcIiwgICAgIHNpemU6IDR9LFxuICAgIFwiXFxcXGJpZ1wiICA6IHt0eXBlOiBcInRleHRvcmRcIiwgc2l6ZTogMX0sXG4gICAgXCJcXFxcQmlnXCIgIDoge3R5cGU6IFwidGV4dG9yZFwiLCBzaXplOiAyfSxcbiAgICBcIlxcXFxiaWdnXCIgOiB7dHlwZTogXCJ0ZXh0b3JkXCIsIHNpemU6IDN9LFxuICAgIFwiXFxcXEJpZ2dcIiA6IHt0eXBlOiBcInRleHRvcmRcIiwgc2l6ZTogNH1cbn07XG5cbnZhciBkZWxpbWl0ZXJzID0gW1xuICAgIFwiKFwiLCBcIilcIiwgXCJbXCIsIFwiXFxcXGxicmFja1wiLCBcIl1cIiwgXCJcXFxccmJyYWNrXCIsXG4gICAgXCJcXFxce1wiLCBcIlxcXFxsYnJhY2VcIiwgXCJcXFxcfVwiLCBcIlxcXFxyYnJhY2VcIixcbiAgICBcIlxcXFxsZmxvb3JcIiwgXCJcXFxccmZsb29yXCIsIFwiXFxcXGxjZWlsXCIsIFwiXFxcXHJjZWlsXCIsXG4gICAgXCI8XCIsIFwiPlwiLCBcIlxcXFxsYW5nbGVcIiwgXCJcXFxccmFuZ2xlXCIsXG4gICAgXCIvXCIsIFwiXFxcXGJhY2tzbGFzaFwiLFxuICAgIFwifFwiLCBcIlxcXFx2ZXJ0XCIsIFwiXFxcXHxcIiwgXCJcXFxcVmVydFwiLFxuICAgIFwiXFxcXHVwYXJyb3dcIiwgXCJcXFxcVXBhcnJvd1wiLFxuICAgIFwiXFxcXGRvd25hcnJvd1wiLCBcIlxcXFxEb3duYXJyb3dcIixcbiAgICBcIlxcXFx1cGRvd25hcnJvd1wiLCBcIlxcXFxVcGRvd25hcnJvd1wiLFxuICAgIFwiLlwiXG5dO1xuXG4vKlxuICogVGhpcyBpcyBhIGxpc3Qgb2YgZnVuY3Rpb25zIHdoaWNoIGVhY2ggaGF2ZSB0aGUgc2FtZSBmdW5jdGlvbiBidXQgaGF2ZVxuICogZGlmZmVyZW50IG5hbWVzIHNvIHRoYXQgd2UgZG9uJ3QgaGF2ZSB0byBkdXBsaWNhdGUgdGhlIGRhdGEgYSBidW5jaCBvZiB0aW1lcy5cbiAqIEVhY2ggZWxlbWVudCBpbiB0aGUgbGlzdCBpcyBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIGtleXM6XG4gKiAgLSBmdW5jczogQSBsaXN0IG9mIGZ1bmN0aW9uIG5hbWVzIHRvIGJlIGFzc29jaWF0ZWQgd2l0aCB0aGUgZGF0YVxuICogIC0gZGF0YTogQW4gb2JqZWN0eSB3aXRoIHRoZSBzYW1lIGRhdGEgYXMgaW4gZWFjaCB2YWx1ZSBvZiB0aGUgYGZ1bmN0aW9uYFxuICogICAgICAgICAgdGFibGUgYWJvdmVcbiAqL1xudmFyIGR1cGxpY2F0ZWRGdW5jdGlvbnMgPSBbXG4gICAgLy8gU2luZ2xlLWFyZ3VtZW50IGNvbG9yIGZ1bmN0aW9uc1xuICAgIHtcbiAgICAgICAgZnVuY3M6IFtcbiAgICAgICAgICAgIFwiXFxcXGJsdWVcIiwgXCJcXFxcb3JhbmdlXCIsIFwiXFxcXHBpbmtcIiwgXCJcXFxccmVkXCIsXG4gICAgICAgICAgICBcIlxcXFxncmVlblwiLCBcIlxcXFxncmF5XCIsIFwiXFxcXHB1cnBsZVwiXG4gICAgICAgIF0sXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIG51bUFyZ3M6IDEsXG4gICAgICAgICAgICBhbGxvd2VkSW5UZXh0OiB0cnVlLFxuICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oZnVuYywgYm9keSkge1xuICAgICAgICAgICAgICAgIHZhciBhdG9tcztcbiAgICAgICAgICAgICAgICBpZiAoYm9keS50eXBlID09PSBcIm9yZGdyb3VwXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgYXRvbXMgPSBib2R5LnZhbHVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGF0b21zID0gW2JvZHldO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiY29sb3JcIixcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IFwia2F0ZXgtXCIgKyBmdW5jLnNsaWNlKDEpLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogYXRvbXNcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8vIFRoZXJlIGFyZSAyIGZsYWdzIGZvciBvcGVyYXRvcnM7IHdoZXRoZXIgdGhleSBwcm9kdWNlIGxpbWl0cyBpblxuICAgIC8vIGRpc3BsYXlzdHlsZSwgYW5kIHdoZXRoZXIgdGhleSBhcmUgc3ltYm9scyBhbmQgc2hvdWxkIGdyb3cgaW5cbiAgICAvLyBkaXNwbGF5c3R5bGUuIFRoZXNlIGZvdXIgZ3JvdXBzIGNvdmVyIHRoZSBmb3VyIHBvc3NpYmxlIGNob2ljZXMuXG5cbiAgICAvLyBObyBsaW1pdHMsIG5vdCBzeW1ib2xzXG4gICAge1xuICAgICAgICBmdW5jczogW1xuICAgICAgICAgICAgXCJcXFxcYXJjc2luXCIsIFwiXFxcXGFyY2Nvc1wiLCBcIlxcXFxhcmN0YW5cIiwgXCJcXFxcYXJnXCIsIFwiXFxcXGNvc1wiLCBcIlxcXFxjb3NoXCIsXG4gICAgICAgICAgICBcIlxcXFxjb3RcIiwgXCJcXFxcY290aFwiLCBcIlxcXFxjc2NcIiwgXCJcXFxcZGVnXCIsIFwiXFxcXGRpbVwiLCBcIlxcXFxleHBcIiwgXCJcXFxcaG9tXCIsXG4gICAgICAgICAgICBcIlxcXFxrZXJcIiwgXCJcXFxcbGdcIiwgXCJcXFxcbG5cIiwgXCJcXFxcbG9nXCIsIFwiXFxcXHNlY1wiLCBcIlxcXFxzaW5cIiwgXCJcXFxcc2luaFwiLFxuICAgICAgICAgICAgXCJcXFxcdGFuXCIsXCJcXFxcdGFuaFwiXG4gICAgICAgIF0sXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIG51bUFyZ3M6IDAsXG4gICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihmdW5jKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJvcFwiLFxuICAgICAgICAgICAgICAgICAgICBsaW1pdHM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBzeW1ib2w6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiBmdW5jXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyBMaW1pdHMsIG5vdCBzeW1ib2xzXG4gICAge1xuICAgICAgICBmdW5jczogW1xuICAgICAgICAgICAgXCJcXFxcZGV0XCIsIFwiXFxcXGdjZFwiLCBcIlxcXFxpbmZcIiwgXCJcXFxcbGltXCIsIFwiXFxcXGxpbWluZlwiLCBcIlxcXFxsaW1zdXBcIiwgXCJcXFxcbWF4XCIsXG4gICAgICAgICAgICBcIlxcXFxtaW5cIiwgXCJcXFxcUHJcIiwgXCJcXFxcc3VwXCJcbiAgICAgICAgXSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgbnVtQXJnczogMCxcbiAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGZ1bmMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIm9wXCIsXG4gICAgICAgICAgICAgICAgICAgIGxpbWl0czogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgc3ltYm9sOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgYm9keTogZnVuY1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gTm8gbGltaXRzLCBzeW1ib2xzXG4gICAge1xuICAgICAgICBmdW5jczogW1xuICAgICAgICAgICAgXCJcXFxcaW50XCIsIFwiXFxcXGlpbnRcIiwgXCJcXFxcaWlpbnRcIiwgXCJcXFxcb2ludFwiXG4gICAgICAgIF0sXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIG51bUFyZ3M6IDAsXG4gICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihmdW5jKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJvcFwiLFxuICAgICAgICAgICAgICAgICAgICBsaW1pdHM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBzeW1ib2w6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IGZ1bmNcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8vIExpbWl0cywgc3ltYm9sc1xuICAgIHtcbiAgICAgICAgZnVuY3M6IFtcbiAgICAgICAgICAgIFwiXFxcXGNvcHJvZFwiLCBcIlxcXFxiaWd2ZWVcIiwgXCJcXFxcYmlnd2VkZ2VcIiwgXCJcXFxcYmlndXBsdXNcIiwgXCJcXFxcYmlnY2FwXCIsXG4gICAgICAgICAgICBcIlxcXFxiaWdjdXBcIiwgXCJcXFxcaW50b3BcIiwgXCJcXFxccHJvZFwiLCBcIlxcXFxzdW1cIiwgXCJcXFxcYmlnb3RpbWVzXCIsXG4gICAgICAgICAgICBcIlxcXFxiaWdvcGx1c1wiLCBcIlxcXFxiaWdvZG90XCIsIFwiXFxcXGJpZ3NxY3VwXCIsIFwiXFxcXHNtYWxsaW50XCJcbiAgICAgICAgXSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgbnVtQXJnczogMCxcbiAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGZ1bmMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIm9wXCIsXG4gICAgICAgICAgICAgICAgICAgIGxpbWl0czogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgc3ltYm9sOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiBmdW5jXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyBGcmFjdGlvbnNcbiAgICB7XG4gICAgICAgIGZ1bmNzOiBbXG4gICAgICAgICAgICBcIlxcXFxkZnJhY1wiLCBcIlxcXFxmcmFjXCIsIFwiXFxcXHRmcmFjXCIsXG4gICAgICAgICAgICBcIlxcXFxkYmlub21cIiwgXCJcXFxcYmlub21cIiwgXCJcXFxcdGJpbm9tXCJcbiAgICAgICAgXSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgbnVtQXJnczogMixcbiAgICAgICAgICAgIGdyZWVkaW5lc3M6IDIsXG4gICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihmdW5jLCBudW1lciwgZGVub20pIHtcbiAgICAgICAgICAgICAgICB2YXIgaGFzQmFyTGluZTtcbiAgICAgICAgICAgICAgICB2YXIgbGVmdERlbGltID0gbnVsbDtcbiAgICAgICAgICAgICAgICB2YXIgcmlnaHREZWxpbSA9IG51bGw7XG4gICAgICAgICAgICAgICAgdmFyIHNpemUgPSBcImF1dG9cIjtcblxuICAgICAgICAgICAgICAgIHN3aXRjaCAoZnVuYykge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiXFxcXGRmcmFjXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJcXFxcZnJhY1wiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiXFxcXHRmcmFjXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNCYXJMaW5lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiXFxcXGRiaW5vbVwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiXFxcXGJpbm9tXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJcXFxcdGJpbm9tXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNCYXJMaW5lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0RGVsaW0gPSBcIihcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0RGVsaW0gPSBcIilcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5yZWNvZ25pemVkIGdlbmZyYWMgY29tbWFuZFwiKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGZ1bmMpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIlxcXFxkZnJhY1wiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiXFxcXGRiaW5vbVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZSA9IFwiZGlzcGxheVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJcXFxcdGZyYWNcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIlxcXFx0Ymlub21cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemUgPSBcInRleHRcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZ2VuZnJhY1wiLFxuICAgICAgICAgICAgICAgICAgICBudW1lcjogbnVtZXIsXG4gICAgICAgICAgICAgICAgICAgIGRlbm9tOiBkZW5vbSxcbiAgICAgICAgICAgICAgICAgICAgaGFzQmFyTGluZTogaGFzQmFyTGluZSxcbiAgICAgICAgICAgICAgICAgICAgbGVmdERlbGltOiBsZWZ0RGVsaW0sXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0RGVsaW06IHJpZ2h0RGVsaW0sXG4gICAgICAgICAgICAgICAgICAgIHNpemU6IHNpemVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8vIExlZnQgYW5kIHJpZ2h0IG92ZXJsYXAgZnVuY3Rpb25zXG4gICAge1xuICAgICAgICBmdW5jczogW1wiXFxcXGxsYXBcIiwgXCJcXFxccmxhcFwiXSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgbnVtQXJnczogMSxcbiAgICAgICAgICAgIGFsbG93ZWRJblRleHQ6IHRydWUsXG4gICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihmdW5jLCBib2R5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogZnVuYy5zbGljZSgxKSxcbiAgICAgICAgICAgICAgICAgICAgYm9keTogYm9keVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gRGVsaW1pdGVyIGZ1bmN0aW9uc1xuICAgIHtcbiAgICAgICAgZnVuY3M6IFtcbiAgICAgICAgICAgIFwiXFxcXGJpZ2xcIiwgXCJcXFxcQmlnbFwiLCBcIlxcXFxiaWdnbFwiLCBcIlxcXFxCaWdnbFwiLFxuICAgICAgICAgICAgXCJcXFxcYmlnclwiLCBcIlxcXFxCaWdyXCIsIFwiXFxcXGJpZ2dyXCIsIFwiXFxcXEJpZ2dyXCIsXG4gICAgICAgICAgICBcIlxcXFxiaWdtXCIsIFwiXFxcXEJpZ21cIiwgXCJcXFxcYmlnZ21cIiwgXCJcXFxcQmlnZ21cIixcbiAgICAgICAgICAgIFwiXFxcXGJpZ1wiLCAgXCJcXFxcQmlnXCIsICBcIlxcXFxiaWdnXCIsICBcIlxcXFxCaWdnXCIsXG4gICAgICAgICAgICBcIlxcXFxsZWZ0XCIsIFwiXFxcXHJpZ2h0XCJcbiAgICAgICAgXSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgbnVtQXJnczogMSxcbiAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGZ1bmMsIGRlbGltLCBwb3NpdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXV0aWxzLmNvbnRhaW5zKGRlbGltaXRlcnMsIGRlbGltLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUGFyc2VFcnJvcihcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiSW52YWxpZCBkZWxpbWl0ZXI6ICdcIiArIGRlbGltLnZhbHVlICsgXCInIGFmdGVyICdcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuYyArIFwiJ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sZXhlciwgcG9zaXRpb25zWzFdKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBsZWZ0IGFuZCByaWdodCBhcmUgY2F1Z2h0IHNvbWV3aGVyZSBpbiBQYXJzZXIuanMsIHdoaWNoIGlzXG4gICAgICAgICAgICAgICAgLy8gd2h5IHRoaXMgZGF0YSBkb2Vzbid0IG1hdGNoIHdoYXQgaXMgaW4gYnVpbGRUcmVlXG4gICAgICAgICAgICAgICAgaWYgKGZ1bmMgPT09IFwiXFxcXGxlZnRcIiB8fCBmdW5jID09PSBcIlxcXFxyaWdodFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImxlZnRyaWdodFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGRlbGltLnZhbHVlXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZGVsaW1zaXppbmdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IGRlbGltaXRlclNpemVzW2Z1bmNdLnNpemUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxpbVR5cGU6IGRlbGltaXRlclNpemVzW2Z1bmNdLnR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZGVsaW0udmFsdWVcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gU2l6aW5nIGZ1bmN0aW9ucyAoaGFuZGxlZCBpbiBQYXJzZXIuanMgZXhwbGljaXRseSwgaGVuY2Ugbm8gaGFuZGxlcilcbiAgICB7XG4gICAgICAgIGZ1bmNzOiBbXG4gICAgICAgICAgICBcIlxcXFx0aW55XCIsIFwiXFxcXHNjcmlwdHNpemVcIiwgXCJcXFxcZm9vdG5vdGVzaXplXCIsIFwiXFxcXHNtYWxsXCIsXG4gICAgICAgICAgICBcIlxcXFxub3JtYWxzaXplXCIsIFwiXFxcXGxhcmdlXCIsIFwiXFxcXExhcmdlXCIsIFwiXFxcXExBUkdFXCIsIFwiXFxcXGh1Z2VcIiwgXCJcXFxcSHVnZVwiXG4gICAgICAgIF0sXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIG51bUFyZ3M6IDBcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyBTdHlsZSBjaGFuZ2luZyBmdW5jdGlvbnMgKGhhbmRsZWQgaW4gUGFyc2VyLmpzIGV4cGxpY2l0bHksIGhlbmNlIG5vXG4gICAgLy8gaGFuZGxlcilcbiAgICB7XG4gICAgICAgIGZ1bmNzOiBbXG4gICAgICAgICAgICBcIlxcXFxkaXNwbGF5c3R5bGVcIiwgXCJcXFxcdGV4dHN0eWxlXCIsIFwiXFxcXHNjcmlwdHN0eWxlXCIsXG4gICAgICAgICAgICBcIlxcXFxzY3JpcHRzY3JpcHRzdHlsZVwiXG4gICAgICAgIF0sXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIG51bUFyZ3M6IDBcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyBBY2NlbnRzXG4gICAge1xuICAgICAgICBmdW5jczogW1xuICAgICAgICAgICAgXCJcXFxcYWN1dGVcIiwgXCJcXFxcZ3JhdmVcIiwgXCJcXFxcZGRvdFwiLCBcIlxcXFx0aWxkZVwiLCBcIlxcXFxiYXJcIiwgXCJcXFxcYnJldmVcIixcbiAgICAgICAgICAgIFwiXFxcXGNoZWNrXCIsIFwiXFxcXGhhdFwiLCBcIlxcXFx2ZWNcIiwgXCJcXFxcZG90XCJcbiAgICAgICAgICAgIC8vIFdlIGRvbid0IHN1cHBvcnQgZXhwYW5kaW5nIGFjY2VudHMgeWV0XG4gICAgICAgICAgICAvLyBcIlxcXFx3aWRldGlsZGVcIiwgXCJcXFxcd2lkZWhhdFwiXG4gICAgICAgIF0sXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIG51bUFyZ3M6IDEsXG4gICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihmdW5jLCBiYXNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhY2NlbnRcIixcbiAgICAgICAgICAgICAgICAgICAgYWNjZW50OiBmdW5jLFxuICAgICAgICAgICAgICAgICAgICBiYXNlOiBiYXNlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyBJbmZpeCBnZW5lcmFsaXplZCBmcmFjdGlvbnNcbiAgICB7XG4gICAgICAgIGZ1bmNzOiBbXCJcXFxcb3ZlclwiLCBcIlxcXFxjaG9vc2VcIl0sXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIG51bUFyZ3M6IDAsXG4gICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbiAoZnVuYykge1xuICAgICAgICAgICAgICAgIHZhciByZXBsYWNlV2l0aDtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGZ1bmMpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIlxcXFxvdmVyXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlV2l0aCA9IFwiXFxcXGZyYWNcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiXFxcXGNob29zZVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZVdpdGggPSBcIlxcXFxiaW5vbVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbnJlY29nbml6ZWQgaW5maXggZ2VuZnJhYyBjb21tYW5kXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImluZml4XCIsXG4gICAgICAgICAgICAgICAgICAgIHJlcGxhY2VXaXRoOiByZXBsYWNlV2l0aFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5dO1xuXG52YXIgYWRkRnVuY3NXaXRoRGF0YSA9IGZ1bmN0aW9uKGZ1bmNzLCBkYXRhKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmdW5jcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBmdW5jdGlvbnNbZnVuY3NbaV1dID0gZGF0YTtcbiAgICB9XG59O1xuXG4vLyBBZGQgYWxsIG9mIHRoZSBmdW5jdGlvbnMgaW4gZHVwbGljYXRlZEZ1bmN0aW9ucyB0byB0aGUgZnVuY3Rpb25zIG1hcFxuZm9yICh2YXIgaSA9IDA7IGkgPCBkdXBsaWNhdGVkRnVuY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgYWRkRnVuY3NXaXRoRGF0YShkdXBsaWNhdGVkRnVuY3Rpb25zW2ldLmZ1bmNzLCBkdXBsaWNhdGVkRnVuY3Rpb25zW2ldLmRhdGEpO1xufVxuXG4vLyBSZXR1cm5zIHRoZSBncmVlZGluZXNzIG9mIGEgZ2l2ZW4gZnVuY3Rpb24uIFNpbmNlIGdyZWVkaW5lc3MgaXMgb3B0aW9uYWwsIHdlXG4vLyB1c2UgdGhpcyBmdW5jdGlvbiB0byBwdXQgaW4gdGhlIGRlZmF1bHQgdmFsdWUgaWYgaXQgaXMgdW5kZWZpbmVkLlxudmFyIGdldEdyZWVkaW5lc3MgPSBmdW5jdGlvbihmdW5jKSB7XG4gICAgaWYgKGZ1bmN0aW9uc1tmdW5jXS5ncmVlZGluZXNzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uc1tmdW5jXS5ncmVlZGluZXNzO1xuICAgIH1cbn07XG5cbi8vIFNldCBkZWZhdWx0IHZhbHVlcyBvZiBmdW5jdGlvbnNcbmZvciAodmFyIGYgaW4gZnVuY3Rpb25zKSB7XG4gICAgaWYgKGZ1bmN0aW9ucy5oYXNPd25Qcm9wZXJ0eShmKSkge1xuICAgICAgICB2YXIgZnVuYyA9IGZ1bmN0aW9uc1tmXTtcblxuICAgICAgICBmdW5jdGlvbnNbZl0gPSB7XG4gICAgICAgICAgICBudW1BcmdzOiBmdW5jLm51bUFyZ3MsXG4gICAgICAgICAgICBhcmdUeXBlczogZnVuYy5hcmdUeXBlcyxcbiAgICAgICAgICAgIGdyZWVkaW5lc3M6IChmdW5jLmdyZWVkaW5lc3MgPT09IHVuZGVmaW5lZCkgPyAxIDogZnVuYy5ncmVlZGluZXNzLFxuICAgICAgICAgICAgYWxsb3dlZEluVGV4dDogZnVuYy5hbGxvd2VkSW5UZXh0ID8gZnVuYy5hbGxvd2VkSW5UZXh0IDogZmFsc2UsXG4gICAgICAgICAgICBudW1PcHRpb25hbEFyZ3M6IChmdW5jLm51bU9wdGlvbmFsQXJncyA9PT0gdW5kZWZpbmVkKSA/IDAgOlxuICAgICAgICAgICAgICAgIGZ1bmMubnVtT3B0aW9uYWxBcmdzLFxuICAgICAgICAgICAgaGFuZGxlcjogZnVuYy5oYW5kbGVyXG4gICAgICAgIH07XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBmdW5jczogZnVuY3Rpb25zLFxuICAgIGdldEdyZWVkaW5lc3M6IGdldEdyZWVkaW5lc3Ncbn07XG4iLCIvKipcbiAqIFByb3ZpZGVzIGEgc2luZ2xlIGZ1bmN0aW9uIGZvciBwYXJzaW5nIGFuIGV4cHJlc3Npb24gdXNpbmcgYSBQYXJzZXJcbiAqIFRPRE8oZW1pbHkpOiBSZW1vdmUgdGhpc1xuICovXG5cbnZhciBQYXJzZXIgPSByZXF1aXJlKFwiLi9QYXJzZXJcIik7XG5cbi8qKlxuICogUGFyc2VzIGFuIGV4cHJlc3Npb24gdXNpbmcgYSBQYXJzZXIsIHRoZW4gcmV0dXJucyB0aGUgcGFyc2VkIHJlc3VsdC5cbiAqL1xudmFyIHBhcnNlVHJlZSA9IGZ1bmN0aW9uKHRvUGFyc2UpIHtcbiAgICB2YXIgcGFyc2VyID0gbmV3IFBhcnNlcih0b1BhcnNlKTtcblxuICAgIHJldHVybiBwYXJzZXIucGFyc2UoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcGFyc2VUcmVlO1xuIiwiLyoqXG4gKiBUaGlzIGZpbGUgaG9sZHMgYSBsaXN0IG9mIGFsbCBuby1hcmd1bWVudCBmdW5jdGlvbnMgYW5kIHNpbmdsZS1jaGFyYWN0ZXJcbiAqIHN5bWJvbHMgKGxpa2UgJ2EnIG9yICc7JykuXG4gKlxuICogRm9yIGVhY2ggb2YgdGhlIHN5bWJvbHMsIHRoZXJlIGFyZSB0aHJlZSBwcm9wZXJ0aWVzIHRoZXkgY2FuIGhhdmU6XG4gKiAtIGZvbnQgKHJlcXVpcmVkKTogdGhlIGZvbnQgdG8gYmUgdXNlZCBmb3IgdGhpcyBzeW1ib2wuIEVpdGhlciBcIm1haW5cIiAodGhlXG4gICAgIG5vcm1hbCBmb250KSwgb3IgXCJhbXNcIiAodGhlIGFtcyBmb250cykuXG4gKiAtIGdyb3VwIChyZXF1aXJlZCk6IHRoZSBQYXJzZU5vZGUgZ3JvdXAgdHlwZSB0aGUgc3ltYm9sIHNob3VsZCBoYXZlIChpLmUuXG4gICAgIFwidGV4dG9yZFwiLCBcIm1hdGhvcmRcIiwgZXRjKS5cbiAqIC0gcmVwbGFjZSAob3B0aW9uYWwpOiB0aGUgY2hhcmFjdGVyIHRoYXQgdGhpcyBzeW1ib2wgb3IgZnVuY3Rpb24gc2hvdWxkIGJlXG4gKiAgIHJlcGxhY2VkIHdpdGggKGkuZS4gXCJcXHBoaVwiIGhhcyBhIHJlcGxhY2UgdmFsdWUgb2YgXCJcXHUwM2Q1XCIsIHRoZSBwaGlcbiAqICAgY2hhcmFjdGVyIGluIHRoZSBtYWluIGZvbnQpLlxuICpcbiAqIFRoZSBvdXRlcm1vc3QgbWFwIGluIHRoZSB0YWJsZSBpbmRpY2F0ZXMgd2hhdCBtb2RlIHRoZSBzeW1ib2xzIHNob3VsZCBiZVxuICogYWNjZXB0ZWQgaW4gKGUuZy4gXCJtYXRoXCIgb3IgXCJ0ZXh0XCIpLlxuICovXG5cbnZhciBzeW1ib2xzID0ge1xuICAgIFwibWF0aFwiOiB7XG4gICAgICAgIFwiYFwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcInRleHRvcmRcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MjAxOFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXCRcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJ0ZXh0b3JkXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIiRcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFwlXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwidGV4dG9yZFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCIlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcX1wiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcInRleHRvcmRcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiX1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXGFuZ2xlXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwidGV4dG9yZFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyMjIwXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcaW5mdHlcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJ0ZXh0b3JkXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTIyMWVcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxwcmltZVwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcInRleHRvcmRcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MjAzMlwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXHRyaWFuZ2xlXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwidGV4dG9yZFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyNWIzXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcR2FtbWFcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJ0ZXh0b3JkXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTAzOTNcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxEZWx0YVwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcInRleHRvcmRcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MDM5NFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXFRoZXRhXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwidGV4dG9yZFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUwMzk4XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcTGFtYmRhXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwidGV4dG9yZFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUwMzliXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcWGlcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJ0ZXh0b3JkXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTAzOWVcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxQaVwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcInRleHRvcmRcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MDNhMFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXFNpZ21hXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwidGV4dG9yZFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUwM2EzXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcVXBzaWxvblwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcInRleHRvcmRcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MDNhNVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXFBoaVwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcInRleHRvcmRcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MDNhNlwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXFBzaVwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcInRleHRvcmRcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MDNhOFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXE9tZWdhXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwidGV4dG9yZFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUwM2E5XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcbmVnXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwidGV4dG9yZFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUwMGFjXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcbG5vdFwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcInRleHRvcmRcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MDBhY1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXHRvcFwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcInRleHRvcmRcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MjJhNFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXGJvdFwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcInRleHRvcmRcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MjJhNVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXGVtcHR5c2V0XCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwidGV4dG9yZFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyMjA1XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcdmFybm90aGluZ1wiOiB7XG4gICAgICAgICAgICBmb250OiBcImFtc1wiLFxuICAgICAgICAgICAgZ3JvdXA6IFwidGV4dG9yZFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyMjA1XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcYWxwaGFcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJtYXRob3JkXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTAzYjFcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxiZXRhXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwibWF0aG9yZFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUwM2IyXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcZ2FtbWFcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJtYXRob3JkXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTAzYjNcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxkZWx0YVwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcIm1hdGhvcmRcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MDNiNFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXGVwc2lsb25cIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJtYXRob3JkXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTAzZjVcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFx6ZXRhXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwibWF0aG9yZFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUwM2I2XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcZXRhXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwibWF0aG9yZFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUwM2I3XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcdGhldGFcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJtYXRob3JkXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTAzYjhcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxpb3RhXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwibWF0aG9yZFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUwM2I5XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxca2FwcGFcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJtYXRob3JkXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTAzYmFcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxsYW1iZGFcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJtYXRob3JkXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTAzYmJcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxtdVwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcIm1hdGhvcmRcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MDNiY1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXG51XCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwibWF0aG9yZFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUwM2JkXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxceGlcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJtYXRob3JkXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTAzYmVcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxvbWljcm9uXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwibWF0aG9yZFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJvXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxccGlcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJtYXRob3JkXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTAzYzBcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxyaG9cIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJtYXRob3JkXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTAzYzFcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxzaWdtYVwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcIm1hdGhvcmRcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MDNjM1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXHRhdVwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcIm1hdGhvcmRcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MDNjNFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXHVwc2lsb25cIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJtYXRob3JkXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTAzYzVcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxwaGlcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJtYXRob3JkXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTAzZDVcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxjaGlcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJtYXRob3JkXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTAzYzdcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxwc2lcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJtYXRob3JkXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTAzYzhcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxvbWVnYVwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcIm1hdGhvcmRcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MDNjOVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXHZhcmVwc2lsb25cIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJtYXRob3JkXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTAzYjVcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFx2YXJ0aGV0YVwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcIm1hdGhvcmRcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MDNkMVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXHZhcnBpXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwibWF0aG9yZFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUwM2Q2XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcdmFycmhvXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwibWF0aG9yZFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUwM2YxXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcdmFyc2lnbWFcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJtYXRob3JkXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTAzYzJcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFx2YXJwaGlcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJtYXRob3JkXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTAzYzZcIlxuICAgICAgICB9LFxuICAgICAgICBcIipcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJiaW5cIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MjIxN1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwiK1wiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcImJpblwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiLVwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcImJpblwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyMjEyXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcY2RvdFwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcImJpblwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyMmM1XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcY2lyY1wiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcImJpblwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyMjE4XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcZGl2XCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwiYmluXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTAwZjdcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxwbVwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcImJpblwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUwMGIxXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcdGltZXNcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJiaW5cIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MDBkN1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXGNhcFwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcImJpblwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyMjI5XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcY3VwXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwiYmluXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTIyMmFcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxzZXRtaW51c1wiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcImJpblwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyMjE2XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcbGFuZFwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcImJpblwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyMjI3XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcbG9yXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwiYmluXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTIyMjhcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFx3ZWRnZVwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcImJpblwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyMjI3XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcdmVlXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwiYmluXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTIyMjhcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxzdXJkXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwidGV4dG9yZFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyMjFhXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCIoXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwib3BlblwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiW1wiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcIm9wZW5cIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxsYW5nbGVcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJvcGVuXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTI3ZThcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxsdmVydFwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcIm9wZW5cIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MjIyM1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwiKVwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcImNsb3NlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJdXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwiY2xvc2VcIlxuICAgICAgICB9LFxuICAgICAgICBcIj9cIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJjbG9zZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiIVwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcImNsb3NlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxccmFuZ2xlXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwiY2xvc2VcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MjdlOVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXHJ2ZXJ0XCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwiY2xvc2VcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MjIyM1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwiPVwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcInJlbFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiPFwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcInJlbFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiPlwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcInJlbFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiOlwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcInJlbFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXGFwcHJveFwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcInJlbFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyMjQ4XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcY29uZ1wiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcInJlbFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyMjQ1XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcZ2VcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJyZWxcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MjI2NVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXGdlcVwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcInJlbFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyMjY1XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcZ2V0c1wiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcInJlbFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyMTkwXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcaW5cIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJyZWxcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MjIwOFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXG5vdGluXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwicmVsXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTIyMDlcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxzdWJzZXRcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJyZWxcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MjI4MlwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXHN1cHNldFwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcInJlbFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyMjgzXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcc3Vic2V0ZXFcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJyZWxcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MjI4NlwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXHN1cHNldGVxXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwicmVsXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTIyODdcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxuc3Vic2V0ZXFcIjoge1xuICAgICAgICAgICAgZm9udDogXCJhbXNcIixcbiAgICAgICAgICAgIGdyb3VwOiBcInJlbFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyMjg4XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcbnN1cHNldGVxXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwiYW1zXCIsXG4gICAgICAgICAgICBncm91cDogXCJyZWxcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MjI4OVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXG1vZGVsc1wiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcInJlbFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyMmE4XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcbGVmdGFycm93XCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwicmVsXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTIxOTBcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxsZVwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcInJlbFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyMjY0XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcbGVxXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwicmVsXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTIyNjRcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxuZVwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcInJlbFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyMjYwXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcbmVxXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwicmVsXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTIyNjBcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxyaWdodGFycm93XCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwicmVsXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTIxOTJcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFx0b1wiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcInJlbFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyMTkyXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcbmdlcVwiOiB7XG4gICAgICAgICAgICBmb250OiBcImFtc1wiLFxuICAgICAgICAgICAgZ3JvdXA6IFwicmVsXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTIyNzFcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxubGVxXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwiYW1zXCIsXG4gICAgICAgICAgICBncm91cDogXCJyZWxcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MjI3MFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXCFcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJzcGFjaW5nXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcIFwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcInNwYWNpbmdcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MDBhMFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiflwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcInNwYWNpbmdcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MDBhMFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXCxcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJzcGFjaW5nXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcOlwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcInNwYWNpbmdcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFw7XCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwic3BhY2luZ1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXGVuc3BhY2VcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJzcGFjaW5nXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxccXF1YWRcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJzcGFjaW5nXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxccXVhZFwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcInNwYWNpbmdcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxzcGFjZVwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcInNwYWNpbmdcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MDBhMFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiLFwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcInB1bmN0XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCI7XCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwicHVuY3RcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxjb2xvblwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcInB1bmN0XCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIjpcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxiYXJ3ZWRnZVwiOiB7XG4gICAgICAgICAgICBmb250OiBcImFtc1wiLFxuICAgICAgICAgICAgZ3JvdXA6IFwidGV4dG9yZFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyMmJjXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcdmVlYmFyXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwiYW1zXCIsXG4gICAgICAgICAgICBncm91cDogXCJ0ZXh0b3JkXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTIyYmJcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxvZG90XCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwidGV4dG9yZFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyMjk5XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcb3BsdXNcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJ0ZXh0b3JkXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTIyOTVcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxvdGltZXNcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJ0ZXh0b3JkXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTIyOTdcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxwYXJ0aWFsXCI6e1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJ0ZXh0b3JkXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTIyMDJcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxvc2xhc2hcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJ0ZXh0b3JkXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTIyOThcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxjaXJjbGVkY2lyY1wiOiB7XG4gICAgICAgICAgICBmb250OiBcImFtc1wiLFxuICAgICAgICAgICAgZ3JvdXA6IFwidGV4dG9yZFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyMjlhXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcYm94ZG90XCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwiYW1zXCIsXG4gICAgICAgICAgICBncm91cDogXCJ0ZXh0b3JkXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTIyYTFcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxiaWd0cmlhbmdsZXVwXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwidGV4dG9yZFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyNWIzXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcYmlndHJpYW5nbGVkb3duXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwidGV4dG9yZFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyNWJkXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcZGFnZ2VyXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwidGV4dG9yZFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyMDIwXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcZGlhbW9uZFwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcInRleHRvcmRcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MjJjNFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXHN0YXJcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJ0ZXh0b3JkXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTIyYzZcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFx0cmlhbmdsZWxlZnRcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJ0ZXh0b3JkXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTI1YzNcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFx0cmlhbmdsZXJpZ2h0XCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwidGV4dG9yZFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyNWI5XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxce1wiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcIm9wZW5cIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwie1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXH1cIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJjbG9zZVwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJ9XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcbGJyYWNlXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwib3BlblwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJ7XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxccmJyYWNlXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwiY2xvc2VcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwifVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXGxicmFja1wiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcIm9wZW5cIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiW1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXHJicmFja1wiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcImNsb3NlXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIl1cIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxsZmxvb3JcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJvcGVuXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTIzMGFcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxyZmxvb3JcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJjbG9zZVwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyMzBiXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcbGNlaWxcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJvcGVuXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTIzMDhcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxyY2VpbFwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcImNsb3NlXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTIzMDlcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxiYWNrc2xhc2hcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJ0ZXh0b3JkXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcXFxcIlxuICAgICAgICB9LFxuICAgICAgICBcInxcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJ0ZXh0b3JkXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTIyMjNcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFx2ZXJ0XCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwidGV4dG9yZFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyMjIzXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcfFwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcInRleHRvcmRcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MjIyNVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXFZlcnRcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJ0ZXh0b3JkXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTIyMjVcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFx1cGFycm93XCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwidGV4dG9yZFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyMTkxXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcVXBhcnJvd1wiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcInRleHRvcmRcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MjFkMVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXGRvd25hcnJvd1wiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcInRleHRvcmRcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MjE5M1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXERvd25hcnJvd1wiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcInRleHRvcmRcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MjFkM1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXHVwZG93bmFycm93XCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwidGV4dG9yZFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyMTk1XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcVXBkb3duYXJyb3dcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJ0ZXh0b3JkXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTIxZDVcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxjb3Byb2RcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYXRoXCIsXG4gICAgICAgICAgICBncm91cDogXCJvcFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyMjEwXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcYmlndmVlXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWF0aFwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwib3BcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MjJjMVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXGJpZ3dlZGdlXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWF0aFwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwib3BcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MjJjMFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXGJpZ3VwbHVzXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWF0aFwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwib3BcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MmEwNFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXGJpZ2NhcFwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1hdGhcIixcbiAgICAgICAgICAgIGdyb3VwOiBcIm9wXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTIyYzJcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxiaWdjdXBcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYXRoXCIsXG4gICAgICAgICAgICBncm91cDogXCJvcFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyMmMzXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcaW50XCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWF0aFwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwib3BcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MjIyYlwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXGludG9wXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWF0aFwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwib3BcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MjIyYlwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXGlpbnRcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYXRoXCIsXG4gICAgICAgICAgICBncm91cDogXCJvcFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyMjJjXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcaWlpbnRcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYXRoXCIsXG4gICAgICAgICAgICBncm91cDogXCJvcFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyMjJkXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxccHJvZFwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1hdGhcIixcbiAgICAgICAgICAgIGdyb3VwOiBcIm9wXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTIyMGZcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxzdW1cIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYXRoXCIsXG4gICAgICAgICAgICBncm91cDogXCJvcFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyMjExXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcYmlnb3RpbWVzXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWF0aFwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwib3BcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MmEwMlwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXGJpZ29wbHVzXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWF0aFwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwib3BcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MmEwMVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXGJpZ29kb3RcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYXRoXCIsXG4gICAgICAgICAgICBncm91cDogXCJvcFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyYTAwXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcb2ludFwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1hdGhcIixcbiAgICAgICAgICAgIGdyb3VwOiBcIm9wXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTIyMmVcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxiaWdzcWN1cFwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1hdGhcIixcbiAgICAgICAgICAgIGdyb3VwOiBcIm9wXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTJhMDZcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxzbWFsbGludFwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1hdGhcIixcbiAgICAgICAgICAgIGdyb3VwOiBcIm9wXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTIyMmJcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxsZG90c1wiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcInB1bmN0XCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTIwMjZcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxjZG90c1wiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcImlubmVyXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTIyZWZcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxkZG90c1wiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcImlubmVyXCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTIyZjFcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFx2ZG90c1wiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcInRleHRvcmRcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MjJlZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXGFjdXRlXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwiYWNjZW50XCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTAwYjRcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxncmF2ZVwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcImFjY2VudFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUwMDYwXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcZGRvdFwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcImFjY2VudFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUwMGE4XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcdGlsZGVcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJhY2NlbnRcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MDA3ZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXGJhclwiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcImFjY2VudFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUwMGFmXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcYnJldmVcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJhY2NlbnRcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MDJkOFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXGNoZWNrXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwiYWNjZW50XCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTAyYzdcIlxuICAgICAgICB9LFxuICAgICAgICBcIlxcXFxoYXRcIjoge1xuICAgICAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgICAgICBncm91cDogXCJhY2NlbnRcIixcbiAgICAgICAgICAgIHJlcGxhY2U6IFwiXFx1MDA1ZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXFxcXHZlY1wiOiB7XG4gICAgICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgICAgIGdyb3VwOiBcImFjY2VudFwiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUyMGQ3XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJcXFxcZG90XCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwiYWNjZW50XCIsXG4gICAgICAgICAgICByZXBsYWNlOiBcIlxcdTAyZDlcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcInRleHRcIjoge1xuICAgICAgICBcIlxcXFwgXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwic3BhY2luZ1wiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUwMGEwXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCIgXCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwic3BhY2luZ1wiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUwMGEwXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ+XCI6IHtcbiAgICAgICAgICAgIGZvbnQ6IFwibWFpblwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwic3BhY2luZ1wiLFxuICAgICAgICAgICAgcmVwbGFjZTogXCJcXHUwMGEwXCJcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbi8vIFRoZXJlIGFyZSBsb3RzIG9mIHN5bWJvbHMgd2hpY2ggYXJlIHRoZSBzYW1lLCBzbyB3ZSBhZGQgdGhlbSBpbiBhZnRlcndhcmRzLlxuXG4vLyBBbGwgb2YgdGhlc2UgYXJlIHRleHRvcmRzIGluIG1hdGggbW9kZVxudmFyIG1hdGhUZXh0U3ltYm9scyA9IFwiMDEyMzQ1Njc4OS9ALlxcXCJcIjtcbmZvciAodmFyIGkgPSAwOyBpIDwgbWF0aFRleHRTeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGNoID0gbWF0aFRleHRTeW1ib2xzLmNoYXJBdChpKTtcbiAgICBzeW1ib2xzLm1hdGhbY2hdID0ge1xuICAgICAgICBmb250OiBcIm1haW5cIixcbiAgICAgICAgZ3JvdXA6IFwidGV4dG9yZFwiXG4gICAgfTtcbn1cblxuLy8gQWxsIG9mIHRoZXNlIGFyZSB0ZXh0b3JkcyBpbiB0ZXh0IG1vZGVcbnZhciB0ZXh0U3ltYm9scyA9IFwiMDEyMzQ1Njc4OWAhQCooKS09K1tdJ1xcXCI7Oj8vLixcIjtcbmZvciAodmFyIGkgPSAwOyBpIDwgdGV4dFN5bWJvbHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgY2ggPSB0ZXh0U3ltYm9scy5jaGFyQXQoaSk7XG4gICAgc3ltYm9scy50ZXh0W2NoXSA9IHtcbiAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgIGdyb3VwOiBcInRleHRvcmRcIlxuICAgIH07XG59XG5cbi8vIEFsbCBvZiB0aGVzZSBhcmUgdGV4dG9yZHMgaW4gdGV4dCBtb2RlLCBhbmQgbWF0aG9yZHMgaW4gbWF0aCBtb2RlXG52YXIgbGV0dGVycyA9IFwiYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWlwiO1xuZm9yICh2YXIgaSA9IDA7IGkgPCBsZXR0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGNoID0gbGV0dGVycy5jaGFyQXQoaSk7XG4gICAgc3ltYm9scy5tYXRoW2NoXSA9IHtcbiAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgIGdyb3VwOiBcIm1hdGhvcmRcIlxuICAgIH07XG4gICAgc3ltYm9scy50ZXh0W2NoXSA9IHtcbiAgICAgICAgZm9udDogXCJtYWluXCIsXG4gICAgICAgIGdyb3VwOiBcInRleHRvcmRcIlxuICAgIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3ltYm9scztcbiIsIi8qKlxuICogVGhpcyBmaWxlIGNvbnRhaW5zIGEgbGlzdCBvZiB1dGlsaXR5IGZ1bmN0aW9ucyB3aGljaCBhcmUgdXNlZnVsIGluIG90aGVyXG4gKiBmaWxlcy5cbiAqL1xuXG4vKipcbiAqIFByb3ZpZGUgYW4gYGluZGV4T2ZgIGZ1bmN0aW9uIHdoaWNoIHdvcmtzIGluIElFOCwgYnV0IGRlZmVycyB0byBuYXRpdmUgaWZcbiAqIHBvc3NpYmxlLlxuICovXG52YXIgbmF0aXZlSW5kZXhPZiA9IEFycmF5LnByb3RvdHlwZS5pbmRleE9mO1xudmFyIGluZGV4T2YgPSBmdW5jdGlvbihsaXN0LCBlbGVtKSB7XG4gICAgaWYgKGxpc3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIGlmIChuYXRpdmVJbmRleE9mICYmIGxpc3QuaW5kZXhPZiA9PT0gbmF0aXZlSW5kZXhPZikge1xuICAgICAgICByZXR1cm4gbGlzdC5pbmRleE9mKGVsZW0pO1xuICAgIH1cbiAgICB2YXIgaSA9IDAsIGwgPSBsaXN0Lmxlbmd0aDtcbiAgICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgICAgICBpZiAobGlzdFtpXSA9PT0gZWxlbSkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gd2hldGhlciBhbiBlbGVtZW50IGlzIGNvbnRhaW5lZCBpbiBhIGxpc3RcbiAqL1xudmFyIGNvbnRhaW5zID0gZnVuY3Rpb24obGlzdCwgZWxlbSkge1xuICAgIHJldHVybiBpbmRleE9mKGxpc3QsIGVsZW0pICE9PSAtMTtcbn07XG5cbi8vIGh5cGhlbmF0ZSBhbmQgZXNjYXBlIGFkYXB0ZWQgZnJvbSBGYWNlYm9vaydzIFJlYWN0IHVuZGVyIEFwYWNoZSAyIGxpY2Vuc2VcblxudmFyIHVwcGVyY2FzZSA9IC8oW0EtWl0pL2c7XG52YXIgaHlwaGVuYXRlID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKHVwcGVyY2FzZSwgXCItJDFcIikudG9Mb3dlckNhc2UoKTtcbn07XG5cbnZhciBFU0NBUEVfTE9PS1VQID0ge1xuICBcIiZcIjogXCImYW1wO1wiLFxuICBcIj5cIjogXCImZ3Q7XCIsXG4gIFwiPFwiOiBcIiZsdDtcIixcbiAgXCJcXFwiXCI6IFwiJnF1b3Q7XCIsXG4gIFwiJ1wiOiBcIiYjeDI3O1wiXG59O1xuXG52YXIgRVNDQVBFX1JFR0VYID0gL1smPjxcIiddL2c7XG5cbmZ1bmN0aW9uIGVzY2FwZXIobWF0Y2gpIHtcbiAgcmV0dXJuIEVTQ0FQRV9MT09LVVBbbWF0Y2hdO1xufVxuXG4vKipcbiAqIEVzY2FwZXMgdGV4dCB0byBwcmV2ZW50IHNjcmlwdGluZyBhdHRhY2tzLlxuICpcbiAqIEBwYXJhbSB7Kn0gdGV4dCBUZXh0IHZhbHVlIHRvIGVzY2FwZS5cbiAqIEByZXR1cm4ge3N0cmluZ30gQW4gZXNjYXBlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGVzY2FwZSh0ZXh0KSB7XG4gIHJldHVybiAoXCJcIiArIHRleHQpLnJlcGxhY2UoRVNDQVBFX1JFR0VYLCBlc2NhcGVyKTtcbn1cblxuLyoqXG4gKiBBIGZ1bmN0aW9uIHRvIHNldCB0aGUgdGV4dCBjb250ZW50IG9mIGEgRE9NIGVsZW1lbnQgaW4gYWxsIHN1cHBvcnRlZFxuICogYnJvd3NlcnMuIE5vdGUgdGhhdCB3ZSBkb24ndCBkZWZpbmUgdGhpcyBpZiB0aGVyZSBpcyBubyBkb2N1bWVudC5cbiAqL1xudmFyIHNldFRleHRDb250ZW50O1xuaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciB0ZXN0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgIGlmIChcInRleHRDb250ZW50XCIgaW4gdGVzdE5vZGUpIHtcbiAgICAgICAgc2V0VGV4dENvbnRlbnQgPSBmdW5jdGlvbihub2RlLCB0ZXh0KSB7XG4gICAgICAgICAgICBub2RlLnRleHRDb250ZW50ID0gdGV4dDtcbiAgICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzZXRUZXh0Q29udGVudCA9IGZ1bmN0aW9uKG5vZGUsIHRleHQpIHtcbiAgICAgICAgICAgIG5vZGUuaW5uZXJUZXh0ID0gdGV4dDtcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbi8qKlxuICogQSBmdW5jdGlvbiB0byBjbGVhciBhIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGNsZWFyTm9kZShub2RlKSB7XG4gICAgc2V0VGV4dENvbnRlbnQobm9kZSwgXCJcIik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGNvbnRhaW5zOiBjb250YWlucyxcbiAgICBlc2NhcGU6IGVzY2FwZSxcbiAgICBoeXBoZW5hdGU6IGh5cGhlbmF0ZSxcbiAgICBpbmRleE9mOiBpbmRleE9mLFxuICAgIHNldFRleHRDb250ZW50OiBzZXRUZXh0Q29udGVudCxcbiAgICBjbGVhck5vZGU6IGNsZWFyTm9kZVxufTtcbiIsIlxudmFyIFByb21pc2UgPSByZXF1aXJlKCdibHVlYmlyZCcpXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdC9hZGRvbnMnKVxudmFyIFBUID0gUmVhY3QuUHJvcFR5cGVzXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHtcbiAgICAgIHN0b3JlQXR0cnM6IG9wdGlvbnMsXG4gICAgfVxuICB9XG5cbiAgdmFyIHBsdWdpblVwZGF0ZXMgPSBbXVxuXG4gIHZhciBwbHVnaW4gPSB7XG4gICAgcHJvcFR5cGVzOiB7XG4gICAgICBzdG9yZTogUFQub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgfSxcblxuICAgIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0YXRlID0gb3B0aW9ucy5zdG9yZUF0dHJzLmNhbGwodGhpcywgdGhpcy5wcm9wcy5zdG9yZS5nZXR0ZXJzLCB0aGlzLnByb3BzKVxuICAgICAgdmFyIGV4dHJhXG4gICAgICBpZiAob3B0aW9ucy5pbml0U3RvcmVTdGF0ZSkge1xuICAgICAgICBleHRyYSA9IG9wdGlvbnMuaW5pdFN0b3JlU3RhdGUuY2FsbCh0aGlzLCBzdGF0ZSwgdGhpcy5wcm9wcy5zdG9yZS5nZXR0ZXJzLCB0aGlzLnByb3BzKVxuICAgICAgICBmb3IgKHZhciBuYW1lIGluIGV4dHJhKSBzdGF0ZVtuYW1lXSA9IGV4dHJhW25hbWVdXG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpPTA7IGk8cGx1Z2luVXBkYXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBleHRyYSA9IHBsdWdpblVwZGF0ZXNbaV0uY2FsbCh0aGlzLCBzdGF0ZSwgdGhpcy5wcm9wcy5zdG9yZS5nZXR0ZXJzLCB0aGlzLnByb3BzKVxuICAgICAgICBmb3IgKG5hbWUgaW4gZXh0cmEpIHN0YXRlW25hbWVdID0gZXh0cmFbbmFtZV1cbiAgICAgIH1cbiAgICAgIHJldHVybiBzdGF0ZVxuICAgIH0sXG5cbiAgICBsaXN0ZW46IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjaGFuZ2VzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMpXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJiBBcnJheS5pc0FycmF5KGFyZ3VtZW50c1swXSkpIHtcbiAgICAgICAgICBjaGFuZ2VzID0gYXJndW1lbnRzWzBdXG4gICAgICB9XG5cbiAgICAgIHBsdWdpblVwZGF0ZXMgPSBbXVxuICAgICAgaWYgKHRoaXMucHJvcHMucGx1Z2lucykge1xuICAgICAgICB0aGlzLnByb3BzLnBsdWdpbnMuZm9yRWFjaCgocGx1Z2luKSA9PiB7XG4gICAgICAgICAgaWYgKCFwbHVnaW4ubGlzdGVuZXIpIHJldHVyblxuICAgICAgICAgIGlmIChwbHVnaW4ubGlzdGVuZXIudXBkYXRlU3RvcmVTdGF0ZSkge1xuICAgICAgICAgICAgcGx1Z2luVXBkYXRlcy5wdXNoKHBsdWdpbi5saXN0ZW5lci51cGRhdGVTdG9yZVN0YXRlKVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocGx1Z2luLmxpc3RlbmVyLmNoYW5nZXMpIHtcbiAgICAgICAgICAgIGNoYW5nZXMgPSBjaGFuZ2VzLmNvbmNhdChwbHVnaW4ubGlzdGVuZXIuY2hhbmdlcylcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIHRoaXMucHJvcHMuc3RvcmUub24oY2hhbmdlcywgdGhpcy5fZ290Q2hhbmdlcylcbiAgICAgIC8vIHNhdmUgaXQgZm9yIGxhdGVyIHNvIHdlIGNhbiByZW1vdmUgdGhlIGxpc3RlbmVyIG9uIHVubW91bnRcbiAgICAgIGlmICghdGhpcy5fZmx1eCkgdGhpcy5fZmx1eCA9IFtdXG4gICAgICB0aGlzLl9mbHV4LnB1c2goW2NoYW5nZXMsIHRoaXMuX2dvdENoYW5nZXNdKVxuICAgIH0sXG5cbiAgICBfZ290Q2hhbmdlczogZnVuY3Rpb24gKCkge1xuICAgICAgLy8gaWYgREVCVUdcbiAgICAgIHZhciBzdGF0ZSA9IG9wdGlvbnMuc3RvcmVBdHRycy5jYWxsKHRoaXMsIHRoaXMucHJvcHMuc3RvcmUuZ2V0dGVycywgdGhpcy5wcm9wcylcbiAgICAgIHZhciBleHRyYSwgbmFtZVxuICAgICAgaWYgKG9wdGlvbnMudXBkYXRlU3RvcmVTdGF0ZSkge1xuICAgICAgICBleHRyYSA9IG9wdGlvbnMudXBkYXRlU3RvcmVTdGF0ZS5jYWxsKHRoaXMsIHN0YXRlLCB0aGlzLnByb3BzLnN0b3JlLmdldHRlcnMsIHRoaXMucHJvcHMpXG4gICAgICAgIGZvciAobmFtZSBpbiBleHRyYSkgc3RhdGVbbmFtZV0gPSBleHRyYVtuYW1lXVxuICAgICAgfVxuICAgICAgZm9yICh2YXIgaT0wOyBpPHBsdWdpblVwZGF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZXh0cmEgPSBwbHVnaW5VcGRhdGVzW2ldLmNhbGwodGhpcywgc3RhdGUsIHRoaXMucHJvcHMuc3RvcmUuZ2V0dGVycywgdGhpcy5wcm9wcylcbiAgICAgICAgZm9yIChuYW1lIGluIGV4dHJhKSBzdGF0ZVtuYW1lXSA9IGV4dHJhW25hbWVdXG4gICAgICB9XG4gICAgICBpZiAod2luZG93LkRFQlVHX0NIQU5HRVMpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ2dvdCBjaGFuZ2VzJywgc3RhdGUpXG4gICAgICB9XG4gICAgICB2YXIgcCA9IFByb21pc2UucGVuZGluZygpXG4gICAgICB0aGlzLnNldFN0YXRlKHN0YXRlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHAucmVzb2x2ZSgpXG4gICAgICB9KVxuICAgICAgcmV0dXJuIHBcbiAgICB9LFxuXG5cbiAgICBfc3RvcExpc3RlbmluZzogZnVuY3Rpb24gKHN0b3JlKSB7XG4gICAgICBzdG9yZSA9IHN0b3JlIHx8IHRoaXMucHJvcHMuc3RvcmVcbiAgICAgIGZvciAodmFyIGk9MDsgaTx0aGlzLl9mbHV4Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHN0b3JlLm9mZih0aGlzLl9mbHV4W2ldWzBdLCB0aGlzLl9mbHV4W2ldWzFdKVxuICAgICAgfVxuICAgICAgdGhpcy5fZmx1eCA9IG51bGxcbiAgICB9LFxuXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghdGhpcy5fZmx1eCkgcmV0dXJuXG4gICAgICB0aGlzLl9zdG9wTGlzdGVuaW5nKClcbiAgICB9LFxuICB9XG5cbiAgaWYgKG9wdGlvbnMuc2hvdWxkR2V0TmV3KSB7XG4gICAgcGx1Z2luLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiAobmV4dFByb3BzKSB7XG4gICAgICBpZiAob3B0aW9ucy5zaG91bGRHZXROZXcuY2FsbCh0aGlzLCBuZXh0UHJvcHMpKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmdldExpc3RlbmVycykge1xuICAgICAgICAgIHRoaXMuX3N0b3BMaXN0ZW5pbmcoKVxuICAgICAgICAgIHRoaXMubGlzdGVuKG9wdGlvbnMuZ2V0TGlzdGVuZXJzKG5leHRQcm9wcywgbmV4dFByb3BzLnN0b3JlLmV2ZW50cykpXG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN0YXRlID0gb3B0aW9ucy5zdG9yZUF0dHJzLmNhbGwodGhpcywgbmV4dFByb3BzLnN0b3JlLmdldHRlcnMsIG5leHRQcm9wcylcbiAgICAgICAgdmFyIGV4dHJhXG4gICAgICAgIGlmIChvcHRpb25zLmluaXRTdG9yZVN0YXRlKSB7XG4gICAgICAgICAgZXh0cmEgPSBvcHRpb25zLmluaXRTdG9yZVN0YXRlLmNhbGwodGhpcywgc3RhdGUsIG5leHRQcm9wcy5zdG9yZS5nZXR0ZXJzLCBuZXh0UHJvcHMpXG4gICAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBleHRyYSkgc3RhdGVbbmFtZV0gPSBleHRyYVtuYW1lXVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKG9wdGlvbnMuZ2V0TGlzdGVuZXJzKSB7XG4gICAgcGx1Z2luLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMubGlzdGVuKG9wdGlvbnMuZ2V0TGlzdGVuZXJzKHRoaXMucHJvcHMsIHRoaXMucHJvcHMuc3RvcmUuZXZlbnRzKSlcbiAgICB9XG4gICAgcGx1Z2luLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLnN0b3JlICE9PSBwcmV2UHJvcHMuc3RvcmUpIHtcbiAgICAgICAgdGhpcy5fc3RvcExpc3RlbmluZyhwcmV2UHJvcHMuc3RvcmUpXG4gICAgICAgIHRoaXMubGlzdGVuKG9wdGlvbnMuZ2V0TGlzdGVuZXJzKHRoaXMucHJvcHMsIHRoaXMucHJvcHMuc3RvcmUuZXZlbnRzKSlcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHBsdWdpblxufVxuXG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNCBQZXRrYSBBbnRvbm92XG4gKiBcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczo8L3A+XG4gKiBcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqIFxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICogXG4gKi9cblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihQcm9taXNlLCBQcm9taXNlJF9DcmVhdGVQcm9taXNlQXJyYXksIFByb21pc2VBcnJheSkge1xuXG52YXIgU29tZVByb21pc2VBcnJheSA9IHJlcXVpcmUoXCIuL3NvbWVfcHJvbWlzZV9hcnJheS5qc1wiKShQcm9taXNlQXJyYXkpO1xuZnVuY3Rpb24gUHJvbWlzZSRfQW55KHByb21pc2VzLCB1c2VCb3VuZCkge1xuICAgIHZhciByZXQgPSBQcm9taXNlJF9DcmVhdGVQcm9taXNlQXJyYXkoXG4gICAgICAgIHByb21pc2VzLFxuICAgICAgICBTb21lUHJvbWlzZUFycmF5LFxuICAgICAgICB1c2VCb3VuZCA9PT0gdHJ1ZSAmJiBwcm9taXNlcy5faXNCb3VuZCgpXG4gICAgICAgICAgICA/IHByb21pc2VzLl9ib3VuZFRvXG4gICAgICAgICAgICA6IHZvaWQgMFxuICAgKTtcbiAgICB2YXIgcHJvbWlzZSA9IHJldC5wcm9taXNlKCk7XG4gICAgaWYgKHByb21pc2UuaXNSZWplY3RlZCgpKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cbiAgICByZXQuc2V0SG93TWFueSgxKTtcbiAgICByZXQuc2V0VW53cmFwKCk7XG4gICAgcmV0LmluaXQoKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cblxuUHJvbWlzZS5hbnkgPSBmdW5jdGlvbiBQcm9taXNlJEFueShwcm9taXNlcykge1xuICAgIHJldHVybiBQcm9taXNlJF9BbnkocHJvbWlzZXMsIGZhbHNlKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLmFueSA9IGZ1bmN0aW9uIFByb21pc2UkYW55KCkge1xuICAgIHJldHVybiBQcm9taXNlJF9BbnkodGhpcywgdHJ1ZSk7XG59O1xuXG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQgUGV0a2EgQW50b25vdlxuICogXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6PC9wPlxuICogXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKiBcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqIFxuICovXG5cInVzZSBzdHJpY3RcIjtcbnZhciBzY2hlZHVsZSA9IHJlcXVpcmUoXCIuL3NjaGVkdWxlLmpzXCIpO1xudmFyIFF1ZXVlID0gcmVxdWlyZShcIi4vcXVldWUuanNcIik7XG52YXIgZXJyb3JPYmogPSByZXF1aXJlKFwiLi91dGlsLmpzXCIpLmVycm9yT2JqO1xudmFyIHRyeUNhdGNoMSA9IHJlcXVpcmUoXCIuL3V0aWwuanNcIikudHJ5Q2F0Y2gxO1xudmFyIHByb2Nlc3MgPSByZXF1aXJlKFwiLi9nbG9iYWwuanNcIikucHJvY2VzcztcblxuZnVuY3Rpb24gQXN5bmMoKSB7XG4gICAgdGhpcy5faXNUaWNrVXNlZCA9IGZhbHNlO1xuICAgIHRoaXMuX2xlbmd0aCA9IDA7XG4gICAgdGhpcy5fbGF0ZUJ1ZmZlciA9IG5ldyBRdWV1ZSgpO1xuICAgIHRoaXMuX2Z1bmN0aW9uQnVmZmVyID0gbmV3IFF1ZXVlKDI1MDAwICogMyk7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHRoaXMuY29uc3VtZUZ1bmN0aW9uQnVmZmVyID0gZnVuY3Rpb24gQXN5bmMkY29uc3VtZUZ1bmN0aW9uQnVmZmVyKCkge1xuICAgICAgICBzZWxmLl9jb25zdW1lRnVuY3Rpb25CdWZmZXIoKTtcbiAgICB9O1xufVxuXG5Bc3luYy5wcm90b3R5cGUuaGF2ZUl0ZW1zUXVldWVkID0gZnVuY3Rpb24gQXN5bmMkaGF2ZUl0ZW1zUXVldWVkKCkge1xuICAgIHJldHVybiB0aGlzLl9sZW5ndGggPiAwO1xufTtcblxuQXN5bmMucHJvdG90eXBlLmludm9rZUxhdGVyID0gZnVuY3Rpb24gQXN5bmMkaW52b2tlTGF0ZXIoZm4sIHJlY2VpdmVyLCBhcmcpIHtcbiAgICBpZiAocHJvY2VzcyAhPT0gdm9pZCAwICYmXG4gICAgICAgIHByb2Nlc3MuZG9tYWluICE9IG51bGwgJiZcbiAgICAgICAgIWZuLmRvbWFpbikge1xuICAgICAgICBmbiA9IHByb2Nlc3MuZG9tYWluLmJpbmQoZm4pO1xuICAgIH1cbiAgICB0aGlzLl9sYXRlQnVmZmVyLnB1c2goZm4sIHJlY2VpdmVyLCBhcmcpO1xuICAgIHRoaXMuX3F1ZXVlVGljaygpO1xufTtcblxuQXN5bmMucHJvdG90eXBlLmludm9rZSA9IGZ1bmN0aW9uIEFzeW5jJGludm9rZShmbiwgcmVjZWl2ZXIsIGFyZykge1xuICAgIGlmIChwcm9jZXNzICE9PSB2b2lkIDAgJiZcbiAgICAgICAgcHJvY2Vzcy5kb21haW4gIT0gbnVsbCAmJlxuICAgICAgICAhZm4uZG9tYWluKSB7XG4gICAgICAgIGZuID0gcHJvY2Vzcy5kb21haW4uYmluZChmbik7XG4gICAgfVxuICAgIHZhciBmdW5jdGlvbkJ1ZmZlciA9IHRoaXMuX2Z1bmN0aW9uQnVmZmVyO1xuICAgIGZ1bmN0aW9uQnVmZmVyLnB1c2goZm4sIHJlY2VpdmVyLCBhcmcpO1xuICAgIHRoaXMuX2xlbmd0aCA9IGZ1bmN0aW9uQnVmZmVyLmxlbmd0aCgpO1xuICAgIHRoaXMuX3F1ZXVlVGljaygpO1xufTtcblxuQXN5bmMucHJvdG90eXBlLl9jb25zdW1lRnVuY3Rpb25CdWZmZXIgPVxuZnVuY3Rpb24gQXN5bmMkX2NvbnN1bWVGdW5jdGlvbkJ1ZmZlcigpIHtcbiAgICB2YXIgZnVuY3Rpb25CdWZmZXIgPSB0aGlzLl9mdW5jdGlvbkJ1ZmZlcjtcbiAgICB3aGlsZShmdW5jdGlvbkJ1ZmZlci5sZW5ndGgoKSA+IDApIHtcbiAgICAgICAgdmFyIGZuID0gZnVuY3Rpb25CdWZmZXIuc2hpZnQoKTtcbiAgICAgICAgdmFyIHJlY2VpdmVyID0gZnVuY3Rpb25CdWZmZXIuc2hpZnQoKTtcbiAgICAgICAgdmFyIGFyZyA9IGZ1bmN0aW9uQnVmZmVyLnNoaWZ0KCk7XG4gICAgICAgIGZuLmNhbGwocmVjZWl2ZXIsIGFyZyk7XG4gICAgfVxuICAgIHRoaXMuX3Jlc2V0KCk7XG4gICAgdGhpcy5fY29uc3VtZUxhdGVCdWZmZXIoKTtcbn07XG5cbkFzeW5jLnByb3RvdHlwZS5fY29uc3VtZUxhdGVCdWZmZXIgPSBmdW5jdGlvbiBBc3luYyRfY29uc3VtZUxhdGVCdWZmZXIoKSB7XG4gICAgdmFyIGJ1ZmZlciA9IHRoaXMuX2xhdGVCdWZmZXI7XG4gICAgd2hpbGUoYnVmZmVyLmxlbmd0aCgpID4gMCkge1xuICAgICAgICB2YXIgZm4gPSBidWZmZXIuc2hpZnQoKTtcbiAgICAgICAgdmFyIHJlY2VpdmVyID0gYnVmZmVyLnNoaWZ0KCk7XG4gICAgICAgIHZhciBhcmcgPSBidWZmZXIuc2hpZnQoKTtcbiAgICAgICAgdmFyIHJlcyA9IHRyeUNhdGNoMShmbiwgcmVjZWl2ZXIsIGFyZyk7XG4gICAgICAgIGlmIChyZXMgPT09IGVycm9yT2JqKSB7XG4gICAgICAgICAgICB0aGlzLl9xdWV1ZVRpY2soKTtcbiAgICAgICAgICAgIGlmIChmbi5kb21haW4gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGZuLmRvbWFpbi5lbWl0KFwiZXJyb3JcIiwgcmVzLmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgcmVzLmU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5Bc3luYy5wcm90b3R5cGUuX3F1ZXVlVGljayA9IGZ1bmN0aW9uIEFzeW5jJF9xdWV1ZSgpIHtcbiAgICBpZiAoIXRoaXMuX2lzVGlja1VzZWQpIHtcbiAgICAgICAgc2NoZWR1bGUodGhpcy5jb25zdW1lRnVuY3Rpb25CdWZmZXIpO1xuICAgICAgICB0aGlzLl9pc1RpY2tVc2VkID0gdHJ1ZTtcbiAgICB9XG59O1xuXG5Bc3luYy5wcm90b3R5cGUuX3Jlc2V0ID0gZnVuY3Rpb24gQXN5bmMkX3Jlc2V0KCkge1xuICAgIHRoaXMuX2lzVGlja1VzZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9sZW5ndGggPSAwO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgQXN5bmMoKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0IFBldGthIEFudG9ub3ZcbiAqIFxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOjwvcD5cbiAqIFxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICogXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKiBcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgUHJvbWlzZSA9IHJlcXVpcmUoXCIuL3Byb21pc2UuanNcIikoKTtcbm1vZHVsZS5leHBvcnRzID0gUHJvbWlzZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNCBQZXRrYSBBbnRvbm92XG4gKiBcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczo8L3A+XG4gKiBcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqIFxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICogXG4gKi9cblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihQcm9taXNlKSB7XG5Qcm9taXNlLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gUHJvbWlzZSRjYWxsKHByb3BlcnR5TmFtZSkge1xuICAgIHZhciAkX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGg7dmFyIGFyZ3MgPSBuZXcgQXJyYXkoJF9sZW4gLSAxKTsgZm9yKHZhciAkX2kgPSAxOyAkX2kgPCAkX2xlbjsgKyskX2kpIHthcmdzWyRfaSAtIDFdID0gYXJndW1lbnRzWyRfaV07fVxuXG4gICAgcmV0dXJuIHRoaXMuX3RoZW4oZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqW3Byb3BlcnR5TmFtZV0uYXBwbHkob2JqLCBhcmdzKTtcbiAgICAgICAgfSxcbiAgICAgICAgdm9pZCAwLFxuICAgICAgICB2b2lkIDAsXG4gICAgICAgIHZvaWQgMCxcbiAgICAgICAgdm9pZCAwXG4gICApO1xufTtcblxuZnVuY3Rpb24gUHJvbWlzZSRnZXR0ZXIob2JqKSB7XG4gICAgdmFyIHByb3AgPSB0eXBlb2YgdGhpcyA9PT0gXCJzdHJpbmdcIlxuICAgICAgICA/IHRoaXNcbiAgICAgICAgOiAoXCJcIiArIHRoaXMpO1xuICAgIHJldHVybiBvYmpbcHJvcF07XG59XG5Qcm9taXNlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBQcm9taXNlJGdldChwcm9wZXJ0eU5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fdGhlbihcbiAgICAgICAgUHJvbWlzZSRnZXR0ZXIsXG4gICAgICAgIHZvaWQgMCxcbiAgICAgICAgdm9pZCAwLFxuICAgICAgICBwcm9wZXJ0eU5hbWUsXG4gICAgICAgIHZvaWQgMFxuICAgKTtcbn07XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQgUGV0a2EgQW50b25vdlxuICogXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6PC9wPlxuICogXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKiBcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqIFxuICovXG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oUHJvbWlzZSwgSU5URVJOQUwpIHtcbnZhciBlcnJvcnMgPSByZXF1aXJlKFwiLi9lcnJvcnMuanNcIik7XG52YXIgYXN5bmMgPSByZXF1aXJlKFwiLi9hc3luYy5qc1wiKTtcbnZhciBDYW5jZWxsYXRpb25FcnJvciA9IGVycm9ycy5DYW5jZWxsYXRpb25FcnJvcjtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2NhbmNlbCA9IGZ1bmN0aW9uIFByb21pc2UkX2NhbmNlbCgpIHtcbiAgICBpZiAoIXRoaXMuaXNDYW5jZWxsYWJsZSgpKSByZXR1cm4gdGhpcztcbiAgICB2YXIgcGFyZW50O1xuICAgIHZhciBwcm9taXNlVG9SZWplY3QgPSB0aGlzO1xuICAgIHdoaWxlICgocGFyZW50ID0gcHJvbWlzZVRvUmVqZWN0Ll9jYW5jZWxsYXRpb25QYXJlbnQpICE9PSB2b2lkIDAgJiZcbiAgICAgICAgcGFyZW50LmlzQ2FuY2VsbGFibGUoKSkge1xuICAgICAgICBwcm9taXNlVG9SZWplY3QgPSBwYXJlbnQ7XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgQ2FuY2VsbGF0aW9uRXJyb3IoKTtcbiAgICBwcm9taXNlVG9SZWplY3QuX2F0dGFjaEV4dHJhVHJhY2UoZXJyKTtcbiAgICBwcm9taXNlVG9SZWplY3QuX3JlamVjdFVuY2hlY2tlZChlcnIpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuY2FuY2VsID0gZnVuY3Rpb24gUHJvbWlzZSRjYW5jZWwoKSB7XG4gICAgaWYgKCF0aGlzLmlzQ2FuY2VsbGFibGUoKSkgcmV0dXJuIHRoaXM7XG4gICAgYXN5bmMuaW52b2tlTGF0ZXIodGhpcy5fY2FuY2VsLCB0aGlzLCB2b2lkIDApO1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuY2FuY2VsbGFibGUgPSBmdW5jdGlvbiBQcm9taXNlJGNhbmNlbGxhYmxlKCkge1xuICAgIGlmICh0aGlzLl9jYW5jZWxsYWJsZSgpKSByZXR1cm4gdGhpcztcbiAgICB0aGlzLl9zZXRDYW5jZWxsYWJsZSgpO1xuICAgIHRoaXMuX2NhbmNlbGxhdGlvblBhcmVudCA9IHZvaWQgMDtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cblByb21pc2UucHJvdG90eXBlLnVuY2FuY2VsbGFibGUgPSBmdW5jdGlvbiBQcm9taXNlJHVuY2FuY2VsbGFibGUoKSB7XG4gICAgdmFyIHJldCA9IG5ldyBQcm9taXNlKElOVEVSTkFMKTtcbiAgICByZXQuX3NldFRyYWNlKHRoaXMpO1xuICAgIHJldC5fZm9sbG93KHRoaXMpO1xuICAgIHJldC5fdW5zZXRDYW5jZWxsYWJsZSgpO1xuICAgIGlmICh0aGlzLl9pc0JvdW5kKCkpIHJldC5fc2V0Qm91bmRUbyh0aGlzLl9ib3VuZFRvKTtcbiAgICByZXR1cm4gcmV0O1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuZm9yayA9XG5mdW5jdGlvbiBQcm9taXNlJGZvcmsoZGlkRnVsZmlsbCwgZGlkUmVqZWN0LCBkaWRQcm9ncmVzcykge1xuICAgIHZhciByZXQgPSB0aGlzLl90aGVuKGRpZEZ1bGZpbGwsIGRpZFJlamVjdCwgZGlkUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgdm9pZCAwLCB2b2lkIDApO1xuXG4gICAgcmV0Ll9zZXRDYW5jZWxsYWJsZSgpO1xuICAgIHJldC5fY2FuY2VsbGF0aW9uUGFyZW50ID0gdm9pZCAwO1xuICAgIHJldHVybiByZXQ7XG59O1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0IFBldGthIEFudG9ub3ZcbiAqIFxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOjwvcD5cbiAqIFxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICogXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKiBcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xudmFyIGluaGVyaXRzID0gcmVxdWlyZShcIi4vdXRpbC5qc1wiKS5pbmhlcml0cztcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoXCIuL2VzNS5qc1wiKS5kZWZpbmVQcm9wZXJ0eTtcblxudmFyIHJpZ25vcmUgPSBuZXcgUmVnRXhwKFxuICAgIFwiXFxcXGIoPzpbYS16QS1aMC05Ll0rXFxcXCRfXFxcXHcrfFwiICtcbiAgICBcInRyeUNhdGNoKD86MXwyfEFwcGx5KXxuZXcgXFxcXHcqUHJvbWlzZUFycmF5fFwiICtcbiAgICBcIlxcXFx3KlByb21pc2VBcnJheVxcXFwuXFxcXHcqUHJvbWlzZUFycmF5fFwiICtcbiAgICBcInNldFRpbWVvdXR8Q2F0Y2hGaWx0ZXJcXFxcJF9cXFxcdyt8bWFrZU5vZGVQcm9taXNpZmllZHxwcm9jZXNzSW1tZWRpYXRlfFwiICtcbiAgICBcInByb2Nlc3MuX3RpY2tDYWxsYmFja3xuZXh0VGlja3xBc3luY1xcXFwkXFxcXHcrKVxcXFxiXCJcbik7XG5cbnZhciBydHJhY2VsaW5lID0gbnVsbDtcbnZhciBmb3JtYXRTdGFjayA9IG51bGw7XG5cbmZ1bmN0aW9uIGZvcm1hdE5vbkVycm9yKG9iaikge1xuICAgIHZhciBzdHI7XG4gICAgaWYgKHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBzdHIgPSBcIltmdW5jdGlvbiBcIiArXG4gICAgICAgICAgICAob2JqLm5hbWUgfHwgXCJhbm9ueW1vdXNcIikgK1xuICAgICAgICAgICAgXCJdXCI7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzdHIgPSBvYmoudG9TdHJpbmcoKTtcbiAgICAgICAgdmFyIHJ1c2VsZXNzVG9TdHJpbmcgPSAvXFxbb2JqZWN0IFthLXpBLVowLTkkX10rXFxdLztcbiAgICAgICAgaWYgKHJ1c2VsZXNzVG9TdHJpbmcudGVzdChzdHIpKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciBuZXdTdHIgPSBKU09OLnN0cmluZ2lmeShvYmopO1xuICAgICAgICAgICAgICAgIHN0ciA9IG5ld1N0cjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoKGUpIHtcblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzdHIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBzdHIgPSBcIihlbXB0eSBhcnJheSlcIjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gKFwiKDxcIiArIHNuaXAoc3RyKSArIFwiPiwgbm8gc3RhY2sgdHJhY2UpXCIpO1xufVxuXG5mdW5jdGlvbiBzbmlwKHN0cikge1xuICAgIHZhciBtYXhDaGFycyA9IDQxO1xuICAgIGlmIChzdHIubGVuZ3RoIDwgbWF4Q2hhcnMpIHtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgcmV0dXJuIHN0ci5zdWJzdHIoMCwgbWF4Q2hhcnMgLSAzKSArIFwiLi4uXCI7XG59XG5cbmZ1bmN0aW9uIENhcHR1cmVkVHJhY2UoaWdub3JlVW50aWwsIGlzVG9wTGV2ZWwpIHtcbiAgICB0aGlzLmNhcHR1cmVTdGFja1RyYWNlKENhcHR1cmVkVHJhY2UsIGlzVG9wTGV2ZWwpO1xuXG59XG5pbmhlcml0cyhDYXB0dXJlZFRyYWNlLCBFcnJvcik7XG5cbkNhcHR1cmVkVHJhY2UucHJvdG90eXBlLmNhcHR1cmVTdGFja1RyYWNlID1cbmZ1bmN0aW9uIENhcHR1cmVkVHJhY2UkY2FwdHVyZVN0YWNrVHJhY2UoaWdub3JlVW50aWwsIGlzVG9wTGV2ZWwpIHtcbiAgICBjYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBpZ25vcmVVbnRpbCwgaXNUb3BMZXZlbCk7XG59O1xuXG5DYXB0dXJlZFRyYWNlLnBvc3NpYmx5VW5oYW5kbGVkUmVqZWN0aW9uID1cbmZ1bmN0aW9uIENhcHR1cmVkVHJhY2UkUG9zc2libHlVbmhhbmRsZWRSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIHZhciBtZXNzYWdlO1xuICAgICAgICBpZiAodHlwZW9mIHJlYXNvbiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgcmVhc29uID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHZhciBzdGFjayA9IHJlYXNvbi5zdGFjaztcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBcIlBvc3NpYmx5IHVuaGFuZGxlZCBcIiArIGZvcm1hdFN0YWNrKHN0YWNrLCByZWFzb24pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbWVzc2FnZSA9IFwiUG9zc2libHkgdW5oYW5kbGVkIFwiICsgU3RyaW5nKHJlYXNvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLmVycm9yID09PSBcImZ1bmN0aW9uXCIgfHxcbiAgICAgICAgICAgIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBjb25zb2xlLmxvZyA9PT0gXCJmdW5jdGlvblwiIHx8XG4gICAgICAgICAgICB0eXBlb2YgY29uc29sZS5sb2cgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuQ2FwdHVyZWRUcmFjZS5jb21iaW5lID0gZnVuY3Rpb24gQ2FwdHVyZWRUcmFjZSRDb21iaW5lKGN1cnJlbnQsIHByZXYpIHtcbiAgICB2YXIgY3VyTGFzdCA9IGN1cnJlbnQubGVuZ3RoIC0gMTtcbiAgICBmb3IgKHZhciBpID0gcHJldi5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgbGluZSA9IHByZXZbaV07XG4gICAgICAgIGlmIChjdXJyZW50W2N1ckxhc3RdID09PSBsaW5lKSB7XG4gICAgICAgICAgICBjdXJyZW50LnBvcCgpO1xuICAgICAgICAgICAgY3VyTGFzdC0tO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjdXJyZW50LnB1c2goXCJGcm9tIHByZXZpb3VzIGV2ZW50OlwiKTtcbiAgICB2YXIgbGluZXMgPSBjdXJyZW50LmNvbmNhdChwcmV2KTtcblxuICAgIHZhciByZXQgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBsaW5lcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuXG4gICAgICAgIGlmICgocmlnbm9yZS50ZXN0KGxpbmVzW2ldKSB8fFxuICAgICAgICAgICAgKGkgPiAwICYmICFydHJhY2VsaW5lLnRlc3QobGluZXNbaV0pKSAmJlxuICAgICAgICAgICAgbGluZXNbaV0gIT09IFwiRnJvbSBwcmV2aW91cyBldmVudDpcIilcbiAgICAgICApIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldC5wdXNoKGxpbmVzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn07XG5cbkNhcHR1cmVkVHJhY2UuaXNTdXBwb3J0ZWQgPSBmdW5jdGlvbiBDYXB0dXJlZFRyYWNlJElzU3VwcG9ydGVkKCkge1xuICAgIHJldHVybiB0eXBlb2YgY2FwdHVyZVN0YWNrVHJhY2UgPT09IFwiZnVuY3Rpb25cIjtcbn07XG5cbnZhciBjYXB0dXJlU3RhY2tUcmFjZSA9IChmdW5jdGlvbiBzdGFja0RldGVjdGlvbigpIHtcbiAgICBpZiAodHlwZW9mIEVycm9yLnN0YWNrVHJhY2VMaW1pdCA9PT0gXCJudW1iZXJcIiAmJlxuICAgICAgICB0eXBlb2YgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBydHJhY2VsaW5lID0gL15cXHMqYXRcXHMqLztcbiAgICAgICAgZm9ybWF0U3RhY2sgPSBmdW5jdGlvbihzdGFjaywgZXJyb3IpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3RhY2sgPT09IFwic3RyaW5nXCIpIHJldHVybiBzdGFjaztcblxuICAgICAgICAgICAgaWYgKGVycm9yLm5hbWUgIT09IHZvaWQgMCAmJlxuICAgICAgICAgICAgICAgIGVycm9yLm1lc3NhZ2UgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvci5uYW1lICsgXCIuIFwiICsgZXJyb3IubWVzc2FnZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmb3JtYXROb25FcnJvcihlcnJvcik7XG5cblxuICAgICAgICB9O1xuICAgICAgICB2YXIgY2FwdHVyZVN0YWNrVHJhY2UgPSBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIENhcHR1cmVkVHJhY2UkX2NhcHR1cmVTdGFja1RyYWNlKFxuICAgICAgICAgICAgcmVjZWl2ZXIsIGlnbm9yZVVudGlsKSB7XG4gICAgICAgICAgICBjYXB0dXJlU3RhY2tUcmFjZShyZWNlaXZlciwgaWdub3JlVW50aWwpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKCk7XG5cbiAgICBpZiAodHlwZW9mIGVyci5zdGFjayA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICB0eXBlb2YgXCJcIi5zdGFydHNXaXRoID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgICAgKGVyci5zdGFjay5zdGFydHNXaXRoKFwic3RhY2tEZXRlY3Rpb25AXCIpKSAmJlxuICAgICAgICBzdGFja0RldGVjdGlvbi5uYW1lID09PSBcInN0YWNrRGV0ZWN0aW9uXCIpIHtcblxuICAgICAgICBkZWZpbmVQcm9wZXJ0eShFcnJvciwgXCJzdGFja1RyYWNlTGltaXRcIiwge1xuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICB2YWx1ZTogMjVcbiAgICAgICAgfSk7XG4gICAgICAgIHJ0cmFjZWxpbmUgPSAvQC87XG4gICAgICAgIHZhciBybGluZSA9IC9bQFxcbl0vO1xuXG4gICAgICAgIGZvcm1hdFN0YWNrID0gZnVuY3Rpb24oc3RhY2ssIGVycm9yKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHN0YWNrID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChlcnJvci5uYW1lICsgXCIuIFwiICsgZXJyb3IubWVzc2FnZSArIFwiXFxuXCIgKyBzdGFjayk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChlcnJvci5uYW1lICE9PSB2b2lkIDAgJiZcbiAgICAgICAgICAgICAgICBlcnJvci5tZXNzYWdlICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3IubmFtZSArIFwiLiBcIiArIGVycm9yLm1lc3NhZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0Tm9uRXJyb3IoZXJyb3IpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBjYXB0dXJlU3RhY2tUcmFjZShvKSB7XG4gICAgICAgICAgICB2YXIgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgICAgICAgIHZhciBzcGxpdCA9IHN0YWNrLnNwbGl0KHJsaW5lKTtcbiAgICAgICAgICAgIHZhciBsZW4gPSBzcGxpdC5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgcmV0ID0gXCJcIjtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICAgICAgICAgICAgICByZXQgKz0gc3BsaXRbaV07XG4gICAgICAgICAgICAgICAgcmV0ICs9IFwiQFwiO1xuICAgICAgICAgICAgICAgIHJldCArPSBzcGxpdFtpICsgMV07XG4gICAgICAgICAgICAgICAgcmV0ICs9IFwiXFxuXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvLnN0YWNrID0gcmV0O1xuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZm9ybWF0U3RhY2sgPSBmdW5jdGlvbihzdGFjaywgZXJyb3IpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3RhY2sgPT09IFwic3RyaW5nXCIpIHJldHVybiBzdGFjaztcblxuICAgICAgICAgICAgaWYgKCh0eXBlb2YgZXJyb3IgPT09IFwib2JqZWN0XCIgfHxcbiAgICAgICAgICAgICAgICB0eXBlb2YgZXJyb3IgPT09IFwiZnVuY3Rpb25cIikgJiZcbiAgICAgICAgICAgICAgICBlcnJvci5uYW1lICE9PSB2b2lkIDAgJiZcbiAgICAgICAgICAgICAgICBlcnJvci5tZXNzYWdlICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3IubmFtZSArIFwiLiBcIiArIGVycm9yLm1lc3NhZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0Tm9uRXJyb3IoZXJyb3IpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn0pKCk7XG5cbnJldHVybiBDYXB0dXJlZFRyYWNlO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0IFBldGthIEFudG9ub3ZcbiAqIFxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOjwvcD5cbiAqIFxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICogXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKiBcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE5FWFRfRklMVEVSKSB7XG52YXIgdXRpbCA9IHJlcXVpcmUoXCIuL3V0aWwuanNcIik7XG52YXIgZXJyb3JzID0gcmVxdWlyZShcIi4vZXJyb3JzLmpzXCIpO1xudmFyIHRyeUNhdGNoMSA9IHV0aWwudHJ5Q2F0Y2gxO1xudmFyIGVycm9yT2JqID0gdXRpbC5lcnJvck9iajtcbnZhciBrZXlzID0gcmVxdWlyZShcIi4vZXM1LmpzXCIpLmtleXM7XG52YXIgVHlwZUVycm9yID0gZXJyb3JzLlR5cGVFcnJvcjtcblxuZnVuY3Rpb24gQ2F0Y2hGaWx0ZXIoaW5zdGFuY2VzLCBjYWxsYmFjaywgcHJvbWlzZSkge1xuICAgIHRoaXMuX2luc3RhbmNlcyA9IGluc3RhbmNlcztcbiAgICB0aGlzLl9jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIHRoaXMuX3Byb21pc2UgPSBwcm9taXNlO1xufVxuXG5mdW5jdGlvbiBDYXRjaEZpbHRlciRfc2FmZVByZWRpY2F0ZShwcmVkaWNhdGUsIGUpIHtcbiAgICB2YXIgc2FmZU9iamVjdCA9IHt9O1xuICAgIHZhciByZXRmaWx0ZXIgPSB0cnlDYXRjaDEocHJlZGljYXRlLCBzYWZlT2JqZWN0LCBlKTtcblxuICAgIGlmIChyZXRmaWx0ZXIgPT09IGVycm9yT2JqKSByZXR1cm4gcmV0ZmlsdGVyO1xuXG4gICAgdmFyIHNhZmVLZXlzID0ga2V5cyhzYWZlT2JqZWN0KTtcbiAgICBpZiAoc2FmZUtleXMubGVuZ3RoKSB7XG4gICAgICAgIGVycm9yT2JqLmUgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICAgXCJDYXRjaCBmaWx0ZXIgbXVzdCBpbmhlcml0IGZyb20gRXJyb3IgXCJcbiAgICAgICAgICArIFwib3IgYmUgYSBzaW1wbGUgcHJlZGljYXRlIGZ1bmN0aW9uXCIpO1xuICAgICAgICByZXR1cm4gZXJyb3JPYmo7XG4gICAgfVxuICAgIHJldHVybiByZXRmaWx0ZXI7XG59XG5cbkNhdGNoRmlsdGVyLnByb3RvdHlwZS5kb0ZpbHRlciA9IGZ1bmN0aW9uIENhdGNoRmlsdGVyJF9kb0ZpbHRlcihlKSB7XG4gICAgdmFyIGNiID0gdGhpcy5fY2FsbGJhY2s7XG4gICAgdmFyIHByb21pc2UgPSB0aGlzLl9wcm9taXNlO1xuICAgIHZhciBib3VuZFRvID0gcHJvbWlzZS5faXNCb3VuZCgpID8gcHJvbWlzZS5fYm91bmRUbyA6IHZvaWQgMDtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5faW5zdGFuY2VzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgIHZhciBpdGVtID0gdGhpcy5faW5zdGFuY2VzW2ldO1xuICAgICAgICB2YXIgaXRlbUlzRXJyb3JUeXBlID0gaXRlbSA9PT0gRXJyb3IgfHxcbiAgICAgICAgICAgIChpdGVtICE9IG51bGwgJiYgaXRlbS5wcm90b3R5cGUgaW5zdGFuY2VvZiBFcnJvcik7XG5cbiAgICAgICAgaWYgKGl0ZW1Jc0Vycm9yVHlwZSAmJiBlIGluc3RhbmNlb2YgaXRlbSkge1xuICAgICAgICAgICAgdmFyIHJldCA9IHRyeUNhdGNoMShjYiwgYm91bmRUbywgZSk7XG4gICAgICAgICAgICBpZiAocmV0ID09PSBlcnJvck9iaikge1xuICAgICAgICAgICAgICAgIE5FWFRfRklMVEVSLmUgPSByZXQuZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gTkVYVF9GSUxURVI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpdGVtID09PSBcImZ1bmN0aW9uXCIgJiYgIWl0ZW1Jc0Vycm9yVHlwZSkge1xuICAgICAgICAgICAgdmFyIHNob3VsZEhhbmRsZSA9IENhdGNoRmlsdGVyJF9zYWZlUHJlZGljYXRlKGl0ZW0sIGUpO1xuICAgICAgICAgICAgaWYgKHNob3VsZEhhbmRsZSA9PT0gZXJyb3JPYmopIHtcbiAgICAgICAgICAgICAgICB2YXIgdHJhY2UgPSBlcnJvcnMuY2FuQXR0YWNoKGVycm9yT2JqLmUpXG4gICAgICAgICAgICAgICAgICAgID8gZXJyb3JPYmouZVxuICAgICAgICAgICAgICAgICAgICA6IG5ldyBFcnJvcihlcnJvck9iai5lICsgXCJcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJvbWlzZS5fYXR0YWNoRXh0cmFUcmFjZSh0cmFjZSk7XG4gICAgICAgICAgICAgICAgZSA9IGVycm9yT2JqLmU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNob3VsZEhhbmRsZSkge1xuICAgICAgICAgICAgICAgIHZhciByZXQgPSB0cnlDYXRjaDEoY2IsIGJvdW5kVG8sIGUpO1xuICAgICAgICAgICAgICAgIGlmIChyZXQgPT09IGVycm9yT2JqKSB7XG4gICAgICAgICAgICAgICAgICAgIE5FWFRfRklMVEVSLmUgPSByZXQuZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE5FWFRfRklMVEVSO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIE5FWFRfRklMVEVSLmUgPSBlO1xuICAgIHJldHVybiBORVhUX0ZJTFRFUjtcbn07XG5cbnJldHVybiBDYXRjaEZpbHRlcjtcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNCBQZXRrYSBBbnRvbm92XG4gKiBcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczo8L3A+XG4gKiBcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqIFxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICogXG4gKi9cblwidXNlIHN0cmljdFwiO1xudmFyIHV0aWwgPSByZXF1aXJlKFwiLi91dGlsLmpzXCIpO1xudmFyIGlzUHJpbWl0aXZlID0gdXRpbC5pc1ByaW1pdGl2ZTtcbnZhciB3cmFwc1ByaW1pdGl2ZVJlY2VpdmVyID0gdXRpbC53cmFwc1ByaW1pdGl2ZVJlY2VpdmVyO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFByb21pc2UpIHtcbnZhciByZXR1cm5lciA9IGZ1bmN0aW9uIFByb21pc2UkX3JldHVybmVyKCkge1xuICAgIHJldHVybiB0aGlzO1xufTtcbnZhciB0aHJvd2VyID0gZnVuY3Rpb24gUHJvbWlzZSRfdGhyb3dlcigpIHtcbiAgICB0aHJvdyB0aGlzO1xufTtcblxudmFyIHdyYXBwZXIgPSBmdW5jdGlvbiBQcm9taXNlJF93cmFwcGVyKHZhbHVlLCBhY3Rpb24pIHtcbiAgICBpZiAoYWN0aW9uID09PSAxKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBQcm9taXNlJF90aHJvd2VyKCkge1xuICAgICAgICAgICAgdGhyb3cgdmFsdWU7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKGFjdGlvbiA9PT0gMikge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gUHJvbWlzZSRfcmV0dXJuZXIoKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH07XG4gICAgfVxufTtcblxuXG5Qcm9taXNlLnByb3RvdHlwZVtcInJldHVyblwiXSA9XG5Qcm9taXNlLnByb3RvdHlwZS50aGVuUmV0dXJuID1cbmZ1bmN0aW9uIFByb21pc2UkdGhlblJldHVybih2YWx1ZSkge1xuICAgIGlmICh3cmFwc1ByaW1pdGl2ZVJlY2VpdmVyICYmIGlzUHJpbWl0aXZlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdGhlbihcbiAgICAgICAgICAgIHdyYXBwZXIodmFsdWUsIDIpLFxuICAgICAgICAgICAgdm9pZCAwLFxuICAgICAgICAgICAgdm9pZCAwLFxuICAgICAgICAgICAgdm9pZCAwLFxuICAgICAgICAgICAgdm9pZCAwXG4gICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3RoZW4ocmV0dXJuZXIsIHZvaWQgMCwgdm9pZCAwLCB2YWx1ZSwgdm9pZCAwKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlW1widGhyb3dcIl0gPVxuUHJvbWlzZS5wcm90b3R5cGUudGhlblRocm93ID1cbmZ1bmN0aW9uIFByb21pc2UkdGhlblRocm93KHJlYXNvbikge1xuICAgIGlmICh3cmFwc1ByaW1pdGl2ZVJlY2VpdmVyICYmIGlzUHJpbWl0aXZlKHJlYXNvbikpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RoZW4oXG4gICAgICAgICAgICB3cmFwcGVyKHJlYXNvbiwgMSksXG4gICAgICAgICAgICB2b2lkIDAsXG4gICAgICAgICAgICB2b2lkIDAsXG4gICAgICAgICAgICB2b2lkIDAsXG4gICAgICAgICAgICB2b2lkIDBcbiAgICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fdGhlbih0aHJvd2VyLCB2b2lkIDAsIHZvaWQgMCwgcmVhc29uLCB2b2lkIDApO1xufTtcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNCBQZXRrYSBBbnRvbm92XG4gKiBcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczo8L3A+XG4gKiBcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqIFxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICogXG4gKi9cblwidXNlIHN0cmljdFwiO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoXCIuL2dsb2JhbC5qc1wiKTtcbnZhciBPYmplY3RmcmVlemUgPSByZXF1aXJlKFwiLi9lczUuanNcIikuZnJlZXplO1xudmFyIHV0aWwgPSByZXF1aXJlKFwiLi91dGlsLmpzXCIpO1xudmFyIGluaGVyaXRzID0gdXRpbC5pbmhlcml0cztcbnZhciBub3RFbnVtZXJhYmxlUHJvcCA9IHV0aWwubm90RW51bWVyYWJsZVByb3A7XG52YXIgRXJyb3IgPSBnbG9iYWwuRXJyb3I7XG5cbmZ1bmN0aW9uIG1hcmtBc09yaWdpbmF0aW5nRnJvbVJlamVjdGlvbihlKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgbm90RW51bWVyYWJsZVByb3AoZSwgXCJpc0FzeW5jXCIsIHRydWUpO1xuICAgIH1cbiAgICBjYXRjaChpZ25vcmUpIHt9XG59XG5cbmZ1bmN0aW9uIG9yaWdpbmF0ZXNGcm9tUmVqZWN0aW9uKGUpIHtcbiAgICBpZiAoZSA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuICgoZSBpbnN0YW5jZW9mIFJlamVjdGlvbkVycm9yKSB8fFxuICAgICAgICBlW1wiaXNBc3luY1wiXSA9PT0gdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGlzRXJyb3Iob2JqKSB7XG4gICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIEVycm9yO1xufVxuXG5mdW5jdGlvbiBjYW5BdHRhY2gob2JqKSB7XG4gICAgcmV0dXJuIGlzRXJyb3Iob2JqKTtcbn1cblxuZnVuY3Rpb24gc3ViRXJyb3IobmFtZVByb3BlcnR5LCBkZWZhdWx0TWVzc2FnZSkge1xuICAgIGZ1bmN0aW9uIFN1YkVycm9yKG1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFN1YkVycm9yKSkgcmV0dXJuIG5ldyBTdWJFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gdHlwZW9mIG1lc3NhZ2UgPT09IFwic3RyaW5nXCIgPyBtZXNzYWdlIDogZGVmYXVsdE1lc3NhZ2U7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWVQcm9wZXJ0eTtcbiAgICAgICAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpbmhlcml0cyhTdWJFcnJvciwgRXJyb3IpO1xuICAgIHJldHVybiBTdWJFcnJvcjtcbn1cblxudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG5pZiAodHlwZW9mIFR5cGVFcnJvciAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgVHlwZUVycm9yID0gc3ViRXJyb3IoXCJUeXBlRXJyb3JcIiwgXCJ0eXBlIGVycm9yXCIpO1xufVxudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbmlmICh0eXBlb2YgUmFuZ2VFcnJvciAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgUmFuZ2VFcnJvciA9IHN1YkVycm9yKFwiUmFuZ2VFcnJvclwiLCBcInJhbmdlIGVycm9yXCIpO1xufVxudmFyIENhbmNlbGxhdGlvbkVycm9yID0gc3ViRXJyb3IoXCJDYW5jZWxsYXRpb25FcnJvclwiLCBcImNhbmNlbGxhdGlvbiBlcnJvclwiKTtcbnZhciBUaW1lb3V0RXJyb3IgPSBzdWJFcnJvcihcIlRpbWVvdXRFcnJvclwiLCBcInRpbWVvdXQgZXJyb3JcIik7XG5cbmZ1bmN0aW9uIFJlamVjdGlvbkVycm9yKG1lc3NhZ2UpIHtcbiAgICB0aGlzLm5hbWUgPSBcIlJlamVjdGlvbkVycm9yXCI7XG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICB0aGlzLmNhdXNlID0gbWVzc2FnZTtcbiAgICB0aGlzLmlzQXN5bmMgPSB0cnVlO1xuXG4gICAgaWYgKG1lc3NhZ2UgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlLm1lc3NhZ2U7XG4gICAgICAgIHRoaXMuc3RhY2sgPSBtZXNzYWdlLnN0YWNrO1xuICAgIH1cbiAgICBlbHNlIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgICB9XG5cbn1cbmluaGVyaXRzKFJlamVjdGlvbkVycm9yLCBFcnJvcik7XG5cbnZhciBrZXkgPSBcIl9fQmx1ZWJpcmRFcnJvclR5cGVzX19cIjtcbnZhciBlcnJvclR5cGVzID0gZ2xvYmFsW2tleV07XG5pZiAoIWVycm9yVHlwZXMpIHtcbiAgICBlcnJvclR5cGVzID0gT2JqZWN0ZnJlZXplKHtcbiAgICAgICAgQ2FuY2VsbGF0aW9uRXJyb3I6IENhbmNlbGxhdGlvbkVycm9yLFxuICAgICAgICBUaW1lb3V0RXJyb3I6IFRpbWVvdXRFcnJvcixcbiAgICAgICAgUmVqZWN0aW9uRXJyb3I6IFJlamVjdGlvbkVycm9yXG4gICAgfSk7XG4gICAgbm90RW51bWVyYWJsZVByb3AoZ2xvYmFsLCBrZXksIGVycm9yVHlwZXMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBFcnJvcjogRXJyb3IsXG4gICAgVHlwZUVycm9yOiBUeXBlRXJyb3IsXG4gICAgUmFuZ2VFcnJvcjogUmFuZ2VFcnJvcixcbiAgICBDYW5jZWxsYXRpb25FcnJvcjogZXJyb3JUeXBlcy5DYW5jZWxsYXRpb25FcnJvcixcbiAgICBSZWplY3Rpb25FcnJvcjogZXJyb3JUeXBlcy5SZWplY3Rpb25FcnJvcixcbiAgICBUaW1lb3V0RXJyb3I6IGVycm9yVHlwZXMuVGltZW91dEVycm9yLFxuICAgIG9yaWdpbmF0ZXNGcm9tUmVqZWN0aW9uOiBvcmlnaW5hdGVzRnJvbVJlamVjdGlvbixcbiAgICBtYXJrQXNPcmlnaW5hdGluZ0Zyb21SZWplY3Rpb246IG1hcmtBc09yaWdpbmF0aW5nRnJvbVJlamVjdGlvbixcbiAgICBjYW5BdHRhY2g6IGNhbkF0dGFjaFxufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0IFBldGthIEFudG9ub3ZcbiAqIFxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOjwvcD5cbiAqIFxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICogXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKiBcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFByb21pc2UpIHtcbnZhciBUeXBlRXJyb3IgPSByZXF1aXJlKCcuL2Vycm9ycy5qcycpLlR5cGVFcnJvcjtcblxuZnVuY3Rpb24gYXBpUmVqZWN0aW9uKG1zZykge1xuICAgIHZhciBlcnJvciA9IG5ldyBUeXBlRXJyb3IobXNnKTtcbiAgICB2YXIgcmV0ID0gUHJvbWlzZS5yZWplY3RlZChlcnJvcik7XG4gICAgdmFyIHBhcmVudCA9IHJldC5fcGVla0NvbnRleHQoKTtcbiAgICBpZiAocGFyZW50ICE9IG51bGwpIHtcbiAgICAgICAgcGFyZW50Ll9hdHRhY2hFeHRyYVRyYWNlKGVycm9yKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn1cblxucmV0dXJuIGFwaVJlamVjdGlvbjtcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNCBQZXRrYSBBbnRvbm92XG4gKiBcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczo8L3A+XG4gKiBcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqIFxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICogXG4gKi9cbnZhciBpc0VTNSA9IChmdW5jdGlvbigpe1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIHJldHVybiB0aGlzID09PSB2b2lkIDA7XG59KSgpO1xuXG5pZiAoaXNFUzUpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAgICAgZnJlZXplOiBPYmplY3QuZnJlZXplLFxuICAgICAgICBkZWZpbmVQcm9wZXJ0eTogT2JqZWN0LmRlZmluZVByb3BlcnR5LFxuICAgICAgICBrZXlzOiBPYmplY3Qua2V5cyxcbiAgICAgICAgZ2V0UHJvdG90eXBlT2Y6IE9iamVjdC5nZXRQcm90b3R5cGVPZixcbiAgICAgICAgaXNBcnJheTogQXJyYXkuaXNBcnJheSxcbiAgICAgICAgaXNFUzU6IGlzRVM1XG4gICAgfTtcbn1cblxuZWxzZSB7XG4gICAgdmFyIGhhcyA9IHt9Lmhhc093blByb3BlcnR5O1xuICAgIHZhciBzdHIgPSB7fS50b1N0cmluZztcbiAgICB2YXIgcHJvdG8gPSB7fS5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG5cbiAgICB2YXIgT2JqZWN0S2V5cyA9IGZ1bmN0aW9uIE9iamVjdEtleXMobykge1xuICAgICAgICB2YXIgcmV0ID0gW107XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBvKSB7XG4gICAgICAgICAgICBpZiAoaGFzLmNhbGwobywga2V5KSkge1xuICAgICAgICAgICAgICAgIHJldC5wdXNoKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICB2YXIgT2JqZWN0RGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBPYmplY3REZWZpbmVQcm9wZXJ0eShvLCBrZXksIGRlc2MpIHtcbiAgICAgICAgb1trZXldID0gZGVzYy52YWx1ZTtcbiAgICAgICAgcmV0dXJuIG87XG4gICAgfVxuXG4gICAgdmFyIE9iamVjdEZyZWV6ZSA9IGZ1bmN0aW9uIE9iamVjdEZyZWV6ZShvYmopIHtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG5cbiAgICB2YXIgT2JqZWN0R2V0UHJvdG90eXBlT2YgPSBmdW5jdGlvbiBPYmplY3RHZXRQcm90b3R5cGVPZihvYmopIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3Qob2JqKS5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBwcm90bztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBBcnJheUlzQXJyYXkgPSBmdW5jdGlvbiBBcnJheUlzQXJyYXkob2JqKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyLmNhbGwob2JqKSA9PT0gXCJbb2JqZWN0IEFycmF5XVwiO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG1vZHVsZS5leHBvcnRzID0ge1xuICAgICAgICBpc0FycmF5OiBBcnJheUlzQXJyYXksXG4gICAgICAgIGtleXM6IE9iamVjdEtleXMsXG4gICAgICAgIGRlZmluZVByb3BlcnR5OiBPYmplY3REZWZpbmVQcm9wZXJ0eSxcbiAgICAgICAgZnJlZXplOiBPYmplY3RGcmVlemUsXG4gICAgICAgIGdldFByb3RvdHlwZU9mOiBPYmplY3RHZXRQcm90b3R5cGVPZixcbiAgICAgICAgaXNFUzU6IGlzRVM1XG4gICAgfTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0IFBldGthIEFudG9ub3ZcbiAqIFxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOjwvcD5cbiAqIFxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICogXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKiBcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFByb21pc2UpIHtcbnZhciBpc0FycmF5ID0gcmVxdWlyZShcIi4vdXRpbC5qc1wiKS5pc0FycmF5O1xuXG5mdW5jdGlvbiBQcm9taXNlJF9maWx0ZXIoYm9vbGVhbnMpIHtcbiAgICB2YXIgdmFsdWVzID0gdGhpcyBpbnN0YW5jZW9mIFByb21pc2UgPyB0aGlzLl9zZXR0bGVkVmFsdWUgOiB0aGlzO1xuICAgIHZhciBsZW4gPSB2YWx1ZXMubGVuZ3RoO1xuICAgIHZhciByZXQgPSBuZXcgQXJyYXkobGVuKTtcbiAgICB2YXIgaiA9IDA7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgIGlmIChib29sZWFuc1tpXSkgcmV0W2orK10gPSB2YWx1ZXNbaV07XG5cbiAgICB9XG4gICAgcmV0Lmxlbmd0aCA9IGo7XG4gICAgcmV0dXJuIHJldDtcbn1cblxudmFyIHJlZiA9IHtyZWY6IG51bGx9O1xuUHJvbWlzZS5maWx0ZXIgPSBmdW5jdGlvbiBQcm9taXNlJEZpbHRlcihwcm9taXNlcywgZm4pIHtcbiAgICByZXR1cm4gUHJvbWlzZS5tYXAocHJvbWlzZXMsIGZuLCByZWYpXG4gICAgICAgICAgICAgICAgICAuX3RoZW4oUHJvbWlzZSRfZmlsdGVyLCB2b2lkIDAsIHZvaWQgMCwgcmVmLnJlZiwgdm9pZCAwKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLmZpbHRlciA9IGZ1bmN0aW9uIFByb21pc2UkZmlsdGVyKGZuKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZuLCByZWYpXG4gICAgICAgICAgICAgICAuX3RoZW4oUHJvbWlzZSRfZmlsdGVyLCB2b2lkIDAsIHZvaWQgMCwgcmVmLnJlZiwgdm9pZCAwKTtcbn07XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQgUGV0a2EgQW50b25vdlxuICogXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6PC9wPlxuICogXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKiBcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqIFxuICovXG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oUHJvbWlzZSwgTkVYVF9GSUxURVIpIHtcbnZhciB1dGlsID0gcmVxdWlyZShcIi4vdXRpbC5qc1wiKTtcbnZhciB3cmFwc1ByaW1pdGl2ZVJlY2VpdmVyID0gdXRpbC53cmFwc1ByaW1pdGl2ZVJlY2VpdmVyO1xudmFyIGlzUHJpbWl0aXZlID0gdXRpbC5pc1ByaW1pdGl2ZTtcbnZhciB0aHJvd2VyID0gdXRpbC50aHJvd2VyO1xuXG5cbmZ1bmN0aW9uIHJldHVyblRoaXMoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG59XG5mdW5jdGlvbiB0aHJvd1RoaXMoKSB7XG4gICAgdGhyb3cgdGhpcztcbn1cbmZ1bmN0aW9uIHJldHVybiQocikge1xuICAgIHJldHVybiBmdW5jdGlvbiBQcm9taXNlJF9yZXR1cm5lcigpIHtcbiAgICAgICAgcmV0dXJuIHI7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHRocm93JChyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIFByb21pc2UkX3Rocm93ZXIoKSB7XG4gICAgICAgIHRocm93IHI7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHByb21pc2VkRmluYWxseShyZXQsIHJlYXNvbk9yVmFsdWUsIGlzRnVsZmlsbGVkKSB7XG4gICAgdmFyIHRoZW47XG4gICAgaWYgKHdyYXBzUHJpbWl0aXZlUmVjZWl2ZXIgJiYgaXNQcmltaXRpdmUocmVhc29uT3JWYWx1ZSkpIHtcbiAgICAgICAgdGhlbiA9IGlzRnVsZmlsbGVkID8gcmV0dXJuJChyZWFzb25PclZhbHVlKSA6IHRocm93JChyZWFzb25PclZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRoZW4gPSBpc0Z1bGZpbGxlZCA/IHJldHVyblRoaXMgOiB0aHJvd1RoaXM7XG4gICAgfVxuICAgIHJldHVybiByZXQuX3RoZW4odGhlbiwgdGhyb3dlciwgdm9pZCAwLCByZWFzb25PclZhbHVlLCB2b2lkIDApO1xufVxuXG5mdW5jdGlvbiBmaW5hbGx5SGFuZGxlcihyZWFzb25PclZhbHVlKSB7XG4gICAgdmFyIHByb21pc2UgPSB0aGlzLnByb21pc2U7XG4gICAgdmFyIGhhbmRsZXIgPSB0aGlzLmhhbmRsZXI7XG5cbiAgICB2YXIgcmV0ID0gcHJvbWlzZS5faXNCb3VuZCgpXG4gICAgICAgICAgICAgICAgICAgID8gaGFuZGxlci5jYWxsKHByb21pc2UuX2JvdW5kVG8pXG4gICAgICAgICAgICAgICAgICAgIDogaGFuZGxlcigpO1xuXG4gICAgaWYgKHJldCAhPT0gdm9pZCAwKSB7XG4gICAgICAgIHZhciBtYXliZVByb21pc2UgPSBQcm9taXNlLl9jYXN0KHJldCwgdm9pZCAwKTtcbiAgICAgICAgaWYgKG1heWJlUHJvbWlzZSBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBwcm9taXNlZEZpbmFsbHkobWF5YmVQcm9taXNlLCByZWFzb25PclZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZS5pc0Z1bGZpbGxlZCgpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwcm9taXNlLmlzUmVqZWN0ZWQoKSkge1xuICAgICAgICBORVhUX0ZJTFRFUi5lID0gcmVhc29uT3JWYWx1ZTtcbiAgICAgICAgcmV0dXJuIE5FWFRfRklMVEVSO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHJlYXNvbk9yVmFsdWU7XG4gICAgfVxufVxuXG5mdW5jdGlvbiB0YXBIYW5kbGVyKHZhbHVlKSB7XG4gICAgdmFyIHByb21pc2UgPSB0aGlzLnByb21pc2U7XG4gICAgdmFyIGhhbmRsZXIgPSB0aGlzLmhhbmRsZXI7XG5cbiAgICB2YXIgcmV0ID0gcHJvbWlzZS5faXNCb3VuZCgpXG4gICAgICAgICAgICAgICAgICAgID8gaGFuZGxlci5jYWxsKHByb21pc2UuX2JvdW5kVG8sIHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICA6IGhhbmRsZXIodmFsdWUpO1xuXG4gICAgaWYgKHJldCAhPT0gdm9pZCAwKSB7XG4gICAgICAgIHZhciBtYXliZVByb21pc2UgPSBQcm9taXNlLl9jYXN0KHJldCwgdm9pZCAwKTtcbiAgICAgICAgaWYgKG1heWJlUHJvbWlzZSBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBwcm9taXNlZEZpbmFsbHkobWF5YmVQcm9taXNlLCB2YWx1ZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG5Qcm9taXNlLnByb3RvdHlwZS5fcGFzc1Rocm91Z2hIYW5kbGVyID1cbmZ1bmN0aW9uIFByb21pc2UkX3Bhc3NUaHJvdWdoSGFuZGxlcihoYW5kbGVyLCBpc0ZpbmFsbHkpIHtcbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRoaXMudGhlbigpO1xuXG4gICAgdmFyIHByb21pc2VBbmRIYW5kbGVyID0ge1xuICAgICAgICBwcm9taXNlOiB0aGlzLFxuICAgICAgICBoYW5kbGVyOiBoYW5kbGVyXG4gICAgfTtcblxuICAgIHJldHVybiB0aGlzLl90aGVuKFxuICAgICAgICAgICAgaXNGaW5hbGx5ID8gZmluYWxseUhhbmRsZXIgOiB0YXBIYW5kbGVyLFxuICAgICAgICAgICAgaXNGaW5hbGx5ID8gZmluYWxseUhhbmRsZXIgOiB2b2lkIDAsIHZvaWQgMCxcbiAgICAgICAgICAgIHByb21pc2VBbmRIYW5kbGVyLCB2b2lkIDApO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUubGFzdGx5ID1cblByb21pc2UucHJvdG90eXBlW1wiZmluYWxseVwiXSA9IGZ1bmN0aW9uIFByb21pc2UkZmluYWxseShoYW5kbGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Bhc3NUaHJvdWdoSGFuZGxlcihoYW5kbGVyLCB0cnVlKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLnRhcCA9IGZ1bmN0aW9uIFByb21pc2UkdGFwKGhhbmRsZXIpIHtcbiAgICByZXR1cm4gdGhpcy5fcGFzc1Rocm91Z2hIYW5kbGVyKGhhbmRsZXIsIGZhbHNlKTtcbn07XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQgUGV0a2EgQW50b25vdlxuICogXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6PC9wPlxuICogXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKiBcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqIFxuICovXG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oUHJvbWlzZSwgYXBpUmVqZWN0aW9uLCBJTlRFUk5BTCkge1xudmFyIFByb21pc2VTcGF3biA9IHJlcXVpcmUoXCIuL3Byb21pc2Vfc3Bhd24uanNcIikoUHJvbWlzZSwgSU5URVJOQUwpO1xudmFyIGVycm9ycyA9IHJlcXVpcmUoXCIuL2Vycm9ycy5qc1wiKTtcbnZhciBUeXBlRXJyb3IgPSBlcnJvcnMuVHlwZUVycm9yO1xudmFyIGRlcHJlY2F0ZWQgPSByZXF1aXJlKFwiLi91dGlsLmpzXCIpLmRlcHJlY2F0ZWQ7XG5cblByb21pc2UuY29yb3V0aW5lID0gZnVuY3Rpb24gUHJvbWlzZSRDb3JvdXRpbmUoZ2VuZXJhdG9yRnVuY3Rpb24pIHtcbiAgICBpZiAodHlwZW9mIGdlbmVyYXRvckZ1bmN0aW9uICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImdlbmVyYXRvckZ1bmN0aW9uIG11c3QgYmUgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gICAgdmFyIFByb21pc2VTcGF3biQgPSBQcm9taXNlU3Bhd247XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGdlbmVyYXRvciA9IGdlbmVyYXRvckZ1bmN0aW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIHZhciBzcGF3biA9IG5ldyBQcm9taXNlU3Bhd24kKHZvaWQgMCwgdm9pZCAwKTtcbiAgICAgICAgc3Bhd24uX2dlbmVyYXRvciA9IGdlbmVyYXRvcjtcbiAgICAgICAgc3Bhd24uX25leHQodm9pZCAwKTtcbiAgICAgICAgcmV0dXJuIHNwYXduLnByb21pc2UoKTtcbiAgICB9O1xufTtcblxuUHJvbWlzZS5jb3JvdXRpbmUuYWRkWWllbGRIYW5kbGVyID0gUHJvbWlzZVNwYXduLmFkZFlpZWxkSGFuZGxlcjtcblxuUHJvbWlzZS5zcGF3biA9IGZ1bmN0aW9uIFByb21pc2UkU3Bhd24oZ2VuZXJhdG9yRnVuY3Rpb24pIHtcbiAgICBkZXByZWNhdGVkKFwiUHJvbWlzZS5zcGF3biBpcyBkZXByZWNhdGVkLiBVc2UgUHJvbWlzZS5jb3JvdXRpbmUgaW5zdGVhZC5cIik7XG4gICAgaWYgKHR5cGVvZiBnZW5lcmF0b3JGdW5jdGlvbiAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBhcGlSZWplY3Rpb24oXCJnZW5lcmF0b3JGdW5jdGlvbiBtdXN0IGJlIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICAgIHZhciBzcGF3biA9IG5ldyBQcm9taXNlU3Bhd24oZ2VuZXJhdG9yRnVuY3Rpb24sIHRoaXMpO1xuICAgIHZhciByZXQgPSBzcGF3bi5wcm9taXNlKCk7XG4gICAgc3Bhd24uX3J1bihQcm9taXNlLnNwYXduKTtcbiAgICByZXR1cm4gcmV0O1xufTtcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNCBQZXRrYSBBbnRvbm92XG4gKiBcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczo8L3A+XG4gKiBcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqIFxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICogXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzICE9PSB2b2lkIDApIHJldHVybiB0aGlzO1xuICAgIHRyeSB7cmV0dXJuIGdsb2JhbDt9XG4gICAgY2F0Y2goZSkge31cbiAgICB0cnkge3JldHVybiB3aW5kb3c7fVxuICAgIGNhdGNoKGUpIHt9XG4gICAgdHJ5IHtyZXR1cm4gc2VsZjt9XG4gICAgY2F0Y2goZSkge31cbn0pKCk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNCBQZXRrYSBBbnRvbm92XG4gKiBcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczo8L3A+XG4gKiBcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqIFxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICogXG4gKi9cblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihQcm9taXNlLCBQcm9taXNlQXJyYXksIElOVEVSTkFMLCBhcGlSZWplY3Rpb24pIHtcblxudmFyIGFsbCA9IFByb21pc2UuYWxsO1xudmFyIHV0aWwgPSByZXF1aXJlKFwiLi91dGlsLmpzXCIpO1xudmFyIGNhbkF0dGFjaCA9IHJlcXVpcmUoXCIuL2Vycm9ycy5qc1wiKS5jYW5BdHRhY2g7XG52YXIgaXNBcnJheSA9IHV0aWwuaXNBcnJheTtcbnZhciBfY2FzdCA9IFByb21pc2UuX2Nhc3Q7XG5cbmZ1bmN0aW9uIHVucGFjayh2YWx1ZXMpIHtcbiAgICByZXR1cm4gUHJvbWlzZSRfTWFwKHZhbHVlcywgdGhpc1swXSwgdGhpc1sxXSwgdGhpc1syXSk7XG59XG5cbmZ1bmN0aW9uIFByb21pc2UkX01hcChwcm9taXNlcywgZm4sIHVzZUJvdW5kLCByZWYpIHtcbiAgICBpZiAodHlwZW9mIGZuICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGFwaVJlamVjdGlvbihcImZuIG11c3QgYmUgYSBmdW5jdGlvblwiKTtcbiAgICB9XG5cbiAgICB2YXIgcmVjZWl2ZXIgPSB2b2lkIDA7XG4gICAgaWYgKHVzZUJvdW5kID09PSB0cnVlKSB7XG4gICAgICAgIGlmIChwcm9taXNlcy5faXNCb3VuZCgpKSB7XG4gICAgICAgICAgICByZWNlaXZlciA9IHByb21pc2VzLl9ib3VuZFRvO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHVzZUJvdW5kICE9PSBmYWxzZSkge1xuICAgICAgICByZWNlaXZlciA9IHVzZUJvdW5kO1xuICAgIH1cblxuICAgIHZhciBzaG91bGRVbndyYXBJdGVtcyA9IHJlZiAhPT0gdm9pZCAwO1xuICAgIGlmIChzaG91bGRVbndyYXBJdGVtcykgcmVmLnJlZiA9IHByb21pc2VzO1xuXG4gICAgaWYgKHByb21pc2VzIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICB2YXIgcGFjayA9IFtmbiwgcmVjZWl2ZXIsIHJlZl07XG4gICAgICAgIHJldHVybiBwcm9taXNlcy5fdGhlbih1bnBhY2ssIHZvaWQgMCwgdm9pZCAwLCBwYWNrLCB2b2lkIDApO1xuICAgIH1cbiAgICBlbHNlIGlmICghaXNBcnJheShwcm9taXNlcykpIHtcbiAgICAgICAgcmV0dXJuIGFwaVJlamVjdGlvbihcImV4cGVjdGluZyBhbiBhcnJheSwgYSBwcm9taXNlIG9yIGEgdGhlbmFibGVcIik7XG4gICAgfVxuXG4gICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShJTlRFUk5BTCk7XG4gICAgaWYgKHJlY2VpdmVyICE9PSB2b2lkIDApIHByb21pc2UuX3NldEJvdW5kVG8ocmVjZWl2ZXIpO1xuICAgIHByb21pc2UuX3NldFRyYWNlKHZvaWQgMCk7XG5cbiAgICB2YXIgbWFwcGluZyA9IG5ldyBNYXBwaW5nKHByb21pc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9taXNlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3VsZFVud3JhcEl0ZW1zKTtcbiAgICBtYXBwaW5nLmluaXQoKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cblxudmFyIHBlbmRpbmcgPSB7fTtcbmZ1bmN0aW9uIE1hcHBpbmcocHJvbWlzZSwgY2FsbGJhY2ssIGl0ZW1zLCByZWNlaXZlciwgc2hvdWxkVW53cmFwSXRlbXMpIHtcbiAgICB0aGlzLnNob3VsZFVud3JhcEl0ZW1zID0gc2hvdWxkVW53cmFwSXRlbXM7XG4gICAgdGhpcy5pbmRleCA9IDA7XG4gICAgdGhpcy5pdGVtcyA9IGl0ZW1zO1xuICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB0aGlzLnJlY2VpdmVyID0gcmVjZWl2ZXI7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc3VsdCA9IG5ldyBBcnJheShpdGVtcy5sZW5ndGgpO1xufVxudXRpbC5pbmhlcml0cyhNYXBwaW5nLCBQcm9taXNlQXJyYXkpO1xuXG5NYXBwaW5nLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gTWFwcGluZyRpbml0KCkge1xuICAgIHZhciBpdGVtcyA9IHRoaXMuaXRlbXM7XG4gICAgdmFyIGxlbiA9IGl0ZW1zLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gdGhpcy5yZXN1bHQ7XG4gICAgdmFyIGlzUmVqZWN0ZWQgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgIHZhciBtYXliZVByb21pc2UgPSBfY2FzdChpdGVtc1tpXSwgdm9pZCAwKTtcbiAgICAgICAgaWYgKG1heWJlUHJvbWlzZSBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgICAgIGlmIChtYXliZVByb21pc2UuaXNQZW5kaW5nKCkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHRbaV0gPSBwZW5kaW5nO1xuICAgICAgICAgICAgICAgIG1heWJlUHJvbWlzZS5fcHJveHlQcm9taXNlQXJyYXkodGhpcywgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChtYXliZVByb21pc2UuaXNGdWxmaWxsZWQoKSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdFtpXSA9IG1heWJlUHJvbWlzZS52YWx1ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbWF5YmVQcm9taXNlLl91bnNldFJlamVjdGlvbklzVW5oYW5kbGVkKCk7XG4gICAgICAgICAgICAgICAgaWYgKCFpc1JlamVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVqZWN0KG1heWJlUHJvbWlzZS5yZWFzb24oKSk7XG4gICAgICAgICAgICAgICAgICAgIGlzUmVqZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdFtpXSA9IG1heWJlUHJvbWlzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWlzUmVqZWN0ZWQpIHRoaXMuaXRlcmF0ZSgpO1xufTtcblxuTWFwcGluZy5wcm90b3R5cGUuaXNSZXNvbHZlZCA9IGZ1bmN0aW9uIE1hcHBpbmckaXNSZXNvbHZlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9taXNlID09PSBudWxsO1xufTtcblxuTWFwcGluZy5wcm90b3R5cGUuX3Byb21pc2VQcm9ncmVzc2VkID1cbmZ1bmN0aW9uIE1hcHBpbmckX3Byb21pc2VQcm9ncmVzc2VkKHZhbHVlKSB7XG4gICAgaWYgKHRoaXMuaXNSZXNvbHZlZCgpKSByZXR1cm47XG4gICAgdGhpcy5wcm9taXNlLl9wcm9ncmVzcyh2YWx1ZSk7XG59O1xuXG5NYXBwaW5nLnByb3RvdHlwZS5fcHJvbWlzZUZ1bGZpbGxlZCA9XG5mdW5jdGlvbiBNYXBwaW5nJF9wcm9taXNlRnVsZmlsbGVkKHZhbHVlLCBpbmRleCkge1xuICAgIGlmICh0aGlzLmlzUmVzb2x2ZWQoKSkgcmV0dXJuO1xuICAgIHRoaXMucmVzdWx0W2luZGV4XSA9IHZhbHVlO1xuICAgIGlmICh0aGlzLnNob3VsZFVud3JhcEl0ZW1zKSB0aGlzLml0ZW1zW2luZGV4XSA9IHZhbHVlO1xuICAgIGlmICh0aGlzLmluZGV4ID09PSBpbmRleCkgdGhpcy5pdGVyYXRlKCk7XG59O1xuXG5NYXBwaW5nLnByb3RvdHlwZS5fcHJvbWlzZVJlamVjdGVkID1cbmZ1bmN0aW9uIE1hcHBpbmckX3Byb21pc2VSZWplY3RlZChyZWFzb24pIHtcbiAgICB0aGlzLnJlamVjdChyZWFzb24pO1xufTtcblxuTWFwcGluZy5wcm90b3R5cGUucmVqZWN0ID0gZnVuY3Rpb24gTWFwcGluZyRyZWplY3QocmVhc29uKSB7XG4gICAgaWYgKHRoaXMuaXNSZXNvbHZlZCgpKSByZXR1cm47XG4gICAgdmFyIHRyYWNlID0gY2FuQXR0YWNoKHJlYXNvbikgPyByZWFzb24gOiBuZXcgRXJyb3IocmVhc29uICsgXCJcIik7XG4gICAgdGhpcy5wcm9taXNlLl9hdHRhY2hFeHRyYVRyYWNlKHRyYWNlKTtcbiAgICB0aGlzLnByb21pc2UuX3JlamVjdChyZWFzb24sIHRyYWNlKTtcbn07XG5cbk1hcHBpbmcucHJvdG90eXBlLml0ZXJhdGUgPSBmdW5jdGlvbiBNYXBwaW5nJGl0ZXJhdGUoKSB7XG4gICAgdmFyIGkgPSB0aGlzLmluZGV4O1xuICAgIHZhciBpdGVtcyA9IHRoaXMuaXRlbXM7XG4gICAgdmFyIHJlc3VsdCA9IHRoaXMucmVzdWx0O1xuICAgIHZhciBsZW4gPSBpdGVtcy5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IHRoaXMucmVzdWx0O1xuICAgIHZhciByZWNlaXZlciA9IHRoaXMucmVjZWl2ZXI7XG4gICAgdmFyIGNhbGxiYWNrID0gdGhpcy5jYWxsYmFjaztcblxuICAgIGZvciAoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0W2ldO1xuICAgICAgICBpZiAodmFsdWUgPT09IHBlbmRpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuaW5kZXggPSBpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7IHJlc3VsdFtpXSA9IGNhbGxiYWNrLmNhbGwocmVjZWl2ZXIsIHZhbHVlLCBpLCBsZW4pOyB9XG4gICAgICAgIGNhdGNoIChlKSB7IHJldHVybiB0aGlzLnJlamVjdChlKTsgfVxuICAgIH1cbiAgICB0aGlzLnByb21pc2UuX2ZvbGxvdyhhbGwocmVzdWx0KSk7XG4gICAgdGhpcy5pdGVtcyA9IHRoaXMucmVzdWx0ID0gdGhpcy5jYWxsYmFjayA9IHRoaXMucHJvbWlzZSA9IG51bGw7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5tYXAgPSBmdW5jdGlvbiBQcm9taXNlJG1hcChmbiwgcmVmKSB7XG4gICAgcmV0dXJuIFByb21pc2UkX01hcCh0aGlzLCBmbiwgdHJ1ZSwgcmVmKTtcbn07XG5cblByb21pc2UubWFwID0gZnVuY3Rpb24gUHJvbWlzZSRNYXAocHJvbWlzZXMsIGZuLCByZWYpIHtcbiAgICByZXR1cm4gUHJvbWlzZSRfTWFwKHByb21pc2VzLCBmbiwgZmFsc2UsIHJlZik7XG59O1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0IFBldGthIEFudG9ub3ZcbiAqIFxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOjwvcD5cbiAqIFxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICogXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKiBcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFByb21pc2UpIHtcbnZhciB1dGlsID0gcmVxdWlyZShcIi4vdXRpbC5qc1wiKTtcbnZhciBhc3luYyA9IHJlcXVpcmUoXCIuL2FzeW5jLmpzXCIpO1xudmFyIHRyeUNhdGNoMiA9IHV0aWwudHJ5Q2F0Y2gyO1xudmFyIHRyeUNhdGNoMSA9IHV0aWwudHJ5Q2F0Y2gxO1xudmFyIGVycm9yT2JqID0gdXRpbC5lcnJvck9iajtcblxuZnVuY3Rpb24gdGhyb3dlcihyKSB7XG4gICAgdGhyb3cgcjtcbn1cblxuZnVuY3Rpb24gUHJvbWlzZSRfc3VjY2Vzc0FkYXB0ZXIodmFsLCByZWNlaXZlcikge1xuICAgIHZhciBub2RlYmFjayA9IHRoaXM7XG4gICAgdmFyIHJldCA9IHZhbCA9PT0gdm9pZCAwXG4gICAgICAgID8gdHJ5Q2F0Y2gxKG5vZGViYWNrLCByZWNlaXZlciwgbnVsbClcbiAgICAgICAgOiB0cnlDYXRjaDIobm9kZWJhY2ssIHJlY2VpdmVyLCBudWxsLCB2YWwpO1xuICAgIGlmIChyZXQgPT09IGVycm9yT2JqKSB7XG4gICAgICAgIGFzeW5jLmludm9rZUxhdGVyKHRocm93ZXIsIHZvaWQgMCwgcmV0LmUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIFByb21pc2UkX2Vycm9yQWRhcHRlcihyZWFzb24sIHJlY2VpdmVyKSB7XG4gICAgdmFyIG5vZGViYWNrID0gdGhpcztcbiAgICB2YXIgcmV0ID0gdHJ5Q2F0Y2gxKG5vZGViYWNrLCByZWNlaXZlciwgcmVhc29uKTtcbiAgICBpZiAocmV0ID09PSBlcnJvck9iaikge1xuICAgICAgICBhc3luYy5pbnZva2VMYXRlcih0aHJvd2VyLCB2b2lkIDAsIHJldC5lKTtcbiAgICB9XG59XG5cblByb21pc2UucHJvdG90eXBlLm5vZGVpZnkgPSBmdW5jdGlvbiBQcm9taXNlJG5vZGVpZnkobm9kZWJhY2spIHtcbiAgICBpZiAodHlwZW9mIG5vZGViYWNrID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aGlzLl90aGVuKFxuICAgICAgICAgICAgUHJvbWlzZSRfc3VjY2Vzc0FkYXB0ZXIsXG4gICAgICAgICAgICBQcm9taXNlJF9lcnJvckFkYXB0ZXIsXG4gICAgICAgICAgICB2b2lkIDAsXG4gICAgICAgICAgICBub2RlYmFjayxcbiAgICAgICAgICAgIHRoaXMuX2lzQm91bmQoKSA/IHRoaXMuX2JvdW5kVG8gOiBudWxsXG4gICAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufTtcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNCBQZXRrYSBBbnRvbm92XG4gKiBcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczo8L3A+XG4gKiBcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqIFxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICogXG4gKi9cblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihQcm9taXNlLCBpc1Byb21pc2VBcnJheVByb3h5KSB7XG52YXIgdXRpbCA9IHJlcXVpcmUoXCIuL3V0aWwuanNcIik7XG52YXIgYXN5bmMgPSByZXF1aXJlKFwiLi9hc3luYy5qc1wiKTtcbnZhciBlcnJvcnMgPSByZXF1aXJlKFwiLi9lcnJvcnMuanNcIik7XG52YXIgdHJ5Q2F0Y2gxID0gdXRpbC50cnlDYXRjaDE7XG52YXIgZXJyb3JPYmogPSB1dGlsLmVycm9yT2JqO1xuXG5Qcm9taXNlLnByb3RvdHlwZS5wcm9ncmVzc2VkID0gZnVuY3Rpb24gUHJvbWlzZSRwcm9ncmVzc2VkKGhhbmRsZXIpIHtcbiAgICByZXR1cm4gdGhpcy5fdGhlbih2b2lkIDAsIHZvaWQgMCwgaGFuZGxlciwgdm9pZCAwLCB2b2lkIDApO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3Byb2dyZXNzID0gZnVuY3Rpb24gUHJvbWlzZSRfcHJvZ3Jlc3MocHJvZ3Jlc3NWYWx1ZSkge1xuICAgIGlmICh0aGlzLl9pc0ZvbGxvd2luZ09yRnVsZmlsbGVkT3JSZWplY3RlZCgpKSByZXR1cm47XG4gICAgdGhpcy5fcHJvZ3Jlc3NVbmNoZWNrZWQocHJvZ3Jlc3NWYWx1ZSk7XG5cbn07XG5cblByb21pc2UucHJvdG90eXBlLl9wcm9ncmVzc0hhbmRsZXJBdCA9XG5mdW5jdGlvbiBQcm9taXNlJF9wcm9ncmVzc0hhbmRsZXJBdChpbmRleCkge1xuICAgIGlmIChpbmRleCA9PT0gMCkgcmV0dXJuIHRoaXMuX3Byb2dyZXNzSGFuZGxlcjA7XG4gICAgcmV0dXJuIHRoaXNbaW5kZXggKyAyIC0gNV07XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fZG9Qcm9ncmVzc1dpdGggPVxuZnVuY3Rpb24gUHJvbWlzZSRfZG9Qcm9ncmVzc1dpdGgocHJvZ3Jlc3Npb24pIHtcbiAgICB2YXIgcHJvZ3Jlc3NWYWx1ZSA9IHByb2dyZXNzaW9uLnZhbHVlO1xuICAgIHZhciBoYW5kbGVyID0gcHJvZ3Jlc3Npb24uaGFuZGxlcjtcbiAgICB2YXIgcHJvbWlzZSA9IHByb2dyZXNzaW9uLnByb21pc2U7XG4gICAgdmFyIHJlY2VpdmVyID0gcHJvZ3Jlc3Npb24ucmVjZWl2ZXI7XG5cbiAgICB0aGlzLl9wdXNoQ29udGV4dCgpO1xuICAgIHZhciByZXQgPSB0cnlDYXRjaDEoaGFuZGxlciwgcmVjZWl2ZXIsIHByb2dyZXNzVmFsdWUpO1xuICAgIHRoaXMuX3BvcENvbnRleHQoKTtcblxuICAgIGlmIChyZXQgPT09IGVycm9yT2JqKSB7XG4gICAgICAgIGlmIChyZXQuZSAhPSBudWxsICYmXG4gICAgICAgICAgICByZXQuZS5uYW1lICE9PSBcIlN0b3BQcm9ncmVzc1Byb3BhZ2F0aW9uXCIpIHtcbiAgICAgICAgICAgIHZhciB0cmFjZSA9IGVycm9ycy5jYW5BdHRhY2gocmV0LmUpXG4gICAgICAgICAgICAgICAgPyByZXQuZSA6IG5ldyBFcnJvcihyZXQuZSArIFwiXCIpO1xuICAgICAgICAgICAgcHJvbWlzZS5fYXR0YWNoRXh0cmFUcmFjZSh0cmFjZSk7XG4gICAgICAgICAgICBwcm9taXNlLl9wcm9ncmVzcyhyZXQuZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAocmV0IGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICByZXQuX3RoZW4ocHJvbWlzZS5fcHJvZ3Jlc3MsIG51bGwsIG51bGwsIHByb21pc2UsIHZvaWQgMCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBwcm9taXNlLl9wcm9ncmVzcyhyZXQpO1xuICAgIH1cbn07XG5cblxuUHJvbWlzZS5wcm90b3R5cGUuX3Byb2dyZXNzVW5jaGVja2VkID1cbmZ1bmN0aW9uIFByb21pc2UkX3Byb2dyZXNzVW5jaGVja2VkKHByb2dyZXNzVmFsdWUpIHtcbiAgICBpZiAoIXRoaXMuaXNQZW5kaW5nKCkpIHJldHVybjtcbiAgICB2YXIgbGVuID0gdGhpcy5fbGVuZ3RoKCk7XG4gICAgdmFyIHByb2dyZXNzID0gdGhpcy5fcHJvZ3Jlc3M7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNSkge1xuICAgICAgICB2YXIgaGFuZGxlciA9IHRoaXMuX3Byb2dyZXNzSGFuZGxlckF0KGkpO1xuICAgICAgICB2YXIgcHJvbWlzZSA9IHRoaXMuX3Byb21pc2VBdChpKTtcbiAgICAgICAgaWYgKCEocHJvbWlzZSBpbnN0YW5jZW9mIFByb21pc2UpKSB7XG4gICAgICAgICAgICB2YXIgcmVjZWl2ZXIgPSB0aGlzLl9yZWNlaXZlckF0KGkpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVyLmNhbGwocmVjZWl2ZXIsIHByb2dyZXNzVmFsdWUsIHByb21pc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocmVjZWl2ZXIgaW5zdGFuY2VvZiBQcm9taXNlICYmIHJlY2VpdmVyLl9pc1Byb3hpZWQoKSkge1xuICAgICAgICAgICAgICAgIHJlY2VpdmVyLl9wcm9ncmVzc1VuY2hlY2tlZChwcm9ncmVzc1ZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzUHJvbWlzZUFycmF5UHJveHkocmVjZWl2ZXIsIHByb21pc2UpKSB7XG4gICAgICAgICAgICAgICAgcmVjZWl2ZXIuX3Byb21pc2VQcm9ncmVzc2VkKHByb2dyZXNzVmFsdWUsIHByb21pc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgYXN5bmMuaW52b2tlKHRoaXMuX2RvUHJvZ3Jlc3NXaXRoLCB0aGlzLCB7XG4gICAgICAgICAgICAgICAgaGFuZGxlcjogaGFuZGxlcixcbiAgICAgICAgICAgICAgICBwcm9taXNlOiBwcm9taXNlLFxuICAgICAgICAgICAgICAgIHJlY2VpdmVyOiB0aGlzLl9yZWNlaXZlckF0KGkpLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBwcm9ncmVzc1ZhbHVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGFzeW5jLmludm9rZShwcm9ncmVzcywgcHJvbWlzZSwgcHJvZ3Jlc3NWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0IFBldGthIEFudG9ub3ZcbiAqIFxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOjwvcD5cbiAqIFxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICogXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKiBcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoXCIuL2dsb2JhbC5qc1wiKTtcbnZhciB1dGlsID0gcmVxdWlyZShcIi4vdXRpbC5qc1wiKTtcbnZhciBhc3luYyA9IHJlcXVpcmUoXCIuL2FzeW5jLmpzXCIpO1xudmFyIGVycm9ycyA9IHJlcXVpcmUoXCIuL2Vycm9ycy5qc1wiKTtcblxudmFyIElOVEVSTkFMID0gZnVuY3Rpb24oKXt9O1xudmFyIEFQUExZID0ge307XG52YXIgTkVYVF9GSUxURVIgPSB7ZTogbnVsbH07XG5cbnZhciBQcm9taXNlQXJyYXkgPSByZXF1aXJlKFwiLi9wcm9taXNlX2FycmF5LmpzXCIpKFByb21pc2UsIElOVEVSTkFMKTtcbnZhciBDYXB0dXJlZFRyYWNlID0gcmVxdWlyZShcIi4vY2FwdHVyZWRfdHJhY2UuanNcIikoKTtcbnZhciBDYXRjaEZpbHRlciA9IHJlcXVpcmUoXCIuL2NhdGNoX2ZpbHRlci5qc1wiKShORVhUX0ZJTFRFUik7XG52YXIgUHJvbWlzZVJlc29sdmVyID0gcmVxdWlyZShcIi4vcHJvbWlzZV9yZXNvbHZlci5qc1wiKTtcblxudmFyIGlzQXJyYXkgPSB1dGlsLmlzQXJyYXk7XG5cbnZhciBlcnJvck9iaiA9IHV0aWwuZXJyb3JPYmo7XG52YXIgdHJ5Q2F0Y2gxID0gdXRpbC50cnlDYXRjaDE7XG52YXIgdHJ5Q2F0Y2gyID0gdXRpbC50cnlDYXRjaDI7XG52YXIgdHJ5Q2F0Y2hBcHBseSA9IHV0aWwudHJ5Q2F0Y2hBcHBseTtcbnZhciBSYW5nZUVycm9yID0gZXJyb3JzLlJhbmdlRXJyb3I7XG52YXIgVHlwZUVycm9yID0gZXJyb3JzLlR5cGVFcnJvcjtcbnZhciBDYW5jZWxsYXRpb25FcnJvciA9IGVycm9ycy5DYW5jZWxsYXRpb25FcnJvcjtcbnZhciBUaW1lb3V0RXJyb3IgPSBlcnJvcnMuVGltZW91dEVycm9yO1xudmFyIFJlamVjdGlvbkVycm9yID0gZXJyb3JzLlJlamVjdGlvbkVycm9yO1xudmFyIG9yaWdpbmF0ZXNGcm9tUmVqZWN0aW9uID0gZXJyb3JzLm9yaWdpbmF0ZXNGcm9tUmVqZWN0aW9uO1xudmFyIG1hcmtBc09yaWdpbmF0aW5nRnJvbVJlamVjdGlvbiA9IGVycm9ycy5tYXJrQXNPcmlnaW5hdGluZ0Zyb21SZWplY3Rpb247XG52YXIgY2FuQXR0YWNoID0gZXJyb3JzLmNhbkF0dGFjaDtcbnZhciB0aHJvd2VyID0gdXRpbC50aHJvd2VyO1xudmFyIGFwaVJlamVjdGlvbiA9IHJlcXVpcmUoXCIuL2Vycm9yc19hcGlfcmVqZWN0aW9uXCIpKFByb21pc2UpO1xuXG5cbnZhciBtYWtlU2VsZlJlc29sdXRpb25FcnJvciA9IGZ1bmN0aW9uIFByb21pc2UkX21ha2VTZWxmUmVzb2x1dGlvbkVycm9yKCkge1xuICAgIHJldHVybiBuZXcgVHlwZUVycm9yKFwiY2lyY3VsYXIgcHJvbWlzZSByZXNvbHV0aW9uIGNoYWluXCIpO1xufTtcblxuZnVuY3Rpb24gaXNQcm9taXNlKG9iaikge1xuICAgIGlmIChvYmogPT09IHZvaWQgMCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBQcm9taXNlO1xufVxuXG5mdW5jdGlvbiBpc1Byb21pc2VBcnJheVByb3h5KHJlY2VpdmVyLCBwcm9taXNlU2xvdFZhbHVlKSB7XG4gICAgaWYgKHJlY2VpdmVyIGluc3RhbmNlb2YgUHJvbWlzZUFycmF5KSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlU2xvdFZhbHVlID49IDA7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gUHJvbWlzZShyZXNvbHZlcikge1xuICAgIGlmICh0eXBlb2YgcmVzb2x2ZXIgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwidGhlIHByb21pc2UgY29uc3RydWN0b3IgcmVxdWlyZXMgYSByZXNvbHZlciBmdW5jdGlvblwiKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuY29uc3RydWN0b3IgIT09IFByb21pc2UpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcInRoZSBwcm9taXNlIGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBpbnZva2VkIGRpcmVjdGx5XCIpO1xuICAgIH1cbiAgICB0aGlzLl9iaXRGaWVsZCA9IDA7XG4gICAgdGhpcy5fZnVsZmlsbG1lbnRIYW5kbGVyMCA9IHZvaWQgMDtcbiAgICB0aGlzLl9yZWplY3Rpb25IYW5kbGVyMCA9IHZvaWQgMDtcbiAgICB0aGlzLl9wcm9taXNlMCA9IHZvaWQgMDtcbiAgICB0aGlzLl9yZWNlaXZlcjAgPSB2b2lkIDA7XG4gICAgdGhpcy5fc2V0dGxlZFZhbHVlID0gdm9pZCAwO1xuICAgIHRoaXMuX2JvdW5kVG8gPSB2b2lkIDA7XG4gICAgaWYgKHJlc29sdmVyICE9PSBJTlRFUk5BTCkgdGhpcy5fcmVzb2x2ZUZyb21SZXNvbHZlcihyZXNvbHZlcik7XG59XG5cblByb21pc2UucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiBQcm9taXNlJGJpbmQodGhpc0FyZykge1xuICAgIHZhciByZXQgPSBuZXcgUHJvbWlzZShJTlRFUk5BTCk7XG4gICAgcmV0Ll9zZXRUcmFjZSh0aGlzKTtcbiAgICByZXQuX2ZvbGxvdyh0aGlzKTtcbiAgICByZXQuX3NldEJvdW5kVG8odGhpc0FyZyk7XG4gICAgaWYgKHRoaXMuX2NhbmNlbGxhYmxlKCkpIHtcbiAgICAgICAgcmV0Ll9zZXRDYW5jZWxsYWJsZSgpO1xuICAgICAgICByZXQuX2NhbmNlbGxhdGlvblBhcmVudCA9IHRoaXM7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIFByb21pc2UkdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBQcm9taXNlXVwiO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuY2F1Z2h0ID0gUHJvbWlzZS5wcm90b3R5cGVbXCJjYXRjaFwiXSA9XG5mdW5jdGlvbiBQcm9taXNlJGNhdGNoKGZuKSB7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgaWYgKGxlbiA+IDEpIHtcbiAgICAgICAgdmFyIGNhdGNoSW5zdGFuY2VzID0gbmV3IEFycmF5KGxlbiAtIDEpLFxuICAgICAgICAgICAgaiA9IDAsIGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW4gLSAxOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpdGVtID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBjYXRjaEluc3RhbmNlc1tqKytdID0gaXRlbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBjYXRjaEZpbHRlclR5cGVFcnJvciA9XG4gICAgICAgICAgICAgICAgICAgIG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkEgY2F0Y2ggZmlsdGVyIG11c3QgYmUgYW4gZXJyb3IgY29uc3RydWN0b3IgXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICsgXCJvciBhIGZpbHRlciBmdW5jdGlvblwiKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuX2F0dGFjaEV4dHJhVHJhY2UoY2F0Y2hGaWx0ZXJUeXBlRXJyb3IpO1xuICAgICAgICAgICAgICAgIGFzeW5jLmludm9rZSh0aGlzLl9yZWplY3QsIHRoaXMsIGNhdGNoRmlsdGVyVHlwZUVycm9yKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2hJbnN0YW5jZXMubGVuZ3RoID0gajtcbiAgICAgICAgZm4gPSBhcmd1bWVudHNbaV07XG5cbiAgICAgICAgdGhpcy5fcmVzZXRUcmFjZSgpO1xuICAgICAgICB2YXIgY2F0Y2hGaWx0ZXIgPSBuZXcgQ2F0Y2hGaWx0ZXIoY2F0Y2hJbnN0YW5jZXMsIGZuLCB0aGlzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RoZW4odm9pZCAwLCBjYXRjaEZpbHRlci5kb0ZpbHRlciwgdm9pZCAwLFxuICAgICAgICAgICAgY2F0Y2hGaWx0ZXIsIHZvaWQgMCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl90aGVuKHZvaWQgMCwgZm4sIHZvaWQgMCwgdm9pZCAwLCB2b2lkIDApO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUudGhlbiA9XG5mdW5jdGlvbiBQcm9taXNlJHRoZW4oZGlkRnVsZmlsbCwgZGlkUmVqZWN0LCBkaWRQcm9ncmVzcykge1xuICAgIHJldHVybiB0aGlzLl90aGVuKGRpZEZ1bGZpbGwsIGRpZFJlamVjdCwgZGlkUHJvZ3Jlc3MsXG4gICAgICAgIHZvaWQgMCwgdm9pZCAwKTtcbn07XG5cblxuUHJvbWlzZS5wcm90b3R5cGUuZG9uZSA9XG5mdW5jdGlvbiBQcm9taXNlJGRvbmUoZGlkRnVsZmlsbCwgZGlkUmVqZWN0LCBkaWRQcm9ncmVzcykge1xuICAgIHZhciBwcm9taXNlID0gdGhpcy5fdGhlbihkaWRGdWxmaWxsLCBkaWRSZWplY3QsIGRpZFByb2dyZXNzLFxuICAgICAgICB2b2lkIDAsIHZvaWQgMCk7XG4gICAgcHJvbWlzZS5fc2V0SXNGaW5hbCgpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuc3ByZWFkID0gZnVuY3Rpb24gUHJvbWlzZSRzcHJlYWQoZGlkRnVsZmlsbCwgZGlkUmVqZWN0KSB7XG4gICAgcmV0dXJuIHRoaXMuX3RoZW4oZGlkRnVsZmlsbCwgZGlkUmVqZWN0LCB2b2lkIDAsXG4gICAgICAgIEFQUExZLCB2b2lkIDApO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuaXNDYW5jZWxsYWJsZSA9IGZ1bmN0aW9uIFByb21pc2UkaXNDYW5jZWxsYWJsZSgpIHtcbiAgICByZXR1cm4gIXRoaXMuaXNSZXNvbHZlZCgpICYmXG4gICAgICAgIHRoaXMuX2NhbmNlbGxhYmxlKCk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiBQcm9taXNlJHRvSlNPTigpIHtcbiAgICB2YXIgcmV0ID0ge1xuICAgICAgICBpc0Z1bGZpbGxlZDogZmFsc2UsXG4gICAgICAgIGlzUmVqZWN0ZWQ6IGZhbHNlLFxuICAgICAgICBmdWxmaWxsbWVudFZhbHVlOiB2b2lkIDAsXG4gICAgICAgIHJlamVjdGlvblJlYXNvbjogdm9pZCAwXG4gICAgfTtcbiAgICBpZiAodGhpcy5pc0Z1bGZpbGxlZCgpKSB7XG4gICAgICAgIHJldC5mdWxmaWxsbWVudFZhbHVlID0gdGhpcy5fc2V0dGxlZFZhbHVlO1xuICAgICAgICByZXQuaXNGdWxmaWxsZWQgPSB0cnVlO1xuICAgIH1cbiAgICBlbHNlIGlmICh0aGlzLmlzUmVqZWN0ZWQoKSkge1xuICAgICAgICByZXQucmVqZWN0aW9uUmVhc29uID0gdGhpcy5fc2V0dGxlZFZhbHVlO1xuICAgICAgICByZXQuaXNSZWplY3RlZCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5hbGwgPSBmdW5jdGlvbiBQcm9taXNlJGFsbCgpIHtcbiAgICByZXR1cm4gUHJvbWlzZSRfYWxsKHRoaXMsIHRydWUpO1xufTtcblxuXG5Qcm9taXNlLmlzID0gaXNQcm9taXNlO1xuXG5mdW5jdGlvbiBQcm9taXNlJF9hbGwocHJvbWlzZXMsIHVzZUJvdW5kKSB7XG4gICAgcmV0dXJuIFByb21pc2UkX0NyZWF0ZVByb21pc2VBcnJheShcbiAgICAgICAgcHJvbWlzZXMsXG4gICAgICAgIFByb21pc2VBcnJheSxcbiAgICAgICAgdXNlQm91bmQgPT09IHRydWUgJiYgcHJvbWlzZXMuX2lzQm91bmQoKVxuICAgICAgICAgICAgPyBwcm9taXNlcy5fYm91bmRUb1xuICAgICAgICAgICAgOiB2b2lkIDBcbiAgICkucHJvbWlzZSgpO1xufVxuUHJvbWlzZS5hbGwgPSBmdW5jdGlvbiBQcm9taXNlJEFsbChwcm9taXNlcykge1xuICAgIHJldHVybiBQcm9taXNlJF9hbGwocHJvbWlzZXMsIGZhbHNlKTtcbn07XG5cblByb21pc2Uuam9pbiA9IGZ1bmN0aW9uIFByb21pc2UkSm9pbigpIHtcbiAgICB2YXIgJF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoO3ZhciBhcmdzID0gbmV3IEFycmF5KCRfbGVuKTsgZm9yKHZhciAkX2kgPSAwOyAkX2kgPCAkX2xlbjsgKyskX2kpIHthcmdzWyRfaV0gPSBhcmd1bWVudHNbJF9pXTt9XG4gICAgcmV0dXJuIFByb21pc2UkX0NyZWF0ZVByb21pc2VBcnJheShhcmdzLCBQcm9taXNlQXJyYXksIHZvaWQgMCkucHJvbWlzZSgpO1xufTtcblxuUHJvbWlzZS5yZXNvbHZlID0gUHJvbWlzZS5mdWxmaWxsZWQgPVxuZnVuY3Rpb24gUHJvbWlzZSRSZXNvbHZlKHZhbHVlKSB7XG4gICAgdmFyIHJldCA9IG5ldyBQcm9taXNlKElOVEVSTkFMKTtcbiAgICByZXQuX3NldFRyYWNlKHZvaWQgMCk7XG4gICAgaWYgKHJldC5fdHJ5Rm9sbG93KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cbiAgICByZXQuX2NsZWFuVmFsdWVzKCk7XG4gICAgcmV0Ll9zZXRGdWxmaWxsZWQoKTtcbiAgICByZXQuX3NldHRsZWRWYWx1ZSA9IHZhbHVlO1xuICAgIHJldHVybiByZXQ7XG59O1xuXG5Qcm9taXNlLnJlamVjdCA9IFByb21pc2UucmVqZWN0ZWQgPSBmdW5jdGlvbiBQcm9taXNlJFJlamVjdChyZWFzb24pIHtcbiAgICB2YXIgcmV0ID0gbmV3IFByb21pc2UoSU5URVJOQUwpO1xuICAgIHJldC5fc2V0VHJhY2Uodm9pZCAwKTtcbiAgICBtYXJrQXNPcmlnaW5hdGluZ0Zyb21SZWplY3Rpb24ocmVhc29uKTtcbiAgICByZXQuX2NsZWFuVmFsdWVzKCk7XG4gICAgcmV0Ll9zZXRSZWplY3RlZCgpO1xuICAgIHJldC5fc2V0dGxlZFZhbHVlID0gcmVhc29uO1xuICAgIGlmICghY2FuQXR0YWNoKHJlYXNvbikpIHtcbiAgICAgICAgdmFyIHRyYWNlID0gbmV3IEVycm9yKHJlYXNvbiArIFwiXCIpO1xuICAgICAgICByZXQuX3NldENhcnJpZWRTdGFja1RyYWNlKHRyYWNlKTtcbiAgICB9XG4gICAgcmV0Ll9lbnN1cmVQb3NzaWJsZVJlamVjdGlvbkhhbmRsZWQoKTtcbiAgICByZXR1cm4gcmV0O1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiBQcm9taXNlJF9lcnJvcihmbikge1xuICAgIHJldHVybiB0aGlzLmNhdWdodChvcmlnaW5hdGVzRnJvbVJlamVjdGlvbiwgZm4pO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3Jlc29sdmVGcm9tU3luY1ZhbHVlID1cbmZ1bmN0aW9uIFByb21pc2UkX3Jlc29sdmVGcm9tU3luY1ZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSBlcnJvck9iaikge1xuICAgICAgICB0aGlzLl9jbGVhblZhbHVlcygpO1xuICAgICAgICB0aGlzLl9zZXRSZWplY3RlZCgpO1xuICAgICAgICB0aGlzLl9zZXR0bGVkVmFsdWUgPSB2YWx1ZS5lO1xuICAgICAgICB0aGlzLl9lbnN1cmVQb3NzaWJsZVJlamVjdGlvbkhhbmRsZWQoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciBtYXliZVByb21pc2UgPSBQcm9taXNlLl9jYXN0KHZhbHVlLCB2b2lkIDApO1xuICAgICAgICBpZiAobWF5YmVQcm9taXNlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICAgICAgdGhpcy5fZm9sbG93KG1heWJlUHJvbWlzZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9jbGVhblZhbHVlcygpO1xuICAgICAgICAgICAgdGhpcy5fc2V0RnVsZmlsbGVkKCk7XG4gICAgICAgICAgICB0aGlzLl9zZXR0bGVkVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cblByb21pc2UubWV0aG9kID0gZnVuY3Rpb24gUHJvbWlzZSRfTWV0aG9kKGZuKSB7XG4gICAgaWYgKHR5cGVvZiBmbiAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJmbiBtdXN0IGJlIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiBQcm9taXNlJF9tZXRob2QoKSB7XG4gICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgc3dpdGNoKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOiB2YWx1ZSA9IHRyeUNhdGNoMShmbiwgdGhpcywgdm9pZCAwKTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMTogdmFsdWUgPSB0cnlDYXRjaDEoZm4sIHRoaXMsIGFyZ3VtZW50c1swXSk7IGJyZWFrO1xuICAgICAgICBjYXNlIDI6IHZhbHVlID0gdHJ5Q2F0Y2gyKGZuLCB0aGlzLCBhcmd1bWVudHNbMF0sIGFyZ3VtZW50c1sxXSk7IGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdmFyICRfbGVuID0gYXJndW1lbnRzLmxlbmd0aDt2YXIgYXJncyA9IG5ldyBBcnJheSgkX2xlbik7IGZvcih2YXIgJF9pID0gMDsgJF9pIDwgJF9sZW47ICsrJF9pKSB7YXJnc1skX2ldID0gYXJndW1lbnRzWyRfaV07fVxuICAgICAgICAgICAgdmFsdWUgPSB0cnlDYXRjaEFwcGx5KGZuLCBhcmdzLCB0aGlzKTsgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJldCA9IG5ldyBQcm9taXNlKElOVEVSTkFMKTtcbiAgICAgICAgcmV0Ll9zZXRUcmFjZSh2b2lkIDApO1xuICAgICAgICByZXQuX3Jlc29sdmVGcm9tU3luY1ZhbHVlKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9O1xufTtcblxuUHJvbWlzZS5hdHRlbXB0ID0gUHJvbWlzZVtcInRyeVwiXSA9IGZ1bmN0aW9uIFByb21pc2UkX1RyeShmbiwgYXJncywgY3R4KSB7XG4gICAgaWYgKHR5cGVvZiBmbiAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBhcGlSZWplY3Rpb24oXCJmbiBtdXN0IGJlIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICAgIHZhciB2YWx1ZSA9IGlzQXJyYXkoYXJncylcbiAgICAgICAgPyB0cnlDYXRjaEFwcGx5KGZuLCBhcmdzLCBjdHgpXG4gICAgICAgIDogdHJ5Q2F0Y2gxKGZuLCBjdHgsIGFyZ3MpO1xuXG4gICAgdmFyIHJldCA9IG5ldyBQcm9taXNlKElOVEVSTkFMKTtcbiAgICByZXQuX3NldFRyYWNlKHZvaWQgMCk7XG4gICAgcmV0Ll9yZXNvbHZlRnJvbVN5bmNWYWx1ZSh2YWx1ZSk7XG4gICAgcmV0dXJuIHJldDtcbn07XG5cblByb21pc2UuZGVmZXIgPSBQcm9taXNlLnBlbmRpbmcgPSBmdW5jdGlvbiBQcm9taXNlJERlZmVyKCkge1xuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoSU5URVJOQUwpO1xuICAgIHByb21pc2UuX3NldFRyYWNlKHZvaWQgMCk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlUmVzb2x2ZXIocHJvbWlzZSk7XG59O1xuXG5Qcm9taXNlLmJpbmQgPSBmdW5jdGlvbiBQcm9taXNlJEJpbmQodGhpc0FyZykge1xuICAgIHZhciByZXQgPSBuZXcgUHJvbWlzZShJTlRFUk5BTCk7XG4gICAgcmV0Ll9zZXRUcmFjZSh2b2lkIDApO1xuICAgIHJldC5fc2V0RnVsZmlsbGVkKCk7XG4gICAgcmV0Ll9zZXRCb3VuZFRvKHRoaXNBcmcpO1xuICAgIHJldHVybiByZXQ7XG59O1xuXG5Qcm9taXNlLmNhc3QgPSBmdW5jdGlvbiBQcm9taXNlJF9DYXN0KG9iaikge1xuICAgIHZhciByZXQgPSBQcm9taXNlLl9jYXN0KG9iaiwgdm9pZCAwKTtcbiAgICBpZiAoIShyZXQgaW5zdGFuY2VvZiBQcm9taXNlKSkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJldCk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59O1xuXG5Qcm9taXNlLm9uUG9zc2libHlVbmhhbmRsZWRSZWplY3Rpb24gPVxuZnVuY3Rpb24gUHJvbWlzZSRPblBvc3NpYmx5VW5oYW5kbGVkUmVqZWN0aW9uKGZuKSB7XG4gICAgICAgIENhcHR1cmVkVHJhY2UucG9zc2libHlVbmhhbmRsZWRSZWplY3Rpb24gPSB0eXBlb2YgZm4gPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZm4gOiB2b2lkIDA7XG59O1xuXG52YXIgdW5oYW5kbGVkUmVqZWN0aW9uSGFuZGxlZDtcblByb21pc2Uub25VbmhhbmRsZWRSZWplY3Rpb25IYW5kbGVkID1cbmZ1bmN0aW9uIFByb21pc2Ukb25VbmhhbmRsZWRSZWplY3Rpb25IYW5kbGVkKGZuKSB7XG4gICAgdW5oYW5kbGVkUmVqZWN0aW9uSGFuZGxlZCA9IHR5cGVvZiBmbiA9PT0gXCJmdW5jdGlvblwiID8gZm4gOiB2b2lkIDA7XG59O1xuXG52YXIgZGVidWdnaW5nID0gZmFsc2UgfHwgISEoXG4gICAgdHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICB0eXBlb2YgcHJvY2Vzcy5leGVjUGF0aCA9PT0gXCJzdHJpbmdcIiAmJlxuICAgIHR5cGVvZiBwcm9jZXNzLmVudiA9PT0gXCJvYmplY3RcIiAmJlxuICAgIChwcm9jZXNzLmVudltcIkJMVUVCSVJEX0RFQlVHXCJdIHx8XG4gICAgICAgIHByb2Nlc3MuZW52W1wiTk9ERV9FTlZcIl0gPT09IFwiZGV2ZWxvcG1lbnRcIilcbik7XG5cblxuUHJvbWlzZS5sb25nU3RhY2tUcmFjZXMgPSBmdW5jdGlvbiBQcm9taXNlJExvbmdTdGFja1RyYWNlcygpIHtcbiAgICBpZiAoYXN5bmMuaGF2ZUl0ZW1zUXVldWVkKCkgJiZcbiAgICAgICAgZGVidWdnaW5nID09PSBmYWxzZVxuICAgKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImNhbm5vdCBlbmFibGUgbG9uZyBzdGFjayB0cmFjZXMgYWZ0ZXIgcHJvbWlzZXMgaGF2ZSBiZWVuIGNyZWF0ZWRcIik7XG4gICAgfVxuICAgIGRlYnVnZ2luZyA9IENhcHR1cmVkVHJhY2UuaXNTdXBwb3J0ZWQoKTtcbn07XG5cblByb21pc2UuaGFzTG9uZ1N0YWNrVHJhY2VzID0gZnVuY3Rpb24gUHJvbWlzZSRIYXNMb25nU3RhY2tUcmFjZXMoKSB7XG4gICAgcmV0dXJuIGRlYnVnZ2luZyAmJiBDYXB0dXJlZFRyYWNlLmlzU3VwcG9ydGVkKCk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fc2V0UHJveHlIYW5kbGVycyA9XG5mdW5jdGlvbiBQcm9taXNlJF9zZXRQcm94eUhhbmRsZXJzKHJlY2VpdmVyLCBwcm9taXNlU2xvdFZhbHVlKSB7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5fbGVuZ3RoKCk7XG5cbiAgICBpZiAoaW5kZXggPj0gNTI0Mjg3IC0gNSkge1xuICAgICAgICBpbmRleCA9IDA7XG4gICAgICAgIHRoaXMuX3NldExlbmd0aCgwKTtcbiAgICB9XG4gICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgIHRoaXMuX3Byb21pc2UwID0gcHJvbWlzZVNsb3RWYWx1ZTtcbiAgICAgICAgdGhpcy5fcmVjZWl2ZXIwID0gcmVjZWl2ZXI7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgaSA9IGluZGV4IC0gNTtcbiAgICAgICAgdGhpc1tpICsgM10gPSBwcm9taXNlU2xvdFZhbHVlO1xuICAgICAgICB0aGlzW2kgKyA0XSA9IHJlY2VpdmVyO1xuICAgICAgICB0aGlzW2kgKyAwXSA9XG4gICAgICAgIHRoaXNbaSArIDFdID1cbiAgICAgICAgdGhpc1tpICsgMl0gPSB2b2lkIDA7XG4gICAgfVxuICAgIHRoaXMuX3NldExlbmd0aChpbmRleCArIDUpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3Byb3h5UHJvbWlzZUFycmF5ID1cbmZ1bmN0aW9uIFByb21pc2UkX3Byb3h5UHJvbWlzZUFycmF5KHByb21pc2VBcnJheSwgaW5kZXgpIHtcbiAgICB0aGlzLl9zZXRQcm94eUhhbmRsZXJzKHByb21pc2VBcnJheSwgaW5kZXgpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3Byb3h5UHJvbWlzZSA9IGZ1bmN0aW9uIFByb21pc2UkX3Byb3h5UHJvbWlzZShwcm9taXNlKSB7XG4gICAgcHJvbWlzZS5fc2V0UHJveGllZCgpO1xuICAgIHRoaXMuX3NldFByb3h5SGFuZGxlcnMocHJvbWlzZSwgLTEpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3RoZW4gPVxuZnVuY3Rpb24gUHJvbWlzZSRfdGhlbihcbiAgICBkaWRGdWxmaWxsLFxuICAgIGRpZFJlamVjdCxcbiAgICBkaWRQcm9ncmVzcyxcbiAgICByZWNlaXZlcixcbiAgICBpbnRlcm5hbERhdGFcbikge1xuICAgIHZhciBoYXZlSW50ZXJuYWxEYXRhID0gaW50ZXJuYWxEYXRhICE9PSB2b2lkIDA7XG4gICAgdmFyIHJldCA9IGhhdmVJbnRlcm5hbERhdGEgPyBpbnRlcm5hbERhdGEgOiBuZXcgUHJvbWlzZShJTlRFUk5BTCk7XG5cbiAgICBpZiAoZGVidWdnaW5nICYmICFoYXZlSW50ZXJuYWxEYXRhKSB7XG4gICAgICAgIHZhciBoYXZlU2FtZUNvbnRleHQgPSB0aGlzLl9wZWVrQ29udGV4dCgpID09PSB0aGlzLl90cmFjZVBhcmVudDtcbiAgICAgICAgcmV0Ll90cmFjZVBhcmVudCA9IGhhdmVTYW1lQ29udGV4dCA/IHRoaXMuX3RyYWNlUGFyZW50IDogdGhpcztcbiAgICAgICAgcmV0Ll9zZXRUcmFjZSh0aGlzKTtcbiAgICB9XG5cbiAgICBpZiAoIWhhdmVJbnRlcm5hbERhdGEgJiYgdGhpcy5faXNCb3VuZCgpKSB7XG4gICAgICAgIHJldC5fc2V0Qm91bmRUbyh0aGlzLl9ib3VuZFRvKTtcbiAgICB9XG5cbiAgICB2YXIgY2FsbGJhY2tJbmRleCA9XG4gICAgICAgIHRoaXMuX2FkZENhbGxiYWNrcyhkaWRGdWxmaWxsLCBkaWRSZWplY3QsIGRpZFByb2dyZXNzLCByZXQsIHJlY2VpdmVyKTtcblxuICAgIGlmICghaGF2ZUludGVybmFsRGF0YSAmJiB0aGlzLl9jYW5jZWxsYWJsZSgpKSB7XG4gICAgICAgIHJldC5fc2V0Q2FuY2VsbGFibGUoKTtcbiAgICAgICAgcmV0Ll9jYW5jZWxsYXRpb25QYXJlbnQgPSB0aGlzO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzUmVzb2x2ZWQoKSkge1xuICAgICAgICBhc3luYy5pbnZva2UodGhpcy5fcXVldWVTZXR0bGVBdCwgdGhpcywgY2FsbGJhY2tJbmRleCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldDtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9sZW5ndGggPSBmdW5jdGlvbiBQcm9taXNlJF9sZW5ndGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2JpdEZpZWxkICYgNTI0Mjg3O1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2lzRm9sbG93aW5nT3JGdWxmaWxsZWRPclJlamVjdGVkID1cbmZ1bmN0aW9uIFByb21pc2UkX2lzRm9sbG93aW5nT3JGdWxmaWxsZWRPclJlamVjdGVkKCkge1xuICAgIHJldHVybiAodGhpcy5fYml0RmllbGQgJiA5Mzk1MjQwOTYpID4gMDtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9pc0ZvbGxvd2luZyA9IGZ1bmN0aW9uIFByb21pc2UkX2lzRm9sbG93aW5nKCkge1xuICAgIHJldHVybiAodGhpcy5fYml0RmllbGQgJiA1MzY4NzA5MTIpID09PSA1MzY4NzA5MTI7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fc2V0TGVuZ3RoID0gZnVuY3Rpb24gUHJvbWlzZSRfc2V0TGVuZ3RoKGxlbikge1xuICAgIHRoaXMuX2JpdEZpZWxkID0gKHRoaXMuX2JpdEZpZWxkICYgLTUyNDI4OCkgfFxuICAgICAgICAobGVuICYgNTI0Mjg3KTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9zZXRGdWxmaWxsZWQgPSBmdW5jdGlvbiBQcm9taXNlJF9zZXRGdWxmaWxsZWQoKSB7XG4gICAgdGhpcy5fYml0RmllbGQgPSB0aGlzLl9iaXRGaWVsZCB8IDI2ODQzNTQ1Njtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9zZXRSZWplY3RlZCA9IGZ1bmN0aW9uIFByb21pc2UkX3NldFJlamVjdGVkKCkge1xuICAgIHRoaXMuX2JpdEZpZWxkID0gdGhpcy5fYml0RmllbGQgfCAxMzQyMTc3Mjg7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fc2V0Rm9sbG93aW5nID0gZnVuY3Rpb24gUHJvbWlzZSRfc2V0Rm9sbG93aW5nKCkge1xuICAgIHRoaXMuX2JpdEZpZWxkID0gdGhpcy5fYml0RmllbGQgfCA1MzY4NzA5MTI7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fc2V0SXNGaW5hbCA9IGZ1bmN0aW9uIFByb21pc2UkX3NldElzRmluYWwoKSB7XG4gICAgdGhpcy5fYml0RmllbGQgPSB0aGlzLl9iaXRGaWVsZCB8IDMzNTU0NDMyO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2lzRmluYWwgPSBmdW5jdGlvbiBQcm9taXNlJF9pc0ZpbmFsKCkge1xuICAgIHJldHVybiAodGhpcy5fYml0RmllbGQgJiAzMzU1NDQzMikgPiAwO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2NhbmNlbGxhYmxlID0gZnVuY3Rpb24gUHJvbWlzZSRfY2FuY2VsbGFibGUoKSB7XG4gICAgcmV0dXJuICh0aGlzLl9iaXRGaWVsZCAmIDY3MTA4ODY0KSA+IDA7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fc2V0Q2FuY2VsbGFibGUgPSBmdW5jdGlvbiBQcm9taXNlJF9zZXRDYW5jZWxsYWJsZSgpIHtcbiAgICB0aGlzLl9iaXRGaWVsZCA9IHRoaXMuX2JpdEZpZWxkIHwgNjcxMDg4NjQ7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fdW5zZXRDYW5jZWxsYWJsZSA9IGZ1bmN0aW9uIFByb21pc2UkX3Vuc2V0Q2FuY2VsbGFibGUoKSB7XG4gICAgdGhpcy5fYml0RmllbGQgPSB0aGlzLl9iaXRGaWVsZCAmICh+NjcxMDg4NjQpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3NldFJlamVjdGlvbklzVW5oYW5kbGVkID1cbmZ1bmN0aW9uIFByb21pc2UkX3NldFJlamVjdGlvbklzVW5oYW5kbGVkKCkge1xuICAgIHRoaXMuX2JpdEZpZWxkID0gdGhpcy5fYml0RmllbGQgfCAyMDk3MTUyO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3Vuc2V0UmVqZWN0aW9uSXNVbmhhbmRsZWQgPVxuZnVuY3Rpb24gUHJvbWlzZSRfdW5zZXRSZWplY3Rpb25Jc1VuaGFuZGxlZCgpIHtcbiAgICB0aGlzLl9iaXRGaWVsZCA9IHRoaXMuX2JpdEZpZWxkICYgKH4yMDk3MTUyKTtcbiAgICBpZiAodGhpcy5faXNVbmhhbmRsZWRSZWplY3Rpb25Ob3RpZmllZCgpKSB7XG4gICAgICAgIHRoaXMuX3Vuc2V0VW5oYW5kbGVkUmVqZWN0aW9uSXNOb3RpZmllZCgpO1xuICAgICAgICB0aGlzLl9ub3RpZnlVbmhhbmRsZWRSZWplY3Rpb25Jc0hhbmRsZWQoKTtcbiAgICB9XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5faXNSZWplY3Rpb25VbmhhbmRsZWQgPVxuZnVuY3Rpb24gUHJvbWlzZSRfaXNSZWplY3Rpb25VbmhhbmRsZWQoKSB7XG4gICAgcmV0dXJuICh0aGlzLl9iaXRGaWVsZCAmIDIwOTcxNTIpID4gMDtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9zZXRVbmhhbmRsZWRSZWplY3Rpb25Jc05vdGlmaWVkID1cbmZ1bmN0aW9uIFByb21pc2UkX3NldFVuaGFuZGxlZFJlamVjdGlvbklzTm90aWZpZWQoKSB7XG4gICAgdGhpcy5fYml0RmllbGQgPSB0aGlzLl9iaXRGaWVsZCB8IDUyNDI4ODtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl91bnNldFVuaGFuZGxlZFJlamVjdGlvbklzTm90aWZpZWQgPVxuZnVuY3Rpb24gUHJvbWlzZSRfdW5zZXRVbmhhbmRsZWRSZWplY3Rpb25Jc05vdGlmaWVkKCkge1xuICAgIHRoaXMuX2JpdEZpZWxkID0gdGhpcy5fYml0RmllbGQgJiAofjUyNDI4OCk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5faXNVbmhhbmRsZWRSZWplY3Rpb25Ob3RpZmllZCA9XG5mdW5jdGlvbiBQcm9taXNlJF9pc1VuaGFuZGxlZFJlamVjdGlvbk5vdGlmaWVkKCkge1xuICAgIHJldHVybiAodGhpcy5fYml0RmllbGQgJiA1MjQyODgpID4gMDtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9zZXRDYXJyaWVkU3RhY2tUcmFjZSA9XG5mdW5jdGlvbiBQcm9taXNlJF9zZXRDYXJyaWVkU3RhY2tUcmFjZShjYXB0dXJlZFRyYWNlKSB7XG4gICAgdGhpcy5fYml0RmllbGQgPSB0aGlzLl9iaXRGaWVsZCB8IDEwNDg1NzY7XG4gICAgdGhpcy5fZnVsZmlsbG1lbnRIYW5kbGVyMCA9IGNhcHR1cmVkVHJhY2U7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fdW5zZXRDYXJyaWVkU3RhY2tUcmFjZSA9XG5mdW5jdGlvbiBQcm9taXNlJF91bnNldENhcnJpZWRTdGFja1RyYWNlKCkge1xuICAgIHRoaXMuX2JpdEZpZWxkID0gdGhpcy5fYml0RmllbGQgJiAofjEwNDg1NzYpO1xuICAgIHRoaXMuX2Z1bGZpbGxtZW50SGFuZGxlcjAgPSB2b2lkIDA7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5faXNDYXJyeWluZ1N0YWNrVHJhY2UgPVxuZnVuY3Rpb24gUHJvbWlzZSRfaXNDYXJyeWluZ1N0YWNrVHJhY2UoKSB7XG4gICAgcmV0dXJuICh0aGlzLl9iaXRGaWVsZCAmIDEwNDg1NzYpID4gMDtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9nZXRDYXJyaWVkU3RhY2tUcmFjZSA9XG5mdW5jdGlvbiBQcm9taXNlJF9nZXRDYXJyaWVkU3RhY2tUcmFjZSgpIHtcbiAgICByZXR1cm4gdGhpcy5faXNDYXJyeWluZ1N0YWNrVHJhY2UoKVxuICAgICAgICA/IHRoaXMuX2Z1bGZpbGxtZW50SGFuZGxlcjBcbiAgICAgICAgOiB2b2lkIDA7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fcmVjZWl2ZXJBdCA9IGZ1bmN0aW9uIFByb21pc2UkX3JlY2VpdmVyQXQoaW5kZXgpIHtcbiAgICB2YXIgcmV0O1xuICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICByZXQgPSB0aGlzLl9yZWNlaXZlcjA7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXQgPSB0aGlzW2luZGV4ICsgNCAtIDVdO1xuICAgIH1cbiAgICBpZiAodGhpcy5faXNCb3VuZCgpICYmIHJldCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ib3VuZFRvO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3Byb21pc2VBdCA9IGZ1bmN0aW9uIFByb21pc2UkX3Byb21pc2VBdChpbmRleCkge1xuICAgIGlmIChpbmRleCA9PT0gMCkgcmV0dXJuIHRoaXMuX3Byb21pc2UwO1xuICAgIHJldHVybiB0aGlzW2luZGV4ICsgMyAtIDVdO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2Z1bGZpbGxtZW50SGFuZGxlckF0ID1cbmZ1bmN0aW9uIFByb21pc2UkX2Z1bGZpbGxtZW50SGFuZGxlckF0KGluZGV4KSB7XG4gICAgaWYgKGluZGV4ID09PSAwKSByZXR1cm4gdGhpcy5fZnVsZmlsbG1lbnRIYW5kbGVyMDtcbiAgICByZXR1cm4gdGhpc1tpbmRleCArIDAgLSA1XTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9yZWplY3Rpb25IYW5kbGVyQXQgPVxuZnVuY3Rpb24gUHJvbWlzZSRfcmVqZWN0aW9uSGFuZGxlckF0KGluZGV4KSB7XG4gICAgaWYgKGluZGV4ID09PSAwKSByZXR1cm4gdGhpcy5fcmVqZWN0aW9uSGFuZGxlcjA7XG4gICAgcmV0dXJuIHRoaXNbaW5kZXggKyAxIC0gNV07XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fdW5zZXRBdCA9IGZ1bmN0aW9uIFByb21pc2UkX3Vuc2V0QXQoaW5kZXgpIHtcbiAgICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgIHRoaXMuX3JlamVjdGlvbkhhbmRsZXIwID1cbiAgICAgICAgdGhpcy5fcHJvZ3Jlc3NIYW5kbGVyMCA9XG4gICAgICAgIHRoaXMuX3Byb21pc2UwID1cbiAgICAgICAgdGhpcy5fcmVjZWl2ZXIwID0gdm9pZCAwO1xuICAgICAgICBpZiAoIXRoaXMuX2lzQ2FycnlpbmdTdGFja1RyYWNlKCkpIHtcbiAgICAgICAgICAgIHRoaXMuX2Z1bGZpbGxtZW50SGFuZGxlcjAgPSB2b2lkIDA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRoaXNbaW5kZXggLSA1ICsgMF0gPVxuICAgICAgICB0aGlzW2luZGV4IC0gNSArIDFdID1cbiAgICAgICAgdGhpc1tpbmRleCAtIDUgKyAyXSA9XG4gICAgICAgIHRoaXNbaW5kZXggLSA1ICsgM10gPVxuICAgICAgICB0aGlzW2luZGV4IC0gNSArIDRdID0gdm9pZCAwO1xuICAgIH1cbn07XG5cblByb21pc2UucHJvdG90eXBlLl9yZXNvbHZlRnJvbVJlc29sdmVyID1cbmZ1bmN0aW9uIFByb21pc2UkX3Jlc29sdmVGcm9tUmVzb2x2ZXIocmVzb2x2ZXIpIHtcbiAgICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gICAgdGhpcy5fc2V0VHJhY2Uodm9pZCAwKTtcbiAgICB0aGlzLl9wdXNoQ29udGV4dCgpO1xuXG4gICAgZnVuY3Rpb24gUHJvbWlzZSRfcmVzb2x2ZXIodmFsKSB7XG4gICAgICAgIGlmIChwcm9taXNlLl90cnlGb2xsb3codmFsKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHByb21pc2UuX2Z1bGZpbGwodmFsKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gUHJvbWlzZSRfcmVqZWN0ZXIodmFsKSB7XG4gICAgICAgIHZhciB0cmFjZSA9IGNhbkF0dGFjaCh2YWwpID8gdmFsIDogbmV3IEVycm9yKHZhbCArIFwiXCIpO1xuICAgICAgICBwcm9taXNlLl9hdHRhY2hFeHRyYVRyYWNlKHRyYWNlKTtcbiAgICAgICAgbWFya0FzT3JpZ2luYXRpbmdGcm9tUmVqZWN0aW9uKHZhbCk7XG4gICAgICAgIHByb21pc2UuX3JlamVjdCh2YWwsIHRyYWNlID09PSB2YWwgPyB2b2lkIDAgOiB0cmFjZSk7XG4gICAgfVxuICAgIHZhciByID0gdHJ5Q2F0Y2gyKHJlc29sdmVyLCB2b2lkIDAsIFByb21pc2UkX3Jlc29sdmVyLCBQcm9taXNlJF9yZWplY3Rlcik7XG4gICAgdGhpcy5fcG9wQ29udGV4dCgpO1xuXG4gICAgaWYgKHIgIT09IHZvaWQgMCAmJiByID09PSBlcnJvck9iaikge1xuICAgICAgICB2YXIgZSA9IHIuZTtcbiAgICAgICAgdmFyIHRyYWNlID0gY2FuQXR0YWNoKGUpID8gZSA6IG5ldyBFcnJvcihlICsgXCJcIik7XG4gICAgICAgIHByb21pc2UuX3JlamVjdChlLCB0cmFjZSk7XG4gICAgfVxufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2FkZENhbGxiYWNrcyA9IGZ1bmN0aW9uIFByb21pc2UkX2FkZENhbGxiYWNrcyhcbiAgICBmdWxmaWxsLFxuICAgIHJlamVjdCxcbiAgICBwcm9ncmVzcyxcbiAgICBwcm9taXNlLFxuICAgIHJlY2VpdmVyXG4pIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLl9sZW5ndGgoKTtcblxuICAgIGlmIChpbmRleCA+PSA1MjQyODcgLSA1KSB7XG4gICAgICAgIGluZGV4ID0gMDtcbiAgICAgICAgdGhpcy5fc2V0TGVuZ3RoKDApO1xuICAgIH1cblxuICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICB0aGlzLl9wcm9taXNlMCA9IHByb21pc2U7XG4gICAgICAgIGlmIChyZWNlaXZlciAhPT0gdm9pZCAwKSB0aGlzLl9yZWNlaXZlcjAgPSByZWNlaXZlcjtcbiAgICAgICAgaWYgKHR5cGVvZiBmdWxmaWxsID09PSBcImZ1bmN0aW9uXCIgJiYgIXRoaXMuX2lzQ2FycnlpbmdTdGFja1RyYWNlKCkpXG4gICAgICAgICAgICB0aGlzLl9mdWxmaWxsbWVudEhhbmRsZXIwID0gZnVsZmlsbDtcbiAgICAgICAgaWYgKHR5cGVvZiByZWplY3QgPT09IFwiZnVuY3Rpb25cIikgdGhpcy5fcmVqZWN0aW9uSGFuZGxlcjAgPSByZWplY3Q7XG4gICAgICAgIGlmICh0eXBlb2YgcHJvZ3Jlc3MgPT09IFwiZnVuY3Rpb25cIikgdGhpcy5fcHJvZ3Jlc3NIYW5kbGVyMCA9IHByb2dyZXNzO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIGkgPSBpbmRleCAtIDU7XG4gICAgICAgIHRoaXNbaSArIDNdID0gcHJvbWlzZTtcbiAgICAgICAgdGhpc1tpICsgNF0gPSByZWNlaXZlcjtcbiAgICAgICAgdGhpc1tpICsgMF0gPSB0eXBlb2YgZnVsZmlsbCA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZnVsZmlsbCA6IHZvaWQgMDtcbiAgICAgICAgdGhpc1tpICsgMV0gPSB0eXBlb2YgcmVqZWN0ID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyByZWplY3QgOiB2b2lkIDA7XG4gICAgICAgIHRoaXNbaSArIDJdID0gdHlwZW9mIHByb2dyZXNzID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBwcm9ncmVzcyA6IHZvaWQgMDtcbiAgICB9XG4gICAgdGhpcy5fc2V0TGVuZ3RoKGluZGV4ICsgNSk7XG4gICAgcmV0dXJuIGluZGV4O1xufTtcblxuXG5cblByb21pc2UucHJvdG90eXBlLl9zZXRCb3VuZFRvID0gZnVuY3Rpb24gUHJvbWlzZSRfc2V0Qm91bmRUbyhvYmopIHtcbiAgICBpZiAob2JqICE9PSB2b2lkIDApIHtcbiAgICAgICAgdGhpcy5fYml0RmllbGQgPSB0aGlzLl9iaXRGaWVsZCB8IDgzODg2MDg7XG4gICAgICAgIHRoaXMuX2JvdW5kVG8gPSBvYmo7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aGlzLl9iaXRGaWVsZCA9IHRoaXMuX2JpdEZpZWxkICYgKH44Mzg4NjA4KTtcbiAgICB9XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5faXNCb3VuZCA9IGZ1bmN0aW9uIFByb21pc2UkX2lzQm91bmQoKSB7XG4gICAgcmV0dXJuICh0aGlzLl9iaXRGaWVsZCAmIDgzODg2MDgpID09PSA4Mzg4NjA4O1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3NwcmVhZFNsb3dDYXNlID1cbmZ1bmN0aW9uIFByb21pc2UkX3NwcmVhZFNsb3dDYXNlKHRhcmdldEZuLCBwcm9taXNlLCB2YWx1ZXMsIGJvdW5kVG8pIHtcbiAgICB2YXIgcHJvbWlzZUZvckFsbCA9XG4gICAgICAgICAgICBQcm9taXNlJF9DcmVhdGVQcm9taXNlQXJyYXlcbiAgICAgICAgICAgICAgICAodmFsdWVzLCBQcm9taXNlQXJyYXksIGJvdW5kVG8pXG4gICAgICAgICAgICAucHJvbWlzZSgpXG4gICAgICAgICAgICAuX3RoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldEZuLmFwcGx5KGJvdW5kVG8sIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9LCB2b2lkIDAsIHZvaWQgMCwgQVBQTFksIHZvaWQgMCk7XG5cbiAgICBwcm9taXNlLl9mb2xsb3cocHJvbWlzZUZvckFsbCk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fY2FsbFNwcmVhZCA9XG5mdW5jdGlvbiBQcm9taXNlJF9jYWxsU3ByZWFkKGhhbmRsZXIsIHByb21pc2UsIHZhbHVlLCBsb2NhbERlYnVnZ2luZykge1xuICAgIHZhciBib3VuZFRvID0gdGhpcy5faXNCb3VuZCgpID8gdGhpcy5fYm91bmRUbyA6IHZvaWQgMDtcbiAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHZhbHVlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICBpZiAoaXNQcm9taXNlKFByb21pc2UuX2Nhc3QodmFsdWVbaV0sIHZvaWQgMCkpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3ByZWFkU2xvd0Nhc2UoaGFuZGxlciwgcHJvbWlzZSwgdmFsdWUsIGJvdW5kVG8pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAobG9jYWxEZWJ1Z2dpbmcpIHByb21pc2UuX3B1c2hDb250ZXh0KCk7XG4gICAgcmV0dXJuIHRyeUNhdGNoQXBwbHkoaGFuZGxlciwgdmFsdWUsIGJvdW5kVG8pO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2NhbGxIYW5kbGVyID1cbmZ1bmN0aW9uIFByb21pc2UkX2NhbGxIYW5kbGVyKFxuICAgIGhhbmRsZXIsIHJlY2VpdmVyLCBwcm9taXNlLCB2YWx1ZSwgbG9jYWxEZWJ1Z2dpbmcpIHtcbiAgICB2YXIgeDtcbiAgICBpZiAocmVjZWl2ZXIgPT09IEFQUExZICYmICF0aGlzLmlzUmVqZWN0ZWQoKSkge1xuICAgICAgICB4ID0gdGhpcy5fY2FsbFNwcmVhZChoYW5kbGVyLCBwcm9taXNlLCB2YWx1ZSwgbG9jYWxEZWJ1Z2dpbmcpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKGxvY2FsRGVidWdnaW5nKSBwcm9taXNlLl9wdXNoQ29udGV4dCgpO1xuICAgICAgICB4ID0gdHJ5Q2F0Y2gxKGhhbmRsZXIsIHJlY2VpdmVyLCB2YWx1ZSk7XG4gICAgfVxuICAgIGlmIChsb2NhbERlYnVnZ2luZykgcHJvbWlzZS5fcG9wQ29udGV4dCgpO1xuICAgIHJldHVybiB4O1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3NldHRsZVByb21pc2VGcm9tSGFuZGxlciA9XG5mdW5jdGlvbiBQcm9taXNlJF9zZXR0bGVQcm9taXNlRnJvbUhhbmRsZXIoXG4gICAgaGFuZGxlciwgcmVjZWl2ZXIsIHZhbHVlLCBwcm9taXNlXG4pIHtcbiAgICBpZiAoIWlzUHJvbWlzZShwcm9taXNlKSkge1xuICAgICAgICBoYW5kbGVyLmNhbGwocmVjZWl2ZXIsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBsb2NhbERlYnVnZ2luZyA9IGRlYnVnZ2luZztcbiAgICB2YXIgeCA9IHRoaXMuX2NhbGxIYW5kbGVyKGhhbmRsZXIsIHJlY2VpdmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9taXNlLCB2YWx1ZSwgbG9jYWxEZWJ1Z2dpbmcpO1xuXG4gICAgaWYgKHByb21pc2UuX2lzRm9sbG93aW5nKCkpIHJldHVybjtcblxuICAgIGlmICh4ID09PSBlcnJvck9iaiB8fCB4ID09PSBwcm9taXNlIHx8IHggPT09IE5FWFRfRklMVEVSKSB7XG4gICAgICAgIHZhciBlcnIgPSB4ID09PSBwcm9taXNlXG4gICAgICAgICAgICAgICAgICAgID8gbWFrZVNlbGZSZXNvbHV0aW9uRXJyb3IoKVxuICAgICAgICAgICAgICAgICAgICA6IHguZTtcbiAgICAgICAgdmFyIHRyYWNlID0gY2FuQXR0YWNoKGVycikgPyBlcnIgOiBuZXcgRXJyb3IoZXJyICsgXCJcIik7XG4gICAgICAgIGlmICh4ICE9PSBORVhUX0ZJTFRFUikgcHJvbWlzZS5fYXR0YWNoRXh0cmFUcmFjZSh0cmFjZSk7XG4gICAgICAgIHByb21pc2UuX3JlamVjdFVuY2hlY2tlZChlcnIsIHRyYWNlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciBjYXN0VmFsdWUgPSBQcm9taXNlLl9jYXN0KHgsIHByb21pc2UpO1xuICAgICAgICBpZiAoaXNQcm9taXNlKGNhc3RWYWx1ZSkpIHtcbiAgICAgICAgICAgIGlmIChjYXN0VmFsdWUuaXNSZWplY3RlZCgpICYmXG4gICAgICAgICAgICAgICAgIWNhc3RWYWx1ZS5faXNDYXJyeWluZ1N0YWNrVHJhY2UoKSAmJlxuICAgICAgICAgICAgICAgICFjYW5BdHRhY2goY2FzdFZhbHVlLl9zZXR0bGVkVmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRyYWNlID0gbmV3IEVycm9yKGNhc3RWYWx1ZS5fc2V0dGxlZFZhbHVlICsgXCJcIik7XG4gICAgICAgICAgICAgICAgcHJvbWlzZS5fYXR0YWNoRXh0cmFUcmFjZSh0cmFjZSk7XG4gICAgICAgICAgICAgICAgY2FzdFZhbHVlLl9zZXRDYXJyaWVkU3RhY2tUcmFjZSh0cmFjZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcm9taXNlLl9mb2xsb3coY2FzdFZhbHVlKTtcbiAgICAgICAgICAgIGlmIChjYXN0VmFsdWUuX2NhbmNlbGxhYmxlKCkpIHtcbiAgICAgICAgICAgICAgICBwcm9taXNlLl9jYW5jZWxsYXRpb25QYXJlbnQgPSBjYXN0VmFsdWU7XG4gICAgICAgICAgICAgICAgcHJvbWlzZS5fc2V0Q2FuY2VsbGFibGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHByb21pc2UuX2Z1bGZpbGxVbmNoZWNrZWQoeCk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fZm9sbG93ID1cbmZ1bmN0aW9uIFByb21pc2UkX2ZvbGxvdyhwcm9taXNlKSB7XG4gICAgdGhpcy5fc2V0Rm9sbG93aW5nKCk7XG5cbiAgICBpZiAocHJvbWlzZS5pc1BlbmRpbmcoKSkge1xuICAgICAgICBpZiAocHJvbWlzZS5fY2FuY2VsbGFibGUoKSApIHtcbiAgICAgICAgICAgIHRoaXMuX2NhbmNlbGxhdGlvblBhcmVudCA9IHByb21pc2U7XG4gICAgICAgICAgICB0aGlzLl9zZXRDYW5jZWxsYWJsZSgpO1xuICAgICAgICB9XG4gICAgICAgIHByb21pc2UuX3Byb3h5UHJvbWlzZSh0aGlzKTtcbiAgICB9XG4gICAgZWxzZSBpZiAocHJvbWlzZS5pc0Z1bGZpbGxlZCgpKSB7XG4gICAgICAgIHRoaXMuX2Z1bGZpbGxVbmNoZWNrZWQocHJvbWlzZS5fc2V0dGxlZFZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRoaXMuX3JlamVjdFVuY2hlY2tlZChwcm9taXNlLl9zZXR0bGVkVmFsdWUsXG4gICAgICAgICAgICBwcm9taXNlLl9nZXRDYXJyaWVkU3RhY2tUcmFjZSgpKTtcbiAgICB9XG5cbiAgICBpZiAocHJvbWlzZS5faXNSZWplY3Rpb25VbmhhbmRsZWQoKSkgcHJvbWlzZS5fdW5zZXRSZWplY3Rpb25Jc1VuaGFuZGxlZCgpO1xuXG4gICAgaWYgKGRlYnVnZ2luZyAmJlxuICAgICAgICBwcm9taXNlLl90cmFjZVBhcmVudCA9PSBudWxsKSB7XG4gICAgICAgIHByb21pc2UuX3RyYWNlUGFyZW50ID0gdGhpcztcbiAgICB9XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fdHJ5Rm9sbG93ID1cbmZ1bmN0aW9uIFByb21pc2UkX3RyeUZvbGxvdyh2YWx1ZSkge1xuICAgIGlmICh0aGlzLl9pc0ZvbGxvd2luZ09yRnVsZmlsbGVkT3JSZWplY3RlZCgpIHx8XG4gICAgICAgIHZhbHVlID09PSB0aGlzKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIG1heWJlUHJvbWlzZSA9IFByb21pc2UuX2Nhc3QodmFsdWUsIHZvaWQgMCk7XG4gICAgaWYgKCFpc1Byb21pc2UobWF5YmVQcm9taXNlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMuX2ZvbGxvdyhtYXliZVByb21pc2UpO1xuICAgIHJldHVybiB0cnVlO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3Jlc2V0VHJhY2UgPSBmdW5jdGlvbiBQcm9taXNlJF9yZXNldFRyYWNlKCkge1xuICAgIGlmIChkZWJ1Z2dpbmcpIHtcbiAgICAgICAgdGhpcy5fdHJhY2UgPSBuZXcgQ2FwdHVyZWRUcmFjZSh0aGlzLl9wZWVrQ29udGV4dCgpID09PSB2b2lkIDApO1xuICAgIH1cbn07XG5cblByb21pc2UucHJvdG90eXBlLl9zZXRUcmFjZSA9IGZ1bmN0aW9uIFByb21pc2UkX3NldFRyYWNlKHBhcmVudCkge1xuICAgIGlmIChkZWJ1Z2dpbmcpIHtcbiAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLl9wZWVrQ29udGV4dCgpO1xuICAgICAgICB0aGlzLl90cmFjZVBhcmVudCA9IGNvbnRleHQ7XG4gICAgICAgIHZhciBpc1RvcExldmVsID0gY29udGV4dCA9PT0gdm9pZCAwO1xuICAgICAgICBpZiAocGFyZW50ICE9PSB2b2lkIDAgJiZcbiAgICAgICAgICAgIHBhcmVudC5fdHJhY2VQYXJlbnQgPT09IGNvbnRleHQpIHtcbiAgICAgICAgICAgIHRoaXMuX3RyYWNlID0gcGFyZW50Ll90cmFjZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3RyYWNlID0gbmV3IENhcHR1cmVkVHJhY2UoaXNUb3BMZXZlbCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fYXR0YWNoRXh0cmFUcmFjZSA9XG5mdW5jdGlvbiBQcm9taXNlJF9hdHRhY2hFeHRyYVRyYWNlKGVycm9yKSB7XG4gICAgaWYgKGRlYnVnZ2luZykge1xuICAgICAgICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gICAgICAgIHZhciBzdGFjayA9IGVycm9yLnN0YWNrO1xuICAgICAgICBzdGFjayA9IHR5cGVvZiBzdGFjayA9PT0gXCJzdHJpbmdcIlxuICAgICAgICAgICAgPyBzdGFjay5zcGxpdChcIlxcblwiKSA6IFtdO1xuICAgICAgICB2YXIgaGVhZGVyTGluZUNvdW50ID0gMTtcblxuICAgICAgICB3aGlsZShwcm9taXNlICE9IG51bGwgJiZcbiAgICAgICAgICAgIHByb21pc2UuX3RyYWNlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHN0YWNrID0gQ2FwdHVyZWRUcmFjZS5jb21iaW5lKFxuICAgICAgICAgICAgICAgIHN0YWNrLFxuICAgICAgICAgICAgICAgIHByb21pc2UuX3RyYWNlLnN0YWNrLnNwbGl0KFwiXFxuXCIpXG4gICAgICAgICAgICk7XG4gICAgICAgICAgICBwcm9taXNlID0gcHJvbWlzZS5fdHJhY2VQYXJlbnQ7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbWF4ID0gRXJyb3Iuc3RhY2tUcmFjZUxpbWl0ICsgaGVhZGVyTGluZUNvdW50O1xuICAgICAgICB2YXIgbGVuID0gc3RhY2subGVuZ3RoO1xuICAgICAgICBpZiAobGVuICA+IG1heCkge1xuICAgICAgICAgICAgc3RhY2subGVuZ3RoID0gbWF4O1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGFjay5sZW5ndGggPD0gaGVhZGVyTGluZUNvdW50KSB7XG4gICAgICAgICAgICBlcnJvci5zdGFjayA9IFwiKE5vIHN0YWNrIHRyYWNlKVwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZXJyb3Iuc3RhY2sgPSBzdGFjay5qb2luKFwiXFxuXCIpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2NsZWFuVmFsdWVzID0gZnVuY3Rpb24gUHJvbWlzZSRfY2xlYW5WYWx1ZXMoKSB7XG4gICAgaWYgKHRoaXMuX2NhbmNlbGxhYmxlKCkpIHtcbiAgICAgICAgdGhpcy5fY2FuY2VsbGF0aW9uUGFyZW50ID0gdm9pZCAwO1xuICAgIH1cbn07XG5cblByb21pc2UucHJvdG90eXBlLl9mdWxmaWxsID0gZnVuY3Rpb24gUHJvbWlzZSRfZnVsZmlsbCh2YWx1ZSkge1xuICAgIGlmICh0aGlzLl9pc0ZvbGxvd2luZ09yRnVsZmlsbGVkT3JSZWplY3RlZCgpKSByZXR1cm47XG4gICAgdGhpcy5fZnVsZmlsbFVuY2hlY2tlZCh2YWx1ZSk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fcmVqZWN0ID1cbmZ1bmN0aW9uIFByb21pc2UkX3JlamVjdChyZWFzb24sIGNhcnJpZWRTdGFja1RyYWNlKSB7XG4gICAgaWYgKHRoaXMuX2lzRm9sbG93aW5nT3JGdWxmaWxsZWRPclJlamVjdGVkKCkpIHJldHVybjtcbiAgICB0aGlzLl9yZWplY3RVbmNoZWNrZWQocmVhc29uLCBjYXJyaWVkU3RhY2tUcmFjZSk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fc2V0dGxlUHJvbWlzZUF0ID0gZnVuY3Rpb24gUHJvbWlzZSRfc2V0dGxlUHJvbWlzZUF0KGluZGV4KSB7XG4gICAgdmFyIGhhbmRsZXIgPSB0aGlzLmlzRnVsZmlsbGVkKClcbiAgICAgICAgPyB0aGlzLl9mdWxmaWxsbWVudEhhbmRsZXJBdChpbmRleClcbiAgICAgICAgOiB0aGlzLl9yZWplY3Rpb25IYW5kbGVyQXQoaW5kZXgpO1xuXG4gICAgdmFyIHZhbHVlID0gdGhpcy5fc2V0dGxlZFZhbHVlO1xuICAgIHZhciByZWNlaXZlciA9IHRoaXMuX3JlY2VpdmVyQXQoaW5kZXgpO1xuICAgIHZhciBwcm9taXNlID0gdGhpcy5fcHJvbWlzZUF0KGluZGV4KTtcblxuICAgIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHRoaXMuX3NldHRsZVByb21pc2VGcm9tSGFuZGxlcihoYW5kbGVyLCByZWNlaXZlciwgdmFsdWUsIHByb21pc2UpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgICAgICAgdmFyIGlzRnVsZmlsbGVkID0gdGhpcy5pc0Z1bGZpbGxlZCgpO1xuICAgICAgICBpZiAocmVjZWl2ZXIgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgaWYgKHJlY2VpdmVyIGluc3RhbmNlb2YgUHJvbWlzZSAmJlxuICAgICAgICAgICAgICAgIHJlY2VpdmVyLl9pc1Byb3hpZWQoKSkge1xuICAgICAgICAgICAgICAgIHJlY2VpdmVyLl91bnNldFByb3hpZWQoKTtcblxuICAgICAgICAgICAgICAgIGlmIChpc0Z1bGZpbGxlZCkgcmVjZWl2ZXIuX2Z1bGZpbGxVbmNoZWNrZWQodmFsdWUpO1xuICAgICAgICAgICAgICAgIGVsc2UgcmVjZWl2ZXIuX3JlamVjdFVuY2hlY2tlZCh2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZ2V0Q2FycmllZFN0YWNrVHJhY2UoKSk7XG4gICAgICAgICAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc1Byb21pc2VBcnJheVByb3h5KHJlY2VpdmVyLCBwcm9taXNlKSkge1xuICAgICAgICAgICAgICAgIGlmIChpc0Z1bGZpbGxlZCkgcmVjZWl2ZXIuX3Byb21pc2VGdWxmaWxsZWQodmFsdWUsIHByb21pc2UpO1xuICAgICAgICAgICAgICAgIGVsc2UgcmVjZWl2ZXIuX3Byb21pc2VSZWplY3RlZCh2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgICAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWRvbmUpIHtcbiAgICAgICAgICAgIGlmIChpc0Z1bGZpbGxlZCkgcHJvbWlzZS5fZnVsZmlsbCh2YWx1ZSk7XG4gICAgICAgICAgICBlbHNlIHByb21pc2UuX3JlamVjdCh2YWx1ZSwgdGhpcy5fZ2V0Q2FycmllZFN0YWNrVHJhY2UoKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaW5kZXggPj0gMjU2KSB7XG4gICAgICAgIHRoaXMuX3F1ZXVlR0MoKTtcbiAgICB9XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5faXNQcm94aWVkID0gZnVuY3Rpb24gUHJvbWlzZSRfaXNQcm94aWVkKCkge1xuICAgIHJldHVybiAodGhpcy5fYml0RmllbGQgJiA0MTk0MzA0KSA9PT0gNDE5NDMwNDtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9zZXRQcm94aWVkID0gZnVuY3Rpb24gUHJvbWlzZSRfc2V0UHJveGllZCgpIHtcbiAgICB0aGlzLl9iaXRGaWVsZCA9IHRoaXMuX2JpdEZpZWxkIHwgNDE5NDMwNDtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl91bnNldFByb3hpZWQgPSBmdW5jdGlvbiBQcm9taXNlJF91bnNldFByb3hpZWQoKSB7XG4gICAgdGhpcy5fYml0RmllbGQgPSB0aGlzLl9iaXRGaWVsZCAmICh+NDE5NDMwNCk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5faXNHY1F1ZXVlZCA9IGZ1bmN0aW9uIFByb21pc2UkX2lzR2NRdWV1ZWQoKSB7XG4gICAgcmV0dXJuICh0aGlzLl9iaXRGaWVsZCAmIC0xMDczNzQxODI0KSA9PT0gLTEwNzM3NDE4MjQ7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fc2V0R2NRdWV1ZWQgPSBmdW5jdGlvbiBQcm9taXNlJF9zZXRHY1F1ZXVlZCgpIHtcbiAgICB0aGlzLl9iaXRGaWVsZCA9IHRoaXMuX2JpdEZpZWxkIHwgLTEwNzM3NDE4MjQ7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fdW5zZXRHY1F1ZXVlZCA9IGZ1bmN0aW9uIFByb21pc2UkX3Vuc2V0R2NRdWV1ZWQoKSB7XG4gICAgdGhpcy5fYml0RmllbGQgPSB0aGlzLl9iaXRGaWVsZCAmICh+LTEwNzM3NDE4MjQpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3F1ZXVlR0MgPSBmdW5jdGlvbiBQcm9taXNlJF9xdWV1ZUdDKCkge1xuICAgIGlmICh0aGlzLl9pc0djUXVldWVkKCkpIHJldHVybjtcbiAgICB0aGlzLl9zZXRHY1F1ZXVlZCgpO1xuICAgIGFzeW5jLmludm9rZUxhdGVyKHRoaXMuX2djLCB0aGlzLCB2b2lkIDApO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2djID0gZnVuY3Rpb24gUHJvbWlzZSRnYygpIHtcbiAgICB2YXIgbGVuID0gdGhpcy5fbGVuZ3RoKCk7XG4gICAgdGhpcy5fdW5zZXRBdCgwKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzW2ldO1xuICAgIH1cbiAgICB0aGlzLl9zZXRMZW5ndGgoMCk7XG4gICAgdGhpcy5fdW5zZXRHY1F1ZXVlZCgpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3F1ZXVlU2V0dGxlQXQgPSBmdW5jdGlvbiBQcm9taXNlJF9xdWV1ZVNldHRsZUF0KGluZGV4KSB7XG4gICAgaWYgKHRoaXMuX2lzUmVqZWN0aW9uVW5oYW5kbGVkKCkpIHRoaXMuX3Vuc2V0UmVqZWN0aW9uSXNVbmhhbmRsZWQoKTtcbiAgICBhc3luYy5pbnZva2UodGhpcy5fc2V0dGxlUHJvbWlzZUF0LCB0aGlzLCBpbmRleCk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fZnVsZmlsbFVuY2hlY2tlZCA9XG5mdW5jdGlvbiBQcm9taXNlJF9mdWxmaWxsVW5jaGVja2VkKHZhbHVlKSB7XG4gICAgaWYgKCF0aGlzLmlzUGVuZGluZygpKSByZXR1cm47XG4gICAgaWYgKHZhbHVlID09PSB0aGlzKSB7XG4gICAgICAgIHZhciBlcnIgPSBtYWtlU2VsZlJlc29sdXRpb25FcnJvcigpO1xuICAgICAgICB0aGlzLl9hdHRhY2hFeHRyYVRyYWNlKGVycik7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZWplY3RVbmNoZWNrZWQoZXJyLCB2b2lkIDApO1xuICAgIH1cbiAgICB0aGlzLl9jbGVhblZhbHVlcygpO1xuICAgIHRoaXMuX3NldEZ1bGZpbGxlZCgpO1xuICAgIHRoaXMuX3NldHRsZWRWYWx1ZSA9IHZhbHVlO1xuICAgIHZhciBsZW4gPSB0aGlzLl9sZW5ndGgoKTtcblxuICAgIGlmIChsZW4gPiAwKSB7XG4gICAgICAgIGFzeW5jLmludm9rZSh0aGlzLl9zZXR0bGVQcm9taXNlcywgdGhpcywgbGVuKTtcbiAgICB9XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fcmVqZWN0VW5jaGVja2VkQ2hlY2tFcnJvciA9XG5mdW5jdGlvbiBQcm9taXNlJF9yZWplY3RVbmNoZWNrZWRDaGVja0Vycm9yKHJlYXNvbikge1xuICAgIHZhciB0cmFjZSA9IGNhbkF0dGFjaChyZWFzb24pID8gcmVhc29uIDogbmV3IEVycm9yKHJlYXNvbiArIFwiXCIpO1xuICAgIHRoaXMuX3JlamVjdFVuY2hlY2tlZChyZWFzb24sIHRyYWNlID09PSByZWFzb24gPyB2b2lkIDAgOiB0cmFjZSk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fcmVqZWN0VW5jaGVja2VkID1cbmZ1bmN0aW9uIFByb21pc2UkX3JlamVjdFVuY2hlY2tlZChyZWFzb24sIHRyYWNlKSB7XG4gICAgaWYgKCF0aGlzLmlzUGVuZGluZygpKSByZXR1cm47XG4gICAgaWYgKHJlYXNvbiA9PT0gdGhpcykge1xuICAgICAgICB2YXIgZXJyID0gbWFrZVNlbGZSZXNvbHV0aW9uRXJyb3IoKTtcbiAgICAgICAgdGhpcy5fYXR0YWNoRXh0cmFUcmFjZShlcnIpO1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVqZWN0VW5jaGVja2VkKGVycik7XG4gICAgfVxuICAgIHRoaXMuX2NsZWFuVmFsdWVzKCk7XG4gICAgdGhpcy5fc2V0UmVqZWN0ZWQoKTtcbiAgICB0aGlzLl9zZXR0bGVkVmFsdWUgPSByZWFzb247XG5cbiAgICBpZiAodGhpcy5faXNGaW5hbCgpKSB7XG4gICAgICAgIGFzeW5jLmludm9rZUxhdGVyKHRocm93ZXIsIHZvaWQgMCwgdHJhY2UgPT09IHZvaWQgMCA/IHJlYXNvbiA6IHRyYWNlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgbGVuID0gdGhpcy5fbGVuZ3RoKCk7XG5cbiAgICBpZiAodHJhY2UgIT09IHZvaWQgMCkgdGhpcy5fc2V0Q2FycmllZFN0YWNrVHJhY2UodHJhY2UpO1xuXG4gICAgaWYgKGxlbiA+IDApIHtcbiAgICAgICAgYXN5bmMuaW52b2tlKHRoaXMuX3JlamVjdFByb21pc2VzLCB0aGlzLCBudWxsKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRoaXMuX2Vuc3VyZVBvc3NpYmxlUmVqZWN0aW9uSGFuZGxlZCgpO1xuICAgIH1cbn07XG5cblByb21pc2UucHJvdG90eXBlLl9yZWplY3RQcm9taXNlcyA9IGZ1bmN0aW9uIFByb21pc2UkX3JlamVjdFByb21pc2VzKCkge1xuICAgIHRoaXMuX3NldHRsZVByb21pc2VzKCk7XG4gICAgdGhpcy5fdW5zZXRDYXJyaWVkU3RhY2tUcmFjZSgpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3NldHRsZVByb21pc2VzID0gZnVuY3Rpb24gUHJvbWlzZSRfc2V0dGxlUHJvbWlzZXMoKSB7XG4gICAgdmFyIGxlbiA9IHRoaXMuX2xlbmd0aCgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKz0gNSkge1xuICAgICAgICB0aGlzLl9zZXR0bGVQcm9taXNlQXQoaSk7XG4gICAgfVxufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2Vuc3VyZVBvc3NpYmxlUmVqZWN0aW9uSGFuZGxlZCA9XG5mdW5jdGlvbiBQcm9taXNlJF9lbnN1cmVQb3NzaWJsZVJlamVjdGlvbkhhbmRsZWQoKSB7XG4gICAgdGhpcy5fc2V0UmVqZWN0aW9uSXNVbmhhbmRsZWQoKTtcbiAgICBpZiAoQ2FwdHVyZWRUcmFjZS5wb3NzaWJseVVuaGFuZGxlZFJlamVjdGlvbiAhPT0gdm9pZCAwKSB7XG4gICAgICAgIGFzeW5jLmludm9rZUxhdGVyKHRoaXMuX25vdGlmeVVuaGFuZGxlZFJlamVjdGlvbiwgdGhpcywgdm9pZCAwKTtcbiAgICB9XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fbm90aWZ5VW5oYW5kbGVkUmVqZWN0aW9uSXNIYW5kbGVkID1cbmZ1bmN0aW9uIFByb21pc2UkX25vdGlmeVVuaGFuZGxlZFJlamVjdGlvbklzSGFuZGxlZCgpIHtcbiAgICBpZiAodHlwZW9mIHVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZWQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBhc3luYy5pbnZva2VMYXRlcih1bmhhbmRsZWRSZWplY3Rpb25IYW5kbGVkLCB2b2lkIDAsIHRoaXMpO1xuICAgIH1cbn07XG5cblByb21pc2UucHJvdG90eXBlLl9ub3RpZnlVbmhhbmRsZWRSZWplY3Rpb24gPVxuZnVuY3Rpb24gUHJvbWlzZSRfbm90aWZ5VW5oYW5kbGVkUmVqZWN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9pc1JlamVjdGlvblVuaGFuZGxlZCgpKSB7XG4gICAgICAgIHZhciByZWFzb24gPSB0aGlzLl9zZXR0bGVkVmFsdWU7XG4gICAgICAgIHZhciB0cmFjZSA9IHRoaXMuX2dldENhcnJpZWRTdGFja1RyYWNlKCk7XG5cbiAgICAgICAgdGhpcy5fc2V0VW5oYW5kbGVkUmVqZWN0aW9uSXNOb3RpZmllZCgpO1xuXG4gICAgICAgIGlmICh0cmFjZSAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICB0aGlzLl91bnNldENhcnJpZWRTdGFja1RyYWNlKCk7XG4gICAgICAgICAgICByZWFzb24gPSB0cmFjZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIENhcHR1cmVkVHJhY2UucG9zc2libHlVbmhhbmRsZWRSZWplY3Rpb24gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgQ2FwdHVyZWRUcmFjZS5wb3NzaWJseVVuaGFuZGxlZFJlamVjdGlvbihyZWFzb24sIHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxudmFyIGNvbnRleHRTdGFjayA9IFtdO1xuUHJvbWlzZS5wcm90b3R5cGUuX3BlZWtDb250ZXh0ID0gZnVuY3Rpb24gUHJvbWlzZSRfcGVla0NvbnRleHQoKSB7XG4gICAgdmFyIGxhc3RJbmRleCA9IGNvbnRleHRTdGFjay5sZW5ndGggLSAxO1xuICAgIGlmIChsYXN0SW5kZXggPj0gMCkge1xuICAgICAgICByZXR1cm4gY29udGV4dFN0YWNrW2xhc3RJbmRleF07XG4gICAgfVxuICAgIHJldHVybiB2b2lkIDA7XG5cbn07XG5cblByb21pc2UucHJvdG90eXBlLl9wdXNoQ29udGV4dCA9IGZ1bmN0aW9uIFByb21pc2UkX3B1c2hDb250ZXh0KCkge1xuICAgIGlmICghZGVidWdnaW5nKSByZXR1cm47XG4gICAgY29udGV4dFN0YWNrLnB1c2godGhpcyk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fcG9wQ29udGV4dCA9IGZ1bmN0aW9uIFByb21pc2UkX3BvcENvbnRleHQoKSB7XG4gICAgaWYgKCFkZWJ1Z2dpbmcpIHJldHVybjtcbiAgICBjb250ZXh0U3RhY2sucG9wKCk7XG59O1xuXG5mdW5jdGlvbiBQcm9taXNlJF9DcmVhdGVQcm9taXNlQXJyYXkoXG4gICAgcHJvbWlzZXMsIFByb21pc2VBcnJheUNvbnN0cnVjdG9yLCBib3VuZFRvKSB7XG5cbiAgICB2YXIgbGlzdCA9IG51bGw7XG4gICAgaWYgKGlzQXJyYXkocHJvbWlzZXMpKSB7XG4gICAgICAgIGxpc3QgPSBwcm9taXNlcztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGxpc3QgPSBQcm9taXNlLl9jYXN0KHByb21pc2VzLCB2b2lkIDApO1xuICAgICAgICBpZiAobGlzdCAhPT0gcHJvbWlzZXMpIHtcbiAgICAgICAgICAgIGxpc3QuX3NldEJvdW5kVG8oYm91bmRUbyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWlzUHJvbWlzZShsaXN0KSkge1xuICAgICAgICAgICAgbGlzdCA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGxpc3QgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlQXJyYXlDb25zdHJ1Y3RvcihsaXN0LCBib3VuZFRvKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcHJvbWlzZTogZnVuY3Rpb24oKSB7cmV0dXJuIGFwaVJlamVjdGlvbihcImV4cGVjdGluZyBhbiBhcnJheSwgYSBwcm9taXNlIG9yIGEgdGhlbmFibGVcIik7fVxuICAgIH07XG59XG5cbnZhciBvbGQgPSBnbG9iYWwuUHJvbWlzZTtcblByb21pc2Uubm9Db25mbGljdCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChnbG9iYWwuUHJvbWlzZSA9PT0gUHJvbWlzZSkge1xuICAgICAgICBnbG9iYWwuUHJvbWlzZSA9IG9sZDtcbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2U7XG59O1xuXG5pZiAoIUNhcHR1cmVkVHJhY2UuaXNTdXBwb3J0ZWQoKSkge1xuICAgIFByb21pc2UubG9uZ1N0YWNrVHJhY2VzID0gZnVuY3Rpb24oKXt9O1xuICAgIGRlYnVnZ2luZyA9IGZhbHNlO1xufVxuXG5Qcm9taXNlLl9tYWtlU2VsZlJlc29sdXRpb25FcnJvciA9IG1ha2VTZWxmUmVzb2x1dGlvbkVycm9yO1xucmVxdWlyZShcIi4vZmluYWxseS5qc1wiKShQcm9taXNlLCBORVhUX0ZJTFRFUik7XG5yZXF1aXJlKFwiLi9kaXJlY3RfcmVzb2x2ZS5qc1wiKShQcm9taXNlKTtcbnJlcXVpcmUoXCIuL3RoZW5hYmxlcy5qc1wiKShQcm9taXNlLCBJTlRFUk5BTCk7XG5yZXF1aXJlKFwiLi9zeW5jaHJvbm91c19pbnNwZWN0aW9uLmpzXCIpKFByb21pc2UpO1xuUHJvbWlzZS5SYW5nZUVycm9yID0gUmFuZ2VFcnJvcjtcblByb21pc2UuQ2FuY2VsbGF0aW9uRXJyb3IgPSBDYW5jZWxsYXRpb25FcnJvcjtcblByb21pc2UuVGltZW91dEVycm9yID0gVGltZW91dEVycm9yO1xuUHJvbWlzZS5UeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5Qcm9taXNlLlJlamVjdGlvbkVycm9yID0gUmVqZWN0aW9uRXJyb3I7XG5cbnV0aWwudG9GYXN0UHJvcGVydGllcyhQcm9taXNlKTtcbnV0aWwudG9GYXN0UHJvcGVydGllcyhQcm9taXNlLnByb3RvdHlwZSk7XG5yZXF1aXJlKCcuL3RpbWVycy5qcycpKFByb21pc2UsSU5URVJOQUwpO1xucmVxdWlyZSgnLi9hbnkuanMnKShQcm9taXNlLFByb21pc2UkX0NyZWF0ZVByb21pc2VBcnJheSxQcm9taXNlQXJyYXkpO1xucmVxdWlyZSgnLi9yYWNlLmpzJykoUHJvbWlzZSxJTlRFUk5BTCk7XG5yZXF1aXJlKCcuL2NhbGxfZ2V0LmpzJykoUHJvbWlzZSk7XG5yZXF1aXJlKCcuL2ZpbHRlci5qcycpKFByb21pc2UsUHJvbWlzZSRfQ3JlYXRlUHJvbWlzZUFycmF5LFByb21pc2VBcnJheSxhcGlSZWplY3Rpb24pO1xucmVxdWlyZSgnLi9nZW5lcmF0b3JzLmpzJykoUHJvbWlzZSxhcGlSZWplY3Rpb24sSU5URVJOQUwpO1xucmVxdWlyZSgnLi9tYXAuanMnKShQcm9taXNlLFByb21pc2VBcnJheSxJTlRFUk5BTCxhcGlSZWplY3Rpb24pO1xucmVxdWlyZSgnLi9ub2RlaWZ5LmpzJykoUHJvbWlzZSk7XG5yZXF1aXJlKCcuL3Byb21pc2lmeS5qcycpKFByb21pc2UsSU5URVJOQUwpO1xucmVxdWlyZSgnLi9wcm9wcy5qcycpKFByb21pc2UsUHJvbWlzZUFycmF5KTtcbnJlcXVpcmUoJy4vcmVkdWNlLmpzJykoUHJvbWlzZSxQcm9taXNlJF9DcmVhdGVQcm9taXNlQXJyYXksUHJvbWlzZUFycmF5LGFwaVJlamVjdGlvbixJTlRFUk5BTCk7XG5yZXF1aXJlKCcuL3NldHRsZS5qcycpKFByb21pc2UsUHJvbWlzZSRfQ3JlYXRlUHJvbWlzZUFycmF5LFByb21pc2VBcnJheSk7XG5yZXF1aXJlKCcuL3NvbWUuanMnKShQcm9taXNlLFByb21pc2UkX0NyZWF0ZVByb21pc2VBcnJheSxQcm9taXNlQXJyYXksYXBpUmVqZWN0aW9uKTtcbnJlcXVpcmUoJy4vcHJvZ3Jlc3MuanMnKShQcm9taXNlLGlzUHJvbWlzZUFycmF5UHJveHkpO1xucmVxdWlyZSgnLi9jYW5jZWwuanMnKShQcm9taXNlLElOVEVSTkFMKTtcblxuUHJvbWlzZS5wcm90b3R5cGUgPSBQcm9taXNlLnByb3RvdHlwZTtcbnJldHVybiBQcm9taXNlO1xuXG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQgUGV0a2EgQW50b25vdlxuICogXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6PC9wPlxuICogXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKiBcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqIFxuICovXG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oUHJvbWlzZSwgSU5URVJOQUwpIHtcbnZhciBjYW5BdHRhY2ggPSByZXF1aXJlKFwiLi9lcnJvcnMuanNcIikuY2FuQXR0YWNoO1xudmFyIHV0aWwgPSByZXF1aXJlKFwiLi91dGlsLmpzXCIpO1xudmFyIGFzeW5jID0gcmVxdWlyZShcIi4vYXN5bmMuanNcIik7XG52YXIgaGFzT3duID0ge30uaGFzT3duUHJvcGVydHk7XG52YXIgaXNBcnJheSA9IHV0aWwuaXNBcnJheTtcblxuZnVuY3Rpb24gdG9SZXNvbHV0aW9uVmFsdWUodmFsKSB7XG4gICAgc3dpdGNoKHZhbCkge1xuICAgIGNhc2UgLTE6IHJldHVybiB2b2lkIDA7XG4gICAgY2FzZSAtMjogcmV0dXJuIFtdO1xuICAgIGNhc2UgLTM6IHJldHVybiB7fTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIFByb21pc2VBcnJheSh2YWx1ZXMsIGJvdW5kVG8pIHtcbiAgICB2YXIgcHJvbWlzZSA9IHRoaXMuX3Byb21pc2UgPSBuZXcgUHJvbWlzZShJTlRFUk5BTCk7XG4gICAgdmFyIHBhcmVudCA9IHZvaWQgMDtcbiAgICBpZiAodmFsdWVzIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICBwYXJlbnQgPSB2YWx1ZXM7XG4gICAgICAgIGlmICh2YWx1ZXMuX2NhbmNlbGxhYmxlKCkpIHtcbiAgICAgICAgICAgIHByb21pc2UuX3NldENhbmNlbGxhYmxlKCk7XG4gICAgICAgICAgICBwcm9taXNlLl9jYW5jZWxsYXRpb25QYXJlbnQgPSB2YWx1ZXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlcy5faXNCb3VuZCgpKSB7XG4gICAgICAgICAgICBwcm9taXNlLl9zZXRCb3VuZFRvKGJvdW5kVG8pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHByb21pc2UuX3NldFRyYWNlKHBhcmVudCk7XG4gICAgdGhpcy5fdmFsdWVzID0gdmFsdWVzO1xuICAgIHRoaXMuX2xlbmd0aCA9IDA7XG4gICAgdGhpcy5fdG90YWxSZXNvbHZlZCA9IDA7XG4gICAgdGhpcy5faW5pdCh2b2lkIDAsIC0yKTtcbn1cblByb21pc2VBcnJheS5Qcm9wZXJ0aWVzUHJvbWlzZUFycmF5ID0gZnVuY3Rpb24oKSB7fTtcblxuUHJvbWlzZUFycmF5LnByb3RvdHlwZS5sZW5ndGggPSBmdW5jdGlvbiBQcm9taXNlQXJyYXkkbGVuZ3RoKCkge1xuICAgIHJldHVybiB0aGlzLl9sZW5ndGg7XG59O1xuXG5Qcm9taXNlQXJyYXkucHJvdG90eXBlLnByb21pc2UgPSBmdW5jdGlvbiBQcm9taXNlQXJyYXkkcHJvbWlzZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fcHJvbWlzZTtcbn07XG5cblByb21pc2VBcnJheS5wcm90b3R5cGUuX2luaXQgPVxuZnVuY3Rpb24gUHJvbWlzZUFycmF5JF9pbml0KF8sIHJlc29sdmVWYWx1ZUlmRW1wdHkpIHtcbiAgICB2YXIgdmFsdWVzID0gdGhpcy5fdmFsdWVzO1xuICAgIGlmICh2YWx1ZXMgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgIGlmICh2YWx1ZXMuaXNGdWxmaWxsZWQoKSkge1xuICAgICAgICAgICAgdmFsdWVzID0gdmFsdWVzLl9zZXR0bGVkVmFsdWU7XG4gICAgICAgICAgICBpZiAoIWlzQXJyYXkodmFsdWVzKSkge1xuICAgICAgICAgICAgICAgIHZhciBlcnIgPSBuZXcgUHJvbWlzZS5UeXBlRXJyb3IoXCJleHBlY3RpbmcgYW4gYXJyYXksIGEgcHJvbWlzZSBvciBhIHRoZW5hYmxlXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuX19oYXJkUmVqZWN0X18oZXJyKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl92YWx1ZXMgPSB2YWx1ZXM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsdWVzLmlzUGVuZGluZygpKSB7XG4gICAgICAgICAgICB2YWx1ZXMuX3RoZW4oXG4gICAgICAgICAgICAgICAgdGhpcy5faW5pdCxcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWplY3QsXG4gICAgICAgICAgICAgICAgdm9pZCAwLFxuICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgcmVzb2x2ZVZhbHVlSWZFbXB0eVxuICAgICAgICAgICApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFsdWVzLl91bnNldFJlamVjdGlvbklzVW5oYW5kbGVkKCk7XG4gICAgICAgICAgICB0aGlzLl9yZWplY3QodmFsdWVzLl9zZXR0bGVkVmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhpcy5fcmVzb2x2ZSh0b1Jlc29sdXRpb25WYWx1ZShyZXNvbHZlVmFsdWVJZkVtcHR5KSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGxlbiA9IHZhbHVlcy5sZW5ndGg7XG4gICAgdmFyIG5ld0xlbiA9IGxlbjtcbiAgICB2YXIgbmV3VmFsdWVzO1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgUHJvbWlzZUFycmF5LlByb3BlcnRpZXNQcm9taXNlQXJyYXkpIHtcbiAgICAgICAgbmV3VmFsdWVzID0gdGhpcy5fdmFsdWVzO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbmV3VmFsdWVzID0gbmV3IEFycmF5KGxlbik7XG4gICAgfVxuICAgIHZhciBpc0RpcmVjdFNjYW5OZWVkZWQgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgIHZhciBwcm9taXNlID0gdmFsdWVzW2ldO1xuICAgICAgICBpZiAocHJvbWlzZSA9PT0gdm9pZCAwICYmICFoYXNPd24uY2FsbCh2YWx1ZXMsIGkpKSB7XG4gICAgICAgICAgICBuZXdMZW4tLTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtYXliZVByb21pc2UgPSBQcm9taXNlLl9jYXN0KHByb21pc2UsIHZvaWQgMCk7XG4gICAgICAgIGlmIChtYXliZVByb21pc2UgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICBpZiAobWF5YmVQcm9taXNlLmlzUGVuZGluZygpKSB7XG4gICAgICAgICAgICAgICAgbWF5YmVQcm9taXNlLl9wcm94eVByb21pc2VBcnJheSh0aGlzLCBpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG1heWJlUHJvbWlzZS5fdW5zZXRSZWplY3Rpb25Jc1VuaGFuZGxlZCgpO1xuICAgICAgICAgICAgICAgIGlzRGlyZWN0U2Nhbk5lZWRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpc0RpcmVjdFNjYW5OZWVkZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIG5ld1ZhbHVlc1tpXSA9IG1heWJlUHJvbWlzZTtcbiAgICB9XG4gICAgaWYgKG5ld0xlbiA9PT0gMCkge1xuICAgICAgICBpZiAocmVzb2x2ZVZhbHVlSWZFbXB0eSA9PT0gLTIpIHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc29sdmUobmV3VmFsdWVzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc29sdmUodG9SZXNvbHV0aW9uVmFsdWUocmVzb2x2ZVZhbHVlSWZFbXB0eSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fdmFsdWVzID0gbmV3VmFsdWVzO1xuICAgIHRoaXMuX2xlbmd0aCA9IG5ld0xlbjtcbiAgICBpZiAoaXNEaXJlY3RTY2FuTmVlZGVkKSB7XG4gICAgICAgIHZhciBzY2FuTWV0aG9kID0gbmV3TGVuID09PSBsZW5cbiAgICAgICAgICAgID8gdGhpcy5fc2NhbkRpcmVjdFZhbHVlc1xuICAgICAgICAgICAgOiB0aGlzLl9zY2FuRGlyZWN0VmFsdWVzSG9sZWQ7XG4gICAgICAgIGFzeW5jLmludm9rZShzY2FuTWV0aG9kLCB0aGlzLCBsZW4pO1xuICAgIH1cbn07XG5cblByb21pc2VBcnJheS5wcm90b3R5cGUuX3NldHRsZVByb21pc2VBdCA9XG5mdW5jdGlvbiBQcm9taXNlQXJyYXkkX3NldHRsZVByb21pc2VBdChpbmRleCkge1xuICAgIHZhciB2YWx1ZSA9IHRoaXMuX3ZhbHVlc1tpbmRleF07XG4gICAgaWYgKCEodmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlKSkge1xuICAgICAgICB0aGlzLl9wcm9taXNlRnVsZmlsbGVkKHZhbHVlLCBpbmRleCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHZhbHVlLmlzRnVsZmlsbGVkKCkpIHtcbiAgICAgICAgdGhpcy5fcHJvbWlzZUZ1bGZpbGxlZCh2YWx1ZS5fc2V0dGxlZFZhbHVlLCBpbmRleCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHZhbHVlLmlzUmVqZWN0ZWQoKSkge1xuICAgICAgICB0aGlzLl9wcm9taXNlUmVqZWN0ZWQodmFsdWUuX3NldHRsZWRWYWx1ZSwgaW5kZXgpO1xuICAgIH1cbn07XG5cblByb21pc2VBcnJheS5wcm90b3R5cGUuX3NjYW5EaXJlY3RWYWx1ZXNIb2xlZCA9XG5mdW5jdGlvbiBQcm9taXNlQXJyYXkkX3NjYW5EaXJlY3RWYWx1ZXNIb2xlZChsZW4pIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc1Jlc29sdmVkKCkpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNPd24uY2FsbCh0aGlzLl92YWx1ZXMsIGkpKSB7XG4gICAgICAgICAgICB0aGlzLl9zZXR0bGVQcm9taXNlQXQoaSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5Qcm9taXNlQXJyYXkucHJvdG90eXBlLl9zY2FuRGlyZWN0VmFsdWVzID1cbmZ1bmN0aW9uIFByb21pc2VBcnJheSRfc2NhbkRpcmVjdFZhbHVlcyhsZW4pIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc1Jlc29sdmVkKCkpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3NldHRsZVByb21pc2VBdChpKTtcbiAgICB9XG59O1xuXG5Qcm9taXNlQXJyYXkucHJvdG90eXBlLl9pc1Jlc29sdmVkID0gZnVuY3Rpb24gUHJvbWlzZUFycmF5JF9pc1Jlc29sdmVkKCkge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZXMgPT09IG51bGw7XG59O1xuXG5Qcm9taXNlQXJyYXkucHJvdG90eXBlLl9yZXNvbHZlID0gZnVuY3Rpb24gUHJvbWlzZUFycmF5JF9yZXNvbHZlKHZhbHVlKSB7XG4gICAgdGhpcy5fdmFsdWVzID0gbnVsbDtcbiAgICB0aGlzLl9wcm9taXNlLl9mdWxmaWxsKHZhbHVlKTtcbn07XG5cblByb21pc2VBcnJheS5wcm90b3R5cGUuX19oYXJkUmVqZWN0X18gPVxuUHJvbWlzZUFycmF5LnByb3RvdHlwZS5fcmVqZWN0ID0gZnVuY3Rpb24gUHJvbWlzZUFycmF5JF9yZWplY3QocmVhc29uKSB7XG4gICAgdGhpcy5fdmFsdWVzID0gbnVsbDtcbiAgICB2YXIgdHJhY2UgPSBjYW5BdHRhY2gocmVhc29uKSA/IHJlYXNvbiA6IG5ldyBFcnJvcihyZWFzb24gKyBcIlwiKTtcbiAgICB0aGlzLl9wcm9taXNlLl9hdHRhY2hFeHRyYVRyYWNlKHRyYWNlKTtcbiAgICB0aGlzLl9wcm9taXNlLl9yZWplY3QocmVhc29uLCB0cmFjZSk7XG59O1xuXG5Qcm9taXNlQXJyYXkucHJvdG90eXBlLl9wcm9taXNlUHJvZ3Jlc3NlZCA9XG5mdW5jdGlvbiBQcm9taXNlQXJyYXkkX3Byb21pc2VQcm9ncmVzc2VkKHByb2dyZXNzVmFsdWUsIGluZGV4KSB7XG4gICAgaWYgKHRoaXMuX2lzUmVzb2x2ZWQoKSkgcmV0dXJuO1xuICAgIHRoaXMuX3Byb21pc2UuX3Byb2dyZXNzKHtcbiAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICB2YWx1ZTogcHJvZ3Jlc3NWYWx1ZVxuICAgIH0pO1xufTtcblxuXG5Qcm9taXNlQXJyYXkucHJvdG90eXBlLl9wcm9taXNlRnVsZmlsbGVkID1cbmZ1bmN0aW9uIFByb21pc2VBcnJheSRfcHJvbWlzZUZ1bGZpbGxlZCh2YWx1ZSwgaW5kZXgpIHtcbiAgICBpZiAodGhpcy5faXNSZXNvbHZlZCgpKSByZXR1cm47XG4gICAgdGhpcy5fdmFsdWVzW2luZGV4XSA9IHZhbHVlO1xuICAgIHZhciB0b3RhbFJlc29sdmVkID0gKyt0aGlzLl90b3RhbFJlc29sdmVkO1xuICAgIGlmICh0b3RhbFJlc29sdmVkID49IHRoaXMuX2xlbmd0aCkge1xuICAgICAgICB0aGlzLl9yZXNvbHZlKHRoaXMuX3ZhbHVlcyk7XG4gICAgfVxufTtcblxuUHJvbWlzZUFycmF5LnByb3RvdHlwZS5fcHJvbWlzZVJlamVjdGVkID1cbmZ1bmN0aW9uIFByb21pc2VBcnJheSRfcHJvbWlzZVJlamVjdGVkKHJlYXNvbiwgaW5kZXgpIHtcbiAgICBpZiAodGhpcy5faXNSZXNvbHZlZCgpKSByZXR1cm47XG4gICAgdGhpcy5fdG90YWxSZXNvbHZlZCsrO1xuICAgIHRoaXMuX3JlamVjdChyZWFzb24pO1xufTtcblxucmV0dXJuIFByb21pc2VBcnJheTtcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNCBQZXRrYSBBbnRvbm92XG4gKiBcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczo8L3A+XG4gKiBcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqIFxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICogXG4gKi9cblwidXNlIHN0cmljdFwiO1xudmFyIHV0aWwgPSByZXF1aXJlKFwiLi91dGlsLmpzXCIpO1xudmFyIG1heWJlV3JhcEFzRXJyb3IgPSB1dGlsLm1heWJlV3JhcEFzRXJyb3I7XG52YXIgZXJyb3JzID0gcmVxdWlyZShcIi4vZXJyb3JzLmpzXCIpO1xudmFyIFRpbWVvdXRFcnJvciA9IGVycm9ycy5UaW1lb3V0RXJyb3I7XG52YXIgUmVqZWN0aW9uRXJyb3IgPSBlcnJvcnMuUmVqZWN0aW9uRXJyb3I7XG52YXIgYXN5bmMgPSByZXF1aXJlKFwiLi9hc3luYy5qc1wiKTtcbnZhciBoYXZlR2V0dGVycyA9IHV0aWwuaGF2ZUdldHRlcnM7XG52YXIgZXM1ID0gcmVxdWlyZShcIi4vZXM1LmpzXCIpO1xuXG5mdW5jdGlvbiBpc1VudHlwZWRFcnJvcihvYmopIHtcbiAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgRXJyb3IgJiZcbiAgICAgICAgZXM1LmdldFByb3RvdHlwZU9mKG9iaikgPT09IEVycm9yLnByb3RvdHlwZTtcbn1cblxuZnVuY3Rpb24gd3JhcEFzUmVqZWN0aW9uRXJyb3Iob2JqKSB7XG4gICAgdmFyIHJldDtcbiAgICBpZiAoaXNVbnR5cGVkRXJyb3Iob2JqKSkge1xuICAgICAgICByZXQgPSBuZXcgUmVqZWN0aW9uRXJyb3Iob2JqKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldCA9IG9iajtcbiAgICB9XG4gICAgZXJyb3JzLm1hcmtBc09yaWdpbmF0aW5nRnJvbVJlamVjdGlvbihyZXQpO1xuICAgIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIG5vZGViYWNrRm9yUHJvbWlzZShwcm9taXNlKSB7XG4gICAgZnVuY3Rpb24gUHJvbWlzZVJlc29sdmVyJF9jYWxsYmFjayhlcnIsIHZhbHVlKSB7XG4gICAgICAgIGlmIChwcm9taXNlID09PSBudWxsKSByZXR1cm47XG5cbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgdmFyIHdyYXBwZWQgPSB3cmFwQXNSZWplY3Rpb25FcnJvcihtYXliZVdyYXBBc0Vycm9yKGVycikpO1xuICAgICAgICAgICAgcHJvbWlzZS5fYXR0YWNoRXh0cmFUcmFjZSh3cmFwcGVkKTtcbiAgICAgICAgICAgIHByb21pc2UuX3JlamVjdCh3cmFwcGVkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMikge1xuICAgICAgICAgICAgICAgIHZhciAkX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGg7dmFyIGFyZ3MgPSBuZXcgQXJyYXkoJF9sZW4gLSAxKTsgZm9yKHZhciAkX2kgPSAxOyAkX2kgPCAkX2xlbjsgKyskX2kpIHthcmdzWyRfaSAtIDFdID0gYXJndW1lbnRzWyRfaV07fVxuICAgICAgICAgICAgICAgIHByb21pc2UuX2Z1bGZpbGwoYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwcm9taXNlLl9mdWxmaWxsKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHByb21pc2UgPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZVJlc29sdmVyJF9jYWxsYmFjaztcbn1cblxuXG52YXIgUHJvbWlzZVJlc29sdmVyO1xuaWYgKCFoYXZlR2V0dGVycykge1xuICAgIFByb21pc2VSZXNvbHZlciA9IGZ1bmN0aW9uIFByb21pc2VSZXNvbHZlcihwcm9taXNlKSB7XG4gICAgICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gICAgICAgIHRoaXMuYXNDYWxsYmFjayA9IG5vZGViYWNrRm9yUHJvbWlzZShwcm9taXNlKTtcbiAgICAgICAgdGhpcy5jYWxsYmFjayA9IHRoaXMuYXNDYWxsYmFjaztcbiAgICB9O1xufVxuZWxzZSB7XG4gICAgUHJvbWlzZVJlc29sdmVyID0gZnVuY3Rpb24gUHJvbWlzZVJlc29sdmVyKHByb21pc2UpIHtcbiAgICAgICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB9O1xufVxuaWYgKGhhdmVHZXR0ZXJzKSB7XG4gICAgdmFyIHByb3AgPSB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZWJhY2tGb3JQcm9taXNlKHRoaXMucHJvbWlzZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGVzNS5kZWZpbmVQcm9wZXJ0eShQcm9taXNlUmVzb2x2ZXIucHJvdG90eXBlLCBcImFzQ2FsbGJhY2tcIiwgcHJvcCk7XG4gICAgZXM1LmRlZmluZVByb3BlcnR5KFByb21pc2VSZXNvbHZlci5wcm90b3R5cGUsIFwiY2FsbGJhY2tcIiwgcHJvcCk7XG59XG5cblByb21pc2VSZXNvbHZlci5fbm9kZWJhY2tGb3JQcm9taXNlID0gbm9kZWJhY2tGb3JQcm9taXNlO1xuXG5Qcm9taXNlUmVzb2x2ZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gUHJvbWlzZVJlc29sdmVyJHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgUHJvbWlzZVJlc29sdmVyXVwiO1xufTtcblxuUHJvbWlzZVJlc29sdmVyLnByb3RvdHlwZS5yZXNvbHZlID1cblByb21pc2VSZXNvbHZlci5wcm90b3R5cGUuZnVsZmlsbCA9IGZ1bmN0aW9uIFByb21pc2VSZXNvbHZlciRyZXNvbHZlKHZhbHVlKSB7XG4gICAgdmFyIHByb21pc2UgPSB0aGlzLnByb21pc2U7XG4gICAgaWYgKChwcm9taXNlID09PSB2b2lkIDApIHx8IChwcm9taXNlLl90cnlGb2xsb3cgPT09IHZvaWQgMCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIklsbGVnYWwgaW52b2NhdGlvbiwgcmVzb2x2ZXIgcmVzb2x2ZS9yZWplY3QgbXVzdCBiZSBjYWxsZWQgd2l0aGluIGEgcmVzb2x2ZXIgY29udGV4dC4gQ29uc2lkZXIgdXNpbmcgdGhlIHByb21pc2UgY29uc3RydWN0b3IgaW5zdGVhZC5cIik7XG4gICAgfVxuICAgIGlmIChwcm9taXNlLl90cnlGb2xsb3codmFsdWUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYXN5bmMuaW52b2tlKHByb21pc2UuX2Z1bGZpbGwsIHByb21pc2UsIHZhbHVlKTtcbn07XG5cblByb21pc2VSZXNvbHZlci5wcm90b3R5cGUucmVqZWN0ID0gZnVuY3Rpb24gUHJvbWlzZVJlc29sdmVyJHJlamVjdChyZWFzb24pIHtcbiAgICB2YXIgcHJvbWlzZSA9IHRoaXMucHJvbWlzZTtcbiAgICBpZiAoKHByb21pc2UgPT09IHZvaWQgMCkgfHwgKHByb21pc2UuX2F0dGFjaEV4dHJhVHJhY2UgPT09IHZvaWQgMCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIklsbGVnYWwgaW52b2NhdGlvbiwgcmVzb2x2ZXIgcmVzb2x2ZS9yZWplY3QgbXVzdCBiZSBjYWxsZWQgd2l0aGluIGEgcmVzb2x2ZXIgY29udGV4dC4gQ29uc2lkZXIgdXNpbmcgdGhlIHByb21pc2UgY29uc3RydWN0b3IgaW5zdGVhZC5cIik7XG4gICAgfVxuICAgIGVycm9ycy5tYXJrQXNPcmlnaW5hdGluZ0Zyb21SZWplY3Rpb24ocmVhc29uKTtcbiAgICB2YXIgdHJhY2UgPSBlcnJvcnMuY2FuQXR0YWNoKHJlYXNvbikgPyByZWFzb24gOiBuZXcgRXJyb3IocmVhc29uICsgXCJcIik7XG4gICAgcHJvbWlzZS5fYXR0YWNoRXh0cmFUcmFjZSh0cmFjZSk7XG4gICAgYXN5bmMuaW52b2tlKHByb21pc2UuX3JlamVjdCwgcHJvbWlzZSwgcmVhc29uKTtcbiAgICBpZiAodHJhY2UgIT09IHJlYXNvbikge1xuICAgICAgICBhc3luYy5pbnZva2UodGhpcy5fc2V0Q2FycmllZFN0YWNrVHJhY2UsIHRoaXMsIHRyYWNlKTtcbiAgICB9XG59O1xuXG5Qcm9taXNlUmVzb2x2ZXIucHJvdG90eXBlLnByb2dyZXNzID1cbmZ1bmN0aW9uIFByb21pc2VSZXNvbHZlciRwcm9ncmVzcyh2YWx1ZSkge1xuICAgIGFzeW5jLmludm9rZSh0aGlzLnByb21pc2UuX3Byb2dyZXNzLCB0aGlzLnByb21pc2UsIHZhbHVlKTtcbn07XG5cblByb21pc2VSZXNvbHZlci5wcm90b3R5cGUuY2FuY2VsID0gZnVuY3Rpb24gUHJvbWlzZVJlc29sdmVyJGNhbmNlbCgpIHtcbiAgICBhc3luYy5pbnZva2UodGhpcy5wcm9taXNlLmNhbmNlbCwgdGhpcy5wcm9taXNlLCB2b2lkIDApO1xufTtcblxuUHJvbWlzZVJlc29sdmVyLnByb3RvdHlwZS50aW1lb3V0ID0gZnVuY3Rpb24gUHJvbWlzZVJlc29sdmVyJHRpbWVvdXQoKSB7XG4gICAgdGhpcy5yZWplY3QobmV3IFRpbWVvdXRFcnJvcihcInRpbWVvdXRcIikpO1xufTtcblxuUHJvbWlzZVJlc29sdmVyLnByb3RvdHlwZS5pc1Jlc29sdmVkID0gZnVuY3Rpb24gUHJvbWlzZVJlc29sdmVyJGlzUmVzb2x2ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvbWlzZS5pc1Jlc29sdmVkKCk7XG59O1xuXG5Qcm9taXNlUmVzb2x2ZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIFByb21pc2VSZXNvbHZlciR0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvbWlzZS50b0pTT04oKTtcbn07XG5cblByb21pc2VSZXNvbHZlci5wcm90b3R5cGUuX3NldENhcnJpZWRTdGFja1RyYWNlID1cbmZ1bmN0aW9uIFByb21pc2VSZXNvbHZlciRfc2V0Q2FycmllZFN0YWNrVHJhY2UodHJhY2UpIHtcbiAgICBpZiAodGhpcy5wcm9taXNlLmlzUmVqZWN0ZWQoKSkge1xuICAgICAgICB0aGlzLnByb21pc2UuX3NldENhcnJpZWRTdGFja1RyYWNlKHRyYWNlKTtcbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFByb21pc2VSZXNvbHZlcjtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0IFBldGthIEFudG9ub3ZcbiAqIFxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOjwvcD5cbiAqIFxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICogXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKiBcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFByb21pc2UsIElOVEVSTkFMKSB7XG52YXIgZXJyb3JzID0gcmVxdWlyZShcIi4vZXJyb3JzLmpzXCIpO1xudmFyIFR5cGVFcnJvciA9IGVycm9ycy5UeXBlRXJyb3I7XG52YXIgdXRpbCA9IHJlcXVpcmUoXCIuL3V0aWwuanNcIik7XG52YXIgaXNBcnJheSA9IHV0aWwuaXNBcnJheTtcbnZhciBlcnJvck9iaiA9IHV0aWwuZXJyb3JPYmo7XG52YXIgdHJ5Q2F0Y2gxID0gdXRpbC50cnlDYXRjaDE7XG52YXIgeWllbGRIYW5kbGVycyA9IFtdO1xuXG5mdW5jdGlvbiBwcm9taXNlRnJvbVlpZWxkSGFuZGxlcih2YWx1ZSkge1xuICAgIHZhciBfeWllbGRIYW5kbGVycyA9IHlpZWxkSGFuZGxlcnM7XG4gICAgdmFyIF9lcnJvck9iaiA9IGVycm9yT2JqO1xuICAgIHZhciBfUHJvbWlzZSA9IFByb21pc2U7XG4gICAgdmFyIGxlbiA9IF95aWVsZEhhbmRsZXJzLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB0cnlDYXRjaDEoX3lpZWxkSGFuZGxlcnNbaV0sIHZvaWQgMCwgdmFsdWUpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBfZXJyb3JPYmopIHtcbiAgICAgICAgICAgIHJldHVybiBfUHJvbWlzZS5yZWplY3QoX2Vycm9yT2JqLmUpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtYXliZVByb21pc2UgPSBfUHJvbWlzZS5fY2FzdChyZXN1bHQsXG4gICAgICAgICAgICBwcm9taXNlRnJvbVlpZWxkSGFuZGxlciwgdm9pZCAwKTtcbiAgICAgICAgaWYgKG1heWJlUHJvbWlzZSBpbnN0YW5jZW9mIF9Qcm9taXNlKSByZXR1cm4gbWF5YmVQcm9taXNlO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gUHJvbWlzZVNwYXduKGdlbmVyYXRvckZ1bmN0aW9uLCByZWNlaXZlcikge1xuICAgIHZhciBwcm9taXNlID0gdGhpcy5fcHJvbWlzZSA9IG5ldyBQcm9taXNlKElOVEVSTkFMKTtcbiAgICBwcm9taXNlLl9zZXRUcmFjZSh2b2lkIDApO1xuICAgIHRoaXMuX2dlbmVyYXRvckZ1bmN0aW9uID0gZ2VuZXJhdG9yRnVuY3Rpb247XG4gICAgdGhpcy5fcmVjZWl2ZXIgPSByZWNlaXZlcjtcbiAgICB0aGlzLl9nZW5lcmF0b3IgPSB2b2lkIDA7XG59XG5cblByb21pc2VTcGF3bi5wcm90b3R5cGUucHJvbWlzZSA9IGZ1bmN0aW9uIFByb21pc2VTcGF3biRwcm9taXNlKCkge1xuICAgIHJldHVybiB0aGlzLl9wcm9taXNlO1xufTtcblxuUHJvbWlzZVNwYXduLnByb3RvdHlwZS5fcnVuID0gZnVuY3Rpb24gUHJvbWlzZVNwYXduJF9ydW4oKSB7XG4gICAgdGhpcy5fZ2VuZXJhdG9yID0gdGhpcy5fZ2VuZXJhdG9yRnVuY3Rpb24uY2FsbCh0aGlzLl9yZWNlaXZlcik7XG4gICAgdGhpcy5fcmVjZWl2ZXIgPVxuICAgICAgICB0aGlzLl9nZW5lcmF0b3JGdW5jdGlvbiA9IHZvaWQgMDtcbiAgICB0aGlzLl9uZXh0KHZvaWQgMCk7XG59O1xuXG5Qcm9taXNlU3Bhd24ucHJvdG90eXBlLl9jb250aW51ZSA9IGZ1bmN0aW9uIFByb21pc2VTcGF3biRfY29udGludWUocmVzdWx0KSB7XG4gICAgaWYgKHJlc3VsdCA9PT0gZXJyb3JPYmopIHtcbiAgICAgICAgdGhpcy5fZ2VuZXJhdG9yID0gdm9pZCAwO1xuICAgICAgICB2YXIgdHJhY2UgPSBlcnJvcnMuY2FuQXR0YWNoKHJlc3VsdC5lKVxuICAgICAgICAgICAgPyByZXN1bHQuZSA6IG5ldyBFcnJvcihyZXN1bHQuZSArIFwiXCIpO1xuICAgICAgICB0aGlzLl9wcm9taXNlLl9hdHRhY2hFeHRyYVRyYWNlKHRyYWNlKTtcbiAgICAgICAgdGhpcy5fcHJvbWlzZS5fcmVqZWN0KHJlc3VsdC5lLCB0cmFjZSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgaWYgKHJlc3VsdC5kb25lID09PSB0cnVlKSB7XG4gICAgICAgIHRoaXMuX2dlbmVyYXRvciA9IHZvaWQgMDtcbiAgICAgICAgaWYgKCF0aGlzLl9wcm9taXNlLl90cnlGb2xsb3codmFsdWUpKSB7XG4gICAgICAgICAgICB0aGlzLl9wcm9taXNlLl9mdWxmaWxsKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIG1heWJlUHJvbWlzZSA9IFByb21pc2UuX2Nhc3QodmFsdWUsIFByb21pc2VTcGF3biRfY29udGludWUsIHZvaWQgMCk7XG4gICAgICAgIGlmICghKG1heWJlUHJvbWlzZSBpbnN0YW5jZW9mIFByb21pc2UpKSB7XG4gICAgICAgICAgICBpZiAoaXNBcnJheShtYXliZVByb21pc2UpKSB7XG4gICAgICAgICAgICAgICAgbWF5YmVQcm9taXNlID0gUHJvbWlzZS5hbGwobWF5YmVQcm9taXNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG1heWJlUHJvbWlzZSA9IHByb21pc2VGcm9tWWllbGRIYW5kbGVyKG1heWJlUHJvbWlzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWF5YmVQcm9taXNlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGhyb3cobmV3IFR5cGVFcnJvcihcIkEgdmFsdWUgd2FzIHlpZWxkZWQgdGhhdCBjb3VsZCBub3QgYmUgdHJlYXRlZCBhcyBhIHByb21pc2VcIikpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBtYXliZVByb21pc2UuX3RoZW4oXG4gICAgICAgICAgICB0aGlzLl9uZXh0LFxuICAgICAgICAgICAgdGhpcy5fdGhyb3csXG4gICAgICAgICAgICB2b2lkIDAsXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgbnVsbFxuICAgICAgICk7XG4gICAgfVxufTtcblxuUHJvbWlzZVNwYXduLnByb3RvdHlwZS5fdGhyb3cgPSBmdW5jdGlvbiBQcm9taXNlU3Bhd24kX3Rocm93KHJlYXNvbikge1xuICAgIGlmIChlcnJvcnMuY2FuQXR0YWNoKHJlYXNvbikpXG4gICAgICAgIHRoaXMuX3Byb21pc2UuX2F0dGFjaEV4dHJhVHJhY2UocmVhc29uKTtcbiAgICB0aGlzLl9jb250aW51ZShcbiAgICAgICAgdHJ5Q2F0Y2gxKHRoaXMuX2dlbmVyYXRvcltcInRocm93XCJdLCB0aGlzLl9nZW5lcmF0b3IsIHJlYXNvbilcbiAgICk7XG59O1xuXG5Qcm9taXNlU3Bhd24ucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gUHJvbWlzZVNwYXduJF9uZXh0KHZhbHVlKSB7XG4gICAgdGhpcy5fY29udGludWUoXG4gICAgICAgIHRyeUNhdGNoMSh0aGlzLl9nZW5lcmF0b3IubmV4dCwgdGhpcy5fZ2VuZXJhdG9yLCB2YWx1ZSlcbiAgICk7XG59O1xuXG5Qcm9taXNlU3Bhd24uYWRkWWllbGRIYW5kbGVyID0gZnVuY3Rpb24gUHJvbWlzZVNwYXduJEFkZFlpZWxkSGFuZGxlcihmbikge1xuICAgIGlmICh0eXBlb2YgZm4gIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcImZuIG11c3QgYmUgYSBmdW5jdGlvblwiKTtcbiAgICB5aWVsZEhhbmRsZXJzLnB1c2goZm4pO1xufTtcblxucmV0dXJuIFByb21pc2VTcGF3bjtcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNCBQZXRrYSBBbnRvbm92XG4gKiBcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczo8L3A+XG4gKiBcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqIFxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICogXG4gKi9cblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihQcm9taXNlLCBJTlRFUk5BTCkge1xudmFyIFRISVMgPSB7fTtcbnZhciB1dGlsID0gcmVxdWlyZShcIi4vdXRpbC5qc1wiKTtcbnZhciBlczUgPSByZXF1aXJlKFwiLi9lczUuanNcIik7XG52YXIgbm9kZWJhY2tGb3JQcm9taXNlID0gcmVxdWlyZShcIi4vcHJvbWlzZV9yZXNvbHZlci5qc1wiKVxuICAgIC5fbm9kZWJhY2tGb3JQcm9taXNlO1xudmFyIHdpdGhBcHBlbmRlZCA9IHV0aWwud2l0aEFwcGVuZGVkO1xudmFyIG1heWJlV3JhcEFzRXJyb3IgPSB1dGlsLm1heWJlV3JhcEFzRXJyb3I7XG52YXIgY2FuRXZhbHVhdGUgPSB1dGlsLmNhbkV2YWx1YXRlO1xudmFyIGRlcHJlY2F0ZWQgPSB1dGlsLmRlcHJlY2F0ZWQ7XG52YXIgVHlwZUVycm9yID0gcmVxdWlyZShcIi4vZXJyb3JzXCIpLlR5cGVFcnJvcjtcblxuXG52YXIgcmFzeW5jU3VmZml4ID0gbmV3IFJlZ0V4cChcIkFzeW5jXCIgKyBcIiRcIik7XG5mdW5jdGlvbiBpc1Byb21pc2lmaWVkKGZuKSB7XG4gICAgcmV0dXJuIGZuLl9faXNQcm9taXNpZmllZF9fID09PSB0cnVlO1xufVxuZnVuY3Rpb24gaGFzUHJvbWlzaWZpZWQob2JqLCBrZXkpIHtcbiAgICB2YXIgY29udGFpbnNLZXkgPSAoKGtleSArIFwiQXN5bmNcIikgaW4gb2JqKTtcbiAgICByZXR1cm4gY29udGFpbnNLZXkgPyBpc1Byb21pc2lmaWVkKG9ialtrZXkgKyBcIkFzeW5jXCJdKVxuICAgICAgICAgICAgICAgICAgICAgICA6IGZhbHNlO1xufVxuZnVuY3Rpb24gY2hlY2tWYWxpZChyZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJldC5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICB2YXIga2V5ID0gcmV0W2ldO1xuICAgICAgICBpZiAocmFzeW5jU3VmZml4LnRlc3Qoa2V5KSkge1xuICAgICAgICAgICAgdmFyIGtleVdpdGhvdXRBc3luY1N1ZmZpeCA9IGtleS5yZXBsYWNlKHJhc3luY1N1ZmZpeCwgXCJcIik7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHJldC5sZW5ndGg7IGogKz0gMikge1xuICAgICAgICAgICAgICAgIGlmIChyZXRbal0gPT09IGtleVdpdGhvdXRBc3luY1N1ZmZpeCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHByb21pc2lmeSBhbiBBUEkgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0aGF0IGhhcyBub3JtYWwgbWV0aG9kcyB3aXRoIEFzeW5jLXN1ZmZpeFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG52YXIgaW5oZXJpdGVkTWV0aG9kcyA9IChmdW5jdGlvbigpIHtcbiAgICBpZiAoZXM1LmlzRVM1KSB7XG4gICAgICAgIHZhciBjcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xuICAgICAgICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGN1cikge1xuICAgICAgICAgICAgdmFyIHJldCA9IFtdO1xuICAgICAgICAgICAgdmFyIHZpc2l0ZWRLZXlzID0gY3JlYXRlKG51bGwpO1xuICAgICAgICAgICAgdmFyIG9yaWdpbmFsID0gY3VyO1xuICAgICAgICAgICAgd2hpbGUgKGN1ciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHZhciBrZXlzID0gZXM1LmtleXMoY3VyKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0ga2V5cy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZpc2l0ZWRLZXlzW2tleV0pIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB2aXNpdGVkS2V5c1trZXldID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlc2MgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoY3VyLCBrZXkpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChkZXNjICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBkZXNjLnZhbHVlID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICFpc1Byb21pc2lmaWVkKGRlc2MudmFsdWUpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAhaGFzUHJvbWlzaWZpZWQob3JpZ2luYWwsIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldC5wdXNoKGtleSwgZGVzYy52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY3VyID0gZXM1LmdldFByb3RvdHlwZU9mKGN1cik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaGVja1ZhbGlkKHJldCk7XG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iaikge1xuICAgICAgICAgICAgdmFyIHJldCA9IFtdO1xuICAgICAgICAgICAgLypqc2hpbnQgZm9yaW46ZmFsc2UgKi9cbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICB2YXIgZm4gPSBvYmpba2V5XTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZuID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgICAgICAgICAgICAgICAgIWlzUHJvbWlzaWZpZWQoZm4pICYmXG4gICAgICAgICAgICAgICAgICAgICFoYXNQcm9taXNpZmllZChvYmosIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0LnB1c2goa2V5LCBmbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2hlY2tWYWxpZChyZXQpO1xuICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfTtcbiAgICB9XG59KSgpO1xuXG5mdW5jdGlvbiBzd2l0Y2hDYXNlQXJndW1lbnRPcmRlcihsaWtlbHlBcmd1bWVudENvdW50KSB7XG4gICAgdmFyIHJldCA9IFtsaWtlbHlBcmd1bWVudENvdW50XTtcbiAgICB2YXIgbWluID0gTWF0aC5tYXgoMCwgbGlrZWx5QXJndW1lbnRDb3VudCAtIDEgLSA1KTtcbiAgICBmb3IodmFyIGkgPSBsaWtlbHlBcmd1bWVudENvdW50IC0gMTsgaSA+PSBtaW47IC0taSkge1xuICAgICAgICBpZiAoaSA9PT0gbGlrZWx5QXJndW1lbnRDb3VudCkgY29udGludWU7XG4gICAgICAgIHJldC5wdXNoKGkpO1xuICAgIH1cbiAgICBmb3IodmFyIGkgPSBsaWtlbHlBcmd1bWVudENvdW50ICsgMTsgaSA8PSA1OyArK2kpIHtcbiAgICAgICAgcmV0LnB1c2goaSk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIHBhcmFtZXRlckRlY2xhcmF0aW9uKHBhcmFtZXRlckNvdW50KSB7XG4gICAgdmFyIHJldCA9IG5ldyBBcnJheShwYXJhbWV0ZXJDb3VudCk7XG4gICAgZm9yKHZhciBpID0gMDsgaSA8IHJldC5sZW5ndGg7ICsraSkge1xuICAgICAgICByZXRbaV0gPSBcIl9hcmdcIiArIGk7XG4gICAgfVxuICAgIHJldHVybiByZXQuam9pbihcIiwgXCIpO1xufVxuXG5mdW5jdGlvbiBwYXJhbWV0ZXJDb3VudChmbikge1xuICAgIGlmICh0eXBlb2YgZm4ubGVuZ3RoID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1heChNYXRoLm1pbihmbi5sZW5ndGgsIDEwMjMgKyAxKSwgMCk7XG4gICAgfVxuICAgIHJldHVybiAwO1xufVxuXG52YXIgcmlkZW50ID0gL15bYS16JF9dW2EteiRfMC05XSokL2k7XG5mdW5jdGlvbiBwcm9wZXJ0eUFjY2VzcyhpZCkge1xuICAgIGlmIChyaWRlbnQudGVzdChpZCkpIHtcbiAgICAgICAgcmV0dXJuIFwiLlwiICsgaWQ7XG4gICAgfVxuICAgIGVsc2UgcmV0dXJuIFwiWydcIiArIGlkLnJlcGxhY2UoLyhbJ1xcXFxdKS9nLCBcIlxcXFwkMVwiKSArIFwiJ11cIjtcbn1cblxuZnVuY3Rpb24gbWFrZU5vZGVQcm9taXNpZmllZEV2YWwoY2FsbGJhY2ssIHJlY2VpdmVyLCBvcmlnaW5hbE5hbWUsIGZuKSB7XG4gICAgdmFyIG5ld1BhcmFtZXRlckNvdW50ID0gTWF0aC5tYXgoMCwgcGFyYW1ldGVyQ291bnQoZm4pIC0gMSk7XG4gICAgdmFyIGFyZ3VtZW50T3JkZXIgPSBzd2l0Y2hDYXNlQXJndW1lbnRPcmRlcihuZXdQYXJhbWV0ZXJDb3VudCk7XG5cbiAgICB2YXIgY2FsbGJhY2tOYW1lID0gKHR5cGVvZiBvcmlnaW5hbE5hbWUgPT09IFwic3RyaW5nXCIgP1xuICAgICAgICBvcmlnaW5hbE5hbWUgKyBcIkFzeW5jXCIgOlxuICAgICAgICBcInByb21pc2lmaWVkXCIpO1xuXG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVDYWxsRm9yQXJndW1lbnRDb3VudChjb3VudCkge1xuICAgICAgICB2YXIgYXJncyA9IG5ldyBBcnJheShjb3VudCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcmdzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICBhcmdzW2ldID0gXCJhcmd1bWVudHNbXCIgKyBpICsgXCJdXCI7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvbW1hID0gY291bnQgPiAwID8gXCIsXCIgOiBcIlwiO1xuXG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09IFwic3RyaW5nXCIgJiZcbiAgICAgICAgICAgIHJlY2VpdmVyID09PSBUSElTKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJ0aGlzXCIgKyBwcm9wZXJ0eUFjY2VzcyhjYWxsYmFjaykgKyBcIihcIithcmdzLmpvaW4oXCIsXCIpICtcbiAgICAgICAgICAgICAgICBjb21tYSArXCIgZm4pO1wiK1xuICAgICAgICAgICAgICAgIFwiYnJlYWs7XCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChyZWNlaXZlciA9PT0gdm9pZCAwXG4gICAgICAgICAgICA/IFwiY2FsbGJhY2soXCIrYXJncy5qb2luKFwiLFwiKSsgY29tbWEgK1wiIGZuKTtcIlxuICAgICAgICAgICAgOiBcImNhbGxiYWNrLmNhbGwoXCIrKHJlY2VpdmVyID09PSBUSElTXG4gICAgICAgICAgICAgICAgPyBcInRoaXNcIlxuICAgICAgICAgICAgICAgIDogXCJyZWNlaXZlclwiKStcIiwgXCIrYXJncy5qb2luKFwiLFwiKSArIGNvbW1hICsgXCIgZm4pO1wiKSArXG4gICAgICAgIFwiYnJlYWs7XCI7XG4gICAgfVxuXG4gICAgaWYgKCFyaWRlbnQudGVzdChjYWxsYmFja05hbWUpKSB7XG4gICAgICAgIGNhbGxiYWNrTmFtZSA9IFwicHJvbWlzaWZpZWRcIjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5lcmF0ZUFyZ3VtZW50U3dpdGNoQ2FzZSgpIHtcbiAgICAgICAgdmFyIHJldCA9IFwiXCI7XG4gICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBhcmd1bWVudE9yZGVyLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICByZXQgKz0gXCJjYXNlIFwiICsgYXJndW1lbnRPcmRlcltpXSArXCI6XCIgK1xuICAgICAgICAgICAgICAgIGdlbmVyYXRlQ2FsbEZvckFyZ3VtZW50Q291bnQoYXJndW1lbnRPcmRlcltpXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0ICs9IFwiZGVmYXVsdDogdmFyIGFyZ3MgPSBuZXcgQXJyYXkobGVuICsgMSk7XCIgK1xuICAgICAgICAgICAgXCJ2YXIgaSA9IDA7XCIgK1xuICAgICAgICAgICAgXCJmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7IFwiICtcbiAgICAgICAgICAgIFwiICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcIiArXG4gICAgICAgICAgICBcIn1cIiArXG4gICAgICAgICAgICBcImFyZ3NbaV0gPSBmbjtcIiArXG5cbiAgICAgICAgICAgICh0eXBlb2YgY2FsbGJhY2sgPT09IFwic3RyaW5nXCJcbiAgICAgICAgICAgID8gXCJ0aGlzXCIgKyBwcm9wZXJ0eUFjY2VzcyhjYWxsYmFjaykgKyBcIi5hcHBseShcIlxuICAgICAgICAgICAgOiBcImNhbGxiYWNrLmFwcGx5KFwiKSArXG5cbiAgICAgICAgICAgIChyZWNlaXZlciA9PT0gVEhJUyA/IFwidGhpc1wiIDogXCJyZWNlaXZlclwiKSArXG4gICAgICAgICAgICBcIiwgYXJncyk7IGJyZWFrO1wiO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgRnVuY3Rpb24oXCJQcm9taXNlXCIsIFwiY2FsbGJhY2tcIiwgXCJyZWNlaXZlclwiLFxuICAgICAgICAgICAgXCJ3aXRoQXBwZW5kZWRcIiwgXCJtYXliZVdyYXBBc0Vycm9yXCIsIFwibm9kZWJhY2tGb3JQcm9taXNlXCIsXG4gICAgICAgICAgICBcIklOVEVSTkFMXCIsXG4gICAgICAgIFwidmFyIHJldCA9IGZ1bmN0aW9uIFwiICsgY2FsbGJhY2tOYW1lICtcbiAgICAgICAgXCIoXCIgKyBwYXJhbWV0ZXJEZWNsYXJhdGlvbihuZXdQYXJhbWV0ZXJDb3VudCkgKyBcIikge1xcXCJ1c2Ugc3RyaWN0XFxcIjtcIiArXG4gICAgICAgIFwidmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XCIgK1xuICAgICAgICBcInZhciBwcm9taXNlID0gbmV3IFByb21pc2UoSU5URVJOQUwpO1wiK1xuICAgICAgICBcInByb21pc2UuX3NldFRyYWNlKHZvaWQgMCk7XCIgK1xuICAgICAgICBcInZhciBmbiA9IG5vZGViYWNrRm9yUHJvbWlzZShwcm9taXNlKTtcIitcbiAgICAgICAgXCJ0cnkge1wiICtcbiAgICAgICAgXCJzd2l0Y2gobGVuKSB7XCIgK1xuICAgICAgICBnZW5lcmF0ZUFyZ3VtZW50U3dpdGNoQ2FzZSgpICtcbiAgICAgICAgXCJ9XCIgK1xuICAgICAgICBcIn1cIiArXG4gICAgICAgIFwiY2F0Y2goZSl7IFwiICtcbiAgICAgICAgXCJ2YXIgd3JhcHBlZCA9IG1heWJlV3JhcEFzRXJyb3IoZSk7XCIgK1xuICAgICAgICBcInByb21pc2UuX2F0dGFjaEV4dHJhVHJhY2Uod3JhcHBlZCk7XCIgK1xuICAgICAgICBcInByb21pc2UuX3JlamVjdCh3cmFwcGVkKTtcIiArXG4gICAgICAgIFwifVwiICtcbiAgICAgICAgXCJyZXR1cm4gcHJvbWlzZTtcIiArXG4gICAgICAgIFwiXCIgK1xuICAgICAgICBcIn07IHJldC5fX2lzUHJvbWlzaWZpZWRfXyA9IHRydWU7IHJldHVybiByZXQ7XCJcbiAgICkoUHJvbWlzZSwgY2FsbGJhY2ssIHJlY2VpdmVyLCB3aXRoQXBwZW5kZWQsXG4gICAgICAgIG1heWJlV3JhcEFzRXJyb3IsIG5vZGViYWNrRm9yUHJvbWlzZSwgSU5URVJOQUwpO1xufVxuXG5mdW5jdGlvbiBtYWtlTm9kZVByb21pc2lmaWVkQ2xvc3VyZShjYWxsYmFjaywgcmVjZWl2ZXIpIHtcbiAgICBmdW5jdGlvbiBwcm9taXNpZmllZCgpIHtcbiAgICAgICAgdmFyIF9yZWNlaXZlciA9IHJlY2VpdmVyO1xuICAgICAgICBpZiAocmVjZWl2ZXIgPT09IFRISVMpIF9yZWNlaXZlciA9IHRoaXM7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gX3JlY2VpdmVyW2NhbGxiYWNrXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKElOVEVSTkFMKTtcbiAgICAgICAgcHJvbWlzZS5fc2V0VHJhY2Uodm9pZCAwKTtcbiAgICAgICAgdmFyIGZuID0gbm9kZWJhY2tGb3JQcm9taXNlKHByb21pc2UpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkoX3JlY2VpdmVyLCB3aXRoQXBwZW5kZWQoYXJndW1lbnRzLCBmbikpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoKGUpIHtcbiAgICAgICAgICAgIHZhciB3cmFwcGVkID0gbWF5YmVXcmFwQXNFcnJvcihlKTtcbiAgICAgICAgICAgIHByb21pc2UuX2F0dGFjaEV4dHJhVHJhY2Uod3JhcHBlZCk7XG4gICAgICAgICAgICBwcm9taXNlLl9yZWplY3Qod3JhcHBlZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuICAgIHByb21pc2lmaWVkLl9faXNQcm9taXNpZmllZF9fID0gdHJ1ZTtcbiAgICByZXR1cm4gcHJvbWlzaWZpZWQ7XG59XG5cbnZhciBtYWtlTm9kZVByb21pc2lmaWVkID0gY2FuRXZhbHVhdGVcbiAgICA/IG1ha2VOb2RlUHJvbWlzaWZpZWRFdmFsXG4gICAgOiBtYWtlTm9kZVByb21pc2lmaWVkQ2xvc3VyZTtcblxuZnVuY3Rpb24gX3Byb21pc2lmeShjYWxsYmFjaywgcmVjZWl2ZXIsIGlzQWxsKSB7XG4gICAgaWYgKGlzQWxsKSB7XG4gICAgICAgIHZhciBtZXRob2RzID0gaW5oZXJpdGVkTWV0aG9kcyhjYWxsYmFjayk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBtZXRob2RzLmxlbmd0aDsgaSA8IGxlbjsgaSs9IDIpIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBtZXRob2RzW2ldO1xuICAgICAgICAgICAgdmFyIGZuID0gbWV0aG9kc1tpKzFdO1xuICAgICAgICAgICAgdmFyIHByb21pc2lmaWVkS2V5ID0ga2V5ICsgXCJBc3luY1wiO1xuICAgICAgICAgICAgY2FsbGJhY2tbcHJvbWlzaWZpZWRLZXldID0gbWFrZU5vZGVQcm9taXNpZmllZChrZXksIFRISVMsIGtleSwgZm4pO1xuICAgICAgICB9XG4gICAgICAgIHV0aWwudG9GYXN0UHJvcGVydGllcyhjYWxsYmFjayk7XG4gICAgICAgIHJldHVybiBjYWxsYmFjaztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBtYWtlTm9kZVByb21pc2lmaWVkKGNhbGxiYWNrLCByZWNlaXZlciwgdm9pZCAwLCBjYWxsYmFjayk7XG4gICAgfVxufVxuXG5Qcm9taXNlLnByb21pc2lmeSA9IGZ1bmN0aW9uIFByb21pc2UkUHJvbWlzaWZ5KGZuLCByZWNlaXZlcikge1xuICAgIGlmICh0eXBlb2YgZm4gPT09IFwib2JqZWN0XCIgJiYgZm4gIT09IG51bGwpIHtcbiAgICAgICAgZGVwcmVjYXRlZChcIlByb21pc2UucHJvbWlzaWZ5IGZvciBwcm9taXNpZnlpbmcgZW50aXJlIG9iamVjdHMgaXMgZGVwcmVjYXRlZC4gVXNlIFByb21pc2UucHJvbWlzaWZ5QWxsIGluc3RlYWQuXCIpO1xuICAgICAgICByZXR1cm4gX3Byb21pc2lmeShmbiwgcmVjZWl2ZXIsIHRydWUpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGZuICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImZuIG11c3QgYmUgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gICAgaWYgKGlzUHJvbWlzaWZpZWQoZm4pKSB7XG4gICAgICAgIHJldHVybiBmbjtcbiAgICB9XG4gICAgcmV0dXJuIF9wcm9taXNpZnkoXG4gICAgICAgIGZuLFxuICAgICAgICBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IFRISVMgOiByZWNlaXZlcixcbiAgICAgICAgZmFsc2UpO1xufTtcblxuUHJvbWlzZS5wcm9taXNpZnlBbGwgPSBmdW5jdGlvbiBQcm9taXNlJFByb21pc2lmeUFsbCh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIHRhcmdldCAhPT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcInRoZSB0YXJnZXQgb2YgcHJvbWlzaWZ5QWxsIG11c3QgYmUgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICAgIHJldHVybiBfcHJvbWlzaWZ5KHRhcmdldCwgdm9pZCAwLCB0cnVlKTtcbn07XG59O1xuXG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNCBQZXRrYSBBbnRvbm92XG4gKiBcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczo8L3A+XG4gKiBcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqIFxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICogXG4gKi9cblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihQcm9taXNlLCBQcm9taXNlQXJyYXkpIHtcbnZhciB1dGlsID0gcmVxdWlyZShcIi4vdXRpbC5qc1wiKTtcbnZhciBpbmhlcml0cyA9IHV0aWwuaW5oZXJpdHM7XG52YXIgZXM1ID0gcmVxdWlyZShcIi4vZXM1LmpzXCIpO1xuXG5mdW5jdGlvbiBQcm9wZXJ0aWVzUHJvbWlzZUFycmF5KG9iaiwgYm91bmRUbykge1xuICAgIHZhciBrZXlzID0gZXM1LmtleXMob2JqKTtcbiAgICB2YXIgdmFsdWVzID0gbmV3IEFycmF5KGtleXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdmFsdWVzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgIHZhbHVlc1tpXSA9IG9ialtrZXlzW2ldXTtcbiAgICB9XG4gICAgdGhpcy5jb25zdHJ1Y3RvciQodmFsdWVzLCBib3VuZFRvKTtcbiAgICBpZiAoIXRoaXMuX2lzUmVzb2x2ZWQoKSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0ga2V5cy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgICAgdmFsdWVzLnB1c2goa2V5c1tpXSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5pbmhlcml0cyhQcm9wZXJ0aWVzUHJvbWlzZUFycmF5LCBQcm9taXNlQXJyYXkpO1xuXG5Qcm9wZXJ0aWVzUHJvbWlzZUFycmF5LnByb3RvdHlwZS5faW5pdCA9XG5mdW5jdGlvbiBQcm9wZXJ0aWVzUHJvbWlzZUFycmF5JF9pbml0KCkge1xuICAgIHRoaXMuX2luaXQkKHZvaWQgMCwgLTMpIDtcbn07XG5cblByb3BlcnRpZXNQcm9taXNlQXJyYXkucHJvdG90eXBlLl9wcm9taXNlRnVsZmlsbGVkID1cbmZ1bmN0aW9uIFByb3BlcnRpZXNQcm9taXNlQXJyYXkkX3Byb21pc2VGdWxmaWxsZWQodmFsdWUsIGluZGV4KSB7XG4gICAgaWYgKHRoaXMuX2lzUmVzb2x2ZWQoKSkgcmV0dXJuO1xuICAgIHRoaXMuX3ZhbHVlc1tpbmRleF0gPSB2YWx1ZTtcbiAgICB2YXIgdG90YWxSZXNvbHZlZCA9ICsrdGhpcy5fdG90YWxSZXNvbHZlZDtcbiAgICBpZiAodG90YWxSZXNvbHZlZCA+PSB0aGlzLl9sZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbCA9IHt9O1xuICAgICAgICB2YXIga2V5T2Zmc2V0ID0gdGhpcy5sZW5ndGgoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMubGVuZ3RoKCk7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgICAgdmFsW3RoaXMuX3ZhbHVlc1tpICsga2V5T2Zmc2V0XV0gPSB0aGlzLl92YWx1ZXNbaV07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcmVzb2x2ZSh2YWwpO1xuICAgIH1cbn07XG5cblByb3BlcnRpZXNQcm9taXNlQXJyYXkucHJvdG90eXBlLl9wcm9taXNlUHJvZ3Jlc3NlZCA9XG5mdW5jdGlvbiBQcm9wZXJ0aWVzUHJvbWlzZUFycmF5JF9wcm9taXNlUHJvZ3Jlc3NlZCh2YWx1ZSwgaW5kZXgpIHtcbiAgICBpZiAodGhpcy5faXNSZXNvbHZlZCgpKSByZXR1cm47XG5cbiAgICB0aGlzLl9wcm9taXNlLl9wcm9ncmVzcyh7XG4gICAgICAgIGtleTogdGhpcy5fdmFsdWVzW2luZGV4ICsgdGhpcy5sZW5ndGgoKV0sXG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgIH0pO1xufTtcblxuUHJvbWlzZUFycmF5LlByb3BlcnRpZXNQcm9taXNlQXJyYXkgPSBQcm9wZXJ0aWVzUHJvbWlzZUFycmF5O1xuXG5yZXR1cm4gUHJvcGVydGllc1Byb21pc2VBcnJheTtcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNCBQZXRrYSBBbnRvbm92XG4gKiBcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczo8L3A+XG4gKiBcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqIFxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICogXG4gKi9cblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihQcm9taXNlLCBQcm9taXNlQXJyYXkpIHtcbnZhciBQcm9wZXJ0aWVzUHJvbWlzZUFycmF5ID0gcmVxdWlyZShcIi4vcHJvcGVydGllc19wcm9taXNlX2FycmF5LmpzXCIpKFxuICAgIFByb21pc2UsIFByb21pc2VBcnJheSk7XG52YXIgdXRpbCA9IHJlcXVpcmUoXCIuL3V0aWwuanNcIik7XG52YXIgYXBpUmVqZWN0aW9uID0gcmVxdWlyZShcIi4vZXJyb3JzX2FwaV9yZWplY3Rpb25cIikoUHJvbWlzZSk7XG52YXIgaXNPYmplY3QgPSB1dGlsLmlzT2JqZWN0O1xuXG5mdW5jdGlvbiBQcm9taXNlJF9Qcm9wcyhwcm9taXNlcywgdXNlQm91bmQpIHtcbiAgICB2YXIgcmV0O1xuICAgIHZhciBjYXN0VmFsdWUgPSBQcm9taXNlLl9jYXN0KHByb21pc2VzLCB2b2lkIDApO1xuXG4gICAgaWYgKCFpc09iamVjdChjYXN0VmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBhcGlSZWplY3Rpb24oXCJjYW5ub3QgYXdhaXQgcHJvcGVydGllcyBvZiBhIG5vbi1vYmplY3RcIik7XG4gICAgfVxuICAgIGVsc2UgaWYgKGNhc3RWYWx1ZSBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgcmV0ID0gY2FzdFZhbHVlLl90aGVuKFByb21pc2UucHJvcHMsIHZvaWQgMCwgdm9pZCAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgdm9pZCAwLCB2b2lkIDApO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0ID0gbmV3IFByb3BlcnRpZXNQcm9taXNlQXJyYXkoXG4gICAgICAgICAgICBjYXN0VmFsdWUsXG4gICAgICAgICAgICB1c2VCb3VuZCA9PT0gdHJ1ZSAmJiBjYXN0VmFsdWUuX2lzQm91bmQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBjYXN0VmFsdWUuX2JvdW5kVG9cbiAgICAgICAgICAgICAgICAgICAgICAgIDogdm9pZCAwXG4gICAgICAgKS5wcm9taXNlKCk7XG4gICAgICAgIHVzZUJvdW5kID0gZmFsc2U7XG4gICAgfVxuICAgIGlmICh1c2VCb3VuZCA9PT0gdHJ1ZSAmJiBjYXN0VmFsdWUuX2lzQm91bmQoKSkge1xuICAgICAgICByZXQuX3NldEJvdW5kVG8oY2FzdFZhbHVlLl9ib3VuZFRvKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn1cblxuUHJvbWlzZS5wcm90b3R5cGUucHJvcHMgPSBmdW5jdGlvbiBQcm9taXNlJHByb3BzKCkge1xuICAgIHJldHVybiBQcm9taXNlJF9Qcm9wcyh0aGlzLCB0cnVlKTtcbn07XG5cblByb21pc2UucHJvcHMgPSBmdW5jdGlvbiBQcm9taXNlJFByb3BzKHByb21pc2VzKSB7XG4gICAgcmV0dXJuIFByb21pc2UkX1Byb3BzKHByb21pc2VzLCBmYWxzZSk7XG59O1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0IFBldGthIEFudG9ub3ZcbiAqIFxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOjwvcD5cbiAqIFxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICogXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKiBcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBhcnJheUNvcHkoc3JjLCBzcmNJbmRleCwgZHN0LCBkc3RJbmRleCwgbGVuKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBsZW47ICsraikge1xuICAgICAgICBkc3RbaiArIGRzdEluZGV4XSA9IHNyY1tqICsgc3JjSW5kZXhdO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcG93MkF0TGVhc3Qobikge1xuICAgIG4gPSBuID4+PiAwO1xuICAgIG4gPSBuIC0gMTtcbiAgICBuID0gbiB8IChuID4+IDEpO1xuICAgIG4gPSBuIHwgKG4gPj4gMik7XG4gICAgbiA9IG4gfCAobiA+PiA0KTtcbiAgICBuID0gbiB8IChuID4+IDgpO1xuICAgIG4gPSBuIHwgKG4gPj4gMTYpO1xuICAgIHJldHVybiBuICsgMTtcbn1cblxuZnVuY3Rpb24gZ2V0Q2FwYWNpdHkoY2FwYWNpdHkpIHtcbiAgICBpZiAodHlwZW9mIGNhcGFjaXR5ICE9PSBcIm51bWJlclwiKSByZXR1cm4gMTY7XG4gICAgcmV0dXJuIHBvdzJBdExlYXN0KFxuICAgICAgICBNYXRoLm1pbihcbiAgICAgICAgICAgIE1hdGgubWF4KDE2LCBjYXBhY2l0eSksIDEwNzM3NDE4MjQpXG4gICApO1xufVxuXG5mdW5jdGlvbiBRdWV1ZShjYXBhY2l0eSkge1xuICAgIHRoaXMuX2NhcGFjaXR5ID0gZ2V0Q2FwYWNpdHkoY2FwYWNpdHkpO1xuICAgIHRoaXMuX2xlbmd0aCA9IDA7XG4gICAgdGhpcy5fZnJvbnQgPSAwO1xuICAgIHRoaXMuX21ha2VDYXBhY2l0eSgpO1xufVxuXG5RdWV1ZS5wcm90b3R5cGUuX3dpbGxCZU92ZXJDYXBhY2l0eSA9XG5mdW5jdGlvbiBRdWV1ZSRfd2lsbEJlT3ZlckNhcGFjaXR5KHNpemUpIHtcbiAgICByZXR1cm4gdGhpcy5fY2FwYWNpdHkgPCBzaXplO1xufTtcblxuUXVldWUucHJvdG90eXBlLl9wdXNoT25lID0gZnVuY3Rpb24gUXVldWUkX3B1c2hPbmUoYXJnKSB7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoKCk7XG4gICAgdGhpcy5fY2hlY2tDYXBhY2l0eShsZW5ndGggKyAxKTtcbiAgICB2YXIgaSA9ICh0aGlzLl9mcm9udCArIGxlbmd0aCkgJiAodGhpcy5fY2FwYWNpdHkgLSAxKTtcbiAgICB0aGlzW2ldID0gYXJnO1xuICAgIHRoaXMuX2xlbmd0aCA9IGxlbmd0aCArIDE7XG59O1xuXG5RdWV1ZS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIFF1ZXVlJHB1c2goZm4sIHJlY2VpdmVyLCBhcmcpIHtcbiAgICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGgoKSArIDM7XG4gICAgaWYgKHRoaXMuX3dpbGxCZU92ZXJDYXBhY2l0eShsZW5ndGgpKSB7XG4gICAgICAgIHRoaXMuX3B1c2hPbmUoZm4pO1xuICAgICAgICB0aGlzLl9wdXNoT25lKHJlY2VpdmVyKTtcbiAgICAgICAgdGhpcy5fcHVzaE9uZShhcmcpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBqID0gdGhpcy5fZnJvbnQgKyBsZW5ndGggLSAzO1xuICAgIHRoaXMuX2NoZWNrQ2FwYWNpdHkobGVuZ3RoKTtcbiAgICB2YXIgd3JhcE1hc2sgPSB0aGlzLl9jYXBhY2l0eSAtIDE7XG4gICAgdGhpc1soaiArIDApICYgd3JhcE1hc2tdID0gZm47XG4gICAgdGhpc1soaiArIDEpICYgd3JhcE1hc2tdID0gcmVjZWl2ZXI7XG4gICAgdGhpc1soaiArIDIpICYgd3JhcE1hc2tdID0gYXJnO1xuICAgIHRoaXMuX2xlbmd0aCA9IGxlbmd0aDtcbn07XG5cblF1ZXVlLnByb3RvdHlwZS5zaGlmdCA9IGZ1bmN0aW9uIFF1ZXVlJHNoaWZ0KCkge1xuICAgIHZhciBmcm9udCA9IHRoaXMuX2Zyb250LFxuICAgICAgICByZXQgPSB0aGlzW2Zyb250XTtcblxuICAgIHRoaXNbZnJvbnRdID0gdm9pZCAwO1xuICAgIHRoaXMuX2Zyb250ID0gKGZyb250ICsgMSkgJiAodGhpcy5fY2FwYWNpdHkgLSAxKTtcbiAgICB0aGlzLl9sZW5ndGgtLTtcbiAgICByZXR1cm4gcmV0O1xufTtcblxuUXVldWUucHJvdG90eXBlLmxlbmd0aCA9IGZ1bmN0aW9uIFF1ZXVlJGxlbmd0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5fbGVuZ3RoO1xufTtcblxuUXVldWUucHJvdG90eXBlLl9tYWtlQ2FwYWNpdHkgPSBmdW5jdGlvbiBRdWV1ZSRfbWFrZUNhcGFjaXR5KCkge1xuICAgIHZhciBsZW4gPSB0aGlzLl9jYXBhY2l0eTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgIHRoaXNbaV0gPSB2b2lkIDA7XG4gICAgfVxufTtcblxuUXVldWUucHJvdG90eXBlLl9jaGVja0NhcGFjaXR5ID0gZnVuY3Rpb24gUXVldWUkX2NoZWNrQ2FwYWNpdHkoc2l6ZSkge1xuICAgIGlmICh0aGlzLl9jYXBhY2l0eSA8IHNpemUpIHtcbiAgICAgICAgdGhpcy5fcmVzaXplVG8odGhpcy5fY2FwYWNpdHkgPDwgMyk7XG4gICAgfVxufTtcblxuUXVldWUucHJvdG90eXBlLl9yZXNpemVUbyA9IGZ1bmN0aW9uIFF1ZXVlJF9yZXNpemVUbyhjYXBhY2l0eSkge1xuICAgIHZhciBvbGRGcm9udCA9IHRoaXMuX2Zyb250O1xuICAgIHZhciBvbGRDYXBhY2l0eSA9IHRoaXMuX2NhcGFjaXR5O1xuICAgIHZhciBvbGRRdWV1ZSA9IG5ldyBBcnJheShvbGRDYXBhY2l0eSk7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoKCk7XG5cbiAgICBhcnJheUNvcHkodGhpcywgMCwgb2xkUXVldWUsIDAsIG9sZENhcGFjaXR5KTtcbiAgICB0aGlzLl9jYXBhY2l0eSA9IGNhcGFjaXR5O1xuICAgIHRoaXMuX21ha2VDYXBhY2l0eSgpO1xuICAgIHRoaXMuX2Zyb250ID0gMDtcbiAgICBpZiAob2xkRnJvbnQgKyBsZW5ndGggPD0gb2xkQ2FwYWNpdHkpIHtcbiAgICAgICAgYXJyYXlDb3B5KG9sZFF1ZXVlLCBvbGRGcm9udCwgdGhpcywgMCwgbGVuZ3RoKTtcbiAgICB9XG4gICAgZWxzZSB7ICAgICAgICB2YXIgbGVuZ3RoQmVmb3JlV3JhcHBpbmcgPVxuICAgICAgICAgICAgbGVuZ3RoIC0gKChvbGRGcm9udCArIGxlbmd0aCkgJiAob2xkQ2FwYWNpdHkgLSAxKSk7XG5cbiAgICAgICAgYXJyYXlDb3B5KG9sZFF1ZXVlLCBvbGRGcm9udCwgdGhpcywgMCwgbGVuZ3RoQmVmb3JlV3JhcHBpbmcpO1xuICAgICAgICBhcnJheUNvcHkob2xkUXVldWUsIDAsIHRoaXMsIGxlbmd0aEJlZm9yZVdyYXBwaW5nLFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGggLSBsZW5ndGhCZWZvcmVXcmFwcGluZyk7XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBRdWV1ZTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0IFBldGthIEFudG9ub3ZcbiAqIFxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOjwvcD5cbiAqIFxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICogXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKiBcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFByb21pc2UsIElOVEVSTkFMKSB7XG52YXIgYXBpUmVqZWN0aW9uID0gcmVxdWlyZShcIi4vZXJyb3JzX2FwaV9yZWplY3Rpb24uanNcIikoUHJvbWlzZSk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoXCIuL3V0aWwuanNcIikuaXNBcnJheTtcblxudmFyIHJhY2VMYXRlciA9IGZ1bmN0aW9uIFByb21pc2UkX3JhY2VMYXRlcihwcm9taXNlKSB7XG4gICAgcmV0dXJuIHByb21pc2UudGhlbihmdW5jdGlvbihhcnJheSkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZSRfUmFjZShhcnJheSwgcHJvbWlzZSk7XG4gICAgfSk7XG59O1xuXG52YXIgaGFzT3duID0ge30uaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBQcm9taXNlJF9SYWNlKHByb21pc2VzLCBwYXJlbnQpIHtcbiAgICB2YXIgbWF5YmVQcm9taXNlID0gUHJvbWlzZS5fY2FzdChwcm9taXNlcywgdm9pZCAwKTtcblxuICAgIGlmIChtYXliZVByb21pc2UgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgIHJldHVybiByYWNlTGF0ZXIobWF5YmVQcm9taXNlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoIWlzQXJyYXkocHJvbWlzZXMpKSB7XG4gICAgICAgIHJldHVybiBhcGlSZWplY3Rpb24oXCJleHBlY3RpbmcgYW4gYXJyYXksIGEgcHJvbWlzZSBvciBhIHRoZW5hYmxlXCIpO1xuICAgIH1cblxuICAgIHZhciByZXQgPSBuZXcgUHJvbWlzZShJTlRFUk5BTCk7XG4gICAgcmV0Ll9zZXRUcmFjZShwYXJlbnQpO1xuICAgIGlmIChwYXJlbnQgIT09IHZvaWQgMCkge1xuICAgICAgICBpZiAocGFyZW50Ll9pc0JvdW5kKCkpIHtcbiAgICAgICAgICAgIHJldC5fc2V0Qm91bmRUbyhwYXJlbnQuX2JvdW5kVG8pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJlbnQuX2NhbmNlbGxhYmxlKCkpIHtcbiAgICAgICAgICAgIHJldC5fc2V0Q2FuY2VsbGFibGUoKTtcbiAgICAgICAgICAgIHJldC5fY2FuY2VsbGF0aW9uUGFyZW50ID0gcGFyZW50O1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhciBmdWxmaWxsID0gcmV0Ll9mdWxmaWxsO1xuICAgIHZhciByZWplY3QgPSByZXQuX3JlamVjdDtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gcHJvbWlzZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgdmFyIHZhbCA9IHByb21pc2VzW2ldO1xuXG4gICAgICAgIGlmICh2YWwgPT09IHZvaWQgMCAmJiAhKGhhc093bi5jYWxsKHByb21pc2VzLCBpKSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgUHJvbWlzZS5jYXN0KHZhbCkuX3RoZW4oXG4gICAgICAgICAgICBmdWxmaWxsLFxuICAgICAgICAgICAgcmVqZWN0LFxuICAgICAgICAgICAgdm9pZCAwLFxuICAgICAgICAgICAgcmV0LFxuICAgICAgICAgICAgbnVsbFxuICAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59XG5cblByb21pc2UucmFjZSA9IGZ1bmN0aW9uIFByb21pc2UkUmFjZShwcm9taXNlcykge1xuICAgIHJldHVybiBQcm9taXNlJF9SYWNlKHByb21pc2VzLCB2b2lkIDApO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUucmFjZSA9IGZ1bmN0aW9uIFByb21pc2UkcmFjZSgpIHtcbiAgICByZXR1cm4gUHJvbWlzZSRfUmFjZSh0aGlzLCB2b2lkIDApO1xufTtcblxufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0IFBldGthIEFudG9ub3ZcbiAqIFxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOjwvcD5cbiAqIFxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICogXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKiBcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFxuICAgIFByb21pc2UsIFByb21pc2UkX0NyZWF0ZVByb21pc2VBcnJheSxcbiAgICBQcm9taXNlQXJyYXksIGFwaVJlamVjdGlvbiwgSU5URVJOQUwpIHtcblxuZnVuY3Rpb24gUmVkdWN0aW9uKGNhbGxiYWNrLCBpbmRleCwgYWNjdW0sIGl0ZW1zLCByZWNlaXZlcikge1xuICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKElOVEVSTkFMKTtcbiAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgdGhpcy5sZW5ndGggPSBpdGVtcy5sZW5ndGg7XG4gICAgdGhpcy5pdGVtcyA9IGl0ZW1zO1xuICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB0aGlzLnJlY2VpdmVyID0gcmVjZWl2ZXI7XG4gICAgdGhpcy5hY2N1bSA9IGFjY3VtO1xufVxuXG5SZWR1Y3Rpb24ucHJvdG90eXBlLnJlamVjdCA9IGZ1bmN0aW9uIFJlZHVjdGlvbiRyZWplY3QoZSkge1xuICAgIHRoaXMucHJvbWlzZS5fcmVqZWN0KGUpO1xufTtcblxuUmVkdWN0aW9uLnByb3RvdHlwZS5mdWxmaWxsID0gZnVuY3Rpb24gUmVkdWN0aW9uJGZ1bGZpbGwodmFsdWUsIGluZGV4KSB7XG4gICAgdGhpcy5hY2N1bSA9IHZhbHVlO1xuICAgIHRoaXMuaW5kZXggPSBpbmRleCArIDE7XG4gICAgdGhpcy5pdGVyYXRlKCk7XG59O1xuXG5SZWR1Y3Rpb24ucHJvdG90eXBlLml0ZXJhdGUgPSBmdW5jdGlvbiBSZWR1Y3Rpb24kaXRlcmF0ZSgpIHtcbiAgICB2YXIgaSA9IHRoaXMuaW5kZXg7XG4gICAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoO1xuICAgIHZhciBpdGVtcyA9IHRoaXMuaXRlbXM7XG4gICAgdmFyIHJlc3VsdCA9IHRoaXMuYWNjdW07XG4gICAgdmFyIHJlY2VpdmVyID0gdGhpcy5yZWNlaXZlcjtcbiAgICB2YXIgY2FsbGJhY2sgPSB0aGlzLmNhbGxiYWNrO1xuXG4gICAgZm9yICg7IGkgPCBsZW47ICsraSkge1xuICAgICAgICByZXN1bHQgPSBjYWxsYmFjay5jYWxsKHJlY2VpdmVyLCByZXN1bHQsIGl0ZW1zW2ldLCBpLCBsZW4pO1xuICAgICAgICByZXN1bHQgPSBQcm9taXNlLl9jYXN0KHJlc3VsdCwgdm9pZCAwKTtcblxuICAgICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICAgICAgcmVzdWx0Ll90aGVuKFxuICAgICAgICAgICAgICAgIHRoaXMuZnVsZmlsbCwgdGhpcy5yZWplY3QsIHZvaWQgMCwgdGhpcywgaSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5wcm9taXNlLl9mdWxmaWxsKHJlc3VsdCk7XG59O1xuXG5mdW5jdGlvbiBQcm9taXNlJF9yZWR1Y2VyKGZ1bGZpbGxlZHMsIGluaXRpYWxWYWx1ZSkge1xuICAgIHZhciBmbiA9IHRoaXM7XG4gICAgdmFyIHJlY2VpdmVyID0gdm9pZCAwO1xuICAgIGlmICh0eXBlb2YgZm4gIT09IFwiZnVuY3Rpb25cIikgIHtcbiAgICAgICAgcmVjZWl2ZXIgPSBmbi5yZWNlaXZlcjtcbiAgICAgICAgZm4gPSBmbi5mbjtcbiAgICB9XG4gICAgdmFyIGxlbiA9IGZ1bGZpbGxlZHMubGVuZ3RoO1xuICAgIHZhciBhY2N1bSA9IHZvaWQgMDtcbiAgICB2YXIgc3RhcnRJbmRleCA9IDA7XG5cbiAgICBpZiAoaW5pdGlhbFZhbHVlICE9PSB2b2lkIDApIHtcbiAgICAgICAgYWNjdW0gPSBpbml0aWFsVmFsdWU7XG4gICAgICAgIHN0YXJ0SW5kZXggPSAwO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc3RhcnRJbmRleCA9IDE7XG4gICAgICAgIGlmIChsZW4gPiAwKSBhY2N1bSA9IGZ1bGZpbGxlZHNbMF07XG4gICAgfVxuICAgIHZhciBpID0gc3RhcnRJbmRleDtcblxuICAgIGlmIChpID49IGxlbikge1xuICAgICAgICByZXR1cm4gYWNjdW07XG4gICAgfVxuXG4gICAgdmFyIHJlZHVjdGlvbiA9IG5ldyBSZWR1Y3Rpb24oZm4sIGksIGFjY3VtLCBmdWxmaWxsZWRzLCByZWNlaXZlcik7XG4gICAgcmVkdWN0aW9uLml0ZXJhdGUoKTtcbiAgICByZXR1cm4gcmVkdWN0aW9uLnByb21pc2U7XG59XG5cbmZ1bmN0aW9uIFByb21pc2UkX3VucGFja1JlZHVjZXIoZnVsZmlsbGVkcykge1xuICAgIHZhciBmbiA9IHRoaXMuZm47XG4gICAgdmFyIGluaXRpYWxWYWx1ZSA9IHRoaXMuaW5pdGlhbFZhbHVlO1xuICAgIHJldHVybiBQcm9taXNlJF9yZWR1Y2VyLmNhbGwoZm4sIGZ1bGZpbGxlZHMsIGluaXRpYWxWYWx1ZSk7XG59XG5cbmZ1bmN0aW9uIFByb21pc2UkX3Nsb3dSZWR1Y2UoXG4gICAgcHJvbWlzZXMsIGZuLCBpbml0aWFsVmFsdWUsIHVzZUJvdW5kKSB7XG4gICAgcmV0dXJuIGluaXRpYWxWYWx1ZS5fdGhlbihmdW5jdGlvbihpbml0aWFsVmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UkX1JlZHVjZShcbiAgICAgICAgICAgIHByb21pc2VzLCBmbiwgaW5pdGlhbFZhbHVlLCB1c2VCb3VuZCk7XG4gICAgfSwgdm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgdm9pZCAwKTtcbn1cblxuZnVuY3Rpb24gUHJvbWlzZSRfUmVkdWNlKHByb21pc2VzLCBmbiwgaW5pdGlhbFZhbHVlLCB1c2VCb3VuZCkge1xuICAgIGlmICh0eXBlb2YgZm4gIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gYXBpUmVqZWN0aW9uKFwiZm4gbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cblxuICAgIGlmICh1c2VCb3VuZCA9PT0gdHJ1ZSAmJiBwcm9taXNlcy5faXNCb3VuZCgpKSB7XG4gICAgICAgIGZuID0ge1xuICAgICAgICAgICAgZm46IGZuLFxuICAgICAgICAgICAgcmVjZWl2ZXI6IHByb21pc2VzLl9ib3VuZFRvXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKGluaXRpYWxWYWx1ZSAhPT0gdm9pZCAwKSB7XG4gICAgICAgIGlmIChpbml0aWFsVmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICBpZiAoaW5pdGlhbFZhbHVlLmlzRnVsZmlsbGVkKCkpIHtcbiAgICAgICAgICAgICAgICBpbml0aWFsVmFsdWUgPSBpbml0aWFsVmFsdWUuX3NldHRsZWRWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlJF9zbG93UmVkdWNlKHByb21pc2VzLFxuICAgICAgICAgICAgICAgICAgICBmbiwgaW5pdGlhbFZhbHVlLCB1c2VCb3VuZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZSRfQ3JlYXRlUHJvbWlzZUFycmF5KHByb21pc2VzLCBQcm9taXNlQXJyYXksXG4gICAgICAgICAgICB1c2VCb3VuZCA9PT0gdHJ1ZSAmJiBwcm9taXNlcy5faXNCb3VuZCgpXG4gICAgICAgICAgICAgICAgPyBwcm9taXNlcy5fYm91bmRUb1xuICAgICAgICAgICAgICAgIDogdm9pZCAwKVxuICAgICAgICAgICAgLnByb21pc2UoKVxuICAgICAgICAgICAgLl90aGVuKFByb21pc2UkX3VucGFja1JlZHVjZXIsIHZvaWQgMCwgdm9pZCAwLCB7XG4gICAgICAgICAgICAgICAgZm46IGZuLFxuICAgICAgICAgICAgICAgIGluaXRpYWxWYWx1ZTogaW5pdGlhbFZhbHVlXG4gICAgICAgICAgICB9LCB2b2lkIDApO1xuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZSRfQ3JlYXRlUHJvbWlzZUFycmF5KHByb21pc2VzLCBQcm9taXNlQXJyYXksXG4gICAgICAgICAgICB1c2VCb3VuZCA9PT0gdHJ1ZSAmJiBwcm9taXNlcy5faXNCb3VuZCgpXG4gICAgICAgICAgICAgICAgPyBwcm9taXNlcy5fYm91bmRUb1xuICAgICAgICAgICAgICAgIDogdm9pZCAwKS5wcm9taXNlKClcbiAgICAgICAgLl90aGVuKFByb21pc2UkX3JlZHVjZXIsIHZvaWQgMCwgdm9pZCAwLCBmbiwgdm9pZCAwKTtcbn1cblxuXG5Qcm9taXNlLnJlZHVjZSA9IGZ1bmN0aW9uIFByb21pc2UkUmVkdWNlKHByb21pc2VzLCBmbiwgaW5pdGlhbFZhbHVlKSB7XG4gICAgcmV0dXJuIFByb21pc2UkX1JlZHVjZShwcm9taXNlcywgZm4sIGluaXRpYWxWYWx1ZSwgZmFsc2UpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUucmVkdWNlID0gZnVuY3Rpb24gUHJvbWlzZSRyZWR1Y2UoZm4sIGluaXRpYWxWYWx1ZSkge1xuICAgIHJldHVybiBQcm9taXNlJF9SZWR1Y2UodGhpcywgZm4sIGluaXRpYWxWYWx1ZSwgdHJ1ZSk7XG59O1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0IFBldGthIEFudG9ub3ZcbiAqIFxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOjwvcD5cbiAqIFxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICogXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKiBcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgZ2xvYmFsID0gcmVxdWlyZShcIi4vZ2xvYmFsLmpzXCIpO1xudmFyIHNjaGVkdWxlO1xuaWYgKHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmIHByb2Nlc3MgIT09IG51bGwgJiZcbiAgICB0eXBlb2YgcHJvY2Vzcy5jd2QgPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgIHR5cGVvZiBwcm9jZXNzLm5leHRUaWNrID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICB0eXBlb2YgcHJvY2Vzcy52ZXJzaW9uID09PSBcInN0cmluZ1wiKSB7XG4gICAgc2NoZWR1bGUgPSBmdW5jdGlvbiBQcm9taXNlJF9TY2hlZHVsZXIoZm4pIHtcbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbik7XG4gICAgfTtcbn1cbmVsc2UgaWYgKCh0eXBlb2YgZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgPT09IFwiZnVuY3Rpb25cIiB8fFxuICAgICAgICB0eXBlb2YgZ2xvYmFsLldlYmtpdE11dGF0aW9uT2JzZXJ2ZXIgPT09IFwiZnVuY3Rpb25cIiB8fFxuICAgICAgICB0eXBlb2YgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXIgPT09IFwiZnVuY3Rpb25cIikgJiZcbiAgICAgICAgdHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50ID09PSBcImZ1bmN0aW9uXCIpIHtcblxuXG4gICAgc2NoZWR1bGUgPSAoZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIE11dGF0aW9uT2JzZXJ2ZXIgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fFxuICAgICAgICAgICAgZ2xvYmFsLldlYmtpdE11dGF0aW9uT2JzZXJ2ZXIgfHxcbiAgICAgICAgICAgIGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xuICAgICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgdmFyIHF1ZXVlZEZuID0gdm9pZCAwO1xuICAgICAgICB2YXIgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihcbiAgICAgICAgICAgIGZ1bmN0aW9uIFByb21pc2UkX1NjaGVkdWxlcigpIHtcbiAgICAgICAgICAgICAgICB2YXIgZm4gPSBxdWV1ZWRGbjtcbiAgICAgICAgICAgICAgICBxdWV1ZWRGbiA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICBmbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICk7XG4gICAgICAgIG9ic2VydmVyLm9ic2VydmUoZGl2LCB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gUHJvbWlzZSRfU2NoZWR1bGVyKGZuKSB7XG4gICAgICAgICAgICBxdWV1ZWRGbiA9IGZuO1xuICAgICAgICAgICAgZGl2LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiZm9vXCIpO1xuICAgICAgICB9O1xuXG4gICAgfSkoKTtcbn1cbmVsc2UgaWYgKHR5cGVvZiBnbG9iYWwucG9zdE1lc3NhZ2UgPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgIHR5cGVvZiBnbG9iYWwuaW1wb3J0U2NyaXB0cyAhPT0gXCJmdW5jdGlvblwiICYmXG4gICAgdHlwZW9mIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICB0eXBlb2YgZ2xvYmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIgPT09IFwiZnVuY3Rpb25cIikge1xuXG4gICAgdmFyIE1FU1NBR0VfS0VZID0gXCJibHVlYmlyZF9tZXNzYWdlX2tleV9cIiArIE1hdGgucmFuZG9tKCk7XG4gICAgc2NoZWR1bGUgPSAoZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIHF1ZXVlZEZuID0gdm9pZCAwO1xuXG4gICAgICAgIGZ1bmN0aW9uIFByb21pc2UkX1NjaGVkdWxlcihlKSB7XG4gICAgICAgICAgICBpZiAoZS5zb3VyY2UgPT09IGdsb2JhbCAmJlxuICAgICAgICAgICAgICAgIGUuZGF0YSA9PT0gTUVTU0FHRV9LRVkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZm4gPSBxdWV1ZWRGbjtcbiAgICAgICAgICAgICAgICBxdWV1ZWRGbiA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICBmbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIFByb21pc2UkX1NjaGVkdWxlciwgZmFsc2UpO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBQcm9taXNlJF9TY2hlZHVsZXIoZm4pIHtcbiAgICAgICAgICAgIHF1ZXVlZEZuID0gZm47XG4gICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoXG4gICAgICAgICAgICAgICAgTUVTU0FHRV9LRVksIFwiKlwiXG4gICAgICAgICAgICk7XG4gICAgICAgIH07XG5cbiAgICB9KSgpO1xufVxuZWxzZSBpZiAodHlwZW9mIGdsb2JhbC5NZXNzYWdlQ2hhbm5lbCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgc2NoZWR1bGUgPSAoZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIHF1ZXVlZEZuID0gdm9pZCAwO1xuXG4gICAgICAgIHZhciBjaGFubmVsID0gbmV3IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbCgpO1xuICAgICAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIFByb21pc2UkX1NjaGVkdWxlcigpIHtcbiAgICAgICAgICAgICAgICB2YXIgZm4gPSBxdWV1ZWRGbjtcbiAgICAgICAgICAgICAgICBxdWV1ZWRGbiA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICBmbigpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBQcm9taXNlJF9TY2hlZHVsZXIoZm4pIHtcbiAgICAgICAgICAgIHF1ZXVlZEZuID0gZm47XG4gICAgICAgICAgICBjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKG51bGwpO1xuICAgICAgICB9O1xuICAgIH0pKCk7XG59XG5lbHNlIGlmIChnbG9iYWwuc2V0VGltZW91dCkge1xuICAgIHNjaGVkdWxlID0gZnVuY3Rpb24gUHJvbWlzZSRfU2NoZWR1bGVyKGZuKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZm4sIDQpO1xuICAgIH07XG59XG5lbHNlIHtcbiAgICBzY2hlZHVsZSA9IGZ1bmN0aW9uIFByb21pc2UkX1NjaGVkdWxlcihmbikge1xuICAgICAgICBmbigpO1xuICAgIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2NoZWR1bGU7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNCBQZXRrYSBBbnRvbm92XG4gKiBcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczo8L3A+XG4gKiBcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqIFxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICogXG4gKi9cblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPVxuICAgIGZ1bmN0aW9uKFByb21pc2UsIFByb21pc2UkX0NyZWF0ZVByb21pc2VBcnJheSwgUHJvbWlzZUFycmF5KSB7XG5cbnZhciBTZXR0bGVkUHJvbWlzZUFycmF5ID0gcmVxdWlyZShcIi4vc2V0dGxlZF9wcm9taXNlX2FycmF5LmpzXCIpKFxuICAgIFByb21pc2UsIFByb21pc2VBcnJheSk7XG5cbmZ1bmN0aW9uIFByb21pc2UkX1NldHRsZShwcm9taXNlcywgdXNlQm91bmQpIHtcbiAgICByZXR1cm4gUHJvbWlzZSRfQ3JlYXRlUHJvbWlzZUFycmF5KFxuICAgICAgICBwcm9taXNlcyxcbiAgICAgICAgU2V0dGxlZFByb21pc2VBcnJheSxcbiAgICAgICAgdXNlQm91bmQgPT09IHRydWUgJiYgcHJvbWlzZXMuX2lzQm91bmQoKVxuICAgICAgICAgICAgPyBwcm9taXNlcy5fYm91bmRUb1xuICAgICAgICAgICAgOiB2b2lkIDBcbiAgICkucHJvbWlzZSgpO1xufVxuXG5Qcm9taXNlLnNldHRsZSA9IGZ1bmN0aW9uIFByb21pc2UkU2V0dGxlKHByb21pc2VzKSB7XG4gICAgcmV0dXJuIFByb21pc2UkX1NldHRsZShwcm9taXNlcywgZmFsc2UpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuc2V0dGxlID0gZnVuY3Rpb24gUHJvbWlzZSRzZXR0bGUoKSB7XG4gICAgcmV0dXJuIFByb21pc2UkX1NldHRsZSh0aGlzLCB0cnVlKTtcbn07XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQgUGV0a2EgQW50b25vdlxuICogXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6PC9wPlxuICogXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKiBcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqIFxuICovXG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oUHJvbWlzZSwgUHJvbWlzZUFycmF5KSB7XG52YXIgUHJvbWlzZUluc3BlY3Rpb24gPSBQcm9taXNlLlByb21pc2VJbnNwZWN0aW9uO1xudmFyIHV0aWwgPSByZXF1aXJlKFwiLi91dGlsLmpzXCIpO1xudmFyIGluaGVyaXRzID0gdXRpbC5pbmhlcml0cztcbmZ1bmN0aW9uIFNldHRsZWRQcm9taXNlQXJyYXkodmFsdWVzLCBib3VuZFRvKSB7XG4gICAgdGhpcy5jb25zdHJ1Y3RvciQodmFsdWVzLCBib3VuZFRvKTtcbn1cbmluaGVyaXRzKFNldHRsZWRQcm9taXNlQXJyYXksIFByb21pc2VBcnJheSk7XG5cblNldHRsZWRQcm9taXNlQXJyYXkucHJvdG90eXBlLl9wcm9taXNlUmVzb2x2ZWQgPVxuZnVuY3Rpb24gU2V0dGxlZFByb21pc2VBcnJheSRfcHJvbWlzZVJlc29sdmVkKGluZGV4LCBpbnNwZWN0aW9uKSB7XG4gICAgdGhpcy5fdmFsdWVzW2luZGV4XSA9IGluc3BlY3Rpb247XG4gICAgdmFyIHRvdGFsUmVzb2x2ZWQgPSArK3RoaXMuX3RvdGFsUmVzb2x2ZWQ7XG4gICAgaWYgKHRvdGFsUmVzb2x2ZWQgPj0gdGhpcy5fbGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuX3Jlc29sdmUodGhpcy5fdmFsdWVzKTtcbiAgICB9XG59O1xuXG5TZXR0bGVkUHJvbWlzZUFycmF5LnByb3RvdHlwZS5fcHJvbWlzZUZ1bGZpbGxlZCA9XG5mdW5jdGlvbiBTZXR0bGVkUHJvbWlzZUFycmF5JF9wcm9taXNlRnVsZmlsbGVkKHZhbHVlLCBpbmRleCkge1xuICAgIGlmICh0aGlzLl9pc1Jlc29sdmVkKCkpIHJldHVybjtcbiAgICB2YXIgcmV0ID0gbmV3IFByb21pc2VJbnNwZWN0aW9uKCk7XG4gICAgcmV0Ll9iaXRGaWVsZCA9IDI2ODQzNTQ1NjtcbiAgICByZXQuX3NldHRsZWRWYWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMuX3Byb21pc2VSZXNvbHZlZChpbmRleCwgcmV0KTtcbn07XG5TZXR0bGVkUHJvbWlzZUFycmF5LnByb3RvdHlwZS5fcHJvbWlzZVJlamVjdGVkID1cbmZ1bmN0aW9uIFNldHRsZWRQcm9taXNlQXJyYXkkX3Byb21pc2VSZWplY3RlZChyZWFzb24sIGluZGV4KSB7XG4gICAgaWYgKHRoaXMuX2lzUmVzb2x2ZWQoKSkgcmV0dXJuO1xuICAgIHZhciByZXQgPSBuZXcgUHJvbWlzZUluc3BlY3Rpb24oKTtcbiAgICByZXQuX2JpdEZpZWxkID0gMTM0MjE3NzI4O1xuICAgIHJldC5fc2V0dGxlZFZhbHVlID0gcmVhc29uO1xuICAgIHRoaXMuX3Byb21pc2VSZXNvbHZlZChpbmRleCwgcmV0KTtcbn07XG5cbnJldHVybiBTZXR0bGVkUHJvbWlzZUFycmF5O1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0IFBldGthIEFudG9ub3ZcbiAqIFxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOjwvcD5cbiAqIFxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICogXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKiBcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9XG5mdW5jdGlvbihQcm9taXNlLCBQcm9taXNlJF9DcmVhdGVQcm9taXNlQXJyYXksIFByb21pc2VBcnJheSwgYXBpUmVqZWN0aW9uKSB7XG5cbnZhciBTb21lUHJvbWlzZUFycmF5ID0gcmVxdWlyZShcIi4vc29tZV9wcm9taXNlX2FycmF5LmpzXCIpKFByb21pc2VBcnJheSk7XG5mdW5jdGlvbiBQcm9taXNlJF9Tb21lKHByb21pc2VzLCBob3dNYW55LCB1c2VCb3VuZCkge1xuICAgIGlmICgoaG93TWFueSB8IDApICE9PSBob3dNYW55IHx8IGhvd01hbnkgPCAwKSB7XG4gICAgICAgIHJldHVybiBhcGlSZWplY3Rpb24oXCJleHBlY3RpbmcgYSBwb3NpdGl2ZSBpbnRlZ2VyXCIpO1xuICAgIH1cbiAgICB2YXIgcmV0ID0gUHJvbWlzZSRfQ3JlYXRlUHJvbWlzZUFycmF5KFxuICAgICAgICBwcm9taXNlcyxcbiAgICAgICAgU29tZVByb21pc2VBcnJheSxcbiAgICAgICAgdXNlQm91bmQgPT09IHRydWUgJiYgcHJvbWlzZXMuX2lzQm91bmQoKVxuICAgICAgICAgICAgPyBwcm9taXNlcy5fYm91bmRUb1xuICAgICAgICAgICAgOiB2b2lkIDBcbiAgICk7XG4gICAgdmFyIHByb21pc2UgPSByZXQucHJvbWlzZSgpO1xuICAgIGlmIChwcm9taXNlLmlzUmVqZWN0ZWQoKSkge1xuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG4gICAgcmV0LnNldEhvd01hbnkoaG93TWFueSk7XG4gICAgcmV0LmluaXQoKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cblxuUHJvbWlzZS5zb21lID0gZnVuY3Rpb24gUHJvbWlzZSRTb21lKHByb21pc2VzLCBob3dNYW55KSB7XG4gICAgcmV0dXJuIFByb21pc2UkX1NvbWUocHJvbWlzZXMsIGhvd01hbnksIGZhbHNlKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLnNvbWUgPSBmdW5jdGlvbiBQcm9taXNlJHNvbWUoY291bnQpIHtcbiAgICByZXR1cm4gUHJvbWlzZSRfU29tZSh0aGlzLCBjb3VudCwgdHJ1ZSk7XG59O1xuXG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQgUGV0a2EgQW50b25vdlxuICogXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6PC9wPlxuICogXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKiBcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqIFxuICovXG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFByb21pc2VBcnJheSkge1xudmFyIHV0aWwgPSByZXF1aXJlKFwiLi91dGlsLmpzXCIpO1xudmFyIFJhbmdlRXJyb3IgPSByZXF1aXJlKFwiLi9lcnJvcnMuanNcIikuUmFuZ2VFcnJvcjtcbnZhciBpbmhlcml0cyA9IHV0aWwuaW5oZXJpdHM7XG52YXIgaXNBcnJheSA9IHV0aWwuaXNBcnJheTtcblxuZnVuY3Rpb24gU29tZVByb21pc2VBcnJheSh2YWx1ZXMsIGJvdW5kVG8pIHtcbiAgICB0aGlzLmNvbnN0cnVjdG9yJCh2YWx1ZXMsIGJvdW5kVG8pO1xuICAgIHRoaXMuX2hvd01hbnkgPSAwO1xuICAgIHRoaXMuX3Vud3JhcCA9IGZhbHNlO1xuICAgIHRoaXMuX2luaXRpYWxpemVkID0gZmFsc2U7XG59XG5pbmhlcml0cyhTb21lUHJvbWlzZUFycmF5LCBQcm9taXNlQXJyYXkpO1xuXG5Tb21lUHJvbWlzZUFycmF5LnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIFNvbWVQcm9taXNlQXJyYXkkX2luaXQoKSB7XG4gICAgaWYgKCF0aGlzLl9pbml0aWFsaXplZCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLl9ob3dNYW55ID09PSAwKSB7XG4gICAgICAgIHRoaXMuX3Jlc29sdmUoW10pO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX2luaXQkKHZvaWQgMCwgLTIpO1xuICAgIHZhciBpc0FycmF5UmVzb2x2ZWQgPSBpc0FycmF5KHRoaXMuX3ZhbHVlcyk7XG4gICAgdGhpcy5faG9sZXMgPSBpc0FycmF5UmVzb2x2ZWQgPyB0aGlzLl92YWx1ZXMubGVuZ3RoIC0gdGhpcy5sZW5ndGgoKSA6IDA7XG5cbiAgICBpZiAoIXRoaXMuX2lzUmVzb2x2ZWQoKSAmJlxuICAgICAgICBpc0FycmF5UmVzb2x2ZWQgJiZcbiAgICAgICAgdGhpcy5faG93TWFueSA+IHRoaXMuX2NhblBvc3NpYmx5RnVsZmlsbCgpKSB7XG4gICAgICAgIHZhciBtZXNzYWdlID0gXCIoUHJvbWlzZS5zb21lKSBpbnB1dCBhcnJheSBjb250YWlucyBsZXNzIHRoYW4gXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faG93TWFueSAgKyBcIiBwcm9taXNlc1wiO1xuICAgICAgICB0aGlzLl9yZWplY3QobmV3IFJhbmdlRXJyb3IobWVzc2FnZSkpO1xuICAgIH1cbn07XG5cblNvbWVQcm9taXNlQXJyYXkucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiBTb21lUHJvbWlzZUFycmF5JGluaXQoKSB7XG4gICAgdGhpcy5faW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIHRoaXMuX2luaXQoKTtcbn07XG5cblNvbWVQcm9taXNlQXJyYXkucHJvdG90eXBlLnNldFVud3JhcCA9IGZ1bmN0aW9uIFNvbWVQcm9taXNlQXJyYXkkc2V0VW53cmFwKCkge1xuICAgIHRoaXMuX3Vud3JhcCA9IHRydWU7XG59O1xuXG5Tb21lUHJvbWlzZUFycmF5LnByb3RvdHlwZS5ob3dNYW55ID0gZnVuY3Rpb24gU29tZVByb21pc2VBcnJheSRob3dNYW55KCkge1xuICAgIHJldHVybiB0aGlzLl9ob3dNYW55O1xufTtcblxuU29tZVByb21pc2VBcnJheS5wcm90b3R5cGUuc2V0SG93TWFueSA9XG5mdW5jdGlvbiBTb21lUHJvbWlzZUFycmF5JHNldEhvd01hbnkoY291bnQpIHtcbiAgICBpZiAodGhpcy5faXNSZXNvbHZlZCgpKSByZXR1cm47XG4gICAgdGhpcy5faG93TWFueSA9IGNvdW50O1xufTtcblxuU29tZVByb21pc2VBcnJheS5wcm90b3R5cGUuX3Byb21pc2VGdWxmaWxsZWQgPVxuZnVuY3Rpb24gU29tZVByb21pc2VBcnJheSRfcHJvbWlzZUZ1bGZpbGxlZCh2YWx1ZSkge1xuICAgIGlmICh0aGlzLl9pc1Jlc29sdmVkKCkpIHJldHVybjtcbiAgICB0aGlzLl9hZGRGdWxmaWxsZWQodmFsdWUpO1xuICAgIGlmICh0aGlzLl9mdWxmaWxsZWQoKSA9PT0gdGhpcy5ob3dNYW55KCkpIHtcbiAgICAgICAgdGhpcy5fdmFsdWVzLmxlbmd0aCA9IHRoaXMuaG93TWFueSgpO1xuICAgICAgICBpZiAodGhpcy5ob3dNYW55KCkgPT09IDEgJiYgdGhpcy5fdW53cmFwKSB7XG4gICAgICAgICAgICB0aGlzLl9yZXNvbHZlKHRoaXMuX3ZhbHVlc1swXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9yZXNvbHZlKHRoaXMuX3ZhbHVlcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbn07XG5Tb21lUHJvbWlzZUFycmF5LnByb3RvdHlwZS5fcHJvbWlzZVJlamVjdGVkID1cbmZ1bmN0aW9uIFNvbWVQcm9taXNlQXJyYXkkX3Byb21pc2VSZWplY3RlZChyZWFzb24pIHtcbiAgICBpZiAodGhpcy5faXNSZXNvbHZlZCgpKSByZXR1cm47XG4gICAgdGhpcy5fYWRkUmVqZWN0ZWQocmVhc29uKTtcbiAgICBpZiAodGhpcy5ob3dNYW55KCkgPiB0aGlzLl9jYW5Qb3NzaWJseUZ1bGZpbGwoKSkge1xuICAgICAgICBpZiAodGhpcy5fdmFsdWVzLmxlbmd0aCA9PT0gdGhpcy5sZW5ndGgoKSkge1xuICAgICAgICAgICAgdGhpcy5fcmVqZWN0KFtdKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3JlamVjdCh0aGlzLl92YWx1ZXMuc2xpY2UodGhpcy5sZW5ndGgoKSArIHRoaXMuX2hvbGVzKSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5Tb21lUHJvbWlzZUFycmF5LnByb3RvdHlwZS5fZnVsZmlsbGVkID0gZnVuY3Rpb24gU29tZVByb21pc2VBcnJheSRfZnVsZmlsbGVkKCkge1xuICAgIHJldHVybiB0aGlzLl90b3RhbFJlc29sdmVkO1xufTtcblxuU29tZVByb21pc2VBcnJheS5wcm90b3R5cGUuX3JlamVjdGVkID0gZnVuY3Rpb24gU29tZVByb21pc2VBcnJheSRfcmVqZWN0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlcy5sZW5ndGggLSB0aGlzLmxlbmd0aCgpIC0gdGhpcy5faG9sZXM7XG59O1xuXG5Tb21lUHJvbWlzZUFycmF5LnByb3RvdHlwZS5fYWRkUmVqZWN0ZWQgPVxuZnVuY3Rpb24gU29tZVByb21pc2VBcnJheSRfYWRkUmVqZWN0ZWQocmVhc29uKSB7XG4gICAgdGhpcy5fdmFsdWVzLnB1c2gocmVhc29uKTtcbn07XG5cblNvbWVQcm9taXNlQXJyYXkucHJvdG90eXBlLl9hZGRGdWxmaWxsZWQgPVxuZnVuY3Rpb24gU29tZVByb21pc2VBcnJheSRfYWRkRnVsZmlsbGVkKHZhbHVlKSB7XG4gICAgdGhpcy5fdmFsdWVzW3RoaXMuX3RvdGFsUmVzb2x2ZWQrK10gPSB2YWx1ZTtcbn07XG5cblNvbWVQcm9taXNlQXJyYXkucHJvdG90eXBlLl9jYW5Qb3NzaWJseUZ1bGZpbGwgPVxuZnVuY3Rpb24gU29tZVByb21pc2VBcnJheSRfY2FuUG9zc2libHlGdWxmaWxsKCkge1xuICAgIHJldHVybiB0aGlzLmxlbmd0aCgpIC0gdGhpcy5fcmVqZWN0ZWQoKTtcbn07XG5cbnJldHVybiBTb21lUHJvbWlzZUFycmF5O1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0IFBldGthIEFudG9ub3ZcbiAqIFxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOjwvcD5cbiAqIFxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICogXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKiBcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFByb21pc2UpIHtcbmZ1bmN0aW9uIFByb21pc2VJbnNwZWN0aW9uKHByb21pc2UpIHtcbiAgICBpZiAocHJvbWlzZSAhPT0gdm9pZCAwKSB7XG4gICAgICAgIHRoaXMuX2JpdEZpZWxkID0gcHJvbWlzZS5fYml0RmllbGQ7XG4gICAgICAgIHRoaXMuX3NldHRsZWRWYWx1ZSA9IHByb21pc2UuaXNSZXNvbHZlZCgpXG4gICAgICAgICAgICA/IHByb21pc2UuX3NldHRsZWRWYWx1ZVxuICAgICAgICAgICAgOiB2b2lkIDA7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aGlzLl9iaXRGaWVsZCA9IDA7XG4gICAgICAgIHRoaXMuX3NldHRsZWRWYWx1ZSA9IHZvaWQgMDtcbiAgICB9XG59XG5cblByb21pc2VJbnNwZWN0aW9uLnByb3RvdHlwZS5pc0Z1bGZpbGxlZCA9XG5Qcm9taXNlLnByb3RvdHlwZS5pc0Z1bGZpbGxlZCA9IGZ1bmN0aW9uIFByb21pc2UkaXNGdWxmaWxsZWQoKSB7XG4gICAgcmV0dXJuICh0aGlzLl9iaXRGaWVsZCAmIDI2ODQzNTQ1NikgPiAwO1xufTtcblxuUHJvbWlzZUluc3BlY3Rpb24ucHJvdG90eXBlLmlzUmVqZWN0ZWQgPVxuUHJvbWlzZS5wcm90b3R5cGUuaXNSZWplY3RlZCA9IGZ1bmN0aW9uIFByb21pc2UkaXNSZWplY3RlZCgpIHtcbiAgICByZXR1cm4gKHRoaXMuX2JpdEZpZWxkICYgMTM0MjE3NzI4KSA+IDA7XG59O1xuXG5Qcm9taXNlSW5zcGVjdGlvbi5wcm90b3R5cGUuaXNQZW5kaW5nID1cblByb21pc2UucHJvdG90eXBlLmlzUGVuZGluZyA9IGZ1bmN0aW9uIFByb21pc2UkaXNQZW5kaW5nKCkge1xuICAgIHJldHVybiAodGhpcy5fYml0RmllbGQgJiA0MDI2NTMxODQpID09PSAwO1xufTtcblxuUHJvbWlzZUluc3BlY3Rpb24ucHJvdG90eXBlLnZhbHVlID1cblByb21pc2UucHJvdG90eXBlLnZhbHVlID0gZnVuY3Rpb24gUHJvbWlzZSR2YWx1ZSgpIHtcbiAgICBpZiAoIXRoaXMuaXNGdWxmaWxsZWQoKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiY2Fubm90IGdldCBmdWxmaWxsbWVudCB2YWx1ZSBvZiBhIG5vbi1mdWxmaWxsZWQgcHJvbWlzZVwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3NldHRsZWRWYWx1ZTtcbn07XG5cblByb21pc2VJbnNwZWN0aW9uLnByb3RvdHlwZS5lcnJvciA9XG5Qcm9taXNlLnByb3RvdHlwZS5yZWFzb24gPSBmdW5jdGlvbiBQcm9taXNlJHJlYXNvbigpIHtcbiAgICBpZiAoIXRoaXMuaXNSZWplY3RlZCgpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjYW5ub3QgZ2V0IHJlamVjdGlvbiByZWFzb24gb2YgYSBub24tcmVqZWN0ZWQgcHJvbWlzZVwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3NldHRsZWRWYWx1ZTtcbn07XG5cblByb21pc2VJbnNwZWN0aW9uLnByb3RvdHlwZS5pc1Jlc29sdmVkID1cblByb21pc2UucHJvdG90eXBlLmlzUmVzb2x2ZWQgPSBmdW5jdGlvbiBQcm9taXNlJGlzUmVzb2x2ZWQoKSB7XG4gICAgcmV0dXJuICh0aGlzLl9iaXRGaWVsZCAmIDQwMjY1MzE4NCkgPiAwO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIFByb21pc2UkaW5zcGVjdCgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2VJbnNwZWN0aW9uKHRoaXMpO1xufTtcblxuUHJvbWlzZS5Qcm9taXNlSW5zcGVjdGlvbiA9IFByb21pc2VJbnNwZWN0aW9uO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0IFBldGthIEFudG9ub3ZcbiAqIFxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOjwvcD5cbiAqIFxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICogXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKiBcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFByb21pc2UsIElOVEVSTkFMKSB7XG52YXIgdXRpbCA9IHJlcXVpcmUoXCIuL3V0aWwuanNcIik7XG52YXIgY2FuQXR0YWNoID0gcmVxdWlyZShcIi4vZXJyb3JzLmpzXCIpLmNhbkF0dGFjaDtcbnZhciBlcnJvck9iaiA9IHV0aWwuZXJyb3JPYmo7XG52YXIgaXNPYmplY3QgPSB1dGlsLmlzT2JqZWN0O1xuXG5mdW5jdGlvbiBnZXRUaGVuKG9iaikge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBvYmoudGhlbjtcbiAgICB9XG4gICAgY2F0Y2goZSkge1xuICAgICAgICBlcnJvck9iai5lID0gZTtcbiAgICAgICAgcmV0dXJuIGVycm9yT2JqO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gUHJvbWlzZSRfQ2FzdChvYmosIG9yaWdpbmFsUHJvbWlzZSkge1xuICAgIGlmIChpc09iamVjdChvYmopKSB7XG4gICAgICAgIGlmIChvYmogaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzQW55Qmx1ZWJpcmRQcm9taXNlKG9iaikpIHtcbiAgICAgICAgICAgIHZhciByZXQgPSBuZXcgUHJvbWlzZShJTlRFUk5BTCk7XG4gICAgICAgICAgICByZXQuX3NldFRyYWNlKHZvaWQgMCk7XG4gICAgICAgICAgICBvYmouX3RoZW4oXG4gICAgICAgICAgICAgICAgcmV0Ll9mdWxmaWxsVW5jaGVja2VkLFxuICAgICAgICAgICAgICAgIHJldC5fcmVqZWN0VW5jaGVja2VkQ2hlY2tFcnJvcixcbiAgICAgICAgICAgICAgICByZXQuX3Byb2dyZXNzVW5jaGVja2VkLFxuICAgICAgICAgICAgICAgIHJldCxcbiAgICAgICAgICAgICAgICBudWxsXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmV0Ll9zZXRGb2xsb3dpbmcoKTtcbiAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRoZW4gPSBnZXRUaGVuKG9iaik7XG4gICAgICAgIGlmICh0aGVuID09PSBlcnJvck9iaikge1xuICAgICAgICAgICAgaWYgKG9yaWdpbmFsUHJvbWlzZSAhPT0gdm9pZCAwICYmIGNhbkF0dGFjaCh0aGVuLmUpKSB7XG4gICAgICAgICAgICAgICAgb3JpZ2luYWxQcm9taXNlLl9hdHRhY2hFeHRyYVRyYWNlKHRoZW4uZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QodGhlbi5lKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgdGhlbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZSRfZG9UaGVuYWJsZShvYmosIHRoZW4sIG9yaWdpbmFsUHJvbWlzZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbn1cblxudmFyIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIGlzQW55Qmx1ZWJpcmRQcm9taXNlKG9iaikge1xuICAgIHJldHVybiBoYXNQcm9wLmNhbGwob2JqLCBcIl9wcm9taXNlMFwiKTtcbn1cblxuZnVuY3Rpb24gUHJvbWlzZSRfZG9UaGVuYWJsZSh4LCB0aGVuLCBvcmlnaW5hbFByb21pc2UpIHtcbiAgICB2YXIgcmVzb2x2ZXIgPSBQcm9taXNlLmRlZmVyKCk7XG4gICAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICAgIHRyeSB7XG4gICAgICAgIHRoZW4uY2FsbChcbiAgICAgICAgICAgIHgsXG4gICAgICAgICAgICBQcm9taXNlJF9yZXNvbHZlRnJvbVRoZW5hYmxlLFxuICAgICAgICAgICAgUHJvbWlzZSRfcmVqZWN0RnJvbVRoZW5hYmxlLFxuICAgICAgICAgICAgUHJvbWlzZSRfcHJvZ3Jlc3NGcm9tVGhlbmFibGVcbiAgICAgICAgKTtcbiAgICB9XG4gICAgY2F0Y2goZSkge1xuICAgICAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciB0cmFjZSA9IGNhbkF0dGFjaChlKSA/IGUgOiBuZXcgRXJyb3IoZSArIFwiXCIpO1xuICAgICAgICAgICAgaWYgKG9yaWdpbmFsUHJvbWlzZSAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgb3JpZ2luYWxQcm9taXNlLl9hdHRhY2hFeHRyYVRyYWNlKHRyYWNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc29sdmVyLnByb21pc2UuX3JlamVjdChlLCB0cmFjZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc29sdmVyLnByb21pc2U7XG5cbiAgICBmdW5jdGlvbiBQcm9taXNlJF9yZXNvbHZlRnJvbVRoZW5hYmxlKHkpIHtcbiAgICAgICAgaWYgKGNhbGxlZCkgcmV0dXJuO1xuICAgICAgICBjYWxsZWQgPSB0cnVlO1xuXG4gICAgICAgIGlmICh4ID09PSB5KSB7XG4gICAgICAgICAgICB2YXIgZSA9IFByb21pc2UuX21ha2VTZWxmUmVzb2x1dGlvbkVycm9yKCk7XG4gICAgICAgICAgICBpZiAob3JpZ2luYWxQcm9taXNlICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICBvcmlnaW5hbFByb21pc2UuX2F0dGFjaEV4dHJhVHJhY2UoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXNvbHZlci5wcm9taXNlLl9yZWplY3QoZSwgdm9pZCAwKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXNvbHZlci5yZXNvbHZlKHkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIFByb21pc2UkX3JlamVjdEZyb21UaGVuYWJsZShyKSB7XG4gICAgICAgIGlmIChjYWxsZWQpIHJldHVybjtcbiAgICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgdmFyIHRyYWNlID0gY2FuQXR0YWNoKHIpID8gciA6IG5ldyBFcnJvcihyICsgXCJcIik7XG4gICAgICAgIGlmIChvcmlnaW5hbFByb21pc2UgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgb3JpZ2luYWxQcm9taXNlLl9hdHRhY2hFeHRyYVRyYWNlKHRyYWNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXNvbHZlci5wcm9taXNlLl9yZWplY3QociwgdHJhY2UpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIFByb21pc2UkX3Byb2dyZXNzRnJvbVRoZW5hYmxlKHYpIHtcbiAgICAgICAgaWYgKGNhbGxlZCkgcmV0dXJuO1xuICAgICAgICB2YXIgcHJvbWlzZSA9IHJlc29sdmVyLnByb21pc2U7XG4gICAgICAgIGlmICh0eXBlb2YgcHJvbWlzZS5fcHJvZ3Jlc3MgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgcHJvbWlzZS5fcHJvZ3Jlc3Modik7XG4gICAgICAgIH1cbiAgICB9XG59XG5cblByb21pc2UuX2Nhc3QgPSBQcm9taXNlJF9DYXN0O1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0IFBldGthIEFudG9ub3ZcbiAqIFxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOjwvcD5cbiAqIFxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICogXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKiBcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgZ2xvYmFsID0gcmVxdWlyZShcIi4vZ2xvYmFsLmpzXCIpO1xudmFyIHNldFRpbWVvdXQgPSBmdW5jdGlvbihmbiwgbXMpIHtcbiAgICB2YXIgJF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoO3ZhciBhcmdzID0gbmV3IEFycmF5KCRfbGVuIC0gMik7IGZvcih2YXIgJF9pID0gMjsgJF9pIDwgJF9sZW47ICsrJF9pKSB7YXJnc1skX2kgLSAyXSA9IGFyZ3VtZW50c1skX2ldO31cbiAgICBnbG9iYWwuc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICBmbi5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgIH0sIG1zKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oUHJvbWlzZSwgSU5URVJOQUwpIHtcbnZhciB1dGlsID0gcmVxdWlyZShcIi4vdXRpbC5qc1wiKTtcbnZhciBlcnJvcnMgPSByZXF1aXJlKFwiLi9lcnJvcnMuanNcIik7XG52YXIgYXBpUmVqZWN0aW9uID0gcmVxdWlyZShcIi4vZXJyb3JzX2FwaV9yZWplY3Rpb25cIikoUHJvbWlzZSk7XG52YXIgVGltZW91dEVycm9yID0gUHJvbWlzZS5UaW1lb3V0RXJyb3I7XG5cbnZhciBhZnRlclRpbWVvdXQgPSBmdW5jdGlvbiBQcm9taXNlJF9hZnRlclRpbWVvdXQocHJvbWlzZSwgbWVzc2FnZSwgbXMpIHtcbiAgICBpZiAoIXByb21pc2UuaXNQZW5kaW5nKCkpIHJldHVybjtcbiAgICBpZiAodHlwZW9mIG1lc3NhZ2UgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgbWVzc2FnZSA9IFwib3BlcmF0aW9uIHRpbWVkIG91dCBhZnRlclwiICsgXCIgXCIgKyBtcyArIFwiIG1zXCJcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBUaW1lb3V0RXJyb3IobWVzc2FnZSk7XG4gICAgZXJyb3JzLm1hcmtBc09yaWdpbmF0aW5nRnJvbVJlamVjdGlvbihlcnIpO1xuICAgIHByb21pc2UuX2F0dGFjaEV4dHJhVHJhY2UoZXJyKTtcbiAgICBwcm9taXNlLl9yZWplY3RVbmNoZWNrZWQoZXJyKTtcbn07XG5cbnZhciBhZnRlckRlbGF5ID0gZnVuY3Rpb24gUHJvbWlzZSRfYWZ0ZXJEZWxheSh2YWx1ZSwgcHJvbWlzZSkge1xuICAgIHByb21pc2UuX2Z1bGZpbGwodmFsdWUpO1xufTtcblxudmFyIGRlbGF5ID0gUHJvbWlzZS5kZWxheSA9IGZ1bmN0aW9uIFByb21pc2UkRGVsYXkodmFsdWUsIG1zKSB7XG4gICAgaWYgKG1zID09PSB2b2lkIDApIHtcbiAgICAgICAgbXMgPSB2YWx1ZTtcbiAgICAgICAgdmFsdWUgPSB2b2lkIDA7XG4gICAgfVxuICAgIG1zID0gK21zO1xuICAgIHZhciBtYXliZVByb21pc2UgPSBQcm9taXNlLl9jYXN0KHZhbHVlLCB2b2lkIDApO1xuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoSU5URVJOQUwpO1xuXG4gICAgaWYgKG1heWJlUHJvbWlzZSBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgaWYgKG1heWJlUHJvbWlzZS5faXNCb3VuZCgpKSB7XG4gICAgICAgICAgICBwcm9taXNlLl9zZXRCb3VuZFRvKG1heWJlUHJvbWlzZS5fYm91bmRUbyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1heWJlUHJvbWlzZS5fY2FuY2VsbGFibGUoKSkge1xuICAgICAgICAgICAgcHJvbWlzZS5fc2V0Q2FuY2VsbGFibGUoKTtcbiAgICAgICAgICAgIHByb21pc2UuX2NhbmNlbGxhdGlvblBhcmVudCA9IG1heWJlUHJvbWlzZTtcbiAgICAgICAgfVxuICAgICAgICBwcm9taXNlLl9zZXRUcmFjZShtYXliZVByb21pc2UpO1xuICAgICAgICBwcm9taXNlLl9mb2xsb3cobWF5YmVQcm9taXNlKTtcbiAgICAgICAgcmV0dXJuIHByb21pc2UudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuZGVsYXkodmFsdWUsIG1zKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBwcm9taXNlLl9zZXRUcmFjZSh2b2lkIDApO1xuICAgICAgICBzZXRUaW1lb3V0KGFmdGVyRGVsYXksIG1zLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgfVxuICAgIHJldHVybiBwcm9taXNlO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuZGVsYXkgPSBmdW5jdGlvbiBQcm9taXNlJGRlbGF5KG1zKSB7XG4gICAgcmV0dXJuIGRlbGF5KHRoaXMsIG1zKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLnRpbWVvdXQgPSBmdW5jdGlvbiBQcm9taXNlJHRpbWVvdXQobXMsIG1lc3NhZ2UpIHtcbiAgICBtcyA9ICttcztcblxuICAgIHZhciByZXQgPSBuZXcgUHJvbWlzZShJTlRFUk5BTCk7XG4gICAgcmV0Ll9zZXRUcmFjZSh0aGlzKTtcblxuICAgIGlmICh0aGlzLl9pc0JvdW5kKCkpIHJldC5fc2V0Qm91bmRUbyh0aGlzLl9ib3VuZFRvKTtcbiAgICBpZiAodGhpcy5fY2FuY2VsbGFibGUoKSkge1xuICAgICAgICByZXQuX3NldENhbmNlbGxhYmxlKCk7XG4gICAgICAgIHJldC5fY2FuY2VsbGF0aW9uUGFyZW50ID0gdGhpcztcbiAgICB9XG4gICAgcmV0Ll9mb2xsb3codGhpcyk7XG4gICAgc2V0VGltZW91dChhZnRlclRpbWVvdXQsIG1zLCByZXQsIG1lc3NhZ2UsIG1zKTtcbiAgICByZXR1cm4gcmV0O1xufTtcblxufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0IFBldGthIEFudG9ub3ZcbiAqIFxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOjwvcD5cbiAqIFxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICogXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKiBcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgZ2xvYmFsID0gcmVxdWlyZShcIi4vZ2xvYmFsLmpzXCIpO1xudmFyIGVzNSA9IHJlcXVpcmUoXCIuL2VzNS5qc1wiKTtcbnZhciBoYXZlR2V0dGVycyA9IChmdW5jdGlvbigpe1xuICAgIHRyeSB7XG4gICAgICAgIHZhciBvID0ge307XG4gICAgICAgIGVzNS5kZWZpbmVQcm9wZXJ0eShvLCBcImZcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gby5mID09PSAzO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG59KSgpO1xuXG52YXIgY2FuRXZhbHVhdGUgPSAoZnVuY3Rpb24oKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93ICE9PSBudWxsICYmXG4gICAgICAgIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgdHlwZW9mIG5hdmlnYXRvciAhPT0gXCJ1bmRlZmluZWRcIiAmJiBuYXZpZ2F0b3IgIT09IG51bGwgJiZcbiAgICAgICAgdHlwZW9mIG5hdmlnYXRvci5hcHBOYW1lID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgIHdpbmRvdyA9PT0gZ2xvYmFsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59KSgpO1xuXG5mdW5jdGlvbiBkZXByZWNhdGVkKG1zZykge1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb25zb2xlICE9PSBudWxsICYmXG4gICAgICAgIHR5cGVvZiBjb25zb2xlLndhcm4gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJCbHVlYmlyZDogXCIgKyBtc2cpO1xuICAgIH1cbn1cblxudmFyIGVycm9yT2JqID0ge2U6IHt9fTtcbmZ1bmN0aW9uIHRyeUNhdGNoMShmbiwgcmVjZWl2ZXIsIGFyZykge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBmbi5jYWxsKHJlY2VpdmVyLCBhcmcpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICBlcnJvck9iai5lID0gZTtcbiAgICAgICAgcmV0dXJuIGVycm9yT2JqO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gdHJ5Q2F0Y2gyKGZuLCByZWNlaXZlciwgYXJnLCBhcmcyKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGZuLmNhbGwocmVjZWl2ZXIsIGFyZywgYXJnMik7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGVycm9yT2JqLmUgPSBlO1xuICAgICAgICByZXR1cm4gZXJyb3JPYmo7XG4gICAgfVxufVxuXG5mdW5jdGlvbiB0cnlDYXRjaEFwcGx5KGZuLCBhcmdzLCByZWNlaXZlcikge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBmbi5hcHBseShyZWNlaXZlciwgYXJncyk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGVycm9yT2JqLmUgPSBlO1xuICAgICAgICByZXR1cm4gZXJyb3JPYmo7XG4gICAgfVxufVxuXG52YXIgaW5oZXJpdHMgPSBmdW5jdGlvbihDaGlsZCwgUGFyZW50KSB7XG4gICAgdmFyIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICAgIGZ1bmN0aW9uIFQoKSB7XG4gICAgICAgIHRoaXMuY29uc3RydWN0b3IgPSBDaGlsZDtcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3RvciQgPSBQYXJlbnQ7XG4gICAgICAgIGZvciAodmFyIHByb3BlcnR5TmFtZSBpbiBQYXJlbnQucHJvdG90eXBlKSB7XG4gICAgICAgICAgICBpZiAoaGFzUHJvcC5jYWxsKFBhcmVudC5wcm90b3R5cGUsIHByb3BlcnR5TmFtZSkgJiZcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWUuY2hhckF0KHByb3BlcnR5TmFtZS5sZW5ndGgtMSkgIT09IFwiJFwiXG4gICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHRoaXNbcHJvcGVydHlOYW1lICsgXCIkXCJdID0gUGFyZW50LnByb3RvdHlwZVtwcm9wZXJ0eU5hbWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIFQucHJvdG90eXBlID0gUGFyZW50LnByb3RvdHlwZTtcbiAgICBDaGlsZC5wcm90b3R5cGUgPSBuZXcgVCgpO1xuICAgIHJldHVybiBDaGlsZC5wcm90b3R5cGU7XG59O1xuXG5mdW5jdGlvbiBhc1N0cmluZyh2YWwpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gXCJzdHJpbmdcIiA/IHZhbCA6IChcIlwiICsgdmFsKTtcbn1cblxuZnVuY3Rpb24gaXNQcmltaXRpdmUodmFsKSB7XG4gICAgcmV0dXJuIHZhbCA9PSBudWxsIHx8IHZhbCA9PT0gdHJ1ZSB8fCB2YWwgPT09IGZhbHNlIHx8XG4gICAgICAgIHR5cGVvZiB2YWwgPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIjtcblxufVxuXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAgIHJldHVybiAhaXNQcmltaXRpdmUodmFsdWUpO1xufVxuXG5mdW5jdGlvbiBtYXliZVdyYXBBc0Vycm9yKG1heWJlRXJyb3IpIHtcbiAgICBpZiAoIWlzUHJpbWl0aXZlKG1heWJlRXJyb3IpKSByZXR1cm4gbWF5YmVFcnJvcjtcblxuICAgIHJldHVybiBuZXcgRXJyb3IoYXNTdHJpbmcobWF5YmVFcnJvcikpO1xufVxuXG5mdW5jdGlvbiB3aXRoQXBwZW5kZWQodGFyZ2V0LCBhcHBlbmRlZSkge1xuICAgIHZhciBsZW4gPSB0YXJnZXQubGVuZ3RoO1xuICAgIHZhciByZXQgPSBuZXcgQXJyYXkobGVuICsgMSk7XG4gICAgdmFyIGk7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgIHJldFtpXSA9IHRhcmdldFtpXTtcbiAgICB9XG4gICAgcmV0W2ldID0gYXBwZW5kZWU7XG4gICAgcmV0dXJuIHJldDtcbn1cblxuXG5mdW5jdGlvbiBub3RFbnVtZXJhYmxlUHJvcChvYmosIG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKGlzUHJpbWl0aXZlKG9iaikpIHJldHVybiBvYmo7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9O1xuICAgIGVzNS5kZWZpbmVQcm9wZXJ0eShvYmosIG5hbWUsIGRlc2NyaXB0b3IpO1xuICAgIHJldHVybiBvYmo7XG59XG5cblxudmFyIHdyYXBzUHJpbWl0aXZlUmVjZWl2ZXIgPSAoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMgIT09IFwic3RyaW5nXCI7XG59KS5jYWxsKFwic3RyaW5nXCIpO1xuXG5mdW5jdGlvbiB0aHJvd2VyKHIpIHtcbiAgICB0aHJvdyByO1xufVxuXG5cbmZ1bmN0aW9uIHRvRmFzdFByb3BlcnRpZXMob2JqKSB7XG4gICAgLypqc2hpbnQgLVcwMjcqL1xuICAgIGZ1bmN0aW9uIGYoKSB7fVxuICAgIGYucHJvdG90eXBlID0gb2JqO1xuICAgIHJldHVybiBmO1xuICAgIGV2YWwob2JqKTtcbn1cblxudmFyIHJldCA9IHtcbiAgICB0aHJvd2VyOiB0aHJvd2VyLFxuICAgIGlzQXJyYXk6IGVzNS5pc0FycmF5LFxuICAgIGhhdmVHZXR0ZXJzOiBoYXZlR2V0dGVycyxcbiAgICBub3RFbnVtZXJhYmxlUHJvcDogbm90RW51bWVyYWJsZVByb3AsXG4gICAgaXNQcmltaXRpdmU6IGlzUHJpbWl0aXZlLFxuICAgIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgICBjYW5FdmFsdWF0ZTogY2FuRXZhbHVhdGUsXG4gICAgZGVwcmVjYXRlZDogZGVwcmVjYXRlZCxcbiAgICBlcnJvck9iajogZXJyb3JPYmosXG4gICAgdHJ5Q2F0Y2gxOiB0cnlDYXRjaDEsXG4gICAgdHJ5Q2F0Y2gyOiB0cnlDYXRjaDIsXG4gICAgdHJ5Q2F0Y2hBcHBseTogdHJ5Q2F0Y2hBcHBseSxcbiAgICBpbmhlcml0czogaW5oZXJpdHMsXG4gICAgd2l0aEFwcGVuZGVkOiB3aXRoQXBwZW5kZWQsXG4gICAgYXNTdHJpbmc6IGFzU3RyaW5nLFxuICAgIG1heWJlV3JhcEFzRXJyb3I6IG1heWJlV3JhcEFzRXJyb3IsXG4gICAgd3JhcHNQcmltaXRpdmVSZWNlaXZlcjogd3JhcHNQcmltaXRpdmVSZWNlaXZlcixcbiAgICB0b0Zhc3RQcm9wZXJ0aWVzOiB0b0Zhc3RQcm9wZXJ0aWVzXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJldDtcbiIsIi8qKlxuICogUXVpY2tzdGFydCBlbnRyeSBwb2ludC4gSWYgeW91IHdhbnQgdG8gY29uZmlndXJlIHRoaW5ncywgeW91J3JlIHByb2JhYmx5XG4gKiBiZXR0ZXIgb2ZmIGdvaW5nIGN1c3RvbS5cbiAqL1xuXG52YXIgZXh0ZW5kID0gcmVxdWlyZSgnLi91dGlsL2V4dGVuZCcpXG52YXIga2V5SGFuZGxlcnMgPSByZXF1aXJlKCcuL2tleS1oYW5kbGVycycpXG52YXIgYmFzZUtleXMgPSByZXF1aXJlKCcuL3N0b3Jlcy9rZXlzJylcblxudmFyIEtleU1hbmFnZXIgPSByZXF1aXJlKCcuL2tleS1tYW5hZ2VyJylcbnZhciBNYWluU3RvcmUgPSByZXF1aXJlKCcuL3N0b3Jlcy9tYWluJylcblxudmFyIERiID0gcmVxdWlyZSgnLi9kYicpXG5cbmNsYXNzIFRyZWVkIHtcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gZXh0ZW5kKHtcbiAgICAgIHBsdWdpbnM6IFtdLFxuICAgIH0sIG9wdGlvbnMgfHwge30pXG5cbiAgICB0aGlzLmtleU1hbmFnZXIgPSBuZXcgS2V5TWFuYWdlcigpXG4gIH1cblxuICBpbml0U3RvcmUoZGF0YSwgb3B0aW9ucykge1xuICAgIHZhciBvcHRpb25zID0gZXh0ZW5kKHtcbiAgICAgIFBMOiByZXF1aXJlKCcuL3BsL21lbScpLFxuICAgICAgcGw6IG51bGwsXG4gICAgICBhY3Rpb25zOiBudWxsLFxuICAgIH0sIG9wdGlvbnMpXG5cbiAgICB2YXIgcGwgPSB0aGlzLnBsID0gb3B0aW9ucy5wbCB8fCBuZXcgb3B0aW9ucy5QTCgpXG4gICAgdmFyIGRiID0gdGhpcy5kYiA9IG5ldyBEYihwbCwgcGx1Z2luVHlwZSh0aGlzLm9wdGlvbnMucGx1Z2lucywgJ2RiJykpXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGRiLmluaXQoZGF0YSwgZXJyID0+IHtcbiAgICAgICAgaWYgKGVycikgcmV0dXJuIHJlamVjdChlcnIpXG5cbiAgICAgICAgdmFyIHN0b3JlID0gdGhpcy5zdG9yZSA9IG5ldyBNYWluU3RvcmUoe1xuICAgICAgICAgIGFjdGlvbnM6IG9wdGlvbnMuYWN0aW9ucyxcbiAgICAgICAgICBwbHVnaW5zOiBwbHVnaW5UeXBlKHRoaXMub3B0aW9ucy5wbHVnaW5zLCAnc3RvcmUnKSxcbiAgICAgICAgICBhbGxQbHVnaW5zOiB0aGlzLm9wdGlvbnMucGx1Z2lucyxcbiAgICAgICAgICBkYjogZGJcbiAgICAgICAgfSlcbiAgICAgICAgdGhpcy5rZXlNYW5hZ2VyLmF0dGFjaChzdG9yZSlcbiAgICAgICAgcmVzb2x2ZShzdG9yZSlcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIG9uICh3aGF0LCBoYW5kbGVyKSB7XG4gICAgdGhpcy5zdG9yZS5vbih3aGF0LCBoYW5kbGVyKVxuICB9XG4gIG9mZiAod2hhdCwgaGFuZGxlcikge1xuICAgIHRoaXMuc3RvcmUub24od2hhdCwgaGFuZGxlcilcbiAgfVxuXG4gIHJlbW92ZVZpZXcoaWQpIHtcbiAgICB0aGlzLnN0b3JlLnVucmVnaXN0ZXJWaWV3KGlkKVxuICB9XG5cbiAgYWRkVmlldyhvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IGV4dGVuZCh7XG4gICAgICBhY3Rpb25zOiBudWxsLFxuICAgICAga2V5czoge30sXG4gICAgICByb290OiBudWxsLFxuICAgIH0sIG9wdGlvbnMpXG5cbiAgICB2YXIgc3RvcmVWaWV3ID0gdGhpcy5zdG9yZS5yZWdpc3RlclZpZXcob3B0aW9ucy5yb290LCBvcHRpb25zLmFjdGlvbnMpXG4gICAgdmFyIGFsbEtleXMgPSBleHRlbmQoe30sIGZsYXR0ZW5LZXlTZWN0aW9ucyhiYXNlS2V5cyksIGZsYXR0ZW5LZXlTZWN0aW9ucyhvcHRpb25zLmtleXMpKVxuXG4gICAgdmFyIHByb3BzID0ge1xuICAgICAgcGx1Z2luczogcGx1Z2luVHlwZSh0aGlzLm9wdGlvbnMucGx1Z2lucywgJ3ZpZXcnKSxcbiAgICAgIG5vZGVQbHVnaW5zOiBwbHVnaW5UeXBlKHRoaXMub3B0aW9ucy5wbHVnaW5zLCAnbm9kZScpLFxuICAgICAgc3RvcmU6IHN0b3JlVmlldyxcbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IGtleUhhbmRsZXJzKFxuICAgICAgYWxsS2V5cyxcbiAgICAgIHN0b3JlVmlldy5hY3Rpb25zLFxuICAgICAgcGx1Z2luVHlwZSh0aGlzLm9wdGlvbnMucGx1Z2lucywgJ2tleXMnKSxcbiAgICAgIHRoaXMub3B0aW9ucy5wbHVnaW5zKVxuXG4gICAgdGhpcy5rZXlNYW5hZ2VyLmFkZFZpZXcoc3RvcmVWaWV3LmlkLCBrZXlzKVxuXG4gICAgcmV0dXJuIHByb3BzXG4gIH1cblxufVxuXG5mdW5jdGlvbiBmbGF0dGVuS2V5U2VjdGlvbnMoa2V5cykge1xuICB2YXIgcmV0ID0ge31cbiAgZm9yICh2YXIgbmFtZSBpbiBrZXlzKSB7XG4gICAgZm9yICh2YXIgc3ViIGluIGtleXNbbmFtZV0pIHtcbiAgICAgIHJldFtzdWJdID0ga2V5c1tuYW1lXVtzdWJdXG4gICAgfVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gcGx1Z2luVHlwZShwbHVnaW5zLCB0eXBlKSB7XG4gIGlmICghcGx1Z2lucykgcmV0dXJuIFtdXG4gIHJldHVybiBwbHVnaW5zLnJlZHVjZSgobGlzdCwgcGx1Z2luKSA9PiB7XG4gICAgaWYgKHBsdWdpblt0eXBlXSkgbGlzdC51bnNoaWZ0KHBsdWdpblt0eXBlXSlcbiAgICByZXR1cm4gbGlzdFxuICB9LCBbXSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBUcmVlZFxuXG4iLCJcbnZhciB1dWlkID0gcmVxdWlyZSgnLi9saWIvdXVpZCcpXG52YXIgdmVyaWZ5Tm9kZXMgPSByZXF1aXJlKCcuL3V0aWwvdmVyaWZ5LW5vZGVzJylcbnZhciB0cmVlc1RvTWFwID0gcmVxdWlyZSgnLi91dGlsL3RyZWVzLXRvLW1hcCcpXG5cbm1vZHVsZS5leHBvcnRzID0gRGJcblxuZnVuY3Rpb24gRGIocGwsIHBsdWdpbnMpIHtcbiAgdGhpcy5ub2RlcyA9IHt9XG4gIHRoaXMucGwgPSBwbFxuICB0aGlzLnBsdWdpbnMgPSBwbHVnaW5zIHx8IFtdXG4gIHRoaXMuYWRkTmV3Tm9kZUF0dHJzID0gW11cbiAgcGx1Z2lucy5mb3JFYWNoKChwbHVnaW4pID0+IHtcbiAgICBpZiAocGx1Z2luLmFkZE5ld05vZGVBdHRycykge1xuICAgICAgdGhpcy5hZGROZXdOb2RlQXR0cnMucHVzaChwbHVnaW4uYWRkTmV3Tm9kZUF0dHJzKVxuICAgIH1cbiAgfSlcbiAgaWYgKCF0aGlzLmFkZE5ld05vZGVBdHRycy5sZW5ndGgpIHtcbiAgICB0aGlzLmFkZE5ld05vZGVBdHRycyA9IGZhbHNlXG4gIH1cbn1cblxuRGIucHJvdG90eXBlID0ge1xuICBpbml0OiBmdW5jdGlvbiAoZGVmYXVsdERhdGEsIGRvbmUpIHtcbiAgICB0aGlzLnBsLmZpbmRBbGwoJ3Jvb3QnLCAoZXJyLCByb290cykgPT4ge1xuICAgICAgaWYgKGVycikgcmV0dXJuIGRvbmUoZXJyKVxuICAgICAgaWYgKCFyb290cy5sZW5ndGgpIHJldHVybiB0aGlzLm1ha2VSb290KGRlZmF1bHREYXRhLCBkb25lKVxuICAgICAgdGhpcy5yb290ID0gcm9vdHNbMF0uaWRcbiAgICAgIHRoaXMucGwuZmluZEFsbCgnbm9kZScsIChlcnIsIG5vZGVzKSA9PiB7XG4gICAgICAgIGlmIChlcnIpIHJldHVybiBkb25lKGVycilcbiAgICAgICAgdmFyIG1hcCA9IHt9XG4gICAgICAgIG5vZGVzLmZvckVhY2goKG5vZGUpID0+IG1hcFtub2RlLmlkXSA9IG5vZGUpXG4gICAgICAgIHZhciBlcnIgPSB2ZXJpZnlOb2Rlcyh0aGlzLnJvb3QsIG1hcClcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHJldHVybiBkb25lKGVycilcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5vZGVzID0gbWFwXG5cbiAgICAgICAgZG9uZSgpXG4gICAgICB9KVxuICAgIH0pXG4gIH0sXG5cbiAgY3JlYXRlOiBmdW5jdGlvbiAocGlkLCBpeCwgY29udGVudCwgdHlwZSkge1xuICAgIHZhciBpZCA9IHV1aWQoKVxuICAgIHZhciBub3cgPSBEYXRlLm5vdygpXG4gICAgdmFyIG5vZGUgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBjcmVhdGVkOiBub3csXG4gICAgICBtb2RpZmllZDogbm93LFxuICAgICAgY29sbGFwc2VkOiB0cnVlLFxuICAgICAgY29udGVudDogY29udGVudCB8fCAnJyxcbiAgICAgIHR5cGU6IHR5cGUgfHwgJ2Jhc2UnLFxuICAgICAgY2hpbGRyZW46IFtdLFxuICAgICAgcGFyZW50OiBwaWQsXG4gICAgfVxuICAgIGlmICh0aGlzLmFkZE5ld05vZGVBdHRycykge1xuICAgICAgdGhpcy5hZGROZXdOb2RlQXR0cnMubWFwKGZuID0+IGZuKG5vZGUpKVxuICAgIH1cbiAgICB0aGlzLnNhdmUoaWQsIG5vZGUpXG4gICAgdGhpcy5pbnNlcnRDaGlsZChwaWQsIGlkLCBpeClcbiAgICByZXR1cm4gaWRcbiAgfSxcblxuICAvLyBkdW1wIGNoaWxkcmVuIElOVE8gdGhlIHBpZCBhdCBpbmRleCBpeFxuICBkdW1wOiBmdW5jdGlvbiAocGlkLCBjaGlsZHJlbiwgaXgsIGRvbmUpIHtcbiAgICB2YXIgbWFwcGVkID0gdHJlZXNUb01hcChjaGlsZHJlbiwgcGlkLCB0cnVlKVxuICAgIHRoaXMuYmF0Y2hTYXZlKG1hcHBlZC5ub2RlcywgKGVycikgPT4ge1xuICAgICAgaWYgKGVycikgcmV0dXJuIGRvbmUoZXJyKVxuICAgICAgdmFyIG9sZENoaWxkcmVuID0gdGhpcy5ub2Rlc1twaWRdLmNoaWxkcmVuXG4gICAgICBpZiAoIWl4ICYmIGl4ICE9PSAwKSB7XG4gICAgICAgIGNoaWxkcmVuID0gb2xkQ2hpbGRyZW4uY29uY2F0KG1hcHBlZC5yb290cylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNoaWxkcmVuID0gb2xkQ2hpbGRyZW4uc2xpY2UoKVxuICAgICAgICA7W10uc3BsaWNlLmFwcGx5KGNoaWxkcmVuLCBbaXgsIDBdLmNvbmNhdChtYXBwZWQucm9vdHMpKVxuICAgICAgfVxuICAgICAgdGhpcy5zZXQocGlkLCAnY2hpbGRyZW4nLCBjaGlsZHJlbiwgKGVycikgPT4ge1xuICAgICAgICBkb25lKGVyciwge2lkczogbWFwcGVkLnJvb3RzLCBvbGRDaGlsZHJlbjogb2xkQ2hpbGRyZW59KVxuICAgICAgfSlcbiAgICB9KVxuICB9LFxuXG4gIGV4cG9ydFRyZWU6IGZ1bmN0aW9uIChwaWQsIGtlZXBJZHMpIHtcbiAgICBwaWQgPSBwaWQgfHwgdGhpcy5yb290XG4gICAgdmFyIG5vZGUgPSB0aGlzLm5vZGVzW3BpZF1cbiAgICAgICwgb3V0ID0ge2lkOiBwaWR9XG4gICAgZm9yICh2YXIgbmFtZSBpbiBub2RlKSB7XG4gICAgICBvdXRbbmFtZV0gPSBub2RlW25hbWVdXG4gICAgfVxuICAgIG91dC5jaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4ubWFwKGlkID0+IHRoaXMuZXhwb3J0VHJlZShpZCwga2VlcElkcykpXG4gICAgaWYgKCFrZWVwSWRzKSBkZWxldGUgb3V0LmlkXG4gICAgZGVsZXRlIG91dC5wYXJlbnRcbiAgICByZXR1cm4gb3V0XG4gIH0sXG5cbiAgZXhwb3J0TWFueTogZnVuY3Rpb24gKGlkcywga2VlcElkcykge1xuICAgIHJldHVybiBpZHMubWFwKGlkID0+IHRoaXMuZXhwb3J0VHJlZShpZCwga2VlcElkcykpXG4gIH0sXG5cbiAgbWFrZVJvb3Q6IGZ1bmN0aW9uIChkZWZhdWx0RGF0YSwgZG9uZSkge1xuICAgIHRoaXMucm9vdCA9IGRlZmF1bHREYXRhICYmIGRlZmF1bHREYXRhLmlkIHx8IHV1aWQoKVxuICAgIHRoaXMucGwuc2F2ZSgncm9vdCcsIHRoaXMucm9vdCwge2lkOiB0aGlzLnJvb3R9LCAoZXJyKSA9PiB7XG4gICAgICBpZiAoZXJyKSByZXR1cm4gZG9uZShlcnIpXG4gICAgICB0aGlzLm5vZGVzID0ge31cbiAgICAgIHZhciBub3cgPSBEYXRlLm5vdygpXG4gICAgICB0aGlzLm5vZGVzW3RoaXMucm9vdF0gPSB7XG4gICAgICAgIGlkOiB0aGlzLnJvb3QsXG4gICAgICAgIGNyZWF0ZWQ6IG5vdyxcbiAgICAgICAgbW9kaWZpZWQ6IG5vdyxcbiAgICAgICAgY29udGVudDogZGVmYXVsdERhdGEuY29udGVudCB8fCAnSG9tZScsXG4gICAgICAgIHBhcmVudDogbnVsbCxcbiAgICAgICAgY2hpbGRyZW46IFtdXG4gICAgICB9XG4gICAgICB0aGlzLnBsLnNhdmUoJ25vZGUnLCB0aGlzLnJvb3QsIHRoaXMubm9kZXNbdGhpcy5yb290XSwgKGVycikgPT4ge1xuICAgICAgICBpZiAoZXJyKSByZXR1cm4gZG9uZShlcnIpXG4gICAgICAgIHRoaXMuZHVtcCh0aGlzLnJvb3QsIGRlZmF1bHREYXRhLmNoaWxkcmVuLCBudWxsLCBkb25lKVxuICAgICAgfSlcbiAgICB9KVxuICB9LFxuXG4gIGJhdGNoU2F2ZTogZnVuY3Rpb24gKG5vZGVzLCBkb25lKSB7XG4gICAgZm9yICh2YXIgaWQgaW4gbm9kZXMpIHtcbiAgICAgIHRoaXMubm9kZXNbaWRdID0gbm9kZXNbaWRdXG4gICAgICB0aGlzLm5vZGVzW2lkXS5tb2RpZmllZCA9IERhdGUubm93KClcbiAgICB9XG4gICAgdGhpcy5wbC5iYXRjaFNhdmUoJ25vZGUnLCBub2RlcywgZG9uZSlcbiAgfSxcblxuICBzYXZlOiBmdW5jdGlvbiAoaWQsIHZhbHVlLCBtb2RpZmllZCkge1xuICAgIHRoaXMubm9kZXNbaWRdID0gdmFsdWVcbiAgICB0aGlzLm5vZGVzW2lkXS5tb2RpZmllZCA9IG1vZGlmaWVkIHx8IERhdGUubm93KClcbiAgICB0aGlzLnBsLnNhdmUoJ25vZGUnLCBpZCwgdmFsdWUpXG4gIH0sXG5cbiAgc2V0OiBmdW5jdGlvbiAoaWQsIGF0dHIsIHZhbHVlLCBkb25lKSB7XG4gICAgdGhpcy5ub2Rlc1tpZF1bYXR0cl0gPSB2YWx1ZVxuICAgIHRoaXMubm9kZXNbaWRdLm1vZGlmaWVkID0gRGF0ZS5ub3coKVxuICAgIHRoaXMucGwuc2V0KCdub2RlJywgaWQsIGF0dHIsIHZhbHVlLCBkb25lKVxuICB9LFxuXG4gIHJlbW92ZTogZnVuY3Rpb24gKGlkKSB7XG4gICAgZGVsZXRlIHRoaXMubm9kZXNbaWRdXG4gICAgdGhpcy5wbC5yZW1vdmUoJ25vZGUnLCBpZClcbiAgfSxcblxuICByZW1vdmVNYW55OiBmdW5jdGlvbiAoaWRzKSB7XG4gICAgaWRzLmZvckVhY2godGhpcy5yZW1vdmUuYmluZCh0aGlzKSlcbiAgfSxcblxuICBzYXZlTWFueTogZnVuY3Rpb24gKG5vZGVzKSB7XG4gICAgbm9kZXMuZm9yRWFjaCgobm9kZSkgPT4gdGhpcy5zYXZlKG5vZGUuaWQsIG5vZGUpKVxuICB9LFxuXG4gIC8vIHJldHVybnMgdGhlIG9sZCBpbmRleFxuICByZW1vdmVDaGlsZDogZnVuY3Rpb24gKHBpZCwgaWQsIGNvdW50KSB7XG4gICAgY291bnQgPSBjb3VudCB8fCAxXG4gICAgdmFyIGl4ID0gdGhpcy5ub2Rlc1twaWRdLmNoaWxkcmVuLmluZGV4T2YoaWQpXG4gICAgaWYgKGl4ID09PSAtMSkgcmV0dXJuIC0xXG4gICAgdmFyIGNoID0gdGhpcy5ub2Rlc1twaWRdLmNoaWxkcmVuLnNsaWNlKClcbiAgICBjaC5zcGxpY2UoaXgsIGNvdW50KVxuICAgIHRoaXMuc2V0KHBpZCwgJ2NoaWxkcmVuJywgY2gpXG4gICAgcmV0dXJuIGl4XG4gIH0sXG5cbiAgaW5zZXJ0Q2hpbGQ6IGZ1bmN0aW9uIChwaWQsIGlkLCBpeCkge1xuICAgIHZhciBjaCA9IHRoaXMubm9kZXNbcGlkXS5jaGlsZHJlbi5zbGljZSgpXG4gICAgY2guc3BsaWNlKGl4LCAwLCBpZClcbiAgICB0aGlzLnNldChwaWQsICdjaGlsZHJlbicsIGNoKVxuICAgIHJldHVybiBpeFxuICB9LFxuXG4gIGluc2VydENoaWxkcmVuOiBmdW5jdGlvbiAocGlkLCBpZHMsIGl4KSB7XG4gICAgdmFyIGNoID0gdGhpcy5ub2Rlc1twaWRdLmNoaWxkcmVuLnNsaWNlKClcbiAgICBjaC5zcGxpY2UuYXBwbHkoY2gsIFtpeCwgMF0uY29uY2F0KGlkcykpXG4gICAgdGhpcy5zZXQocGlkLCAnY2hpbGRyZW4nLCBjaClcbiAgICByZXR1cm4gaXhcbiAgfSxcblxuICBzZXRNYW55OiBmdW5jdGlvbiAoYXR0ciwgaWRzLCB2YWx1ZSwgZG9uZSkge1xuICAgIHZhciBub3cgPSBEYXRlLm5vdygpXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICBpZHMuZm9yRWFjaCgoaWQsIGkpID0+IHtcbiAgICAgICAgdGhpcy5ub2Rlc1tpZF1bYXR0cl0gPSB2YWx1ZVtpXVxuICAgICAgICB0aGlzLm5vZGVzW2lkXS5tb2RpZmllZCA9IG5vd1xuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgaWRzLmZvckVhY2goKGlkLCBpKSA9PiB7XG4gICAgICAgIHRoaXMubm9kZXNbaWRdW2F0dHJdID0gdmFsdWVcbiAgICAgICAgdGhpcy5ub2Rlc1tpZF0ubW9kaWZpZWQgPSBub3dcbiAgICAgIH0pXG4gICAgfVxuICAgIHRoaXMucGwuYmF0Y2hTZXQoJ25vZGUnLCBhdHRyLCBpZHMsIHZhbHVlLCBkb25lKVxuICB9LFxuXG4gIHVwZGF0ZTogZnVuY3Rpb24gKGlkLCB1cGRhdGUsIGRvbmUpIHtcbiAgICBmb3IgKHZhciBuYW1lIGluIHVwZGF0ZSkge1xuICAgICAgdGhpcy5ub2Rlc1tpZF1bbmFtZV0gPSB1cGRhdGVbbmFtZV1cbiAgICB9XG4gICAgdGhpcy5ub2Rlc1tpZF0ubW9kaWZpZWQgPSBEYXRlLm5vdygpXG4gICAgdGhpcy5wbC51cGRhdGUoJ25vZGUnLCBpZCwgdXBkYXRlLCBkb25lKVxuICB9LFxufVxuIiwiXG52YXIga2V5SGFuZGxlciA9IHJlcXVpcmUoJy4vbGliL2tleXMnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleUhhbmRsZXJzXG5cbmZ1bmN0aW9uIGtleUhhbmRsZXJzKGtleXMsIGFjdGlvbnMsIHBsdWdpbnMsIGFsbFBsdWdpbnMpIHtcbiAgdmFyIG1vZGVzID0gWyd2aXN1YWwnLCAnbm9ybWFsJywgJ2luc2VydCddXG5cbiAgdmFyIGNvbGxlY3RlZCA9IHt9XG4gIG1vZGVzLmZvckVhY2goKG1vZGUpID0+IGNvbGxlY3RlZFttb2RlXSA9IHt9KVxuXG4gIHZhciB0eXBlZCA9IHt9XG4gIG1vZGVzLmZvckVhY2goKG1vZGUpID0+IHR5cGVkW21vZGVdID0ge30pXG5cbiAgdmFyIGNvbGxlY3QgPSBmdW5jdGlvbiAoa2V5cykge1xuICAgIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2Yga2V5cykge1xuICAgICAga2V5cyA9IGtleXMoYWxsUGx1Z2lucylcbiAgICB9XG4gICAgZm9yICh2YXIgYWN0aW9uTmFtZSBpbiBrZXlzKSB7XG4gICAgICBtb2Rlcy5mb3JFYWNoKChtb2RlKSA9PiB7XG4gICAgICAgIGlmIChrZXlzW2FjdGlvbk5hbWVdW21vZGVdKSB7XG4gICAgICAgICAgaWYgKGtleXNbYWN0aW9uTmFtZV0udHlwZSkge1xuICAgICAgICAgICAgaWYgKCF0eXBlZFttb2RlXVtrZXlzW2FjdGlvbk5hbWVdW21vZGVdXSkge1xuICAgICAgICAgICAgICB0eXBlZFttb2RlXVtrZXlzW2FjdGlvbk5hbWVdW21vZGVdXSA9IHt9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0eXBlZFttb2RlXVxuICAgICAgICAgICAgICBba2V5c1thY3Rpb25OYW1lXVttb2RlXV1cbiAgICAgICAgICAgICAgW2tleXNbYWN0aW9uTmFtZV0udHlwZV0gPSBhY3Rpb25OYW1lXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbGxlY3RlZFttb2RlXVthY3Rpb25OYW1lXSA9IGtleXNbYWN0aW9uTmFtZV1bbW9kZV1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgY29sbGVjdChrZXlzKVxuXG4gIGlmIChwbHVnaW5zKSB7XG4gICAgcGx1Z2lucy5mb3JFYWNoKGNvbGxlY3QpXG4gIH1cblxuICByZXR1cm4ge1xuICAgIHZpc3VhbDogYmluZEtleXMoY29sbGVjdGVkLnZpc3VhbCwgdHlwZWQudmlzdWFsLCBhY3Rpb25zKSxcbiAgICBub3JtYWw6IGJpbmRLZXlzKGNvbGxlY3RlZC5ub3JtYWwsIHR5cGVkLm5vcm1hbCwgYWN0aW9ucyksXG4gICAgaW5zZXJ0OiBiaW5kS2V5cyhjb2xsZWN0ZWQuaW5zZXJ0LCB0eXBlZC5pbnNlcnQsIGFjdGlvbnMpLFxuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWVsKGFjdGlvbk5hbWUpIHtcbiAgcmV0dXJuIGFjdGlvbk5hbWUucmVwbGFjZSgvIChcXHcpL2csIChmdWxsLCBsZXR0ZXIpID0+IGxldHRlci50b1VwcGVyQ2FzZSgpKVxufVxuXG5mdW5jdGlvbiBiaW5kS2V5cyhrZXlzLCB0eXBlZCwgYWN0aW9ucykge1xuICB2YXIgYmluZHMgPSB7fVxuICBPYmplY3Qua2V5cyhrZXlzKS5mb3JFYWNoKChhY3Rpb25OYW1lKSA9PiB7XG4gICAgdmFyIGFjdGlvbiA9IGNhbWVsKGFjdGlvbk5hbWUpXG4gICAgaWYgKCFhY3Rpb25zW2FjdGlvbl0pIHtcbiAgICAgIC8vIHRocm93IG5ldyBFcnJvcignVW5rbm93biBhY3Rpb246ICcgKyBjYW1lbChhY3Rpb25OYW1lKSlcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYmluZHNba2V5c1thY3Rpb25OYW1lXV0gPSBmdW5jdGlvbigpe3JldHVybiBhY3Rpb25zW2FjdGlvbl0oKX1cbiAgfSlcblxuICBPYmplY3Qua2V5cyh0eXBlZCkuZm9yRWFjaChrZXlCaW5kaW5nID0+IHtcbiAgICB2YXIgY2FtZWxzID0ge31cbiAgICBmb3IgKHZhciB0eXBlIGluIHR5cGVkW2tleUJpbmRpbmddKSB7XG4gICAgICBjYW1lbHNbdHlwZV0gPSBjYW1lbCh0eXBlZFtrZXlCaW5kaW5nXVt0eXBlXSlcbiAgICAgIGlmICghYWN0aW9uc1tjYW1lbHNbdHlwZV1dKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBhY3Rpb246ICcgKyBjYW1lbHNbdHlwZV0pXG4gICAgICB9XG4gICAgfVxuICAgIC8qXG4gICAgaWYgKE9iamVjdC5rZXlzKGNhbWVscykubGVuZ3RoID09PSAxKSB7XG4gICAgICBiaW5kc1t0eXBlZFtuYW1lXV0gPSBmdW5jdGlvbigpe3JldHVybiBhY3Rpb25zW2FjdGlvbl0oKX1cbiAgICB9XG4gICAgKi9cbiAgICBiaW5kc1trZXlCaW5kaW5nXSA9IGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgaWQgPSBhY3Rpb25zLnZpZXcuYWN0aXZlXG4gICAgICB0eXBlID0gYWN0aW9ucy5kYi5ub2Rlc1tpZF0udHlwZSB8fCAnYmFzZSdcbiAgICAgIGlmICghY2FtZWxzW3R5cGVdKSB7XG4gICAgICAgIHJldHVybiBjb25zb2xlLndhcm4oJ0tleWJpbmRpbmcgbm90IGRlZmluZWQgZm9yIHR5cGU6ICcgKyB0eXBlKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFjdGlvbnNbY2FtZWxzW3R5cGVdXShpZClcbiAgICB9XG4gIH0pXG5cbiAgcmV0dXJuIGtleUhhbmRsZXIoYmluZHMpXG59XG5cbiIsIlxudmFyIGtleXMgPSByZXF1aXJlKCcuL2xpYi9rZXlzJylcblxubW9kdWxlLmV4cG9ydHMgPSBLZXlNYW5hZ2VyXG5cbmZ1bmN0aW9uIEtleU1hbmFnZXIoKSB7XG4gIHRoaXMuX2tleURvd24gPSB0aGlzLmtleURvd24uYmluZCh0aGlzKVxuICB0aGlzLmtleXMgPSBudWxsXG4gIHRoaXMuc3RvcmUgPSBudWxsXG4gIHRoaXMuc3RhdGUgPSB7fVxuICB0aGlzLnZpZXdzID0ge31cbn1cblxuS2V5TWFuYWdlci5wcm90b3R5cGUgPSB7XG4gIGF0dGFjaDogZnVuY3Rpb24gKHN0b3JlKSB7XG4gICAgdGhpcy5zdG9yZSA9IHN0b3JlXG4gICAgc3RvcmUub24oW1xuICAgICAgc3RvcmUuZXZlbnRzLmFjdGl2ZVZpZXdDaGFuZ2VkKCksXG4gICAgICBzdG9yZS5ldmVudHMuYWN0aXZlTW9kZUNoYW5nZWQoKVxuICAgIF0sIHRoaXMudXBkYXRlLmJpbmQodGhpcykpXG4gICAgdGhpcy51cGRhdGUoKVxuICB9LFxuXG4gIHVwZGF0ZTogZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5zdG9yZS52aWV3c1t0aGlzLnN0b3JlLmFjdGl2ZVZpZXddKSByZXR1cm5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgYWN0aXZlOiB0aGlzLnN0b3JlLmFjdGl2ZVZpZXcsXG4gICAgICBtb2RlOiB0aGlzLnN0b3JlLnZpZXdzW3RoaXMuc3RvcmUuYWN0aXZlVmlld10ubW9kZSxcbiAgICB9XG4gIH0sXG5cbiAgYWRkVmlldzogZnVuY3Rpb24gKHZpZCwga2V5cykge1xuICAgIHRoaXMudmlld3NbdmlkXSA9IGtleXNcbiAgfSxcblxuICBhZGQ6IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICBpZiAodGhpcy5rZXlzKSByZXR1cm4gdGhpcy5rZXlzLmFkZChjb25maWcpXG4gICAgdGhpcy5rZXlzID0ga2V5cyhjb25maWcpXG4gICAgcmV0dXJuIG51bGxcbiAgfSxcblxuICByZW1vdmU6IGZ1bmN0aW9uIChsaWQpIHtcbiAgICBpZiAoIXRoaXMua2V5cykgcmV0dXJuIGZhbHNlXG4gICAgcmV0dXJuIHRoaXMua2V5cy5yZW1vdmUobGlkKVxuICB9LFxuXG4gIGRpc2FibGU6IGZ1bmN0aW9uICgpIHt0aGlzLmtleXMuZGlzYWJsZSgpfSxcbiAgZW5hYmxlOiBmdW5jdGlvbiAoKSB7dGhpcy5rZXlzLmVuYWJsZSgpfSxcblxuICBhZGRLZXlzOiBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgaWYgKHRoaXMua2V5cykgcmV0dXJuIHRoaXMua2V5cy5hZGQoY29uZmlnKVxuICAgIHRoaXMua2V5cyA9IGtleXMoY29uZmlnKVxuICB9LFxuXG4gIGtleURvd246IGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyIHJlc1xuICAgIGlmICh0aGlzLmtleXMpIHtcbiAgICAgIHJlcyA9IHRoaXMua2V5cyhlKVxuICAgICAgaWYgKHR5cGVvZiByZXMgIT09ICdzdHJpbmcnICYmIHJlcyAhPT0gdHJ1ZSkge1xuICAgICAgICBpZiAodGhpcy5zdG9yZSkge1xuICAgICAgICAgIHRoaXMudmlld3NbdGhpcy5zdGF0ZS5hY3RpdmVdW3RoaXMuc3RhdGUubW9kZV0uY2xlYXIoKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXNcbiAgICAgIH0gZWxzZSBpZiAocmVzID09PSB0cnVlKSB7XG4gICAgICAgIHJlcyA9IHVuZGVmaW5lZFxuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy5zdG9yZSkge1xuICAgICAgdGhpcy52aWV3c1t0aGlzLnN0YXRlLmFjdGl2ZV1bdGhpcy5zdGF0ZS5tb2RlXShlLCByZXMpXG4gICAgfVxuICB9LFxuXG4gIGxpc3RlbjogZnVuY3Rpb24gKHdpbmRvdykge1xuICAgIHRoaXMuX2tleURvd24gPSB0aGlzLmtleURvd24uYmluZCh0aGlzKVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5fa2V5RG93bilcbiAgfSxcblxuICB1bmxpc3RlbjogZnVuY3Rpb24gKHdpbmRvdykge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5fa2V5RG93bilcbiAgfSxcbn1cbiIsIlxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QvYWRkb25zJylcbiAgLCBjeCA9IFJlYWN0LmFkZG9ucy5jbGFzc1NldFxuICAsIFBUID0gUmVhY3QuUHJvcFR5cGVzXG5cbnZhciBDb250ZXh0TWVudSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgcHJvcFR5cGVzOiB7XG4gICAgb25DbG9zZTogUFQuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uU2VsZWN0OiBQVC5mdW5jLFxuICAgIGNvbmZpZzogUFQub2JqZWN0LFxuICB9LFxuXG4gIF9vbk1vdXNlRG93bjogZnVuY3Rpb24gKGUpIHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICB9LFxuXG4gIF9vblNlbGVjdDogZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblNlbGVjdCkgdGhpcy5wcm9wcy5vblNlbGVjdChpdGVtKVxuICAgIHRoaXMucHJvcHMub25DbG9zZSgpXG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIDxkaXZcbiAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICB0b3A6IHRoaXMucHJvcHMueSxcbiAgICAgICAgICBsZWZ0OiB0aGlzLnByb3BzLngsXG4gICAgICAgICAgekluZGV4OiAxMDAwLFxuICAgICAgICB9fVxuICAgICAgICBvbk1vdXNlRG93bj17dGhpcy5fb25Nb3VzZURvd259XG4gICAgICAgIGNsYXNzTmFtZT0nQ29udGV4dE1lbnUnPlxuICAgICAgPE1lbnVCb2R5XG4gICAgICAgIG9uU2VsZWN0PXt0aGlzLl9vblNlbGVjdH1cbiAgICAgICAgb25DbG9zZT17dGhpcy5wcm9wcy5vbkNsb3NlfVxuICAgICAgICBpdGVtcz17dGhpcy5wcm9wcy5jb25maWd9XG4gICAgICAgIHpJbmRleD17MTAwMH0vPlxuICAgIDwvZGl2PlxuICB9LFxufSlcblxudmFyIE1lbnVJdGVtID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBwcm9wVHlwZXM6IHtcbiAgICBjb25maWc6IFBULm9iamVjdCxcbiAgICBzZWxlY3RlZDogUFQuYm9vbCxcbiAgICBvblNlbGVjdDogUFQuZnVuYyxcbiAgICBvbkhvdmVyOiBQVC5mdW5jLFxuICAgIG9uQ2xvc2U6IFBULmZ1bmMsXG4gICAgekluZGV4OiBQVC5udW1iZXIsXG4gIH0sXG5cbiAgX29uQ2xpY2s6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5jb25maWcuZGlzYWJsZWQpIHJldHVyblxuICAgIGlmICh0aGlzLnByb3BzLmNvbmZpZy5hY3Rpb24pIHtcbiAgICAgIHRoaXMucHJvcHMuY29uZmlnLmFjdGlvbigpXG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5vbkNsb3NlKClcbiAgICB9XG4gICAgdGhpcy5wcm9wcy5vblNlbGVjdCh0aGlzLnByb3BzLmNvbmZpZylcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9e2N4KHtcbiAgICAgICdDb250ZXh0TWVudV9pdGVtJzogdHJ1ZSxcbiAgICAgICdDb250ZXh0TWVudV9pdGVtLXNlbGVjdGVkJzogdGhpcy5wcm9wcy5zZWxlY3RlZCxcbiAgICAgICdDb250ZXh0TWVudV9pdGVtLWRpc2FibGVkJzogdGhpcy5wcm9wcy5jb25maWcuZGlzYWJsZWQsXG4gICAgICAnQ29udGV4dE1lbnVfaXRlbS1wYXJlbnQnOiB0aGlzLnByb3BzLmNvbmZpZy5jaGlsZHJlbiAmJiB0aGlzLnByb3BzLmNvbmZpZy5jaGlsZHJlbi5sZW5ndGgsXG4gICAgfSl9PlxuICAgICAgPGRpdiBjbGFzc05hbWU9J0NvbnRleHRNZW51X2l0ZW1fdGl0bGUnXG4gICAgICAgICAgIG9uTW91c2VPdmVyPXt0aGlzLnByb3BzLm9uSG92ZXJ9XG4gICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuX29uQ2xpY2t9PlxuICAgICAgICB7LyogdGhpcy5wcm9wcy5jb25maWcuaWNvbiAmJlxuICAgICAgICAgPGltZyBzcmM9e3RoaXMucHJvcHMuY29uZmlnLmljb259Lz4gKi99XG4gICAgICAgIHt0aGlzLnByb3BzLmNvbmZpZy50aXRsZX1cbiAgICAgICAge3RoaXMucHJvcHMuY29uZmlnLnNob3J0Y3V0ICYmXG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSdDb250ZXh0TWVudV9pdGVtX3Nob3J0Y3V0Jz5cbiAgICAgICAgICAgIHt0aGlzLnByb3BzLmNvbmZpZy5zaG9ydGN1dH1cbiAgICAgICAgICA8L3NwYW4+fVxuICAgICAgPC9kaXY+XG4gICAgICB7dGhpcy5wcm9wcy5zZWxlY3RlZCAmJlxuICAgICAgICB0aGlzLnByb3BzLmNvbmZpZy5jaGlsZHJlbiAmJlxuICAgICAgICA8TWVudUJvZHlcbiAgICAgICAgICBvbkNsb3NlPXt0aGlzLnByb3BzLm9uQ2xvc2V9XG4gICAgICAgICAgb25TZWxlY3Q9e3RoaXMucHJvcHMub25TZWxlY3R9XG5cbiAgICAgICAgICB6SW5kZXg9e3RoaXMucHJvcHMuekluZGV4ICsgMX1cbiAgICAgICAgICBpdGVtcz17dGhpcy5wcm9wcy5jb25maWcuY2hpbGRyZW59Lz59XG4gICAgPC9kaXY+XG4gIH1cbn0pXG5cbnZhciBNZW51Qm9keSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgcHJvcFR5cGVzOiB7XG4gICAgaXRlbXM6IFBULmFycmF5LFxuICAgIHpJbmRleDogUFQubnVtYmVyLFxuXG4gICAgb25DbG9zZTogUFQuZnVuYyxcbiAgICBvblNlbGVjdDogUFQuZnVuYyxcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2VsZWN0ZWQ6IG51bGxcbiAgICB9XG4gIH0sXG5cbiAgX29uSG92ZXI6IGZ1bmN0aW9uIChpKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7c2VsZWN0ZWQ6IGl9KVxuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiA8dWwgY2xhc3NOYW1lPSdDb250ZXh0TWVudV9ib2R5JyBzdHlsZT17e3pJbmRleDogdGhpcy5wcm9wcy56SW5kZXh9fT5cbiAgICAgIHt0aGlzLnByb3BzLml0ZW1zLm1hcCgoaXRlbSwgaSkgPT5cbiAgICAgICAgPE1lbnVJdGVtXG4gICAgICAgICAgY29uZmlnPXtpdGVtfVxuICAgICAgICAgIHpJbmRleD17dGhpcy5wcm9wcy56SW5kZXh9XG4gICAgICAgICAgb25DbG9zZT17dGhpcy5wcm9wcy5vbkNsb3NlfVxuICAgICAgICAgIG9uU2VsZWN0PXt0aGlzLnByb3BzLm9uU2VsZWN0fVxuICAgICAgICAgIG9uSG92ZXI9e3RoaXMuX29uSG92ZXIuYmluZChudWxsLCBpKX1cbiAgICAgICAgICBzZWxlY3RlZD17dGhpcy5zdGF0ZS5zZWxlY3RlZCA9PT0gaX0vPil9XG4gICAgPC91bD5cbiAgfSxcbn0pXG5cbkNvbnRleHRNZW51LnNob3cgPSBmdW5jdGlvbiAoZGVmaW5pdGlvbiwgeCwgeSwgb25TZWxlY3QpIHtcbiAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG5vZGUpXG4gIHZhciBjbG9zZU91dCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGNsb3NlT3V0KVxuICAgIGlmICghbm9kZS5wYXJlbnROb2RlKSByZXR1cm5cbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKG5vZGUpXG4gIH1cbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGNsb3NlT3V0KVxuXG4gIFJlYWN0LnJlbmRlcig8Q29udGV4dE1lbnVcbiAgICB4PXt4fSB5PXt5fVxuICAgIGNvbmZpZz17ZGVmaW5pdGlvbn1cbiAgICBvblNlbGVjdD17b25TZWxlY3R9XG4gICAgb25DbG9zZT17Y2xvc2VPdXR9Lz4sIG5vZGUpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ29udGV4dE1lbnVcblxuIiwiXG5tb2R1bGUuZXhwb3J0cyA9IGtleXNcblxua2V5cy5rZXlOYW1lID0ga2V5TmFtZVxuXG52YXIgS0VZUyA9IHtcbiAgODogJ2JhY2tzcGFjZScsXG4gIDk6ICd0YWInLFxuICAxMzogJ2VudGVyJyxcbiAgMjc6ICdlc2NhcGUnLFxuICAzMjogJ3NwYWNlJyxcbiAgMzM6ICdwYWdlLXVwJyxcbiAgMzQ6ICdwYWdlLWRvd24nLFxuICAzNTogJ2VuZCcsXG4gIDM2OiAnaG9tZScsXG4gIDM3OiAnbGVmdCcsXG4gIDM4OiAndXAnLFxuICAzOTogJ3JpZ2h0JyxcbiAgNDA6ICdkb3duJyxcbiAgNDY6ICdkZWxldGUnLFxuICAxMTM6ICdmMicsXG4gIDE4NjogJzsnLFxuICAxODg6ICdjb21tYScsXG4gIDE5MDogJy4nLFxuICAxOTE6ICcvJyxcbiAgMjE5OiAnWycsXG4gIDIyMTogJ10nXG59XG5cbi8qKiBUT0RPXG52YXIgU0hJRlRfS0VZUyA9IHtcbiAgJz8nOiAnLycsXG4gICdEJzogJ2QnLFxufVxuKi9cblxuZnVuY3Rpb24ga2V5TmFtZShjb2RlKSB7XG4gIGlmIChjb2RlIDw9IDkwICYmIGNvZGUgPj0gNjUpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlICsgMzIpXG4gIH1cbiAgaWYgKGNvZGUgPj0gNDggJiYgY29kZSA8PSA1Nykge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpXG4gIH1cbiAgcmV0dXJuIEtFWVNbY29kZV1cbn1cblxuZnVuY3Rpb24gbWFrZUxheWVyKGNvbmZpZykge1xuICB2YXIgbGF5ZXIgPSB7a21hcDoge30sIHByZWZpeGVzOiB7fX1cbiAgICAsIHBhcnRzXG4gICAgLCBwYXJ0XG4gICAgLCBzZXFcbiAgZm9yICh2YXIga2V5IGluIGNvbmZpZykge1xuICAgIHBhcnRzID0ga2V5LnNwbGl0KCcsJylcbiAgICBmb3IgKHZhciBpPTA7aTxwYXJ0cy5sZW5ndGg7aSsrKSB7XG4gICAgICBwYXJ0ID0gcGFydHNbaV0udHJpbSgpXG4gICAgICAvKiogVE9ET1xuICAgICAgaWYgKFNISUZUX0tFWVNbcGFydF0pIHtcbiAgICAgICAgcGFydCA9ICdzaGlmdCsnICsgU0hJRlRfS0VZU1twYXJ0XVxuICAgICAgfVxuICAgICAgKi9cbiAgICAgIGlmICh3aW5kb3cuREVCVUdfS0VZUyAmJiBsYXllci5rbWFwW3BhcnRdKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdPdmVycmlmaW5nIGtleTonLCBwYXJ0KVxuICAgICAgfVxuICAgICAgbGF5ZXIua21hcFtwYXJ0XSA9IGNvbmZpZ1trZXldXG4gICAgICBpZiAocGFydC5pbmRleE9mKCcgJykgIT09IC0xKSB7XG4gICAgICAgIHNlcSA9IHBhcnQuc3BsaXQoL1xccysvZylcbiAgICAgICAgdmFyIG4gPSAnJ1xuICAgICAgICBmb3IgKHZhciBqPTA7IGo8c2VxLmxlbmd0aC0xOyBqKyspIHtcbiAgICAgICAgICAvKiogVE9ET1xuICAgICAgICAgIGlmIChTSElGVF9LRVlTW3NlcVtqXV0pIHtcbiAgICAgICAgICAgIHNlcVtqXSA9ICdzaGlmdCsnICsgU0hJRlRfS0VZU1tzZXFbal1dXG4gICAgICAgICAgfVxuICAgICAgICAgICovXG4gICAgICAgICAgbiArPSBzZXFbal1cbiAgICAgICAgICBsYXllci5wcmVmaXhlc1tuXSA9IHRydWVcbiAgICAgICAgICBuICs9ICcgJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBsYXllclxufVxuXG5mdW5jdGlvbiBtb2RLZXlOYW1lKGUpIHtcbiAgdmFyIGtleSA9IGtleU5hbWUoZS5rZXlDb2RlKVxuICBpZiAoIWtleSkge1xuICAgIGlmICh3aW5kb3cuREVCVUdfS0VZUykge1xuICAgICAgY29uc29sZS5sb2coZS5rZXlDb2RlKVxuICAgIH1cbiAgICByZXR1cm4gbnVsbFxuICB9XG4gIGlmIChlLmFsdEtleSkga2V5ID0gJ2FsdCsnICsga2V5XG4gIGlmIChlLnNoaWZ0S2V5KSBrZXkgPSAnc2hpZnQrJyArIGtleVxuICBpZiAoZS5jdHJsS2V5KSBrZXkgPSAnY3RybCsnICsga2V5XG4gIGlmIChlLm1ldGFLZXkpIGtleSA9ICdjbWQrJyArIGtleVxuICByZXR1cm4ga2V5XG59XG5cbmZ1bmN0aW9uIGtleXMoY29uZmlnKSB7XG4gIHZhciBrbWFwID0ge31cbiAgICAsIHByZWZpeGVzID0ge31cbiAgICAsIGN1cl9wcmVmaXggPSBudWxsXG4gICAgLCBkaXNhYmxlZCA9IGZhbHNlXG5cbiAgICAsIGxheWVyX2lkcyA9IFtdXG4gICAgLCBsYXllcnMgPSB7fVxuICAgICwgaWQgPSAxXG5cbiAgZnVuY3Rpb24gYWRkTGF5ZXIoY29uZmlnKSB7XG4gICAgdmFyIGxheWVyID0gbWFrZUxheWVyKGNvbmZpZylcbiAgICAgICwgbGlkID0gaWQrK1xuICAgIGxheWVyX2lkcy5wdXNoKGxpZClcbiAgICBsYXllcnNbbGlkXSA9IGxheWVyXG4gICAgcmV0dXJuIGxpZFxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlTGF5ZXIobGlkKSB7XG4gICAgaWYgKCFsYXllcnNbbGlkXSkgcmV0dXJuIGZhbHNlXG4gICAgdmFyIGl4ID0gbGF5ZXJfaWRzLmluZGV4T2YobGlkKVxuICAgIGxheWVyX2lkcy5zcGxpY2UoaXgsIDEpXG4gICAgZGVsZXRlIGxheWVyc1tsaWRdXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUxheWVyKGxheWVyLCBrZXkpIHtcbiAgICBpZiAobGF5ZXIua21hcFtrZXldKSB7XG4gICAgICByZXR1cm4gbGF5ZXIua21hcFtrZXldXG4gICAgfVxuICAgIGlmIChsYXllci5wcmVmaXhlc1trZXldKSB7XG4gICAgICByZXR1cm4ga2V5XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZmluZEFjdGlvbihrZXkpIHtcbiAgICBpZiAoY3VyX3ByZWZpeCkge1xuICAgICAga2V5ID0gY3VyX3ByZWZpeC5rZXkgKyAnICcgKyBrZXlcbiAgICAgIHZhciBnb3QgPSBoYW5kbGVMYXllcihsYXllcnNbY3VyX3ByZWZpeC5saWRdLCBrZXkpXG4gICAgICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiBnb3QpIHtcbiAgICAgICAgY3VyX3ByZWZpeC5rZXkgPSBnb3RcbiAgICAgICAgcmV0dXJuIGN1cl9wcmVmaXgua2V5XG4gICAgICB9XG4gICAgICBjdXJfcHJlZml4ID0gbnVsbFxuICAgICAgaWYgKGdvdCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgICAgcmV0dXJuIGdvdFxuICAgIH1cbiAgICBmb3IgKHZhciBpPWxheWVyX2lkcy5sZW5ndGgtMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBnb3QgPSBoYW5kbGVMYXllcihsYXllcnNbbGF5ZXJfaWRzW2ldXSwga2V5KVxuICAgICAgaWYgKGdvdCA9PT0gbnVsbCkgY29udGludWVcbiAgICAgIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIGdvdCkge1xuICAgICAgICBjdXJfcHJlZml4ID0ge1xuICAgICAgICAgIGtleTogZ290LFxuICAgICAgICAgIGxpZDogbGF5ZXJfaWRzW2ldLFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjdXJfcHJlZml4LmtleVxuICAgICAgfVxuICAgICAgcmV0dXJuIGdvdFxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlcihlLCBwcmVmaXgpIHtcbiAgICBpZiAoZGlzYWJsZWQpIHJldHVyblxuICAgIHZhciBrZXkgPSBtb2RLZXlOYW1lKGUpXG4gICAgaWYgKHdpbmRvdy5ERUJVR19LRVlTKSB7XG4gICAgICBjb25zb2xlLmxvZyhrZXkpXG4gICAgfVxuICAgIHZhciBhY3Rpb24gPSBmaW5kQWN0aW9uKGtleSlcbiAgICBpZiAocHJlZml4ICYmICghY3VyX3ByZWZpeCB8fCBjdXJfcHJlZml4LmtleSAhPT0gcHJlZml4KSkgcmV0dXJuXG4gICAgaWYgKCdmdW5jdGlvbicgIT09IHR5cGVvZiBhY3Rpb24pIHJldHVybiBhY3Rpb25cbiAgICBpZiAoYWN0aW9uLmNhbGwodGhpcywgZSkgIT09IHRydWUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG5cbiAgaGFuZGxlci5jbGVhciA9IGZ1bmN0aW9uICgpIHtjdXJfcHJlZml4ID0gbnVsbH1cbiAgaGFuZGxlci5yZW1vdmUgPSByZW1vdmVMYXllclxuICBoYW5kbGVyLmFkZCA9IGFkZExheWVyXG4gIGhhbmRsZXIuYWRkKGNvbmZpZylcbiAgaGFuZGxlci5kaXNhYmxlID0gZnVuY3Rpb24gKCkge2Rpc2FibGVkID0gdHJ1ZX1cbiAgaGFuZGxlci5lbmFibGUgPSBmdW5jdGlvbiAoKSB7ZGlzYWJsZWQgPSBmYWxzZX1cbiAgcmV0dXJuIGhhbmRsZXJcbn1cblxuXG4iLCJcbm1vZHVsZS5leHBvcnRzID0gdXVpZFxuXG52YXIgQ0hBUlMgPSAnMDEyMzQ1Njc4OWFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6J1xuZnVuY3Rpb24gdXVpZChsbikge1xuICBsbiA9IGxuIHx8IDMyXG4gIHZhciBpZCA9ICcnXG4gIGZvciAodmFyIGk9MDsgaTxsbjsgaSsrKSB7XG4gICAgaWQgKz0gQ0hBUlNbcGFyc2VJbnQoTWF0aC5yYW5kb20oKSAqIENIQVJTLmxlbmd0aCldXG4gIH1cbiAgcmV0dXJuIGlkXG59XG5cbiIsIlxudmFyIFByb21pc2UgPSByZXF1aXJlKCdibHVlYmlyZCcpXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdC9hZGRvbnMnKVxudmFyIFBUID0gUmVhY3QuUHJvcFR5cGVzXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHtcbiAgICAgIHN0b3JlQXR0cnM6IG9wdGlvbnMsXG4gICAgfVxuICB9XG5cbiAgdmFyIHBsdWdpblVwZGF0ZXMgPSBbXVxuXG4gIHZhciBwbHVnaW4gPSB7XG4gICAgcHJvcFR5cGVzOiB7XG4gICAgICBzdG9yZTogUFQub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgfSxcblxuICAgIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0YXRlID0gb3B0aW9ucy5zdG9yZUF0dHJzLmNhbGwodGhpcywgdGhpcy5wcm9wcy5zdG9yZS5nZXR0ZXJzLCB0aGlzLnByb3BzKVxuICAgICAgdmFyIGV4dHJhXG4gICAgICBpZiAob3B0aW9ucy5pbml0U3RvcmVTdGF0ZSkge1xuICAgICAgICBleHRyYSA9IG9wdGlvbnMuaW5pdFN0b3JlU3RhdGUuY2FsbCh0aGlzLCBzdGF0ZSwgdGhpcy5wcm9wcy5zdG9yZS5nZXR0ZXJzLCB0aGlzLnByb3BzKVxuICAgICAgICBmb3IgKHZhciBuYW1lIGluIGV4dHJhKSBzdGF0ZVtuYW1lXSA9IGV4dHJhW25hbWVdXG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpPTA7IGk8cGx1Z2luVXBkYXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBleHRyYSA9IHBsdWdpblVwZGF0ZXNbaV0uY2FsbCh0aGlzLCBzdGF0ZSwgdGhpcy5wcm9wcy5zdG9yZS5nZXR0ZXJzLCB0aGlzLnByb3BzKVxuICAgICAgICBmb3IgKG5hbWUgaW4gZXh0cmEpIHN0YXRlW25hbWVdID0gZXh0cmFbbmFtZV1cbiAgICAgIH1cbiAgICAgIHJldHVybiBzdGF0ZVxuICAgIH0sXG5cbiAgICBsaXN0ZW46IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjaGFuZ2VzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMpXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJiBBcnJheS5pc0FycmF5KGFyZ3VtZW50c1swXSkpIHtcbiAgICAgICAgICBjaGFuZ2VzID0gYXJndW1lbnRzWzBdXG4gICAgICB9XG5cbiAgICAgIHBsdWdpblVwZGF0ZXMgPSBbXVxuICAgICAgaWYgKHRoaXMucHJvcHMucGx1Z2lucykge1xuICAgICAgICB0aGlzLnByb3BzLnBsdWdpbnMuZm9yRWFjaCgocGx1Z2luKSA9PiB7XG4gICAgICAgICAgaWYgKCFwbHVnaW4ubGlzdGVuZXIpIHJldHVyblxuICAgICAgICAgIGlmIChwbHVnaW4ubGlzdGVuZXIudXBkYXRlU3RvcmVTdGF0ZSkge1xuICAgICAgICAgICAgcGx1Z2luVXBkYXRlcy5wdXNoKHBsdWdpbi5saXN0ZW5lci51cGRhdGVTdG9yZVN0YXRlKVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocGx1Z2luLmxpc3RlbmVyLmNoYW5nZXMpIHtcbiAgICAgICAgICAgIGNoYW5nZXMgPSBjaGFuZ2VzLmNvbmNhdChwbHVnaW4ubGlzdGVuZXIuY2hhbmdlcylcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIHRoaXMucHJvcHMuc3RvcmUub24oY2hhbmdlcywgdGhpcy5fZ290Q2hhbmdlcylcbiAgICAgIC8vIHNhdmUgaXQgZm9yIGxhdGVyIHNvIHdlIGNhbiByZW1vdmUgdGhlIGxpc3RlbmVyIG9uIHVubW91bnRcbiAgICAgIGlmICghdGhpcy5fZmx1eCkgdGhpcy5fZmx1eCA9IFtdXG4gICAgICB0aGlzLl9mbHV4LnB1c2goW2NoYW5nZXMsIHRoaXMuX2dvdENoYW5nZXNdKVxuICAgIH0sXG5cbiAgICBfZ290Q2hhbmdlczogZnVuY3Rpb24gKCkge1xuICAgICAgLy8gaWYgREVCVUdcbiAgICAgIHZhciBzdGF0ZSA9IG9wdGlvbnMuc3RvcmVBdHRycy5jYWxsKHRoaXMsIHRoaXMucHJvcHMuc3RvcmUuZ2V0dGVycywgdGhpcy5wcm9wcylcbiAgICAgIHZhciBleHRyYSwgbmFtZVxuICAgICAgaWYgKG9wdGlvbnMudXBkYXRlU3RvcmVTdGF0ZSkge1xuICAgICAgICBleHRyYSA9IG9wdGlvbnMudXBkYXRlU3RvcmVTdGF0ZS5jYWxsKHRoaXMsIHN0YXRlLCB0aGlzLnByb3BzLnN0b3JlLmdldHRlcnMsIHRoaXMucHJvcHMpXG4gICAgICAgIGZvciAobmFtZSBpbiBleHRyYSkgc3RhdGVbbmFtZV0gPSBleHRyYVtuYW1lXVxuICAgICAgfVxuICAgICAgZm9yICh2YXIgaT0wOyBpPHBsdWdpblVwZGF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZXh0cmEgPSBwbHVnaW5VcGRhdGVzW2ldLmNhbGwodGhpcywgc3RhdGUsIHRoaXMucHJvcHMuc3RvcmUuZ2V0dGVycywgdGhpcy5wcm9wcylcbiAgICAgICAgZm9yIChuYW1lIGluIGV4dHJhKSBzdGF0ZVtuYW1lXSA9IGV4dHJhW25hbWVdXG4gICAgICB9XG4gICAgICBpZiAod2luZG93LkRFQlVHX0NIQU5HRVMpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ2dvdCBjaGFuZ2VzJywgc3RhdGUpXG4gICAgICB9XG4gICAgICB2YXIgcCA9IFByb21pc2UucGVuZGluZygpXG4gICAgICB0aGlzLnNldFN0YXRlKHN0YXRlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHAucmVzb2x2ZSgpXG4gICAgICB9KVxuICAgICAgcmV0dXJuIHBcbiAgICB9LFxuXG5cbiAgICBfc3RvcExpc3RlbmluZzogZnVuY3Rpb24gKHN0b3JlKSB7XG4gICAgICBzdG9yZSA9IHN0b3JlIHx8IHRoaXMucHJvcHMuc3RvcmVcbiAgICAgIGZvciAodmFyIGk9MDsgaTx0aGlzLl9mbHV4Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHN0b3JlLm9mZih0aGlzLl9mbHV4W2ldWzBdLCB0aGlzLl9mbHV4W2ldWzFdKVxuICAgICAgfVxuICAgICAgdGhpcy5fZmx1eCA9IG51bGxcbiAgICB9LFxuXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghdGhpcy5fZmx1eCkgcmV0dXJuXG4gICAgICB0aGlzLl9zdG9wTGlzdGVuaW5nKClcbiAgICB9LFxuICB9XG5cbiAgaWYgKG9wdGlvbnMuc2hvdWxkR2V0TmV3KSB7XG4gICAgcGx1Z2luLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiAobmV4dFByb3BzKSB7XG4gICAgICBpZiAob3B0aW9ucy5zaG91bGRHZXROZXcuY2FsbCh0aGlzLCBuZXh0UHJvcHMpKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmdldExpc3RlbmVycykge1xuICAgICAgICAgIHRoaXMuX3N0b3BMaXN0ZW5pbmcoKVxuICAgICAgICAgIHRoaXMubGlzdGVuKG9wdGlvbnMuZ2V0TGlzdGVuZXJzKG5leHRQcm9wcywgbmV4dFByb3BzLnN0b3JlLmV2ZW50cykpXG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN0YXRlID0gb3B0aW9ucy5zdG9yZUF0dHJzLmNhbGwodGhpcywgbmV4dFByb3BzLnN0b3JlLmdldHRlcnMsIG5leHRQcm9wcylcbiAgICAgICAgdmFyIGV4dHJhXG4gICAgICAgIGlmIChvcHRpb25zLmluaXRTdG9yZVN0YXRlKSB7XG4gICAgICAgICAgZXh0cmEgPSBvcHRpb25zLmluaXRTdG9yZVN0YXRlLmNhbGwodGhpcywgc3RhdGUsIG5leHRQcm9wcy5zdG9yZS5nZXR0ZXJzLCBuZXh0UHJvcHMpXG4gICAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBleHRyYSkgc3RhdGVbbmFtZV0gPSBleHRyYVtuYW1lXVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKG9wdGlvbnMuZ2V0TGlzdGVuZXJzKSB7XG4gICAgcGx1Z2luLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMubGlzdGVuKG9wdGlvbnMuZ2V0TGlzdGVuZXJzKHRoaXMucHJvcHMsIHRoaXMucHJvcHMuc3RvcmUuZXZlbnRzKSlcbiAgICB9XG4gICAgcGx1Z2luLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLnN0b3JlICE9PSBwcmV2UHJvcHMuc3RvcmUpIHtcbiAgICAgICAgdGhpcy5fc3RvcExpc3RlbmluZyhwcmV2UHJvcHMuc3RvcmUpXG4gICAgICAgIHRoaXMubGlzdGVuKG9wdGlvbnMuZ2V0TGlzdGVuZXJzKHRoaXMucHJvcHMsIHRoaXMucHJvcHMuc3RvcmUuZXZlbnRzKSlcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHBsdWdpblxufVxuXG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNCBQZXRrYSBBbnRvbm92XG4gKiBcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczo8L3A+XG4gKiBcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqIFxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICogXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzICE9PSB2b2lkIDApIHJldHVybiB0aGlzO1xuICAgIHRyeSB7cmV0dXJuIGdsb2JhbDt9XG4gICAgY2F0Y2goZSkge31cbiAgICB0cnkge3JldHVybiB3aW5kb3c7fVxuICAgIGNhdGNoKGUpIHt9XG4gICAgdHJ5IHtyZXR1cm4gc2VsZjt9XG4gICAgY2F0Y2goZSkge31cbn0pKCk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNCBQZXRrYSBBbnRvbm92XG4gKiBcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczo8L3A+XG4gKiBcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqIFxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICogXG4gKi9cblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbnZhciBnbG9iYWwgPSByZXF1aXJlKFwiLi9nbG9iYWwuanNcIik7XG52YXIgdXRpbCA9IHJlcXVpcmUoXCIuL3V0aWwuanNcIik7XG52YXIgYXN5bmMgPSByZXF1aXJlKFwiLi9hc3luYy5qc1wiKTtcbnZhciBlcnJvcnMgPSByZXF1aXJlKFwiLi9lcnJvcnMuanNcIik7XG5cbnZhciBJTlRFUk5BTCA9IGZ1bmN0aW9uKCl7fTtcbnZhciBBUFBMWSA9IHt9O1xudmFyIE5FWFRfRklMVEVSID0ge2U6IG51bGx9O1xuXG52YXIgUHJvbWlzZUFycmF5ID0gcmVxdWlyZShcIi4vcHJvbWlzZV9hcnJheS5qc1wiKShQcm9taXNlLCBJTlRFUk5BTCk7XG52YXIgQ2FwdHVyZWRUcmFjZSA9IHJlcXVpcmUoXCIuL2NhcHR1cmVkX3RyYWNlLmpzXCIpKCk7XG52YXIgQ2F0Y2hGaWx0ZXIgPSByZXF1aXJlKFwiLi9jYXRjaF9maWx0ZXIuanNcIikoTkVYVF9GSUxURVIpO1xudmFyIFByb21pc2VSZXNvbHZlciA9IHJlcXVpcmUoXCIuL3Byb21pc2VfcmVzb2x2ZXIuanNcIik7XG5cbnZhciBpc0FycmF5ID0gdXRpbC5pc0FycmF5O1xuXG52YXIgZXJyb3JPYmogPSB1dGlsLmVycm9yT2JqO1xudmFyIHRyeUNhdGNoMSA9IHV0aWwudHJ5Q2F0Y2gxO1xudmFyIHRyeUNhdGNoMiA9IHV0aWwudHJ5Q2F0Y2gyO1xudmFyIHRyeUNhdGNoQXBwbHkgPSB1dGlsLnRyeUNhdGNoQXBwbHk7XG52YXIgUmFuZ2VFcnJvciA9IGVycm9ycy5SYW5nZUVycm9yO1xudmFyIFR5cGVFcnJvciA9IGVycm9ycy5UeXBlRXJyb3I7XG52YXIgQ2FuY2VsbGF0aW9uRXJyb3IgPSBlcnJvcnMuQ2FuY2VsbGF0aW9uRXJyb3I7XG52YXIgVGltZW91dEVycm9yID0gZXJyb3JzLlRpbWVvdXRFcnJvcjtcbnZhciBSZWplY3Rpb25FcnJvciA9IGVycm9ycy5SZWplY3Rpb25FcnJvcjtcbnZhciBvcmlnaW5hdGVzRnJvbVJlamVjdGlvbiA9IGVycm9ycy5vcmlnaW5hdGVzRnJvbVJlamVjdGlvbjtcbnZhciBtYXJrQXNPcmlnaW5hdGluZ0Zyb21SZWplY3Rpb24gPSBlcnJvcnMubWFya0FzT3JpZ2luYXRpbmdGcm9tUmVqZWN0aW9uO1xudmFyIGNhbkF0dGFjaCA9IGVycm9ycy5jYW5BdHRhY2g7XG52YXIgdGhyb3dlciA9IHV0aWwudGhyb3dlcjtcbnZhciBhcGlSZWplY3Rpb24gPSByZXF1aXJlKFwiLi9lcnJvcnNfYXBpX3JlamVjdGlvblwiKShQcm9taXNlKTtcblxuXG52YXIgbWFrZVNlbGZSZXNvbHV0aW9uRXJyb3IgPSBmdW5jdGlvbiBQcm9taXNlJF9tYWtlU2VsZlJlc29sdXRpb25FcnJvcigpIHtcbiAgICByZXR1cm4gbmV3IFR5cGVFcnJvcihcImNpcmN1bGFyIHByb21pc2UgcmVzb2x1dGlvbiBjaGFpblwiKTtcbn07XG5cbmZ1bmN0aW9uIGlzUHJvbWlzZShvYmopIHtcbiAgICBpZiAob2JqID09PSB2b2lkIDApIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgUHJvbWlzZTtcbn1cblxuZnVuY3Rpb24gaXNQcm9taXNlQXJyYXlQcm94eShyZWNlaXZlciwgcHJvbWlzZVNsb3RWYWx1ZSkge1xuICAgIGlmIChyZWNlaXZlciBpbnN0YW5jZW9mIFByb21pc2VBcnJheSkge1xuICAgICAgICByZXR1cm4gcHJvbWlzZVNsb3RWYWx1ZSA+PSAwO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIFByb21pc2UocmVzb2x2ZXIpIHtcbiAgICBpZiAodHlwZW9mIHJlc29sdmVyICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcInRoZSBwcm9taXNlIGNvbnN0cnVjdG9yIHJlcXVpcmVzIGEgcmVzb2x2ZXIgZnVuY3Rpb25cIik7XG4gICAgfVxuICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yICE9PSBQcm9taXNlKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJ0aGUgcHJvbWlzZSBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgaW52b2tlZCBkaXJlY3RseVwiKTtcbiAgICB9XG4gICAgdGhpcy5fYml0RmllbGQgPSAwO1xuICAgIHRoaXMuX2Z1bGZpbGxtZW50SGFuZGxlcjAgPSB2b2lkIDA7XG4gICAgdGhpcy5fcmVqZWN0aW9uSGFuZGxlcjAgPSB2b2lkIDA7XG4gICAgdGhpcy5fcHJvbWlzZTAgPSB2b2lkIDA7XG4gICAgdGhpcy5fcmVjZWl2ZXIwID0gdm9pZCAwO1xuICAgIHRoaXMuX3NldHRsZWRWYWx1ZSA9IHZvaWQgMDtcbiAgICB0aGlzLl9ib3VuZFRvID0gdm9pZCAwO1xuICAgIGlmIChyZXNvbHZlciAhPT0gSU5URVJOQUwpIHRoaXMuX3Jlc29sdmVGcm9tUmVzb2x2ZXIocmVzb2x2ZXIpO1xufVxuXG5Qcm9taXNlLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gUHJvbWlzZSRiaW5kKHRoaXNBcmcpIHtcbiAgICB2YXIgcmV0ID0gbmV3IFByb21pc2UoSU5URVJOQUwpO1xuICAgIHJldC5fc2V0VHJhY2UodGhpcyk7XG4gICAgcmV0Ll9mb2xsb3codGhpcyk7XG4gICAgcmV0Ll9zZXRCb3VuZFRvKHRoaXNBcmcpO1xuICAgIGlmICh0aGlzLl9jYW5jZWxsYWJsZSgpKSB7XG4gICAgICAgIHJldC5fc2V0Q2FuY2VsbGFibGUoKTtcbiAgICAgICAgcmV0Ll9jYW5jZWxsYXRpb25QYXJlbnQgPSB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiBQcm9taXNlJHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgUHJvbWlzZV1cIjtcbn07XG5cblByb21pc2UucHJvdG90eXBlLmNhdWdodCA9IFByb21pc2UucHJvdG90eXBlW1wiY2F0Y2hcIl0gPVxuZnVuY3Rpb24gUHJvbWlzZSRjYXRjaChmbikge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGlmIChsZW4gPiAxKSB7XG4gICAgICAgIHZhciBjYXRjaEluc3RhbmNlcyA9IG5ldyBBcnJheShsZW4gLSAxKSxcbiAgICAgICAgICAgIGogPSAwLCBpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuIC0gMTsgKytpKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgY2F0Y2hJbnN0YW5jZXNbaisrXSA9IGl0ZW07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgY2F0Y2hGaWx0ZXJUeXBlRXJyb3IgPVxuICAgICAgICAgICAgICAgICAgICBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJBIGNhdGNoIGZpbHRlciBtdXN0IGJlIGFuIGVycm9yIGNvbnN0cnVjdG9yIFwiXG4gICAgICAgICAgICAgICAgICAgICAgICArIFwib3IgYSBmaWx0ZXIgZnVuY3Rpb25cIik7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9hdHRhY2hFeHRyYVRyYWNlKGNhdGNoRmlsdGVyVHlwZUVycm9yKTtcbiAgICAgICAgICAgICAgICBhc3luYy5pbnZva2UodGhpcy5fcmVqZWN0LCB0aGlzLCBjYXRjaEZpbHRlclR5cGVFcnJvcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoSW5zdGFuY2VzLmxlbmd0aCA9IGo7XG4gICAgICAgIGZuID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICAgIHRoaXMuX3Jlc2V0VHJhY2UoKTtcbiAgICAgICAgdmFyIGNhdGNoRmlsdGVyID0gbmV3IENhdGNoRmlsdGVyKGNhdGNoSW5zdGFuY2VzLCBmbiwgdGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzLl90aGVuKHZvaWQgMCwgY2F0Y2hGaWx0ZXIuZG9GaWx0ZXIsIHZvaWQgMCxcbiAgICAgICAgICAgIGNhdGNoRmlsdGVyLCB2b2lkIDApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fdGhlbih2b2lkIDAsIGZuLCB2b2lkIDAsIHZvaWQgMCwgdm9pZCAwKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLnRoZW4gPVxuZnVuY3Rpb24gUHJvbWlzZSR0aGVuKGRpZEZ1bGZpbGwsIGRpZFJlamVjdCwgZGlkUHJvZ3Jlc3MpIHtcbiAgICByZXR1cm4gdGhpcy5fdGhlbihkaWRGdWxmaWxsLCBkaWRSZWplY3QsIGRpZFByb2dyZXNzLFxuICAgICAgICB2b2lkIDAsIHZvaWQgMCk7XG59O1xuXG5cblByb21pc2UucHJvdG90eXBlLmRvbmUgPVxuZnVuY3Rpb24gUHJvbWlzZSRkb25lKGRpZEZ1bGZpbGwsIGRpZFJlamVjdCwgZGlkUHJvZ3Jlc3MpIHtcbiAgICB2YXIgcHJvbWlzZSA9IHRoaXMuX3RoZW4oZGlkRnVsZmlsbCwgZGlkUmVqZWN0LCBkaWRQcm9ncmVzcyxcbiAgICAgICAgdm9pZCAwLCB2b2lkIDApO1xuICAgIHByb21pc2UuX3NldElzRmluYWwoKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLnNwcmVhZCA9IGZ1bmN0aW9uIFByb21pc2Ukc3ByZWFkKGRpZEZ1bGZpbGwsIGRpZFJlamVjdCkge1xuICAgIHJldHVybiB0aGlzLl90aGVuKGRpZEZ1bGZpbGwsIGRpZFJlamVjdCwgdm9pZCAwLFxuICAgICAgICBBUFBMWSwgdm9pZCAwKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLmlzQ2FuY2VsbGFibGUgPSBmdW5jdGlvbiBQcm9taXNlJGlzQ2FuY2VsbGFibGUoKSB7XG4gICAgcmV0dXJuICF0aGlzLmlzUmVzb2x2ZWQoKSAmJlxuICAgICAgICB0aGlzLl9jYW5jZWxsYWJsZSgpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gUHJvbWlzZSR0b0pTT04oKSB7XG4gICAgdmFyIHJldCA9IHtcbiAgICAgICAgaXNGdWxmaWxsZWQ6IGZhbHNlLFxuICAgICAgICBpc1JlamVjdGVkOiBmYWxzZSxcbiAgICAgICAgZnVsZmlsbG1lbnRWYWx1ZTogdm9pZCAwLFxuICAgICAgICByZWplY3Rpb25SZWFzb246IHZvaWQgMFxuICAgIH07XG4gICAgaWYgKHRoaXMuaXNGdWxmaWxsZWQoKSkge1xuICAgICAgICByZXQuZnVsZmlsbG1lbnRWYWx1ZSA9IHRoaXMuX3NldHRsZWRWYWx1ZTtcbiAgICAgICAgcmV0LmlzRnVsZmlsbGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSBpZiAodGhpcy5pc1JlamVjdGVkKCkpIHtcbiAgICAgICAgcmV0LnJlamVjdGlvblJlYXNvbiA9IHRoaXMuX3NldHRsZWRWYWx1ZTtcbiAgICAgICAgcmV0LmlzUmVqZWN0ZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuYWxsID0gZnVuY3Rpb24gUHJvbWlzZSRhbGwoKSB7XG4gICAgcmV0dXJuIFByb21pc2UkX2FsbCh0aGlzLCB0cnVlKTtcbn07XG5cblxuUHJvbWlzZS5pcyA9IGlzUHJvbWlzZTtcblxuZnVuY3Rpb24gUHJvbWlzZSRfYWxsKHByb21pc2VzLCB1c2VCb3VuZCkge1xuICAgIHJldHVybiBQcm9taXNlJF9DcmVhdGVQcm9taXNlQXJyYXkoXG4gICAgICAgIHByb21pc2VzLFxuICAgICAgICBQcm9taXNlQXJyYXksXG4gICAgICAgIHVzZUJvdW5kID09PSB0cnVlICYmIHByb21pc2VzLl9pc0JvdW5kKClcbiAgICAgICAgICAgID8gcHJvbWlzZXMuX2JvdW5kVG9cbiAgICAgICAgICAgIDogdm9pZCAwXG4gICApLnByb21pc2UoKTtcbn1cblByb21pc2UuYWxsID0gZnVuY3Rpb24gUHJvbWlzZSRBbGwocHJvbWlzZXMpIHtcbiAgICByZXR1cm4gUHJvbWlzZSRfYWxsKHByb21pc2VzLCBmYWxzZSk7XG59O1xuXG5Qcm9taXNlLmpvaW4gPSBmdW5jdGlvbiBQcm9taXNlJEpvaW4oKSB7XG4gICAgdmFyICRfbGVuID0gYXJndW1lbnRzLmxlbmd0aDt2YXIgYXJncyA9IG5ldyBBcnJheSgkX2xlbik7IGZvcih2YXIgJF9pID0gMDsgJF9pIDwgJF9sZW47ICsrJF9pKSB7YXJnc1skX2ldID0gYXJndW1lbnRzWyRfaV07fVxuICAgIHJldHVybiBQcm9taXNlJF9DcmVhdGVQcm9taXNlQXJyYXkoYXJncywgUHJvbWlzZUFycmF5LCB2b2lkIDApLnByb21pc2UoKTtcbn07XG5cblByb21pc2UucmVzb2x2ZSA9IFByb21pc2UuZnVsZmlsbGVkID1cbmZ1bmN0aW9uIFByb21pc2UkUmVzb2x2ZSh2YWx1ZSkge1xuICAgIHZhciByZXQgPSBuZXcgUHJvbWlzZShJTlRFUk5BTCk7XG4gICAgcmV0Ll9zZXRUcmFjZSh2b2lkIDApO1xuICAgIGlmIChyZXQuX3RyeUZvbGxvdyh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gICAgcmV0Ll9jbGVhblZhbHVlcygpO1xuICAgIHJldC5fc2V0RnVsZmlsbGVkKCk7XG4gICAgcmV0Ll9zZXR0bGVkVmFsdWUgPSB2YWx1ZTtcbiAgICByZXR1cm4gcmV0O1xufTtcblxuUHJvbWlzZS5yZWplY3QgPSBQcm9taXNlLnJlamVjdGVkID0gZnVuY3Rpb24gUHJvbWlzZSRSZWplY3QocmVhc29uKSB7XG4gICAgdmFyIHJldCA9IG5ldyBQcm9taXNlKElOVEVSTkFMKTtcbiAgICByZXQuX3NldFRyYWNlKHZvaWQgMCk7XG4gICAgbWFya0FzT3JpZ2luYXRpbmdGcm9tUmVqZWN0aW9uKHJlYXNvbik7XG4gICAgcmV0Ll9jbGVhblZhbHVlcygpO1xuICAgIHJldC5fc2V0UmVqZWN0ZWQoKTtcbiAgICByZXQuX3NldHRsZWRWYWx1ZSA9IHJlYXNvbjtcbiAgICBpZiAoIWNhbkF0dGFjaChyZWFzb24pKSB7XG4gICAgICAgIHZhciB0cmFjZSA9IG5ldyBFcnJvcihyZWFzb24gKyBcIlwiKTtcbiAgICAgICAgcmV0Ll9zZXRDYXJyaWVkU3RhY2tUcmFjZSh0cmFjZSk7XG4gICAgfVxuICAgIHJldC5fZW5zdXJlUG9zc2libGVSZWplY3Rpb25IYW5kbGVkKCk7XG4gICAgcmV0dXJuIHJldDtcbn07XG5cblByb21pc2UucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gUHJvbWlzZSRfZXJyb3IoZm4pIHtcbiAgICByZXR1cm4gdGhpcy5jYXVnaHQob3JpZ2luYXRlc0Zyb21SZWplY3Rpb24sIGZuKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9yZXNvbHZlRnJvbVN5bmNWYWx1ZSA9XG5mdW5jdGlvbiBQcm9taXNlJF9yZXNvbHZlRnJvbVN5bmNWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gZXJyb3JPYmopIHtcbiAgICAgICAgdGhpcy5fY2xlYW5WYWx1ZXMoKTtcbiAgICAgICAgdGhpcy5fc2V0UmVqZWN0ZWQoKTtcbiAgICAgICAgdGhpcy5fc2V0dGxlZFZhbHVlID0gdmFsdWUuZTtcbiAgICAgICAgdGhpcy5fZW5zdXJlUG9zc2libGVSZWplY3Rpb25IYW5kbGVkKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgbWF5YmVQcm9taXNlID0gUHJvbWlzZS5fY2FzdCh2YWx1ZSwgdm9pZCAwKTtcbiAgICAgICAgaWYgKG1heWJlUHJvbWlzZSBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX2ZvbGxvdyhtYXliZVByb21pc2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fY2xlYW5WYWx1ZXMoKTtcbiAgICAgICAgICAgIHRoaXMuX3NldEZ1bGZpbGxlZCgpO1xuICAgICAgICAgICAgdGhpcy5fc2V0dGxlZFZhbHVlID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5Qcm9taXNlLm1ldGhvZCA9IGZ1bmN0aW9uIFByb21pc2UkX01ldGhvZChmbikge1xuICAgIGlmICh0eXBlb2YgZm4gIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiZm4gbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gUHJvbWlzZSRfbWV0aG9kKCkge1xuICAgICAgICB2YXIgdmFsdWU7XG4gICAgICAgIHN3aXRjaChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDogdmFsdWUgPSB0cnlDYXRjaDEoZm4sIHRoaXMsIHZvaWQgMCk7IGJyZWFrO1xuICAgICAgICBjYXNlIDE6IHZhbHVlID0gdHJ5Q2F0Y2gxKGZuLCB0aGlzLCBhcmd1bWVudHNbMF0pOyBicmVhaztcbiAgICAgICAgY2FzZSAyOiB2YWx1ZSA9IHRyeUNhdGNoMihmbiwgdGhpcywgYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV0pOyBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHZhciAkX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGg7dmFyIGFyZ3MgPSBuZXcgQXJyYXkoJF9sZW4pOyBmb3IodmFyICRfaSA9IDA7ICRfaSA8ICRfbGVuOyArKyRfaSkge2FyZ3NbJF9pXSA9IGFyZ3VtZW50c1skX2ldO31cbiAgICAgICAgICAgIHZhbHVlID0gdHJ5Q2F0Y2hBcHBseShmbiwgYXJncywgdGhpcyk7IGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXQgPSBuZXcgUHJvbWlzZShJTlRFUk5BTCk7XG4gICAgICAgIHJldC5fc2V0VHJhY2Uodm9pZCAwKTtcbiAgICAgICAgcmV0Ll9yZXNvbHZlRnJvbVN5bmNWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfTtcbn07XG5cblByb21pc2UuYXR0ZW1wdCA9IFByb21pc2VbXCJ0cnlcIl0gPSBmdW5jdGlvbiBQcm9taXNlJF9UcnkoZm4sIGFyZ3MsIGN0eCkge1xuICAgIGlmICh0eXBlb2YgZm4gIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gYXBpUmVqZWN0aW9uKFwiZm4gbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgICB2YXIgdmFsdWUgPSBpc0FycmF5KGFyZ3MpXG4gICAgICAgID8gdHJ5Q2F0Y2hBcHBseShmbiwgYXJncywgY3R4KVxuICAgICAgICA6IHRyeUNhdGNoMShmbiwgY3R4LCBhcmdzKTtcblxuICAgIHZhciByZXQgPSBuZXcgUHJvbWlzZShJTlRFUk5BTCk7XG4gICAgcmV0Ll9zZXRUcmFjZSh2b2lkIDApO1xuICAgIHJldC5fcmVzb2x2ZUZyb21TeW5jVmFsdWUodmFsdWUpO1xuICAgIHJldHVybiByZXQ7XG59O1xuXG5Qcm9taXNlLmRlZmVyID0gUHJvbWlzZS5wZW5kaW5nID0gZnVuY3Rpb24gUHJvbWlzZSREZWZlcigpIHtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKElOVEVSTkFMKTtcbiAgICBwcm9taXNlLl9zZXRUcmFjZSh2b2lkIDApO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZVJlc29sdmVyKHByb21pc2UpO1xufTtcblxuUHJvbWlzZS5iaW5kID0gZnVuY3Rpb24gUHJvbWlzZSRCaW5kKHRoaXNBcmcpIHtcbiAgICB2YXIgcmV0ID0gbmV3IFByb21pc2UoSU5URVJOQUwpO1xuICAgIHJldC5fc2V0VHJhY2Uodm9pZCAwKTtcbiAgICByZXQuX3NldEZ1bGZpbGxlZCgpO1xuICAgIHJldC5fc2V0Qm91bmRUbyh0aGlzQXJnKTtcbiAgICByZXR1cm4gcmV0O1xufTtcblxuUHJvbWlzZS5jYXN0ID0gZnVuY3Rpb24gUHJvbWlzZSRfQ2FzdChvYmopIHtcbiAgICB2YXIgcmV0ID0gUHJvbWlzZS5fY2FzdChvYmosIHZvaWQgMCk7XG4gICAgaWYgKCEocmV0IGluc3RhbmNlb2YgUHJvbWlzZSkpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXQpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufTtcblxuUHJvbWlzZS5vblBvc3NpYmx5VW5oYW5kbGVkUmVqZWN0aW9uID1cbmZ1bmN0aW9uIFByb21pc2UkT25Qb3NzaWJseVVuaGFuZGxlZFJlamVjdGlvbihmbikge1xuICAgICAgICBDYXB0dXJlZFRyYWNlLnBvc3NpYmx5VW5oYW5kbGVkUmVqZWN0aW9uID0gdHlwZW9mIGZuID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGZuIDogdm9pZCAwO1xufTtcblxudmFyIHVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZWQ7XG5Qcm9taXNlLm9uVW5oYW5kbGVkUmVqZWN0aW9uSGFuZGxlZCA9XG5mdW5jdGlvbiBQcm9taXNlJG9uVW5oYW5kbGVkUmVqZWN0aW9uSGFuZGxlZChmbikge1xuICAgIHVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZWQgPSB0eXBlb2YgZm4gPT09IFwiZnVuY3Rpb25cIiA/IGZuIDogdm9pZCAwO1xufTtcblxudmFyIGRlYnVnZ2luZyA9IGZhbHNlIHx8ICEhKFxuICAgIHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgdHlwZW9mIHByb2Nlc3MuZXhlY1BhdGggPT09IFwic3RyaW5nXCIgJiZcbiAgICB0eXBlb2YgcHJvY2Vzcy5lbnYgPT09IFwib2JqZWN0XCIgJiZcbiAgICAocHJvY2Vzcy5lbnZbXCJCTFVFQklSRF9ERUJVR1wiXSB8fFxuICAgICAgICBwcm9jZXNzLmVudltcIk5PREVfRU5WXCJdID09PSBcImRldmVsb3BtZW50XCIpXG4pO1xuXG5cblByb21pc2UubG9uZ1N0YWNrVHJhY2VzID0gZnVuY3Rpb24gUHJvbWlzZSRMb25nU3RhY2tUcmFjZXMoKSB7XG4gICAgaWYgKGFzeW5jLmhhdmVJdGVtc1F1ZXVlZCgpICYmXG4gICAgICAgIGRlYnVnZ2luZyA9PT0gZmFsc2VcbiAgICkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjYW5ub3QgZW5hYmxlIGxvbmcgc3RhY2sgdHJhY2VzIGFmdGVyIHByb21pc2VzIGhhdmUgYmVlbiBjcmVhdGVkXCIpO1xuICAgIH1cbiAgICBkZWJ1Z2dpbmcgPSBDYXB0dXJlZFRyYWNlLmlzU3VwcG9ydGVkKCk7XG59O1xuXG5Qcm9taXNlLmhhc0xvbmdTdGFja1RyYWNlcyA9IGZ1bmN0aW9uIFByb21pc2UkSGFzTG9uZ1N0YWNrVHJhY2VzKCkge1xuICAgIHJldHVybiBkZWJ1Z2dpbmcgJiYgQ2FwdHVyZWRUcmFjZS5pc1N1cHBvcnRlZCgpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3NldFByb3h5SGFuZGxlcnMgPVxuZnVuY3Rpb24gUHJvbWlzZSRfc2V0UHJveHlIYW5kbGVycyhyZWNlaXZlciwgcHJvbWlzZVNsb3RWYWx1ZSkge1xuICAgIHZhciBpbmRleCA9IHRoaXMuX2xlbmd0aCgpO1xuXG4gICAgaWYgKGluZGV4ID49IDUyNDI4NyAtIDUpIHtcbiAgICAgICAgaW5kZXggPSAwO1xuICAgICAgICB0aGlzLl9zZXRMZW5ndGgoMCk7XG4gICAgfVxuICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICB0aGlzLl9wcm9taXNlMCA9IHByb21pc2VTbG90VmFsdWU7XG4gICAgICAgIHRoaXMuX3JlY2VpdmVyMCA9IHJlY2VpdmVyO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIGkgPSBpbmRleCAtIDU7XG4gICAgICAgIHRoaXNbaSArIDNdID0gcHJvbWlzZVNsb3RWYWx1ZTtcbiAgICAgICAgdGhpc1tpICsgNF0gPSByZWNlaXZlcjtcbiAgICAgICAgdGhpc1tpICsgMF0gPVxuICAgICAgICB0aGlzW2kgKyAxXSA9XG4gICAgICAgIHRoaXNbaSArIDJdID0gdm9pZCAwO1xuICAgIH1cbiAgICB0aGlzLl9zZXRMZW5ndGgoaW5kZXggKyA1KTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9wcm94eVByb21pc2VBcnJheSA9XG5mdW5jdGlvbiBQcm9taXNlJF9wcm94eVByb21pc2VBcnJheShwcm9taXNlQXJyYXksIGluZGV4KSB7XG4gICAgdGhpcy5fc2V0UHJveHlIYW5kbGVycyhwcm9taXNlQXJyYXksIGluZGV4KTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9wcm94eVByb21pc2UgPSBmdW5jdGlvbiBQcm9taXNlJF9wcm94eVByb21pc2UocHJvbWlzZSkge1xuICAgIHByb21pc2UuX3NldFByb3hpZWQoKTtcbiAgICB0aGlzLl9zZXRQcm94eUhhbmRsZXJzKHByb21pc2UsIC0xKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl90aGVuID1cbmZ1bmN0aW9uIFByb21pc2UkX3RoZW4oXG4gICAgZGlkRnVsZmlsbCxcbiAgICBkaWRSZWplY3QsXG4gICAgZGlkUHJvZ3Jlc3MsXG4gICAgcmVjZWl2ZXIsXG4gICAgaW50ZXJuYWxEYXRhXG4pIHtcbiAgICB2YXIgaGF2ZUludGVybmFsRGF0YSA9IGludGVybmFsRGF0YSAhPT0gdm9pZCAwO1xuICAgIHZhciByZXQgPSBoYXZlSW50ZXJuYWxEYXRhID8gaW50ZXJuYWxEYXRhIDogbmV3IFByb21pc2UoSU5URVJOQUwpO1xuXG4gICAgaWYgKGRlYnVnZ2luZyAmJiAhaGF2ZUludGVybmFsRGF0YSkge1xuICAgICAgICB2YXIgaGF2ZVNhbWVDb250ZXh0ID0gdGhpcy5fcGVla0NvbnRleHQoKSA9PT0gdGhpcy5fdHJhY2VQYXJlbnQ7XG4gICAgICAgIHJldC5fdHJhY2VQYXJlbnQgPSBoYXZlU2FtZUNvbnRleHQgPyB0aGlzLl90cmFjZVBhcmVudCA6IHRoaXM7XG4gICAgICAgIHJldC5fc2V0VHJhY2UodGhpcyk7XG4gICAgfVxuXG4gICAgaWYgKCFoYXZlSW50ZXJuYWxEYXRhICYmIHRoaXMuX2lzQm91bmQoKSkge1xuICAgICAgICByZXQuX3NldEJvdW5kVG8odGhpcy5fYm91bmRUbyk7XG4gICAgfVxuXG4gICAgdmFyIGNhbGxiYWNrSW5kZXggPVxuICAgICAgICB0aGlzLl9hZGRDYWxsYmFja3MoZGlkRnVsZmlsbCwgZGlkUmVqZWN0LCBkaWRQcm9ncmVzcywgcmV0LCByZWNlaXZlcik7XG5cbiAgICBpZiAoIWhhdmVJbnRlcm5hbERhdGEgJiYgdGhpcy5fY2FuY2VsbGFibGUoKSkge1xuICAgICAgICByZXQuX3NldENhbmNlbGxhYmxlKCk7XG4gICAgICAgIHJldC5fY2FuY2VsbGF0aW9uUGFyZW50ID0gdGhpcztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc1Jlc29sdmVkKCkpIHtcbiAgICAgICAgYXN5bmMuaW52b2tlKHRoaXMuX3F1ZXVlU2V0dGxlQXQsIHRoaXMsIGNhbGxiYWNrSW5kZXgpO1xuICAgIH1cblxuICAgIHJldHVybiByZXQ7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fbGVuZ3RoID0gZnVuY3Rpb24gUHJvbWlzZSRfbGVuZ3RoKCkge1xuICAgIHJldHVybiB0aGlzLl9iaXRGaWVsZCAmIDUyNDI4Nztcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9pc0ZvbGxvd2luZ09yRnVsZmlsbGVkT3JSZWplY3RlZCA9XG5mdW5jdGlvbiBQcm9taXNlJF9pc0ZvbGxvd2luZ09yRnVsZmlsbGVkT3JSZWplY3RlZCgpIHtcbiAgICByZXR1cm4gKHRoaXMuX2JpdEZpZWxkICYgOTM5NTI0MDk2KSA+IDA7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5faXNGb2xsb3dpbmcgPSBmdW5jdGlvbiBQcm9taXNlJF9pc0ZvbGxvd2luZygpIHtcbiAgICByZXR1cm4gKHRoaXMuX2JpdEZpZWxkICYgNTM2ODcwOTEyKSA9PT0gNTM2ODcwOTEyO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3NldExlbmd0aCA9IGZ1bmN0aW9uIFByb21pc2UkX3NldExlbmd0aChsZW4pIHtcbiAgICB0aGlzLl9iaXRGaWVsZCA9ICh0aGlzLl9iaXRGaWVsZCAmIC01MjQyODgpIHxcbiAgICAgICAgKGxlbiAmIDUyNDI4Nyk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fc2V0RnVsZmlsbGVkID0gZnVuY3Rpb24gUHJvbWlzZSRfc2V0RnVsZmlsbGVkKCkge1xuICAgIHRoaXMuX2JpdEZpZWxkID0gdGhpcy5fYml0RmllbGQgfCAyNjg0MzU0NTY7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fc2V0UmVqZWN0ZWQgPSBmdW5jdGlvbiBQcm9taXNlJF9zZXRSZWplY3RlZCgpIHtcbiAgICB0aGlzLl9iaXRGaWVsZCA9IHRoaXMuX2JpdEZpZWxkIHwgMTM0MjE3NzI4O1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3NldEZvbGxvd2luZyA9IGZ1bmN0aW9uIFByb21pc2UkX3NldEZvbGxvd2luZygpIHtcbiAgICB0aGlzLl9iaXRGaWVsZCA9IHRoaXMuX2JpdEZpZWxkIHwgNTM2ODcwOTEyO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3NldElzRmluYWwgPSBmdW5jdGlvbiBQcm9taXNlJF9zZXRJc0ZpbmFsKCkge1xuICAgIHRoaXMuX2JpdEZpZWxkID0gdGhpcy5fYml0RmllbGQgfCAzMzU1NDQzMjtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9pc0ZpbmFsID0gZnVuY3Rpb24gUHJvbWlzZSRfaXNGaW5hbCgpIHtcbiAgICByZXR1cm4gKHRoaXMuX2JpdEZpZWxkICYgMzM1NTQ0MzIpID4gMDtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9jYW5jZWxsYWJsZSA9IGZ1bmN0aW9uIFByb21pc2UkX2NhbmNlbGxhYmxlKCkge1xuICAgIHJldHVybiAodGhpcy5fYml0RmllbGQgJiA2NzEwODg2NCkgPiAwO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3NldENhbmNlbGxhYmxlID0gZnVuY3Rpb24gUHJvbWlzZSRfc2V0Q2FuY2VsbGFibGUoKSB7XG4gICAgdGhpcy5fYml0RmllbGQgPSB0aGlzLl9iaXRGaWVsZCB8IDY3MTA4ODY0O1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3Vuc2V0Q2FuY2VsbGFibGUgPSBmdW5jdGlvbiBQcm9taXNlJF91bnNldENhbmNlbGxhYmxlKCkge1xuICAgIHRoaXMuX2JpdEZpZWxkID0gdGhpcy5fYml0RmllbGQgJiAofjY3MTA4ODY0KTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9zZXRSZWplY3Rpb25Jc1VuaGFuZGxlZCA9XG5mdW5jdGlvbiBQcm9taXNlJF9zZXRSZWplY3Rpb25Jc1VuaGFuZGxlZCgpIHtcbiAgICB0aGlzLl9iaXRGaWVsZCA9IHRoaXMuX2JpdEZpZWxkIHwgMjA5NzE1Mjtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl91bnNldFJlamVjdGlvbklzVW5oYW5kbGVkID1cbmZ1bmN0aW9uIFByb21pc2UkX3Vuc2V0UmVqZWN0aW9uSXNVbmhhbmRsZWQoKSB7XG4gICAgdGhpcy5fYml0RmllbGQgPSB0aGlzLl9iaXRGaWVsZCAmICh+MjA5NzE1Mik7XG4gICAgaWYgKHRoaXMuX2lzVW5oYW5kbGVkUmVqZWN0aW9uTm90aWZpZWQoKSkge1xuICAgICAgICB0aGlzLl91bnNldFVuaGFuZGxlZFJlamVjdGlvbklzTm90aWZpZWQoKTtcbiAgICAgICAgdGhpcy5fbm90aWZ5VW5oYW5kbGVkUmVqZWN0aW9uSXNIYW5kbGVkKCk7XG4gICAgfVxufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2lzUmVqZWN0aW9uVW5oYW5kbGVkID1cbmZ1bmN0aW9uIFByb21pc2UkX2lzUmVqZWN0aW9uVW5oYW5kbGVkKCkge1xuICAgIHJldHVybiAodGhpcy5fYml0RmllbGQgJiAyMDk3MTUyKSA+IDA7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fc2V0VW5oYW5kbGVkUmVqZWN0aW9uSXNOb3RpZmllZCA9XG5mdW5jdGlvbiBQcm9taXNlJF9zZXRVbmhhbmRsZWRSZWplY3Rpb25Jc05vdGlmaWVkKCkge1xuICAgIHRoaXMuX2JpdEZpZWxkID0gdGhpcy5fYml0RmllbGQgfCA1MjQyODg7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fdW5zZXRVbmhhbmRsZWRSZWplY3Rpb25Jc05vdGlmaWVkID1cbmZ1bmN0aW9uIFByb21pc2UkX3Vuc2V0VW5oYW5kbGVkUmVqZWN0aW9uSXNOb3RpZmllZCgpIHtcbiAgICB0aGlzLl9iaXRGaWVsZCA9IHRoaXMuX2JpdEZpZWxkICYgKH41MjQyODgpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2lzVW5oYW5kbGVkUmVqZWN0aW9uTm90aWZpZWQgPVxuZnVuY3Rpb24gUHJvbWlzZSRfaXNVbmhhbmRsZWRSZWplY3Rpb25Ob3RpZmllZCgpIHtcbiAgICByZXR1cm4gKHRoaXMuX2JpdEZpZWxkICYgNTI0Mjg4KSA+IDA7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fc2V0Q2FycmllZFN0YWNrVHJhY2UgPVxuZnVuY3Rpb24gUHJvbWlzZSRfc2V0Q2FycmllZFN0YWNrVHJhY2UoY2FwdHVyZWRUcmFjZSkge1xuICAgIHRoaXMuX2JpdEZpZWxkID0gdGhpcy5fYml0RmllbGQgfCAxMDQ4NTc2O1xuICAgIHRoaXMuX2Z1bGZpbGxtZW50SGFuZGxlcjAgPSBjYXB0dXJlZFRyYWNlO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3Vuc2V0Q2FycmllZFN0YWNrVHJhY2UgPVxuZnVuY3Rpb24gUHJvbWlzZSRfdW5zZXRDYXJyaWVkU3RhY2tUcmFjZSgpIHtcbiAgICB0aGlzLl9iaXRGaWVsZCA9IHRoaXMuX2JpdEZpZWxkICYgKH4xMDQ4NTc2KTtcbiAgICB0aGlzLl9mdWxmaWxsbWVudEhhbmRsZXIwID0gdm9pZCAwO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2lzQ2FycnlpbmdTdGFja1RyYWNlID1cbmZ1bmN0aW9uIFByb21pc2UkX2lzQ2FycnlpbmdTdGFja1RyYWNlKCkge1xuICAgIHJldHVybiAodGhpcy5fYml0RmllbGQgJiAxMDQ4NTc2KSA+IDA7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fZ2V0Q2FycmllZFN0YWNrVHJhY2UgPVxuZnVuY3Rpb24gUHJvbWlzZSRfZ2V0Q2FycmllZFN0YWNrVHJhY2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzQ2FycnlpbmdTdGFja1RyYWNlKClcbiAgICAgICAgPyB0aGlzLl9mdWxmaWxsbWVudEhhbmRsZXIwXG4gICAgICAgIDogdm9pZCAwO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3JlY2VpdmVyQXQgPSBmdW5jdGlvbiBQcm9taXNlJF9yZWNlaXZlckF0KGluZGV4KSB7XG4gICAgdmFyIHJldDtcbiAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgcmV0ID0gdGhpcy5fcmVjZWl2ZXIwO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0ID0gdGhpc1tpbmRleCArIDQgLSA1XTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2lzQm91bmQoKSAmJiByZXQgPT09IHZvaWQgMCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYm91bmRUbztcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9wcm9taXNlQXQgPSBmdW5jdGlvbiBQcm9taXNlJF9wcm9taXNlQXQoaW5kZXgpIHtcbiAgICBpZiAoaW5kZXggPT09IDApIHJldHVybiB0aGlzLl9wcm9taXNlMDtcbiAgICByZXR1cm4gdGhpc1tpbmRleCArIDMgLSA1XTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9mdWxmaWxsbWVudEhhbmRsZXJBdCA9XG5mdW5jdGlvbiBQcm9taXNlJF9mdWxmaWxsbWVudEhhbmRsZXJBdChpbmRleCkge1xuICAgIGlmIChpbmRleCA9PT0gMCkgcmV0dXJuIHRoaXMuX2Z1bGZpbGxtZW50SGFuZGxlcjA7XG4gICAgcmV0dXJuIHRoaXNbaW5kZXggKyAwIC0gNV07XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fcmVqZWN0aW9uSGFuZGxlckF0ID1cbmZ1bmN0aW9uIFByb21pc2UkX3JlamVjdGlvbkhhbmRsZXJBdChpbmRleCkge1xuICAgIGlmIChpbmRleCA9PT0gMCkgcmV0dXJuIHRoaXMuX3JlamVjdGlvbkhhbmRsZXIwO1xuICAgIHJldHVybiB0aGlzW2luZGV4ICsgMSAtIDVdO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3Vuc2V0QXQgPSBmdW5jdGlvbiBQcm9taXNlJF91bnNldEF0KGluZGV4KSB7XG4gICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICB0aGlzLl9yZWplY3Rpb25IYW5kbGVyMCA9XG4gICAgICAgIHRoaXMuX3Byb2dyZXNzSGFuZGxlcjAgPVxuICAgICAgICB0aGlzLl9wcm9taXNlMCA9XG4gICAgICAgIHRoaXMuX3JlY2VpdmVyMCA9IHZvaWQgMDtcbiAgICAgICAgaWYgKCF0aGlzLl9pc0NhcnJ5aW5nU3RhY2tUcmFjZSgpKSB7XG4gICAgICAgICAgICB0aGlzLl9mdWxmaWxsbWVudEhhbmRsZXIwID0gdm9pZCAwO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aGlzW2luZGV4IC0gNSArIDBdID1cbiAgICAgICAgdGhpc1tpbmRleCAtIDUgKyAxXSA9XG4gICAgICAgIHRoaXNbaW5kZXggLSA1ICsgMl0gPVxuICAgICAgICB0aGlzW2luZGV4IC0gNSArIDNdID1cbiAgICAgICAgdGhpc1tpbmRleCAtIDUgKyA0XSA9IHZvaWQgMDtcbiAgICB9XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fcmVzb2x2ZUZyb21SZXNvbHZlciA9XG5mdW5jdGlvbiBQcm9taXNlJF9yZXNvbHZlRnJvbVJlc29sdmVyKHJlc29sdmVyKSB7XG4gICAgdmFyIHByb21pc2UgPSB0aGlzO1xuICAgIHRoaXMuX3NldFRyYWNlKHZvaWQgMCk7XG4gICAgdGhpcy5fcHVzaENvbnRleHQoKTtcblxuICAgIGZ1bmN0aW9uIFByb21pc2UkX3Jlc29sdmVyKHZhbCkge1xuICAgICAgICBpZiAocHJvbWlzZS5fdHJ5Rm9sbG93KHZhbCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBwcm9taXNlLl9mdWxmaWxsKHZhbCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIFByb21pc2UkX3JlamVjdGVyKHZhbCkge1xuICAgICAgICB2YXIgdHJhY2UgPSBjYW5BdHRhY2godmFsKSA/IHZhbCA6IG5ldyBFcnJvcih2YWwgKyBcIlwiKTtcbiAgICAgICAgcHJvbWlzZS5fYXR0YWNoRXh0cmFUcmFjZSh0cmFjZSk7XG4gICAgICAgIG1hcmtBc09yaWdpbmF0aW5nRnJvbVJlamVjdGlvbih2YWwpO1xuICAgICAgICBwcm9taXNlLl9yZWplY3QodmFsLCB0cmFjZSA9PT0gdmFsID8gdm9pZCAwIDogdHJhY2UpO1xuICAgIH1cbiAgICB2YXIgciA9IHRyeUNhdGNoMihyZXNvbHZlciwgdm9pZCAwLCBQcm9taXNlJF9yZXNvbHZlciwgUHJvbWlzZSRfcmVqZWN0ZXIpO1xuICAgIHRoaXMuX3BvcENvbnRleHQoKTtcblxuICAgIGlmIChyICE9PSB2b2lkIDAgJiYgciA9PT0gZXJyb3JPYmopIHtcbiAgICAgICAgdmFyIGUgPSByLmU7XG4gICAgICAgIHZhciB0cmFjZSA9IGNhbkF0dGFjaChlKSA/IGUgOiBuZXcgRXJyb3IoZSArIFwiXCIpO1xuICAgICAgICBwcm9taXNlLl9yZWplY3QoZSwgdHJhY2UpO1xuICAgIH1cbn07XG5cblByb21pc2UucHJvdG90eXBlLl9hZGRDYWxsYmFja3MgPSBmdW5jdGlvbiBQcm9taXNlJF9hZGRDYWxsYmFja3MoXG4gICAgZnVsZmlsbCxcbiAgICByZWplY3QsXG4gICAgcHJvZ3Jlc3MsXG4gICAgcHJvbWlzZSxcbiAgICByZWNlaXZlclxuKSB7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5fbGVuZ3RoKCk7XG5cbiAgICBpZiAoaW5kZXggPj0gNTI0Mjg3IC0gNSkge1xuICAgICAgICBpbmRleCA9IDA7XG4gICAgICAgIHRoaXMuX3NldExlbmd0aCgwKTtcbiAgICB9XG5cbiAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgdGhpcy5fcHJvbWlzZTAgPSBwcm9taXNlO1xuICAgICAgICBpZiAocmVjZWl2ZXIgIT09IHZvaWQgMCkgdGhpcy5fcmVjZWl2ZXIwID0gcmVjZWl2ZXI7XG4gICAgICAgIGlmICh0eXBlb2YgZnVsZmlsbCA9PT0gXCJmdW5jdGlvblwiICYmICF0aGlzLl9pc0NhcnJ5aW5nU3RhY2tUcmFjZSgpKVxuICAgICAgICAgICAgdGhpcy5fZnVsZmlsbG1lbnRIYW5kbGVyMCA9IGZ1bGZpbGw7XG4gICAgICAgIGlmICh0eXBlb2YgcmVqZWN0ID09PSBcImZ1bmN0aW9uXCIpIHRoaXMuX3JlamVjdGlvbkhhbmRsZXIwID0gcmVqZWN0O1xuICAgICAgICBpZiAodHlwZW9mIHByb2dyZXNzID09PSBcImZ1bmN0aW9uXCIpIHRoaXMuX3Byb2dyZXNzSGFuZGxlcjAgPSBwcm9ncmVzcztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciBpID0gaW5kZXggLSA1O1xuICAgICAgICB0aGlzW2kgKyAzXSA9IHByb21pc2U7XG4gICAgICAgIHRoaXNbaSArIDRdID0gcmVjZWl2ZXI7XG4gICAgICAgIHRoaXNbaSArIDBdID0gdHlwZW9mIGZ1bGZpbGwgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGZ1bGZpbGwgOiB2b2lkIDA7XG4gICAgICAgIHRoaXNbaSArIDFdID0gdHlwZW9mIHJlamVjdCA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gcmVqZWN0IDogdm9pZCAwO1xuICAgICAgICB0aGlzW2kgKyAyXSA9IHR5cGVvZiBwcm9ncmVzcyA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gcHJvZ3Jlc3MgOiB2b2lkIDA7XG4gICAgfVxuICAgIHRoaXMuX3NldExlbmd0aChpbmRleCArIDUpO1xuICAgIHJldHVybiBpbmRleDtcbn07XG5cblxuXG5Qcm9taXNlLnByb3RvdHlwZS5fc2V0Qm91bmRUbyA9IGZ1bmN0aW9uIFByb21pc2UkX3NldEJvdW5kVG8ob2JqKSB7XG4gICAgaWYgKG9iaiAhPT0gdm9pZCAwKSB7XG4gICAgICAgIHRoaXMuX2JpdEZpZWxkID0gdGhpcy5fYml0RmllbGQgfCA4Mzg4NjA4O1xuICAgICAgICB0aGlzLl9ib3VuZFRvID0gb2JqO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5fYml0RmllbGQgPSB0aGlzLl9iaXRGaWVsZCAmICh+ODM4ODYwOCk7XG4gICAgfVxufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2lzQm91bmQgPSBmdW5jdGlvbiBQcm9taXNlJF9pc0JvdW5kKCkge1xuICAgIHJldHVybiAodGhpcy5fYml0RmllbGQgJiA4Mzg4NjA4KSA9PT0gODM4ODYwODtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9zcHJlYWRTbG93Q2FzZSA9XG5mdW5jdGlvbiBQcm9taXNlJF9zcHJlYWRTbG93Q2FzZSh0YXJnZXRGbiwgcHJvbWlzZSwgdmFsdWVzLCBib3VuZFRvKSB7XG4gICAgdmFyIHByb21pc2VGb3JBbGwgPVxuICAgICAgICAgICAgUHJvbWlzZSRfQ3JlYXRlUHJvbWlzZUFycmF5XG4gICAgICAgICAgICAgICAgKHZhbHVlcywgUHJvbWlzZUFycmF5LCBib3VuZFRvKVxuICAgICAgICAgICAgLnByb21pc2UoKVxuICAgICAgICAgICAgLl90aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXRGbi5hcHBseShib3VuZFRvLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfSwgdm9pZCAwLCB2b2lkIDAsIEFQUExZLCB2b2lkIDApO1xuXG4gICAgcHJvbWlzZS5fZm9sbG93KHByb21pc2VGb3JBbGwpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2NhbGxTcHJlYWQgPVxuZnVuY3Rpb24gUHJvbWlzZSRfY2FsbFNwcmVhZChoYW5kbGVyLCBwcm9taXNlLCB2YWx1ZSwgbG9jYWxEZWJ1Z2dpbmcpIHtcbiAgICB2YXIgYm91bmRUbyA9IHRoaXMuX2lzQm91bmQoKSA/IHRoaXMuX2JvdW5kVG8gOiB2b2lkIDA7XG4gICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB2YWx1ZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgICAgaWYgKGlzUHJvbWlzZShQcm9taXNlLl9jYXN0KHZhbHVlW2ldLCB2b2lkIDApKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3NwcmVhZFNsb3dDYXNlKGhhbmRsZXIsIHByb21pc2UsIHZhbHVlLCBib3VuZFRvKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGxvY2FsRGVidWdnaW5nKSBwcm9taXNlLl9wdXNoQ29udGV4dCgpO1xuICAgIHJldHVybiB0cnlDYXRjaEFwcGx5KGhhbmRsZXIsIHZhbHVlLCBib3VuZFRvKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9jYWxsSGFuZGxlciA9XG5mdW5jdGlvbiBQcm9taXNlJF9jYWxsSGFuZGxlcihcbiAgICBoYW5kbGVyLCByZWNlaXZlciwgcHJvbWlzZSwgdmFsdWUsIGxvY2FsRGVidWdnaW5nKSB7XG4gICAgdmFyIHg7XG4gICAgaWYgKHJlY2VpdmVyID09PSBBUFBMWSAmJiAhdGhpcy5pc1JlamVjdGVkKCkpIHtcbiAgICAgICAgeCA9IHRoaXMuX2NhbGxTcHJlYWQoaGFuZGxlciwgcHJvbWlzZSwgdmFsdWUsIGxvY2FsRGVidWdnaW5nKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChsb2NhbERlYnVnZ2luZykgcHJvbWlzZS5fcHVzaENvbnRleHQoKTtcbiAgICAgICAgeCA9IHRyeUNhdGNoMShoYW5kbGVyLCByZWNlaXZlciwgdmFsdWUpO1xuICAgIH1cbiAgICBpZiAobG9jYWxEZWJ1Z2dpbmcpIHByb21pc2UuX3BvcENvbnRleHQoKTtcbiAgICByZXR1cm4geDtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9zZXR0bGVQcm9taXNlRnJvbUhhbmRsZXIgPVxuZnVuY3Rpb24gUHJvbWlzZSRfc2V0dGxlUHJvbWlzZUZyb21IYW5kbGVyKFxuICAgIGhhbmRsZXIsIHJlY2VpdmVyLCB2YWx1ZSwgcHJvbWlzZVxuKSB7XG4gICAgaWYgKCFpc1Byb21pc2UocHJvbWlzZSkpIHtcbiAgICAgICAgaGFuZGxlci5jYWxsKHJlY2VpdmVyLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbG9jYWxEZWJ1Z2dpbmcgPSBkZWJ1Z2dpbmc7XG4gICAgdmFyIHggPSB0aGlzLl9jYWxsSGFuZGxlcihoYW5kbGVyLCByZWNlaXZlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZSwgdmFsdWUsIGxvY2FsRGVidWdnaW5nKTtcblxuICAgIGlmIChwcm9taXNlLl9pc0ZvbGxvd2luZygpKSByZXR1cm47XG5cbiAgICBpZiAoeCA9PT0gZXJyb3JPYmogfHwgeCA9PT0gcHJvbWlzZSB8fCB4ID09PSBORVhUX0ZJTFRFUikge1xuICAgICAgICB2YXIgZXJyID0geCA9PT0gcHJvbWlzZVxuICAgICAgICAgICAgICAgICAgICA/IG1ha2VTZWxmUmVzb2x1dGlvbkVycm9yKClcbiAgICAgICAgICAgICAgICAgICAgOiB4LmU7XG4gICAgICAgIHZhciB0cmFjZSA9IGNhbkF0dGFjaChlcnIpID8gZXJyIDogbmV3IEVycm9yKGVyciArIFwiXCIpO1xuICAgICAgICBpZiAoeCAhPT0gTkVYVF9GSUxURVIpIHByb21pc2UuX2F0dGFjaEV4dHJhVHJhY2UodHJhY2UpO1xuICAgICAgICBwcm9taXNlLl9yZWplY3RVbmNoZWNrZWQoZXJyLCB0cmFjZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgY2FzdFZhbHVlID0gUHJvbWlzZS5fY2FzdCh4LCBwcm9taXNlKTtcbiAgICAgICAgaWYgKGlzUHJvbWlzZShjYXN0VmFsdWUpKSB7XG4gICAgICAgICAgICBpZiAoY2FzdFZhbHVlLmlzUmVqZWN0ZWQoKSAmJlxuICAgICAgICAgICAgICAgICFjYXN0VmFsdWUuX2lzQ2FycnlpbmdTdGFja1RyYWNlKCkgJiZcbiAgICAgICAgICAgICAgICAhY2FuQXR0YWNoKGNhc3RWYWx1ZS5fc2V0dGxlZFZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHZhciB0cmFjZSA9IG5ldyBFcnJvcihjYXN0VmFsdWUuX3NldHRsZWRWYWx1ZSArIFwiXCIpO1xuICAgICAgICAgICAgICAgIHByb21pc2UuX2F0dGFjaEV4dHJhVHJhY2UodHJhY2UpO1xuICAgICAgICAgICAgICAgIGNhc3RWYWx1ZS5fc2V0Q2FycmllZFN0YWNrVHJhY2UodHJhY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJvbWlzZS5fZm9sbG93KGNhc3RWYWx1ZSk7XG4gICAgICAgICAgICBpZiAoY2FzdFZhbHVlLl9jYW5jZWxsYWJsZSgpKSB7XG4gICAgICAgICAgICAgICAgcHJvbWlzZS5fY2FuY2VsbGF0aW9uUGFyZW50ID0gY2FzdFZhbHVlO1xuICAgICAgICAgICAgICAgIHByb21pc2UuX3NldENhbmNlbGxhYmxlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwcm9taXNlLl9mdWxmaWxsVW5jaGVja2VkKHgpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2ZvbGxvdyA9XG5mdW5jdGlvbiBQcm9taXNlJF9mb2xsb3cocHJvbWlzZSkge1xuICAgIHRoaXMuX3NldEZvbGxvd2luZygpO1xuXG4gICAgaWYgKHByb21pc2UuaXNQZW5kaW5nKCkpIHtcbiAgICAgICAgaWYgKHByb21pc2UuX2NhbmNlbGxhYmxlKCkgKSB7XG4gICAgICAgICAgICB0aGlzLl9jYW5jZWxsYXRpb25QYXJlbnQgPSBwcm9taXNlO1xuICAgICAgICAgICAgdGhpcy5fc2V0Q2FuY2VsbGFibGUoKTtcbiAgICAgICAgfVxuICAgICAgICBwcm9taXNlLl9wcm94eVByb21pc2UodGhpcyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHByb21pc2UuaXNGdWxmaWxsZWQoKSkge1xuICAgICAgICB0aGlzLl9mdWxmaWxsVW5jaGVja2VkKHByb21pc2UuX3NldHRsZWRWYWx1ZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aGlzLl9yZWplY3RVbmNoZWNrZWQocHJvbWlzZS5fc2V0dGxlZFZhbHVlLFxuICAgICAgICAgICAgcHJvbWlzZS5fZ2V0Q2FycmllZFN0YWNrVHJhY2UoKSk7XG4gICAgfVxuXG4gICAgaWYgKHByb21pc2UuX2lzUmVqZWN0aW9uVW5oYW5kbGVkKCkpIHByb21pc2UuX3Vuc2V0UmVqZWN0aW9uSXNVbmhhbmRsZWQoKTtcblxuICAgIGlmIChkZWJ1Z2dpbmcgJiZcbiAgICAgICAgcHJvbWlzZS5fdHJhY2VQYXJlbnQgPT0gbnVsbCkge1xuICAgICAgICBwcm9taXNlLl90cmFjZVBhcmVudCA9IHRoaXM7XG4gICAgfVxufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3RyeUZvbGxvdyA9XG5mdW5jdGlvbiBQcm9taXNlJF90cnlGb2xsb3codmFsdWUpIHtcbiAgICBpZiAodGhpcy5faXNGb2xsb3dpbmdPckZ1bGZpbGxlZE9yUmVqZWN0ZWQoKSB8fFxuICAgICAgICB2YWx1ZSA9PT0gdGhpcykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBtYXliZVByb21pc2UgPSBQcm9taXNlLl9jYXN0KHZhbHVlLCB2b2lkIDApO1xuICAgIGlmICghaXNQcm9taXNlKG1heWJlUHJvbWlzZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLl9mb2xsb3cobWF5YmVQcm9taXNlKTtcbiAgICByZXR1cm4gdHJ1ZTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9yZXNldFRyYWNlID0gZnVuY3Rpb24gUHJvbWlzZSRfcmVzZXRUcmFjZSgpIHtcbiAgICBpZiAoZGVidWdnaW5nKSB7XG4gICAgICAgIHRoaXMuX3RyYWNlID0gbmV3IENhcHR1cmVkVHJhY2UodGhpcy5fcGVla0NvbnRleHQoKSA9PT0gdm9pZCAwKTtcbiAgICB9XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fc2V0VHJhY2UgPSBmdW5jdGlvbiBQcm9taXNlJF9zZXRUcmFjZShwYXJlbnQpIHtcbiAgICBpZiAoZGVidWdnaW5nKSB7XG4gICAgICAgIHZhciBjb250ZXh0ID0gdGhpcy5fcGVla0NvbnRleHQoKTtcbiAgICAgICAgdGhpcy5fdHJhY2VQYXJlbnQgPSBjb250ZXh0O1xuICAgICAgICB2YXIgaXNUb3BMZXZlbCA9IGNvbnRleHQgPT09IHZvaWQgMDtcbiAgICAgICAgaWYgKHBhcmVudCAhPT0gdm9pZCAwICYmXG4gICAgICAgICAgICBwYXJlbnQuX3RyYWNlUGFyZW50ID09PSBjb250ZXh0KSB7XG4gICAgICAgICAgICB0aGlzLl90cmFjZSA9IHBhcmVudC5fdHJhY2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl90cmFjZSA9IG5ldyBDYXB0dXJlZFRyYWNlKGlzVG9wTGV2ZWwpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2F0dGFjaEV4dHJhVHJhY2UgPVxuZnVuY3Rpb24gUHJvbWlzZSRfYXR0YWNoRXh0cmFUcmFjZShlcnJvcikge1xuICAgIGlmIChkZWJ1Z2dpbmcpIHtcbiAgICAgICAgdmFyIHByb21pc2UgPSB0aGlzO1xuICAgICAgICB2YXIgc3RhY2sgPSBlcnJvci5zdGFjaztcbiAgICAgICAgc3RhY2sgPSB0eXBlb2Ygc3RhY2sgPT09IFwic3RyaW5nXCJcbiAgICAgICAgICAgID8gc3RhY2suc3BsaXQoXCJcXG5cIikgOiBbXTtcbiAgICAgICAgdmFyIGhlYWRlckxpbmVDb3VudCA9IDE7XG5cbiAgICAgICAgd2hpbGUocHJvbWlzZSAhPSBudWxsICYmXG4gICAgICAgICAgICBwcm9taXNlLl90cmFjZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBzdGFjayA9IENhcHR1cmVkVHJhY2UuY29tYmluZShcbiAgICAgICAgICAgICAgICBzdGFjayxcbiAgICAgICAgICAgICAgICBwcm9taXNlLl90cmFjZS5zdGFjay5zcGxpdChcIlxcblwiKVxuICAgICAgICAgICApO1xuICAgICAgICAgICAgcHJvbWlzZSA9IHByb21pc2UuX3RyYWNlUGFyZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG1heCA9IEVycm9yLnN0YWNrVHJhY2VMaW1pdCArIGhlYWRlckxpbmVDb3VudDtcbiAgICAgICAgdmFyIGxlbiA9IHN0YWNrLmxlbmd0aDtcbiAgICAgICAgaWYgKGxlbiAgPiBtYXgpIHtcbiAgICAgICAgICAgIHN0YWNrLmxlbmd0aCA9IG1heDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhY2subGVuZ3RoIDw9IGhlYWRlckxpbmVDb3VudCkge1xuICAgICAgICAgICAgZXJyb3Iuc3RhY2sgPSBcIihObyBzdGFjayB0cmFjZSlcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVycm9yLnN0YWNrID0gc3RhY2suam9pbihcIlxcblwiKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cblByb21pc2UucHJvdG90eXBlLl9jbGVhblZhbHVlcyA9IGZ1bmN0aW9uIFByb21pc2UkX2NsZWFuVmFsdWVzKCkge1xuICAgIGlmICh0aGlzLl9jYW5jZWxsYWJsZSgpKSB7XG4gICAgICAgIHRoaXMuX2NhbmNlbGxhdGlvblBhcmVudCA9IHZvaWQgMDtcbiAgICB9XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fZnVsZmlsbCA9IGZ1bmN0aW9uIFByb21pc2UkX2Z1bGZpbGwodmFsdWUpIHtcbiAgICBpZiAodGhpcy5faXNGb2xsb3dpbmdPckZ1bGZpbGxlZE9yUmVqZWN0ZWQoKSkgcmV0dXJuO1xuICAgIHRoaXMuX2Z1bGZpbGxVbmNoZWNrZWQodmFsdWUpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3JlamVjdCA9XG5mdW5jdGlvbiBQcm9taXNlJF9yZWplY3QocmVhc29uLCBjYXJyaWVkU3RhY2tUcmFjZSkge1xuICAgIGlmICh0aGlzLl9pc0ZvbGxvd2luZ09yRnVsZmlsbGVkT3JSZWplY3RlZCgpKSByZXR1cm47XG4gICAgdGhpcy5fcmVqZWN0VW5jaGVja2VkKHJlYXNvbiwgY2FycmllZFN0YWNrVHJhY2UpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3NldHRsZVByb21pc2VBdCA9IGZ1bmN0aW9uIFByb21pc2UkX3NldHRsZVByb21pc2VBdChpbmRleCkge1xuICAgIHZhciBoYW5kbGVyID0gdGhpcy5pc0Z1bGZpbGxlZCgpXG4gICAgICAgID8gdGhpcy5fZnVsZmlsbG1lbnRIYW5kbGVyQXQoaW5kZXgpXG4gICAgICAgIDogdGhpcy5fcmVqZWN0aW9uSGFuZGxlckF0KGluZGV4KTtcblxuICAgIHZhciB2YWx1ZSA9IHRoaXMuX3NldHRsZWRWYWx1ZTtcbiAgICB2YXIgcmVjZWl2ZXIgPSB0aGlzLl9yZWNlaXZlckF0KGluZGV4KTtcbiAgICB2YXIgcHJvbWlzZSA9IHRoaXMuX3Byb21pc2VBdChpbmRleCk7XG5cbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aGlzLl9zZXR0bGVQcm9taXNlRnJvbUhhbmRsZXIoaGFuZGxlciwgcmVjZWl2ZXIsIHZhbHVlLCBwcm9taXNlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciBkb25lID0gZmFsc2U7XG4gICAgICAgIHZhciBpc0Z1bGZpbGxlZCA9IHRoaXMuaXNGdWxmaWxsZWQoKTtcbiAgICAgICAgaWYgKHJlY2VpdmVyICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGlmIChyZWNlaXZlciBpbnN0YW5jZW9mIFByb21pc2UgJiZcbiAgICAgICAgICAgICAgICByZWNlaXZlci5faXNQcm94aWVkKCkpIHtcbiAgICAgICAgICAgICAgICByZWNlaXZlci5fdW5zZXRQcm94aWVkKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoaXNGdWxmaWxsZWQpIHJlY2VpdmVyLl9mdWxmaWxsVW5jaGVja2VkKHZhbHVlKTtcbiAgICAgICAgICAgICAgICBlbHNlIHJlY2VpdmVyLl9yZWplY3RVbmNoZWNrZWQodmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2dldENhcnJpZWRTdGFja1RyYWNlKCkpO1xuICAgICAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNQcm9taXNlQXJyYXlQcm94eShyZWNlaXZlciwgcHJvbWlzZSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNGdWxmaWxsZWQpIHJlY2VpdmVyLl9wcm9taXNlRnVsZmlsbGVkKHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgICAgICAgICBlbHNlIHJlY2VpdmVyLl9wcm9taXNlUmVqZWN0ZWQodmFsdWUsIHByb21pc2UpO1xuICAgICAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFkb25lKSB7XG4gICAgICAgICAgICBpZiAoaXNGdWxmaWxsZWQpIHByb21pc2UuX2Z1bGZpbGwodmFsdWUpO1xuICAgICAgICAgICAgZWxzZSBwcm9taXNlLl9yZWplY3QodmFsdWUsIHRoaXMuX2dldENhcnJpZWRTdGFja1RyYWNlKCkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGluZGV4ID49IDI1Nikge1xuICAgICAgICB0aGlzLl9xdWV1ZUdDKCk7XG4gICAgfVxufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2lzUHJveGllZCA9IGZ1bmN0aW9uIFByb21pc2UkX2lzUHJveGllZCgpIHtcbiAgICByZXR1cm4gKHRoaXMuX2JpdEZpZWxkICYgNDE5NDMwNCkgPT09IDQxOTQzMDQ7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fc2V0UHJveGllZCA9IGZ1bmN0aW9uIFByb21pc2UkX3NldFByb3hpZWQoKSB7XG4gICAgdGhpcy5fYml0RmllbGQgPSB0aGlzLl9iaXRGaWVsZCB8IDQxOTQzMDQ7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fdW5zZXRQcm94aWVkID0gZnVuY3Rpb24gUHJvbWlzZSRfdW5zZXRQcm94aWVkKCkge1xuICAgIHRoaXMuX2JpdEZpZWxkID0gdGhpcy5fYml0RmllbGQgJiAofjQxOTQzMDQpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2lzR2NRdWV1ZWQgPSBmdW5jdGlvbiBQcm9taXNlJF9pc0djUXVldWVkKCkge1xuICAgIHJldHVybiAodGhpcy5fYml0RmllbGQgJiAtMTA3Mzc0MTgyNCkgPT09IC0xMDczNzQxODI0O1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3NldEdjUXVldWVkID0gZnVuY3Rpb24gUHJvbWlzZSRfc2V0R2NRdWV1ZWQoKSB7XG4gICAgdGhpcy5fYml0RmllbGQgPSB0aGlzLl9iaXRGaWVsZCB8IC0xMDczNzQxODI0O1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3Vuc2V0R2NRdWV1ZWQgPSBmdW5jdGlvbiBQcm9taXNlJF91bnNldEdjUXVldWVkKCkge1xuICAgIHRoaXMuX2JpdEZpZWxkID0gdGhpcy5fYml0RmllbGQgJiAofi0xMDczNzQxODI0KTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9xdWV1ZUdDID0gZnVuY3Rpb24gUHJvbWlzZSRfcXVldWVHQygpIHtcbiAgICBpZiAodGhpcy5faXNHY1F1ZXVlZCgpKSByZXR1cm47XG4gICAgdGhpcy5fc2V0R2NRdWV1ZWQoKTtcbiAgICBhc3luYy5pbnZva2VMYXRlcih0aGlzLl9nYywgdGhpcywgdm9pZCAwKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9nYyA9IGZ1bmN0aW9uIFByb21pc2UkZ2MoKSB7XG4gICAgdmFyIGxlbiA9IHRoaXMuX2xlbmd0aCgpO1xuICAgIHRoaXMuX3Vuc2V0QXQoMCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBkZWxldGUgdGhpc1tpXTtcbiAgICB9XG4gICAgdGhpcy5fc2V0TGVuZ3RoKDApO1xuICAgIHRoaXMuX3Vuc2V0R2NRdWV1ZWQoKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9xdWV1ZVNldHRsZUF0ID0gZnVuY3Rpb24gUHJvbWlzZSRfcXVldWVTZXR0bGVBdChpbmRleCkge1xuICAgIGlmICh0aGlzLl9pc1JlamVjdGlvblVuaGFuZGxlZCgpKSB0aGlzLl91bnNldFJlamVjdGlvbklzVW5oYW5kbGVkKCk7XG4gICAgYXN5bmMuaW52b2tlKHRoaXMuX3NldHRsZVByb21pc2VBdCwgdGhpcywgaW5kZXgpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2Z1bGZpbGxVbmNoZWNrZWQgPVxuZnVuY3Rpb24gUHJvbWlzZSRfZnVsZmlsbFVuY2hlY2tlZCh2YWx1ZSkge1xuICAgIGlmICghdGhpcy5pc1BlbmRpbmcoKSkgcmV0dXJuO1xuICAgIGlmICh2YWx1ZSA9PT0gdGhpcykge1xuICAgICAgICB2YXIgZXJyID0gbWFrZVNlbGZSZXNvbHV0aW9uRXJyb3IoKTtcbiAgICAgICAgdGhpcy5fYXR0YWNoRXh0cmFUcmFjZShlcnIpO1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVqZWN0VW5jaGVja2VkKGVyciwgdm9pZCAwKTtcbiAgICB9XG4gICAgdGhpcy5fY2xlYW5WYWx1ZXMoKTtcbiAgICB0aGlzLl9zZXRGdWxmaWxsZWQoKTtcbiAgICB0aGlzLl9zZXR0bGVkVmFsdWUgPSB2YWx1ZTtcbiAgICB2YXIgbGVuID0gdGhpcy5fbGVuZ3RoKCk7XG5cbiAgICBpZiAobGVuID4gMCkge1xuICAgICAgICBhc3luYy5pbnZva2UodGhpcy5fc2V0dGxlUHJvbWlzZXMsIHRoaXMsIGxlbik7XG4gICAgfVxufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3JlamVjdFVuY2hlY2tlZENoZWNrRXJyb3IgPVxuZnVuY3Rpb24gUHJvbWlzZSRfcmVqZWN0VW5jaGVja2VkQ2hlY2tFcnJvcihyZWFzb24pIHtcbiAgICB2YXIgdHJhY2UgPSBjYW5BdHRhY2gocmVhc29uKSA/IHJlYXNvbiA6IG5ldyBFcnJvcihyZWFzb24gKyBcIlwiKTtcbiAgICB0aGlzLl9yZWplY3RVbmNoZWNrZWQocmVhc29uLCB0cmFjZSA9PT0gcmVhc29uID8gdm9pZCAwIDogdHJhY2UpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3JlamVjdFVuY2hlY2tlZCA9XG5mdW5jdGlvbiBQcm9taXNlJF9yZWplY3RVbmNoZWNrZWQocmVhc29uLCB0cmFjZSkge1xuICAgIGlmICghdGhpcy5pc1BlbmRpbmcoKSkgcmV0dXJuO1xuICAgIGlmIChyZWFzb24gPT09IHRoaXMpIHtcbiAgICAgICAgdmFyIGVyciA9IG1ha2VTZWxmUmVzb2x1dGlvbkVycm9yKCk7XG4gICAgICAgIHRoaXMuX2F0dGFjaEV4dHJhVHJhY2UoZXJyKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlamVjdFVuY2hlY2tlZChlcnIpO1xuICAgIH1cbiAgICB0aGlzLl9jbGVhblZhbHVlcygpO1xuICAgIHRoaXMuX3NldFJlamVjdGVkKCk7XG4gICAgdGhpcy5fc2V0dGxlZFZhbHVlID0gcmVhc29uO1xuXG4gICAgaWYgKHRoaXMuX2lzRmluYWwoKSkge1xuICAgICAgICBhc3luYy5pbnZva2VMYXRlcih0aHJvd2VyLCB2b2lkIDAsIHRyYWNlID09PSB2b2lkIDAgPyByZWFzb24gOiB0cmFjZSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGxlbiA9IHRoaXMuX2xlbmd0aCgpO1xuXG4gICAgaWYgKHRyYWNlICE9PSB2b2lkIDApIHRoaXMuX3NldENhcnJpZWRTdGFja1RyYWNlKHRyYWNlKTtcblxuICAgIGlmIChsZW4gPiAwKSB7XG4gICAgICAgIGFzeW5jLmludm9rZSh0aGlzLl9yZWplY3RQcm9taXNlcywgdGhpcywgbnVsbCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aGlzLl9lbnN1cmVQb3NzaWJsZVJlamVjdGlvbkhhbmRsZWQoKTtcbiAgICB9XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fcmVqZWN0UHJvbWlzZXMgPSBmdW5jdGlvbiBQcm9taXNlJF9yZWplY3RQcm9taXNlcygpIHtcbiAgICB0aGlzLl9zZXR0bGVQcm9taXNlcygpO1xuICAgIHRoaXMuX3Vuc2V0Q2FycmllZFN0YWNrVHJhY2UoKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9zZXR0bGVQcm9taXNlcyA9IGZ1bmN0aW9uIFByb21pc2UkX3NldHRsZVByb21pc2VzKCkge1xuICAgIHZhciBsZW4gPSB0aGlzLl9sZW5ndGgoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSs9IDUpIHtcbiAgICAgICAgdGhpcy5fc2V0dGxlUHJvbWlzZUF0KGkpO1xuICAgIH1cbn07XG5cblByb21pc2UucHJvdG90eXBlLl9lbnN1cmVQb3NzaWJsZVJlamVjdGlvbkhhbmRsZWQgPVxuZnVuY3Rpb24gUHJvbWlzZSRfZW5zdXJlUG9zc2libGVSZWplY3Rpb25IYW5kbGVkKCkge1xuICAgIHRoaXMuX3NldFJlamVjdGlvbklzVW5oYW5kbGVkKCk7XG4gICAgaWYgKENhcHR1cmVkVHJhY2UucG9zc2libHlVbmhhbmRsZWRSZWplY3Rpb24gIT09IHZvaWQgMCkge1xuICAgICAgICBhc3luYy5pbnZva2VMYXRlcih0aGlzLl9ub3RpZnlVbmhhbmRsZWRSZWplY3Rpb24sIHRoaXMsIHZvaWQgMCk7XG4gICAgfVxufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX25vdGlmeVVuaGFuZGxlZFJlamVjdGlvbklzSGFuZGxlZCA9XG5mdW5jdGlvbiBQcm9taXNlJF9ub3RpZnlVbmhhbmRsZWRSZWplY3Rpb25Jc0hhbmRsZWQoKSB7XG4gICAgaWYgKHR5cGVvZiB1bmhhbmRsZWRSZWplY3Rpb25IYW5kbGVkID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgYXN5bmMuaW52b2tlTGF0ZXIodW5oYW5kbGVkUmVqZWN0aW9uSGFuZGxlZCwgdm9pZCAwLCB0aGlzKTtcbiAgICB9XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fbm90aWZ5VW5oYW5kbGVkUmVqZWN0aW9uID1cbmZ1bmN0aW9uIFByb21pc2UkX25vdGlmeVVuaGFuZGxlZFJlamVjdGlvbigpIHtcbiAgICBpZiAodGhpcy5faXNSZWplY3Rpb25VbmhhbmRsZWQoKSkge1xuICAgICAgICB2YXIgcmVhc29uID0gdGhpcy5fc2V0dGxlZFZhbHVlO1xuICAgICAgICB2YXIgdHJhY2UgPSB0aGlzLl9nZXRDYXJyaWVkU3RhY2tUcmFjZSgpO1xuXG4gICAgICAgIHRoaXMuX3NldFVuaGFuZGxlZFJlamVjdGlvbklzTm90aWZpZWQoKTtcblxuICAgICAgICBpZiAodHJhY2UgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgdGhpcy5fdW5zZXRDYXJyaWVkU3RhY2tUcmFjZSgpO1xuICAgICAgICAgICAgcmVhc29uID0gdHJhY2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBDYXB0dXJlZFRyYWNlLnBvc3NpYmx5VW5oYW5kbGVkUmVqZWN0aW9uID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIENhcHR1cmVkVHJhY2UucG9zc2libHlVbmhhbmRsZWRSZWplY3Rpb24ocmVhc29uLCB0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbnZhciBjb250ZXh0U3RhY2sgPSBbXTtcblByb21pc2UucHJvdG90eXBlLl9wZWVrQ29udGV4dCA9IGZ1bmN0aW9uIFByb21pc2UkX3BlZWtDb250ZXh0KCkge1xuICAgIHZhciBsYXN0SW5kZXggPSBjb250ZXh0U3RhY2subGVuZ3RoIC0gMTtcbiAgICBpZiAobGFzdEluZGV4ID49IDApIHtcbiAgICAgICAgcmV0dXJuIGNvbnRleHRTdGFja1tsYXN0SW5kZXhdO1xuICAgIH1cbiAgICByZXR1cm4gdm9pZCAwO1xuXG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fcHVzaENvbnRleHQgPSBmdW5jdGlvbiBQcm9taXNlJF9wdXNoQ29udGV4dCgpIHtcbiAgICBpZiAoIWRlYnVnZ2luZykgcmV0dXJuO1xuICAgIGNvbnRleHRTdGFjay5wdXNoKHRoaXMpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3BvcENvbnRleHQgPSBmdW5jdGlvbiBQcm9taXNlJF9wb3BDb250ZXh0KCkge1xuICAgIGlmICghZGVidWdnaW5nKSByZXR1cm47XG4gICAgY29udGV4dFN0YWNrLnBvcCgpO1xufTtcblxuZnVuY3Rpb24gUHJvbWlzZSRfQ3JlYXRlUHJvbWlzZUFycmF5KFxuICAgIHByb21pc2VzLCBQcm9taXNlQXJyYXlDb25zdHJ1Y3RvciwgYm91bmRUbykge1xuXG4gICAgdmFyIGxpc3QgPSBudWxsO1xuICAgIGlmIChpc0FycmF5KHByb21pc2VzKSkge1xuICAgICAgICBsaXN0ID0gcHJvbWlzZXM7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBsaXN0ID0gUHJvbWlzZS5fY2FzdChwcm9taXNlcywgdm9pZCAwKTtcbiAgICAgICAgaWYgKGxpc3QgIT09IHByb21pc2VzKSB7XG4gICAgICAgICAgICBsaXN0Ll9zZXRCb3VuZFRvKGJvdW5kVG8pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFpc1Byb21pc2UobGlzdCkpIHtcbiAgICAgICAgICAgIGxpc3QgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChsaXN0ICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZUFycmF5Q29uc3RydWN0b3IobGlzdCwgYm91bmRUbyk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHByb21pc2U6IGZ1bmN0aW9uKCkge3JldHVybiBhcGlSZWplY3Rpb24oXCJleHBlY3RpbmcgYW4gYXJyYXksIGEgcHJvbWlzZSBvciBhIHRoZW5hYmxlXCIpO31cbiAgICB9O1xufVxuXG52YXIgb2xkID0gZ2xvYmFsLlByb21pc2U7XG5Qcm9taXNlLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoZ2xvYmFsLlByb21pc2UgPT09IFByb21pc2UpIHtcbiAgICAgICAgZ2xvYmFsLlByb21pc2UgPSBvbGQ7XG4gICAgfVxuICAgIHJldHVybiBQcm9taXNlO1xufTtcblxuaWYgKCFDYXB0dXJlZFRyYWNlLmlzU3VwcG9ydGVkKCkpIHtcbiAgICBQcm9taXNlLmxvbmdTdGFja1RyYWNlcyA9IGZ1bmN0aW9uKCl7fTtcbiAgICBkZWJ1Z2dpbmcgPSBmYWxzZTtcbn1cblxuUHJvbWlzZS5fbWFrZVNlbGZSZXNvbHV0aW9uRXJyb3IgPSBtYWtlU2VsZlJlc29sdXRpb25FcnJvcjtcbnJlcXVpcmUoXCIuL2ZpbmFsbHkuanNcIikoUHJvbWlzZSwgTkVYVF9GSUxURVIpO1xucmVxdWlyZShcIi4vZGlyZWN0X3Jlc29sdmUuanNcIikoUHJvbWlzZSk7XG5yZXF1aXJlKFwiLi90aGVuYWJsZXMuanNcIikoUHJvbWlzZSwgSU5URVJOQUwpO1xucmVxdWlyZShcIi4vc3luY2hyb25vdXNfaW5zcGVjdGlvbi5qc1wiKShQcm9taXNlKTtcblByb21pc2UuUmFuZ2VFcnJvciA9IFJhbmdlRXJyb3I7XG5Qcm9taXNlLkNhbmNlbGxhdGlvbkVycm9yID0gQ2FuY2VsbGF0aW9uRXJyb3I7XG5Qcm9taXNlLlRpbWVvdXRFcnJvciA9IFRpbWVvdXRFcnJvcjtcblByb21pc2UuVHlwZUVycm9yID0gVHlwZUVycm9yO1xuUHJvbWlzZS5SZWplY3Rpb25FcnJvciA9IFJlamVjdGlvbkVycm9yO1xuXG51dGlsLnRvRmFzdFByb3BlcnRpZXMoUHJvbWlzZSk7XG51dGlsLnRvRmFzdFByb3BlcnRpZXMoUHJvbWlzZS5wcm90b3R5cGUpO1xucmVxdWlyZSgnLi90aW1lcnMuanMnKShQcm9taXNlLElOVEVSTkFMKTtcbnJlcXVpcmUoJy4vYW55LmpzJykoUHJvbWlzZSxQcm9taXNlJF9DcmVhdGVQcm9taXNlQXJyYXksUHJvbWlzZUFycmF5KTtcbnJlcXVpcmUoJy4vcmFjZS5qcycpKFByb21pc2UsSU5URVJOQUwpO1xucmVxdWlyZSgnLi9jYWxsX2dldC5qcycpKFByb21pc2UpO1xucmVxdWlyZSgnLi9maWx0ZXIuanMnKShQcm9taXNlLFByb21pc2UkX0NyZWF0ZVByb21pc2VBcnJheSxQcm9taXNlQXJyYXksYXBpUmVqZWN0aW9uKTtcbnJlcXVpcmUoJy4vZ2VuZXJhdG9ycy5qcycpKFByb21pc2UsYXBpUmVqZWN0aW9uLElOVEVSTkFMKTtcbnJlcXVpcmUoJy4vbWFwLmpzJykoUHJvbWlzZSxQcm9taXNlQXJyYXksSU5URVJOQUwsYXBpUmVqZWN0aW9uKTtcbnJlcXVpcmUoJy4vbm9kZWlmeS5qcycpKFByb21pc2UpO1xucmVxdWlyZSgnLi9wcm9taXNpZnkuanMnKShQcm9taXNlLElOVEVSTkFMKTtcbnJlcXVpcmUoJy4vcHJvcHMuanMnKShQcm9taXNlLFByb21pc2VBcnJheSk7XG5yZXF1aXJlKCcuL3JlZHVjZS5qcycpKFByb21pc2UsUHJvbWlzZSRfQ3JlYXRlUHJvbWlzZUFycmF5LFByb21pc2VBcnJheSxhcGlSZWplY3Rpb24sSU5URVJOQUwpO1xucmVxdWlyZSgnLi9zZXR0bGUuanMnKShQcm9taXNlLFByb21pc2UkX0NyZWF0ZVByb21pc2VBcnJheSxQcm9taXNlQXJyYXkpO1xucmVxdWlyZSgnLi9zb21lLmpzJykoUHJvbWlzZSxQcm9taXNlJF9DcmVhdGVQcm9taXNlQXJyYXksUHJvbWlzZUFycmF5LGFwaVJlamVjdGlvbik7XG5yZXF1aXJlKCcuL3Byb2dyZXNzLmpzJykoUHJvbWlzZSxpc1Byb21pc2VBcnJheVByb3h5KTtcbnJlcXVpcmUoJy4vY2FuY2VsLmpzJykoUHJvbWlzZSxJTlRFUk5BTCk7XG5cblByb21pc2UucHJvdG90eXBlID0gUHJvbWlzZS5wcm90b3R5cGU7XG5yZXR1cm4gUHJvbWlzZTtcblxufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0IFBldGthIEFudG9ub3ZcbiAqIFxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOjwvcD5cbiAqIFxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICogXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKiBcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgZ2xvYmFsID0gcmVxdWlyZShcIi4vZ2xvYmFsLmpzXCIpO1xudmFyIHNjaGVkdWxlO1xuaWYgKHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmIHByb2Nlc3MgIT09IG51bGwgJiZcbiAgICB0eXBlb2YgcHJvY2Vzcy5jd2QgPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgIHR5cGVvZiBwcm9jZXNzLm5leHRUaWNrID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICB0eXBlb2YgcHJvY2Vzcy52ZXJzaW9uID09PSBcInN0cmluZ1wiKSB7XG4gICAgc2NoZWR1bGUgPSBmdW5jdGlvbiBQcm9taXNlJF9TY2hlZHVsZXIoZm4pIHtcbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbik7XG4gICAgfTtcbn1cbmVsc2UgaWYgKCh0eXBlb2YgZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgPT09IFwiZnVuY3Rpb25cIiB8fFxuICAgICAgICB0eXBlb2YgZ2xvYmFsLldlYmtpdE11dGF0aW9uT2JzZXJ2ZXIgPT09IFwiZnVuY3Rpb25cIiB8fFxuICAgICAgICB0eXBlb2YgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXIgPT09IFwiZnVuY3Rpb25cIikgJiZcbiAgICAgICAgdHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50ID09PSBcImZ1bmN0aW9uXCIpIHtcblxuXG4gICAgc2NoZWR1bGUgPSAoZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIE11dGF0aW9uT2JzZXJ2ZXIgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fFxuICAgICAgICAgICAgZ2xvYmFsLldlYmtpdE11dGF0aW9uT2JzZXJ2ZXIgfHxcbiAgICAgICAgICAgIGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xuICAgICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgdmFyIHF1ZXVlZEZuID0gdm9pZCAwO1xuICAgICAgICB2YXIgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihcbiAgICAgICAgICAgIGZ1bmN0aW9uIFByb21pc2UkX1NjaGVkdWxlcigpIHtcbiAgICAgICAgICAgICAgICB2YXIgZm4gPSBxdWV1ZWRGbjtcbiAgICAgICAgICAgICAgICBxdWV1ZWRGbiA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICBmbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICk7XG4gICAgICAgIG9ic2VydmVyLm9ic2VydmUoZGl2LCB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gUHJvbWlzZSRfU2NoZWR1bGVyKGZuKSB7XG4gICAgICAgICAgICBxdWV1ZWRGbiA9IGZuO1xuICAgICAgICAgICAgZGl2LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiZm9vXCIpO1xuICAgICAgICB9O1xuXG4gICAgfSkoKTtcbn1cbmVsc2UgaWYgKHR5cGVvZiBnbG9iYWwucG9zdE1lc3NhZ2UgPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgIHR5cGVvZiBnbG9iYWwuaW1wb3J0U2NyaXB0cyAhPT0gXCJmdW5jdGlvblwiICYmXG4gICAgdHlwZW9mIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICB0eXBlb2YgZ2xvYmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIgPT09IFwiZnVuY3Rpb25cIikge1xuXG4gICAgdmFyIE1FU1NBR0VfS0VZID0gXCJibHVlYmlyZF9tZXNzYWdlX2tleV9cIiArIE1hdGgucmFuZG9tKCk7XG4gICAgc2NoZWR1bGUgPSAoZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIHF1ZXVlZEZuID0gdm9pZCAwO1xuXG4gICAgICAgIGZ1bmN0aW9uIFByb21pc2UkX1NjaGVkdWxlcihlKSB7XG4gICAgICAgICAgICBpZiAoZS5zb3VyY2UgPT09IGdsb2JhbCAmJlxuICAgICAgICAgICAgICAgIGUuZGF0YSA9PT0gTUVTU0FHRV9LRVkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZm4gPSBxdWV1ZWRGbjtcbiAgICAgICAgICAgICAgICBxdWV1ZWRGbiA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICBmbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIFByb21pc2UkX1NjaGVkdWxlciwgZmFsc2UpO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBQcm9taXNlJF9TY2hlZHVsZXIoZm4pIHtcbiAgICAgICAgICAgIHF1ZXVlZEZuID0gZm47XG4gICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoXG4gICAgICAgICAgICAgICAgTUVTU0FHRV9LRVksIFwiKlwiXG4gICAgICAgICAgICk7XG4gICAgICAgIH07XG5cbiAgICB9KSgpO1xufVxuZWxzZSBpZiAodHlwZW9mIGdsb2JhbC5NZXNzYWdlQ2hhbm5lbCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgc2NoZWR1bGUgPSAoZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIHF1ZXVlZEZuID0gdm9pZCAwO1xuXG4gICAgICAgIHZhciBjaGFubmVsID0gbmV3IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbCgpO1xuICAgICAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIFByb21pc2UkX1NjaGVkdWxlcigpIHtcbiAgICAgICAgICAgICAgICB2YXIgZm4gPSBxdWV1ZWRGbjtcbiAgICAgICAgICAgICAgICBxdWV1ZWRGbiA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICBmbigpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBQcm9taXNlJF9TY2hlZHVsZXIoZm4pIHtcbiAgICAgICAgICAgIHF1ZXVlZEZuID0gZm47XG4gICAgICAgICAgICBjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKG51bGwpO1xuICAgICAgICB9O1xuICAgIH0pKCk7XG59XG5lbHNlIGlmIChnbG9iYWwuc2V0VGltZW91dCkge1xuICAgIHNjaGVkdWxlID0gZnVuY3Rpb24gUHJvbWlzZSRfU2NoZWR1bGVyKGZuKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZm4sIDQpO1xuICAgIH07XG59XG5lbHNlIHtcbiAgICBzY2hlZHVsZSA9IGZ1bmN0aW9uIFByb21pc2UkX1NjaGVkdWxlcihmbikge1xuICAgICAgICBmbigpO1xuICAgIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2NoZWR1bGU7XG4iLCJcbm1vZHVsZS5leHBvcnRzID0gTWVtXG5cbmZ1bmN0aW9uIE1lbShvcHRpb25zKSB7XG4gIHRoaXMubyA9IG9wdGlvbnNcbiAgdGhpcy5kYXRhID0ge31cbn1cblxuTWVtLnByb3RvdHlwZSA9IHtcbiAgZmluZEFsbDogZnVuY3Rpb24gKHR5cGUsIGRvbmUpIHtcbiAgICB2YXIgcmVzID0gW11cbiAgICBpZiAoIXRoaXMuZGF0YVt0eXBlXSkgcmV0dXJuIGRvbmUobnVsbCwgcmVzKVxuICAgIGZvciAodmFyIGlkIGluIHRoaXMuZGF0YVt0eXBlXSkge1xuICAgICAgcmVzLnB1c2godGhpcy5kYXRhW3R5cGVdW2lkXSlcbiAgICB9XG4gICAgZG9uZShudWxsLCByZXMpXG4gIH0sXG4gIHNhdmU6IGZ1bmN0aW9uICh0eXBlLCBpZCwgdmFsdWUsIGRvbmUpIHtcbiAgICBpZiAoIXRoaXMuZGF0YVt0eXBlXSkge1xuICAgICAgdGhpcy5kYXRhW3R5cGVdID0ge31cbiAgICB9XG4gICAgdGhpcy5kYXRhW3R5cGVdW2lkXSA9IHZhbHVlXG4gICAgZG9uZSAmJiBkb25lKClcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAodHlwZSwgaWQsIGF0dHIsIHZhbHVlLCBkb25lKSB7XG4gICAgdGhpcy5kYXRhW3R5cGVdW2lkXVthdHRyXSA9IHZhbHVlXG4gICAgZG9uZSAmJiBkb25lKClcbiAgfSxcbiAgYmF0Y2hTYXZlOiBmdW5jdGlvbiAodHlwZSwgbm9kZXMsIGRvbmUpIHtcbiAgICBpZiAoIXRoaXMuZGF0YVt0eXBlXSkge1xuICAgICAgdGhpcy5kYXRhW3R5cGVdID0ge31cbiAgICB9XG4gICAgZm9yICh2YXIgaWQgaW4gbm9kZXMpIHtcbiAgICAgIHRoaXMuZGF0YVt0eXBlXVtpZF0gPSBub2Rlc1tpZF1cbiAgICB9XG4gICAgZG9uZSAmJiBkb25lKClcbiAgfSxcbiAgYmF0Y2hTZXQ6IGZ1bmN0aW9uICh0eXBlLCBhdHRyLCBpZHMsIHZhbHVlLCBkb25lKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICBmb3IgKHZhciBpPTA7IGk8aWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMuZGF0YVt0eXBlXVtpZHNbaV1dW2F0dHJdID0gdmFsdWVbaV1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgaT0wOyBpPGlkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLmRhdGFbdHlwZV1baWRzW2ldXVthdHRyXSA9IHZhbHVlXG4gICAgICB9XG4gICAgfVxuICAgIGRvbmUgJiYgZG9uZSgpXG4gIH0sXG4gIHVwZGF0ZTogZnVuY3Rpb24gKHR5cGUsIGlkLCB1cGRhdGUsIGRvbmUpIHtcbiAgICBmb3IgKHZhciBuYW1lIGluIHVwZGF0ZSkge1xuICAgICAgdGhpcy5kYXRhW3R5cGVdW2lkXVtuYW1lXSA9IHVwZGF0ZVtuYW1lXVxuICAgIH1cbiAgICBkb25lICYmIGRvbmUoKVxuICB9LFxuICByZW1vdmU6IGZ1bmN0aW9uICh0eXBlLCBpZCwgZG9uZSkge1xuICAgIGRlbGV0ZSB0aGlzLmRhdGFbdHlwZV1baWRdXG4gICAgZG9uZSAmJiBkb25lKClcbiAgfSxcbn1cblxuIiwiXG52YXIgbW92ZW1lbnQgPSByZXF1aXJlKCcuLi8uLi92aWV3cy9saXN0L21vdmVtZW50JylcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHRpdGxlOiAnQ2xpcGJvYXJkJyxcblxuICBrZXlzOiB7XG4gICAgJ3JlbW92ZSc6IHt9LCAvLyBub3QgdXNpbmcgdGhpc1xuICAgICdjdXQnOiB7XG4gICAgICAnbm9ybWFsJzogJ2QgZCwgc2hpZnQrZCwgY3RybCt4LCBkZWxldGUnLFxuICAgICAgJ3Zpc3VhbCc6ICdkLCBzaGlmdCtkLCBjdHJsK3gsIGRlbGV0ZScsXG4gICAgICAvLyAnaW5zZXJ0JzogJ2N0cmwreCcsXG4gICAgfSxcbiAgICAnY29weSc6IHtcbiAgICAgICdub3JtYWwnOiAneSB5LCBzaGlmdCt5LCBjdHJsK2MnLFxuICAgICAgJ3Zpc3VhbCc6ICd5LCBzaGlmdCt5LCBjdHJsK2MnLFxuICAgICAgLy8gJ2luc2VydCc6ICdjdHJsK2MnLFxuICAgIH0sXG4gICAgJ3Bhc3RlJzoge1xuICAgICAgJ25vcm1hbCc6ICdwLCBjdHJsK3YnLFxuICAgICAgJ3Zpc3VhbCc6ICdwLCBjdHJsK3YnLFxuICAgICAgLy8gJ2luc2VydCc6ICdjdHJsK3YnLFxuICAgIH0sXG4gICAgJ3Bhc3RlIGFib3ZlJzoge1xuICAgICAgJ25vcm1hbCc6ICdzaGlmdCtwJyxcbiAgICAgICd2aXN1YWwnOiAnc2hpZnQrcCcsXG4gICAgfSxcbiAgfSxcblxuICBjb250ZXh0TWVudTogZnVuY3Rpb24gKG5vZGUsIHN0b3JlKSB7XG4gICAgdmFyIHBsdXJhbCA9IHN0b3JlLnZpZXcubW9kZSA9PT0gJ3Zpc3VhbCcgJiYgc3RvcmUudmlldy5zZWxlY3Rpb24ubGVuZ3RoID4gMVxuICAgICAgLCBub2RlVGV4dCA9IHBsdXJhbCA/ICdub2RlcycgOiAnbm9kZSdcbiAgICByZXR1cm4gW3tcbiAgICAgIHRpdGxlOiAnQ29weSAnICsgbm9kZVRleHQsIFxuICAgICAgYWN0aW9uOiAnY29weScsXG4gICAgICBzaG9ydGN1dDogJ3kgeScsXG4gICAgfSwge1xuICAgICAgdGl0bGU6ICdDdXQgJyArIG5vZGVUZXh0LFxuICAgICAgYWN0aW9uOiAnY3V0JyxcbiAgICAgIHNob3J0Y3V0OiAnZCBkJyxcbiAgICB9LCB7XG4gICAgICB0aXRsZTogJ1Bhc3RlIGFmdGVyJyxcbiAgICAgIGFjdGlvbjogJ3Bhc3RlJyxcbiAgICAgIHNob3J0Y3V0OiAncCcsXG4gICAgICBkaXNhYmxlZDogIXN0b3JlLmdsb2JhbHMuY2xpcGJvYXJkLFxuICAgIH1dXG4gIH0sXG5cbiAgc3RvcmU6IHtcbiAgICBpbml0OiBmdW5jdGlvbiAoc3RvcmUpIHtcbiAgICAgIHN0b3JlLl9nbG9iYWxzLmNsaXBib2FyZCA9IG51bGxcbiAgICB9LFxuXG4gICAgYWN0aW9uczoge1xuICAgICAgY29weTogZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIHZhciBzZWwgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKClcbiAgICAgICAgdmFyIGlkc1xuICAgICAgICBpZiAoc2VsLnR5cGUgPT09ICdSYW5nZScgJiYgIXNlbC5nZXRSYW5nZUF0KDApLmNvbGxhcHNlZCkge1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgaWQgPSBpZCB8fCB0aGlzLnZpZXcuYWN0aXZlXG4gICAgICAgIGlmICh0aGlzLnZpZXcubW9kZSA9PT0gJ3Zpc3VhbCcpIHtcbiAgICAgICAgICBpZHMgPSB0aGlzLnZpZXcuc2VsZWN0aW9uXG4gICAgICAgICAgdGhpcy5zZXRNb2RlKCdub3JtYWwnKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlkcyA9IFtpZF1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmdsb2JhbHMuY2xpcGJvYXJkID0gdGhpcy5kYi5leHBvcnRNYW55KGlkcylcbiAgICAgIH0sXG5cbiAgICAgIGN1dDogZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIHZhciBzZWwgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKClcbiAgICAgICAgdmFyIGlkc1xuICAgICAgICBpZiAoc2VsLnR5cGUgPT09ICdSYW5nZScgJiYgIXNlbC5nZXRSYW5nZUF0KDApLmNvbGxhcHNlZCkge1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgaWQgPSBpZCB8fCB0aGlzLnZpZXcuYWN0aXZlXG4gICAgICAgIGlmIChpZCA9PT0gdGhpcy52aWV3LnJvb3QpIHJldHVyblxuICAgICAgICBpZiAodGhpcy52aWV3Lm1vZGUgPT09ICd2aXN1YWwnKSB7XG4gICAgICAgICAgaWRzID0gdGhpcy52aWV3LnNlbGVjdGlvblxuICAgICAgICAgIGxldCBuZXh0ID0gbW92ZW1lbnQubmV4dFNpYmxpbmcoaWRzW2lkcy5sZW5ndGggLSAxXSwgdGhpcy52aWV3LnJvb3QsIHRoaXMuZGIubm9kZXMsIHRydWUpXG4gICAgICAgICAgaWYgKCFuZXh0KSB7XG4gICAgICAgICAgICBuZXh0ID0gbW92ZW1lbnQudXAoaWRzWzBdLCB0aGlzLnZpZXcucm9vdCwgdGhpcy5kYi5ub2RlcywgdHJ1ZSlcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFuZXh0KSB7XG4gICAgICAgICAgICBuZXh0ID0gdGhpcy5kYi5ub2Rlc1tpZHNbMF1dLnBhcmVudFxuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnNldEFjdGl2ZShuZXh0KVxuICAgICAgICAgIHRoaXMuc2V0TW9kZSgnbm9ybWFsJywgdHJ1ZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZHMgPSBbaWRdXG4gICAgICAgICAgdGhpcy5nb1RvU3Vydml2aW5nTmVpZ2hib3IoaWQpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudmlldy5tb2RlID09PSAnaW5zZXJ0Jykge1xuICAgICAgICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuYmx1cigpXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5nbG9iYWxzLmNsaXBib2FyZCA9IHRoaXMuZGIuZXhwb3J0TWFueShpZHMpXG4gICAgICAgIHRoaXMuZXhlY3V0ZUNvbW1hbmQoJ3JlbW92ZScsIHtpZHM6IGlkc30pXG4gICAgICB9LFxuXG4gICAgICBwYXN0ZTogZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIGlmICghdGhpcy5nbG9iYWxzLmNsaXBib2FyZCkgcmV0dXJuXG4gICAgICAgIHRoaXMuaW1wb3J0VHJlZXMoaWQsIHRoaXMuZ2xvYmFscy5jbGlwYm9hcmQpXG4gICAgICB9LFxuXG4gICAgICBwYXN0ZUFib3ZlOiBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmdsb2JhbHMuY2xpcGJvYXJkKSByZXR1cm5cbiAgICAgICAgdGhpcy5pbXBvcnRUcmVlcyhpZCwgdGhpcy5nbG9iYWxzLmNsaXBib2FyZCwgdHJ1ZSlcbiAgICAgIH0sXG4gICAgfSxcbiAgfSxcbn1cblxuIiwiXG5tb2R1bGUuZXhwb3J0cyA9ICB7XG4gIHRpdGxlOiAnQ29sbGFwc2VyJyxcblxuICBzdG9yZTogcmVxdWlyZSgnLi9zdG9yZScpLFxuICBub2RlOiByZXF1aXJlKCcuL25vZGUnKSxcbiAga2V5czogcmVxdWlyZSgnLi9rZXlzJyksXG59XG5cbiIsIlxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICd0b2dnbGUgY29sbGFwc2UgZGVlcCc6IHtcbiAgICBkZXNjcmlwdGlvbjogJ1RvZ2dsZSB0aGUgY29sbGFwc2Ugb2YgdGhlIGN1cnJlbnQgaXRlbSBhbmQgYWxsIGNoaWxkcmVuJyxcbiAgICBub3JtYWw6ICdzaGlmdCt6JyxcbiAgICB2aXN1YWw6ICdzaGlmdCt6JyxcbiAgfSxcbiAgJ3RvZ2dsZSBjb2xsYXBzZSc6IHtcbiAgICBkZXNjcmlwdGlvbjogJ1RvZ2dsZSB0aGUgY29sbGFwc2Ugb2YgdGhlIGN1cnJlbnQgaXRlbScsXG4gICAgbm9ybWFsOiAneicsXG4gICAgdmlzdWFsOiAneicsXG4gIH0sXG4gIC8qXG4gICdjb2xsYXBzZSc6IHtcbiAgICBkZXNjcmlwdGlvbjogJ0NvbGxhcHNlIHRoZSBjdXJyZW50IGl0ZW0nLFxuICAgIG5vcm1hbDogJ2N0cmwrbGVmdCcsXG4gICAgaW5zZXJ0OiAnY3RybCtsZWZ0JyxcbiAgICB2aXN1YWw6ICdjdHJsK2xlZnQnLFxuICB9LFxuICAnZXhwYW5kJzoge1xuICAgIGRlc2NyaXB0aW9uOiAnRXhwYW5kIHRoZSBjdXJyZW50IGl0ZW0nLFxuICAgIG5vcm1hbDogJ2N0cmwrcmlnaHQnLFxuICAgIGluc2VydDogJ2N0cmwrcmlnaHQnLFxuICAgIHZpc3VhbDogJ2N0cmwrcmlnaHQnLFxuICB9LFxuICAqL1xufVxuXG4iLCJcbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0L2FkZG9ucycpXG52YXIgY3ggPSBSZWFjdC5hZGRvbnMuY2xhc3NTZXRcblxudmFyIHNsaWRlID0gcmVxdWlyZSgnLi4vLi4vdXRpbC9zbGlkZScpXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjbGFzc2VzOiBmdW5jdGlvbiAobm9kZSwgc3RhdGUpIHtcbiAgICB2YXIgY2xzID0gW11cbiAgICBpZiAobm9kZS5jb2xsYXBzZWQpIHtcbiAgICAgIGNscy5wdXNoKCduX0NvbGxhcHNlJylcbiAgICB9XG4gICAgaWYgKG5vZGUuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICBjbHMucHVzaCgnVHJlZUl0ZW0tcGFyZW50JylcbiAgICB9XG4gICAgcmV0dXJuIGNscy5qb2luKCcgJylcbiAgfSxcblxuICBjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uIChwcmV2UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgIGlmICh0aGlzLnByb3BzLmlzUm9vdCkgcmV0dXJuXG4gICAgaWYgKCF0aGlzLnN0YXRlLm5vZGUpIHJldHVyblxuICAgIHZhciBjID0gdGhpcy5zdGF0ZS5ub2RlLmNvbGxhcHNlZFxuICAgIGlmICghdGhpcy5yZWZzIHx8ICF0aGlzLnJlZnMuY2hpbGRyZW4pIHJldHVyblxuICAgIGlmICh0aGlzLl9wcmV2X2NvbGxhcHNlZCA9PT0gYykgcmV0dXJuXG4gICAgdGhpcy5fcHJldl9jb2xsYXBzZWQgPSBjXG4gICAgdmFyIGVsID0gdGhpcy5yZWZzLmNoaWxkcmVuLmdldERPTU5vZGUoKVxuICAgIGlmIChjKSB7XG4gICAgICBzbGlkZS51cChlbClcbiAgICB9IGVsc2Uge1xuICAgICAgc2xpZGUuZG93bihlbClcbiAgICB9XG4gIH0sXG5cbiAgYmxvY2tzOiB7XG4gICAgbGVmdDogZnVuY3Rpb24gKG5vZGUsIGFjdGlvbnMpIHtcbiAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT17Y3goe1xuICAgICAgICAnbV9Db2xsYXBzZXInOiB0cnVlLFxuICAgICAgICAnbV9Db2xsYXBzZXItY29sbGFwc2VkJzogbm9kZS5jb2xsYXBzZWRcbiAgICAgIH0pfSBrZXk9XCJjb2xsYXBzZXJcIiBvbkNsaWNrPXthY3Rpb25zLnRvZ2dsZUNvbGxhcHNlLmJpbmQoYWN0aW9ucywgbm9kZS5pZCl9Lz5cbiAgICB9XG4gIH0sXG59XG5cbiIsIlxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFjdGlvbnM6IHtcbiAgICBjb2xsYXBzZTogZnVuY3Rpb24gKGlkKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIGlkID0gdGhpcy52aWV3LmFjdGl2ZVxuICAgICAgaWYgKGlkID09PSB0aGlzLnZpZXcucm9vdCkgcmV0dXJuXG4gICAgICBpZiAodGhpcy52aWV3Lm1vZGUgPT09ICd2aXN1YWwnICYmICFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBpZHMgPSB0aGlzLnZpZXcuc2VsZWN0aW9uLmZpbHRlcigoaWQpID0+IFxuICAgICAgICAgICEhdGhpcy5kYi5ub2Rlc1tpZF0uY2hpbGRyZW4ubGVuZ3RoKVxuICAgICAgICBpZiAoIWlkcy5sZW5ndGgpIHJldHVyblxuICAgICAgICByZXR1cm4gdGhpcy5zZXRNYW55KCdjb2xsYXBzZWQnLCBpZHMsIHRydWUpXG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMuZGIubm9kZXNbaWRdLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICB2YXIgcGlkID0gdGhpcy5kYi5ub2Rlc1tpZF0ucGFyZW50XG4gICAgICAgIGlmIChwaWQgIT09IHRoaXMudmlldy5yb290KSB7XG4gICAgICAgICAgdGhpcy5zZXQocGlkLCAnY29sbGFwc2VkJywgdHJ1ZSlcbiAgICAgICAgICB0aGlzLnNldEFjdGl2ZShpZClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHRoaXMuc2V0KGlkLCAnY29sbGFwc2VkJywgdHJ1ZSlcbiAgICAgIHRoaXMuc2V0QWN0aXZlKGlkKVxuICAgIH0sXG5cbiAgICBleHBhbmQ6IGZ1bmN0aW9uIChpZCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSBpZCA9IHRoaXMudmlldy5hY3RpdmVcbiAgICAgIGlmIChpZCA9PT0gdGhpcy52aWV3LnJvb3QpIHJldHVyblxuICAgICAgaWYgKHRoaXMudmlldy5tb2RlID09PSAndmlzdWFsJyAmJiAhYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICB2YXIgaWRzID0gdGhpcy52aWV3LnNlbGVjdGlvbi5maWx0ZXIoKGlkKSA9PiBcbiAgICAgICAgICAhIXRoaXMuZGIubm9kZXNbaWRdLmNoaWxkcmVuLmxlbmd0aClcbiAgICAgICAgaWYgKCFpZHMubGVuZ3RoKSByZXR1cm5cbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0TWFueSgnY29sbGFwc2VkJywgaWRzLCB0cnVlKVxuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLmRiLm5vZGVzW2lkXS5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICB0aGlzLnNldChpZCwgJ2NvbGxhcHNlZCcsIGZhbHNlKVxuICAgICAgdGhpcy5zZXRBY3RpdmUoaWQpXG4gICAgfSxcblxuICAgIGV4cGFuZFRvQW5kU2VsZWN0OiBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHZhciBub2RlID0gdGhpcy5kYi5ub2Rlc1tpZF1cbiAgICAgICAgLCByb290ID0gdGhpcy52aWV3LnJvb3RcbiAgICAgICAgLCBwYXJlbnQgPSBub2RlLnBhcmVudFxuICAgICAgICAsIGN1cnJlbnQgPSBwYXJlbnRcbiAgICAgICAgLCB0b09wZW4gPSBbXVxuICAgICAgaWYgKGlkICE9PSByb290KSB7XG4gICAgICAgIHdoaWxlIChjdXJyZW50ICE9PSByb290KSB7XG4gICAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmRiLm5vZGVzW2N1cnJlbnRdXG4gICAgICAgICAgaWYgKG5vZGUuY29sbGFwc2VkKSB0b09wZW4ucHVzaChjdXJyZW50KVxuICAgICAgICAgIGN1cnJlbnQgPSBub2RlLnBhcmVudFxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodG9PcGVuLmxlbmd0aCkgdGhpcy5zZXRNYW55KCdjb2xsYXBzZWQnLCB0b09wZW4sIGZhbHNlKVxuICAgICAgdGhpcy5zZXRBY3RpdmUoaWQpXG4gICAgfSxcblxuICAgIHRvZ2dsZUNvbGxhcHNlRGVlcDogZnVuY3Rpb24gKGlkKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIGlkID0gdGhpcy52aWV3LmFjdGl2ZVxuICAgICAgaWYgKHRoaXMudmlldy5tb2RlID09PSAndmlzdWFsJykge1xuICAgICAgICBpZHMgPSB0aGlzLnZpZXcuc2VsZWN0aW9uXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgbm9kZSA9IHRoaXMuZGIubm9kZXNbaWRdXG4gICAgICAgIGlmICghbm9kZS5jaGlsZHJlbi5sZW5ndGgpIHJldHVyblxuICAgICAgICBpZHMgPSBbaWRdXG4gICAgICB9XG4gICAgICB2YXIgYWxsUGFyZW50cyA9IChpZCkgPT4ge1xuICAgICAgICB2YXIgbm9kZSA9IHRoaXMuZGIubm9kZXNbaWRdXG4gICAgICAgIGlmICghbm9kZS5jaGlsZHJlbi5sZW5ndGgpIHJldHVybiBbXVxuICAgICAgICByZXR1cm4gW10uY29uY2F0LmFwcGx5KFtpZF0sIG5vZGUuY2hpbGRyZW4ubWFwKGFsbFBhcmVudHMpKVxuICAgICAgfVxuICAgICAgcGVkaWdyZWVzID0gaWRzLm1hcChhbGxQYXJlbnRzKVxuICAgICAgdmFyIGNvbW1hbmRzID0gcGVkaWdyZWVzLm1hcCgoaWRzKSA9PiB7XG4gICAgICAgIHJldHVybiBbJ3NldE1hbnknLCB7aWRzOiBpZHMsIGF0dHI6ICdjb2xsYXBzZWQnLCB2YWx1ZXM6ICF0aGlzLmRiLm5vZGVzW2lkc1swXV0uY29sbGFwc2VkfV1cbiAgICAgIH0pXG4gICAgICB0aGlzLmV4ZWN1dGVDb21tYW5kcy5hcHBseSh0aGlzLCBbXS5jb25jYXQuYXBwbHkoW10sIGNvbW1hbmRzKSlcbiAgICB9LFxuXG4gICAgdG9nZ2xlQ29sbGFwc2U6IGZ1bmN0aW9uIChpZCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSBpZCA9IHRoaXMudmlldy5hY3RpdmVcbiAgICAgIGlmIChpZCA9PT0gdGhpcy52aWV3LnJvb3QpIHJldHVyblxuICAgICAgaWYgKHRoaXMudmlldy5tb2RlID09PSAndmlzdWFsJyAmJiAhYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICB2YXIgaWRzID0gdGhpcy52aWV3LnNlbGVjdGlvbi5maWx0ZXIoKGlkKSA9PlxuICAgICAgICAgICEhdGhpcy5kYi5ub2Rlc1tpZF0uY2hpbGRyZW4ubGVuZ3RoKVxuICAgICAgICBpZiAoIWlkcy5sZW5ndGgpIHJldHVyblxuICAgICAgICByZXR1cm4gdGhpcy5zZXRNYW55KCdjb2xsYXBzZWQnLCBpZHMsIGlkcy5tYXAoaWQgPT4ge1xuICAgICAgICAgIHJldHVybiAhdGhpcy5kYi5ub2Rlc1tpZF0uY29sbGFwc2VkXG4gICAgICAgIH0pKVxuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLmRiLm5vZGVzW2lkXS5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgdmFyIHBpZCA9IHRoaXMuZGIubm9kZXNbaWRdLnBhcmVudFxuICAgICAgICBpZiAocGlkID09PSB0aGlzLnZpZXcucm9vdCkgcmV0dXJuXG4gICAgICAgIHRoaXMuc2V0QWN0aXZlKHBpZClcbiAgICAgICAgdGhpcy5zZXQocGlkLCAnY29sbGFwc2VkJywgdHJ1ZSlcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICB0aGlzLnNldChpZCwgJ2NvbGxhcHNlZCcsICF0aGlzLmRiLm5vZGVzW2lkXS5jb2xsYXBzZWQpXG4gICAgICB0aGlzLnNldEFjdGl2ZShpZClcbiAgICB9LFxuICB9LFxufVxuXG4iLCJcbm1vZHVsZS5leHBvcnRzID0gZ2V0U3JjXG5cbmZ1bmN0aW9uIGdldFNyYyhmaWxlLCBkb25lKSB7XG4gIGlmICghZmlsZSkgcmV0dXJuXG4gIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gIHJlYWRlci5vbmxvYWQgPSBlID0+IHtcbiAgICBkb25lKGUudGFyZ2V0LnJlc3VsdClcbiAgfVxuICByZWFkZXIub25lcnJvciA9IGUgPT4ge1xuICAgIGNvbnNvbGUubG9nKGUpXG4gIH1cbiAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSlcbn1cblxuIiwiXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdC9hZGRvbnMnKVxuICAsIGN4ID0gUmVhY3QuYWRkb25zLmNsYXNzU2V0XG4gICwgUFQgPSBSZWFjdC5Qcm9wVHlwZXNcbiAgLCBjbGFzc25hbWVzID0gcmVxdWlyZSgnY2xhc3NuYW1lcycpXG4gICwgRGVmYXVsdEVkaXRvciA9IHJlcXVpcmUoJy4uLy4uL3ZpZXdzL2JvZHkvZGVmYXVsdC1lZGl0b3InKVxuICAsIERlZmF1bHRSZW5kZXJlciA9IHJlcXVpcmUoJy4uLy4uL3ZpZXdzL2JvZHkvZGVmYXVsdC1yZW5kZXJlcicpXG4gICwgVXBsb2FkZXIgPSByZXF1aXJlKCcuL3VwbG9hZGVyJylcbiAgLCBnZXRTcmMgPSByZXF1aXJlKCcuL2dldC1zcmMnKVxuXG52YXIgSW1hZ2VCYXNlID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBwcm9wVHlwZToge1xuICAgIHRpdGxlOiBQVC5zdHJpbmcsXG4gICAgb25VcGxvYWQ6IFBULmZ1bmMsXG4gICAgb25DbGljazogUFQuZnVuYyxcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgcmV0dXJuIHtkcmFnZ2luZzogZmFsc2V9XG4gIH0sXG5cbiAgX2RyYWdPdmVyKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBpZiAoIXRoaXMuc3RhdGUuZHJhZ2dpbmcpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe2RyYWdnaW5nOiB0cnVlfSlcbiAgICB9XG4gIH0sXG5cbiAgX2RyYWdFbmQoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIHRoaXMuc2V0U3RhdGUoe2RyYWdnaW5nOiBmYWxzZX0pXG4gIH0sXG5cbiAgX2Ryb3AoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIHRoaXMuc2V0U3RhdGUoe2RyYWdnaW5nOiBmYWxzZX0pXG4gICAgbGV0IGZpbGVzID0gZS5kYXRhVHJhbnNmZXIuZmlsZXNcbiAgICBpZiAoIWZpbGVzLmxlbmd0aCkgcmV0dXJuXG4gICAgY29uc3QgZmlsZSA9IGZpbGVzWzBdXG4gICAgaWYgKCFmaWxlLnR5cGUubWF0Y2goL15pbWFnZVxcLy8pKSB7XG4gICAgICByZXR1cm4gY29uc29sZS53YXJuKCdub3QgYW4gaW1hZ2UgZmlsZScpXG4gICAgfVxuICAgIGdldFNyYyhmaWxlLCB0aGlzLnByb3BzLm9uVXBsb2FkKVxuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5wcm9wcy5zcmMpIHtcbiAgICAgIHJldHVybiA8ZGl2XG4gICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc25hbWVzKCdJbWFnZUJhc2UnLCB0aGlzLnN0YXRlLmRyYWdnaW5nICYmICdJbWFnZUJhc2UtZHJhZ2dpbmcnKX1cbiAgICAgICAgICBvbkNsaWNrPXt0aGlzLnByb3BzLm9uQ2xpY2t9IFxuICAgICAgICAgIG9uRHJhZ0VudGVyPXt0aGlzLl9kcmFnT3Zlcn1cbiAgICAgICAgICBvbkRyYWdPdmVyPXt0aGlzLl9kcmFnT3Zlcn1cbiAgICAgICAgICBvbkRyYWdMZWF2ZT17dGhpcy5fZHJhZ0VuZH1cbiAgICAgICAgICBvbkRyYWdFbmQ9e3RoaXMuX2RyYWdFbmR9XG4gICAgICAgICAgb25Ecm9wPXt0aGlzLl9kcm9wfT5cbiAgICAgICAgPFVwbG9hZGVyIG9uVXBsb2FkPXt0aGlzLnByb3BzLm9uVXBsb2FkfS8+XG4gICAgICA8L2Rpdj5cbiAgICB9XG4gICAgcmV0dXJuIDxkaXZcbiAgICAgICAgY2xhc3NOYW1lPXtjbGFzc25hbWVzKCdJbWFnZUJhc2UnLCB0aGlzLnN0YXRlLmRyYWdnaW5nICYmICdJbWFnZUJhc2UtZHJhZ2dpbmcnKX1cbiAgICAgICAgb25DbGljaz17dGhpcy5wcm9wcy5vbkNsaWNrfSBcbiAgICAgICAgb25EcmFnRW50ZXI9e3RoaXMuX2RyYWdPdmVyfVxuICAgICAgICBvbkRyYWdPdmVyPXt0aGlzLl9kcmFnT3Zlcn1cbiAgICAgICAgb25EcmFnTGVhdmU9e3RoaXMuX2RyYWdFbmR9XG4gICAgICAgIG9uRHJhZ0VuZD17dGhpcy5fZHJhZ0VuZH1cbiAgICAgICAgb25Ecm9wPXt0aGlzLl9kcm9wfT5cbiAgICAgIDxpbWcgc3JjPXt0aGlzLnByb3BzLnNyY30gdGl0bGU9e3RoaXMucHJvcHMudGl0bGV9Lz5cbiAgICAgIDxkaXYgb25DbGljaz17ZSA9PiB7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgICAgdGhpcy5wcm9wcy5vblVwbG9hZChudWxsKVxuICAgICAgfX0gY2xhc3NOYW1lPSdJbWFnZUJhc2VfY2xvc2UnPiZ0aW1lczs8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgfSxcbn0pXG5cbnZhciBJbWFnZVJlbmRlcmVyID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaW1nID0gPEltYWdlQmFzZVxuICAgICAgc3JjPXt0aGlzLnByb3BzLnNyY31cbiAgICAgIHRpdGxlPXt0aGlzLnByb3BzLnRpdGxlfVxuICAgICAgb25DbGljaz17dGhpcy5wcm9wcy5vbkNsaWNrfVxuICAgICAgb25VcGxvYWQ9e3RoaXMucHJvcHMuc2V0U3JjfS8+XG4gICAgaWYgKHRoaXMucHJvcHMudGl0bGUgJiYgdGhpcy5wcm9wcy50aXRsZS50cmltKCkpIHtcbiAgICAgIHJldHVybiA8ZGl2PlxuICAgICAgICB7aW1nfVxuICAgICAgICA8RGVmYXVsdFJlbmRlcmVyIG9uQ2xpY2s9e3RoaXMucHJvcHMub25DbGlja30gY29udGVudD17dGhpcy5wcm9wcy50aXRsZX0vPlxuICAgICAgPC9kaXY+XG4gICAgfVxuICAgIHJldHVybiBpbWdcbiAgfSxcbn0pXG5cbnZhciBJbWFnZUVkaXRvciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblxuICBmb2N1czogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnJlZnMudGV4dC5mb2N1cy5hcHBseShudWxsLCBhcmd1bWVudHMpXG4gIH0sXG4gIGlzRm9jdXNlZDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnJlZnMudGV4dC5pc0ZvY3VzZWQuYXBwbHkobnVsbCwgYXJndW1lbnRzKVxuICB9LFxuXG4gIF9vblBhc3RlOiBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBmaWxlID0gZS5jbGlwYm9hcmREYXRhLml0ZW1zWzBdLmdldEFzRmlsZSgpXG4gICAgaWYgKCFmaWxlKSByZXR1cm5cbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBnZXRTcmMoZmlsZSwgdGhpcy5wcm9wcy5zZXRTcmMpXG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcy5lZGl0UHJvcHNcbiAgICBwcm9wcy5vblBhc3RlID0gdGhpcy5fb25QYXN0ZVxuXG4gICAgcmV0dXJuIDxkaXY+XG4gICAgICA8SW1hZ2VCYXNlIHNyYz17dGhpcy5wcm9wcy5zcmN9IHRpdGxlPXt0aGlzLnByb3BzLnRpdGxlfSBvblVwbG9hZD17dGhpcy5wcm9wcy5zZXRTcmN9Lz5cbiAgICAgIHtSZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRFZGl0b3IsIHByb3BzKX1cbiAgICA8L2Rpdj5cbiAgfSxcbn0pXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB0aXRsZTogJ0ltYWdlIE5vZGUnLFxuXG4gIHR5cGVzOiB7XG4gICAgaW1hZ2U6IHtcbiAgICAgIHRpdGxlOiAnSW1hZ2UnLFxuICAgICAgc2hvcnRjdXQ6ICdpJyxcbiAgICB9XG4gIH0sXG5cbiAgY29udGV4dE1lbnU6IGZ1bmN0aW9uIChub2RlLCBzdG9yZSkge1xuICAgIGlmIChub2RlLmltYWdlU3JjKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0aXRsZTogJ1JlbW92ZSBpbWFnZScsXG4gICAgICAgIGFjdGlvbjogJ3JlbW92ZUltYWdlJyxcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgc3RvcmU6IHtcbiAgICBhY3Rpb25zOiB7XG4gICAgICAncmVtb3ZlSW1hZ2UnOiBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgaWYgKCFpZCkgaWQgPSB0aGlzLnZpZXcuYWN0aXZlXG4gICAgICAgIHRoaXMuc2V0KGlkLCAnaW1hZ2VTcmMnLCBudWxsKVxuICAgICAgfSxcbiAgICB9LFxuICB9LFxuXG4gIG5vZGU6IHtcbiAgICBib2RpZXM6IHtcbiAgICAgIGltYWdlOiB7XG4gICAgICAgIHJlbmRlcmVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGNsaWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuZWRpdFN0YXRlKSByZXR1cm5cbiAgICAgICAgICAgIHRoaXMucHJvcHMuYWN0aW9ucy5lZGl0KHRoaXMucHJvcHMubm9kZS5pZClcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHNldFNyYyA9IHRoaXMucHJvcHMuc3RvcmUuYWN0aW9ucy5zZXQuYmluZCh0aGlzLnByb3BzLnN0b3JlLmFjdGlvbnMsIHRoaXMucHJvcHMubm9kZS5pZCwgJ2ltYWdlU3JjJylcbiAgICAgICAgICByZXR1cm4gPEltYWdlUmVuZGVyZXJcbiAgICAgICAgICAgIG9uQ2xpY2s9e2NsaWNrfVxuICAgICAgICAgICAgc2V0U3JjPXtzZXRTcmN9IFxuICAgICAgICAgICAgc3JjPXt0aGlzLnByb3BzLm5vZGUuaW1hZ2VTcmN9XG4gICAgICAgICAgICB0aXRsZT17dGhpcy5wcm9wcy5ub2RlLmNvbnRlbnR9Lz5cbiAgICAgICAgfSxcblxuICAgICAgICBlZGl0b3I6IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICAgIHZhciBzZXRTcmMgPSBwcm9wcy5zdG9yZS5hY3Rpb25zLnNldC5iaW5kKHByb3BzLnN0b3JlLmFjdGlvbnMsIHByb3BzLm5vZGUuaWQsICdpbWFnZVNyYycpXG4gICAgICAgICAgcmV0dXJuIDxJbWFnZUVkaXRvclxuICAgICAgICAgICAgZWRpdFByb3BzPXtwcm9wc31cbiAgICAgICAgICAgIHNldFNyYz17c2V0U3JjfVxuICAgICAgICAgICAgcmVmPXtwcm9wcy5yZWZ9XG4gICAgICAgICAgICBzcmM9e3Byb3BzLm5vZGUuaW1hZ2VTcmN9XG4gICAgICAgICAgICB0aXRsZT17cHJvcHMubm9kZS5jb250ZW50fS8+XG4gICAgICAgIH0sXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbiIsIlxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QvYWRkb25zJylcbiAgLCBjeCA9IFJlYWN0LmFkZG9ucy5jbGFzc1NldFxuICAsIFBUID0gUmVhY3QuUHJvcFR5cGVzXG4gICwgY2xhc3NuYW1lcyA9IHJlcXVpcmUoJ2NsYXNzbmFtZXMnKVxuICAsIGdldFNyYyA9IHJlcXVpcmUoJy4vZ2V0LXNyYycpXG5cbnZhciBVcGxvYWRlciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgcHJvcFR5cGVzOiB7XG4gICAgb25VcGxvYWQ6IFBULmZ1bmMsXG4gIH0sXG5cbiAgX29uQ2xpY2s6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnJlZnMuZmlsZS5nZXRET01Ob2RlKCkuY2xpY2soKVxuICB9LFxuXG4gIF9vbkNoYW5nZTogZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgZmlsZXMgPSBlLnRhcmdldC5maWxlc1xuICAgIGlmICghZmlsZXMgfHwgIWZpbGVzLmxlbmd0aCkgcmV0dXJuXG4gICAgZ2V0U3JjKGZpbGVzWzBdLCB0aGlzLnByb3BzLm9uVXBsb2FkKVxuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT0nVXBsb2FkZXInPlxuICAgICAgPGgzIG9uQ2xpY2s9e3RoaXMuX29uQ2xpY2t9PkNsaWNrIHRvIHVwbG9hZCBhbiBpbWFnZTwvaDM+XG4gICAgICA8aW5wdXQgdHlwZT1cImZpbGVcIiByZWY9XCJmaWxlXCIgb25DaGFuZ2U9e3RoaXMuX29uQ2hhbmdlfSBzdHlsZT17e2Rpc3BsYXk6ICdub25lJ319Lz5cbiAgICA8L2Rpdj5cbiAgfSxcbn0pXG5cbm1vZHVsZS5leHBvcnRzID0gVXBsb2FkZXJcbiIsIlxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHRpdGxlOiAnTGlzdCBJdGVtIE5vZGVzJyxcblxuICB0eXBlczoge1xuICAgIGxpc3Q6IHtcbiAgICAgIHNob3J0Y3V0OiAnbCcsXG4gICAgICB0aXRsZTogJ0xpc3QnLFxuICAgIH0sXG4gICAgb3JkZXJlZF9saXN0OiB7XG4gICAgICBzaG9ydGN1dDogJ28nLFxuICAgICAgdGl0bGU6ICdPcmRlcmVkIExpc3QnLFxuICAgIH0sXG4gIH0sXG59XG5cbiIsIlxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QvYWRkb25zJylcbnZhciBjeCA9IFJlYWN0LmFkZG9ucy5jbGFzc1NldFxudmFyIFBUID0gUmVhY3QuUHJvcFR5cGVzXG5cbnZhciBCcmVhZGNydW1iID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBwcm9wVHlwZXM6IHtcbiAgICByZWJhc2U6IFBULmZ1bmMsXG4gICAgcmVsb2FkOiBQVC5mdW5jLFxuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwZWRpZ3JlZTogdGhpcy5wcm9wcy5yZWxvYWQoKVxuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMucHJvcHMuc3RvcmUub24oW3RoaXMucHJvcHMuc3RvcmUuZXZlbnRzLnJvb3RDaGFuZ2VkKCldLCB0aGlzLl9yZWxvYWQpXG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnByb3BzLnN0b3JlLm9mZihbdGhpcy5wcm9wcy5zdG9yZS5ldmVudHMucm9vdENoYW5nZWQoKV0sIHRoaXMuX3JlbG9hZClcbiAgfSxcblxuICBfcmVsb2FkOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7cGVkaWdyZWU6IHRoaXMucHJvcHMucmVsb2FkKCl9KVxuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiA8dWwgY2xhc3NOYW1lPSdCcmVhZGNydW1iJz5cbiAgICAgIHt0aGlzLnN0YXRlLnBlZGlncmVlLm1hcChpdGVtID0+XG4gICAgICAgIDxsaSBrZXk9e2l0ZW0uaWR9IG9uQ2xpY2s9e3RoaXMucHJvcHMucmViYXNlLmJpbmQobnVsbCwgaXRlbS5pZCl9IGNsYXNzTmFtZT1cIkJyZWFkY3J1bWJfaXRlbVwiPlxuICAgICAgICAgIHtpdGVtLmNvbnRlbnQuc2xpY2UoMCwgMjUpfVxuICAgICAgICA8L2xpPlxuICAgICAgKX1cbiAgICA8L3VsPlxuICB9XG59KVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJyZWFkY3J1bWJcblxuIiwiXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5cbnZhciBCcmVhZGNydW1iID0gcmVxdWlyZSgnLi9icmVhZGNydW1iJylcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHRpdGxlOiAnWm9vbSBJbi9PdXQnLFxuXG4gIHN0b3JlOiByZXF1aXJlKCcuL3N0b3JlJyksXG4gIG5vZGU6IHJlcXVpcmUoJy4vbm9kZScpLFxuICBrZXlzOiByZXF1aXJlKCcuL2tleXMnKSxcblxuICB2aWV3OiB7XG4gICAgc3RhdHVzYmFyOiBmdW5jdGlvbiAoc3RvcmUpIHtcbiAgICAgIHZhciBhY3Rpb25zID0gc3RvcmUuYWN0aW9uc1xuICAgICAgcmV0dXJuIDxCcmVhZGNydW1iXG4gICAgICAgIGtleT1cInJlYmFzZS1icmVhZGNydW1iXCJcbiAgICAgICAgcmViYXNlPXthY3Rpb25zLnJlYmFzZS5iaW5kKGFjdGlvbnMpfVxuICAgICAgICByZWxvYWQ9e3N0b3JlLmdldHRlcnMuZ2V0UGVkaWdyZWUuYmluZChzdG9yZS5nZXR0ZXJzLCB0cnVlKX1cbiAgICAgICAgc3RvcmU9e3N0b3JlfVxuICAgICAgLz5cbiAgICB9LFxuXG4gICAgYmxvY2tzOiB7XG4gICAgICB0b3A6IGZ1bmN0aW9uIChhY3Rpb25zLCBzdGF0ZSwgc3RvcmUpIHtcbiAgICAgICAgcmV0dXJuIDxCcmVhZGNydW1iXG4gICAgICAgICAga2V5PVwicmViYXNlLWJyZWFkY3J1bWJcIlxuICAgICAgICAgIHJlYmFzZT17YWN0aW9ucy5yZWJhc2UuYmluZChhY3Rpb25zKX1cbiAgICAgICAgICByZWxvYWQ9e3N0b3JlLmdldHRlcnMuZ2V0UGVkaWdyZWUuYmluZChzdG9yZS5nZXR0ZXJzLCB0cnVlKX1cbiAgICAgICAgICBzdG9yZT17c3RvcmV9XG4gICAgICAgIC8+XG4gICAgICB9LFxuICAgIH0sXG4gIH0sXG59XG5cbiIsIlxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICdyZWJhc2UnOiB7XG4gICAgdGl0bGU6ICd6b29tIGluIHRvIGFjdGl2ZSBub2RlJyxcbiAgICBkZXNjcmlwdGlvbjogJ3pvb20gdG8gdGhlIGFjdGl2ZSBub2RlJyxcbiAgICBub3JtYWw6ICdnIGQnLFxuICB9LFxuICAncmViYXNlIHVwJzoge1xuICAgIHRpdGxlOiAnem9vbSBvdXQgb25lIGxldmVsJyxcbiAgICBkZXNjcmlwdGlvbjogXCJ6b29tIHRvIHRoZSBjdXJyZW50IHJvb3QncyBwYXJlbnRcIixcbiAgICBub3JtYWw6ICdnIHUnLFxuICB9LFxuICAncmViYXNlIHJvb3QnOiB7XG4gICAgdGl0bGU6ICd6b29tIG91dCB0byBkb2N1bWVudCByb290JyxcbiAgICBkZXNjcmlwdGlvbjogJ3pvb20gdG8gdGhlIGRvY3VtZW50IHJvb3QnLFxuICAgIG5vcm1hbDogJ2cgcicsXG4gIH0sXG59XG5cbiIsIlxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QvYWRkb25zJylcbnZhciBjeCA9IFJlYWN0LmFkZG9ucy5jbGFzc1NldFxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYmxvY2tzOiB7XG4gICAgYWJvdmVib2R5OiBmdW5jdGlvbiAobm9kZSwgYWN0aW9ucywgc3RhdGUpIHtcbiAgICAgIC8vIFRPRE86IG1vdmVtZW50XG4gICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9e2N4KHtcbiAgICAgICAgJ21fUmViYXNlRG90JzogdHJ1ZSxcbiAgICAgICAgJ21fUmViYXNlRG90LWZ1bGwnOiBub2RlLmNvbGxhcHNlZCAmJiBub2RlLmNoaWxkcmVuLmxlbmd0aCxcbiAgICAgIH0pfVxuICAgICAga2V5PSdyZWJhc2UnXG4gICAgICBvbkNsaWNrPXthY3Rpb25zLnJlYmFzZS5iaW5kKGFjdGlvbnMsIG5vZGUuaWQpfS8+XG4gICAgfVxuICB9XG59XG5cbiIsIlxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFjdGlvbnM6IHtcbiAgICByZWJhc2U6IGZ1bmN0aW9uIChpZCkge1xuICAgICAgaWQgPSBpZCB8fCB0aGlzLnZpZXcuYWN0aXZlXG4gICAgICB0aGlzLnZpZXcucm9vdCA9IGlkXG4gICAgICB0aGlzLnNldEFjdGl2ZSh0aGlzLnZpZXcucm9vdClcbiAgICAgIHRoaXMuY2hhbmdlZCh0aGlzLmV2ZW50cy5yb290Q2hhbmdlZCgpKVxuICAgIH0sXG4gICAgcmViYXNlVXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0aGlzLnZpZXcucm9vdCA9PT0gdGhpcy5kYi5yb290KSByZXR1cm5cbiAgICAgIHRoaXMuc2V0QWN0aXZlKHRoaXMudmlldy5yb290KVxuICAgICAgdGhpcy52aWV3LnJvb3QgPSB0aGlzLmRiLm5vZGVzW3RoaXMudmlldy5yb290XS5wYXJlbnRcbiAgICAgIHRoaXMuY2hhbmdlZCh0aGlzLmV2ZW50cy5yb290Q2hhbmdlZCgpKVxuICAgIH0sXG4gICAgcmViYXNlUm9vdDogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHRoaXMudmlldy5yb290ID09PSB0aGlzLmRiLnJvb3QpIHJldHVyblxuICAgICAgdGhpcy5zZXRBY3RpdmUodGhpcy5kYi5yb290KVxuICAgICAgdGhpcy52aWV3LnJvb3QgPSB0aGlzLmRiLnJvb3RcbiAgICAgIHRoaXMuY2hhbmdlZCh0aGlzLmV2ZW50cy5yb290Q2hhbmdlZCgpKVxuICAgIH0sXG4gIH0sXG5cbiAgZ2V0dGVyczoge1xuICAgIGdldFBlZGlncmVlOiBmdW5jdGlvbiAobGFzdCkge1xuICAgICAgdmFyIGl0ZW1zID0gW11cbiAgICAgIHZhciBub2RlID0gdGhpcy5kYi5ub2Rlc1t0aGlzLnZpZXcucm9vdF1cbiAgICAgIGlmICghbGFzdCkge1xuICAgICAgICBub2RlID0gdGhpcy5kYi5ub2Rlc1tub2RlLnBhcmVudF1cbiAgICAgIH1cbiAgICAgIHdoaWxlIChub2RlKSB7XG4gICAgICAgIGl0ZW1zLnVuc2hpZnQoe1xuICAgICAgICAgIGlkOiBub2RlLmlkLFxuICAgICAgICAgIGNvbnRlbnQ6IG5vZGUuY29udGVudFxuICAgICAgICB9KVxuICAgICAgICBub2RlID0gdGhpcy5kYi5ub2Rlc1tub2RlLnBhcmVudF1cbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVtc1xuICAgIH0sXG4gIH0sXG59XG5cbiIsIlxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QvYWRkb25zJylcbnZhciBjeCA9IFJlYWN0LmFkZG9ucy5jbGFzc1NldFxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgdGl0bGU6ICdUby1EbyBJdGVtcycsXG5cbiAgdHlwZXM6IHtcbiAgICB0b2RvOiB7XG4gICAgICBzaG9ydGN1dDogJ3QnLFxuICAgICAgdGl0bGU6ICdUb2RvJyxcbiAgICAgIGRlc2NyaXB0aW9uOiAnQSB0by1kbyBpdGVtJyxcbiAgICB9LFxuICB9LFxuXG4gIGtleXM6IHtcbiAgICAndG9nZ2xlIHRvZG8gZG9uZSc6IHtcbiAgICAgIHR5cGU6ICd0b2RvJyxcbiAgICAgIG5vcm1hbDogJ2FsdCtlbnRlcicsXG4gICAgICBpbnNlcnQ6ICdhbHQrZW50ZXInLFxuICAgICAgdmlzdWFsOiAnYWx0K2VudGVyJyxcbiAgICB9LFxuICB9LFxuXG4gIHN0b3JlOiB7XG4gICAgYWN0aW9uczoge1xuICAgICAgdG9nZ2xlVG9kb0RvbmU6IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIGlkID0gdGhpcy52aWV3LmFjdGl2ZVxuICAgICAgICBpZiAodGhpcy5kYi5ub2Rlc1tpZF0udHlwZSAhPT0gJ3RvZG8nKSByZXR1cm5cbiAgICAgICAgaWYgKHRoaXMudmlldy5tb2RlID09PSAndmlzdWFsJykge1xuICAgICAgICAgIHRoaXMuc2V0TWFueSgnZG9uZScsIHRoaXMudmlldy5zZWxlY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmlldy5zZWxlY3Rpb24ubWFwKChpZCkgPT4gIXRoaXMuZGIubm9kZXNbaWRdLmRvbmUpKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuc2V0KGlkLCAnZG9uZScsICF0aGlzLmRiLm5vZGVzW2lkXS5kb25lKVxuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0sXG4gIH0sXG5cbiAgbm9kZToge1xuICAgIGNsYXNzZXM6IGZ1bmN0aW9uIChub2RlLCBzdGF0ZSkge1xuICAgICAgaWYgKG5vZGUudHlwZSAhPT0gJ3RvZG8nKSByZXR1cm5cbiAgICAgIHJldHVybiBub2RlLmRvbmUgPyAnbl9Eb25lJyA6ICcnXG4gICAgfSxcblxuICAgIGJsb2Nrczoge1xuICAgICAgYWJvdmVib2R5OiBmdW5jdGlvbiAobm9kZSwgYWN0aW9ucykge1xuICAgICAgICBpZiAobm9kZS50eXBlICE9PSAndG9kbycpIHJldHVyblxuICAgICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9e2N4KHtcbiAgICAgICAgICAnbV9Ub2RvJzogdHJ1ZSxcbiAgICAgICAgICAnbV9Ub2RvLWRvbmUnOiBub2RlLmRvbmUsXG4gICAgICAgIH0pfSBrZXk9XCJ0b2RvXCIgb25DbGljaz17YWN0aW9ucy50b2dnbGVUb2RvRG9uZS5iaW5kKGFjdGlvbnMsIG5vZGUuaWQpfS8+XG4gICAgICB9XG4gICAgfSxcbiAgfSxcbn1cblxuIiwiXG5mdW5jdGlvbiBjbG9uZShvYmopIHtcbiAgdmFyIGEgPSB7fVxuICBmb3IgKHZhciBuYW1lIGluIG9iaikge1xuICAgIGFbbmFtZV0gPSBvYmpbbmFtZV1cbiAgfVxuICByZXR1cm4gYVxufVxuXG5mdW5jdGlvbiBjYXAodGV4dCkge1xuICByZXR1cm4gdGV4dFswXS50b1VwcGVyQ2FzZSgpICsgdGV4dC5zbGljZSgxKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgdGl0bGU6ICdTZXQgdHlwZSB0bycsXG5cbiAga2V5czogZnVuY3Rpb24gKHBsdWdpbnMpIHtcbiAgICB2YXIga2V5cyA9IHt9XG4gICAgcGx1Z2lucy5mb3JFYWNoKChwbHVnaW4pID0+IHtcbiAgICAgIGlmICghcGx1Z2luLnR5cGVzKSByZXR1cm5cbiAgICAgIGZvciAodmFyIG5hbWUgaW4gcGx1Z2luLnR5cGVzKSB7XG4gICAgICAgIHZhciBzaCA9IHBsdWdpbi50eXBlc1tuYW1lXS5zaG9ydGN1dCB8fCBwbHVnaW4udHlwZXNbbmFtZV1cbiAgICAgICAga2V5c1sndHlwZSAnICsgbmFtZV0gPSB7XG4gICAgICAgICAgdGl0bGU6IHBsdWdpbi50eXBlc1tuYW1lXS50aXRsZSB8fCBuYW1lLFxuICAgICAgICAgICd2aXN1YWwnOiAndCAnICsgc2ggKyAnLCBhbHQrdCAnICsgc2gsXG4gICAgICAgICAgJ25vcm1hbCc6ICd0ICcgKyBzaCArICcsIGFsdCt0ICcgKyBzaCxcbiAgICAgICAgICAnaW5zZXJ0JzogJ2FsdCt0ICcgKyBzaCxcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIGtleXNcbiAgfSxcblxuICBjb250ZXh0TWVudTogZnVuY3Rpb24gKG5vZGUsIHN0b3JlKSB7XG4gICAgaWYgKCFub2RlKSByZXR1cm5cbiAgICB2YXIgaXRlbXMgPSBbXVxuICAgICAgLCBwbHVnaW5zID0gc3RvcmUucGFyZW50LmFsbFBsdWdpbnNcbiAgICBwbHVnaW5zLmZvckVhY2goKHBsdWdpbikgPT4ge1xuICAgICAgaWYgKCFwbHVnaW4udHlwZXMpIHJldHVyblxuICAgICAgZm9yICh2YXIgbmFtZSBpbiBwbHVnaW4udHlwZXMpIHtcbiAgICAgICAgdmFyIHR5cGUgPSBwbHVnaW4udHlwZXNbbmFtZV1cbiAgICAgICAgdmFyIHNoID0gdHlwZS5zaG9ydGN1dCB8fCB0eXBlXG4gICAgICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICAgIHRpdGxlOiAodHlwZS50aXRsZSB8fCBuYW1lKSxcbiAgICAgICAgICBzaG9ydGN1dDogJ3QgJyArIHNoLFxuICAgICAgICAgIGljb246IHR5cGUuaWNvbixcbiAgICAgICAgICBhY3Rpb246ICd0eXBlJyArIGNhcChuYW1lKSxcbiAgICAgICAgICBkaXNhYmxlZDogbmFtZSA9PT0gbm9kZS50eXBlLFxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIHtcbiAgICAgIHRpdGxlOiAnU2V0IHR5cGUnLFxuICAgICAgY2hpbGRyZW46IGl0ZW1zLFxuICAgIH1cbiAgfSxcblxuICB0eXBlczoge1xuICAgIGJhc2U6IHtcbiAgICAgIHNob3J0Y3V0OiAnbicsXG4gICAgICB0aXRsZTogJ05vcm1hbCcsXG4gICAgfVxuICB9LFxuXG4gIHN0b3JlOiB7XG4gICAgYWN0aW9uczogZnVuY3Rpb24gKHBsdWdpbnMpIHtcbiAgICAgIHZhciBhY3Rpb25zID0ge1xuICAgICAgICBjaGFuZ2VUeXBlOiBmdW5jdGlvbiAoaWQsIHR5cGUsIHVwZGF0ZSkge1xuICAgICAgICAgIHZhciBpZHNcbiAgICAgICAgICBpZiAoIWlkKSB7XG4gICAgICAgICAgICBpZHMgPSB0aGlzLnZpZXcubW9kZSA9PT0gJ3Zpc3VhbCcgPyB0aGlzLnZpZXcuc2VsZWN0aW9uIDogW3RoaXMudmlldy5hY3RpdmVdXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlkcyA9IFtpZF1cbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHJlZm9jdXNcbiAgICAgICAgICBpZiAodGhpcy52aWV3Lm1vZGUgPT09ICdpbnNlcnQnKSB7XG4gICAgICAgICAgICByZWZvY3VzID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudFxuICAgICAgICAgICAgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ibHVyKClcbiAgICAgICAgICB9XG4gICAgICAgICAgdXBkYXRlLnR5cGUgPSB0eXBlXG4gICAgICAgICAgaWYgKGlkcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZU1hbnkoaWRzLCBpZHMubWFwKCgpID0+IGNsb25lKHVwZGF0ZSkpKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZShpZHNbMF0sIGNsb25lKHVwZGF0ZSkpXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZWZvY3VzKSB7XG4gICAgICAgICAgICByZWZvY3VzLmZvY3VzKClcbiAgICAgICAgICAgIHRoaXMuc2V0TW9kZSgnaW5zZXJ0JylcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICB9XG5cbiAgICAgIHBsdWdpbnMuZm9yRWFjaCgocGx1Z2luKSA9PiB7XG4gICAgICAgIGlmICghcGx1Z2luLnR5cGVzKSByZXR1cm5cbiAgICAgICAgT2JqZWN0LmtleXMocGx1Z2luLnR5cGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgdmFyIGRlZm4gPSBwbHVnaW4udHlwZXNbbmFtZV1cbiAgICAgICAgICBhY3Rpb25zWyd0eXBlJyArIGNhcChuYW1lKV0gPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgICAgIHZhciB1cGRhdGUgPSB7fVxuICAgICAgICAgICAgaWYgKGRlZm4udXBkYXRlKSB7XG4gICAgICAgICAgICAgIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZGVmbi51cGRhdGUpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGUgPSBkZWZuLnVwZGF0ZSgpXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlID0gZGVmbi51cGRhdGVcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jaGFuZ2VUeXBlKGlkLCBuYW1lLCB1cGRhdGUpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICAgIHJldHVybiBhY3Rpb25zXG4gICAgfSxcbiAgfSxcbn1cblxuIiwiXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgdGl0bGU6ICdVbmRvL1JlZG8nLFxuXG4gIGtleXM6IHtcbiAgICAndW5kbyc6IHtcbiAgICAgIG5vcm1hbDogJ3UsIGN0cmwreicsXG4gICAgICAvLyBpbnNlcnQ6ICdjdHJsK3onLFxuICAgICAgdmlzdWFsOiAndSwgY3RybCt6JyxcbiAgICB9LFxuICAgICdyZWRvJzoge1xuICAgICAgbm9ybWFsOiAnc2hpZnQrciwgY3RybCtzaGlmdCt6JyxcbiAgICAgIC8vIGluc2VydDogJ2N0cmwrc2hpZnQreicsXG4gICAgICB2aXN1YWw6ICdzaGlmdCtyLCBjdHJsK3NoaWZ0K3onLFxuICAgIH0sXG4gIH0sXG5cbiAgc3RvcmU6IHtcbiAgICBhY3Rpb25zOiB7XG4gICAgICB1bmRvOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucGFyZW50LmNtZC51bmRvQ29tbWFuZHMoKVxuICAgICAgfSxcbiAgICAgIHJlZG86IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQuY21kLnJlZG9Db21tYW5kcygpXG4gICAgICB9LFxuICAgIH0sXG4gIH1cbn1cblxuIiwiXG4vKipcbiAqIFRoZSBkZWZhdWx0IGFjdGlvbnMhIEJhc2ljYWxseSBhbGwgbW92ZW1lbnQsIGdlbmVyYWwgbWFuaXB1bGF0aW9uLFxuICogaW1wb3J0L2V4cG9ydC4gQWN0aW9ucyBhcmUgZ2l2ZW4gaW4gdGhlIGNvbnRleHQgb2YgYSB2aWV3LlxuICpcbiAqIFBsdWdpbnMgY2FuIGRlZmluZSBhZGRpdGlvbmFsIGFjdGlvbnMuXG4gKlxuICogVGhlc2UgZnVuY3Rpb25zIG5lZWQgYWNjZXNzIHRvOlxuICogLSBub2Rlc1xuICogLSBhY3Rpb25zXG4gKiAtIGNoYW5nZWQoKVxuICogLSBldmVudHMue31cbiAqIC0gdmlldyBvYmplY3RcbiAqL1xuLy8gVE9ETyBtYXliZSBzcGxpdCB0aGlzIGludG8gc2VwYXJhdGUgZ3JvdXBzPyBUaGF0IGNvdWxkIGJlIGdvb2QuXG5cbnZhciBDb250ZXh0TWVudSA9IHJlcXVpcmUoJy4uL2xpYi9jb250ZXh0LW1lbnUnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBmdW5jdGlvbiAoaWQsIGF0dHIsIHZhbHVlLCBzcXVhc2gpIHtcbiAgICByZXR1cm4gdGhpcy5leGVjdXRlQ29tbWFuZCgnc2V0Jywge2lkLCBhdHRyLCB2YWx1ZX0sIHNxdWFzaClcbiAgfSxcblxuICB1cGRhdGVNYW55OiBmdW5jdGlvbiAoaWRzLCB1cGRhdGVzLCBzcXVhc2gpIHtcbiAgICByZXR1cm4gdGhpcy5leGVjdXRlQ29tbWFuZCgndXBkYXRlTWFueScsIHtpZHMsIHVwZGF0ZXN9LCBzcXVhc2gpXG4gIH0sXG5cbiAgdXBkYXRlOiBmdW5jdGlvbiAoaWQsIHVwZGF0ZSwgc3F1YXNoKSB7XG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZUNvbW1hbmQoJ3VwZGF0ZScsIHtpZCwgdXBkYXRlfSwgc3F1YXNoKVxuICB9LFxuXG4gIGltcG9ydFRyZWVzOiBmdW5jdGlvbiAoaWQsIHRyZWVzLCBhYm92ZSkge1xuICAgIGlkID0gaWQgfHwgdGhpcy52aWV3LmFjdGl2ZVxuICAgIGlmIChhYm92ZSAmJiBpZCA9PT0gdGhpcy5yb290KSByZXR1cm5cbiAgICB2YXIgbm9kZSA9IHRoaXMuZGIubm9kZXNbaWRdXG4gICAgICAsIHBpZFxuICAgICAgLCBpeFxuICAgIGlmIChhYm92ZSkge1xuICAgICAgcGlkID0gbm9kZS5wYXJlbnRcbiAgICAgIGl4ID0gdGhpcy5kYi5ub2Rlc1twaWRdLmNoaWxkcmVuLmluZGV4T2YoaWQpXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICgobm9kZS5jaGlsZHJlbi5sZW5ndGggJiYgIW5vZGUuY29sbGFwc2VkKSB8fCBpZCA9PT0gdGhpcy52aWV3LnJvb3QpIHtcbiAgICAgICAgcGlkID0gaWRcbiAgICAgICAgaXggPSAwXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwaWQgPSBub2RlLnBhcmVudFxuICAgICAgICBpeCA9IHRoaXMuZGIubm9kZXNbcGlkXS5jaGlsZHJlbi5pbmRleE9mKGlkKSArIDFcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5leGVjdXRlQ29tbWFuZCgnaW1wb3J0VHJlZXMnLCB7XG4gICAgICBwaWQ6IHBpZCxcbiAgICAgIGluZGV4OiBpeCxcbiAgICAgIGRhdGE6IHRyZWVzLFxuICAgIH0sIChlcnIsIGNTdGF0ZSkgPT4ge1xuICAgICAgaWYgKGNTdGF0ZS5jcmVhdGVkLmlkcy5sZW5ndGggPiAxKSB7XG4gICAgICAgIHRoaXMuc2V0TW9kZSgndmlzdWFsJylcbiAgICAgICAgdGhpcy5zZXRTZWxlY3Rpb24oY1N0YXRlLmNyZWF0ZWQuaWRzKVxuICAgICAgfVxuICAgICAgdGhpcy5zZXRBY3RpdmUoY1N0YXRlLmNyZWF0ZWQuaWRzWzBdKVxuICAgIH0pXG4gIH0sXG5cbiAgc2V0TWFueTogZnVuY3Rpb24gKGF0dHIsIGlkcywgdmFsdWVzKSB7XG4gICAgdGhpcy5leGVjdXRlQ29tbWFuZCgnc2V0TWFueScsIHtpZHM6IGlkcywgYXR0cjogYXR0ciwgdmFsdWVzOiB2YWx1ZXN9KVxuICB9LFxuXG4gIHNldENvbnRlbnQ6IGZ1bmN0aW9uIChpZCwgdmFsdWUpIHtcbiAgICB0aGlzLnNldChpZCwgJ2NvbnRlbnQnLCB2YWx1ZSlcbiAgfSxcblxuICBzZXRBY3RpdmVWaWV3OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMudmlldy5pZCAhPT0gdGhpcy5wYXJlbnQuYWN0aXZlVmlldykge1xuICAgICAgY29uc29sZS5sb2coJ2NoYW5naW5nIGFjdGl2ZSB2aWV3JywgdGhpcy52aWV3LmlkKVxuICAgICAgdGhpcy5wYXJlbnQuYWN0aXZlVmlldyA9IHRoaXMudmlldy5pZFxuICAgICAgdGhpcy5jaGFuZ2VkKHRoaXMuZXZlbnRzLmFjdGl2ZVZpZXdDaGFuZ2VkKCkpXG4gICAgfVxuICB9LFxuXG4gIHNldEFjdGl2ZTogZnVuY3Rpb24gKGlkKSB7XG4gICAgaWYgKCFpZCB8fCAhdGhpcy5kYi5ub2Rlc1tpZF0pIHJldHVyblxuICAgIHZhciBvbGQgPSB0aGlzLnZpZXcuYWN0aXZlXG4gICAgdGhpcy5zZXRBY3RpdmVWaWV3KClcbiAgICBpZiAoaWQgPT09IHRoaXMudmlldy5hY3RpdmUpIHJldHVyblxuICAgIHRoaXMudmlldy5hY3RpdmUgPSBpZFxuICAgIGlmICh0aGlzLnZpZXcubW9kZSA9PT0gJ3Zpc3VhbCcpIHtcbiAgICAgIHZhciB2aXggPSB0aGlzLnZpZXcuc2VsZWN0aW9uLmluZGV4T2YoaWQpXG4gICAgICBpZiAodml4ID09PSAtMSkge1xuICAgICAgICB0aGlzLnNldE1vZGUoJ25vcm1hbCcpXG4gICAgICB9IGVsc2UgaWYgKHZpeCAhPT0gMCAmJiB2aXggIT09IHRoaXMudmlldy5zZWxlY3Rpb24ubGVuZ3RoIC0gMSkge1xuICAgICAgICB0aGlzLnB1bGxCYWNrU2VsZWN0aW9uVG8oaWQpXG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aGlzLnZpZXcubW9kZSA9PT0gJ2luc2VydCcpIHRoaXMudmlldy5lZGl0UG9zID0gJ2VuZCdcbiAgICBpZiAodGhpcy5kYi5ub2Rlc1tvbGRdKSB7XG4gICAgICB0aGlzLmNoYW5nZWQodGhpcy5ldmVudHMubm9kZVZpZXdDaGFuZ2VkKG9sZCkpXG4gICAgfVxuICAgIHRoaXMuY2hhbmdlZChcbiAgICAgIHRoaXMuZXZlbnRzLmFjdGl2ZU5vZGVDaGFuZ2VkKCksXG4gICAgICB0aGlzLmV2ZW50cy5ub2RlVmlld0NoYW5nZWQoaWQpXG4gICAgKVxuICAgIHJldHVybiB0cnVlXG4gIH0sXG5cblxuICBwdWxsQmFja1NlbGVjdGlvblRvOiBmdW5jdGlvbiAoaWQpIHtcbiAgICB0aGlzLnNldFNlbGVjdGlvbih0aGlzLnZpZXcuc2VsZWN0aW9uLnNsaWNlKDAsIHRoaXMudmlldy5zZWxlY3Rpb24uaW5kZXhPZihpZCkgKyAxKSlcbiAgfSxcblxuICBzZXRTZWxlY3Rpb246IGZ1bmN0aW9uIChpZHMpIHtcbiAgICB2YXIgY2hhbmdlZCA9IGlkc1xuICAgIGlmICh0aGlzLnZpZXcuc2VsZWN0aW9uKSB7XG4gICAgICBjaGFuZ2VkID0gdGhpcy52aWV3LnNlbGVjdGlvbi5jb25jYXQoaWRzKVxuICAgIH1cbiAgICB0aGlzLnZpZXcuc2VsZWN0aW9uID0gaWRzXG4gICAgdGhpcy5jaGFuZ2VkLmFwcGx5KHRoaXMsIGNoYW5nZWQubWFwKChpZCkgPT4gdGhpcy5ldmVudHMubm9kZVZpZXdDaGFuZ2VkKGlkKSkpXG4gIH0sXG5cbiAgdG9nZ2xlU2VsZWN0aW9uRWRnZTogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnZpZXcubW9kZSAhPT0gJ3Zpc3VhbCcgfHwgdGhpcy52aWV3LnNlbGVjdGlvbi5sZW5ndGggPD0gMSkgcmV0dXJuXG4gICAgaWYgKHRoaXMudmlldy5hY3RpdmUgPT09IHRoaXMudmlldy5zZWxlY3Rpb25bMF0pIHtcbiAgICAgIHRoaXMuc2V0QWN0aXZlKHRoaXMudmlldy5zZWxlY3Rpb25bdGhpcy52aWV3LnNlbGVjdGlvbi5sZW5ndGggLSAxXSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRBY3RpdmUodGhpcy52aWV3LnNlbGVjdGlvblswXSlcbiAgICB9XG4gIH0sXG5cbiAgZXh0ZW5kVG9GaXJzdFNpYmxpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy52aWV3LmFjdGl2ZSA9PT0gdGhpcy52aWV3LnJvb3QpIHJldHVyblxuICAgIHZhciBwaWQgPSB0aGlzLmRiLm5vZGVzW3RoaXMudmlldy5hY3RpdmVdLnBhcmVudFxuICAgICAgLCBwYXJlbnQgPSB0aGlzLmRiLm5vZGVzW3BpZF1cbiAgICAgICwgaSA9IHBhcmVudC5jaGlsZHJlbi5pbmRleE9mKHRoaXMudmlldy5hY3RpdmUpXG4gICAgaWYgKGkgPT09IDApIHJldHVyblxuICAgIGlmICh0aGlzLnZpZXcuc2VsZWN0aW9uWzBdID09PSB0aGlzLnZpZXcuYWN0aXZlKSB7XG4gICAgICB0aGlzLnZpZXcuc2VsZWN0aW9uID0gcGFyZW50LmNoaWxkcmVuLnNsaWNlKDAsIGkpLmNvbmNhdCh0aGlzLnZpZXcuc2VsZWN0aW9uKVxuICAgICAgdGhpcy5jaGFuZ2VkKHRoaXMudmlldy5zZWxlY3Rpb24ubWFwKGlkID0+IHRoaXMuZXZlbnRzLm5vZGVWaWV3Q2hhbmdlZChpZCkpKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNoYW5nZWQodGhpcy52aWV3LnNlbGVjdGlvbi5tYXAoaWQgPT4gdGhpcy5ldmVudHMubm9kZVZpZXdDaGFuZ2VkKGlkKSkpXG4gICAgICB0aGlzLnZpZXcuc2VsZWN0aW9uID0gcGFyZW50LmNoaWxkcmVuLnNsaWNlKDAsIGkrMSlcbiAgICAgIHRoaXMuY2hhbmdlZCh0aGlzLnZpZXcuc2VsZWN0aW9uLm1hcChpZCA9PiB0aGlzLmV2ZW50cy5ub2RlVmlld0NoYW5nZWQoaWQpKSlcbiAgICB9XG4gICAgdGhpcy5zZXRBY3RpdmUocGFyZW50LmNoaWxkcmVuWzBdKVxuICB9LFxuXG4gIGV4dGVuZFRvTGFzdFNpYmxpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy52aWV3LmFjdGl2ZSA9PT0gdGhpcy52aWV3LnJvb3QpIHJldHVyblxuICAgIHZhciBwaWQgPSB0aGlzLmRiLm5vZGVzW3RoaXMudmlldy5hY3RpdmVdLnBhcmVudFxuICAgICAgLCBwYXJlbnQgPSB0aGlzLmRiLm5vZGVzW3BpZF1cbiAgICAgICwgaSA9IHBhcmVudC5jaGlsZHJlbi5pbmRleE9mKHRoaXMudmlldy5hY3RpdmUpXG4gICAgaWYgKGkgPT09IHBhcmVudC5jaGlsZHJlbi5sZW5ndGggLSAxKSByZXR1cm5cbiAgICBpZiAodGhpcy52aWV3LnNlbGVjdGlvblswXSA9PT0gdGhpcy52aWV3LmFjdGl2ZSkge1xuICAgICAgdGhpcy5jaGFuZ2VkKHRoaXMudmlldy5zZWxlY3Rpb24ubWFwKGlkID0+IHRoaXMuZXZlbnRzLm5vZGVWaWV3Q2hhbmdlZChpZCkpKVxuICAgICAgdGhpcy52aWV3LnNlbGVjdGlvbiA9IHBhcmVudC5jaGlsZHJlbi5zbGljZShpKVxuICAgICAgdGhpcy5jaGFuZ2VkKHRoaXMudmlldy5zZWxlY3Rpb24ubWFwKGlkID0+IHRoaXMuZXZlbnRzLm5vZGVWaWV3Q2hhbmdlZChpZCkpKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnZpZXcuc2VsZWN0aW9uID0gdGhpcy52aWV3LnNlbGVjdGlvbi5jb25jYXQocGFyZW50LmNoaWxkcmVuLnNsaWNlKGkgKyAxKSlcbiAgICAgIHRoaXMuY2hhbmdlZCh0aGlzLnZpZXcuc2VsZWN0aW9uLm1hcChpZCA9PiB0aGlzLmV2ZW50cy5ub2RlVmlld0NoYW5nZWQoaWQpKSlcbiAgICB9XG4gICAgdGhpcy5zZXRBY3RpdmUocGFyZW50LmNoaWxkcmVuW3BhcmVudC5jaGlsZHJlbi5sZW5ndGggLSAxXSlcbiAgfSxcblxuICAvLyBUT0RPIG1vdmUgdGhpcyB0byBhIC92aWV3IGFjdGlvbnMgc2V0IGlmIHdlIGVuZCB1cCBiZWluZyBhYmxlIHRvIHNlbGVjdFxuICAvLyBtb3JlIHRoYW4ganVzdCBzaWJsaW5nc1xuICAvLyBTZWxlY3Rpb24gbW9kZVxuICBleHRlbmRTZWxlY3Rpb25VcDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnZpZXcuYWN0aXZlID09PSB0aGlzLnZpZXcucm9vdCkgcmV0dXJuXG4gICAgdmFyIHBpZCA9IHRoaXMuZGIubm9kZXNbdGhpcy52aWV3LmFjdGl2ZV0ucGFyZW50XG4gICAgICAsIHBhcmVudCA9IHRoaXMuZGIubm9kZXNbcGlkXVxuICAgICAgLCBpID0gcGFyZW50LmNoaWxkcmVuLmluZGV4T2YodGhpcy52aWV3LmFjdGl2ZSlcbiAgICBpZiAoaSA9PT0gMCkgcmV0dXJuXG4gICAgdmFyIHByZXYgPSBwYXJlbnQuY2hpbGRyZW5baS0xXVxuICAgIGlmICh0aGlzLnZpZXcuc2VsZWN0aW9uWzBdID09PSB0aGlzLnZpZXcuYWN0aXZlKSB7XG4gICAgICB0aGlzLnZpZXcuc2VsZWN0aW9uLnVuc2hpZnQocHJldilcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy52aWV3LnNlbGVjdGlvbi5wb3AoKVxuICAgIH1cbiAgICB0aGlzLnNldEFjdGl2ZShwcmV2KVxuICB9LFxuXG4gIGV4dGVuZFNlbGVjdGlvbkRvd246IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy52aWV3LmFjdGl2ZSA9PT0gdGhpcy52aWV3LnJvb3QpIHJldHVyblxuICAgIHZhciBwaWQgPSB0aGlzLmRiLm5vZGVzW3RoaXMudmlldy5hY3RpdmVdLnBhcmVudFxuICAgICAgLCBwYXJlbnQgPSB0aGlzLmRiLm5vZGVzW3BpZF1cbiAgICAgICwgaSA9IHBhcmVudC5jaGlsZHJlbi5pbmRleE9mKHRoaXMudmlldy5hY3RpdmUpXG4gICAgaWYgKGkgPT09IHBhcmVudC5jaGlsZHJlbi5sZW5ndGggLSAxKSByZXR1cm5cbiAgICB2YXIgbmV4dCA9IHBhcmVudC5jaGlsZHJlbltpKzFdXG4gICAgaWYgKHRoaXMudmlldy5zZWxlY3Rpb25bdGhpcy52aWV3LnNlbGVjdGlvbi5sZW5ndGggLSAxXSA9PT0gdGhpcy52aWV3LmFjdGl2ZSkge1xuICAgICAgdGhpcy52aWV3LnNlbGVjdGlvbi5wdXNoKG5leHQpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudmlldy5zZWxlY3Rpb24uc2hpZnQoKVxuICAgIH1cbiAgICB0aGlzLnNldEFjdGl2ZShuZXh0KVxuICB9LFxuXG4gIGpvaW5NYW55OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMudmlldy5tb2RlICE9PSAndmlzdWFsJykgcmV0dXJuXG4gICAgdmFyIGlkcyA9IHRoaXMudmlldy5zZWxlY3Rpb25cbiAgICB2YXIgY29udGVudHMgPSB0aGlzLmRiLm5vZGVzW2lkc1swXV0uY29udGVudFxuICAgIGZvciAodmFyIGk9MTsgaTxpZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnRlbnRzICs9ICdcXG4nICsgdGhpcy5kYi5ub2Rlc1tpZHNbaV1dLmNvbnRlbnRcbiAgICB9XG4gICAgdGhpcy5leGVjdXRlQ29tbWFuZHMoXG4gICAgICAnc2V0Jywge2lkOiBpZHNbMF0sIGF0dHI6ICdjb250ZW50JywgdmFsdWU6IGNvbnRlbnRzfSxcbiAgICAgICdyZW1vdmUnLCB7aWRzOiBpZHMuc2xpY2UoMSl9XG4gICAgKVxuICAgIHRoaXMuc2V0QWN0aXZlKGlkc1swXSlcbiAgfSxcblxuICB2aXN1YWxNb2RlOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy52aWV3LnNlbGVjdGlvbiA9IFt0aGlzLnZpZXcuYWN0aXZlXVxuICAgIHRoaXMuY2hhbmdlZCh0aGlzLmV2ZW50cy5ub2RlVmlld0NoYW5nZWQodGhpcy52aWV3LmFjdGl2ZSkpXG4gICAgdGhpcy5zZXRNb2RlKCd2aXN1YWwnKVxuICB9LFxuXG4gIHNldE1vZGU6IGZ1bmN0aW9uIChtb2RlLCBxdWlldCkge1xuICAgIGlmICh0aGlzLnZpZXcubW9kZSA9PT0gbW9kZSkgcmV0dXJuXG4gICAgaWYgKHRoaXMudmlldy5tb2RlID09PSAndmlzdWFsJykge1xuICAgICAgaWYgKCFxdWlldCkge1xuICAgICAgICB0aGlzLmNoYW5nZWQoXG4gICAgICAgICAgdGhpcy52aWV3LnNlbGVjdGlvbi5tYXAoKGlkKSA9PiB0aGlzLmV2ZW50cy5ub2RlVmlld0NoYW5nZWQoaWQpKVxuICAgICAgICApXG4gICAgICB9XG4gICAgICB0aGlzLnZpZXcuc2VsZWN0aW9uID0gbnVsbFxuICAgIH1cbiAgICB0aGlzLnZpZXcubW9kZSA9IG1vZGVcbiAgICBpZiAodGhpcy52aWV3LmlkID09PSB0aGlzLnBhcmVudC5hY3RpdmVWaWV3KSB7XG4gICAgICB0aGlzLmNoYW5nZWQodGhpcy5ldmVudHMuYWN0aXZlTW9kZUNoYW5nZWQoKSlcbiAgICB9XG4gICAgdGhpcy5jaGFuZ2VkKHRoaXMuZXZlbnRzLm1vZGVDaGFuZ2VkKHRoaXMudmlldy5pZCkpXG4gIH0sXG5cbiAgbm9ybWFsTW9kZTogZnVuY3Rpb24gKGlkKSB7XG4gICAgaWQgPSBpZCB8fCB0aGlzLnZpZXcuYWN0aXZlXG4gICAgaWYgKHRoaXMudmlldy5tb2RlID09PSAnbm9ybWFsJyAmJiB0aGlzLnZpZXcuYWN0aXZlID09PSBpZCkgcmV0dXJuXG4gICAgaWYgKCF0aGlzLnNldEFjdGl2ZShpZCkpIHtcbiAgICAgIHRoaXMuY2hhbmdlZCh0aGlzLmV2ZW50cy5ub2RlVmlld0NoYW5nZWQodGhpcy52aWV3LmFjdGl2ZSkpXG4gICAgfVxuICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuYmx1cigpXG4gICAgdGhpcy5zZXRNb2RlKCdub3JtYWwnKVxuICB9LFxuXG4gIGVkaXQ6IGZ1bmN0aW9uIChpZCkge1xuICAgIHRoaXMuZWRpdEF0KGlkLCAnZW5kJylcbiAgfSxcblxuICBlZGl0U3RhcnQ6IGZ1bmN0aW9uIChpZCkge1xuICAgIHRoaXMuZWRpdEF0KGlkLCAnc3RhcnQnKVxuICB9LFxuXG4gIGVkaXRBdDogZnVuY3Rpb24gKGlkLCBhdCkge1xuICAgIGlkID0gaWQgfHwgdGhpcy52aWV3LmFjdGl2ZVxuICAgIGlmICh0aGlzLnZpZXcubW9kZSA9PT0gJ2VkaXQnICYmIHRoaXMudmlldy5hY3RpdmUgPT09IGlkKSByZXR1cm5cbiAgICBpZiAoIXRoaXMuc2V0QWN0aXZlKGlkKSkge1xuICAgICAgdGhpcy5jaGFuZ2VkKHRoaXMuZXZlbnRzLm5vZGVWaWV3Q2hhbmdlZCh0aGlzLnZpZXcuYWN0aXZlKSlcbiAgICB9XG4gICAgaWYgKCFhdCkgYXQgPSAnc3RhcnQnXG4gICAgdGhpcy52aWV3Lmxhc3RFZGl0ZWQgPSBpZFxuICAgIHRoaXMudmlldy5lZGl0UG9zID0gYXRcbiAgICB0aGlzLnNldE1vZGUoJ2luc2VydCcpXG4gIH0sXG5cbiAgY2hhbmdlOiBmdW5jdGlvbiAoaWQpIHtcbiAgICBpZCA9IGlkIHx8IHRoaXMudmlldy5hY3RpdmVcbiAgICBpZiAodGhpcy52aWV3Lm1vZGUgPT09ICdlZGl0JyAmJiB0aGlzLnZpZXcuYWN0aXZlID09PSBpZCkgcmV0dXJuXG4gICAgaWYgKCF0aGlzLnNldEFjdGl2ZShpZCkpIHtcbiAgICAgIHRoaXMuY2hhbmdlZCh0aGlzLmV2ZW50cy5ub2RlVmlld0NoYW5nZWQodGhpcy52aWV3LmFjdGl2ZSkpXG4gICAgfVxuICAgIHRoaXMudmlldy5lZGl0UG9zID0gJ2NoYW5nZSdcbiAgICB0aGlzLnNldE1vZGUoJ2luc2VydCcpXG4gIH0sXG5cbiAgc2hvd0N1c3RvbU1lbnU6IGZ1bmN0aW9uICh4LCB5LCBtZW51KSB7XG4gICAgaWYgKHRoaXMuZ2xvYmFscy5jbGVhckNvbnRleHRNZW51KSB7XG4gICAgICB0aGlzLmdsb2JhbHMuY2xlYXJDb250ZXh0TWVudSgpXG4gICAgfVxuICAgIHRoaXMuZ2xvYmFscy5jbGVhckNvbnRleHRNZW51ID0gQ29udGV4dE1lbnUuc2hvdyhtZW51LCB4LCB5KVxuICB9LFxuXG4gIHNob3dDb250ZXh0TWVudTogZnVuY3Rpb24gKHgsIHksIGlkKSB7XG4gICAgdmFyIGl0ZW1zID0gW11cbiAgICBpZiAoIWlkKSBpZCA9IHRoaXMudmlldy5hY3RpdmVcbiAgICB0aGlzLnBhcmVudC5hbGxQbHVnaW5zLmZvckVhY2gocGx1Z2luID0+IHtcbiAgICAgIGlmICghcGx1Z2luLmNvbnRleHRNZW51KSByZXR1cm5cbiAgICAgIHZhciBjcmVhdGVkID0gcGx1Z2luLmNvbnRleHRNZW51KHRoaXMuZGIubm9kZXNbaWRdLCB0aGlzKVxuICAgICAgaWYgKCFjcmVhdGVkKSByZXR1cm5cbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShjcmVhdGVkKSkge1xuICAgICAgICBjcmVhdGVkID0gW2NyZWF0ZWRdXG4gICAgICB9XG4gICAgICBpdGVtcyA9IGl0ZW1zLmNvbmNhdChjcmVhdGVkKVxuICAgIH0pXG4gICAgdmFyIHJlcGxhY2VBY3Rpb25zID0gaXRlbXMgPT4ge1xuICAgICAgaXRlbXMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgaXRlbS5hY3Rpb24pIHtcbiAgICAgICAgICBpZiAoIXRoaXNbaXRlbS5hY3Rpb25dKSB7XG4gICAgICAgICAgICByZXR1cm4gY29uc29sZS53YXJuKCdVbmtub3duIGNvbnRleHQgbWVudSBhY3Rpb24nKVxuICAgICAgICAgIH1cbiAgICAgICAgICBpdGVtLmFjdGlvbiA9IHRoaXNbaXRlbS5hY3Rpb25dLmJpbmQodGhpcywgaWQpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGl0ZW0uY2hpbGRyZW4pIHJlcGxhY2VBY3Rpb25zKGl0ZW0uY2hpbGRyZW4pXG4gICAgICB9KVxuICAgIH1cbiAgICByZXBsYWNlQWN0aW9ucyhpdGVtcylcbiAgICB0aGlzLnNob3dDdXN0b21NZW51KHgsIHksIGl0ZW1zKVxuICB9LFxuXG4gIGhpZGVDb250ZXh0TWVudTogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmdsb2JhbHMuY2xlYXJDb250ZXh0TWVudSkge1xuICAgICAgdGhpcy5nbG9iYWxzLmNsZWFyQ29udGV4dE1lbnUoKVxuICAgICAgdGhpcy5nbG9iYWxzLmNsZWFyQ29udGV4dE1lbnUgPSBudWxsXG4gICAgfVxuICB9LFxuXG59XG5cbiIsIlxudmFyIFByb21pc2UgPSByZXF1aXJlKCdibHVlYmlyZCcpXG5cbm1vZHVsZS5leHBvcnRzID0gQmFzZVN0b3JlXG5cbmZ1bmN0aW9uIEJhc2VTdG9yZShvcHRpb25zKSB7XG4gIHRoaXMuX2xpc3RlbmVycyA9IHt9XG4gIHRoaXMuX3BsdWdpbl90ZWFyZG93bnMgPSBbXVxuXG4gIGlmIChvcHRpb25zLmFjdGlvbnMpIHtcbiAgICBmb3IgKHZhciBuYW1lIGluIG9wdGlvbnMuYWN0aW9ucykge1xuICAgICAgdGhpcy5hY3Rpb25zW25hbWVdID0gb3B0aW9ucy5hY3Rpb25zW25hbWVdXG4gICAgfVxuICB9XG5cbiAgaWYgKG9wdGlvbnMucGx1Z2lucykge1xuICAgIG9wdGlvbnMucGx1Z2lucy5mb3JFYWNoKChwbHVnaW4pID0+IHRoaXMuYWRkUGx1Z2luKHBsdWdpbiwgb3B0aW9ucy5hbGxQbHVnaW5zKSlcbiAgfVxuICB0aGlzLmFsbFBsdWdpbnMgPSBvcHRpb25zLmFsbFBsdWdpbnNcbn1cblxuQmFzZVN0b3JlLnByb3RvdHlwZSA9IHtcbiAgYWN0aW9uczoge30sXG5cbiAgdGVhcmRvd246IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9wbHVnaW5fdGVhcmRvd25zLmZvckVhY2goZm4gPT4gZm4odGhpcykpXG4gIH0sXG5cbiAgYWRkUGx1Z2luOiBmdW5jdGlvbiAocGx1Z2luLCBhbGxQbHVnaW5zKSB7XG4gICAgaWYgKHBsdWdpbi5pbml0KSB7XG4gICAgICBwbHVnaW4uaW5pdCh0aGlzKSAvLyBUT0RPIGFzeW5jP1xuICAgIH1cbiAgICBpZiAocGx1Z2luLnRlYXJkb3duKSB7XG4gICAgICB0aGlzLl9wbHVnaW5fdGVhcmRvd25zLnB1c2gocGx1Z2luLnRlYXJkb3duKVxuICAgIH1cblxuICAgIHZhciBuYW1lXG4gICAgICAsIGFjdGlvbnNcbiAgICBpZiAocGx1Z2luLmFjdGlvbnMpIHtcbiAgICAgIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgcGx1Z2luLmFjdGlvbnMpIHtcbiAgICAgICAgYWN0aW9ucyA9IHBsdWdpbi5hY3Rpb25zKGFsbFBsdWdpbnMpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3Rpb25zID0gcGx1Z2luLmFjdGlvbnNcbiAgICAgIH1cbiAgICAgIGZvciAobmFtZSBpbiBhY3Rpb25zKSB7XG4gICAgICAgIHRoaXMuYWN0aW9uc1tuYW1lXSA9IGFjdGlvbnNbbmFtZV1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocGx1Z2luLmV4dGVuZCkge1xuICAgICAgZm9yIChuYW1lIGluIHBsdWdpbi5leHRlbmQpIHtcbiAgICAgICAgdGhpc1tuYW1lXSA9IHBsdWdpbi5leHRlbmRbbmFtZV1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgb246IGZ1bmN0aW9uIChjaGFuZ2VzLCBsaXN0ZW5lcikge1xuICAgIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIGNoYW5nZXMpIGNoYW5nZXMgPSBbY2hhbmdlc11cbiAgICBmb3IgKHZhciBpPTA7IGk8Y2hhbmdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCF0aGlzLl9saXN0ZW5lcnNbY2hhbmdlc1tpXV0pIHtcbiAgICAgICAgdGhpcy5fbGlzdGVuZXJzW2NoYW5nZXNbaV1dID0gW2xpc3RlbmVyXVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9saXN0ZW5lcnNbY2hhbmdlc1tpXV0uaW5kZXhPZihsaXN0ZW5lcikgPT09IC0xKXtcbiAgICAgICAgdGhpcy5fbGlzdGVuZXJzW2NoYW5nZXNbaV1dLnB1c2gobGlzdGVuZXIpXG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIG9mZjogZnVuY3Rpb24gKGNoYW5nZXMsIGxpc3RlbmVyKSB7XG4gICAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgY2hhbmdlcykgY2hhbmdlcyA9IFtjaGFuZ2VzXVxuICAgIGZvciAodmFyIGk9MDsgaTxjaGFuZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaXggPSB0aGlzLl9saXN0ZW5lcnNbY2hhbmdlc1tpXV0uaW5kZXhPZihsaXN0ZW5lcilcbiAgICAgIGlmIChpeCAhPT0gLTEpIHtcbiAgICAgICAgdGhpcy5fbGlzdGVuZXJzW2NoYW5nZXNbaV1dLnNwbGljZShpeCwgMSlcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgY2hhbmdlZDogZnVuY3Rpb24gKCkge1xuICAgIHZhciB3aGF0ID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMpXG4gICAgaWYgKHdoYXQubGVuZ3RoID09PSAxICYmIEFycmF5LmlzQXJyYXkod2hhdFswXSkpIHtcbiAgICAgIHdoYXQgPSB3aGF0WzBdXG4gICAgfVxuICAgIGlmICh0aGlzLl9jaGFuZ2VkKSB7XG4gICAgICB0aGlzLl9jaGFuZ2VkID0gdGhpcy5fY2hhbmdlZC5jb25jYXQod2hhdClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fY2hhbmdlZCA9IHdoYXRcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBpZiAod2luZG93LkRFQlVHX0NIQU5HRVMpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnZW1pdHRpbmcnLCB0aGlzLl9jaGFuZ2VkKVxuICAgICAgICB9XG4gICAgICAgIHZhciBjaGFuZ2VzID0gdGhpcy5fY2hhbmdlZFxuICAgICAgICB0aGlzLl9jaGFuZ2VkID0gbnVsbFxuICAgICAgICB0aGlzLmVtaXRDaGFuZ2VkKGNoYW5nZXMpXG4gICAgICB9LCAwKVxuICAgIH1cbiAgICBpZiAod2luZG93LkRFQlVHX0NIQU5HRVMpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdjaGFuZ2VkJywgd2hhdClcbiAgICB9XG4gIH0sXG5cbiAgZW1pdENoYW5nZWQ6IGZ1bmN0aW9uICh3aGF0KSB7XG4gICAgdmFyIGNhbGxlZCA9IFtdXG4gICAgdmFyIHByb21pc2VzID0gW11cbiAgICBmb3IgKHZhciBpPTA7IGk8d2hhdC5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVyc1t3aGF0W2ldXVxuICAgICAgaWYgKCFsaXN0ZW5lcnMpIGNvbnRpbnVlO1xuICAgICAgZm9yICh2YXIgaj0wOyBqPGxpc3RlbmVycy5sZW5ndGg7IGorKykge1xuICAgICAgICBpZiAoY2FsbGVkLmluZGV4T2YobGlzdGVuZXJzW2pdKSAhPT0gLTEpIHtcbiAgICAgICAgICBjb250aW51ZTsgLy8gZWFjaCBsaXN0ZW5lciBzaG91bGQgYmUgY2FsbGVkIGF0IG1vc3Qgb25jZSBwZXIgY2hhbmdlZFxuICAgICAgICB9XG4gICAgICAgIHZhciBwID0gbGlzdGVuZXJzW2pdKClcbiAgICAgICAgaWYgKHApIHtcbiAgICAgICAgICBwcm9taXNlcy5wdXNoKHApXG4gICAgICAgIH1cbiAgICAgICAgY2FsbGVkLnB1c2gobGlzdGVuZXJzW2pdKVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy5fZG9uZV9saXN0ZW5lcikge1xuICAgICAgUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4odGhpcy5fZG9uZV9saXN0ZW5lcilcbiAgICB9XG4gIH0sXG5cbiAgb25Eb25lOiBmdW5jdGlvbiAoZm4pIHtcbiAgICB0aGlzLl9kb25lX2xpc3RlbmVyID0gZm5cbiAgfSxcbn1cblxuIiwiXG52YXIgYXN5bmMgPSByZXF1aXJlKCdhc3luYycpXG5cbm1vZHVsZS5leHBvcnRzID0gQ29tbWFuZGVnZXJcblxuLyoqXG4gKiBUaGluZ3Mgd2UgbmVlZFxuICogLSB2aWV3XG4gKiAtIGRiXG4gKi9cblxuZnVuY3Rpb24gQ29tbWFuZGVnZXIoY2hhbmdlZCwgc2V0QWN0aXZlLCBkYiwgZXZlbnRzKSB7XG4gIHRoaXMuaGlzdG9yeSA9IFtdXG4gIHRoaXMuaGlzdHBvcyA9IDBcbiAgdGhpcy5jaGFuZ2VkID0gY2hhbmdlZFxuICB0aGlzLnNldEFjdGl2ZSA9IHNldEFjdGl2ZVxuICB0aGlzLmV2ZW50cyA9IGV2ZW50c1xuICB0aGlzLl90cmFuc2FjdGlvbl9peCA9IG51bGxcbiAgdGhpcy5fdHJhbnNhY3Rpb25pbmcgPSAwXG4gIHRoaXMuZGIgPSBkYlxufVxuXG5Db21tYW5kZWdlci5wcm90b3R5cGUgPSB7XG5cbiAgY29tbWFuZHM6IHJlcXVpcmUoJy4vY29tbWFuZHMnKSxcblxuICBhZGRDb21tYW5kczogZnVuY3Rpb24gKGNvbW1hbmRzKSB7XG4gICAgZm9yICh2YXIgbmFtZSBpbiBjb21tYW5kcykge1xuICAgICAgdGhpcy5jb21tYW5kc1tuYW1lXSA9IGNvbW1hbmRzW25hbWVdXG4gICAgfVxuICB9LFxuXG4gIHN0YXJ0VHJhbnNhY3Rpb246IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuX3RyYW5zYWN0aW9uaW5nKSB7XG4gICAgICB0aGlzLl90cmFuc2FjdGlvbl9peCA9IG51bGxcbiAgICB9XG4gICAgdGhpcy5fdHJhbnNhY3Rpb25pbmcgKz0gMVxuICB9LFxuXG4gIHN0b3BUcmFuc2FjdGlvbjogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX3RyYW5zYWN0aW9uaW5nIC09IDFcbiAgICBpZiAoIXRoaXMuX3RyYW5zYWN0aW9uaW5nKSB7XG4gICAgICB0aGlzLl90cmFuc2FjdGlvbl9peCA9IG51bGxcbiAgICB9XG4gIH0sXG5cbiAgZXhlY3V0ZTogZnVuY3Rpb24gKGNvbW1hbmQpIHtcbiAgICByZXR1cm4gdGhpcy5leGVjdXRlQ29tbWFuZHMoY29tbWFuZClcbiAgfSxcblxuICBleGVjdXRlQ29tbWFuZHM6IGZ1bmN0aW9uICguLi5jb21tYW5kcykge1xuICAgIHZhciB0aW1lID0gRGF0ZS5ub3coKVxuICAgIHZhciBjaGFuZ2VkID0gWydjaGFuZ2VkJ11cbiAgICB2YXIgc3F1YXNoID0gbnVsbFxuICAgIGlmIChudWxsICE9PSB0aGlzLl90cmFuc2FjdGlvbl9peCkge1xuICAgICAgc3F1YXNoID0gdGhpcy5fdHJhbnNhY3Rpb25faXhcbiAgICB9IGVsc2Uge1xuICAgICAgY29tbWFuZHMuc29tZShjbWQgPT4ge1xuICAgICAgICBpZiAoJ251bWJlcicgPT0gdHlwZW9mIGNtZC5zcXVhc2gpIHtcbiAgICAgICAgICBzcXVhc2ggPSBjbWQuc3F1YXNoXG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gICAgaWYgKCdudW1iZXInID09IHR5cGVvZiBzcXVhc2gpIHtcbiAgICAgIHZhciBwYXN0ID0gdGhpcy5oaXN0b3J5W3NxdWFzaF1cbiAgICAgIHBhc3QuY2hhbmdlcyA9IHBhc3QuY2hhbmdlcy5jb25jYXQoY29tbWFuZHMpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaGlzdG9yeSA9IHRoaXMuaGlzdG9yeS5zbGljZSgwLCB0aGlzLmhpc3Rwb3MpXG4gICAgICB0aGlzLmhpc3RvcnkucHVzaCh7dGltZTogdGltZSwgY2hhbmdlczogY29tbWFuZHN9KVxuICAgICAgdGhpcy5oaXN0cG9zID0gdGhpcy5oaXN0b3J5Lmxlbmd0aFxuICAgICAgaWYgKHRoaXMuX3RyYW5zYWN0aW9uaW5nKSB7XG4gICAgICAgIHRoaXMuX3RyYW5zYWN0aW9uX2l4ID0gdGhpcy5oaXN0cG9zIC0gMVxuICAgICAgfVxuICAgIH1cbiAgICBhc3luYy5tYXBTZXJpZXMoY29tbWFuZHMsIChjb21tYW5kLCBuZXh0KSA9PiB7XG4gICAgICB0aGlzLmRvQ29tbWFuZChjb21tYW5kLCAoZXJyLCBuZXdDaGFuZ2VkKSA9PiB7XG4gICAgICAgIGNoYW5nZWQgPSBjaGFuZ2VkLmNvbmNhdChuZXdDaGFuZ2VkKVxuICAgICAgICBuZXh0KGVyciwgY29tbWFuZC5zdGF0ZSlcbiAgICAgIH0pXG4gICAgfSwgKGVyciwgc3RhdGVzKSA9PiB7XG4gICAgICBpZiAoZXJyKSByZXR1cm4gY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGV4ZWN1dGUgY29tbWFuZHMhISEnLCBlcnIpXG4gICAgICB0aGlzLmNoYW5nZWQuYXBwbHkodGhpcywgY2hhbmdlZClcbiAgICB9KVxuICAgIGlmIChzcXVhc2ggIT09IG51bGwpIHJldHVybiBzcXVhc2hcbiAgICByZXR1cm4gdGhpcy5oaXN0cG9zIC0gMVxuICB9LFxuXG4gIHVuZG9Db21tYW5kczogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmhpc3Rwb3MgPD0gMCkgcmV0dXJuXG4gICAgdGhpcy5oaXN0cG9zIC09IDFcbiAgICB2YXIgbGFzdCA9IHRoaXMuaGlzdG9yeVt0aGlzLmhpc3Rwb3NdXG4gICAgdmFyIGNoYW5nZWQgPSBbJ2NoYW5nZWQnXVxuICAgIHZhciB0aW1lID0gRGF0ZS5ub3coKVxuICAgIHZhciBpdGVtcyA9IFtdXG4gICAgZm9yICh2YXIgaT1sYXN0LmNoYW5nZXMubGVuZ3RoLTE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBpdGVtcy5wdXNoKGxhc3QuY2hhbmdlc1tpXSlcbiAgICB9XG4gICAgYXN5bmMubWFwU2VyaWVzKGl0ZW1zLCAoaXRlbSwgbmV4dCkgPT4ge1xuICAgICAgdGhpcy51bmRvQ29tbWFuZChpdGVtLCAoZXJyLCBuZXdDaGFuZ2VzKSA9PiB7XG4gICAgICAgIGNoYW5nZWQgPSBjaGFuZ2VkLmNvbmNhdChuZXdDaGFuZ2VzKVxuICAgICAgICBuZXh0KClcbiAgICAgIH0pXG4gICAgfSwgKGVycikgPT4gdGhpcy5jaGFuZ2VkLmFwcGx5KHRoaXMsIGNoYW5nZWQpKVxuICB9LFxuXG4gIHJlZG9Db21tYW5kczogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmhpc3Rwb3MgPj0gdGhpcy5oaXN0b3J5Lmxlbmd0aCkgcmV0dXJuXG4gICAgdmFyIGxhc3QgPSB0aGlzLmhpc3RvcnlbdGhpcy5oaXN0cG9zXVxuICAgIHRoaXMuaGlzdHBvcyArPSAxXG4gICAgdmFyIGNoYW5nZWQgPSBbJ2NoYW5nZWQnXVxuICAgIHZhciB0aW1lID0gRGF0ZS5ub3coKVxuICAgIGFzeW5jLm1hcFNlcmllcyhsYXN0LmNoYW5nZXMsIChpdGVtLCBuZXh0KSA9PiB7XG4gICAgICB0aGlzLnJlZG9Db21tYW5kKGl0ZW0sIChlcnIsIGNoYW5nZXMpID0+IHtcbiAgICAgICAgY2hhbmdlZCA9IGNoYW5nZWQuY29uY2F0KGNoYW5nZXMpXG4gICAgICAgIG5leHQoKVxuICAgICAgfSlcbiAgICB9LCAoZXJyKSA9PiB0aGlzLmNoYW5nZWQuYXBwbHkodGhpcywgY2hhbmdlZCkpXG4gIH0sXG5cbiAgZG9Db21tYW5kOiBmdW5jdGlvbiAoY29tbWFuZCwgZG9uZSkge1xuICAgIHZhciBjbWQgPSB0aGlzLmNvbW1hbmRzW2NvbW1hbmQuY21kXVxuICAgIGlmIChjbWQuYXN5bmMpIHtcbiAgICAgIGNtZC5hcHBseS5jYWxsKGNvbW1hbmQuc3RhdGUsIHRoaXMuZGIsIHRoaXMuZXZlbnRzW2NvbW1hbmQudmlld10sIChlcnIsIGNoYW5nZWQpID0+IHtcbiAgICAgICAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgY2hhbmdlZCkge1xuICAgICAgICAgIGNoYW5nZWQgPSBbY2hhbmdlZF1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY29tbWFuZC5kb25lKSB7XG4gICAgICAgICAgY29tbWFuZC5kb25lKG51bGwsIGNvbW1hbmQuc3RhdGUpXG4gICAgICAgIH1cbiAgICAgICAgZG9uZShlcnIsIGNoYW5nZWQpXG4gICAgICB9KVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHZhciBjaGFuZ2VkID0gY21kLmFwcGx5LmNhbGwoY29tbWFuZC5zdGF0ZSwgdGhpcy5kYiwgdGhpcy5ldmVudHNbY29tbWFuZC52aWV3XSlcbiAgICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiBjaGFuZ2VkKSB7XG4gICAgICBjaGFuZ2VkID0gW2NoYW5nZWRdXG4gICAgfVxuICAgIGlmIChjb21tYW5kLmRvbmUpIHtcbiAgICAgIGNvbW1hbmQuZG9uZShudWxsLCBjb21tYW5kLnN0YXRlKVxuICAgIH1cbiAgICBkb25lKG51bGwsIGNoYW5nZWQpXG4gIH0sXG5cbiAgdW5kb0NvbW1hbmQ6IGZ1bmN0aW9uIChjb21tYW5kLCBkb25lKSB7XG4gICAgdmFyIGNtZCA9IHRoaXMuY29tbWFuZHNbY29tbWFuZC5jbWRdXG4gICAgaWYgKGNtZC5hc3luYykge1xuICAgICAgY21kLnVuZG8uY2FsbChjb21tYW5kLnN0YXRlLCB0aGlzLmRiLCB0aGlzLmV2ZW50c1tjb21tYW5kLnZpZXddLCAoZXJyLCBjaGFuZ2VkKSA9PiB7XG4gICAgICAgIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIGNoYW5nZWQpIHtcbiAgICAgICAgICBjaGFuZ2VkID0gW2NoYW5nZWRdXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRBY3RpdmUoY29tbWFuZC5hY3RpdmUsIGNvbW1hbmQudmlldylcbiAgICAgICAgZG9uZShlcnIsIGNoYW5nZWQpXG4gICAgICB9KVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHZhciBjaGFuZ2VkID0gY21kLnVuZG8uY2FsbChjb21tYW5kLnN0YXRlLCB0aGlzLmRiLCB0aGlzLmV2ZW50c1tjb21tYW5kLnZpZXddKVxuICAgIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIGNoYW5nZWQpIHtcbiAgICAgIGNoYW5nZWQgPSBbY2hhbmdlZF1cbiAgICB9XG4gICAgdGhpcy5zZXRBY3RpdmUoY29tbWFuZC5hY3RpdmUsIGNvbW1hbmQudmlldylcbiAgICBkb25lKG51bGwsIGNoYW5nZWQpXG4gIH0sXG5cbiAgcmVkb0NvbW1hbmQ6IGZ1bmN0aW9uIChjb21tYW5kLCBkb25lKSB7XG4gICAgdmFyIGNtZCA9IHRoaXMuY29tbWFuZHNbY29tbWFuZC5jbWRdXG4gICAgdmFyIGFjdGlvbiA9IGNtZC5yZWRvIHx8IGNtZC5hcHBseVxuICAgIGlmIChjbWQuYXN5bmMpIHtcbiAgICAgIGFjdGlvbi5jYWxsKGNvbW1hbmQuc3RhdGUsIHRoaXMuZGIsIHRoaXMuZXZlbnRzW2NvbW1hbmQudmlld10sIChlcnIsIGNoYW5nZWQpID0+IHtcbiAgICAgICAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgY2hhbmdlZCkge1xuICAgICAgICAgIGNoYW5nZWQgPSBbY2hhbmdlZF1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldEFjdGl2ZShjb21tYW5kLmFjdGl2ZSwgY29tbWFuZC52aWV3KVxuICAgICAgICBkb25lKGVyciwgY2hhbmdlZClcbiAgICAgIH0pXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgdmFyIGNoYW5nZWQgPSBhY3Rpb24uY2FsbChjb21tYW5kLnN0YXRlLCB0aGlzLmRiLCB0aGlzLmV2ZW50c1tjb21tYW5kLnZpZXddKVxuICAgIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIGNoYW5nZWQpIHtcbiAgICAgIGNoYW5nZWQgPSBbY2hhbmdlZF1cbiAgICB9XG4gICAgdGhpcy5zZXRBY3RpdmUoY29tbWFuZC5hY3RpdmUsIGNvbW1hbmQudmlldylcbiAgICBkb25lKG51bGwsIGNoYW5nZWQpXG4gIH0sXG59XG5cbiIsIlxuLyoqXG4gKiBDb21tYW5kcyBnZXQ6XG4gKiAtIGRiXG4gKiAtIGV2ZW50c1xuICogQ29tbWFuZHMgbmVlZCBhY2Nlc3MgdG86XG4gKiAtIFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIHVwZGF0ZToge1xuICAgIGFyZ3M6IFsnaWQnLCAndXBkYXRlJ10sXG4gICAgYXBwbHk6IGZ1bmN0aW9uIChkYiwgZXZlbnRzKSB7XG4gICAgICB0aGlzLm9sZCA9IHt9XG4gICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMudXBkYXRlKSB7XG4gICAgICAgIHRoaXMub2xkW25hbWVdID0gZGIubm9kZXNbdGhpcy5pZF1bbmFtZV1cbiAgICAgIH1cbiAgICAgIGRiLnVwZGF0ZSh0aGlzLmlkLCB0aGlzLnVwZGF0ZSlcbiAgICAgIHJldHVybiBldmVudHMubm9kZUNoYW5nZWQodGhpcy5pZClcbiAgICB9LFxuICAgIHVuZG86IGZ1bmN0aW9uIChkYiwgZXZlbnRzKSB7XG4gICAgICBkYi51cGRhdGUodGhpcy5pZCwgdGhpcy5vbGQpXG4gICAgICByZXR1cm4gZXZlbnRzLm5vZGVDaGFuZ2VkKHRoaXMuaWQpXG4gICAgfSxcbiAgfSxcblxuICB1cGRhdGVNYW55OiB7XG4gICAgYXJnczogWydpZHMnLCAndXBkYXRlcyddLFxuICAgIGFwcGx5OiBmdW5jdGlvbiAoZGIsIGV2ZW50cykge1xuICAgICAgdGhpcy5vbGRzID0gdGhpcy5pZHMubWFwKChpZCwgaSkgPT4ge1xuICAgICAgICB2YXIgb2xkID0ge31cbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzLnVwZGF0ZXNbaV0pIHtcbiAgICAgICAgICBvbGRbbmFtZV0gPSBkYi5ub2Rlc1tpZF1bbmFtZV1cbiAgICAgICAgfVxuICAgICAgICBkYi51cGRhdGUoaWQsIHRoaXMudXBkYXRlc1tpXSlcbiAgICAgICAgcmV0dXJuIG9sZFxuICAgICAgfSlcbiAgICAgIHJldHVybiB0aGlzLmlkcy5tYXAoaWQgPT4gZXZlbnRzLm5vZGVDaGFuZ2VkKGlkKSlcbiAgICB9LFxuICAgIHVuZG86IGZ1bmN0aW9uIChkYiwgZXZlbnRzKSB7XG4gICAgICB0aGlzLmlkcy5mb3JFYWNoKChpZCwgaSkgPT4ge1xuICAgICAgICBkYi51cGRhdGUoaWQsIHRoaXMub2xkc1tpXSlcbiAgICAgIH0pXG4gICAgICByZXR1cm4gdGhpcy5pZHMubWFwKGlkID0+IGV2ZW50cy5ub2RlQ2hhbmdlZChpZCkpXG4gICAgfSxcbiAgfSxcblxuICBzZXQ6IHtcbiAgICBhcmdzOiBbJ2lkJywgJ2F0dHInLCAndmFsdWUnXSxcbiAgICBhcHBseTogZnVuY3Rpb24gKGRiLCBldmVudHMpIHtcbiAgICAgIHRoaXMub2xkID0gZGIubm9kZXNbdGhpcy5pZF1bdGhpcy5hdHRyXVxuICAgICAgZGIuc2V0KHRoaXMuaWQsIHRoaXMuYXR0ciwgdGhpcy52YWx1ZSlcbiAgICAgIHJldHVybiBldmVudHMubm9kZUNoYW5nZWQodGhpcy5pZClcbiAgICB9LFxuICAgIHVuZG86IGZ1bmN0aW9uIChkYiwgZXZlbnRzKSB7XG4gICAgICBkYi5zZXQodGhpcy5pZCwgdGhpcy5hdHRyLCB0aGlzLm9sZClcbiAgICAgIHJldHVybiBldmVudHMubm9kZUNoYW5nZWQodGhpcy5pZClcbiAgICB9LFxuICB9LFxuXG4gIHNldE1hbnk6IHtcbiAgICBhcmdzOiBbJ2F0dHInLCAnaWRzJywgJ3ZhbHVlcyddLFxuICAgIGFwcGx5OiBmdW5jdGlvbiAoZGIsIGV2ZW50cykge1xuICAgICAgdGhpcy5vbGQgPSB0aGlzLmlkcy5tYXAoKGlkKSA9PiBkYi5ub2Rlc1tpZF1bdGhpcy5hdHRyXSlcbiAgICAgIGRiLnNldE1hbnkodGhpcy5hdHRyLCB0aGlzLmlkcywgdGhpcy52YWx1ZXMpXG4gICAgICByZXR1cm4gdGhpcy5pZHMubWFwKChpZCkgPT4gZXZlbnRzLm5vZGVDaGFuZ2VkKGlkKSlcbiAgICB9LFxuICAgIHVuZG86IGZ1bmN0aW9uIChkYiwgZXZlbnRzKSB7XG4gICAgICBkYi5zZXRNYW55KHRoaXMuYXR0ciwgdGhpcy5pZHMsIHRoaXMub2xkKVxuICAgICAgcmV0dXJuIHRoaXMuaWRzLm1hcCgoaWQpID0+IGV2ZW50cy5ub2RlQ2hhbmdlZChpZCkpXG4gICAgfSxcbiAgfSxcblxuICByZW1vdmU6IHtcbiAgICBhcmdzOiBbJ2lkcyddLFxuICAgIGFwcGx5OiBmdW5jdGlvbiAoZGIsIGV2ZW50cykge1xuICAgICAgdmFyIG5vZGUgPSBkYi5ub2Rlc1t0aGlzLmlkc1swXV1cbiAgICAgICAgLCBwYXJlbnQgPSBkYi5ub2Rlc1tub2RlLnBhcmVudF1cbiAgICAgICAgLCBjaGlsZHJlbiA9IHBhcmVudC5jaGlsZHJlbi5zbGljZSgpXG4gICAgICAgICwgaXggPSBjaGlsZHJlbi5pbmRleE9mKHRoaXMuaWRzWzBdKVxuICAgICAgaWYgKGl4ID09PSAtMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vZGUgaXMgbm90IGEgY2hpbGQgb2YgaXRzIHBhcmVudCcpXG4gICAgICB9XG4gICAgICAvLyBUT0RPOiB0aGlzIGFzc3VtZXMgdGhhdCBpZHMgYXJlIGNvbnRpZ3VvdXMgY2hpbGRyZW4uIEkgdGhpbmsgSSBjYW5cbiAgICAgIC8vIHJlbHkgb24gdGhhdCwgYnV0IEkgc2hvdWxkIGJlIGNhcmVmdWwuXG4gICAgICB0aGlzLnNhdmVkID0ge1xuICAgICAgICBub2RlczogdGhpcy5pZHMubWFwKChpZCkgPT4gZGIubm9kZXNbaWRdKSxcbiAgICAgICAgaXg6IGl4XG4gICAgICB9XG4gICAgICBjaGlsZHJlbi5zcGxpY2UoaXgsIHRoaXMuaWRzLmxlbmd0aClcbiAgICAgIGRiLnNldChub2RlLnBhcmVudCwgJ2NoaWxkcmVuJywgY2hpbGRyZW4pXG4gICAgICBkYi5yZW1vdmVNYW55KHRoaXMuaWRzKVxuICAgICAgcmV0dXJuIGV2ZW50cy5ub2RlQ2hhbmdlZChub2RlLnBhcmVudClcbiAgICB9LFxuICAgIHVuZG86IGZ1bmN0aW9uIChkYiwgZXZlbnRzKSB7XG4gICAgICB2YXIgbm9kZSA9IHRoaXMuc2F2ZWQubm9kZXNbMF1cbiAgICAgICAgLCBwYXJlbnQgPSBkYi5ub2Rlc1tub2RlLnBhcmVudF1cbiAgICAgICAgLCBjaGlsZHJlbiA9IHBhcmVudC5jaGlsZHJlbi5zbGljZSgpXG4gICAgICAgICwgaXggPSB0aGlzLnNhdmVkLml4XG4gICAgICBjaGlsZHJlbi5zcGxpY2UuYXBwbHkoY2hpbGRyZW4sIFtpeCwgMF0uY29uY2F0KHRoaXMuaWRzKSlcbiAgICAgIGRiLnNhdmVNYW55KHRoaXMuc2F2ZWQubm9kZXMpXG4gICAgICBkYi5zZXQobm9kZS5wYXJlbnQsICdjaGlsZHJlbicsIGNoaWxkcmVuKVxuICAgICAgcmV0dXJuIGV2ZW50cy5ub2RlQ2hhbmdlZChub2RlLnBhcmVudClcbiAgICB9LFxuICB9LFxuXG4gIGltcG9ydFRyZWVzOiB7XG4gICAgYXJnczogWydwaWQnLCAnaW5kZXgnLCAnZGF0YSddLFxuICAgIGFzeW5jOiB0cnVlLFxuICAgIGFwcGx5OiBmdW5jdGlvbiAoZGIsIGV2ZW50cywgZG9uZSkge1xuICAgICAgZGIuZHVtcCh0aGlzLnBpZCwgdGhpcy5kYXRhLCB0aGlzLmluZGV4LCAoZXJyLCBjcmVhdGVkKSA9PiB7XG4gICAgICAgIHRoaXMuY3JlYXRlZCA9IGNyZWF0ZWQgXG4gICAgICAgIGRvbmUoZXJyLCBldmVudHMubm9kZUNoYW5nZWQodGhpcy5waWQpKVxuICAgICAgfSlcbiAgICB9LFxuXG4gICAgdW5kbzogZnVuY3Rpb24gKGRiLCBldmVudHMsIGRvbmUpIHtcbiAgICAgIGRiLnNldCh0aGlzLnBpZCwgJ2NoaWxkcmVuJywgdGhpcy5jcmVhdGVkLm9sZENoaWxkcmVuKVxuICAgICAgZGIucmVtb3ZlTWFueSh0aGlzLmNyZWF0ZWQuaWRzKVxuICAgICAgZG9uZShudWxsLCBldmVudHMubm9kZUNoYW5nZWQodGhpcy5waWQpKVxuICAgIH1cbiAgfSxcblxuICBtb3ZlOiB7XG4gICAgYXJnczogWydpZCcsICducGlkJywgJ25pbmRleCcsICduZXh0SXNSb290J10sXG4gICAgYXBwbHk6IGZ1bmN0aW9uIChkYiwgZXZlbnRzKSB7XG4gICAgICB0aGlzLm9waWQgPSBkYi5ub2Rlc1t0aGlzLmlkXS5wYXJlbnRcbiAgICAgIHRoaXMub2luZGV4ID0gZGIucmVtb3ZlQ2hpbGQodGhpcy5vcGlkLCB0aGlzLmlkKVxuICAgICAgaWYgKHRoaXMub2luZGV4ID09PSAtMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vZGUgaXMgbm90IGEgY2hpbGQgb2YgaXRzIHBhcmVudCcpXG4gICAgICB9XG5cbiAgICAgIHZhciB1bkNvbGxhcHNlID0gIXRoaXMubmV4dElzUm9vdFxuICAgICAgaWYgKCF0aGlzLm5waWQpIHtcbiAgICAgICAgdW5Db2xsYXBzZSA9IGZhbHNlXG4gICAgICAgIHRoaXMubnBpZCA9IHRoaXMub3BpZFxuICAgICAgICBpZiAodGhpcy5vaW5kZXggPCB0aGlzLm5pbmRleCkge1xuICAgICAgICAgIHRoaXMubmluZGV4IC09IDFcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBkYi5pbnNlcnRDaGlsZCh0aGlzLm5waWQsIHRoaXMuaWQsIHRoaXMubmluZGV4KVxuICAgICAgZGIuc2V0KHRoaXMuaWQsICdwYXJlbnQnLCB0aGlzLm5waWQpXG4gICAgICBpZiAodW5Db2xsYXBzZSAmJiBkYi5ub2Rlc1t0aGlzLm5waWRdLmNvbGxhcHNlZCkge1xuICAgICAgICBkYi5zZXQodGhpcy5ucGlkLCAnY29sbGFwc2VkJywgZmFsc2UpXG4gICAgICAgIHRoaXMud2FzQ29sbGFwc2VkID0gdHJ1ZVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMub3BpZCA9PT0gdGhpcy5ucGlkKSB7XG4gICAgICAgIHJldHVybiBldmVudHMubm9kZUNoYW5nZWQodGhpcy5ucGlkKVxuICAgICAgfVxuICAgICAgcmV0dXJuIFtcbiAgICAgICAgZXZlbnRzLm5vZGVDaGFuZ2VkKHRoaXMub3BpZCksXG4gICAgICAgIGV2ZW50cy5ub2RlQ2hhbmdlZCh0aGlzLm5waWQpXG4gICAgICBdXG4gICAgfSxcblxuICAgIHVuZG86IGZ1bmN0aW9uIChkYiwgZXZlbnRzKSB7XG4gICAgICBkYi5yZW1vdmVDaGlsZCh0aGlzLm5waWQsIHRoaXMuaWQpXG4gICAgICBkYi5pbnNlcnRDaGlsZCh0aGlzLm9waWQsIHRoaXMuaWQsIHRoaXMub2luZGV4KVxuICAgICAgZGIuc2V0KHRoaXMuaWQsICdwYXJlbnQnLCB0aGlzLm9waWQpXG4gICAgICBpZiAodGhpcy53YXNDb2xsYXBzZWQpIHtcbiAgICAgICAgZGIuc2V0KHRoaXMubnBpZCwgJ2NvbGxhcHNlZCcsIHRydWUpXG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vcGlkID09PSB0aGlzLm5waWQpIHtcbiAgICAgICAgcmV0dXJuIGV2ZW50cy5ub2RlQ2hhbmdlZCh0aGlzLm5waWQpXG4gICAgICB9XG4gICAgICByZXR1cm4gW1xuICAgICAgICBldmVudHMubm9kZUNoYW5nZWQodGhpcy5vcGlkKSxcbiAgICAgICAgZXZlbnRzLm5vZGVDaGFuZ2VkKHRoaXMubnBpZClcbiAgICAgIF1cbiAgICB9LFxuICB9LFxuXG4gIG1vdmVNYW55OiB7XG4gICAgYXJnczogWydpZHMnLCAnbnBpZCcsICduaW5kZXgnLCAnbmV4dElzUm9vdCddLFxuICAgIGFwcGx5OiBmdW5jdGlvbiAoZGIsIGV2ZW50cykge1xuICAgICAgdGhpcy5vcGlkID0gZGIubm9kZXNbdGhpcy5pZHNbMF1dLnBhcmVudFxuICAgICAgdGhpcy5vaW5kZXggPSBkYi5yZW1vdmVDaGlsZCh0aGlzLm9waWQsIHRoaXMuaWRzWzBdLCB0aGlzLmlkcy5sZW5ndGgpXG4gICAgICBpZiAodGhpcy5vaW5kZXggPT09IC0xKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbm9kZSBpcyBub3QgYSBjaGlsZCBvZiBpdHMgcGFyZW50JylcbiAgICAgIH1cblxuICAgICAgdmFyIHVuQ29sbGFwc2UgPSAhdGhpcy5uZXh0SXNSb290XG4gICAgICBpZiAoIXRoaXMubnBpZCkge1xuICAgICAgICB1bkNvbGxhcHNlID0gZmFsc2VcbiAgICAgICAgdGhpcy5ucGlkID0gdGhpcy5vcGlkXG4gICAgICB9XG4gICAgICBpZiAodGhpcy5ucGlkID09PSB0aGlzLm9waWQpIHtcbiAgICAgICAgaWYgKHRoaXMub2luZGV4IDwgdGhpcy5uaW5kZXgpIHtcbiAgICAgICAgICB0aGlzLm5pbmRleCAtPSB0aGlzLmlkcy5sZW5ndGggLSAxXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZGIuaW5zZXJ0Q2hpbGRyZW4odGhpcy5ucGlkLCB0aGlzLmlkcywgdGhpcy5uaW5kZXgpXG4gICAgICBkYi5zZXRNYW55KCdwYXJlbnQnLCB0aGlzLmlkcywgdGhpcy5ucGlkKVxuICAgICAgaWYgKHVuQ29sbGFwc2UgJiYgZGIubm9kZXNbdGhpcy5ucGlkXS5jb2xsYXBzZWQpIHtcbiAgICAgICAgZGIuc2V0KHRoaXMubnBpZCwgJ2NvbGxhcHNlZCcsIGZhbHNlKVxuICAgICAgICB0aGlzLndhc0NvbGxhcHNlZCA9IHRydWVcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm9waWQgPT09IHRoaXMubnBpZCkge1xuICAgICAgICByZXR1cm4gZXZlbnRzLm5vZGVDaGFuZ2VkKHRoaXMubnBpZClcbiAgICAgIH1cbiAgICAgIHJldHVybiBbXG4gICAgICAgIGV2ZW50cy5ub2RlQ2hhbmdlZCh0aGlzLm9waWQpLFxuICAgICAgICBldmVudHMubm9kZUNoYW5nZWQodGhpcy5ucGlkKVxuICAgICAgXVxuICAgIH0sXG5cbiAgICB1bmRvOiBmdW5jdGlvbiAoZGIsIGV2ZW50cykge1xuICAgICAgZGIucmVtb3ZlQ2hpbGQodGhpcy5ucGlkLCB0aGlzLmlkc1swXSwgdGhpcy5pZHMubGVuZ3RoKVxuICAgICAgZGIuaW5zZXJ0Q2hpbGRyZW4odGhpcy5vcGlkLCB0aGlzLmlkcywgdGhpcy5vaW5kZXgpXG4gICAgICBkYi5zZXRNYW55KCdwYXJlbnQnLCB0aGlzLmlkcywgdGhpcy5vcGlkKVxuICAgICAgaWYgKHRoaXMud2FzQ29sbGFwc2VkKSB7XG4gICAgICAgIGRiLnNldCh0aGlzLm5waWQsICdjb2xsYXBzZWQnLCB0cnVlKVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMub3BpZCA9PT0gdGhpcy5ucGlkKSB7XG4gICAgICAgIHJldHVybiAnbm9kZTonICsgdGhpcy5ucGlkXG4gICAgICB9XG4gICAgICByZXR1cm4gWydub2RlOicgKyB0aGlzLm9waWQsICdub2RlOicgKyB0aGlzLm5waWRdXG4gICAgfSxcbiAgfSxcblxuICBjcmVhdGU6IHtcbiAgICBhcmdzOiBbJ3BpZCcsICdpeCcsICd0eXBlJywgJ2NvbnRlbnQnXSxcbiAgICBhcHBseTogZnVuY3Rpb24gKGRiKSB7XG4gICAgICB0aGlzLmlkID0gZGIuY3JlYXRlKHRoaXMucGlkLCB0aGlzLml4LCB0aGlzLmNvbnRlbnQsIHRoaXMudHlwZSlcbiAgICAgIHJldHVybiAnbm9kZTonICsgdGhpcy5waWRcbiAgICB9LFxuICAgIHVuZG86IGZ1bmN0aW9uIChkYikge1xuICAgICAgZGIucmVtb3ZlQ2hpbGQodGhpcy5waWQsIHRoaXMuaWQpXG4gICAgICB0aGlzLnNhdmVkID0gZGIubm9kZXNbdGhpcy5pZF1cbiAgICAgIGRiLnJlbW92ZSh0aGlzLmlkKVxuICAgICAgcmV0dXJuICdub2RlOicgKyB0aGlzLnBpZFxuICAgIH0sXG4gICAgcmVkbzogZnVuY3Rpb24gKGRiKSB7XG4gICAgICBkYi5zYXZlKHRoaXMuaWQsIHRoaXMuc2F2ZWQpXG4gICAgICBkYi5pbnNlcnRDaGlsZCh0aGlzLnBpZCwgdGhpcy5pZCwgdGhpcy5peClcbiAgICAgIHJldHVybiAnbm9kZTonICsgdGhpcy5waWRcbiAgICB9LFxuICB9LFxuXG59XG4iLCJcbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIG1vZGVzOiB7XG4gICAgLy8gc3dpdGNoIG1vZGVzXG4gICAgJ3Zpc3VhbCBtb2RlJzoge1xuICAgICAgbm9ybWFsOiAndiwgc2hpZnQrdicsXG4gICAgfSxcbiAgICAnbm9ybWFsIG1vZGUnOiB7XG4gICAgICB0aXRsZTogJ2JhY2sgdG8gbm9ybWFsIG1vZGUnLFxuICAgICAgaW5zZXJ0OiAnZXNjYXBlJyxcbiAgICAgIHZpc3VhbDogJ2VzY2FwZSwgdiwgc2hpZnQrdicsXG4gICAgfSxcbiAgfSxcblxuICBlZGl0aW5nOiB7XG4gICAgLy8gc3dpdGNoIHRvIGluc2VydCBtb2RlXG4gICAgJ2VkaXQnOiB7XG4gICAgICBub3JtYWw6ICdlbnRlciwgYSwgc2hpZnQrYSwgZjInLFxuICAgIH0sXG4gICAgJ2VkaXQgc3RhcnQnOiB7XG4gICAgICB0aXRsZTogJ2VkaXQgYXQgc3RhcnQnLFxuICAgICAgbm9ybWFsOiAnaSwgc2hpZnQraScsXG4gICAgfSxcbiAgICAnY2hhbmdlJzoge1xuICAgICAgdGl0bGU6ICdyZXBsYWNlIGNvbnRlbnRzJyxcbiAgICAgIG5vcm1hbDogJ2MgYywgc2hpZnQrYycsXG4gICAgICB2aXN1YWw6ICdjLCBzaGlmdCtjJyxcbiAgICB9LFxuICAgICdyZW1vdmUnOiB7XG4gICAgICBub3JtYWw6ICdkIGQsIHNoaWZ0K2QsIGRlbGV0ZScsXG4gICAgICB2aXN1YWw6ICdkLCBzaGlmdCtkLCBkZWxldGUnLFxuICAgIH0sXG4gIH0sXG5cbn1cblxuIiwiLypcbiAqIFNvIHRoaXMgYXJjaGl0ZWN0dXJlIG9wZW5zIHVwIHRoZSBwb3NzaWJpbGl0eSBvZiBkb2luZyBtdWx0aXBsZSB2aWV3cywgYnV0XG4gKiBJJ20gbm90IHRvdGFsbHkgc3VyZSBob3cgdG8gbWFrZSBpdCBidWlsZCBuYXR1cmFsbHkuIEkgZG9uJ3Qgd2FudCBtdWx0aXBsZVxuICogbWFpbnN0b3Jlcy4gQWxzbywgSSBkb24ndCB0aGluayBhIG1peGluIHdvdWxkIGN1dCBpdC4gSSB0aGluayBJJ2xsIG5lZWQgdG9cbiAqIG1ha2UgYSBNdWx0aVZpZXdTdG9yZSB0aGF0IGtub3dzIGFib3V0IG11bHRpcGxlIHZpZXdzLCBtdWx0aXBsZSBcImFjdGl2ZXNcIixcbiAqIFwic2VsZWN0aW9uc1wiLCBhbmQgXCJyb290c1wiLiBBbmQgYSB2aWV3IGNhbiByZWdpc3RlciBpdHNlbGYgYW5kIHNheSBcImhleSBJJ21cbiAqIGEgbmV3IHZpZXcsIEkgY2FyZSBhYm91dCB4XCIuXG4gKiBcbiAqIEJ1dCB3aGVuIGFuIGluZGl2aWR1YWwgbm9kZSB3YW50cyB0byBsaXN0ZW4gdG8gYSBzdG9yZSwgSSBkb24ndCB3YW50IHRvXG4gKiB1cGRhdGUgaXQgd2hlbiBhIGRpZmZlcmVudCB2aWV3IGlzIGdldHRpbmcgYSBzZWxlY3Rpb24gdXBkYXRlLiBBbmQgc28gZm9yXG4gKiB2aWV3IHNwZWNpZmljIHVwZGF0ZXMgKGxpa2UgYWN0aXZlLCBzZWxlY3Rpb24sIGV0YyksIEknbGwgaGF2ZSB0aGUgbm9kZXNcbiAqIGxpc3RlbiB0byBhIGBub2RlOjxpZD46dmlldzFgIGV2ZW50LiBUaGF0IHNlZW1zIGxpa2UgaXQgd291bGQgbWFrZSBzZW5zZS5cbiAqIEJ1dCBmb3Igbm93LCB3aXRoIG9ubHkgb25lIHZpZXcsIEkgY2FuIGp1c3Qgb3ZlcmxvYWQgdGhlIG1haW4gYG5vZGU6PGlkPmBcbiAqIGV2ZW50LiBBd2Vzb21lXG4gKi9cblxudmFyIEJhc2VTdG9yZSA9IHJlcXVpcmUoJy4vYmFzZScpXG52YXIgZXh0ZW5kID0gcmVxdWlyZSgnLi4vdXRpbC9leHRlbmQnKVxudmFyIENvbW1hbmRlZ2VyID0gcmVxdWlyZSgnLi9jb21tYW5kZWdlcicpXG5cbm1vZHVsZS5leHBvcnRzID0gTWFpblN0b3JlXG5cbmZ1bmN0aW9uIE1haW5TdG9yZShvcHRpb25zKSB7XG4gIHRoaXMuZGIgPSBvcHRpb25zLmRiXG5cbiAgdGhpcy5jbGVhclZpZXdzKClcbiAgdGhpcy5fZ2xvYmFscyA9IHt9XG4gIHRoaXMuX2NvbnRleHRNZW51ID0gbnVsbFxuXG4gIEJhc2VTdG9yZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG5cbiAgdGhpcy5jbWQgPSBuZXcgQ29tbWFuZGVnZXIoXG4gICAgdGhpcy5jaGFuZ2VkLmJpbmQodGhpcyksXG4gICAgKGlkLCB2aWQpID0+IHRoaXMudmlld0FjdGlvbignc2V0QWN0aXZlJywgdmlkLCBpZCksXG4gICAgdGhpcy5kYixcbiAgICB0aGlzLl9ldmVudHNcbiAgKVxufVxuXG5NYWluU3RvcmUucHJvdG90eXBlID0gZXh0ZW5kKE9iamVjdC5jcmVhdGUoQmFzZVN0b3JlLnByb3RvdHlwZSksIHtcbiAgY29uc3RydWN0b3I6IE1haW5TdG9yZSxcblxuICBjbGVhclZpZXdzOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy52aWV3cyA9IHt9XG4gICAgdGhpcy5fYWN0aW9ucyA9IHt9XG4gICAgdGhpcy5fZXZlbnRzID0ge31cbiAgICBpZiAodGhpcy5jbWQpIHtcbiAgICAgIHRoaXMuY21kLmV2ZW50cyA9IHRoaXMuX2V2ZW50c1xuICAgIH1cbiAgICB0aGlzLl9nZXR0ZXJzID0ge31cbiAgICB0aGlzLl9uZXh0Vmlld0lkID0gMVxuICAgIHRoaXMuYWN0aXZlVmlldyA9IDFcbiAgfSxcblxuICBoZWFkZXJWaWV3OiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZpZXcgPSB7fVxuICAgIHZpZXcuZXZlbnRzID0gdGhpcy5ldmVudHMsXG4gICAgdmlldy5vbiA9IHRoaXMub24uYmluZCh0aGlzKVxuICAgIHZpZXcub2ZmID0gdGhpcy5vZmYuYmluZCh0aGlzKVxuICAgIHZpZXcuZ2xvYmFscyA9IHRoaXMuX2dsb2JhbHNcbiAgICB2aWV3LmFjdGlvbnMgPSBleHRlbmQoe1xuICAgICAgZGI6IHRoaXMuZGIsXG4gICAgICBldmVudHM6IHZpZXcuZXZlbnRzLFxuICAgICAgcGFyZW50OiB0aGlzLFxuICAgICAgZ2xvYmFsczogdGhpcy5fZ2xvYmFscyxcbiAgICAgIGNoYW5nZWQ6IHRoaXMuY2hhbmdlZC5iaW5kKHRoaXMpLFxuICAgIH0sIHRoaXMuYWN0aW9ucylcbiAgICB2aWV3LmdldHRlcnMgPSBleHRlbmQoe1xuICAgICAgZ2xvYmFsczogdGhpcy5fZ2xvYmFscyxcbiAgICAgIHBhcmVudDogdGhpcyxcbiAgICAgIGRiOiB0aGlzLmRiLFxuICAgIH0sIHRoaXMuZ2V0dGVycylcblxuICAgIHJldHVybiB2aWV3XG4gIH0sXG5cbiAgdW5yZWdpc3RlclZpZXc6IGZ1bmN0aW9uIChpZCkge1xuICAgIGRlbGV0ZSB0aGlzLnZpZXdzW2lkXVxuICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbaWRdXG4gICAgZGVsZXRlIHRoaXMuX2FjdGlvbnNbaWRdXG4gICAgZGVsZXRlIHRoaXMuX2dldHRlcnNbaWRdXG4gICAgaWYgKGlkID09PSB0aGlzLmFjdGl2ZVZpZXcpIHtcbiAgICAgIHRoaXMuYWN0aXZlVmlldyA9ICtPYmplY3Qua2V5cyh0aGlzLnZpZXdzKVswXVxuICAgICAgdGhpcy5jaGFuZ2VkKHRoaXMuZXZlbnRzLmFjdGl2ZVZpZXdDaGFuZ2VkKCkpXG4gICAgfVxuICB9LFxuXG4gIC8vIGNyZWF0ZSBhIHByb3h5IG9iamVjdCBmb3IgdGhlIHN0b3JlIHRoYXQgaXMgc3BlY2lmaWMgdG8gYSBzaW5nbGUgdmlld1xuICByZWdpc3RlclZpZXc6IGZ1bmN0aW9uIChyb290LCBleHRyYUFjdGlvbnMpIHtcbiAgICB2YXIgaWQgPSB0aGlzLl9uZXh0Vmlld0lkKytcbiAgICBpZiAoIXJvb3QgfHwgIXRoaXMuZGIubm9kZXNbcm9vdF0pIHJvb3QgPSB0aGlzLmRiLnJvb3RcbiAgICB0aGlzLnZpZXdzW2lkXSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIHJvb3Q6IHJvb3QsXG4gICAgICBhY3RpdmU6IHJvb3QsXG4gICAgICBzZWxlY3RlZDogbnVsbCxcbiAgICAgIGVkaXRQb3M6IG51bGwsXG4gICAgICBtb2RlOiAnbm9ybWFsJyxcbiAgICB9XG4gICAgdGhpcy5fZXZlbnRzW2lkXSA9IGV4dGVuZCh7dmlkOiBpZH0sIHRoaXMuZXZlbnRzKVxuICAgIHRoaXMuX2FjdGlvbnNbaWRdID0gZXh0ZW5kKHtcbiAgICAgIHZpZXc6IHRoaXMudmlld3NbaWRdLFxuICAgICAgZGI6IHRoaXMuZGIsXG4gICAgICBldmVudHM6IHRoaXMuX2V2ZW50c1tpZF0sXG4gICAgICBjaGFuZ2VkOiB0aGlzLmNoYW5nZWQuYmluZCh0aGlzKSxcbiAgICAgIHBhcmVudDogdGhpcyxcbiAgICAgIGdsb2JhbHM6IHRoaXMuX2dsb2JhbHMsXG4gICAgICBzdGFydFRyYW5zYWN0aW9uOiAoKSA9PiB0aGlzLmNtZC5zdGFydFRyYW5zYWN0aW9uKCksXG4gICAgICBzdG9wVHJhbnNhY3Rpb246ICgpID0+IHRoaXMuY21kLnN0b3BUcmFuc2FjdGlvbigpLFxuICAgICAgZXhlY3V0ZUNvbW1hbmQ6IGZ1bmN0aW9uIChjbWQsIHN0YXRlLCBzcXVhc2gsIGRvbmUpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMgJiYgJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIHNxdWFzaCkge1xuICAgICAgICAgIGRvbmUgPSBzcXVhc2hcbiAgICAgICAgICBzcXVhc2ggPSB1bmRlZmluZWRcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5jbWQuZXhlY3V0ZSh7XG4gICAgICAgICAgY21kLFxuICAgICAgICAgIHN0YXRlLFxuICAgICAgICAgIHZpZXc6IGlkLFxuICAgICAgICAgIGFjdGl2ZTogdGhpcy52aWV3c1tpZF0uYWN0aXZlLFxuICAgICAgICAgIHNxdWFzaDogc3F1YXNoLFxuICAgICAgICAgIGRvbmU6IGRvbmUsXG4gICAgICAgIH0pXG4gICAgICB9LmJpbmQodGhpcyksXG4gICAgICBleGVjdXRlQ29tbWFuZHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNvbW1hbmRzID0gW11cbiAgICAgICAgZm9yICh2YXIgaT0wOyBpPGFyZ3VtZW50cy5sZW5ndGgtMTsgaSs9Mikge1xuICAgICAgICAgIGNvbW1hbmRzLnB1c2goe1xuICAgICAgICAgICAgY21kOiBhcmd1bWVudHNbaV0sXG4gICAgICAgICAgICBzdGF0ZTogYXJndW1lbnRzW2krMV0sXG4gICAgICAgICAgICB2aWV3OiBpZCxcbiAgICAgICAgICAgIGFjdGl2ZTogdGhpcy52aWV3c1tpZF0uYWN0aXZlXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCAlIDIgPT0gMSkge1xuICAgICAgICAgIGNvbW1hbmRzW2NvbW1hbmRzLmxlbmd0aC0xXS5kb25lID0gYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGgtMV1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5jbWQuZXhlY3V0ZUNvbW1hbmRzLmFwcGx5KHRoaXMuY21kLCBjb21tYW5kcylcbiAgICAgIH0uYmluZCh0aGlzKSxcbiAgICB9LCB0aGlzLmFjdGlvbnMsIGV4dHJhQWN0aW9ucylcbiAgICB0aGlzLl9nZXR0ZXJzW2lkXSA9IGV4dGVuZCh7XG4gICAgICB2aWV3OiB0aGlzLnZpZXdzW2lkXSxcbiAgICAgIGdsb2JhbHM6IHRoaXMuX2dsb2JhbHMsXG4gICAgICBwYXJlbnQ6IHRoaXMsXG4gICAgICBkYjogdGhpcy5kYixcbiAgICB9LCB0aGlzLmdldHRlcnMpXG5cbiAgICBpZiAoIXRoaXMuYWN0aXZlVmlldykge1xuICAgICAgdGhpcy5hY3RpdmVWaWV3ID0gaWRcbiAgICB9XG4gICAgdGhpcy5jaGFuZ2VkKHRoaXMuZXZlbnRzLmFjdGl2ZVZpZXdDaGFuZ2VkKCkpXG5cbiAgICByZXR1cm4ge1xuICAgICAgaWQsXG4gICAgICB2aWV3OiB0aGlzLnZpZXdzW2lkXSxcbiAgICAgIGFjdGlvbnM6IHRoaXMuX2FjdGlvbnNbaWRdLFxuICAgICAgZ2V0dGVyczogdGhpcy5fZ2V0dGVyc1tpZF0sXG4gICAgICBldmVudHM6IHRoaXMuX2V2ZW50c1tpZF0sXG4gICAgICBnbG9iYWxzOiB0aGlzLl9nbG9iYWxzLFxuICAgICAgb246IHRoaXMub24uYmluZCh0aGlzKSxcbiAgICAgIG9mZjogdGhpcy5vZmYuYmluZCh0aGlzKSxcbiAgICB9XG4gIH0sXG5cbiAgY3VycmVudFZpZXdBY3Rpb25zOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FjdGlvbnNbdGhpcy5hY3RpdmVWaWV3XVxuICB9LFxuXG4gIC8vIGp1c3QgdGhlIGBzdG9yZWAgcGFydCBvZiB0aGUgcGx1Z2luXG4gIGFkZFBsdWdpbjogZnVuY3Rpb24gKHBsdWdpbiwgYWxsUGx1Z2lucykge1xuICAgIEJhc2VTdG9yZS5wcm90b3R5cGUuYWRkUGx1Z2luLmNhbGwodGhpcywgcGx1Z2luLCBhbGxQbHVnaW5zKVxuXG4gICAgaWYgKHBsdWdpbi5nZXR0ZXJzKSB7XG4gICAgICBmb3IgKHZhciBuYW1lIGluIHBsdWdpbi5nZXR0ZXJzKSB7XG4gICAgICAgIHRoaXMuZ2V0dGVyc1tuYW1lXSA9IHBsdWdpbi5nZXR0ZXJzW25hbWVdXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwbHVnaW4uZXZlbnRzKSB7XG4gICAgICBmb3IgKHZhciBuYW1lIGluIHBsdWdpbi5ldmVudHMpIHtcbiAgICAgICAgdGhpcy5ldmVudHNbbmFtZV0gPSBwbHVnaW4uZXZlbnRzW25hbWVdXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwbHVnaW4uY29tbWFuZHMpIHtcbiAgICAgIHRoaXMuY21kcy5hZGRDb21tYW5kcyhwbHVnaW4uY29tbWFuZHMpXG4gICAgfVxuICB9LFxuXG4gIHZpZXdBY3Rpb246IGZ1bmN0aW9uIChuYW1lLCBpZCwgLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLl9hY3Rpb25zW2lkXVtuYW1lXS5hcHBseSh0aGlzLl9hY3Rpb25zW2lkXSwgYXJncylcbiAgfSxcblxuICBldmVudHM6IHtcbiAgICBub2RlQ2hhbmdlZDogKGlkKSA9PiAnbm9kZTonICsgaWQsXG4gICAgbm9kZVZpZXdDaGFuZ2VkOiBmdW5jdGlvbiAoaWQpIHsgcmV0dXJuIHRoaXMubm9kZUNoYW5nZWQoaWQpICsgJzp2aWV3OicgKyB0aGlzLnZpZCB9LFxuXG4gICAgYWN0aXZlVmlld0NoYW5nZWQ6ICgpID0+ICdhY3RpdmUtdmlldycsXG4gICAgYWN0aXZlTm9kZUNoYW5nZWQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICdhY3RpdmUtbm9kZTonICsgdGhpcy52aWQgfSxcbiAgICByb290Q2hhbmdlZDogZnVuY3Rpb24gKCkgeyByZXR1cm4gJ3Jvb3Q6JyArIHRoaXMudmlkIH0sXG4gICAgbW9kZUNoYW5nZWQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICdtb2RlOicgKyB0aGlzLnZpZCB9LFxuICAgIGFjdGl2ZU1vZGVDaGFuZ2VkOiBmdW5jdGlvbiAoKSB7IHJldHVybiAnbW9kZTphY3RpdmUnIH0sXG4gICAgY2hhbmdlZDogKCkgPT4gJ2NoYW5nZWQnXG4gIH0sXG5cbiAgYWN0aW9uczogcmVxdWlyZSgnLi9hY3Rpb25zJyksXG5cbiAgLy8gc2FtZSBkZWFsIGFzIGFjdGlvbnNcbiAgZ2V0dGVyczoge1xuICAgIGdldE5vZGU6IGZ1bmN0aW9uIChpZCkge1xuICAgICAgcmV0dXJuIHRoaXMuZGIubm9kZXNbaWRdXG4gICAgfSxcblxuICAgIGdldEFjdGl2ZTogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5hY3RpdmVcbiAgICB9LFxuXG4gICAgaXNBY3RpdmVWaWV3OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmlkID09PSB0aGlzLnBhcmVudC5hY3RpdmVWaWV3XG4gICAgfSxcblxuICAgIGlzQWN0aXZlOiBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHJldHVybiBpZCA9PT0gdGhpcy52aWV3LmFjdGl2ZVxuICAgIH0sXG5cbiAgICBpc1NlbGVjdGVkOiBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuc2VsZWN0aW9uICYmIHRoaXMudmlldy5zZWxlY3Rpb24uaW5kZXhPZihpZCkgIT09IC0xXG4gICAgfSxcblxuICAgIGVkaXRTdGF0ZTogZnVuY3Rpb24gKGlkKSB7XG4gICAgICB2YXIgZWRpdGluZyA9IHRoaXMudmlldy5tb2RlID09PSAnaW5zZXJ0JyAmJiBpZCA9PT0gdGhpcy52aWV3LmFjdGl2ZVxuICAgICAgcmV0dXJuIGVkaXRpbmcgJiYgdGhpcy52aWV3LmVkaXRQb3NcbiAgICB9LFxuICB9XG59KVxuXG4iLCJcbm1vZHVsZS5leHBvcnRzID0gZW5zdXJlSW5WaWV3XG5cbmZ1bmN0aW9uIGVuc3VyZUluVmlldyhpdGVtKSB7XG4gIHZhciBiYiA9IGl0ZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgdmFyIHBhcmVudCA9IGl0ZW0ucGFyZW50Tm9kZVxuICB2YXIgcnggPSAvKGF1dG98c2Nyb2xsKS9cbiAgdmFyIHN0ID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUocGFyZW50KVxuICB3aGlsZSAocGFyZW50LnBhcmVudE5vZGUgJiYgIXJ4LnRlc3Qoc3Qub3ZlcmZsb3cgKyBzdC5vdmVyZmxvd1kpICYmIHBhcmVudCAhPT0gZG9jdW1lbnQuYm9keSkge1xuICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlXG4gICAgc3QgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShwYXJlbnQpXG4gIH1cbiAgdmFyIHBveCA9IHBhcmVudCA9PT0gZG9jdW1lbnQuYm9keSA/IHtcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICB3aWR0aDogd2luZG93LmlubmVyV2lkdGgsXG4gICAgICAgIGhlaWdodDogd2luZG93LmlubmVySGVpZ2h0LFxuICAgICAgICBib3R0b206IHdpbmRvdy5pbm5lckhlaWdodCxcbiAgICAgICAgcmlnaHQ6IHdpbmRvdy5pbm5lcldpZHRoLFxuICAgICAgfSA6IHBhcmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgICwgaGVpZ2h0ID0gYmIuYm90dG9tIC0gYmIudG9wXG4gICAgLCBwSGVpZ2h0ID0gcG94LmJvdHRvbSAtIHBveC50b3BcbiAgICAsIG1hcmdpbiA9IDEwMFxuICBpZiAoaGVpZ2h0ICsgbWFyZ2luICogMiA+IHBIZWlnaHQpIHtcbiAgICBtYXJnaW4gPSAxMFxuICB9XG4gIGlmIChoZWlnaHQgKyBtYXJnaW4gKiAyID4gcEhlaWdodCkge1xuICAgIGlmIChiYi50b3AgPiBwb3gudG9wICsgbWFyZ2luKSB7XG4gICAgICBzY3JvbGxNZShwYXJlbnQsIHBhcmVudC5zY3JvbGxUb3AgKyBiYi50b3AgLSBwb3gudG9wIC0gbWFyZ2luKVxuICAgIH0gZWxzZSBpZiAoYmIuYm90dG9tIDwgcG94LmJvdHRvbSAtIG1hcmdpbikge1xuICAgICAgc2Nyb2xsTWUocGFyZW50LCBwYXJlbnQuc2Nyb2xsVG9wIC0gKHBveC5ib3R0b20gLSBiYi5ib3R0b20gLSBtYXJnaW4pKVxuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuICB2YXIgZGVzdFxuICBpZiAoYmIudG9wIDwgcG94LnRvcCArIG1hcmdpbikge1xuICAgIGRlc3QgPSBwYXJlbnQuc2Nyb2xsVG9wIC0gKHBveC50b3AgLSBiYi50b3AgKyBtYXJnaW4pXG4gIH0gZWxzZSBpZiAoYmIuYm90dG9tID4gcG94LmJvdHRvbSAtIG1hcmdpbikge1xuICAgIGRlc3QgPSBwYXJlbnQuc2Nyb2xsVG9wICsgYmIuYm90dG9tIC0gcG94LmJvdHRvbSArIG1hcmdpblxuICB9IGVsc2Uge1xuICAgIHJldHVyblxuICB9XG4gIGlmIChkZXN0IDwgMCkgZGVzdCA9IDBcbiAgaWYgKGRlc3QgPiBwYXJlbnQuc2Nyb2xsSGVpZ2h0IC0gcG94LmhlaWdodCkgZGVzdCA9IHBhcmVudC5zY3JvbGxIZWlnaHQgLSBwb3guaGVpZ2h0XG4gIHNjcm9sbE1lKHBhcmVudCwgZGVzdClcbn1cblxudmFyIHNjcm9sbGluZyA9IFtdXG4gICwgdGltZXJzID0gW11cblxuZnVuY3Rpb24gc2Nyb2xsTWUocGFyZW50LCBkZXN0KSB7XG4gIHZhciBpeCA9IHNjcm9sbGluZy5pbmRleE9mKHBhcmVudClcbiAgaWYgKGl4ICE9PSAtMSkge1xuICAgIGNsZWFySW50ZXJ2YWwodGltZXJzW2l4XSlcbiAgfSBlbHNlIHtcbiAgICBpeCA9IHNjcm9sbGluZy5sZW5ndGhcbiAgICBzY3JvbGxpbmcucHVzaChwYXJlbnQpXG4gIH1cbiAgaWYgKE1hdGguYWJzKHBhcmVudC5zY3JvbGxUb3AgLSBkZXN0KSA8IDE1MCkge1xuICAgIHBhcmVudC5zY3JvbGxUb3AgPSBkZXN0XG4gICAgcmV0dXJuIHNjcm9sbGluZy5wb3AoKVxuICB9XG4gIHZhciBzdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGl4ID0gc2Nyb2xsaW5nLmluZGV4T2YocGFyZW50KVxuICAgICAgc2Nyb2xsaW5nLnNwbGljZShpeCwgMSlcbiAgICAgIHRpbWVycy5zcGxpY2UoaXgsIDEpXG4gICAgICBjbGVhckludGVydmFsKGl2YWwpXG4gIH1cbiAgdmFyIGxhc3RQb3MgPSBudWxsLy9wYXJlbnQuc2Nyb2xsVG9wXG4gIHZhciBpdmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgIGlmIChNYXRoLmFicyhwYXJlbnQuc2Nyb2xsVG9wIC0gZGVzdCkgPCA1IHx8IHBhcmVudC5zY3JvbGxUb3AgPT09IGxhc3RQb3MpIHtcbiAgICAgIHBhcmVudC5zY3JvbGxUb3AgPSBkZXN0XG4gICAgICByZXR1cm4gc3RvcCgpXG4gICAgfVxuICAgIC8vIGxhc3RQb3MgPSBwYXJlbnQuc2Nyb2xsVG9wXG4gICAgcGFyZW50LnNjcm9sbFRvcCArPSAoZGVzdCAtIHBhcmVudC5zY3JvbGxUb3ApIC8gNVxuICB9LCAxMCk7XG4gIHRpbWVyc1tpeF0gPSBpdmFsXG59XG5cbiIsIlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIGZvciAodmFyIGk9MTsgaTxhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICBmb3IgKHZhciBuYW1lIGluIGFyZ3VtZW50c1tpXSkge1xuICAgICAgdGFyZ2V0W25hbWVdID0gYXJndW1lbnRzW2ldW25hbWVdXG4gICAgfVxuICB9XG4gIHJldHVybiB0YXJnZXRcbn1cblxuIiwiXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgdXA6IHNsaWRlVXAsXG4gIGRvd246IHNsaWRlRG93bixcbn1cblxuLy8gc3BlZWQ6IHRpbWUgdG8gc2xpZGUgMTAwcHhcbmZ1bmN0aW9uIHNsaWRlRG93bihlbCwgc3BlZWQsIG1heHRpbWUpIHtcbiAgc3BlZWQgPSBzcGVlZCB8fCAuMlxuICBtYXh0aW1lID0gbWF4dGltZSB8fCAxXG4gIHZhciBjdXJoID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpLmhlaWdodFxuICBlbC5zdHlsZS50cmFuc2l0aW9uID0gJ25vbmUnXG4gIGVsLnN0eWxlLmhlaWdodCA9ICdhdXRvJ1xuICB2YXIgaCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKS5oZWlnaHRcbiAgaWYgKGN1cmggPT09IGgpIHJldHVyblxuICBlbC5zdHlsZS5oZWlnaHQgPSBjdXJoXG4gIGVsLnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbidcbiAgdmFyIGR1ciA9IHBhcnNlSW50KGgsIDEwKSAqIHNwZWVkIC8gMTAwXG4gIGlmIChkdXIgPiBtYXh0aW1lKSBkdXIgPSBtYXh0aW1lXG4gIC8vIHRyaWdnZXIgcmVmbG93XG4gIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKS5oZWlnaHRcbiAgZWwuc3R5bGUudHJhbnNpdGlvbiA9ICdoZWlnaHQgJyArIGR1ciArICdzIGVhc2UnXG4gIGVsLnN0eWxlLmhlaWdodCA9IGhcbiAgYWZ0ZXJUcmFuc2l0aW9uKGVsLCBmdW5jdGlvbiAoKSB7XG4gICAgZWwuc3R5bGUudHJhbnNpdGlvbiA9ICcnXG4gICAgZWwuc3R5bGUub3ZlcmZsb3cgPSAndmlzaWJsZSdcbiAgICBlbC5zdHlsZS5oZWlnaHQgPSAnYXV0bydcbiAgfSlcbn1cblxuLy8gc3BlZWQ6IHRpbWUgdG8gc2xpZGUgMTAwcHhcbmZ1bmN0aW9uIHNsaWRlVXAoZWwsIHNwZWVkLCBtYXh0aW1lKSB7XG4gIHNwZWVkID0gc3BlZWQgfHwgLjI7XG4gIG1heHRpbWUgPSBtYXh0aW1lIHx8IDFcbiAgdmFyIGN1cmggPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCkuaGVpZ2h0XG4gIGlmIChjdXJoID09PSAnMCcpIHJldHVyblxuICBlbC5zdHlsZS50cmFuc2l0aW9uID0gJ25vbmUnXG4gIGVsLnN0eWxlLmhlaWdodCA9IGN1cmhcbiAgdmFyIGR1ciA9IHBhcnNlSW50KGN1cmgsIDEwKSAqIHNwZWVkIC8gMTAwXG4gIGlmIChkdXIgPiBtYXh0aW1lKSBkdXIgPSBtYXh0aW1lXG4gIGVsLnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbidcbiAgLy8gdHJpZ2dlciByZWZsb3dcbiAgd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpLmhlaWdodFxuICBlbC5zdHlsZS50cmFuc2l0aW9uID0gJ2hlaWdodCAnICsgZHVyICsgJ3MgZWFzZSdcbiAgZWwuc3R5bGUuaGVpZ2h0ID0gJzAnXG4gIGFmdGVyVHJhbnNpdGlvbihlbCwgZnVuY3Rpb24gKCkge1xuICAgIGVsLnN0eWxlLmhlaWdodCA9ICcwJ1xuICAgIGVsLnN0eWxlLnRyYW5zaXRpb24gPSAnJ1xuICAgIGVsLnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbidcbiAgfSlcbn1cblxuZnVuY3Rpb24gYWZ0ZXJUcmFuc2l0aW9uKGVsLCBmbikge1xuICBlbC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgZnVuY3Rpb24gZG9uZSgpIHtcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgZG9uZSlcbiAgICBmbigpXG4gIH0pXG59XG4iLCJcbnZhciB1dWlkID0gcmVxdWlyZSgnLi4vbGliL3V1aWQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRyZWVzVG9NYXBcblxuZnVuY3Rpb24gdHJlZXNUb01hcCh0cmVlcywgcGlkLCBrZWVwSWRzKSB7XG4gIHZhciBub2RlcyA9IHt9XG4gIGlmICghQXJyYXkuaXNBcnJheSh0cmVlcykpIHtcbiAgICB0cmVlcyA9IFt0cmVlc11cbiAgfVxuXG4gIHZhciBwcm9jZXNzQ2hpbGQgPSAocGlkLCBjaGlsZCkgPT4ge1xuICAgIHZhciBpZCA9IChrZWVwSWRzICYmIGNoaWxkLmlkKSA/IGNoaWxkLmlkIDogdXVpZCgpXG4gICAgdmFyIG5vZGUgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBjb250ZW50OiBjaGlsZC5jb250ZW50LFxuICAgICAgY2hpbGRyZW46IFtdLFxuICAgICAgcGFyZW50OiBwaWQsXG4gICAgfVxuICAgIG5vZGVzW2lkXSA9IG5vZGVcbiAgICBmb3IgKHZhciBuYW1lIGluIGNoaWxkKSB7XG4gICAgICBpZiAoWydjb250ZW50JywgJ2NoaWxkcmVuJywgJ2lkJ10uaW5kZXhPZihuYW1lKSAhPT0gLTEpIGNvbnRpbnVlO1xuICAgICAgbm9kZVtuYW1lXSA9IGNoaWxkW25hbWVdXG4gICAgfVxuICAgIGlmIChjaGlsZC5jaGlsZHJlbiAmJiBjaGlsZC5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgIG5vZGUuY2hpbGRyZW4gPSBjaGlsZC5jaGlsZHJlbi5tYXAocHJvY2Vzc0NoaWxkLmJpbmQodGhpcywgaWQpKVxuICAgIH1cbiAgICByZXR1cm4gaWRcbiAgfVxuICB2YXIgcm9vdHMgPSB0cmVlcy5tYXAocHJvY2Vzc0NoaWxkLmJpbmQodGhpcywgcGlkKSlcbiAgcmV0dXJuIHtub2Rlcywgcm9vdHN9XG59XG5cbiIsIlxubW9kdWxlLmV4cG9ydHMgPSB2ZXJpZnlOb2Rlc1xuXG5mdW5jdGlvbiB2ZXJpZnlOb2Rlcyhyb290LCBtYXApIHtcbiAgaWYgKCFtYXBbcm9vdF0pIHJldHVybiBuZXcgRXJyb3IoXCJSb290IG5vZGUgbm90IGZvdW5kXCIpXG4gIHJldHVybiB2ZXJpZnlOb2RlKG1hcFtyb290XSwgbWFwKVxufVxuXG5mdW5jdGlvbiB2ZXJpZnlOb2RlKG5vZGUsIG1hcCkge1xuICBpZiAobm9kZS5jaGlsZHJlbikge1xuICAgIGZvciAodmFyIGk9MDsgaTxub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSBtYXBbbm9kZS5jaGlsZHJlbltpXV1cbiAgICAgIGlmICghY2hpbGQpIHtcbiAgICAgICAgY2hpbGQgPSBtYXBbbm9kZS5jaGlsZHJlbltpXV0gPSB7aWQ6IG5vZGUuY2hpbGRyZW5baV0sIGNvbnRlbnQ6ICcqY29udGVudHMgbWlzc2luZyonLCBwYXJlbnQ6IG5vZGUuaWQsIGNoaWxkcmVuOiBbXX1cbiAgICAgICAgY29uc29sZS5sb2coXCJDaGlsZCBub2RlIG5vdCBmb3VuZDogXCIgKyBub2RlLmNoaWxkcmVuW2ldICsgJyBvZiAnICsgbm9kZS5pZClcbiAgICAgICAgLy8gcmV0dXJuIG5ldyBFcnJvcihcIkNoaWxkIG5vZGUgbm90IGZvdW5kOiBcIiArIG5vZGUuY2hpbGRyZW5baV0gKyAnIG9mICcgKyBub2RlLmlkKVxuICAgICAgfVxuICAgICAgaWYgKGNoaWxkLnBhcmVudCAhPT0gbm9kZS5pZCkge1xuICAgICAgICBjb25zb2xlLmxvZygnTWlzcGFyZW50JylcbiAgICAgICAgY29uc29sZS5sb2cobm9kZSlcbiAgICAgICAgY29uc29sZS5sb2coY2hpbGQpXG4gICAgICAgIGNoaWxkLnBhcmVudCA9IG5vZGUuaWRcbiAgICAgICAgLy8gcmV0dXJuIG5ldyBFcnJvcihcIk1pc3BhcmVudGVkLiBcIiArIGNoaWxkLmlkICsgXCIgc2hvdWxkIGhhdmUgcGFyZW50IFwiICsgbm9kZS5pZCArIFwiIGJ1dCBpbnN0ZWFkIGl0IGlzIFwiICsgY2hpbGQucGFyZW50KVxuICAgICAgfVxuICAgICAgdmFyIGVyciA9IHZlcmlmeU5vZGUoY2hpbGQsIG1hcClcbiAgICAgIGlmIChlcnIpIHJldHVybiBlcnJcbiAgICB9XG4gIH1cbn1cbiIsIlxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKVxuICAsIFBUID0gUmVhY3QuUHJvcFR5cGVzXG5cbnZhciBUZXh0YXJlYSA9IHJlcXVpcmUoJy4vdGV4dGFyZWEtZ3JvdycpXG5cbi8qKlxuICogVGhlIHJlcXVpcmVkIGludGVyZmFjZSwgaW4gYWRkaXRpb24gdG8gdGhlIHNob3duIHByb3BzLCBpc1xuICogOiBmb2N1cyhib29sIGF0U3RhcnQpXG4gKi9cbnZhciBFZGl0b3IgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIHByb3BUeXBlczoge1xuICAgIHZhbHVlOiBQVC5zdHJpbmcsXG4gICAgb25CbHVyOiBQVC5mdW5jLFxuICAgIG9uQ2hhbmdlOiBQVC5mdW5jLFxuICAgIGNyZWF0ZUFmdGVyOiBQVC5mdW5jLFxuICAgIGdvRG93bjogUFQuZnVuYyxcbiAgICBnb1VwOiBQVC5mdW5jLFxuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mb2N1cygpXG4gIH0sXG5cbiAgaXNGb2N1c2VkOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVmcy50ZXh0LmlzRm9jdXNlZCgpXG4gIH0sXG5cbiAgZm9jdXM6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnJlZnMudGV4dC5mb2N1cy5hcHBseSh0aGlzLnJlZnMudGV4dCwgYXJndW1lbnRzKVxuICB9LFxuXG4gIF9vbkNoYW5nZTogZnVuY3Rpb24gKGUpIHtcbiAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKGUudGFyZ2V0LnZhbHVlKVxuICB9LFxuXG4gIF9vbktleURvd246IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGUuc2hpZnRLZXkgJiYgZS5rZXkgPT09ICdFbnRlcicpIHtcbiAgICAgIHJldHVybiBlLnN0b3BQcm9wYWdhdGlvbigpXG4gICAgfVxuICAgIHZhciB0ZXh0ID0gdGhpcy5yZWZzLnRleHRcbiAgICAgICwgbGluZVxuICAgICAgLCBwb3NcblxuICAgIGlmIChlLmtleSA9PT0gJ0Fycm93RG93bicgJiYgIWUuc2hpZnRLZXkpIHtcbiAgICAgIGxpbmUgPSB0ZXh0LmdldEN1cnNvckxpbmUoKVxuICAgICAgaWYgKGxpbmUgPT09IC0xIHx8IGxpbmUgPT09IDEpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuZ29Eb3duKCkpIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZS5rZXkgPT09ICdBcnJvd1VwJyAmJiAhZS5zaGlmdEtleSkge1xuICAgICAgbGluZSA9IHRleHQuZ2V0Q3Vyc29yTGluZSgpXG4gICAgICBpZiAobGluZSA9PT0gMCB8fCBsaW5lID09PSAxKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmdvVXAoKSkge1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlLmtleSA9PT0gJ0Fycm93UmlnaHQnICYmICFlLnNoaWZ0S2V5KSB7XG4gICAgICBwb3MgPSB0ZXh0LmdldEN1cnNvclBvcygpXG4gICAgICBpZiAocG9zID09PSAtMSB8fCBwb3MgPT09IDEpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5nb0Rvd24odHJ1ZSlcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlLmtleSA9PT0gJ0Fycm93TGVmdCcgJiYgIWUuc2hpZnRLZXkpIHtcbiAgICAgIHBvcyA9IHRleHQuZ2V0Q3Vyc29yUG9zKClcbiAgICAgIGlmIChwb3MgPT09IDAgfHwgcG9zID09PSAxKSB7XG4gICAgICAgIHRoaXMucHJvcHMuZ29VcCgpXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZS5rZXkgPT09ICdCYWNrc3BhY2UnKSB7XG4gICAgICBpZiAoIXRoaXMucHJvcHMudmFsdWUubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMucHJvcHMucmVtb3ZlRW1wdHkoKVxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgIH0gZWxzZSBpZiAodGV4dC5nZXRDdXJzb3JTcGxpdCgpID09PSAwKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgICB0aGlzLnByb3BzLmpvaW5VcChudWxsLCB0aGlzLnByb3BzLnZhbHVlKVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZS5rZXkgPT09ICdFbnRlcicpIHtcbiAgICAgIGlmICghZS5zaGlmdEtleSAmJiAhZS5jdHJsS2V5ICYmICFlLmFsdEtleSAmJiB0aGlzLnByb3BzLnZhbHVlLmluZGV4T2YoJ1xcbicpID09PSAtMSkge1xuICAgICAgICB0ZXh0LmJsdXIoKVxuICAgICAgICBwb3MgPSB0ZXh0LmdldEN1cnNvclNwbGl0KClcbiAgICAgICAgaWYgKHBvcyA8IHRoaXMucHJvcHMudmFsdWUubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5wcm9wcy5vbkNoYW5nZSh0aGlzLnByb3BzLnZhbHVlLnNsaWNlKDAsIHBvcykpXG4gICAgICAgICAgdGhpcy5wcm9wcy5jcmVhdGVBZnRlcihudWxsLCB0aGlzLnByb3BzLnZhbHVlLnNsaWNlKDAsIHBvcyksIHRoaXMucHJvcHMudmFsdWUuc2xpY2UocG9zKSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnByb3BzLmNyZWF0ZUFmdGVyKClcbiAgICAgICAgfVxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgIH0gZWxzZSBpZiAoZS5jdHJsS2V5ICYmIHRoaXMucHJvcHMudmFsdWUuaW5kZXhPZignXFxuJykgIT09IC0xKSB7XG4gICAgICAgIHBvcyA9IHRleHQuZ2V0Q3Vyc29yU3BsaXQoKVxuICAgICAgICBpZiAocG9zIDwgdGhpcy5wcm9wcy52YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKHRoaXMucHJvcHMudmFsdWUuc2xpY2UoMCwgcG9zKSlcbiAgICAgICAgICB0aGlzLnByb3BzLmNyZWF0ZUFmdGVyKG51bGwsIHRoaXMucHJvcHMudmFsdWUuc2xpY2UoMCwgcG9zKSwgdGhpcy5wcm9wcy52YWx1ZS5zbGljZShwb3MpKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucHJvcHMuY3JlYXRlQWZ0ZXIoKVxuICAgICAgICB9XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gPFRleHRhcmVhXG4gICAgICByZWY9XCJ0ZXh0XCJcbiAgICAgIHZhbHVlPXt0aGlzLnByb3BzLnZhbHVlfVxuICAgICAgb25DaGFuZ2U9e3RoaXMuX29uQ2hhbmdlfVxuICAgICAgb25QYXN0ZT17dGhpcy5wcm9wcy5vblBhc3RlfVxuICAgICAgb25CbHVyPXt0aGlzLnByb3BzLm9uQmx1cn1cbiAgICAgIG9uS2V5RG93bj17dGhpcy5fb25LZXlEb3dufS8+XG4gIH1cbn0pXG5cbm1vZHVsZS5leHBvcnRzID0gRWRpdG9yXG5cbiIsIlxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QvYWRkb25zJylcbnZhciBjeCA9IFJlYWN0LmFkZG9ucy5jbGFzc1NldFxudmFyIFBUID0gUmVhY3QuUHJvcFR5cGVzXG5cbnZhciBtYXJrZWQgPSByZXF1aXJlKCdtYXJrZWQnKVxudmFyIHJlbmRlcmVyID0gbmV3IG1hcmtlZC5SZW5kZXJlcigpXG5yZW5kZXJlci5saW5rID0gZnVuY3Rpb24gKGhyZWYsIHRpdGxlLCB0ZXh0KSB7XG4gIHJldHVybiAnPGEgaHJlZj1cIicgKyBocmVmICsgJ1wiIHRhcmdldD1cIl9ibGFua1wiIHRpdGxlPVwiJyArIHRpdGxlICsgJ1wiPicgKyB0ZXh0ICsgJzwvYT4nO1xufVxuXG5tYXJrZWQuc2V0T3B0aW9ucyh7XG4gIGdmbTogdHJ1ZSxcbiAgLy8gc2FuaXRpemU6IHRydWUsXG4gIHRhYmxlczogdHJ1ZSxcbiAgYnJlYWtzOiB0cnVlLFxuICBwZWRhbnRpYzogZmFsc2UsXG4gIHNtYXJ0TGlzdHM6IHRydWUsXG4gIHNtYXJ0eXBhbnRzOiB0cnVlLFxuICByZW5kZXJlcjogcmVuZGVyZXJcbn0pXG5cbnZhciBEZWZhdWx0UmVuZGVyZXIgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIF9vbkNsaWNrKGUpIHtcbiAgICBpZiAoZS50YXJnZXQubm9kZU5hbWUgPT09ICdBJykgcmV0dXJuXG4gICAgdGhpcy5wcm9wcy5vbkNsaWNrKGUpXG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiA8c3BhbiBjbGFzc05hbWU9XCJ0cmVlZF9ib2R5X3JlbmRlcmVkXCJcbiAgICAgIG9uQ2xpY2s9e3RoaXMuX29uQ2xpY2t9XG4gICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17e1xuICAgICAgICBfX2h0bWw6IHRoaXMucHJvcHMuY29udGVudCA/ICBtYXJrZWQodGhpcy5wcm9wcy5jb250ZW50ICsgJycpIDogJydcbiAgICAgIH19Lz5cbiAgfVxufSlcblxubW9kdWxlLmV4cG9ydHMgPSBEZWZhdWx0UmVuZGVyZXJcbiIsIlxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QvYWRkb25zJylcbiAgLCBjeCA9IFJlYWN0LmFkZG9ucy5jbGFzc1NldFxuICAsIFBUID0gUmVhY3QuUHJvcFR5cGVzXG4gICwgZW5zdXJlSW5WaWV3ID0gcmVxdWlyZSgnLi4vLi4vdXRpbC9lbnN1cmUtaW4tdmlldycpXG4gICwgRGVmYXVsdEVkaXRvciA9IHJlcXVpcmUoJy4vZGVmYXVsdC1lZGl0b3InKVxuICAsIERlZmF1bHRSZW5kZXJlciA9IHJlcXVpcmUoJy4vZGVmYXVsdC1yZW5kZXJlcicpXG5cbi8vIGEgbW9yZSBjb21wbGV4IGJvZHkgd291bGQgc2hvdyBkaWZmZXJlbnQgdGhpbmdzIGJhc2VkIG9uIHRoZSB0eXBlIG9mIG5vZGUuXG52YXIgU2ltcGxlQm9keSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgcHJvcFR5cGVzOiB7XG4gICAgZWRpdG9yOiBQVC5mdW5jLFxuICAgIHJlbmRlcmVyOiBQVC5mdW5jLFxuICAgIG5vZGU6IFBULm9iamVjdCxcbiAgICBpc0FjdGl2ZTogUFQuYm9vbCxcbiAgICBlZGl0U3RhdGU6IFBULm9uZU9mVHlwZShbUFQuc3RyaW5nLCBQVC5ib29sXSksXG4gICAgYWN0aW9uczogUFQub2JqZWN0LFxuICAgIHN0b3JlOiBQVC5vYmplY3QsXG4gIH0sXG5cbiAgX29uQ2xpY2s6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5lZGl0U3RhdGUpIHtcbiAgICAgIC8vIHRoaXMucHJvcHMuYWN0aW9ucy5ub3JtYWxNb2RlKHRoaXMucHJvcHMubm9kZS5pZClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wcm9wcy5hY3Rpb25zLmVkaXQodGhpcy5wcm9wcy5ub2RlLmlkKVxuICAgIH1cbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVuZGVyZXI6IG51bGwsXG4gICAgICBlZGl0b3I6IG51bGwsXG4gICAgfVxuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjb250ZW50OiB0aGlzLnByb3BzLm5vZGUuY29udGVudFxuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBmdW5jdGlvbiAobmV4dFByb3BzKSB7XG4gICAgaWYgKCFuZXh0UHJvcHMuZWRpdFN0YXRlICYmIHRoaXMucHJvcHMuZWRpdFN0YXRlKSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZS5jb250ZW50ICE9PSB0aGlzLnByb3BzLm5vZGUuY29udGVudCkge1xuICAgICAgICB0aGlzLnByb3BzLmFjdGlvbnMuc2V0Q29udGVudCh0aGlzLnByb3BzLm5vZGUuaWQsIHRoaXMuc3RhdGUuY29udGVudClcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBjb250ZW50OiBuZXh0UHJvcHMubm9kZS5jb250ZW50XG4gICAgfSlcbiAgfSxcblxuICBfb25DaGFuZ2U6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0U3RhdGUoe2NvbnRlbnQ6IHZhbHVlfSlcbiAgfSxcblxuICBfb25CbHVyOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUuY29udGVudCAhPT0gdGhpcy5wcm9wcy5ub2RlLmNvbnRlbnQpIHtcbiAgICAgIHRoaXMucHJvcHMuYWN0aW9ucy5zZXRDb250ZW50KHRoaXMucHJvcHMubm9kZS5pZCwgdGhpcy5zdGF0ZS5jb250ZW50KVxuICAgIH1cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmICh0aGlzLmlzTW91bnRlZCgpICYmICF0aGlzLnByb3BzLnN0b3JlLnZpZXcud2luZG93Qmx1ciAmJlxuICAgICAgICAgIHRoaXMucHJvcHMuaXNBY3RpdmUgJiYgdGhpcy5yZWZzLnRleHQgJiZcbiAgICAgICAgICAodGhpcy5yZWZzLnRleHQuaXNGb2N1c2VkICYmICF0aGlzLnJlZnMudGV4dC5pc0ZvY3VzZWQoKSkpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5hY3Rpb25zLm5vcm1hbE1vZGUoKVxuICAgICAgfVxuICAgIH0sIDgwKVxuICB9LFxuXG4gIF9vbkNvbnRleHRNZW51OiBmdW5jdGlvbiAoZSkge1xuICAgIGlmICh0aGlzLnByb3BzLnN0b3JlLnZpZXcubW9kZSA9PT0gJ2luc2VydCcgJiYgdGhpcy5wcm9wcy5ub2RlLmlkID09PSB0aGlzLnByb3BzLnN0b3JlLnZpZXcuYWN0aXZlKSByZXR1cm5cbiAgICB0aGlzLnByb3BzLmFjdGlvbnMuc2V0QWN0aXZlKHRoaXMucHJvcHMubm9kZS5pZClcbiAgICB0aGlzLnByb3BzLmFjdGlvbnMuc2hvd0NvbnRleHRNZW51KGUuY2xpZW50WCwgZS5jbGllbnRZLCB0aGlzLnByb3BzLm5vZGUuaWQpXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLnByb3BzLmVkaXRTdGF0ZSkgcmV0dXJuXG4gICAgZW5zdXJlSW5WaWV3KHRoaXMucmVmcy50ZXh0LmdldERPTU5vZGUoKSlcbiAgICB0aGlzLnJlZnMudGV4dC5mb2N1cyh0aGlzLnByb3BzLmVkaXRTdGF0ZSlcbiAgfSxcblxuICBjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICBpZiAoIXByZXZQcm9wcy5lZGl0U3RhdGUgJiYgdGhpcy5wcm9wcy5lZGl0U3RhdGUpIHtcbiAgICAgIGVuc3VyZUluVmlldyh0aGlzLnJlZnMudGV4dC5nZXRET01Ob2RlKCkpXG4gICAgICB0aGlzLnJlZnMudGV4dC5mb2N1cyh0aGlzLnByb3BzLmVkaXRTdGF0ZSlcbiAgICB9XG4gIH0sXG5cbiAgZWRpdG9yOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIEN0cmwgPSB0aGlzLnByb3BzLmVkaXRvciB8fCBEZWZhdWx0RWRpdG9yXG4gICAgY29uc3QgcHJvcHMgPSB7XG4gICAgICByZWY6IFwidGV4dFwiLFxuICAgICAgdmFsdWU6IHRoaXMuc3RhdGUuY29udGVudCxcbiAgICAgIG5vZGU6IHRoaXMucHJvcHMubm9kZSxcbiAgICAgIHN0b3JlOiB0aGlzLnByb3BzLnN0b3JlLFxuICAgICAgZ29Eb3duOiB0aGlzLnByb3BzLmFjdGlvbnMuZ29Eb3duLmJpbmQodGhpcy5wcm9wcy5hY3Rpb25zKSxcbiAgICAgIGdvVXA6IHRoaXMucHJvcHMuYWN0aW9ucy5nb1VwLmJpbmQodGhpcy5wcm9wcy5hY3Rpb25zKSxcbiAgICAgIGpvaW5VcDogdGhpcy5wcm9wcy5hY3Rpb25zLmpvaW5VcC5iaW5kKHRoaXMucHJvcHMuYWN0aW9ucyksXG4gICAgICBjcmVhdGVBZnRlcjogdGhpcy5wcm9wcy5hY3Rpb25zLmNyZWF0ZUFmdGVyLmJpbmQodGhpcy5wcm9wcy5hY3Rpb25zKSxcbiAgICAgIHJlbW92ZUVtcHR5OiB0aGlzLnByb3BzLmFjdGlvbnMucmVtb3ZlRW1wdHkuYmluZCh0aGlzLnByb3BzLmFjdGlvbnMpLFxuICAgICAgb25DaGFuZ2U6IHRoaXMuX29uQ2hhbmdlLFxuICAgICAgb25CbHVyOiB0aGlzLl9vbkJsdXJcbiAgICB9XG4gICAgaWYgKEN0cmwuaXNSZWFjdExlZ2FjeUZhY3RvcnkpIHtcbiAgICAgIHJldHVybiA8Q3RybCB7Li4ucHJvcHN9Lz5cbiAgICB9XG4gICAgcmV0dXJuIEN0cmwocHJvcHMpXG4gIH0sXG5cbiAgcmVuZGVyZXI6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMucmVuZGVyZXIpIHtcbiAgICAgIHJldHVybiA8RGVmYXVsdFJlbmRlcmVyIG9uQ2xpY2s9e3RoaXMuX29uQ2xpY2t9IGNvbnRlbnQ9e3RoaXMucHJvcHMubm9kZS5jb250ZW50fS8+XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnByb3BzLnJlbmRlcmVyLmNhbGwodGhpcylcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY2xhc3NOYW1lID0gY3goe1xuICAgICAgJ3RyZWVkX2JvZHknOiB0cnVlXG4gICAgfSlcbiAgICBjbGFzc05hbWUgKz0gJyB0cmVlZF9ib2R5LXR5cGUtJyArIHRoaXMucHJvcHMubm9kZS50eXBlXG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWV9IG9uQ29udGV4dE1lbnU9e3RoaXMuX29uQ29udGV4dE1lbnV9PlxuICAgICAge3RoaXMucHJvcHMuZWRpdFN0YXRlID8gdGhpcy5lZGl0b3IoKSA6IHRoaXMucmVuZGVyZXIoKX1cbiAgICA8L2Rpdj5cbiAgfVxufSlcblxubW9kdWxlLmV4cG9ydHMgPSBTaW1wbGVCb2R5XG5cbiIsIlxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKVxuXG52YXIgVGV4dGFyZWEgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cbiAgZ2V0Q3Vyc29yU3BsaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYSA9IHRoaXMucmVmcy5hcmVhLmdldERPTU5vZGUoKVxuICAgIHJldHVybiBhLnNlbGVjdGlvbkVuZFxuICB9LFxuXG4gIC8vIC0xIGF0IGVuZFxuICAvLyAwIGF0IHN0YXJ0XG4gIC8vIDEgbm8gY29udGVudFxuICAvLyAyIHNlbGVjdGlvbiBub3QgY29sbGFwc2VkXG4gIC8vIDMgc29tZXdoZXJlIGluIHRoZSBtaWRkbGVcbiAgZ2V0Q3Vyc29yUG9zOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGEgPSB0aGlzLnJlZnMuYXJlYS5nZXRET01Ob2RlKClcbiAgICBpZiAoYS5zZWxlY3Rpb25TdGFydCAhPT0gYS5zZWxlY3Rpb25FbmQpIHtcbiAgICAgIHJldHVybiAyXG4gICAgfVxuICAgIGlmICghYS52YWx1ZS5sZW5ndGgpIHJldHVybiAxXG4gICAgaWYgKGEuc2VsZWN0aW9uU3RhcnQgPT09IDApIHJldHVybiAwXG4gICAgaWYgKGEuc2VsZWN0aW9uU3RhcnQgPT09IGEudmFsdWUubGVuZ3RoKSByZXR1cm4gLTFcbiAgICByZXR1cm4gM1xuICB9LFxuXG4gIC8vIDAgPT0gc3RhcnRcbiAgLy8gLTEgPT0gZW5kXG4gIC8vIDEgPT0gdGhlcmUncyBvbmx5IG9uZSBsaW5lXG4gIC8vIDIgPT0gbWlkZGxlIHNvbWV3aGVyZVxuICBnZXRDdXJzb3JMaW5lOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHMgPSB0aGlzLnJlZnMuc2hhZG93LmdldERPTU5vZGUoKVxuICAgICAgLCBhID0gdGhpcy5yZWZzLmFyZWEuZ2V0RE9NTm9kZSgpXG4gICAgICAsIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUocylcbiAgICAgICwgbGluZUhlaWdodCA9IHRoaXMuX2ZvbnRTaXplIC8gLjg3NVxuICAgIGlmIChzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCAtIHBhcnNlSW50KHN0eWxlLnBhZGRpbmdUb3ApIC0gcGFyc2VJbnQoc3R5bGUucGFkZGluZ0JvdHRvbSkgPD0gbGluZUhlaWdodCAqIDEuNSkge1xuICAgICAgLy8gc2luZ2xlIGxpbmVcbiAgICAgIHJldHVybiAxXG4gICAgfVxuICAgIGlmIChhICE9PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50KSByZXR1cm4gMlxuICAgIGlmIChhLnNlbGVjdGlvblN0YXJ0ICE9PSBhLnNlbGVjdGlvbkVuZCkgcmV0dXJuIDJcbiAgICBpZiAoYS5zZWxlY3Rpb25TdGFydCA9PT0gMCkgcmV0dXJuIDBcbiAgICBpZiAoYS5zZWxlY3Rpb25FbmQgPT09IHRoaXMucHJvcHMudmFsdWUubGVuZ3RoKSByZXR1cm4gLTFcbiAgICB2YXIgdCA9IHMuZmlyc3RDaGlsZC5ub2RlVmFsdWVcbiAgICAgICwgYnQgPSB0aGlzLnByb3BzLnZhbHVlLnNsaWNlKDAsIGEuc2VsZWN0aW9uU3RhcnQpXG4gICAgICAsIGF0ID0gdGhpcy5wcm9wcy52YWx1ZVthLnNlbGVjdGlvblN0YXJ0XVxuICAgIGlmIChhdCAhPT0gJyAnICYmIGF0ICE9PSAnXFxuJyAmJiBhdCkge1xuICAgICAgYnQgKz0gdGhpcy5wcm9wcy52YWx1ZS5zbGljZShhLnNlbGVjdGlvblN0YXJ0KS5tYXRjaCgvW15cXHNdKy8pWzBdXG4gICAgfVxuICAgIHMuZmlyc3RDaGlsZC5ub2RlVmFsdWUgPSBidCArICcgJ1xuICAgIHZhciBoID0gcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHRcbiAgICBzLmZpcnN0Q2hpbGQubm9kZVZhbHVlID0gdFxuICAgIGlmIChoIDw9IGxpbmVIZWlnaHQgKiAxLjUpIHJldHVybiAwXG4gICAgdmFyIGZ1bGwgPSBhLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodFxuICAgIGlmIChmdWxsIC0gbGluZUhlaWdodCAqIC41IDwgaCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICB9LFxuXG4gIHJlc2l6ZTogZnVuY3Rpb24gKCkge1xuICAgIHZhciBzaGFkb3cgPSB0aGlzLnJlZnMuc2hhZG93LmdldERPTU5vZGUoKVxuICAgICAgLCBhcmVhID0gdGhpcy5yZWZzLmFyZWEuZ2V0RE9NTm9kZSgpXG4gICAgdmFyIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoc2hhZG93KVxuICAgIHRoaXMuX2ZvbnRTaXplID0gcGFyc2VJbnQoc3R5bGUuZm9udFNpemUsIDEwKVxuICAgIGFyZWEuc3R5bGUuaGVpZ2h0ID0gc3R5bGUuaGVpZ2h0XG4gICAgLy8gdmFyIGggPSB0aGlzLnJlZnMuc2hhZG93LmdldERPTU5vZGUoKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHRcbiAgICAvLyBpZiAoaCA8IHRoaXMucHJvcHMuZm9udFNpemUgLyAuODc1KSBoID0gdGhpcy5wcm9wcy5mb250U2l6ZSAvIC44NzVcbiAgICAvLyB0aGlzLnJlZnMuYXJlYS5nZXRET01Ob2RlKCkuc3R5bGUuaGVpZ2h0ID0gaCArICdweCdcbiAgfSxcblxuICBjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnJlc2l6ZSgpXG4gIH0sXG5cbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnJlc2l6ZSgpXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMucmVzaXplKVxuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50OiBmdW5jdGlvbiAoKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMucmVzaXplKVxuICB9LFxuXG4gIGJsdXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaW5wID0gdGhpcy5yZWZzLmFyZWEuZ2V0RE9NTm9kZSgpXG4gICAgaW5wLmJsdXIoKVxuICB9LFxuXG4gIGlzRm9jdXNlZDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnJlZnMuYXJlYS5nZXRET01Ob2RlKCkgPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRcbiAgfSxcblxuICBmb2N1czogZnVuY3Rpb24gKGF0KSB7XG4gICAgdmFyIGlucCA9IHRoaXMucmVmcy5hcmVhLmdldERPTU5vZGUoKVxuICAgICAgLCBwb3MgPSAwXG4gICAgaWYgKGF0ID09PSAnZW5kJyB8fCAhYXQpIHBvcyA9IGlucC52YWx1ZS5sZW5ndGhcbiAgICBpZiAoJ251bWJlcicgPT09IHR5cGVvZiBhdCkge1xuICAgICAgcG9zID0gYXRcbiAgICB9XG4gICAgaWYgKGlucCAhPT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkgaW5wLmZvY3VzKClcbiAgICBpZiAoYXQgPT09ICdjaGFuZ2UnKSB7XG4gICAgICBpbnAuc2VsZWN0aW9uU3RhcnQgPSAwXG4gICAgICBpbnAuc2VsZWN0aW9uRW5kID0gaW5wLnZhbHVlLmxlbmd0aFxuICAgIH0gZWxzZSB7XG4gICAgICBpbnAuc2VsZWN0aW9uU3RhcnQgPSBpbnAuc2VsZWN0aW9uRW5kID0gcG9zXG4gICAgfVxuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT17XG4gICAgICAndGV4dGFyZWEtZ3JvdyAnICsgdGhpcy5wcm9wcy5jbGFzc05hbWVcbiAgICB9PlxuICAgICAgPHRleHRhcmVhXG4gICAgICAgIHJlZj0nYXJlYSdcbiAgICAgICAgY2xhc3NOYW1lPSdib2R5X2lucHV0J1xuICAgICAgICB7Li4udGhpcy5wcm9wc31cbiAgICAgICAgLz5cbiAgICAgIDxkaXZcbiAgICAgICAgcmVmPSdzaGFkb3cnXG4gICAgICAgIGNsYXNzTmFtZT0nc2hhZG93Jz5cbiAgICAgICAge3RoaXMucHJvcHMudmFsdWUgKyAnICd9XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgfVxufSlcblxubW9kdWxlLmV4cG9ydHMgPSBUZXh0YXJlYVxuXG4iLCJ2YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdC9hZGRvbnMnKVxudmFyIGN4ID0gUmVhY3QuYWRkb25zLmNsYXNzU2V0XG52YXIgUFQgPSBSZWFjdC5Qcm9wVHlwZXNcblxudmFyIEZsZXhQYW5lcyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgcHJvcFR5cGVzOiB7XG4gICAgZmxleDogUFQub2JqZWN0LFxuICAgIG9uQ2hhbmdlOiBQVC5mdW5jLmlzUmVxdWlyZWQsXG4gICAgbWFpbjogUFQucmVuZGVyYWJsZSxcbiAgICBzZWNvbmQ6IFBULnJlbmRlcmFibGUsXG4gIH0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1vdmluZzogZmFsc2UsXG4gICAgICB0bXBTaXplOiB0aGlzLnByb3BzLmZsZXguc2l6ZSxcbiAgICB9XG4gIH0sXG4gIF9zdGFydERyYWc6IGZ1bmN0aW9uIChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuICAgIHRoaXMuc2V0U3RhdGUoe2RyYWdnaW5nOiB0cnVlfSlcbiAgfSxcbiAgX29uRHJhZzogZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgc2Vjb25kID0gdGhpcy5yZWZzLnNlY29uZC5nZXRET01Ob2RlKCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHRtcFNpemU6IHRoaXMucHJvcHMuZmxleC5wb3MgPT09ICdib3R0b20nID9cbiAgICAgICAgc2Vjb25kLmJvdHRvbSAtIGUuY2xpZW50WSA6XG4gICAgICAgIHNlY29uZC5yaWdodCAtIGUuY2xpZW50WCxcbiAgICB9KVxuICB9LFxuICBfZW5kRHJhZzogZnVuY3Rpb24gKCkge1xuICAgIHZhciBkYXRhID0gdGhpcy5wcm9wcy5mbGV4XG4gICAgZGF0YS5zaXplID0gdGhpcy5zdGF0ZS50bXBTaXplXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBkcmFnZ2luZzogZmFsc2UsXG4gICAgfSwgKCkgPT4gdGhpcy5wcm9wcy5vbkNoYW5nZShkYXRhKSlcbiAgfSxcbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgaWYgKHByb3BzLmZsZXguc2l6ZSAhPT0gdGhpcy5wcm9wcy5mbGV4LnNpemUpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe3RtcFNpemU6IHByb3BzLmZsZXguc2l6ZX0pXG4gICAgfVxuICB9LFxuICBjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uIChwcmV2UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgIGlmICghcHJldlN0YXRlLmRyYWdnaW5nICYmIHRoaXMuc3RhdGUuZHJhZ2dpbmcpIHtcbiAgICAgIHBhcmVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLl9vbkRyYWcpXG4gICAgICBwYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMuX2VuZERyYWcpXG4gICAgfSBlbHNlIGlmIChwcmV2U3RhdGUuZHJhZ2dpbmcgJiYgIXRoaXMuc3RhdGUuZHJhZ2dpbmcpIHtcbiAgICAgIHBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLl9vbkRyYWcpXG4gICAgICBwYXJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMuX2VuZERyYWcpXG4gICAgfVxuICB9LFxuICBfc3dpdGNoOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGRhdGEgPSB0aGlzLnByb3BzLmZsZXhcbiAgICBkYXRhLnBvcyA9IGRhdGEucG9zID09PSAnYm90dG9tJyA/ICdzaWRlJyA6ICdib3R0b20nXG4gICAgdGhpcy5wcm9wcy5vbkNoYW5nZShkYXRhKVxuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBib3R0b20gPSB0aGlzLnByb3BzLmZsZXgucG9zID09PSAnYm90dG9tJ1xuICAgICAgLCBzZWNvbmRTdHlsZSA9IHtcbiAgICAgICAgICBvdmVyZmxvdzogJ2F1dG8nLFxuICAgICAgICB9XG4gICAgc2Vjb25kU3R5bGVbYm90dG9tID8gJ2hlaWdodCcgOiAnd2lkdGgnXSA9IHRoaXMuc3RhdGUudG1wU2l6ZVxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT17J2ZsZXgtcGFuZXMgZmxleC1wYW5lcy0nICsgKGJvdHRvbSA/ICdob3JpeicgOiAndmVydCcpfVxuICAgICAgc3R5bGU9e3tcbiAgICAgICAgZmxleERpcmVjdGlvbjogYm90dG9tID8gJ2NvbHVtbicgOiAncm93JyxcbiAgICAgIH19PlxuICAgICAgPGRpdiBjbGFzc05hbWU9J2ZsZXgtbWFpbic+e3RoaXMucHJvcHMubWFpbn08L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2ZsZXgtYmFyJyBvbk1vdXNlRG93bj17dGhpcy5fc3RhcnREcmFnfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2ZsZXgtc3dpdGNoJ1xuICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuX3N3aXRjaH1cbiAgICAgICAgICBvbk1vdXNlRG93bj17KGUpID0+IGUuc3RvcFByb3BhZ2F0aW9uKCl9Lz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiByZWY9XCJzZWNvbmRcIiBjbGFzc05hbWU9J2ZsZXgtc2Vjb25kJ1xuICAgICAgICBzdHlsZT17c2Vjb25kU3R5bGV9Pnt0aGlzLnByb3BzLnNlY29uZH08L2Rpdj5cbiAgICA8L2Rpdj5cbiAgfVxufSlcblxubW9kdWxlLmV4cG9ydHMgPSBGbGV4UGFuZXNcbiIsIlxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QvYWRkb25zJylcbnZhciBjeCA9IFJlYWN0LmFkZG9ucy5jbGFzc1NldFxudmFyIFBUID0gUmVhY3QuUHJvcFR5cGVzXG5cbnZhciBleHRlbmQgPSByZXF1aXJlKCcuLi8uLi91dGlsL2V4dGVuZCcpXG52YXIgTGlzdGVuZXIgPSByZXF1aXJlKCcuLi8uLi9saXN0ZW5lcicpXG52YXIgRm9jdXNJdGVtID0gcmVxdWlyZSgnLi9pdGVtJylcblxudmFyIFRyZWVWaWV3ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBtaXhpbnM6IFtcbiAgICBMaXN0ZW5lcihmdW5jdGlvbiAoc3RvcmUsIHByb3BzKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByb290OiBzdG9yZS52aWV3LnJvb3QsXG4gICAgICAgIG1vZGU6IHN0b3JlLnZpZXcubW9kZSxcbiAgICAgICAgaXNBY3RpdmU6IHN0b3JlLmlzQWN0aXZlVmlldygpLFxuICAgICAgfVxuICAgIH0pXG4gIF0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgcGx1Z2luczogUFQuYXJyYXksXG4gICAgbm9kZVBsdWdpbnM6IFBULmFycmF5LFxuICAgIHNraXBNaXg6IFBULmFycmF5LFxuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBza2lwTWl4OiBbXVxuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5zdG9yZSAhPT0gcHJldlByb3BzLnN0b3JlKSB7XG4gICAgICB2YXIgZSA9IHRoaXMucHJvcHMuc3RvcmUuZXZlbnRzXG4gICAgICB0aGlzLmxpc3RlbihlLnJvb3RDaGFuZ2VkKCksIGUubW9kZUNoYW5nZWQoKSwgZS5hY3RpdmVWaWV3Q2hhbmdlZCgpKVxuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnRXaWxsTW91bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZSA9IHRoaXMucHJvcHMuc3RvcmUuZXZlbnRzXG4gICAgdGhpcy5saXN0ZW4oZS5yb290Q2hhbmdlZCgpLCBlLm1vZGVDaGFuZ2VkKCksIGUuYWN0aXZlVmlld0NoYW5nZWQoKSlcbiAgfSxcblxuICBmcm9tTWl4OiBmdW5jdGlvbiAocGFydCkge1xuICAgIGlmICghdGhpcy5wcm9wcy5wbHVnaW5zKSByZXR1cm5cbiAgICBpZiAodGhpcy5wcm9wcy5za2lwTWl4LmluZGV4T2YocGFydCkgIT09IC0xKSByZXR1cm5cbiAgICB2YXIgaXRlbXMgPSBbXVxuICAgIGZvciAodmFyIGk9MDsgaTx0aGlzLnByb3BzLnBsdWdpbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBwbHVnaW4gPSB0aGlzLnByb3BzLnBsdWdpbnNbaV0uYmxvY2tzXG4gICAgICBpZiAoIXBsdWdpbiB8fCAhcGx1Z2luW3BhcnRdKSBjb250aW51ZTtcbiAgICAgIGl0ZW1zLnB1c2gocGx1Z2luW3BhcnRdKHRoaXMucHJvcHMuc3RvcmUuYWN0aW9ucywgdGhpcy5zdGF0ZSwgdGhpcy5wcm9wcy5zdG9yZSkpXG4gICAgfVxuICAgIGlmICghaXRlbXMubGVuZ3RoKSByZXR1cm4gbnVsbFxuICAgIHJldHVybiBpdGVtc1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBjbGFzc05hbWUgPSAnZm9jdXMnXG4gICAgaWYgKHRoaXMuc3RhdGUuaXNBY3RpdmUpIGNsYXNzTmFtZSArPSAnIGZvY3VzLWFjdGl2ZSdcbiAgICB2YXIgYm9kaWVzID0ge1xuICAgICAgZGVmYXVsdDoge2VkaXRvcjogbnVsbCwgcmVuZGVyZXI6IG51bGx9XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BzLm5vZGVQbHVnaW5zKSB7XG4gICAgICBmb3IgKHZhciBpPTA7IGk8dGhpcy5wcm9wcy5ub2RlUGx1Z2lucy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5ub2RlUGx1Z2luc1tpXS5ib2RpZXMpIHtcbiAgICAgICAgICBib2RpZXMgPSBleHRlbmQoYm9kaWVzLCB0aGlzLnByb3BzLm5vZGVQbHVnaW5zW2ldLmJvZGllcylcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gRm9jdXNJdGVtKHtcbiAgICAgIHN0b3JlOiB0aGlzLnByb3BzLnN0b3JlLFxuICAgICAgcGx1Z2luczogdGhpcy5wcm9wcy5ub2RlUGx1Z2lucyxcbiAgICAgIGJvZGllczogYm9kaWVzLFxuICAgICAgaWQ6IHRoaXMuc3RhdGUucm9vdFxuICAgIH0pXG4gIH0sXG59KVxuXG5tb2R1bGUuZXhwb3J0cyA9IFRyZWVWaWV3XG5cbiIsIlxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QvYWRkb25zJylcbnZhciBjeCA9IFJlYWN0LmFkZG9ucy5jbGFzc1NldFxudmFyIFBUID0gUmVhY3QuUHJvcFR5cGVzXG52YXIgU2ltcGxlQm9keSA9IHJlcXVpcmUoJy4uL2JvZHkvc2ltcGxlJylcbnZhciBGbGV4UGFuZXMgPSByZXF1aXJlKCcuL2ZsZXgtcGFuZXMnKVxuXG52YXIgTGlzdGVuZXIgPSByZXF1aXJlKCcuLi8uLi9saXN0ZW5lcicpXG5cbnZhciBGb2N1c0l0ZW0gPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIG1peGluczogW1xuICAgIExpc3RlbmVyKHtcbiAgICAgIHN0b3JlQXR0cnM6IGZ1bmN0aW9uIChnZXR0ZXJzLCBwcm9wcykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG5vZGU6IGdldHRlcnMuZ2V0Tm9kZShwcm9wcy5pZCksXG4gICAgICAgICAgaXNBY3RpdmVWaWV3OiBnZXR0ZXJzLmlzQWN0aXZlVmlldygpLFxuICAgICAgICAgIGVkaXRTdGF0ZTogZ2V0dGVycy5lZGl0U3RhdGUocHJvcHMuaWQpLFxuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICBzaG91bGRHZXROZXc6IGZ1bmN0aW9uIChuZXh0UHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIG5leHRQcm9wcy5pZCAhPT0gdGhpcy5wcm9wcy5pZCB8fCBuZXh0UHJvcHMuc3RvcmUgIT09IHRoaXMucHJvcHMuc3RvcmVcbiAgICAgIH0sXG5cbiAgICAgIGdldExpc3RlbmVyczogZnVuY3Rpb24gKHByb3BzLCBldmVudHMpIHtcbiAgICAgICAgcmV0dXJuIFtldmVudHMubm9kZUNoYW5nZWQocHJvcHMuaWQpLCBldmVudHMubm9kZVZpZXdDaGFuZ2VkKHByb3BzLmlkKV1cbiAgICAgIH0sXG4gICAgfSlcbiAgXSxcblxuICBjb21wb25lbnRXaWxsTW91bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBnZXQgcGx1Z2luIHVwZGF0ZSBmdW5jdGlvbnNcbiAgICB0aGlzLl9wbHVnaW5fdXBkYXRlcyA9IG51bGxcbiAgICB0aGlzLnByb3BzLnBsdWdpbnMuZm9yRWFjaCgocGx1Z2luKSA9PiB7XG4gICAgICBpZiAoIXBsdWdpbi5jb21wb25lbnREaWRVcGRhdGUpIHJldHVyblxuICAgICAgaWYgKCF0aGlzLl9wbHVnaW5fdXBkYXRlcykge1xuICAgICAgICB0aGlzLl9wbHVnaW5fdXBkYXRlcyA9IFtwbHVnaW4uY29tcG9uZW50RGlkVXBkYXRlXVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fcGx1Z2luX3VwZGF0ZXMucHVzaChwbHVnaW4uY29tcG9uZW50RGlkVXBkYXRlKVxuICAgICAgfVxuICAgIH0pXG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgaWQ6IFBULnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIHBsdWdpbnM6IFBULmFycmF5LFxuICAgIGJvZGllczogUFQub2JqZWN0LFxuICAgIGlzUm9vdDogUFQuYm9vbCxcbiAgfSxcblxuICBzaG91bGRDb21wb25lbnRVcGRhdGU6IGZ1bmN0aW9uIChuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICAgIHJldHVybiAoXG4gICAgICBuZXh0U3RhdGUgIT09IHRoaXMuc3RhdGUgfHxcbiAgICAgIChuZXh0UHJvcHMuaW5kZXggIT09IHRoaXMucHJvcHMuaW5kZXggJiYgbmV4dFN0YXRlLmlzQWN0aXZlKVxuICAgIClcbiAgfSxcblxuICAvKiogVXNlIHRvIGNoZWNrIHdoYXQgdGhpbmdzIGFyZSB1cGRhdGluZyB3aGVuICovXG4gIGNvbXBvbmVudERpZFVwZGF0ZTogZnVuY3Rpb24gKHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgaWYgKHRoaXMuX3BsdWdpbl91cGRhdGVzKSB7XG4gICAgICB0aGlzLl9wbHVnaW5fdXBkYXRlcy5tYXAoKGZuKSA9PiBmbi5jYWxsKHRoaXMsIHByZXZQcm9wcywgcHJldlN0YXRlKSlcbiAgICB9XG4gIH0sXG4gIC8vICoqL1xuXG4gIGZyb21NaXg6IGZ1bmN0aW9uIChwYXJ0KSB7XG4gICAgaWYgKCF0aGlzLnByb3BzLnBsdWdpbnMpIHJldHVyblxuICAgIHZhciBpdGVtcyA9IFtdXG4gICAgZm9yICh2YXIgaT0wOyBpPHRoaXMucHJvcHMucGx1Z2lucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHBsdWdpbiA9IHRoaXMucHJvcHMucGx1Z2luc1tpXS5ibG9ja3NcbiAgICAgIGlmICghcGx1Z2luIHx8ICFwbHVnaW5bcGFydF0pIGNvbnRpbnVlO1xuICAgICAgaXRlbXMucHVzaChwbHVnaW5bcGFydF0odGhpcy5zdGF0ZS5ub2RlLCB0aGlzLnByb3BzLnN0b3JlLmFjdGlvbnMsIHRoaXMuc3RhdGUsIHRoaXMucHJvcHMuc3RvcmUpKVxuICAgIH1cbiAgICBpZiAoIWl0ZW1zLmxlbmd0aCkgcmV0dXJuIG51bGxcbiAgICByZXR1cm4gaXRlbXNcbiAgfSxcblxuICBib2R5OiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGJvZHkgPSB0aGlzLnByb3BzLmJvZGllc1t0aGlzLnN0YXRlLm5vZGUudHlwZV0gfHwgdGhpcy5wcm9wcy5ib2RpZXNbJ2RlZmF1bHQnXVxuICAgIHJldHVybiA8ZGl2IHJlZj0nYm9keScgY2xhc3NOYW1lPSdmb2N1c19pdGVtX2JvZHknIHN0eWxlPXt7ZmxleDogMX19PlxuICAgICAge1NpbXBsZUJvZHkoe1xuICAgICAgICBlZGl0b3I6IGJvZHkuZWRpdG9yLFxuICAgICAgICByZW5kZXJlcjogYm9keS5yZW5kZXJlcixcbiAgICAgICAgbm9kZTogdGhpcy5zdGF0ZS5ub2RlLFxuICAgICAgICBpc0FjdGl2ZTogdHJ1ZSxcbiAgICAgICAgZWRpdFN0YXRlOiB0aGlzLnN0YXRlLmVkaXRTdGF0ZSxcbiAgICAgICAgYWN0aW9uczogdGhpcy5wcm9wcy5zdG9yZS5hY3Rpb25zLFxuICAgICAgICBzdG9yZTogdGhpcy5wcm9wcy5zdG9yZSxcbiAgICAgIH0pfVxuICAgIDwvZGl2PlxuICB9LFxuXG4gIF9vbkNoYW5nZTogZnVuY3Rpb24gKGZvY3VzKSB7XG4gICAgdGhpcy5wcm9wcy5zdG9yZS5hY3Rpb25zLnNldCh0aGlzLnByb3BzLmlkLCAnZm9jdXMnLCBmb2N1cylcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY2xhc3NOYW1lID0gY3goe1xuICAgICAgJ2ZvY3VzJzogdHJ1ZSxcbiAgICAgICdmb2N1cy1hY3RvdmUnOiB0aGlzLnN0YXRlLmlzQWN0aXZlVmlldyxcbiAgICAgICdmb2N1cy1lZGl0aW5nJzogdGhpcy5zdGF0ZS5lZGl0U3RhdGUsXG4gICAgfSlcbiAgICBjbGFzc05hbWUgKz0gJyBmb2N1c19pdGVtLXR5cGUtJyArIHRoaXMuc3RhdGUubm9kZS50eXBlXG4gICAgaWYgKHRoaXMucHJvcHMucGx1Z2lucykge1xuICAgICAgdGhpcy5wcm9wcy5wbHVnaW5zLmZvckVhY2goKHBsdWdpbikgPT4ge1xuICAgICAgICBpZiAoIXBsdWdpbi5jbGFzc2VzKSByZXR1cm5cbiAgICAgICAgdmFyIGNsYXNzZXMgPSBwbHVnaW4uY2xhc3Nlcyh0aGlzLnN0YXRlLm5vZGUsIHRoaXMuc3RhdGUpXG4gICAgICAgIGlmIChjbGFzc2VzKSBjbGFzc05hbWUgKz0gJyAnICsgY2xhc3Nlc1xuICAgICAgfSlcbiAgICB9XG4gICAgdmFyIGJvZHkgPSB0aGlzLmJvZHkoKVxuICAgIHZhciBmb2N1c1BhbmUgPSB0aGlzLmZyb21NaXgoJ2ZvY3VzLXBhbmUnKVxuICAgIGlmICghZm9jdXNQYW5lKSB7XG4gICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZX0+e2JvZHl9PC9kaXY+XG4gICAgfVxuICAgIHZhciBmb2N1cyA9IHRoaXMuc3RhdGUubm9kZS5mb2N1cyB8fCB7cG9zOiAnYm90dG9tJywgc2l6ZTogMzAwfVxuICAgIHJldHVybiA8RmxleFBhbmVzXG4gICAgICBvbkNoYW5nZT17dGhpcy5fb25DaGFuZ2V9XG4gICAgICBmbGV4PXtmb2N1c31cbiAgICAgIG1haW49e2JvZHl9XG4gICAgICBzZWNvbmQ9e2ZvY3VzUGFuZX0vPlxuICB9XG59KVxuXG5tb2R1bGUuZXhwb3J0cyA9IEZvY3VzSXRlbVxuXG5cbiIsIid1c2Ugc3RyaWN0J1xuXG52YXIgbW92ZW1lbnQgPSByZXF1aXJlKCcuL21vdmVtZW50JylcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIFRPRE86IHB1dCB0aGVzZSBpbiBhIG1peGluLCBiL2MgdGhleSBvbmx5IGFwcGx5IHRvIHRoZSB0cmVlbGlzdCB0aGlzLnZpZXc/XG4gIC8vIHRoaXMgd291bGQgYmUgdGhlIHNhbWUgbWl4aW4gdGhhdCBkb2VzIGNvbGxhcHNhYmlsaXR5PyBPciBtYXliZSB0aGVyZVxuICAvLyB3b3VsZCBiZSBhIHNpbXBsaWZpZWQgb25lIHRoYXQgZG9lc24ndCBrbm93IGFib3V0IGNvbGxhcHNpYmlsaXR5LiBTZWVtc1xuICAvLyBsaWtlIHRoZXJlIHdvdWxkIGJlIHNvbWUgZHVwbGljYXRpb25cbiAgZ29VcDogZnVuY3Rpb24gKCkge1xuICAgIHZhciB1cCA9IG1vdmVtZW50LnVwKHRoaXMudmlldy5hY3RpdmUsIHRoaXMudmlldy5yb290LCB0aGlzLmRiLm5vZGVzKVxuICAgIGlmICghdXApIHJldHVybiBmYWxzZVxuICAgIHRoaXMuc2V0QWN0aXZlKHVwKVxuICB9LFxuXG4gIHBhZ2VVcDogZnVuY3Rpb24gKCkge1xuICAgIHZhciBjdXJyID0gdGhpcy52aWV3LmFjdGl2ZVxuICAgICAgLCB1cFxuICAgIGZvciAodmFyIGk9MDsgaTwxMDsgaSsrKSB7XG4gICAgICB1cCA9IG1vdmVtZW50LnVwKGN1cnIsIHRoaXMudmlldy5yb290LCB0aGlzLmRiLm5vZGVzKVxuICAgICAgaWYgKCF1cCkgYnJlYWtcbiAgICAgIGN1cnIgPSB1cFxuICAgIH1cbiAgICB0aGlzLnNldEFjdGl2ZShjdXJyKVxuICB9LFxuXG4gIHBhZ2VEb3duOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGN1cnIgPSB0aGlzLnZpZXcuYWN0aXZlXG4gICAgICAsIGRvd25cbiAgICBmb3IgKHZhciBpPTA7IGk8MTA7IGkrKykge1xuICAgICAgZG93biA9IG1vdmVtZW50LmRvd24oY3VyciwgdGhpcy52aWV3LnJvb3QsIHRoaXMuZGIubm9kZXMpXG4gICAgICBpZiAoIWRvd24pIGJyZWFrXG4gICAgICBjdXJyID0gZG93blxuICAgIH1cbiAgICB0aGlzLnNldEFjdGl2ZShjdXJyKVxuICB9LFxuXG4gIGdvRG93bjogZnVuY3Rpb24gKGVkaXRTdGFydCkge1xuICAgIHZhciBkb3duID0gbW92ZW1lbnQuZG93bih0aGlzLnZpZXcuYWN0aXZlLCB0aGlzLnZpZXcucm9vdCwgdGhpcy5kYi5ub2RlcylcbiAgICBpZiAoIWRvd24pIHJldHVybiBmYWxzZVxuICAgIHRoaXMuc2V0QWN0aXZlKGRvd24pXG4gICAgaWYgKGVkaXRTdGFydCkgdGhpcy52aWV3LmVkaXRQb3MgPSAnc3RhcnQnXG4gIH0sXG5cbiAgZ29MZWZ0OiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5zZXRBY3RpdmUobW92ZW1lbnQubGVmdCh0aGlzLnZpZXcuYWN0aXZlLCB0aGlzLnZpZXcucm9vdCwgdGhpcy5kYi5ub2RlcykpXG4gIH0sXG5cbiAgZ29SaWdodDogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuc2V0QWN0aXZlKG1vdmVtZW50LnJpZ2h0KHRoaXMudmlldy5hY3RpdmUsIHRoaXMudmlldy5yb290LCB0aGlzLmRiLm5vZGVzKSlcbiAgfSxcblxuICBqb2luVXA6IGZ1bmN0aW9uIChpZCwgdGV4dCkge1xuICAgIGlkID0gaWQgfHwgdGhpcy52aWV3LmFjdGl2ZVxuICAgIGlmIChpZCA9PT0gdGhpcy52aWV3LnJvb3QpIHJldHVyblxuICAgIHZhciBwcmV2ID0gbW92ZW1lbnQudXAoaWQsIHRoaXMudmlldy5yb290LCB0aGlzLmRiLm5vZGVzKVxuICAgIGlmIChwcmV2ID09PSBpZCkgcmV0dXJuXG4gICAgaWYgKCFwcmV2KSByZXR1cm5cbiAgICB2YXIgY29udGVudCA9IHRoaXMuZGIubm9kZXNbcHJldl0uY29udGVudCArIHRleHRcbiAgICAgICwgYXQgPSB0aGlzLmRiLm5vZGVzW3ByZXZdLmNvbnRlbnQubGVuZ3RoXG4gICAgdGhpcy5leGVjdXRlQ29tbWFuZHMoXG4gICAgICAncmVtb3ZlJywge2lkczogW2lkXX0sXG4gICAgICAnc2V0Jywge2lkOiBwcmV2LCBhdHRyOiAnY29udGVudCcsIHZhbHVlOiBjb250ZW50fSxcbiAgICAgICgpID0+IHNldFRpbWVvdXQoXyA9PiB0aGlzLmVkaXRBdChwcmV2LCBhdCksIDApXG4gICAgKVxuICB9LFxuXG4gIGpvaW5Eb3duOiBmdW5jdGlvbiAoaWQpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGggJiYgdGhpcy52aWV3Lm1vZGUgPT09ICd2aXN1YWwnKSB7XG4gICAgICByZXR1cm4gdGhpcy5qb2luTWFueSgpXG4gICAgfVxuICAgIGlkID0gaWQgfHwgdGhpcy52aWV3LmFjdGl2ZVxuICAgIGlmIChpZCA9PT0gdGhpcy52aWV3LnJvb3QpIHJldHVyblxuICAgIHZhciBuZXh0ID0gbW92ZW1lbnQuZG93bihpZCwgdGhpcy52aWV3LnJvb3QsIHRoaXMuZGIubm9kZXMpXG4gICAgaWYgKCFuZXh0KSByZXR1cm5cbiAgICB2YXIgY29udGVudCA9IHRoaXMuZGIubm9kZXNbaWRdLmNvbnRlbnQgKyAnXFxuJyArIHRoaXMuZGIubm9kZXNbbmV4dF0uY29udGVudFxuICAgIHRoaXMuZXhlY3V0ZUNvbW1hbmRzKFxuICAgICAgJ3NldCcsIHtpZCwgYXR0cjogJ2NvbnRlbnQnLCB2YWx1ZTogY29udGVudH0sXG4gICAgICAncmVtb3ZlJywge2lkczogW25leHRdfVxuICAgIClcbiAgfSxcblxuICByZW1vdmVFbXB0eTogZnVuY3Rpb24gKGlkKSB7XG4gICAgaWQgPSBpZCB8fCB0aGlzLnZpZXcuYWN0aXZlXG4gICAgaWYgKGlkID09PSB0aGlzLnZpZXcucm9vdCkgcmV0dXJuXG4gICAgdmFyIG5leHQgPSBtb3ZlbWVudC51cChpZCwgdGhpcy52aWV3LnJvb3QsIHRoaXMuZGIubm9kZXMpXG4gICAgdGhpcy52aWV3LmFjdGl2ZSA9IG5leHRcbiAgICB0aGlzLmV4ZWN1dGVDb21tYW5kKCdyZW1vdmUnLCB7aWRzOiBbaWRdfSlcbiAgICB0aGlzLmNoYW5nZWQodGhpcy5ldmVudHMubm9kZUNoYW5nZWQobmV4dCkpXG4gIH0sXG5cbiAgcmVtb3ZlOiBmdW5jdGlvbiAoaWQpIHtcbiAgICBpZCA9IGlkIHx8IHRoaXMudmlldy5hY3RpdmVcbiAgICBpZiAoaWQgPT09IHRoaXMudmlldy5yb290KSByZXR1cm5cbiAgICB2YXIgbmV4dCwgaWRzXG4gICAgaWYgKHRoaXMudmlldy5tb2RlID09PSAndmlzdWFsJykge1xuICAgICAgaWRzID0gdGhpcy52aWV3LnNlbGVjdGlvblxuICAgICAgbmV4dCA9IG1vdmVtZW50LmRvd24oaWRzW2lkcy5sZW5ndGggLSAxXSwgdGhpcy52aWV3LnJvb3QsIHRoaXMuZGIubm9kZXMsIHRydWUpXG4gICAgICB0aGlzLnNldE1vZGUoJ25vcm1hbCcsIHRydWUpXG4gICAgfSBlbHNlIHtcbiAgICAgIGlkcyA9IFtpZF1cbiAgICAgIG5leHQgPSBtb3ZlbWVudC5kb3duKGlkLCB0aGlzLnZpZXcucm9vdCwgdGhpcy5kYi5ub2RlcywgdHJ1ZSlcbiAgICB9XG4gICAgaWYgKCFuZXh0KSB7XG4gICAgICBuZXh0ID0gbW92ZW1lbnQudXAoaWRzWzBdLCB0aGlzLnZpZXcucm9vdCwgdGhpcy5kYi5ub2RlcylcbiAgICB9XG4gICAgdGhpcy52aWV3LmFjdGl2ZSA9IG5leHRcbiAgICB0aGlzLmV4ZWN1dGVDb21tYW5kKCdyZW1vdmUnLCB7aWRzOiBpZHN9KVxuICAgIHRoaXMuY2hhbmdlZCh0aGlzLmV2ZW50cy5ub2RlQ2hhbmdlZChuZXh0KSlcbiAgfSxcblxuICBpbmRlbnQ6IGZ1bmN0aW9uIChpZCkge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCAmJiB0aGlzLnZpZXcubW9kZSA9PT0gJ3Zpc3VhbCcpIHtcbiAgICAgIHJldHVybiB0aGlzLmluZGVudE1hbnkoKVxuICAgIH1cbiAgICBpZCA9IGlkIHx8IHRoaXMudmlldy5hY3RpdmVcbiAgICB2YXIgcG9zID0gbW92ZW1lbnQuaW5kZW50KGlkLCB0aGlzLnZpZXcucm9vdCwgdGhpcy5kYi5ub2RlcylcbiAgICBpZiAoIXBvcykgcmV0dXJuXG4gICAgdmFyIHdhc0VkaXRpbmcgPSBmYWxzZVxuICAgIGlmICh0aGlzLnZpZXcubW9kZSA9PT0gJ2luc2VydCcpIHtcbiAgICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuYmx1cigpXG4gICAgICB3YXNFZGl0aW5nID0gdHJ1ZVxuICAgIH1cbiAgICB0aGlzLmV4ZWN1dGVDb21tYW5kKCdtb3ZlJywge1xuICAgICAgaWQsXG4gICAgICBucGlkOiBwb3MubnBpZCxcbiAgICAgIG5leHRJc1Jvb3Q6IHBvcy5ucGlkID09PSB0aGlzLnZpZXcucm9vdCxcbiAgICAgIG5pbmRleDogcG9zLm5pbmRleCxcbiAgICB9KVxuICAgIGlmICh3YXNFZGl0aW5nKSB7XG4gICAgICB0aGlzLmVkaXQoKVxuICAgIH1cbiAgfSxcblxuICBpbmRlbnRNYW55OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMudmlldy5tb2RlICE9PSAndmlzdWFsJykgcmV0dXJuXG4gICAgdmFyIGlkcyA9IHRoaXMudmlldy5zZWxlY3Rpb25cbiAgICB2YXIgcG9zID0gbW92ZW1lbnQuaW5kZW50KGlkc1swXSwgdGhpcy52aWV3LnJvb3QsIHRoaXMuZGIubm9kZXMpXG4gICAgaWYgKCFwb3MpIHJldHVyblxuICAgIHRoaXMuZXhlY3V0ZUNvbW1hbmQoJ21vdmVNYW55Jywge1xuICAgICAgaWRzLFxuICAgICAgbnBpZDogcG9zLm5waWQsXG4gICAgICBuZXh0SXNSb290OiBwb3MubnBpZCA9PT0gdGhpcy52aWV3LnJvb3QsXG4gICAgICBuaW5kZXg6IHBvcy5uaW5kZXgsXG4gICAgfSlcbiAgfSxcblxuICBkZWRlbnRNYW55OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMudmlldy5tb2RlICE9PSAndmlzdWFsJykgcmV0dXJuXG4gICAgdmFyIGlkcyA9IHRoaXMudmlldy5zZWxlY3Rpb25cbiAgICB2YXIgcG9zID0gbW92ZW1lbnQuZGVkZW50KGlkc1swXSwgdGhpcy52aWV3LnJvb3QsIHRoaXMuZGIubm9kZXMpXG4gICAgaWYgKCFwb3MpIHJldHVyblxuICAgIHRoaXMuZXhlY3V0ZUNvbW1hbmQoJ21vdmVNYW55Jywge1xuICAgICAgaWRzLFxuICAgICAgbnBpZDogcG9zLm5waWQsXG4gICAgICBuZXh0SXNSb290OiBwb3MubnBpZCA9PT0gdGhpcy52aWV3LnJvb3QsXG4gICAgICBuaW5kZXg6IHBvcy5uaW5kZXgsXG4gICAgfSlcbiAgfSxcblxuICBkZWRlbnQ6IGZ1bmN0aW9uIChpZCkge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCAmJiB0aGlzLnZpZXcubW9kZSA9PT0gJ3Zpc3VhbCcpIHtcbiAgICAgIHJldHVybiB0aGlzLmRlZGVudE1hbnkoKVxuICAgIH1cbiAgICBpZCA9IGlkIHx8IHRoaXMudmlldy5hY3RpdmVcbiAgICB2YXIgcG9zID0gbW92ZW1lbnQuZGVkZW50KGlkLCB0aGlzLnZpZXcucm9vdCwgdGhpcy5kYi5ub2RlcylcbiAgICBpZiAoIXBvcykgcmV0dXJuXG4gICAgdmFyIHdhc0VkaXRpbmcgPSBmYWxzZVxuICAgIGlmICh0aGlzLnZpZXcubW9kZSA9PT0gJ2luc2VydCcpIHtcbiAgICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuYmx1cigpXG4gICAgICB3YXNFZGl0aW5nID0gdHJ1ZVxuICAgIH1cbiAgICB0aGlzLmV4ZWN1dGVDb21tYW5kKCdtb3ZlJywge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbnBpZDogcG9zLm5waWQsXG4gICAgICBuZXh0SXNSb290OiBwb3MubnBpZCA9PT0gdGhpcy52aWV3LnJvb3QsXG4gICAgICBuaW5kZXg6IHBvcy5uaW5kZXgsXG4gICAgfSlcbiAgICBpZiAod2FzRWRpdGluZykge1xuICAgICAgdGhpcy5lZGl0KClcbiAgICB9XG4gIH0sXG5cbiAgbW92ZURvd246IGZ1bmN0aW9uIChpZCkge1xuICAgIGlkID0gaWQgfHwgdGhpcy52aWV3LmFjdGl2ZVxuICAgIGxldCBpZHNcbiAgICBpZiAodGhpcy52aWV3Lm1vZGUgPT09ICd2aXN1YWwnKSB7XG4gICAgICBpZHMgPSB0aGlzLnZpZXcuc2VsZWN0aW9uXG4gICAgfSBlbHNlIHtcbiAgICAgIGlkcyA9IFtpZF1cbiAgICB9XG4gICAgdmFyIHBvcyA9IG1vdmVtZW50LmJlbG93KGlkc1tpZHMubGVuZ3RoIC0gMV0sIHRoaXMudmlldy5yb290LCB0aGlzLmRiLm5vZGVzKVxuICAgIGlmICghcG9zKSByZXR1cm5cbiAgICB0aGlzLmV4ZWN1dGVDb21tYW5kKCdtb3ZlTWFueScsIHtcbiAgICAgIGlkcyxcbiAgICAgIG5waWQ6IHBvcy5waWQsXG4gICAgICBuZXh0SXNSb290OiBwb3MucGlkID09PSB0aGlzLnZpZXcucm9vdCxcbiAgICAgIG5pbmRleDogcG9zLml4LFxuICAgIH0pXG4gIH0sXG5cbiAgbW92ZVVwOiBmdW5jdGlvbiAoaWQpIHtcbiAgICBpZCA9IGlkIHx8IHRoaXMudmlldy5hY3RpdmVcbiAgICBsZXQgaWRzXG4gICAgaWYgKHRoaXMudmlldy5tb2RlID09PSAndmlzdWFsJykge1xuICAgICAgaWRzID0gdGhpcy52aWV3LnNlbGVjdGlvblxuICAgIH0gZWxzZSB7XG4gICAgICBpZHMgPSBbaWRdXG4gICAgfVxuICAgIHZhciBwb3MgPSBtb3ZlbWVudC5hYm92ZShpZHNbMF0sIHRoaXMudmlldy5yb290LCB0aGlzLmRiLm5vZGVzKVxuICAgIGlmICghcG9zKSByZXR1cm5cbiAgICB0aGlzLmV4ZWN1dGVDb21tYW5kKCdtb3ZlTWFueScsIHtcbiAgICAgIGlkcyxcbiAgICAgIG5waWQ6IHBvcy5waWQsXG4gICAgICBuZXh0SXNSb290OiBwb3MucGlkID09PSB0aGlzLnZpZXcucm9vdCxcbiAgICAgIG5pbmRleDogcG9zLml4LFxuICAgIH0pXG4gIH0sXG5cbiAgY3JlYXRlQmVmb3JlOiBmdW5jdGlvbiAoaWQpIHtcbiAgICBpZCA9IGlkIHx8IHRoaXMudmlldy5hY3RpdmVcbiAgICB2YXIgbm9kZSA9IHRoaXMuZGIubm9kZXNbaWRdXG4gICAgaWYgKGlkID09PSB0aGlzLnZpZXcucm9vdCkgcmV0dXJuXG4gICAgdGhpcy5leGVjdXRlQ29tbWFuZCgnY3JlYXRlJywge1xuICAgICAgcGlkOiBub2RlLnBhcmVudCxcbiAgICAgIHR5cGU6IG5vZGUudHlwZSxcbiAgICAgIGl4OiB0aGlzLmRiLm5vZGVzW25vZGUucGFyZW50XS5jaGlsZHJlbi5pbmRleE9mKGlkKSxcbiAgICB9LCAoZXJyLCBjbWQpID0+IHtcbiAgICAgIGlmIChlcnIpIHJldHVybiBjb25zb2xlLndhcm4oJ2ZhaWxlZCB0byBjcmVhdGUnKVxuICAgICAgdGhpcy5lZGl0KGNtZC5pZClcbiAgICB9KVxuICB9LFxuXG4gIGNyZWF0ZUNoaWxkOiBmdW5jdGlvbiAoaWQpIHtcbiAgICBpZCA9IGlkIHx8IHRoaXMudmlldy5hY3RpdmVcbiAgICB2YXIgbm9kZSA9IHRoaXMuZGIubm9kZXNbaWRdXG4gICAgICAsIHBvc1xuICAgIHBvcyA9IHtcbiAgICAgIHBpZDogaWQsXG4gICAgICB0eXBlOiBub2RlLnR5cGUsXG4gICAgICBpeDogbm9kZS5jaGlsZHJlbiA/IG5vZGUuY2hpbGRyZW4ubGVuZ3RoIDogMFxuICAgIH1cbiAgICBpZiAobm9kZS5jb2xsYXBzZWQpIHtcbiAgICAgIHRoaXMuZXhlY3V0ZUNvbW1hbmRzKFxuICAgICAgICAnc2V0Jywge2lkOiBpZCwgYXR0cjogJ2NvbGxhcHNlZCcsIHZhbHVlOiBmYWxzZX0sXG4gICAgICAgICdjcmVhdGUnLCBwb3MsXG4gICAgICAgIChlcnIsIGNtZCkgPT4ge1xuICAgICAgICAgIGlmIChlcnIpIHJldHVybiBjb25zb2xlLndhcm4oJ2ZhaWxlZCB0byBjcmVhdGUnKVxuICAgICAgICAgIHRoaXMuZWRpdChjbWQuaWQpXG4gICAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZXhlY3V0ZUNvbW1hbmQoJ2NyZWF0ZScsIHBvcywgKGVyciwgY21kKSA9PiB7XG4gICAgICAgIGlmIChlcnIpIHJldHVybiBjb25zb2xlLndhcm4oJ2ZhaWxlZCB0byBjcmVhdGUnKVxuICAgICAgICB0aGlzLmVkaXQoY21kLmlkKVxuICAgICAgfSlcbiAgICB9XG4gIH0sXG5cbiAgY3JlYXRlQWZ0ZXI6IGZ1bmN0aW9uIChpZCwgc3BsaXQsIGFmdGVyKSB7XG4gICAgaWQgPSBpZCB8fCB0aGlzLnZpZXcuYWN0aXZlXG4gICAgdmFyIG5vZGUgPSB0aGlzLmRiLm5vZGVzW2lkXVxuICAgICAgLCBwb3NcbiAgICBpZiAoaWQgPT09IHRoaXMudmlldy5yb290IHx8IChub2RlLmNoaWxkcmVuLmxlbmd0aCAmJiAhbm9kZS5jb2xsYXBzZWQpKSB7XG4gICAgICBwb3MgPSB7XG4gICAgICAgIHBpZDogaWQsXG4gICAgICAgIHR5cGU6IG5vZGUudHlwZSxcbiAgICAgICAgaXg6IDBcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcG9zID0ge1xuICAgICAgICBwaWQ6IG5vZGUucGFyZW50LFxuICAgICAgICB0eXBlOiBub2RlLnR5cGUsXG4gICAgICAgIGl4OiB0aGlzLmRiLm5vZGVzW25vZGUucGFyZW50XS5jaGlsZHJlbi5pbmRleE9mKGlkKSArIDEsXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKSB7XG4gICAgICBwb3MuY29udGVudCA9IGFmdGVyXG4gICAgICB0aGlzLmV4ZWN1dGVDb21tYW5kcyhcbiAgICAgICAgJ3NldCcsIHtcbiAgICAgICAgICBpZCxcbiAgICAgICAgICBhdHRyOiAnY29udGVudCcsXG4gICAgICAgICAgdmFsdWU6IHNwbGl0LFxuICAgICAgICB9LFxuICAgICAgICAnY3JlYXRlJywgcG9zLFxuICAgICAgICAoZXJyLCBjbWQpID0+IHtcbiAgICAgICAgICBpZiAoZXJyKSByZXR1cm4gY29uc29sZS53YXJuKCdmYWlsZWQgdG8gY3JlYXRlJylcbiAgICAgICAgICB0aGlzLmVkaXRTdGFydChjbWQuaWQpXG4gICAgICAgIH1cbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5leGVjdXRlQ29tbWFuZCgnY3JlYXRlJywgcG9zLCAoZXJyLCBjbWQpID0+IHtcbiAgICAgICAgaWYgKGVycikgcmV0dXJuIGNvbnNvbGUud2FybignZmFpbGVkIHRvIGNyZWF0ZScpXG4gICAgICAgIHRoaXMuZWRpdChjbWQuaWQpXG4gICAgICB9KVxuICAgIH1cbiAgfSxcblxuICAvLyBqdXN0IGZvciB0aGUgdHJlZSB2aWV3LCBwcmV0dHkgbXVjaFxuICBnb1RvRmlyc3RTaWJsaW5nOiBmdW5jdGlvbiAoaWQpIHtcbiAgICBpZCA9IGlkIHx8IHRoaXMudmlldy5hY3RpdmVcbiAgICB2YXIgZmlyc3QgPSBtb3ZlbWVudC5maXJzdFNpYmxpbmcoaWQsIHRoaXMudmlldy5yb290LCB0aGlzLmRiLm5vZGVzKVxuICAgIGlmIChmaXJzdCA9PT0gaWQpIHtcbiAgICAgIGZpcnN0ID0gbW92ZW1lbnQudXAoaWQsIHRoaXMudmlldy5yb290LCB0aGlzLmRiLm5vZGVzKVxuICAgIH1cbiAgICB0aGlzLnNldEFjdGl2ZShmaXJzdClcbiAgfSxcblxuICBtb3ZlVG9GaXJzdFNpYmxpbmc6IGZ1bmN0aW9uIChpZCkge1xuICAgIGlkID0gaWQgfHwgdGhpcy52aWV3LmFjdGl2ZVxuICAgIGlmIChpZCA9PT0gdGhpcy52aWV3LnJvb3QpIHJldHVyblxuICAgIHZhciBwaWQgPSB0aGlzLmRiLm5vZGVzW2lkXS5wYXJlbnRcbiAgICAgICwgY2ggPSB0aGlzLmRiLm5vZGVzW3BpZF0uY2hpbGRyZW5cbiAgICAgICwgY2l4ID0gY2guaW5kZXhPZihpZClcbiAgICBpZiAoY2l4ID09PSAwKSByZXR1cm5cbiAgICB0aGlzLmV4ZWN1dGVDb21tYW5kKCdtb3ZlJywge1xuICAgICAgaWQsXG4gICAgICBuaW5kZXg6IDAsXG4gICAgfSlcbiAgfSxcblxuICBtb3ZlVG9MYXN0U2libGluZzogZnVuY3Rpb24gKGlkKSB7XG4gICAgaWQgPSBpZCB8fCB0aGlzLnZpZXcuYWN0aXZlXG4gICAgaWYgKGlkID09PSB0aGlzLnZpZXcucm9vdCkgcmV0dXJuXG4gICAgdmFyIHBpZCA9IHRoaXMuZGIubm9kZXNbaWRdLnBhcmVudFxuICAgICAgLCBjaCA9IHRoaXMuZGIubm9kZXNbcGlkXS5jaGlsZHJlblxuICAgICAgLCBjaXggPSBjaC5pbmRleE9mKGlkKVxuICAgIGlmIChjaXggPT09IGNoLmxlbmd0aCAtIDEpIHJldHVyblxuICAgIHRoaXMuZXhlY3V0ZUNvbW1hbmQoJ21vdmUnLCB7XG4gICAgICBpZCxcbiAgICAgIG5pbmRleDogY2gubGVuZ3RoLFxuICAgIH0pXG4gIH0sXG5cbiAgZ29Ub0xhc3RTaWJsaW5nOiBmdW5jdGlvbiAoaWQpIHtcbiAgICBpZCA9IGlkIHx8IHRoaXMudmlldy5hY3RpdmVcbiAgICB2YXIgbGFzdCA9IG1vdmVtZW50Lmxhc3RTaWJsaW5nKGlkLCB0aGlzLnZpZXcucm9vdCwgdGhpcy5kYi5ub2RlcylcbiAgICBpZiAobGFzdCA9PT0gaWQpIHtcbiAgICAgIGxhc3QgPSBtb3ZlbWVudC5kb3duKGlkLCB0aGlzLnZpZXcucm9vdCwgdGhpcy5kYi5ub2RlcylcbiAgICB9XG4gICAgdGhpcy5zZXRBY3RpdmUobGFzdClcbiAgfSxcblxuICBnb1RvQm90dG9tOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5zZXRBY3RpdmUobW92ZW1lbnQuYm90dG9tKHRoaXMudmlldy5yb290LCB0aGlzLmRiLm5vZGVzKSlcbiAgfSxcblxuICBnb1RvVG9wOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5zZXRBY3RpdmUodGhpcy52aWV3LnJvb3QpXG4gIH0sXG5cbiAgZ29Ub0xhc3RFZGl0ZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaWQgPSB0aGlzLnZpZXcubGFzdEVkaXRlZCB8fCB0aGlzLnZpZXcucm9vdFxuICAgIHRoaXMuZWRpdChpZClcbiAgfSxcblxuICBnb1RvTmV4dFNpYmxpbmc6IGZ1bmN0aW9uIChpZCkge1xuICAgIGlkID0gaWQgfHwgdGhpcy52aWV3LmFjdGl2ZVxuICAgIGlmIChpZCA9PT0gdGhpcy52aWV3LnJvb3QpIHJldHVyblxuICAgIHZhciBuZXh0ID0gbW92ZW1lbnQubmV4dFNpYmxpbmcoaWQsIHRoaXMudmlldy5yb290LCB0aGlzLmRiLm5vZGVzKVxuICAgIGlmICghbmV4dCkgcmV0dXJuIGZhbHNlXG4gICAgdGhpcy5zZXRBY3RpdmUobmV4dClcbiAgfSxcblxuICBnb1RvUHJldmlvdXNTaWJsaW5nOiBmdW5jdGlvbiAoaWQpIHtcbiAgICBpZCA9IGlkIHx8IHRoaXMudmlldy5hY3RpdmVcbiAgICB2YXIgcHJldiA9IG1vdmVtZW50LnByZXZTaWJsaW5nKGlkLCB0aGlzLnZpZXcucm9vdCwgdGhpcy5kYi5ub2RlcylcbiAgICBpZiAoIXByZXYpIHtcbiAgICAgIHByZXYgPSBtb3ZlbWVudC51cChpZCwgdGhpcy52aWV3LnJvb3QsIHRoaXMuZGIubm9kZXMpXG4gICAgfVxuICAgIHRoaXMuc2V0QWN0aXZlKHByZXYpXG4gIH0sXG5cbiAgZ29Ub1N1cnZpdmluZ05laWdoYm9yOiBmdW5jdGlvbiAoaWQpIHtcbiAgICBpZCA9IGlkIHx8IHRoaXMudmlldy5hY3RpdmVcbiAgICB0aGlzLnNldEFjdGl2ZShtb3ZlbWVudC5zdXJ2aXZpbmdOZWlnaGJvcihpZCwgdGhpcy52aWV3LnJvb3QsIHRoaXMuZGIubm9kZXMpKVxuICB9LFxuXG59XG5cbiIsIid1c2Ugc3RyaWN0J1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdC9hZGRvbnMnKVxudmFyIFBUID0gUmVhY3QuUHJvcFR5cGVzXG5cbnZhciBleHRlbmQgPSByZXF1aXJlKCcuLi8uLi91dGlsL2V4dGVuZCcpXG52YXIgTGlzdGVuZXIgPSByZXF1aXJlKCcuLi8uLi9saXN0ZW5lcicpXG52YXIgTGlzdEl0ZW0gPSByZXF1aXJlKCcuL2l0ZW0nKVxuXG4vLyBUT0RPIHJlbmFtZSBUcmVlVmlldyBjbGFzc2VzIHRvIExpc3RWaWV3IC0gY2hlY2sgY3NzLCBldGMuXG52YXIgTGlzdFZpZXcgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIHN0YXRpY3M6IHtcbiAgICBrZXlzOiByZXF1aXJlKCcuL2tleXMnKSxcbiAgICBhY3Rpb25zOiByZXF1aXJlKCcuL2FjdGlvbnMnKSxcbiAgfSxcblxuICBtaXhpbnM6IFtcbiAgICBMaXN0ZW5lcihmdW5jdGlvbiAoc3RvcmUsIHByb3BzKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByb290OiBzdG9yZS52aWV3LnJvb3QsXG4gICAgICAgIG1vZGU6IHN0b3JlLnZpZXcubW9kZSxcbiAgICAgICAgaXNBY3RpdmU6IHN0b3JlLmlzQWN0aXZlVmlldygpLFxuICAgICAgfVxuICAgIH0pXG4gIF0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgcGx1Z2luczogUFQuYXJyYXksXG4gICAgbm9kZVBsdWdpbnM6IFBULmFycmF5LFxuICAgIHNraXBNaXg6IFBULmFycmF5LFxuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBza2lwTWl4OiBbXVxuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5zdG9yZSAhPT0gcHJldlByb3BzLnN0b3JlKSB7XG4gICAgICB2YXIgZSA9IHRoaXMucHJvcHMuc3RvcmUuZXZlbnRzXG4gICAgICB0aGlzLmxpc3RlbihlLnJvb3RDaGFuZ2VkKCksIGUubW9kZUNoYW5nZWQoKSwgZS5hY3RpdmVWaWV3Q2hhbmdlZCgpKVxuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnRXaWxsTW91bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZSA9IHRoaXMucHJvcHMuc3RvcmUuZXZlbnRzXG4gICAgdGhpcy5saXN0ZW4oZS5yb290Q2hhbmdlZCgpLCBlLm1vZGVDaGFuZ2VkKCksIGUuYWN0aXZlVmlld0NoYW5nZWQoKSlcbiAgICAvLyBUT0RPIGNhbiB0aGlzIGJlIGZhY3RvcmVkIG91dD9cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIHRoaXMuX29uQmx1cilcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCB0aGlzLl9vbkZvY3VzKVxuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50OiBmdW5jdGlvbiAoKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2JsdXInLCB0aGlzLl9vbkJsdXIpXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgdGhpcy5fb25Gb2N1cylcbiAgfSxcblxuICBfb25CbHVyOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5wcm9wcy5zdG9yZS52aWV3LndpbmRvd0JsdXIgPSB0cnVlXG4gICAgLy8gdGhpcy5wcmV2ID0gdGhpcy5wcm9wcy5zdG9yZS52aWV3Lm1vZGVcbiAgfSxcblxuICBfb25Gb2N1czogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMucHJvcHMuc3RvcmUudmlldy53aW5kb3dCbHVyID0gZmFsc2VcbiAgICAvLyB0aGlzLnByb3BzLnN0b3JlLmFjdGlvbnMuZWRpdCgpXG4gIH0sXG5cbiAgZnJvbU1peDogZnVuY3Rpb24gKHBhcnQpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMucGx1Z2lucykgcmV0dXJuXG4gICAgaWYgKHRoaXMucHJvcHMuc2tpcE1peC5pbmRleE9mKHBhcnQpICE9PSAtMSkgcmV0dXJuXG4gICAgdmFyIGl0ZW1zID0gW11cbiAgICBmb3IgKHZhciBpPTA7IGk8dGhpcy5wcm9wcy5wbHVnaW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcGx1Z2luID0gdGhpcy5wcm9wcy5wbHVnaW5zW2ldLmJsb2Nrc1xuICAgICAgaWYgKCFwbHVnaW4gfHwgIXBsdWdpbltwYXJ0XSkgY29udGludWU7XG4gICAgICBpdGVtcy5wdXNoKHBsdWdpbltwYXJ0XSh0aGlzLnByb3BzLnN0b3JlLmFjdGlvbnMsIHRoaXMuc3RhdGUsIHRoaXMucHJvcHMuc3RvcmUpKVxuICAgIH1cbiAgICBpZiAoIWl0ZW1zLmxlbmd0aCkgcmV0dXJuIG51bGxcbiAgICByZXR1cm4gaXRlbXNcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY2xhc3NOYW1lID0gJ1RyZWVWaWV3IFRyZWVWaWV3LScgKyB0aGlzLnN0YXRlLm1vZGVcbiAgICBpZiAodGhpcy5zdGF0ZS5pc0FjdGl2ZSkgY2xhc3NOYW1lICs9ICcgVHJlZVZpZXctYWN0aXZlJ1xuICAgIHZhciBib2RpZXMgPSB7XG4gICAgICBkZWZhdWx0OiB7ZWRpdG9yOiBudWxsLCByZW5kZXJlcjogbnVsbH1cbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcHMubm9kZVBsdWdpbnMpIHtcbiAgICAgIGZvciAodmFyIGk9MDsgaTx0aGlzLnByb3BzLm5vZGVQbHVnaW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLm5vZGVQbHVnaW5zW2ldLmJvZGllcykge1xuICAgICAgICAgIGJvZGllcyA9IGV4dGVuZChib2RpZXMsIHRoaXMucHJvcHMubm9kZVBsdWdpbnNbaV0uYm9kaWVzKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lfSBvbkNsaWNrPXt0aGlzLnByb3BzLnN0b3JlLmFjdGlvbnMuc2V0QWN0aXZlVmlldy5iaW5kKHRoaXMucHJvcHMuc3RvcmUuYWN0aW9ucyl9PlxuICAgICAge3RoaXMuZnJvbU1peCgndG9wJyl9XG4gICAgICA8TGlzdEl0ZW1cbiAgICAgICAgc3RvcmU9e3RoaXMucHJvcHMuc3RvcmV9XG4gICAgICAgIHBsdWdpbnM9e3RoaXMucHJvcHMubm9kZVBsdWdpbnN9XG4gICAgICAgIGJvZGllcz17Ym9kaWVzfVxuICAgICAgICBpc1Jvb3Q9e3RydWV9XG4gICAgICAgIGlkPXt0aGlzLnN0YXRlLnJvb3R9XG4gICAgICAvPlxuICAgICAge3RoaXMuZnJvbU1peCgnYm90dG9tJyl9XG4gICAgPC9kaXY+XG4gIH0sXG59KVxuXG5tb2R1bGUuZXhwb3J0cyA9IExpc3RWaWV3XG4iLCJcbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0L2FkZG9ucycpXG52YXIgY3ggPSBSZWFjdC5hZGRvbnMuY2xhc3NTZXRcbnZhciBQVCA9IFJlYWN0LlByb3BUeXBlc1xudmFyIGVuc3VyZUluVmlldyA9IHJlcXVpcmUoJy4uLy4uL3V0aWwvZW5zdXJlLWluLXZpZXcnKVxudmFyIFNpbXBsZUJvZHkgPSByZXF1aXJlKCcuLi9ib2R5L3NpbXBsZScpXG5cbnZhciBMaXN0ZW5lciA9IHJlcXVpcmUoJy4uLy4uL2xpc3RlbmVyJylcblxudmFyIFRyZWVJdGVtID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBtaXhpbnM6IFtcbiAgICBMaXN0ZW5lcih7XG4gICAgICBzdG9yZUF0dHJzOiBmdW5jdGlvbiAoZ2V0dGVycywgcHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBub2RlOiBnZXR0ZXJzLmdldE5vZGUocHJvcHMuaWQpLFxuICAgICAgICAgIGlzQWN0aXZlVmlldzogZ2V0dGVycy5pc0FjdGl2ZVZpZXcoKSxcbiAgICAgICAgICBpc0FjdGl2ZTogZ2V0dGVycy5pc0FjdGl2ZShwcm9wcy5pZCksXG4gICAgICAgICAgaXNTZWxlY3RlZDogZ2V0dGVycy5pc1NlbGVjdGVkKHByb3BzLmlkKSxcbiAgICAgICAgICBlZGl0U3RhdGU6IGdldHRlcnMuZWRpdFN0YXRlKHByb3BzLmlkKSxcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgaW5pdFN0b3JlU3RhdGU6IGZ1bmN0aW9uIChzdGF0ZSwgZ2V0dGVycywgcHJvcHMpIHtcbiAgICAgICAgdmFyIG5vZGUgPSBzdGF0ZS5ub2RlXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbGF6eUNoaWxkcmVuOiAhcHJvcHMuaXNSb290ICYmIG5vZGUuY29sbGFwc2VkICYmIG5vZGUuY2hpbGRyZW4ubGVuZ3RoXG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIHVwZGF0ZVN0b3JlU3RhdGU6IGZ1bmN0aW9uIChzdGF0ZSwgZ2V0dGVycywgcHJvcHMpIHtcbiAgICAgICAgdmFyIG5vZGUgPSBzdGF0ZS5ub2RlXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbGF6eUNoaWxkcmVuOiB0aGlzLnN0YXRlLmxhenlDaGlsZHJlbiAmJiBub2RlLmNvbGxhcHNlZFxuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICBzaG91bGRHZXROZXc6IGZ1bmN0aW9uIChuZXh0UHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIG5leHRQcm9wcy5pZCAhPT0gdGhpcy5wcm9wcy5pZCB8fCBuZXh0UHJvcHMuc3RvcmUgIT09IHRoaXMucHJvcHMuc3RvcmVcbiAgICAgIH0sXG5cbiAgICAgIGdldExpc3RlbmVyczogZnVuY3Rpb24gKHByb3BzLCBldmVudHMpIHtcbiAgICAgICAgcmV0dXJuIFtldmVudHMubm9kZUNoYW5nZWQocHJvcHMuaWQpLCBldmVudHMubm9kZVZpZXdDaGFuZ2VkKHByb3BzLmlkKV1cbiAgICAgIH0sXG4gICAgfSlcbiAgXSxcblxuICBjb21wb25lbnRXaWxsTW91bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBnZXQgcGx1Z2luIHVwZGF0ZSBmdW5jdGlvbnNcbiAgICB0aGlzLl9wbHVnaW5fdXBkYXRlcyA9IG51bGxcbiAgICB0aGlzLnByb3BzLnBsdWdpbnMuZm9yRWFjaCgocGx1Z2luKSA9PiB7XG4gICAgICBpZiAoIXBsdWdpbi5jb21wb25lbnREaWRVcGRhdGUpIHJldHVyblxuICAgICAgaWYgKCF0aGlzLl9wbHVnaW5fdXBkYXRlcykge1xuICAgICAgICB0aGlzLl9wbHVnaW5fdXBkYXRlcyA9IFtwbHVnaW4uY29tcG9uZW50RGlkVXBkYXRlXVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fcGx1Z2luX3VwZGF0ZXMucHVzaChwbHVnaW4uY29tcG9uZW50RGlkVXBkYXRlKVxuICAgICAgfVxuICAgIH0pXG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgaWQ6IFBULnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIHBsdWdpbnM6IFBULmFycmF5LFxuICAgIGJvZGllczogUFQub2JqZWN0LFxuICAgIGlzUm9vdDogUFQuYm9vbCxcbiAgfSxcblxuICBzaG91bGRDb21wb25lbnRVcGRhdGU6IGZ1bmN0aW9uIChuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICAgIHJldHVybiAoXG4gICAgICBuZXh0U3RhdGUgIT09IHRoaXMuc3RhdGUgfHxcbiAgICAgIChuZXh0UHJvcHMuaW5kZXggIT09IHRoaXMucHJvcHMuaW5kZXggJiYgbmV4dFN0YXRlLmlzQWN0aXZlKVxuICAgIClcbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnN0YXRlLmlzQWN0aXZlICYmIHRoaXMuc3RhdGUuaXNBY3RpdmVWaWV3KSB7XG4gICAgICBlbnN1cmVJblZpZXcodGhpcy5yZWZzLmJvZHkuZ2V0RE9NTm9kZSgpKVxuICAgIH1cbiAgfSxcblxuICAvKiogVXNlIHRvIGNoZWNrIHdoYXQgdGhpbmdzIGFyZSB1cGRhdGluZyB3aGVuICovXG4gIGNvbXBvbmVudERpZFVwZGF0ZTogZnVuY3Rpb24gKHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgaWYgKHRoaXMuX3BsdWdpbl91cGRhdGVzKSB7XG4gICAgICB0aGlzLl9wbHVnaW5fdXBkYXRlcy5tYXAoKGZuKSA9PiBmbi5jYWxsKHRoaXMsIHByZXZQcm9wcywgcHJldlN0YXRlKSlcbiAgICB9XG4gICAgaWYgKHRoaXMuc3RhdGUuaXNBY3RpdmUgJiZcbiAgICAgICAgdGhpcy5zdGF0ZS5pc0FjdGl2ZVZpZXcgJiZcbiAgICAgICAgKCFwcmV2U3RhdGUuaXNBY3RpdmUgfHwgcHJldlByb3BzLmluZGV4ICE9PSB0aGlzLnByb3BzLmluZGV4KSkge1xuICAgICAgZW5zdXJlSW5WaWV3KHRoaXMucmVmcy5ib2R5LmdldERPTU5vZGUoKSlcbiAgICB9XG4gICAgaWYgKHdpbmRvdy5ERUJVR19VUERBVEUpIHtcbiAgICAgIC8vIERFQlVHIFNUVUZGXG4gICAgICB2YXIgbiA9IHRoaXMuZ2V0RE9NTm9kZSgpXG4gICAgICBuLnN0eWxlLm91dGxpbmUgPSAnMXB4IHNvbGlkIHJlZCdcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBuLnN0eWxlLm91dGxpbmUgPSAnJ1xuICAgICAgfSwgMjAwKVxuICAgIH1cbiAgfSxcbiAgLy8gKiovXG5cbiAgZnJvbU1peDogZnVuY3Rpb24gKHBhcnQpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMucGx1Z2lucykgcmV0dXJuXG4gICAgdmFyIGl0ZW1zID0gW11cbiAgICBmb3IgKHZhciBpPTA7IGk8dGhpcy5wcm9wcy5wbHVnaW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcGx1Z2luID0gdGhpcy5wcm9wcy5wbHVnaW5zW2ldLmJsb2Nrc1xuICAgICAgaWYgKCFwbHVnaW4gfHwgIXBsdWdpbltwYXJ0XSkgY29udGludWU7XG4gICAgICBpdGVtcy5wdXNoKHBsdWdpbltwYXJ0XSh0aGlzLnN0YXRlLm5vZGUsIHRoaXMucHJvcHMuc3RvcmUuYWN0aW9ucywgdGhpcy5zdGF0ZSwgdGhpcy5wcm9wcy5zdG9yZSkpXG4gICAgfVxuICAgIGlmICghaXRlbXMubGVuZ3RoKSByZXR1cm4gbnVsbFxuICAgIHJldHVybiBpdGVtc1xuICB9LFxuXG4gIGJvZHk6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYm9keSA9IHRoaXMucHJvcHMuYm9kaWVzW3RoaXMuc3RhdGUubm9kZS50eXBlXSB8fCB0aGlzLnByb3BzLmJvZGllcy5kZWZhdWx0XG4gICAgdmFyIGFib3ZlYm9keSA9IHRoaXMuZnJvbU1peCgnYWJvdmVib2R5JylcbiAgICB2YXIgYmVsb3dib2R5ID0gdGhpcy5mcm9tTWl4KCdiZWxvd2JvZHknKVxuICAgIHJldHVybiA8ZGl2IHJlZj0nYm9keScgY2xhc3NOYW1lPSdUcmVlSXRlbV9ib2R5Jz5cbiAgICAgIHthYm92ZWJvZHl9XG4gICAgICA8U2ltcGxlQm9keVxuICAgICAgICBlZGl0b3I9e2JvZHkuZWRpdG9yfVxuICAgICAgICByZW5kZXJlcj17Ym9keS5yZW5kZXJlcn1cbiAgICAgICAgbm9kZT17dGhpcy5zdGF0ZS5ub2RlfVxuICAgICAgICBpc0FjdGl2ZT17dGhpcy5zdGF0ZS5pc0FjdGl2ZX1cbiAgICAgICAgZWRpdFN0YXRlPXt0aGlzLnN0YXRlLmVkaXRTdGF0ZX1cbiAgICAgICAgYWN0aW9ucz17dGhpcy5wcm9wcy5zdG9yZS5hY3Rpb25zfVxuICAgICAgICBzdG9yZT17dGhpcy5wcm9wcy5zdG9yZX1cbiAgICAgIC8+XG4gICAgICB7YmVsb3dib2R5fVxuICAgIDwvZGl2PlxuICB9LFxuXG4gIF9vbkNvbnRleHRNZW51OiBmdW5jdGlvbiAoZSkge1xuICAgIGlmICh0aGlzLnByb3BzLnN0b3JlLnZpZXcubW9kZSA9PT0gJ2luc2VydCcgJiYgdGhpcy5zdGF0ZS5ub2RlLmlkID09PSB0aGlzLnByb3BzLnN0b3JlLnZpZXcuYWN0aXZlKSByZXR1cm4gZS5zdG9wUHJvcGFnYXRpb24oKVxuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcbiAgICB0aGlzLnByb3BzLnN0b3JlLmFjdGlvbnMuc2V0QWN0aXZlKHRoaXMuc3RhdGUubm9kZS5pZClcbiAgICB0aGlzLnByb3BzLnN0b3JlLmFjdGlvbnMuc2hvd0NvbnRleHRNZW51KGUuY2xpZW50WCwgZS5jbGllbnRZLCB0aGlzLnN0YXRlLm5vZGUuaWQpXG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLnN0YXRlLm5vZGUpIHJldHVybiA8c3Bhbi8+XG4gICAgdmFyIGNsYXNzTmFtZSA9IGN4KHtcbiAgICAgICdUcmVlSXRlbSc6IHRydWUsXG4gICAgICAnVHJlZUl0ZW0tYWN0aXZlJzogdGhpcy5zdGF0ZS5pc0FjdGl2ZSxcbiAgICAgICdUcmVlSXRlbS1lZGl0aW5nJzogdGhpcy5zdGF0ZS5lZGl0U3RhdGUsXG4gICAgICAnVHJlZUl0ZW0tc2VsZWN0ZWQnOiB0aGlzLnN0YXRlLmlzU2VsZWN0ZWQsXG4gICAgICAnVHJlZUl0ZW0tcm9vdCc6IHRoaXMucHJvcHMuaXNSb290LFxuICAgIH0pXG4gICAgY2xhc3NOYW1lICs9ICcgVHJlZUl0ZW0tdHlwZS0nICsgdGhpcy5zdGF0ZS5ub2RlLnR5cGVcbiAgICBpZiAodGhpcy5wcm9wcy5wbHVnaW5zKSB7XG4gICAgICB0aGlzLnByb3BzLnBsdWdpbnMuZm9yRWFjaCgocGx1Z2luKSA9PiB7XG4gICAgICAgIGlmICghcGx1Z2luLmNsYXNzZXMpIHJldHVyblxuICAgICAgICB2YXIgY2xhc3NlcyA9IHBsdWdpbi5jbGFzc2VzKHRoaXMuc3RhdGUubm9kZSwgdGhpcy5zdGF0ZSlcbiAgICAgICAgaWYgKGNsYXNzZXMpIGNsYXNzTmFtZSArPSAnICcgKyBjbGFzc2VzXG4gICAgICB9KVxuICAgIH1cbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZX0gb25Db250ZXh0TWVudT17dGhpcy5fb25Db250ZXh0TWVudX0+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT0nVHJlZUl0ZW1faGVhZCc+XG4gICAgICAgIHt0aGlzLmZyb21NaXgoJ2xlZnQnKX1cbiAgICAgICAge3RoaXMuYm9keSgpfVxuICAgICAgICB7dGhpcy5mcm9tTWl4KCdyaWdodCcpfVxuICAgICAgPC9kaXY+XG4gICAgICB7dGhpcy5mcm9tTWl4KCdwcmVjaGlsZHJlbicpfVxuICAgICAge3RoaXMuc3RhdGUubm9kZS5jaGlsZHJlbi5sZW5ndGggP1xuICAgICAgPGRpdiBjbGFzc05hbWU9J1RyZWVJdGVtX2NoaWxkcmVuJyByZWY9J2NoaWxkcmVuJz5cbiAgICAgICAgeyF0aGlzLnN0YXRlLmxhenlDaGlsZHJlbiAmJiB0aGlzLnN0YXRlLm5vZGUuY2hpbGRyZW4ubWFwKChpZCwgaSkgPT5cbiAgICAgICAgICA8VHJlZUl0ZW1cbiAgICAgICAgICAgIHBsdWdpbnM9e3RoaXMucHJvcHMucGx1Z2luc31cbiAgICAgICAgICAgIHN0b3JlPXt0aGlzLnByb3BzLnN0b3JlfVxuICAgICAgICAgICAgYm9kaWVzPXt0aGlzLnByb3BzLmJvZGllc31cbiAgICAgICAgICAgIGluZGV4PXtpfVxuICAgICAgICAgICAga2V5PXtpZH1cbiAgICAgICAgICAgIGlkPXtpZH1cbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgPC9kaXY+IDogKFxuICAgICAgICB0aGlzLnByb3BzLmlzUm9vdCA/XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9J1RyZWVJdGVtX25vY2hpbGRyZW4nIG9uQ2xpY2s9eygpID0+IHRoaXMucHJvcHMuc3RvcmUuYWN0aW9ucy5jcmVhdGVBZnRlcih0aGlzLnByb3BzLmlkKX0+XG4gICAgICAgICAgICBDbGljayB0byBhZGQgYSBjaGlsZFxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA6IG51bGxcbiAgICAgICl9XG4gICAgICB7dGhpcy5mcm9tTWl4KCdib3R0b20nKX1cbiAgICA8L2Rpdj5cbiAgfVxufSlcblxubW9kdWxlLmV4cG9ydHMgPSBUcmVlSXRlbVxuXG4iLCJcbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICdtb3ZlbWVudCAobm9ybWFsL2VkaXQgbW9kZSknOiB7XG4gICAgJ2dvIHVwJzoge1xuICAgICAgbm9ybWFsOiAndXAsIGsnLFxuICAgIH0sXG4gICAgJ2dvIGRvd24nOiB7XG4gICAgICBub3JtYWw6ICdkb3duLCBqJyxcbiAgICB9LFxuICAgIC8vIFRPRE8gYWxsb3cgdmlzdWFsIG1vZGUgdG8gc3BhbiBwYXJlbnRzL2NoaWxkcmVuP1xuICAgICdnbyBsZWZ0Jzoge1xuICAgICAgbm9ybWFsOiAnbGVmdCwgaCcsXG4gICAgfSxcbiAgICAnZ28gcmlnaHQnOiB7XG4gICAgICBub3JtYWw6ICdyaWdodCwgbCcsXG4gICAgfSxcbiAgICAnZ28gdG8gcHJldmlvdXMgc2libGluZyc6IHtcbiAgICAgIG5vcm1hbDogJ2FsdCtrLCBhbHQrdXAnLFxuICAgIH0sXG4gICAgJ2dvIHRvIG5leHQgc2libGluZyc6IHtcbiAgICAgIG5vcm1hbDogJ2FsdCtqLCBhbHQrZG93bicsXG4gICAgfSxcbiAgICAnZ28gdG8gZmlyc3Qgc2libGluZyc6IHtcbiAgICAgIG5vcm1hbDogJ3NoaWZ0K1snLFxuICAgIH0sXG4gICAgJ2dvIHRvIGxhc3Qgc2libGluZyc6IHtcbiAgICAgIG5vcm1hbDogJ3NoaWZ0K10nLFxuICAgIH0sXG4gICAgJ2dvIHRvIHRvcCc6IHtcbiAgICAgIG5vcm1hbDogJ2cgZywgaG9tZScsXG4gICAgICBpbnNlcnQ6ICdob21lJyxcbiAgICB9LFxuICAgICdnbyB0byBib3R0b20nOiB7XG4gICAgICBub3JtYWw6ICdzaGlmdCtnLCBlbmQnLFxuICAgICAgaW5zZXJ0OiAnZW5kJyxcbiAgICB9LFxuICAgICdwYWdlIHVwJzoge1xuICAgICAgbm9ybWFsOiAncGFnZS11cCcsXG4gICAgICBpbnNlcnQ6ICdwYWdlLXVwJyxcbiAgICB9LFxuICAgICdwYWdlIGRvd24nOiB7XG4gICAgICBub3JtYWw6ICdwYWdlLWRvd24nLFxuICAgICAgaW5zZXJ0OiAncGFnZS1kb3duJyxcbiAgICB9LFxuICAgICdnbyB0byBsYXN0IGVkaXRlZCc6IHtcbiAgICAgIG5vcm1hbDogJ2cgaScsXG4gICAgfSxcbiAgfSxcblxuICAnbW92ZW1lbnQgKHZpc3VhbCBtb2RlKSc6IHtcbiAgICAndG9nZ2xlIHNlbGVjdGlvbiBlZGdlJzoge1xuICAgICAgdmlzdWFsOiAnbywgc2hpZnQrbycsXG4gICAgfSxcbiAgICAnZXh0ZW5kIHRvIGZpcnN0IHNpYmxpbmcnOiB7XG4gICAgICB2aXN1YWw6ICdzaGlmdCtbJyxcbiAgICB9LFxuICAgICdleHRlbmQgdG8gbGFzdCBzaWJsaW5nJzoge1xuICAgICAgdmlzdWFsOiAnc2hpZnQrXScsXG4gICAgfSxcbiAgICAvLyB2aXN1YWwgbW9kZSBzdHVmZlxuICAgICdleHRlbmQgc2VsZWN0aW9uIGRvd24nOiB7XG4gICAgICB2aXN1YWw6ICdkb3duLCBqJyxcbiAgICB9LFxuICAgICdleHRlbmQgc2VsZWN0aW9uIHVwJzoge1xuICAgICAgdmlzdWFsOiAndXAsIGsnLFxuICAgIH0sXG4gIH0sXG5cbiAgcmVhcnJhbmdlOiB7XG4gICAgLy8gbW92ZSBzdHVmZlxuICAgICdpbmRlbnQnOiB7XG4gICAgICBub3JtYWw6ICd0YWIsIHNoaWZ0K2FsdCtsLCBzaGlmdCthbHQrcmlnaHQsIHNoaWZ0Ky4nLFxuICAgICAgaW5zZXJ0OiAndGFiLCBzaGlmdCthbHQrcmlnaHQnLFxuICAgICAgdmlzdWFsOiAndGFiLCBzaGlmdCthbHQrbCwgc2hpZnQrYWx0K3JpZ2h0LCBzaGlmdCsuJyxcbiAgICB9LFxuXG4gICAgJ2RlZGVudCc6IHtcbiAgICAgIG5vcm1hbDogJ3NoaWZ0K3RhYiwgc2hpZnQrYWx0K2gsIHNoaWZ0K2FsdCtsZWZ0LCBzaGlmdCtjb21tYScsXG4gICAgICBpbnNlcnQ6ICdzaGlmdCt0YWIsIHNoaWZ0K2FsdCtsZWZ0JyxcbiAgICAgIHZpc3VhbDogJ3NoaWZ0K3RhYiwgc2hpZnQrYWx0K2gsIHNoaWZ0K2FsdCtsZWZ0LCBzaGlmdCtjb21tYScsXG4gICAgfSxcblxuICAgICdtb3ZlIGRvd24nOiB7XG4gICAgICBub3JtYWw6ICdzaGlmdCthbHQraiwgc2hpZnQrYWx0K2Rvd24nLFxuICAgICAgdmlzdWFsOiAnc2hpZnQrYWx0K2osIHNoaWZ0K2FsdCtkb3duJyxcbiAgICB9LFxuXG4gICAgJ21vdmUgdXAnOiB7XG4gICAgICBub3JtYWw6ICdzaGlmdCthbHQraywgc2hpZnQrYWx0K3VwJyxcbiAgICAgIHZpc3VhbDogJ3NoaWZ0K2FsdCtrLCBzaGlmdCthbHQrdXAnLFxuICAgIH0sXG5cbiAgICAnbW92ZSB0byBmaXJzdCBzaWJsaW5nJzoge1xuICAgICAgbm9ybWFsOiAnY3RybCtzaGlmdCtbJyxcbiAgICAgIHZpc3VhbDogJ2N0cmwrc2hpZnQrWycsXG4gICAgfSxcblxuICAgICdtb3ZlIHRvIGxhc3Qgc2libGluZyc6IHtcbiAgICAgIG5vcm1hbDogJ2N0cmwrc2hpZnQrXScsXG4gICAgICB2aXN1YWw6ICdjdHJsK3NoaWZ0K10nLFxuICAgIH0sXG5cbiAgICAnam9pbiBkb3duJzoge1xuICAgICAgdGl0bGU6ICdqb2luIG5vZGVzJyxcbiAgICAgIG5vcm1hbDogJ3NoaWZ0K2onLFxuICAgICAgdmlzdWFsOiAnc2hpZnQraicsXG4gICAgfSxcblxuICAgICdjcmVhdGUgYWZ0ZXInOiB7XG4gICAgICB0ZXh0OiAnbywgZW50ZXIgKGF0IGVuZCknLFxuICAgICAgbm9ybWFsOiAnbycsXG4gICAgfSxcblxuICAgICdjcmVhdGUgYmVmb3JlJzoge1xuICAgICAgbm9ybWFsOiAnc2hpZnQrbycsXG4gICAgfSxcbiAgfSxcbn1cblxuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciBtb3ZlbWVudCA9IG1vZHVsZS5leHBvcnRzID0ge1xuXG4gIGluZGVudDogZnVuY3Rpb24gKGlkLCByb290LCBub2Rlcykge1xuICAgIGlmIChpZCA9PT0gcm9vdCkgcmV0dXJuXG4gICAgdmFyIHBpZCA9IG5vZGVzW2lkXS5wYXJlbnRcbiAgICAgICwgaXggPSBub2Rlc1twaWRdLmNoaWxkcmVuLmluZGV4T2YoaWQpXG4gICAgaWYgKGl4ID09PSAtMSkgcmV0dXJuXG4gICAgaWYgKGl4ID09PSAwKSByZXR1cm5cbiAgICB2YXIgbnBpZCA9IG5vZGVzW3BpZF0uY2hpbGRyZW5baXggLSAxXVxuICAgIHJldHVybiB7XG4gICAgICBvcGlkOiBwaWQsXG4gICAgICBucGlkOiBucGlkLFxuICAgICAgbmluZGV4OiBub2Rlc1tucGlkXS5jaGlsZHJlbi5sZW5ndGgsXG4gICAgfVxuICB9LFxuXG4gIGRlZGVudDogZnVuY3Rpb24gKGlkLCByb290LCBub2Rlcykge1xuICAgIGlmIChpZCA9PT0gcm9vdCkgcmV0dXJuXG4gICAgdmFyIHBpZCA9IG5vZGVzW2lkXS5wYXJlbnRcbiAgICBpZiAocGlkID09PSByb290KSByZXR1cm5cbiAgICB2YXIgbnBpZCA9IG5vZGVzW3BpZF0ucGFyZW50XG4gICAgICAsIGl4ID0gbm9kZXNbbnBpZF0uY2hpbGRyZW4uaW5kZXhPZihwaWQpXG4gICAgaWYgKHBpZCA9PT0gcm9vdCkgcmV0dXJuXG4gICAgcmV0dXJuIHtcbiAgICAgIG9waWQ6IHBpZCxcbiAgICAgIG5waWQ6IG5waWQsXG4gICAgICBuaW5kZXg6IGl4ICsgMSxcbiAgICB9XG4gIH0sXG5cbiAgbmV4dFNpYmxpbmc6IGZ1bmN0aW9uIChpZCwgcm9vdCwgbm9kZXMpIHtcbiAgICBpZiAoaWQgPT09IHJvb3QpIHJldHVyblxuICAgIHZhciBwaWQgPSBub2Rlc1tpZF0ucGFyZW50XG4gICAgICAsIGNoID0gbm9kZXNbcGlkXS5jaGlsZHJlblxuICAgICAgLCBpeCA9IGNoLmluZGV4T2YoaWQpXG4gICAgaWYgKGl4ID09PSBjaC5sZW5ndGggLSAxKSByZXR1cm5cbiAgICByZXR1cm4gY2hbaXggKyAxXVxuICB9LFxuXG4gIHByZXZTaWJsaW5nOiBmdW5jdGlvbiAoaWQsIHJvb3QsIG5vZGVzKSB7XG4gICAgaWYgKGlkID09PSByb290KSByZXR1cm5cbiAgICB2YXIgcGlkID0gbm9kZXNbaWRdLnBhcmVudFxuICAgICAgLCBjaCA9IG5vZGVzW3BpZF0uY2hpbGRyZW5cbiAgICAgICwgaXggPSBjaC5pbmRleE9mKGlkKVxuICAgIGlmIChpeCA9PT0gMCkgcmV0dXJuXG4gICAgcmV0dXJuIGNoW2l4IC0gMV1cbiAgfSxcblxuICBmaXJzdFNpYmxpbmc6IGZ1bmN0aW9uIChpZCwgcm9vdCwgbm9kZXMpIHtcbiAgICBpZiAoaWQgPT09IHJvb3QpIHJldHVyblxuICAgIHZhciBwaWQgPSBub2Rlc1tpZF0ucGFyZW50XG4gICAgcmV0dXJuIG5vZGVzW3BpZF0uY2hpbGRyZW5bMF1cbiAgfSxcblxuICBsYXN0U2libGluZzogZnVuY3Rpb24gKGlkLCByb290LCBub2Rlcykge1xuICAgIGlmIChpZCA9PT0gcm9vdCkgcmV0dXJuXG4gICAgdmFyIHBpZCA9IG5vZGVzW2lkXS5wYXJlbnRcbiAgICByZXR1cm4gbm9kZXNbcGlkXS5jaGlsZHJlbltub2Rlc1twaWRdLmNoaWxkcmVuLmxlbmd0aCAtIDFdXG4gIH0sXG5cbiAgYm90dG9tOiBmdW5jdGlvbiAocm9vdCwgbm9kZXMpIHtcbiAgICB2YXIgbm9kZSA9IG5vZGVzW3Jvb3RdXG4gICAgaWYgKCFub2RlLmNoaWxkcmVuLmxlbmd0aCkgcmV0dXJuXG4gICAgbm9kZSA9IG5vZGVzW25vZGUuY2hpbGRyZW5bbm9kZS5jaGlsZHJlbi5sZW5ndGggLSAxXV1cbiAgICB3aGlsZSAobm9kZS5jaGlsZHJlbi5sZW5ndGggJiYgIW5vZGUuY29sbGFwc2VkKSB7XG4gICAgICBub2RlID0gbm9kZXNbbm9kZS5jaGlsZHJlbltub2RlLmNoaWxkcmVuLmxlbmd0aCAtIDFdXVxuICAgIH1cbiAgICByZXR1cm4gbm9kZS5pZFxuICB9LFxuXG4gIHVwOiBmdW5jdGlvbiAoYWN0aXZlLCByb290LCBub2Rlcykge1xuICAgIGlmIChhY3RpdmUgPT09IHJvb3QpIHJldHVybiBmYWxzZVxuICAgIHZhciBwaWQgPSBub2Rlc1thY3RpdmVdLnBhcmVudFxuICAgICAgLCBpID0gbm9kZXNbcGlkXS5jaGlsZHJlbi5pbmRleE9mKGFjdGl2ZSlcbiAgICBpZiAoaSA9PT0gMCkgcmV0dXJuIHBpZFxuICAgIHZhciBzaWQgPSBub2Rlc1twaWRdLmNoaWxkcmVuW2kgLSAxXVxuICAgICAgLCBzaWIgPSBub2Rlc1tzaWRdXG4gICAgd2hpbGUgKHNpYi5jaGlsZHJlbi5sZW5ndGggJiYgIXNpYi5jb2xsYXBzZWQpIHtcbiAgICAgIHNpZCA9IHNpYi5jaGlsZHJlbltzaWIuY2hpbGRyZW4ubGVuZ3RoIC0gMV1cbiAgICAgIHNpYiA9IG5vZGVzW3NpZF1cbiAgICB9XG4gICAgcmV0dXJuIHNpZFxuICB9LFxuXG4gIGJlbG93OiBmdW5jdGlvbiAoYWN0aXZlLCByb290LCBub2Rlcykge1xuICAgIGlmIChhY3RpdmUgPT09IHJvb3QpIHJldHVybiBmYWxzZVxuICAgIHZhciBwaWQgPSBub2Rlc1thY3RpdmVdLnBhcmVudFxuICAgICAgLCBwYXJlbnQgPSBub2Rlc1twaWRdXG4gICAgICAsIGl4ID0gcGFyZW50LmNoaWxkcmVuLmluZGV4T2YoYWN0aXZlKVxuXG4gICAgaWYgKGl4ID09PSBwYXJlbnQuY2hpbGRyZW4ubGVuZ3RoIC0gMSkge1xuICAgICAgaWYgKHBpZCA9PT0gcm9vdCkgcmV0dXJuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBvcGlkOiBwaWQsXG4gICAgICAgIHBpZDogcGFyZW50LnBhcmVudCxcbiAgICAgICAgaXg6IG5vZGVzW3BhcmVudC5wYXJlbnRdLmNoaWxkcmVuLmluZGV4T2YocGlkKSArIDFcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIG5pZCA9IHBhcmVudC5jaGlsZHJlbltpeCArIDFdXG4gICAgICAsIG5leHQgPSBub2Rlc1tuaWRdXG4gICAgaWYgKG5leHQuY2hpbGRyZW4ubGVuZ3RoICYmICFuZXh0LmNvbGxhcHNlZCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb3BpZDogcGlkLFxuICAgICAgICBwaWQ6IG5pZCxcbiAgICAgICAgaXg6IDBcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHBpZDogcGlkLFxuICAgICAgaXg6IGl4ICsgMSxcbiAgICB9XG4gIH0sXG5cbiAgYWJvdmU6IGZ1bmN0aW9uIChhY3RpdmUsIHJvb3QsIG5vZGVzKSB7XG4gICAgaWYgKGFjdGl2ZSA9PT0gcm9vdCkgcmV0dXJuIGZhbHNlXG4gICAgdmFyIHBpZCA9IG5vZGVzW2FjdGl2ZV0ucGFyZW50XG4gICAgICAsIHBhcmVudCA9IG5vZGVzW3BpZF1cbiAgICAgICwgaXggPSBwYXJlbnQuY2hpbGRyZW4uaW5kZXhPZihhY3RpdmUpXG5cbiAgICBpZiAoaXggPT09IDApIHtcbiAgICAgIGlmIChwaWQgPT09IHJvb3QpIHJldHVyblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb3BpZDogcGlkLFxuICAgICAgICBwaWQ6IHBhcmVudC5wYXJlbnQsXG4gICAgICAgIGl4OiBub2Rlc1twYXJlbnQucGFyZW50XS5jaGlsZHJlbi5pbmRleE9mKHBpZClcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIG5pZCA9IHBhcmVudC5jaGlsZHJlbltpeCAtIDFdXG4gICAgICAsIG5leHQgPSBub2Rlc1tuaWRdXG4gICAgaWYgKG5leHQuY2hpbGRyZW4ubGVuZ3RoICYmICFuZXh0LmNvbGxhcHNlZCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb3BpZDogcGlkLFxuICAgICAgICBwaWQ6IG5pZCxcbiAgICAgICAgaXg6IG5leHQuY2hpbGRyZW4ubGVuZ3RoXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBwaWQ6IHBpZCxcbiAgICAgIGl4OiBpeCAtIDEsXG4gICAgfVxuICB9LFxuXG4gIGRvd246IGZ1bmN0aW9uIChhY3RpdmUsIHJvb3QsIG5vZGVzLCBub0NoaWxkcmVuKSB7XG4gICAgaWYgKG5vZGVzW2FjdGl2ZV0uY2hpbGRyZW4ubGVuZ3RoICYmICFub0NoaWxkcmVuICYmXG4gICAgICAgIChhY3RpdmUgPT09IHJvb3QgfHwgIW5vZGVzW2FjdGl2ZV0uY29sbGFwc2VkKSkge1xuICAgICAgcmV0dXJuIG5vZGVzW2FjdGl2ZV0uY2hpbGRyZW5bMF1cbiAgICB9XG4gICAgaWYgKGFjdGl2ZSA9PT0gcm9vdCkgcmV0dXJuIGZhbHNlXG4gICAgdmFyIHBpZCA9IG5vZGVzW2FjdGl2ZV0ucGFyZW50XG4gICAgICAsIHBhcmVudCA9IG5vZGVzW3BpZF1cbiAgICAgICwgaSA9IHBhcmVudC5jaGlsZHJlbi5pbmRleE9mKGFjdGl2ZSlcbiAgICB3aGlsZSAocGlkICE9PSByb290ICYmIGkgPT09IHBhcmVudC5jaGlsZHJlbi5sZW5ndGggLSAxKSB7XG4gICAgICBwYXJlbnQgPSBub2Rlc1twYXJlbnQucGFyZW50XVxuICAgICAgaSA9IHBhcmVudC5jaGlsZHJlbi5pbmRleE9mKHBpZClcbiAgICAgIHBpZCA9IHBhcmVudC5pZFxuICAgIH1cbiAgICBpZiAocGFyZW50ID09PSByb290KSByZXR1cm4gZmFsc2VcbiAgICByZXR1cm4gcGFyZW50LmNoaWxkcmVuW2kgKyAxXVxuICB9LFxuXG4gIGxlZnQ6IGZ1bmN0aW9uIChhY3RpdmUsIHJvb3QsIG5vZGVzKSB7XG4gICAgaWYgKGFjdGl2ZSA9PT0gcm9vdCkgcmV0dXJuIGZhbHNlXG4gICAgcmV0dXJuIG5vZGVzW2FjdGl2ZV0ucGFyZW50XG4gIH0sXG5cbiAgcmlnaHQ6IGZ1bmN0aW9uIChhY3RpdmUsIHJvb3QsIG5vZGVzKSB7XG4gICAgdmFyIG5vZGUgPSBub2Rlc1thY3RpdmVdXG4gICAgaWYgKG5vZGUuY2hpbGRyZW4ubGVuZ3RoICYmICFub2RlLmNvbGxhcHNlZCkge1xuICAgICAgcmV0dXJuIG5vZGUuY2hpbGRyZW5bMF1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG4gIH0sXG5cbiAgc3Vydml2aW5nTmVpZ2hib3I6IGZ1bmN0aW9uIChpZCwgcm9vdCwgbm9kZXMpIHtcbiAgICBpZiAoaWQgPT09IHJvb3QpIHJldHVybiBmYWxzZVxuICAgIHZhciBwaWQgPSBub2Rlc1tpZF0ucGFyZW50XG4gICAgICAsIGNoID0gbm9kZXNbcGlkXS5jaGlsZHJlblxuICAgICAgLCBpeCA9IGNoLmluZGV4T2YoaWQpXG4gICAgaWYgKGl4IDwgY2gubGVuZ3RoIC0gMSkgcmV0dXJuIGNoW2l4ICsgMV1cbiAgICBpZiAoaXggPiAwKSByZXR1cm4gY2hbaXggLSAxXVxuICAgIHJldHVybiBwaWRcbiAgfSxcbn1cblxuXG4iLCJcbnZhciBtb3ZlbWVudCA9IHJlcXVpcmUoJy4vbW92ZW1lbnQnKVxuICAsIGxpc3RNb3ZlbWVudCA9IHJlcXVpcmUoJy4uL2xpc3QvbW92ZW1lbnQnKVxuICAsIGxpc3RBY3Rpb25zID0gcmVxdWlyZSgnLi4vbGlzdC9hY3Rpb25zJylcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgY3JlYXRlQmVmb3JlOiBmdW5jdGlvbiAoaWQpIHtcbiAgICBpZCA9IGlkIHx8IHRoaXMudmlldy5hY3RpdmVcbiAgICB2YXIgbm9kZSA9IHRoaXMuZGIubm9kZXNbaWRdXG4gICAgICAsIHBvc1xuICAgIGlmIChpZCA9PT0gdGhpcy52aWV3LnJvb3QpIHtcbiAgICAgIHBvcyA9IHtcbiAgICAgICAgcGlkOiBpZCxcbiAgICAgICAgdHlwZTogbm9kZS50eXBlLFxuICAgICAgICBpeDogMFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwb3MgPSB7XG4gICAgICAgIHBpZDogbm9kZS5wYXJlbnQsXG4gICAgICAgIHR5cGU6IG5vZGUudHlwZSxcbiAgICAgICAgaXg6IHRoaXMuZGIubm9kZXNbbm9kZS5wYXJlbnRdLmNoaWxkcmVuLmluZGV4T2YoaWQpLFxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmV4ZWN1dGVDb21tYW5kKCdjcmVhdGUnLCBwb3MsIChlcnIsIGNtZCkgPT4ge1xuICAgICAgaWYgKGVycikgcmV0dXJuIGNvbnNvbGUud2FybignZmFpbGVkIHRvIGNyZWF0ZScsIGVycikgLy8gVE9ETyBVST9cbiAgICAgIHRoaXMuZWRpdChjbWQuaWQpXG4gICAgfSlcbiAgfSxcblxuICBjcmVhdGVBZnRlcjogZnVuY3Rpb24gKGlkLCBzcGxpdCwgYWZ0ZXIpIHtcbiAgICBpZCA9IGlkIHx8IHRoaXMudmlldy5hY3RpdmVcbiAgICB2YXIgbm9kZSA9IHRoaXMuZGIubm9kZXNbaWRdXG4gICAgICAsIHBvc1xuICAgIGlmIChpZCA9PT0gdGhpcy52aWV3LnJvb3QpIHtcbiAgICAgIHBvcyA9IHtcbiAgICAgICAgcGlkOiBpZCxcbiAgICAgICAgdHlwZTogbm9kZS50eXBlLFxuICAgICAgICBpeDogMFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwb3MgPSB7XG4gICAgICAgIHBpZDogbm9kZS5wYXJlbnQsXG4gICAgICAgIHR5cGU6IG5vZGUudHlwZSxcbiAgICAgICAgaXg6IHRoaXMuZGIubm9kZXNbbm9kZS5wYXJlbnRdLmNoaWxkcmVuLmluZGV4T2YoaWQpICsgMSxcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMpIHtcbiAgICAgIHBvcy5jb250ZW50ID0gYWZ0ZXJcbiAgICAgIHRoaXMuZXhlY3V0ZUNvbW1hbmRzKFxuICAgICAgICAnc2V0Jywge1xuICAgICAgICAgIGlkLFxuICAgICAgICAgIGF0dHI6ICdjb250ZW50JyxcbiAgICAgICAgICB2YWx1ZTogc3BsaXQsXG4gICAgICAgIH0sXG4gICAgICAgICdjcmVhdGUnLCBwb3MsXG4gICAgICAgIChlcnIsIGNtZCkgPT4ge1xuICAgICAgICAgIGlmIChlcnIpIHJldHVybiBjb25zb2xlLndhcm4oJ2ZhaWxlZCB0byBjcmVhdGUnLCBlcnIpIC8vIFRPRE8gVUk/XG4gICAgICAgICAgdGhpcy5lZGl0U3RhcnQoY21kLmlkKVxuICAgICAgICB9XG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZXhlY3V0ZUNvbW1hbmQoJ2NyZWF0ZScsIHBvcywgKGVyciwgY21kKSA9PiB7XG4gICAgICBpZiAoZXJyKSByZXR1cm4gY29uc29sZS53YXJuKCdmYWlsZWQgdG8gY3JlYXRlJywgZXJyKSAvLyBUT0RPIFVJP1xuICAgICAgICB0aGlzLmVkaXQoY21kLmlkKVxuICAgICAgfSlcbiAgICB9XG4gIH0sXG5cbiAgam9pblVwOiBmdW5jdGlvbiAoKSB7fSxcbiAgcmVtb3ZlRW1wdHk6IGZ1bmN0aW9uICgpIHt9LFxuXG4gIG1vdmVEb3duOiBmdW5jdGlvbiAoaWQpIHtcbiAgICBpZCA9IGlkIHx8IHRoaXMudmlldy5hY3RpdmVcbiAgICBsZXQgaWRzXG4gICAgaWYgKHRoaXMudmlldy5tb2RlID09PSAndmlzdWFsJykge1xuICAgICAgaWRzID0gdGhpcy52aWV3LnNlbGVjdGlvblxuICAgIH0gZWxzZSB7XG4gICAgICBpZHMgPSBbaWRdXG4gICAgfVxuICAgIHZhciBwb3MgPSBtb3ZlbWVudC5iZWxvdyhpZHNbaWRzLmxlbmd0aCAtIDFdLCB0aGlzLnZpZXcucm9vdCwgdGhpcy5kYi5ub2RlcylcbiAgICBpZiAoIXBvcykgcmV0dXJuXG4gICAgdGhpcy5leGVjdXRlQ29tbWFuZCgnbW92ZU1hbnknLCB7XG4gICAgICBpZHMsXG4gICAgICBucGlkOiBwb3MucGlkLFxuICAgICAgbmV4dElzUm9vdDogcG9zLnBpZCA9PT0gdGhpcy52aWV3LnJvb3QsXG4gICAgICBuaW5kZXg6IHBvcy5peCxcbiAgICB9KVxuICB9LFxuXG4gIG1vdmVVcDogZnVuY3Rpb24gKGlkKSB7XG4gICAgaWQgPSBpZCB8fCB0aGlzLnZpZXcuYWN0aXZlXG4gICAgbGV0IGlkc1xuICAgIGlmICh0aGlzLnZpZXcubW9kZSA9PT0gJ3Zpc3VhbCcpIHtcbiAgICAgIGlkcyA9IHRoaXMudmlldy5zZWxlY3Rpb25cbiAgICB9IGVsc2Uge1xuICAgICAgaWRzID0gW2lkXVxuICAgIH1cbiAgICB2YXIgcG9zID0gbW92ZW1lbnQuYWJvdmUoaWRzW2lkcy5sZW5ndGggLSAxXSwgdGhpcy52aWV3LnJvb3QsIHRoaXMuZGIubm9kZXMpXG4gICAgdGhpcy5leGVjdXRlQ29tbWFuZCgnbW92ZU1hbnknLCB7XG4gICAgICBpZHMsXG4gICAgICBucGlkOiBwb3MucGlkLFxuICAgICAgbmV4dElzUm9vdDogcG9zLnBpZCA9PT0gdGhpcy52aWV3LnJvb3QsXG4gICAgICBuaW5kZXg6IHBvcy5peCxcbiAgICB9KVxuICB9LFxuXG4gIGdvVXA6IGZ1bmN0aW9uIChpZCkge1xuICAgIGlkID0gaWQgfHwgdGhpcy52aWV3LmFjdGl2ZVxuICAgIGlmIChpZCA9PT0gdGhpcy52aWV3LnJvb3QpIHJldHVybiB0aGlzLmdvUmlnaHQoaWQpXG4gICAgdmFyIG5leHQgPSBtb3ZlbWVudC5wcmV2U2libGluZ09yQ291c2luKGlkLCB0aGlzLnZpZXcucm9vdCwgdGhpcy5kYi5ub2RlcylcbiAgICB0aGlzLnNldEFjdGl2ZShuZXh0KVxuICB9LFxuXG4gIGdvRG93bjogZnVuY3Rpb24gKGlkKSB7XG4gICAgaWQgPSBpZCB8fCB0aGlzLnZpZXcuYWN0aXZlXG4gICAgdmFyIG5leHQgPSBtb3ZlbWVudC5uZXh0U2libGluZ09yQ291c2luKGlkLCB0aGlzLnZpZXcucm9vdCwgdGhpcy5kYi5ub2RlcylcbiAgICBpZiAoIW5leHQpIHtcbiAgICAgIHZhciBjaCA9IHRoaXMuZGIubm9kZXNbaWRdLmNoaWxkcmVuXG4gICAgICBpZiAoY2ggJiYgY2gubGVuZ3RoICYmICghdGhpcy5kYi5ub2Rlc1tpZF0uY29sbGFwc2VkIHx8IGlkID09PSB0aGlzLnZpZXcucm9vdCkpIHtcbiAgICAgICAgbmV4dCA9IGNoW2NoLmxlbmd0aCAtIDFdXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5zZXRBY3RpdmUobmV4dClcbiAgfSxcblxuICBnb0xlZnQ6IGxpc3RBY3Rpb25zLmdvTGVmdCxcblxuICBnb1RvRmlyc3RTaWJsaW5nOiBmdW5jdGlvbiAoaWQpIHtcbiAgICBpZCA9IGlkIHx8IHRoaXMudmlldy5hY3RpdmVcbiAgICB2YXIgZmlyc3QgPSBsaXN0TW92ZW1lbnQuZmlyc3RTaWJsaW5nKGlkLCB0aGlzLnZpZXcucm9vdCwgdGhpcy5kYi5ub2RlcylcbiAgICBpZiAoZmlyc3QgPT09IGlkKSB7XG4gICAgICBmaXJzdCA9IG1vdmVtZW50LnByZXZTaWJsaW5nT3JDb3VzaW4oaWQsIHRoaXMudmlldy5yb290LCB0aGlzLmRiLm5vZGVzKVxuICAgIH1cbiAgICB0aGlzLnNldEFjdGl2ZShmaXJzdClcbiAgfSxcblxuICBnb1RvTGFzdFNpYmxpbmc6IGZ1bmN0aW9uIChpZCkge1xuICAgIGlkID0gaWQgfHwgdGhpcy52aWV3LmFjdGl2ZVxuICAgIHZhciBsYXN0ID0gbGlzdE1vdmVtZW50Lmxhc3RTaWJsaW5nKGlkLCB0aGlzLnZpZXcucm9vdCwgdGhpcy5kYi5ub2RlcylcbiAgICBpZiAobGFzdCA9PT0gaWQpIHtcbiAgICAgIGxhc3QgPSBtb3ZlbWVudC5uZXh0U2libGluZ09yQ291c2luKGlkLCB0aGlzLnZpZXcucm9vdCwgdGhpcy5kYi5ub2RlcylcbiAgICB9XG4gICAgdGhpcy5zZXRBY3RpdmUobGFzdClcbiAgfSxcblxuICBnb1JpZ2h0OiBmdW5jdGlvbiAoaWQpIHtcbiAgICBpZCA9IGlkIHx8IHRoaXMudmlldy5hY3RpdmVcbiAgICB2YXIgcmlnaHQgPSBtb3ZlbWVudC5yaWdodChpZCwgdGhpcy52aWV3LnJvb3QsIHRoaXMuZGIubm9kZXMpXG4gICAgaWYgKHJpZ2h0KSB0aGlzLnNldEFjdGl2ZShyaWdodClcbiAgfSxcblxuICBnb1RvTmV4dENvdXNpbjogZnVuY3Rpb24gKGlkKSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMuZGIubm9kZXNbaWRdLnBhcmVudFxuICAgICAgLCBuZXh0XG4gICAgaWYgKCFwYXJlbnQpIHJldHVybiBmYWxzZVxuICAgIG5leHQgPSBtb3ZlbWVudC5uZXh0Q291c2luKHBhcmVudCwgdGhpcy52aWV3LnJvb3QsIHRoaXMuZGIubm9kZXMpXG4gICAgdGhpcy5zZXRBY3RpdmUobmV4dClcbiAgfSxcblxuICBnb1RvTmV4dFNpYmxpbmc6IGZ1bmN0aW9uIChpZCkge1xuICAgIGlkID0gaWQgfHwgdGhpcy52aWV3LmFjdGl2ZVxuICAgIGlmIChpZCA9PT0gdGhpcy52aWV3LnJvb3QpIHJldHVyblxuICAgIHZhciBuZXh0ID0gbW92ZW1lbnQubmV4dFNpYmxpbmcoaWQsIHRoaXMudmlldy5yb290LCB0aGlzLmRiLm5vZGVzKVxuICAgIGlmICghbmV4dCkge1xuICAgICAgdmFyIHBhcmVudCA9IHRoaXMuZGIubm9kZXNbaWRdLnBhcmVudFxuICAgICAgbmV4dCA9IG1vdmVtZW50Lm5leHRTaWJsaW5nKHBhcmVudCwgdGhpcy52aWV3LnJvb3QsIHRoaXMuZGIubm9kZXMpXG4gICAgfVxuICAgIGlmICghbmV4dCkge1xuICAgICAgbmV4dCA9IG1vdmVtZW50LmRvd24oaWQsIHRoaXMudmlldy5yb290LCB0aGlzLmRiLm5vZGVzKVxuICAgIH1cbiAgICB0aGlzLnNldEFjdGl2ZShuZXh0KVxuICB9LFxuXG4gIGdvVG9TdXJ2aXZpbmdOZWlnaGJvcjogbGlzdEFjdGlvbnMuZ29Ub1N1cnZpdmluZ05laWdoYm9yLFxuXG4gIHJlbW92ZTogZnVuY3Rpb24gKGlkKSB7XG4gICAgaWQgPSBpZCB8fCB0aGlzLnZpZXcuYWN0aXZlXG4gICAgaWYgKGlkID09PSB0aGlzLnZpZXcucm9vdCkgcmV0dXJuXG4gICAgdmFyIG5leHQsIGlkc1xuICAgIGlmICh0aGlzLnZpZXcubW9kZSA9PT0gJ3Zpc3VhbCcpIHtcbiAgICAgIGlkcyA9IHRoaXMudmlldy5zZWxlY3Rpb25cbiAgICAgIG5leHQgPSBtb3ZlbWVudC5kb3duKGlkc1tpZHMubGVuZ3RoIC0gMV0sIHRoaXMudmlldy5yb290LCB0aGlzLmRiLm5vZGVzLCB0cnVlKVxuICAgICAgdGhpcy5zZXRNb2RlKCdub3JtYWwnLCB0cnVlKVxuICAgIH0gZWxzZSB7XG4gICAgICBpZHMgPSBbaWRdXG4gICAgICBuZXh0ID0gbW92ZW1lbnQuZG93bihpZCwgdGhpcy52aWV3LnJvb3QsIHRoaXMuZGIubm9kZXMsIHRydWUpXG4gICAgfVxuICAgIGlmICghbmV4dCkge1xuICAgICAgbmV4dCA9IG1vdmVtZW50LnVwKGlkc1swXSwgdGhpcy52aWV3LnJvb3QsIHRoaXMuZGIubm9kZXMpXG4gICAgfVxuICAgIHRoaXMudmlldy5hY3RpdmUgPSBuZXh0XG4gICAgdGhpcy5leGVjdXRlQ29tbWFuZCgncmVtb3ZlJywge2lkczogaWRzfSlcbiAgICB0aGlzLmNoYW5nZWQodGhpcy5ldmVudHMubm9kZUNoYW5nZWQobmV4dCkpXG4gIH0sXG5cbiAgLy8gVE9ETyBtYWtlIGN1c3RvbSBvbmVzXG4gIGluZGVudDogbGlzdEFjdGlvbnMuaW5kZW50LFxuICBkZWRlbnQ6IGxpc3RBY3Rpb25zLmRlZGVudCxcblxufVxuXG4iLCJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY2FsY1Bvcyhyb290LCBub2RlcywgeHNlcCwgeXNlcCwgY2VsbEhlaWdodCwgaGVpZ2h0cykge1xuICB2YXIgdHJlZSA9IGNyYXdsKHJvb3QsIG5vZGVzKVxuXG4gIHZhciB7Ym94ZXMsIGhlaWdodCwgd2lkdGh9ID0gY2FsY0JveGVzKHRyZWUsIGNlbGxIZWlnaHQsIHhzZXAsIDEsIHlzZXApXG4gIHZhciBsaW5rcyA9IFtdXG4gIHZhciByeCA9IDBcbiAgICAsIHJ5ID0gMFxuICByZWxhdGl2aXplKHRyZWUsIHJ4LCByeSlcblxuICByZXR1cm4ge2JveGVzLCBsaW5rcywgaGVpZ2h0LCB3aWR0aH1cblxuICBmdW5jdGlvbiByZWxhdGl2aXplKG5vZGUsIHgsIHksIGNvbGxhcHNlZCkge1xuICAgIHZhciBib3ggPSBib3hlc1tub2RlLmlkXVxuICAgIGlmIChub2RlLmNoaWxkcmVuKSBub2RlLmNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4ge1xuICAgICAgdmFyIGNiID0gYm94ZXNbY2hpbGQuaWRdXG4gICAgICBpZiAoIWNvbGxhcHNlZCAmJiAobm9kZS5pZCA9PT0gcm9vdCB8fCAhbm9kZS5jb2xsYXBzZWQpKSB7XG4gICAgICAgIGxpbmtzLnB1c2goe1xuICAgICAgICAgIHgxOiBib3gueCArIGJveC53aWR0aC8yIC0gcngsXG4gICAgICAgICAgeTE6IGJveC55ICsgYm94LmhlaWdodC8yIC0gcnksXG4gICAgICAgICAgeDI6IGNiLnggKyBjYi53aWR0aC8yIC0gcngsXG4gICAgICAgICAgeTI6IGNiLnkgKyBjYi5oZWlnaHQvMiAtIHJ5LFxuICAgICAgICAgIGlkOiBjaGlsZC5pZCxcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIHJlbGF0aXZpemUoY2hpbGQsIGJveC54LCBib3gueSwgY29sbGFwc2VkIHx8IChub2RlLmlkICE9PSByb290ICYmIG5vZGUuY29sbGFwc2VkKSlcbiAgICB9KVxuICAgIC8qXG4gICAgaWYgKGNvbGxhcHNlZCkge1xuICAgICAgYm94LnggPSAwXG4gICAgICBib3gueSA9IDBcbiAgICB9IGVsc2Uge1xuICAgICAgYm94LnggLT0geFxuICAgICAgYm94LnkgLT0geVxuICAgIH1cbiAgICAqL1xuICB9XG5cbiAgZnVuY3Rpb24gY3Jhd2woaWQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgY2hpbGRyZW46IChpZCAhPT0gcm9vdCAmJiBub2Rlc1tpZF0uY29sbGFwc2VkKSA/IG51bGwgOiBub2Rlc1tpZF0uY2hpbGRyZW4ubWFwKGNyYXdsKSxcbiAgICAgIHdpZHRoOiBoZWlnaHRzW2lkXSB8fCAyNSwgLy8gdG9kbyBob3cgZG8gSSBrbm93IHNpemVzP1xuICAgICAgLy8gbWF5YmUgcXVlcnkgdGhlIERPTT8gdGFrZXMgYSB3aGlsZS4uLlxuICAgIH1cbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGNhbGNCb3hlcyhkYXRhLCBjZWxsSGVpZ2h0LCB4c2VwLCBweHNjYWxlLCB5c2VwKSB7XG4gIHhzZXAgPSB4c2VwIHx8IDBcbiAgdmFyIHQgPSBkMy5sYXlvdXQudHJlZSgpXG4gIHQuc2VwYXJhdGlvbihmdW5jdGlvbihhLCBiKXtcbiAgICByZXR1cm4gYS53aWR0aCArIGIud2lkdGggKyAoeHNlcCB8fCAwKVxuICB9KTtcbiAgdmFyIG5vZGVzID0gdC5ub2RlcyhkYXRhKVxuICAvLyB2YXIgbGlua3MgPSB0LmxpbmtzKG5vZGVzKVxuXG4gIHZhciB7eHNjYWxlLCB5ZGVwdGh9ID0gZmluZFNjYWxlKGRhdGEsIHhzZXApXG4gIHZhciB4cyA9IHB4c2NhbGVcbiAgICAsIHlzID0gY2VsbEhlaWdodFxuICAgICwgaGVpZ2h0ID0geWRlcHRoICogKGNlbGxIZWlnaHQgKyB5c2VwIHx8IDApXG4gICAgLCB3aWR0aCA9IHB4c2NhbGUgLyB4c2NhbGVcbiAgLy9jb25zb2xlLmxvZyh4c2NhbGUsIHlkZXB0aClcblxuICB2YXIgYm94ZXMgPSB7fVxuICBub2Rlcy5mb3JFYWNoKG5vZGUgPT4ge1xuICAgIHZhciB4ID0gbm9kZS54ICogd2lkdGhcbiAgICAgICwgeSA9IG5vZGUueSAqIGhlaWdodFxuICAgIGJveGVzW25vZGUuaWRdID0ge1xuICAgICAgeDogeSxcbiAgICAgIHk6IHggLSBub2RlLndpZHRoLzIgKiB4cyxcbiAgICAgIGhlaWdodDogbm9kZS53aWR0aCAqIHhzLFxuICAgICAgd2lkdGg6IHlzLFxuICAgIH1cbiAgfSlcbiAgcmV0dXJuIHtib3hlcywgd2lkdGgsIGhlaWdodH1cbn1cblxuZnVuY3Rpb24gZmluZFNjYWxlKHJvb3ROb2RlLCBzZXApIHtcbiAgdmFyIG1pbiA9IG51bGxcbiAgICAsIG1heGRlcHRoID0gMVxuICBmdW5jdGlvbiBnZXRXaWR0aChub2RlLCBkZXB0aCkge1xuICAgIGlmIChtaW4gPT09IG51bGwgfHwgbWluID4gMS9ub2RlLndpZHRoKSBtaW4gPSAxL25vZGUud2lkdGhcbiAgICBpZiAoIW5vZGUuY2hpbGRyZW4pcmV0dXJuXG4gICAgaWYgKGRlcHRoID4gbWF4ZGVwdGgpIG1heGRlcHRoID0gZGVwdGhcbiAgICBmb3IgKHZhciBpPTA7IGk8bm9kZS5jaGlsZHJlbi5sZW5ndGgtMTsgaSsrKSB7XG4gICAgICB2YXIgYSA9IG5vZGUuY2hpbGRyZW5baV1cbiAgICAgICAgLCBiID0gbm9kZS5jaGlsZHJlbltpKzFdXG4gICAgICB2YXIgc2MgPSAoYi54IC0gYS54KSAvIChiLndpZHRoICsgYS53aWR0aCArIHNlcCAqIDIpICogMlxuICAgICAgaWYgKG1pbiA9PT0gbnVsbCB8fCBzYyA8IG1pbikge1xuICAgICAgICBtaW4gPSBzY1xuICAgICAgfVxuICAgICAgZ2V0V2lkdGgoYSwgZGVwdGggKyAxKVxuICAgIH1cbiAgICBpZiAobm9kZS5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgIGdldFdpZHRoKG5vZGUuY2hpbGRyZW5bbm9kZS5jaGlsZHJlbi5sZW5ndGgtMV0sIGRlcHRoICsgMSlcbiAgICB9XG4gIH1cbiAgZ2V0V2lkdGgocm9vdE5vZGUsIDEpXG4gIHJldHVybiB7eHNjYWxlOiBtaW4sIHlkZXB0aDogbWF4ZGVwdGh9XG59XG5cbi8qXG5mdW5jdGlvbiBzaG93Qm94ZXMoKSB7XG4gIHZhciBjYW52ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJylcbiAgY2Fudi53aWR0aD13aWR0aDtcbiAgY2Fudi5oZWlnaHQ9aGVpZ2h0ICsgMjBcbiAgdmFyIGN0eCA9IGNhbnYuZ2V0Q29udGV4dCgnMmQnKVxuICBjdHguY2xlYXJSZWN0KDAsMCx3aWR0aCxoZWlnaHQpXG4gIGN0eC5jbGVhclJlY3QoMCwwLHdpZHRoLGhlaWdodCsyMClcblxuICBsaW5rcy5mb3JFYWNoKGZ1bmN0aW9uKGxpbmspIHtcbiAgICB2YXIgc3QgPSBub2RlUG9zKGxpbmsuc291cmNlKVxuICAgICAgLCBlbiA9IG5vZGVQb3MobGluay50YXJnZXQpXG4gICAgY3R4LmJlZ2luUGF0aCgpXG4gICAgY3R4Lm1vdmVUbyhzdC54LHN0LnkpXG4gICAgY3R4LmxpbmVUbyhlbi54LGVuLnkpXG4gICAgY3R4LnN0cm9rZSgpXG4gIH0pXG5cbiAgbm9kZXMuZm9yRWFjaChmdW5jdGlvbihub2RlKSB7XG4gICAgdmFyIHggPSBub2RlLnggKiB3aWR0aFxuICAgICAgLCB5ID0gbm9kZS55ICogaGVpZ2h0XG4gICAgY3R4LmZpbGxTdHlsZSA9ICdsaWdodGJsdWUnO1xuICAgIGN0eC5maWxsUmVjdCh4IC0gbm9kZS53aWR0aC8yICogeHMsIHksIG5vZGUud2lkdGggKiB4cywgeXMpXG4gICAgY3R4LnN0cm9rZVJlY3QoeCAtIG5vZGUud2lkdGgvMiAqIHhzLCB5LCBub2RlLndpZHRoICogeHMsIHlzKVxuICB9KVxuICByZXR1cm4gY2FudlxufVxuKi9cblxuLypcbmZ1bmN0aW9uIGFkZERlcHRoKGRlcHRoLCBub2RlKSB7XG4gIG5vZGUuZGVwdGggPSBkZXB0aCArIDFcbiAgbm9kZS5jaGlsZHJlbiAmJiBub2RlLmNoaWxkcmVuLmZvckVhY2goYWRkRGVwdGguYmluZChudWxsLCBkZXB0aCsxKSlcbn1cbmZ1bmN0aW9uIGFkZFdpZHRoKG5vZGUpIHtcbiAgbm9kZS53aWR0aCA9IHBhcnNlSW50KE1hdGgucmFuZG9tKCkgKiA1KSArIDJcbiAgbm9kZS5jaGlsZHJlbiAmJiBub2RlLmNoaWxkcmVuLmZvckVhY2goYWRkV2lkdGgpXG59XG4qL1xuIiwidmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QvYWRkb25zJylcbiAgLCBjeCA9IFJlYWN0LmFkZG9ucy5jbGFzc1NldFxuICAsIFBUID0gUmVhY3QuUHJvcFR5cGVzXG5cbiAgLCBMaXN0ZW5lciA9IHJlcXVpcmUoJy4uLy4uL2xpc3RlbmVyJylcbiAgLCBjYWxjUG9zID0gcmVxdWlyZSgnLi9jYWxjcG9zJylcbiAgLCBNb3ZhYmxlID0gcmVxdWlyZSgnLi9tb3ZhYmxlJylcbiAgLCBleHRlbmQgPSByZXF1aXJlKCcuLi8uLi91dGlsL2V4dGVuZCcpXG5cbnZhciBNaW5kbWFwID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBzdGF0aWNzOiB7XG4gICAga2V5czogcmVxdWlyZSgnLi9rZXlzJyksXG4gICAgYWN0aW9uczogcmVxdWlyZSgnLi9hY3Rpb25zJyksXG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiAoKSB7XG4gICAgLy8gVE9ETyBnZXQgdGhpcyB2YWx1ZSBmcm9tIHRoZSBjb250YWluZXJcbiAgICByZXR1cm4ge3dpZHRoOiAxMjAwLCBoZWlnaHQ6IDgwMH1cbiAgfSxcblxuICBtaXhpbnM6IFtcbiAgICBMaXN0ZW5lcih7XG4gICAgICBzdG9yZUF0dHJzOiBmdW5jdGlvbiAoc3RvcmUsIHByb3BzKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcm9vdDogc3RvcmUudmlldy5yb290LFxuICAgICAgICAgIC8vIG1vZGU6IHN0b3JlLnZpZXcubW9kZSxcbiAgICAgICAgICBpc0FjdGl2ZTogc3RvcmUuaXNBY3RpdmVWaWV3KCksXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBnZXRMaXN0ZW5lcnM6IGZ1bmN0aW9uIChwcm9wcywgZXZlbnRzKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgZXZlbnRzLnJvb3RDaGFuZ2VkKCksXG4gICAgICAgICAgLy8gZXZlbnRzLm1vZGVDaGFuZ2VkKCksXG4gICAgICAgICAgZXZlbnRzLmFjdGl2ZVZpZXdDaGFuZ2VkKCksXG4gICAgICAgICAgZXZlbnRzLmNoYW5nZWQoKSxcbiAgICAgICAgXVxuICAgICAgfSxcbiAgICB9KVxuICBdLFxuXG4gIHByb3BUeXBlczoge1xuICAgIHBsdWdpbnM6IFBULmFycmF5LFxuICAgIG5vZGVQbHVnaW5zOiBQVC5hcnJheSxcbiAgICBza2lwTWl4OiBQVC5hcnJheSxcbiAgICB3aWR0aDogUFQubnVtYmVyLFxuICAgIGhlaWdodDogUFQubnVtYmVyLFxuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7aGVpZ2h0czoge319XG4gIH0sXG5cbiAgX29uSGVpZ2h0OiBmdW5jdGlvbiAoaWQsIGhlaWdodCkge1xuICAgIGlmIChoZWlnaHQgPT0gdGhpcy5zdGF0ZS5oZWlnaHRzW2lkXSkgcmV0dXJuXG4gICAgdGhpcy5zdGF0ZS5oZWlnaHRzW2lkXSA9IGhlaWdodFxuICAgIHRoaXMuc2V0U3RhdGUoe2hlaWdodHM6IHRoaXMuc3RhdGUuaGVpZ2h0c30pXG4gIH0sXG5cbiAgX3JlQ2FsYzogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZm9yY2VVcGRhdGUoKVxuICB9LFxuXG4gIGNhbGNQb3NpdGlvbnM6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcG9zaXRpb25zID0gY2FsY1BvcyhcbiAgICAgIHRoaXMucHJvcHMuc3RvcmUudmlldy5yb290LFxuICAgICAgdGhpcy5wcm9wcy5zdG9yZS5hY3Rpb25zLmRiLm5vZGVzLFxuICAgICAgMjAsXG4gICAgICAxMDAsXG4gICAgICAyNTAsXG4gICAgICB0aGlzLnN0YXRlLmhlaWdodHMpO1xuICAgIHJldHVybiBwb3NpdGlvbnNcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcG9zaXRpb25zID0gdGhpcy5jYWxjUG9zaXRpb25zKClcbiAgICB2YXIgYm9kaWVzID0ge1xuICAgICAgZGVmYXVsdDoge2VkaXRvcjogbnVsbCwgcmVuZGVyZXI6IG51bGx9XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BzLm5vZGVQbHVnaW5zKSB7XG4gICAgICBmb3IgKHZhciBpPTA7IGk8dGhpcy5wcm9wcy5ub2RlUGx1Z2lucy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5ub2RlUGx1Z2luc1tpXS5ib2RpZXMpIHtcbiAgICAgICAgICBib2RpZXMgPSBleHRlbmQoYm9kaWVzLCB0aGlzLnByb3BzLm5vZGVQbHVnaW5zW2ldLmJvZGllcylcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB2YXIge2hlaWdodCwgd2lkdGh9ID0gdGhpcy5wcm9wc1xuICAgIGlmICh0aGlzLmlzTW91bnRlZCgpKSB7XG4gICAgICB2YXIgYm94ID0gdGhpcy5nZXRET01Ob2RlKCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgIGhlaWdodCA9IGJveC5oZWlnaHRcbiAgICAgIHdpZHRoID0gYm94LndpZHRoXG4gICAgfVxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT17Y3goe1xuICAgICAgICAnTWluZG1hcCc6IHRydWUsXG4gICAgICAgICdNaW5kbWFwLWFjdGl2ZSc6IHRoaXMuc3RhdGUuaXNBY3RpdmUsXG4gICAgfSl9PlxuICAgICAgPE1vdmFibGVcbiAgICAgICAgaGVpZ2h0PXtoZWlnaHR9XG4gICAgICAgIHdpZHRoPXt3aWR0aH1cbiAgICAgICAgYm9kaWVzPXtib2RpZXN9XG4gICAgICAgIHBvc2l0aW9ucz17cG9zaXRpb25zfVxuICAgICAgICByZUNhbGM9e3RoaXMuX3JlQ2FsY31cbiAgICAgICAgb25IZWlnaHQ9e3RoaXMuX29uSGVpZ2h0fVxuICAgICAgICBwbHVnaW5zPXt0aGlzLnByb3BzLm5vZGVQbHVnaW5zfVxuICAgICAgICBzdG9yZT17dGhpcy5wcm9wcy5zdG9yZX1cbiAgICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgfSxcbn0pXG5cbm1vZHVsZS5leHBvcnRzID0gTWluZG1hcFxuXG4iLCJcbm1vZHVsZS5leHBvcnRzID0ge1xuICAnbW92ZW1lbnQnOiB7XG4gICAgJ2dvIGRvd24nOiB7XG4gICAgICBub3JtYWw6ICdkb3duLCBqJyxcbiAgICB9LFxuICAgICdnbyB1cCc6IHtcbiAgICAgIG5vcm1hbDogJ3VwLCBrJyxcbiAgICB9LFxuICAgICdnbyBsZWZ0Jzoge1xuICAgICAgbm9ybWFsOiAnbGVmdCwgaCcsXG4gICAgfSxcbiAgICAnZ28gcmlnaHQnOiB7XG4gICAgICBub3JtYWw6ICdyaWdodCwgbCcsXG4gICAgfSxcbiAgICAnZ28gdG8gZmlyc3Qgc2libGluZyc6IHtcbiAgICAgIG5vcm1hbDogJ3NoaWZ0K1snLFxuICAgIH0sXG4gICAgJ2dvIHRvIGxhc3Qgc2libGluZyc6IHtcbiAgICAgIG5vcm1hbDogJ3NoaWZ0K10nLFxuICAgIH0sXG4gICAgJ2VkaXQnOiB7XG4gICAgICBub3JtYWw6ICdlbnRlcicsXG4gICAgfSxcbiAgICAnaW5kZW50Jzoge1xuICAgICAgbm9ybWFsOiAndGFiLCBzaGlmdCthbHQrbCwgc2hpZnQrYWx0K3JpZ2h0JyxcbiAgICB9LFxuICAgICdkZWRlbnQnOiB7XG4gICAgICBub3JtYWw6ICdzaGlmdCt0YWIsIHNoaWZ0K2FsdCtoLCBzaGlmdCthbHQrbGVmdCcsXG4gICAgfSxcbiAgICAnbW92ZSB1cCc6IHtcbiAgICAgIG5vcm1hbDogJ3NoaWZ0K2FsdCt1cCwgc2hpZnQrYWx0K2snLFxuICAgIH0sXG4gICAgJ21vdmUgZG93bic6IHtcbiAgICAgIG5vcm1hbDogJ3NoaWZ0K2FsdCtkb3duLCBzaGlmdCthbHQraicsXG4gICAgfSxcbiAgICAnY3JlYXRlIGJlZm9yZSc6IHtcbiAgICAgIG5vcm1hbDogJ3NoaWZ0K28nLFxuICAgIH0sXG4gICAgJ2NyZWF0ZSBhZnRlcic6IHtcbiAgICAgIG5vcm1hbDogJ28nLFxuICAgIH0sXG4gIH1cbn1cblxuIiwidmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QvYWRkb25zJylcbiAgLy8gLCBQVCA9IFJlYWN0LlByb3BUeXBlc1xuXG5mdW5jdGlvbiBsaW5lKG9iaikge1xuICB2YXIge3gxLCB5MSwgeDIsIHkyfSA9IG9ialxuICByZXR1cm4gJ00nICsgcGFyc2VJbnQoeDEpICsgJyAnICsgcGFyc2VJbnQoeTEpICsgJyBMJyArIHBhcnNlSW50KHgyKSArICcgJyArIHBhcnNlSW50KHkyKVxufVxuXG52YXIgTWluZG1hcExpbmtzID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAvLyB0aGlzLnJlbmRlckNhbnZhcygpXG4gIH0sXG4gIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAvLyB0aGlzLnJlbmRlckNhbnZhcygpXG4gIH0sXG4gIHJlbmRlckNhbnZhcygpIHtcbiAgICB2YXIgY3R4ID0gdGhpcy5nZXRET01Ob2RlKCkuZ2V0Q29udGV4dCgnMmQnKVxuICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy5wcm9wcy53aWR0aCwgdGhpcy5wcm9wcy5oZWlnaHQpXG4gICAgY3R4LnN0cm9rZVN0eWxlPSdyZWQnXG4gICAgY3R4LmxpbmVXaWR0aCA9IDEwXG4gICAgdmFyIGR4ID0gdGhpcy5wcm9wcy5sZWZ0XG4gICAgICAsIGR5ID0gdGhpcy5wcm9wcy50b3BcbiAgICB0aGlzLnByb3BzLmxpbmtzLmZvckVhY2gobGluayA9PiB7XG4gICAgICBjdHguYmVnaW5QYXRoKClcbiAgICAgIGN0eC5tb3ZlVG8obGluay55MSArIGR4LCBsaW5rLngxICsgZHkpXG4gICAgICBjdHgubGluZVRvKGxpbmsueTIgKyBkeCwgbGluay54MiArIGR5KVxuICAgICAgY3R4LnN0cm9rZSgpXG4gICAgfSlcbiAgfSxcblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBmdW5jdGlvbiAoKSB7XG4gIH0sXG5cbiAgcmVuZGVyU1ZHKCkge1xuICAgIHJldHVybiA8c3ZnIGNsYXNzTmFtZT0nTWluZG1hcExpbmtzJz5cbiAgICAgIHt0aGlzLnByb3BzLmxpbmtzLm1hcChsaW5rID0+XG4gICAgICAgIDxMaW5rXG4gICAgICAgICAga2V5PXtsaW5rLmlkfVxuICAgICAgICAgIGxpbmU9e2xpbmt9Lz5cbiAgICAgICl9XG4gICAgPC9zdmc+XG4gIH0sXG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiB0aGlzLnJlbmRlclNWRygpXG4gICAgLy8gcmV0dXJuIDxjYW52YXMgd2lkdGg9e3RoaXMucHJvcHMud2lkdGh9IGhlaWdodD17dGhpcy5wcm9wcy5oZWlnaHR9Lz5cbiAgfVxufSlcblxuXG52YXIgTGluayA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGR1cjogMjAwLFxuICAgIH1cbiAgfSxcbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHt0OiAwLCBzdGFydDogRGF0ZS5ub3coKSwgbGluZTogdGhpcy5wcm9wcy5saW5lfVxuICB9LFxuICBjb21wb25lbnRXaWxsTW91bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9pbnQgPSBzZXRJbnRlcnZhbCh0aGlzLnVwLCAxMClcbiAgfSxcbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICBpZiAobGluZSh0aGlzLnByb3BzLmxpbmUpICE9PSBsaW5lKG5leHRQcm9wcy5saW5lKSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHQ6IDAsXG4gICAgICAgIHN0YXJ0OiBEYXRlLm5vdygpLFxuICAgICAgICBsaW5lOiB0aGlzLnByb3BzLmxpbmVcbiAgICAgIH0pXG4gICAgfVxuICB9LFxuICBjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5zdGF0ZS50ID09PSAwICYmICF0aGlzLl9pbnQpIHtcbiAgICAgIHRoaXMuX2ludCA9IHNldEludGVydmFsKHRoaXMudXAsIDEwKVxuICAgIH1cbiAgfSxcbiAgY29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICBjbGVhckludGVydmFsKHRoaXMuX2ludClcbiAgICBkZWxldGUgdGhpcy5faW50XG4gIH0sXG4gIHVwOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUudCA+PSB0aGlzLnByb3BzLmR1cikge1xuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnQpXG4gICAgICBkZWxldGUgdGhpcy5faW50XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgdGhpcy5zZXRTdGF0ZSh7dDogRGF0ZS5ub3coKSAtIHRoaXMuc3RhdGUuc3RhcnR9KVxuICB9LFxuICBnZXRMaW5lOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGVhc2UgPSBkMy5lYXNlKCdlYXNlJylcbiAgICB2YXIgdCA9IGVhc2UodGhpcy5zdGF0ZS50IC8gdGhpcy5wcm9wcy5kdXIpXG4gICAgdmFyIHt4MSwgeDIsIHkxLCB5Mn0gPSB0aGlzLnN0YXRlLmxpbmUgLy8gY3VycmVudFxuICAgICAgLCBuZXh0ID0gdGhpcy5wcm9wcy5saW5lXG4gICAgICAsIHBhcnQgPSAoYSwgYikgPT4gYSArIHQqKGItYSlcbiAgICByZXR1cm4gYE0ke3BhcnQoeDEsIG5leHQueDEpfSAke3BhcnQoeTEsIG5leHQueTEpfSBMJHtwYXJ0KHgyLCBuZXh0LngyKX0gJHtwYXJ0KHkyLCBuZXh0LnkyKX1gO1xuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gPHBhdGggZD17dGhpcy5nZXRMaW5lKCl9Lz5cbiAgfSxcbn0pXG5cbm1vZHVsZS5leHBvcnRzID0gTWluZG1hcExpbmtzXG4iLCJ2YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdC9hZGRvbnMnKVxuICAsIGN4ID0gUmVhY3QuYWRkb25zLmNsYXNzU2V0XG4gICwgUFQgPSBSZWFjdC5Qcm9wVHlwZXNcblxuICAsIExpc3RlbmVyID0gcmVxdWlyZSgnLi4vLi4vbGlzdGVuZXInKVxuICAsIE1pbmRtYXBMaW5rcyA9IHJlcXVpcmUoJy4vbGlua3MnKVxuICAsIE1pbmRtYXBOb2RlID0gcmVxdWlyZSgnLi9ub2RlJylcblxudmFyIE1vdmFibGUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIHByb3BUeXBlczoge1xuICAgIHBvc2l0aW9uczogUFQub2JqZWN0LFxuICB9LFxuXG4gIG1peGluczogW1xuICAgIExpc3RlbmVyKHtcbiAgICAgIHN0b3JlQXR0cnM6IGZ1bmN0aW9uIChnZXR0ZXJzLCBwcm9wcykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGFjdGl2ZU5vZGU6IGdldHRlcnMuZ2V0QWN0aXZlKCksXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzaG91bGRHZXROZXc6IGZhbHNlLFxuICAgICAgZ2V0TGlzdGVuZXJzOiBmdW5jdGlvbiAocHJvcHMsIGV2ZW50cykge1xuICAgICAgICByZXR1cm4gW2V2ZW50cy5hY3RpdmVOb2RlQ2hhbmdlZCgpXVxuICAgICAgfSxcbiAgICAgIHVwZGF0ZVN0b3JlU3RhdGU6IGZ1bmN0aW9uIChzdGF0ZSwgZ2V0dGVycywgcHJvcHMpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuYWN0aXZlTm9kZSA9PT0gc3RhdGUuYWN0aXZlTm9kZSkgcmV0dXJuXG4gICAgICAgIHZhciBhaWQgPSBzdGF0ZS5hY3RpdmVOb2RlXG4gICAgICAgICAgLCBwb3MgPSBwcm9wcy5wb3NpdGlvbnMuYm94ZXNbYWlkXVxuICAgICAgICBpZiAoIXBvcykgcmV0dXJuXG4gICAgICAgIHZhciBueCA9IHRoaXMuc3RhdGUubGVmdCArIHBvcy54XG4gICAgICAgICAgLCBueSA9IHRoaXMuc3RhdGUudG9wICsgcG9zLnlcbiAgICAgICAgICAsIG1hcmdpbiA9IDMwXG4gICAgICAgICAgLCBkeCA9IDBcbiAgICAgICAgICAsIGR5ID0gMFxuICAgICAgICBpZiAobnggLSBtYXJnaW4gPCAwKSB7XG4gICAgICAgICAgZHggLT0gbnggLSBtYXJnaW5cbiAgICAgICAgfVxuICAgICAgICBpZiAobnkgLSBtYXJnaW4gPCAwKSB7XG4gICAgICAgICAgZHkgLT0gbnkgLSBtYXJnaW5cbiAgICAgICAgfVxuICAgICAgICBpZiAobnggKyBwb3Mud2lkdGggKyBtYXJnaW4gPiB0aGlzLnByb3BzLndpZHRoKSB7XG4gICAgICAgICAgZHggLT0gbnggKyBwb3Mud2lkdGggKyBtYXJnaW4gLSB0aGlzLnByb3BzLndpZHRoXG4gICAgICAgIH1cbiAgICAgICAgaWYgKG55ICsgcG9zLmhlaWdodCArIG1hcmdpbiA+IHRoaXMucHJvcHMuaGVpZ2h0KSB7XG4gICAgICAgICAgZHkgLT0gbnkgKyBwb3MuaGVpZ2h0ICsgbWFyZ2luIC0gdGhpcy5wcm9wcy5oZWlnaHRcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGxlZnQ6IHRoaXMuc3RhdGUubGVmdCArIGR4LFxuICAgICAgICAgIHRvcDogdGhpcy5zdGF0ZS50b3AgKyBkeSxcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9KVxuICBdLFxuXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IGZ1bmN0aW9uIChuZXh0UHJvcHMpIHtcbiAgICB2YXIgYWlkID0gdGhpcy5zdGF0ZS5hY3RpdmVOb2RlXG4gICAgICAsIHBvcyA9IG5leHRQcm9wcy5wb3NpdGlvbnMuYm94ZXNbYWlkXVxuICAgIGlmICghcG9zKSByZXR1cm5cbiAgICB2YXIgbnggPSB0aGlzLnN0YXRlLmxlZnQgKyBwb3MueFxuICAgICAgLCBueSA9IHRoaXMuc3RhdGUudG9wICsgcG9zLnlcbiAgICAgICwgbWFyZ2luID0gMzBcbiAgICAgICwgZHggPSAwXG4gICAgICAsIGR5ID0gMFxuICAgIGlmIChueCAtIG1hcmdpbiA8IDApIHtcbiAgICAgIGR4IC09IG54IC0gbWFyZ2luXG4gICAgfVxuICAgIGlmIChueSAtIG1hcmdpbiA8IDApIHtcbiAgICAgIGR5IC09IG55IC0gbWFyZ2luXG4gICAgfVxuICAgIGlmIChueCArIHBvcy53aWR0aCArIG1hcmdpbiA+IHRoaXMucHJvcHMud2lkdGgpIHtcbiAgICAgIGR4IC09IG54ICsgcG9zLndpZHRoICsgbWFyZ2luIC0gdGhpcy5wcm9wcy53aWR0aFxuICAgIH1cbiAgICBpZiAobnkgKyBwb3MuaGVpZ2h0ICsgbWFyZ2luID4gdGhpcy5wcm9wcy5oZWlnaHQpIHtcbiAgICAgIGR5IC09IG55ICsgcG9zLmhlaWdodCArIG1hcmdpbiAtIHRoaXMucHJvcHMuaGVpZ2h0XG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdGUoIHtcbiAgICAgIGxlZnQ6IHRoaXMuc3RhdGUubGVmdCArIGR4LFxuICAgICAgdG9wOiB0aGlzLnN0YXRlLnRvcCArIGR5LFxuICAgIH0pXG4gICAgLypcbiAgICB2YXIgYWlkID0gdGhpcy5wcm9wcy5zdG9yZS52aWV3LmFjdGl2ZVxuICAgICAgLCBwcG9zID0gdGhpcy5wcm9wcy5wb3NpdGlvbnMuYm94ZXNbYWlkXVxuICAgICAgLCBucG9zID0gbmV4dFByb3BzLnBvc2l0aW9ucy5ib3hlc1thaWRdXG4gICAgaWYgKCFwcG9zIHx8ICFucG9zKSByZXR1cm5cbiAgICB2YXIgZHggPSBwcG9zLnggLSBucG9zLnhcbiAgICAgICwgZHkgPSBwcG9zLnkgLSBucG9zLnlcbiAgICAgICwgbnggPSB0aGlzLnN0YXRlLmxlZnQgKyBkeCArIG5wb3MueFxuICAgICAgLCBueSA9IHRoaXMuc3RhdGUudG9wICsgZHkgKyBucG9zLnlcbiAgICBpZiAobnggPCAwKSB7XG4gICAgICBkeCAtPSBueFxuICAgIH1cbiAgICBpZiAobnkgPCAwKSB7XG4gICAgICBkeSAtPSBueVxuICAgIH1cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGxlZnQ6IHRoaXMuc3RhdGUubGVmdCArIGR4LFxuICAgICAgdG9wOiB0aGlzLnN0YXRlLnRvcCArIGR5LFxuICAgIH0pXG4gICAgKi9cbiAgfSxcblxuICBjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uIChwcmV2UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgIGlmICghcHJldlN0YXRlLm1vdmluZyAmJiB0aGlzLnN0YXRlLm1vdmluZykge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMuX29uTW91c2VNb3ZlKVxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLl9vbk1vdXNlVXApXG4gICAgfSBlbHNlIGlmIChwcmV2U3RhdGUubW92aW5nICYmICF0aGlzLnN0YXRlLm1vdmluZykge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMuX29uTW91c2VNb3ZlKVxuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLl9vbk1vdXNlVXApXG4gICAgfVxuICB9LFxuXG4gIF9vbk1vdXNlVXA6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHttb3Zpbmc6IGZhbHNlfSlcbiAgfSxcblxuICBfb25Nb3VzZURvd246IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGUudGFyZ2V0ICE9PSB0aGlzLmdldERPTU5vZGUoKSkgcmV0dXJuXG4gICAgLy8gZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuICAgIHRoaXMucHJvcHMuc3RvcmUuYWN0aW9ucy5zZXRBY3RpdmVWaWV3KClcbiAgICB0aGlzLnByb3BzLnN0b3JlLmFjdGlvbnMubm9ybWFsTW9kZSgpXG4gICAgdGhpcy5zZXRTdGF0ZSh7bW92aW5nOiB7XG4gICAgICB4OiB0aGlzLnN0YXRlLmxlZnQgLSBlLmNsaWVudFgsXG4gICAgICB5OiB0aGlzLnN0YXRlLnRvcCAtIGUuY2xpZW50WSxcbiAgICB9fSlcbiAgfSxcblxuICBfb25Nb3VzZU1vdmU6IGZ1bmN0aW9uIChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgbGVmdDogZS5jbGllbnRYICsgdGhpcy5zdGF0ZS5tb3ZpbmcueCxcbiAgICAgIHRvcDogZS5jbGllbnRZICsgdGhpcy5zdGF0ZS5tb3ZpbmcueSxcbiAgICB9KVxuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgbW92aW5nOiBmYWxzZSxcbiAgICB9XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN0eWxlID0ge1xuICAgICAgdG9wOiB0aGlzLnN0YXRlLnRvcCxcbiAgICAgIGxlZnQ6IHRoaXMuc3RhdGUubGVmdCxcbiAgICAgIC8vIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgnICsgdGhpcy5zdGF0ZS5sZWZ0ICsgJ3B4LCAnICsgdGhpcy5zdGF0ZS50b3AgKyAncHgpJ1xuICAgIH1cbiAgICBpZiAodGhpcy5zdGF0ZS5tb3ZpbmcpIHN0eWxlLnRyYW5zaXRpb24gPSAnbm9uZSdcbiAgICB2YXIgcG9zaXRpb25zID0gdGhpcy5wcm9wcy5wb3NpdGlvbnNcbiAgICByZXR1cm4gPGRpdlxuICAgICAgICBvbk1vdXNlRG93bj17dGhpcy5fb25Nb3VzZURvd259XG4gICAgICAgIGNsYXNzTmFtZT0nTWluZG1hcE1vdmFibGUnPlxuICAgICAgPGRpdlxuICAgICAgICBzdHlsZT17c3R5bGV9XG4gICAgICAgIGNsYXNzTmFtZT1cIk1pbmRtYXBNb3ZhYmxlX2NvbnRhaW5lclwiPlxuICAgICAgICA8TWluZG1hcE5vZGVcbiAgICAgICAgICBweD17MH1cbiAgICAgICAgICBweT17MH1cbiAgICAgICAgICByZUNhbGM9e3RoaXMucHJvcHMucmVDYWxjfVxuICAgICAgICAgIG9uSGVpZ2h0PXt0aGlzLnByb3BzLm9uSGVpZ2h0fVxuICAgICAgICAgIHBvc2l0aW9ucz17cG9zaXRpb25zLmJveGVzfVxuICAgICAgICAgIHBsdWdpbnM9e3RoaXMucHJvcHMubm9kZVBsdWdpbnN9XG4gICAgICAgICAgYm9kaWVzPXt0aGlzLnByb3BzLmJvZGllc31cbiAgICAgICAgICBzdG9yZT17dGhpcy5wcm9wcy5zdG9yZX1cbiAgICAgICAgICBrZXk9e3RoaXMucHJvcHMuc3RvcmUudmlldy5yb290fVxuICAgICAgICAgIGlkPXt0aGlzLnByb3BzLnN0b3JlLnZpZXcucm9vdH1cbiAgICAgICAgICBpc1Jvb3Q9e3RydWV9XG4gICAgICAgICAgaW5kZXg9ezB9XG4gICAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICB9LFxufSlcblxubW9kdWxlLmV4cG9ydHMgPSBNb3ZhYmxlXG4iLCJcbnZhciBtb3ZlbWVudCA9IG1vZHVsZS5leHBvcnRzID0ge1xuICByaWdodDogZnVuY3Rpb24gKGlkLCByb290LCBub2Rlcykge1xuICAgIGlmIChub2Rlc1tpZF0uY2hpbGRyZW4gJiYgbm9kZXNbaWRdLmNoaWxkcmVuLmxlbmd0aCAmJiAoIW5vZGVzW2lkXS5jb2xsYXBzZWQgfHwgaWQgPT09IHJvb3QpKSB7XG4gICAgICByZXR1cm4gbm9kZXNbaWRdLmNoaWxkcmVuWzBdXG4gICAgfVxuICAgIGxldCB1cCA9IGlkXG4gICAgbGV0IGRvd24gPSBpZFxuICAgIHdoaWxlICh1cCB8fCBkb3duKSB7XG4gICAgICBpZiAoZG93bikge1xuICAgICAgICBpZiAobm9kZXNbZG93bl0uY2hpbGRyZW4gJiYgbm9kZXNbZG93bl0uY2hpbGRyZW4ubGVuZ3RoICYmICFub2Rlc1tkb3duXS5jb2xsYXBzZWQpIHtcbiAgICAgICAgICByZXR1cm4gbm9kZXNbZG93bl0uY2hpbGRyZW5bMF1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHVwKSB7XG4gICAgICAgIHVwID0gbW92ZW1lbnQucHJldlNpYmxpbmdPckNvdXNpbih1cCwgcm9vdCwgbm9kZXMpXG4gICAgICAgIGlmICh1cCAmJiBub2Rlc1t1cF0uY2hpbGRyZW4gJiYgbm9kZXNbdXBdLmNoaWxkcmVuLmxlbmd0aCAmJiAhbm9kZXNbdXBdLmNvbGxhcHNlZCkge1xuICAgICAgICAgIHJldHVybiBub2Rlc1t1cF0uY2hpbGRyZW5bbm9kZXNbdXBdLmNoaWxkcmVuLmxlbmd0aCAtIDFdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChkb3duKSB7XG4gICAgICAgIGRvd24gPSBtb3ZlbWVudC5uZXh0U2libGluZ09yQ291c2luKGRvd24sIHJvb3QsIG5vZGVzKVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvLyBUT0RPOiByZWZhY3RvciBiZWxvdyBhbmQgbmV4dFNpYmxpbmdPckNvdXNpbiB0byByZW1vdmUgZHVwbGljYXRlIGxvZ2ljLlxuICBiZWxvdzogZnVuY3Rpb24gKGlkLCByb290LCBub2Rlcykge1xuICAgIGlmIChpZCA9PT0gcm9vdCkgcmV0dXJuXG4gICAgbGV0IHBpZCA9IG5vZGVzW2lkXS5wYXJlbnRcbiAgICAgICwgcCA9IG5vZGVzW3BpZF1cbiAgICAgICwgY2ggPSBwLmNoaWxkcmVuXG4gICAgICAsIGl4ID0gY2guaW5kZXhPZihpZClcbiAgICBpZiAoaXggPCBjaC5sZW5ndGggLSAxKSByZXR1cm4ge3BpZDogcGlkLCBpeDogaXggKyAxfVxuICAgIC8vIGdvIGZvciBzaWJsaW5nc1xuXG4gICAgZnVuY3Rpb24gdmlzaXQoaWQsIGRlcHRoLCBjcmF3bFVwLCBjaGlsZElkKSB7XG4gICAgICBpZiAoZGVwdGggPT09IDEgJiYgIWNyYXdsVXApIHtcbiAgICAgICAgcmV0dXJuIHtwaWQ6IGlkLCBpeDogMH1cbiAgICAgIH1cbiAgICAgIHZhciBjaCA9IG5vZGVzW2lkXS5jaGlsZHJlblxuICAgICAgaWYgKCFjaCB8fCAhY2gubGVuZ3RoIHx8IG5vZGVzW2lkXS5jb2xsYXBzZWQpIHJldHVybiBmYWxzZVxuICAgICAgdmFyIHN1YlxuICAgICAgdmFyIGkgPSAwXG4gICAgICBpZiAoY2hpbGRJZCkgaSA9IGNoLmluZGV4T2YoY2hpbGRJZCkgKyAxXG4gICAgICBpZiAoZGVwdGggPT09IDEgJiYgaSA8IGNoLmxlbmd0aCkgcmV0dXJuIGNoW2ldXG4gICAgICBmb3IgKDsgaTxjaC5sZW5ndGg7IGkrKykge1xuICAgICAgICBzdWIgPSB2aXNpdChjaFtpXSwgZGVwdGgtMSlcbiAgICAgICAgaWYgKHN1YikgcmV0dXJuIHN1YlxuICAgICAgfVxuICAgICAgaWYgKGNyYXdsVXAgJiYgaWQgIT09IHJvb3QpIHtcbiAgICAgICAgcmV0dXJuIHZpc2l0KG5vZGVzW2lkXS5wYXJlbnQsIGRlcHRoICsgMSwgdHJ1ZSwgaWQpXG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICByZXR1cm4gdmlzaXQocGlkLCAxLCB0cnVlLCBpZClcbiAgfSxcblxuICBhYm92ZTogZnVuY3Rpb24gKGlkLCByb290LCBub2Rlcykge1xuICAgIGlmIChpZCA9PT0gcm9vdCkgcmV0dXJuXG4gICAgdmFyIHBpZCA9IG5vZGVzW2lkXS5wYXJlbnRcbiAgICAgICwgcCA9IG5vZGVzW3BpZF1cbiAgICAgICwgY2ggPSBwLmNoaWxkcmVuXG4gICAgICAsIGl4ID0gY2guaW5kZXhPZihpZClcbiAgICBpZiAoaXggPiAwKSByZXR1cm4ge3BpZDogcGlkLCBpeDogaXggLSAxfVxuICAgIC8vIGdvIGZvciBzaWJsaW5nc1xuXG4gICAgZnVuY3Rpb24gdmlzaXQoaWQsIGRlcHRoLCBjcmF3bFVwLCBjaGlsZElkKSB7XG4gICAgICB2YXIgY2ggPSBub2Rlc1tpZF0uY2hpbGRyZW5cbiAgICAgIGlmIChkZXB0aCA9PT0gMSAmJiAhY3Jhd2xVcCkge1xuICAgICAgICByZXR1cm4ge3BpZDogaWQsIGl4OiAoY2ggJiYgY2gubGVuZ3RoKSA/IGNoLmxlbmd0aCA6IDB9XG4gICAgICB9XG4gICAgICBpZiAoIWNoIHx8IG5vZGVzW2lkXS5jb2xsYXBzZWQgfHwgIWNoLmxlbmd0aCkgcmV0dXJuIGZhbHNlXG4gICAgICB2YXIgc3ViXG4gICAgICB2YXIgaT1jaC5sZW5ndGggLSAxXG4gICAgICBpZiAoY2hpbGRJZCkgaSA9IGNoLmluZGV4T2YoY2hpbGRJZCkgLSAxXG4gICAgICBmb3IgKDsgaT49MDsgaS0tKSB7XG4gICAgICAgIHN1YiA9IHZpc2l0KGNoW2ldLCBkZXB0aCAtIDEpXG4gICAgICAgIGlmIChzdWIpIHJldHVybiBzdWJcbiAgICAgIH1cbiAgICAgIGlmIChjcmF3bFVwICYmIGlkICE9PSByb290KSB7XG4gICAgICAgIHJldHVybiB2aXNpdChub2Rlc1tpZF0ucGFyZW50LCBkZXB0aCArIDEsIHRydWUsIGlkKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgcmV0dXJuIHZpc2l0KHBpZCwgMSwgdHJ1ZSwgaWQpXG4gIH0sXG5cbiAgbmV4dFNpYmxpbmdPckNvdXNpbjogZnVuY3Rpb24gKGlkLCByb290LCBub2Rlcykge1xuICAgIGlmIChpZCA9PT0gcm9vdCkgcmV0dXJuXG4gICAgdmFyIHBpZCA9IG5vZGVzW2lkXS5wYXJlbnRcbiAgICAgICwgcCA9IG5vZGVzW3BpZF1cbiAgICAgICwgY2ggPSBwLmNoaWxkcmVuXG4gICAgICAsIGl4ID0gY2guaW5kZXhPZihpZClcbiAgICBpZiAoaXggPCBjaC5sZW5ndGggLSAxKSByZXR1cm4gY2hbaXggKyAxXVxuICAgIC8vIGdvIGZvciBzaWJsaW5nc1xuXG4gICAgZnVuY3Rpb24gdmlzaXQoaWQsIGRlcHRoLCBjcmF3bFVwLCBjaGlsZElkKSB7XG4gICAgICBpZiAoZGVwdGggPT09IDApIHJldHVybiBpZFxuICAgICAgdmFyIGNoID0gbm9kZXNbaWRdLmNoaWxkcmVuXG4gICAgICBpZiAoIWNoIHx8IG5vZGVzW2lkXS5jb2xsYXBzZWQgfHwgIWNoLmxlbmd0aCkgcmV0dXJuIGZhbHNlXG4gICAgICB2YXIgc3ViXG4gICAgICB2YXIgaT0wXG4gICAgICBpZiAoY2hpbGRJZCkgaSA9IGNoLmluZGV4T2YoY2hpbGRJZCkgKyAxXG4gICAgICBpZiAoZGVwdGggPT09IDEgJiYgaSA8IGNoLmxlbmd0aCkgcmV0dXJuIGNoW2ldXG4gICAgICBmb3IgKDsgaTxjaC5sZW5ndGg7IGkrKykge1xuICAgICAgICBzdWIgPSB2aXNpdChjaFtpXSwgZGVwdGgtMSlcbiAgICAgICAgaWYgKHN1YikgcmV0dXJuIHN1YlxuICAgICAgfVxuICAgICAgaWYgKGNyYXdsVXAgJiYgaWQgIT09IHJvb3QpIHtcbiAgICAgICAgcmV0dXJuIHZpc2l0KG5vZGVzW2lkXS5wYXJlbnQsIGRlcHRoICsgMSwgdHJ1ZSwgaWQpXG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICByZXR1cm4gdmlzaXQocGlkLCAxLCB0cnVlLCBpZClcbiAgfSxcblxuICBwcmV2U2libGluZ09yQ291c2luOiBmdW5jdGlvbiAoaWQsIHJvb3QsIG5vZGVzKSB7XG4gICAgaWYgKGlkID09PSByb290KSByZXR1cm5cbiAgICB2YXIgcGlkID0gbm9kZXNbaWRdLnBhcmVudFxuICAgICAgLCBwID0gbm9kZXNbcGlkXVxuICAgICAgLCBjaCA9IHAuY2hpbGRyZW5cbiAgICAgICwgaXggPSBjaC5pbmRleE9mKGlkKVxuICAgIGlmIChpeCA+IDApIHJldHVybiBjaFtpeCAtIDFdXG4gICAgLy8gZ28gZm9yIHNpYmxpbmdzXG5cbiAgICBmdW5jdGlvbiB2aXNpdChpZCwgZGVwdGgsIGNyYXdsVXAsIGNoaWxkSWQpIHtcbiAgICAgIGlmIChkZXB0aCA9PT0gMCkgcmV0dXJuIGlkXG4gICAgICB2YXIgY2ggPSBub2Rlc1tpZF0uY2hpbGRyZW5cbiAgICAgIGlmICghY2ggfHwgbm9kZXNbaWRdLmNvbGxhcHNlZCB8fCAhY2gubGVuZ3RoKSByZXR1cm4gZmFsc2VcbiAgICAgIHZhciBzdWJcbiAgICAgIHZhciBpPWNoLmxlbmd0aCAtIDFcbiAgICAgIGlmIChjaGlsZElkKSBpID0gY2guaW5kZXhPZihjaGlsZElkKSAtIDFcbiAgICAgIGlmIChkZXB0aCA9PT0gMSAmJiBpID49IDApIHJldHVybiBjaFtpXVxuICAgICAgZm9yICg7IGk+PTA7IGktLSkge1xuICAgICAgICBzdWIgPSB2aXNpdChjaFtpXSwgZGVwdGggLSAxKVxuICAgICAgICBpZiAoc3ViKSByZXR1cm4gc3ViXG4gICAgICB9XG4gICAgICBpZiAoY3Jhd2xVcCAmJiBpZCAhPT0gcm9vdCkge1xuICAgICAgICByZXR1cm4gdmlzaXQobm9kZXNbaWRdLnBhcmVudCwgZGVwdGggKyAxLCB0cnVlLCBpZClcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIHJldHVybiB2aXNpdChwaWQsIDEsIHRydWUsIGlkKVxuICB9LFxuXG4gIG5leHRDb3VzaW46IGZ1bmN0aW9uIChpZCwgcm9vdCwgbm9kZXMpIHtcbiAgICBpZiAoaWQgPT09IHJvb3QpIHJldHVyblxuICAgIGxldCBhdW50XG4gICAgICAsIGRlZ3JlZSA9IDFcbiAgICAgICwgcGFyZW50ID0gbm9kZXNbaWRdLnBhcmVudFxuICAgIHdoaWxlICghYXVudCkge1xuICAgICAgbGV0IGNoID0gbm9kZXNbcGFyZW50XS5jaGlsZHJlblxuICAgICAgICAsIGl4ID0gY2guaW5kZXhPZihwYXJlbnQpICsgMVxuICAgICAgd2hpbGUgKGl4IDwgY2gubGVuZ3RoICYmICEobm9kZXNbY2hbaXhdXS5jaGlsZHJlbiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFub2Rlc1tjaFtpeF1dLmNvbGxhcHNlZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzW2NoW2l4XV0uY2hpbGRyZW4ubGVuZ3RoKSkge1xuICAgICAgICBpeCArPSAxXG4gICAgICB9XG4gICAgICBpZiAoaXggPCBjaC5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIG5vZGVzW2NoW2l4XV0uY2hpbGRyZW5bMF1cbiAgICAgIH1cbiAgICB9XG4gICAgd2hpbGUgKCEoYXVudCA9IG1vdmVtZW50Lm5leHRTaWJsaW5nKHBhcmVudCwgcm9vdCwgbm9kZXMpKSkge1xuICAgICAgZGVncmVlICs9IDFcbiAgICAgIHBhcmVudCA9IG5vZGVzW3BhcmVudF0ucGFyZW50XG4gICAgfVxuICAgIGxldCBjb3VzaW4gPSBhdW50XG4gICAgZm9yICg7IGRlZ3JlZSA+IDAgJiYgbm9kZXNbY291c2luXS5jaGlsZHJlbiAmJiBub2Rlc1tjb3VzaW5dLmNoaWxkcmVuLmxlbmd0aDsgZGVncmVlLS0pIHtcbiAgICAgIGNvdXNpbiA9IG5vZGVzW2NvdXNpbl0uY2hpbGRyZW5bMF1cbiAgICB9XG4gICAgcmV0dXJuIGNvdXNpblxuICB9LFxuXG59XG5cbiIsInZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0L2FkZG9ucycpXG4gICwgY3ggPSBSZWFjdC5hZGRvbnMuY2xhc3NTZXRcbiAgLCBQVCA9IFJlYWN0LlByb3BUeXBlc1xuICAsIFNpbXBsZUJvZHkgPSByZXF1aXJlKCcuLi9ib2R5L3NpbXBsZScpXG5cbiAgLCBMaXN0ZW5lciA9IHJlcXVpcmUoJy4uLy4uL2xpc3RlbmVyJylcblxudmFyIE1pbmRtYXBOb2RlID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBwcm9wVHlwZXM6IHtcbiAgICBpZDogUFQuc3RyaW5nLFxuICAgIGlzUm9vdDogUFQuYm9vbCxcbiAgICBzdG9yZTogUFQub2JqZWN0LFxuICAgIHJlQ2FsYzogUFQuZnVuYyxcbiAgICBvbkhlaWdodDogUFQuZnVuYyxcbiAgICBwb3NpdGlvbnM6IFBULm9iamVjdCxcbiAgICBweDogUFQubnVtYmVyLFxuICAgIHB5OiBQVC5udW1iZXIsXG4gICAgcGx1dGluczogUFQub2JqZWN0LFxuICAgIGJvZGllczogUFQub2JqZWN0LFxuICB9LFxuXG4gIG1peGluczogW1xuICAgIExpc3RlbmVyKHtcbiAgICAgIHN0b3JlQXR0cnM6IGZ1bmN0aW9uIChnZXR0ZXJzLCBwcm9wcykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG5vZGU6IGdldHRlcnMuZ2V0Tm9kZShwcm9wcy5pZCksXG4gICAgICAgICAgaXNBY3RpdmVWaWV3OiBnZXR0ZXJzLmlzQWN0aXZlVmlldygpLFxuICAgICAgICAgIGlzQWN0aXZlOiBnZXR0ZXJzLmlzQWN0aXZlKHByb3BzLmlkKSxcbiAgICAgICAgICBpc1NlbGVjdGVkOiBnZXR0ZXJzLmlzU2VsZWN0ZWQocHJvcHMuaWQpLFxuICAgICAgICAgIGVkaXRTdGF0ZTogZ2V0dGVycy5lZGl0U3RhdGUocHJvcHMuaWQpLFxuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICBpbml0U3RvcmVTdGF0ZTogZnVuY3Rpb24gKHN0YXRlLCBnZXR0ZXJzLCBwcm9wcykge1xuICAgICAgICB2YXIgbm9kZSA9IHN0YXRlLm5vZGVcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBsYXp5Q2hpbGRyZW46ICFwcm9wcy5pc1Jvb3QgJiYgbm9kZS5jb2xsYXBzZWQgJiYgbm9kZS5jaGlsZHJlbi5sZW5ndGgsXG4gICAgICAgICAgY29sbGFwc2VkOiBub2RlLmNvbGxhcHNlZCxcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgdXBkYXRlU3RvcmVTdGF0ZTogZnVuY3Rpb24gKHN0YXRlLCBnZXR0ZXJzLCBwcm9wcykge1xuICAgICAgICB2YXIgbm9kZSA9IHN0YXRlLm5vZGVcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBsYXp5Q2hpbGRyZW46IHRoaXMuc3RhdGUubGF6eUNoaWxkcmVuICYmIG5vZGUuY29sbGFwc2VkLFxuICAgICAgICAgIGNvbGxhcHNlZDogbm9kZS5jb2xsYXBzZWQsXG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIHNob3VsZEdldE5ldzogZnVuY3Rpb24gKG5leHRQcm9wcykge1xuICAgICAgICByZXR1cm4gbmV4dFByb3BzLmlkICE9PSB0aGlzLnByb3BzLmlkIHx8IG5leHRQcm9wcy5zdG9yZSAhPT0gdGhpcy5wcm9wcy5zdG9yZVxuICAgICAgfSxcblxuICAgICAgZ2V0TGlzdGVuZXJzOiBmdW5jdGlvbiAocHJvcHMsIGV2ZW50cykge1xuICAgICAgICByZXR1cm4gW2V2ZW50cy5ub2RlQ2hhbmdlZChwcm9wcy5pZCksIGV2ZW50cy5ub2RlVmlld0NoYW5nZWQocHJvcHMuaWQpXVxuICAgICAgfSxcbiAgICB9KVxuICBdLFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7dGlja2VkOiBmYWxzZX1cbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMucHJvcHMub25IZWlnaHQodGhpcy5wcm9wcy5pZCwgdGhpcy5nZXRET01Ob2RlKCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0KVxuICAgIHRoaXMuc2V0U3RhdGUoe3RpY2tlZDogdHJ1ZX0pXG4gIH0sXG5cbiAgY29tcG9uZW50RGlkVXBkYXRlOiBmdW5jdGlvbiAocHJldlByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICB0aGlzLnByb3BzLm9uSGVpZ2h0KHRoaXMucHJvcHMuaWQsIHRoaXMuZ2V0RE9NTm9kZSgpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodClcbiAgICBpZiAodGhpcy5zdGF0ZS5jb2xsYXBzZWQgIT09IHByZXZTdGF0ZS5jb2xsYXBzZWQpIHtcbiAgICAgIHRoaXMucHJvcHMucmVDYWxjKClcbiAgICB9XG4gIH0sXG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlOiBmdW5jdGlvbiAobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgICByZXR1cm4gbmV4dFByb3BzLmlkICE9PSB0aGlzLnByb3BzLmlkIHx8IG5leHRTdGF0ZSAhPT0gdGhpcy5zdGF0ZSB8fCBuZXh0UHJvcHMucG9zaXRpb25zICE9PSB0aGlzLnByb3BzLnBvc2l0aW9uc1xuICB9LFxuXG4gIF9vbkNsaWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5wcm9wcy5zdG9yZS5hY3Rpb25zLmVkaXQodGhpcy5wcm9wcy5pZClcbiAgfSxcblxuICBfdG9nZ2xlQ29sbGFwc2U6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnByb3BzLnN0b3JlLmFjdGlvbnMudG9nZ2xlQ29sbGFwc2UodGhpcy5wcm9wcy5pZClcbiAgfSxcblxuICBtYWtlTGluZTogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnByb3BzLmlzUm9vdCkgcmV0dXJuXG4gICAgdmFyIGJveFxuICAgIGlmICh0aGlzLnN0YXRlLnRpY2tlZCkge1xuICAgICAgYm94ID0gdGhpcy5wcm9wcy5wb3NpdGlvbnNbdGhpcy5wcm9wcy5pZF1cbiAgICB9XG4gICAgaWYgKCFib3gpIHtcbiAgICAgIGJveCA9IHt4OiB0aGlzLnByb3BzLnB4LCB5OiB0aGlzLnByb3BzLnB5fVxuICAgIH1cbiAgICB2YXIgeCA9IHRoaXMucHJvcHMucHggLSBib3gueFxuICAgICAgLCB5ID0gdGhpcy5wcm9wcy5weSAtIGJveC55XG4gICAgICAsIGxlbmd0aCA9IE1hdGguc3FydCh4KnggKyB5KnkpXG4gICAgICAsIGFuZyA9IGxlbmd0aCA/IE1hdGguYXRhbjIoeSwgeCkgOiBNYXRoLlBJXG4gICAgaWYgKGFuZyA8IDApIGFuZyArPSBNYXRoLlBJKjJcbiAgICBjb25zdCBzdHlsZSA9IHtcbiAgICAgIHdpZHRoOiBsZW5ndGgsXG4gICAgICB0cmFuc2Zvcm06IGByb3RhdGUoJHthbmd9cmFkKWAsXG4gICAgfVxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT0nTWluZG1hcE5vZGVfbGluZScgc3R5bGU9e3N0eWxlfS8+XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGJveFxuICAgIGlmICh0aGlzLnN0YXRlLnRpY2tlZCkge1xuICAgICAgYm94ID0gdGhpcy5wcm9wcy5wb3NpdGlvbnNbdGhpcy5wcm9wcy5pZF1cbiAgICB9XG4gICAgaWYgKCFib3gpIHtcbiAgICAgIGJveCA9IHt4OiB0aGlzLnByb3BzLnB4LCB5OiB0aGlzLnByb3BzLnB5fVxuICAgIH1cbiAgICB2YXIgc3R5bGUgPSB7XG4gICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoJyArIChib3gueCAtIHRoaXMucHJvcHMucHgpICsgJ3B4LCAnICsgKGJveC55IC0gdGhpcy5wcm9wcy5weSkgKyAncHgpJyxcbiAgICAgIG9wYWNpdHk6ICh0aGlzLnByb3BzLmhpZGluZyB8fCAhdGhpcy5zdGF0ZS50aWNrZWQpID8gMCA6IDEsXG4gICAgfVxuICAgIHZhciBjbHMgPSBjeCh7XG4gICAgICAnTWluZG1hcE5vZGUnOiB0cnVlLFxuICAgICAgJ01pbmRtYXBOb2RlLWhpZGluZyc6IHRoaXMucHJvcHMuaGlkaW5nLFxuICAgICAgJ01pbmRtYXBOb2RlLWFjdGl2ZSc6IHRoaXMuc3RhdGUuaXNBY3RpdmUsXG4gICAgICAnTWluZG1hcE5vZGUtZWRpdGluZyc6IHRoaXMuc3RhdGUuZWRpdFN0YXRlLFxuICAgICAgJ01pbmRtYXBOb2RlLXBhcmVudCc6IHRoaXMuc3RhdGUubm9kZS5jaGlsZHJlbiAmJiB0aGlzLnN0YXRlLm5vZGUuY2hpbGRyZW4ubGVuZ3RoLFxuICAgICAgJ01pbmRtYXBOb2RlLWNvbGxhcHNlZCc6ICF0aGlzLnByb3BzLmlzUm9vdCAmJiB0aGlzLnN0YXRlLm5vZGUuY2hpbGRyZW4gJiYgdGhpcy5zdGF0ZS5ub2RlLmNoaWxkcmVuLmxlbmd0aCAmJiB0aGlzLnN0YXRlLm5vZGUuY29sbGFwc2VkLFxuICAgIH0pXG4gICAgdmFyIGJvZHkgPSB0aGlzLnByb3BzLmJvZGllc1t0aGlzLnN0YXRlLm5vZGUudHlwZV0gfHwgdGhpcy5wcm9wcy5ib2RpZXMuZGVmYXVsdFxuICAgIHJldHVybiA8ZGl2IHN0eWxlPXtzdHlsZX0gY2xhc3NOYW1lPXtjbHN9PlxuICAgICAge3RoaXMubWFrZUxpbmUoKX1cbiAgICAgIDxkaXYgb25DbGljaz17dGhpcy5fb25DbGlja30gY2xhc3NOYW1lPSdNaW5kbWFwTm9kZV9tYWluJz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J01pbmRtYXBOb2RlX2NvbGxhcHNlcicgb25DbGljaz17dGhpcy5fdG9nZ2xlQ29sbGFwc2V9Lz5cbiAgICAgICAgPFNpbXBsZUJvZHlcbiAgICAgICAgICBlZGl0b3I9e2JvZHkuZWRpdG9yfVxuICAgICAgICAgIHJlbmRlcmVyPXtib2R5LnJlbmRlcmVyfVxuICAgICAgICAgIG5vZGU9e3RoaXMuc3RhdGUubm9kZX1cbiAgICAgICAgICBpc0FjdGl2ZT17dGhpcy5zdGF0ZS5pc0FjdGl2ZX1cbiAgICAgICAgICBlZGl0U3RhdGU9e3RoaXMuc3RhdGUuZWRpdFN0YXRlfVxuICAgICAgICAgIGFjdGlvbnM9e3RoaXMucHJvcHMuc3RvcmUuYWN0aW9uc31cbiAgICAgICAgICBzdG9yZT17dGhpcy5wcm9wcy5zdG9yZX1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgICAge3RoaXMuc3RhdGUubm9kZS5jaGlsZHJlbi5sZW5ndGggPyA8ZGl2IGNsYXNzTmFtZT0nTWluZG1hcE5vZGVfY2hpbGRyZW4nPlxuICAgICAgICB7IXRoaXMuc3RhdGUubGF6eUNoaWxkcmVuICYmIHRoaXMuc3RhdGUubm9kZS5jaGlsZHJlbi5tYXAoKGlkLCBpKSA9PlxuICAgICAgICAgIDxNaW5kbWFwTm9kZVxuICAgICAgICAgICAgcHg9e2JveC54fVxuICAgICAgICAgICAgcHk9e2JveC55fVxuICAgICAgICAgICAgaGlkaW5nPXshdGhpcy5wcm9wcy5pc1Jvb3QgJiYgKHRoaXMucHJvcHMuaGlkaW5nIHx8IHRoaXMuc3RhdGUubm9kZS5jb2xsYXBzZWQpfVxuICAgICAgICAgICAgb25IZWlnaHQ9e3RoaXMucHJvcHMub25IZWlnaHR9XG4gICAgICAgICAgICByZUNhbGM9e3RoaXMucHJvcHMucmVDYWxjfVxuICAgICAgICAgICAgcG9zaXRpb25zPXt0aGlzLnByb3BzLnBvc2l0aW9uc31cbiAgICAgICAgICAgIHBsdWdpbnM9e3RoaXMucHJvcHMucGx1Z2luc31cbiAgICAgICAgICAgIHN0b3JlPXt0aGlzLnByb3BzLnN0b3JlfVxuICAgICAgICAgICAgYm9kaWVzPXt0aGlzLnByb3BzLmJvZGllc31cbiAgICAgICAgICAgIGluZGV4PXtpfVxuICAgICAgICAgICAga2V5PXtpZH1cbiAgICAgICAgICAgIGlkPXtpZH0gLz5cbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PiA6IG51bGx9XG4gICAgPC9kaXY+XG4gIH0sXG59KVxuXG5tb2R1bGUuZXhwb3J0cyA9IE1pbmRtYXBOb2RlXG4iLCJcbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0L2FkZG9ucycpXG52YXIgY3ggPSBSZWFjdC5hZGRvbnMuY2xhc3NTZXRcbnZhciBQVCA9IFJlYWN0LlByb3BUeXBlc1xuXG52YXIgUGFwZXJJdGVtID0gcmVxdWlyZSgnLi9pdGVtJylcbnZhciBleHRlbmQgPSByZXF1aXJlKCcuLi8uLi91dGlsL2V4dGVuZCcpXG52YXIgTGlzdGVuZXIgPSByZXF1aXJlKCcuLi8uLi9saXN0ZW5lcicpXG5cbnZhciBQYXBlclZpZXcgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIG1peGluczogW1xuICAgIExpc3RlbmVyKGZ1bmN0aW9uIChzdG9yZSwgcHJvcHMpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJvb3Q6IHN0b3JlLnZpZXcucm9vdCxcbiAgICAgICAgbW9kZTogc3RvcmUudmlldy5tb2RlLFxuICAgICAgICBpc0FjdGl2ZTogc3RvcmUuaXNBY3RpdmVWaWV3KCksXG4gICAgICB9XG4gICAgfSlcbiAgXSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBwbHVnaW5zOiBQVC5hcnJheSxcbiAgICBub2RlUGx1Z2luczogUFQuYXJyYXksXG4gIH0sXG5cbiAgY29tcG9uZW50RGlkVXBkYXRlOiBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuc3RvcmUgIT09IHByZXZQcm9wcy5zdG9yZSkge1xuICAgICAgdmFyIGUgPSB0aGlzLnByb3BzLnN0b3JlLmV2ZW50c1xuICAgICAgdGhpcy5saXN0ZW4oZS5yb290Q2hhbmdlZCgpLCBlLm1vZGVDaGFuZ2VkKCksIGUuYWN0aXZlVmlld0NoYW5nZWQoKSlcbiAgICB9XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbE1vdW50OiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGUgPSB0aGlzLnByb3BzLnN0b3JlLmV2ZW50c1xuICAgIHRoaXMubGlzdGVuKGUucm9vdENoYW5nZWQoKSwgZS5tb2RlQ2hhbmdlZCgpLCBlLmFjdGl2ZVZpZXdDaGFuZ2VkKCkpXG4gIH0sXG5cbiAgZnJvbU1peDogZnVuY3Rpb24gKHBhcnQpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMucGx1Z2lucykgcmV0dXJuXG4gICAgaWYgKHRoaXMucHJvcHMuc2tpcE1peCAmJiB0aGlzLnByb3BzLnNraXBNaXguaW5kZXhPZihwYXJ0KSAhPT0gLTEpIHJldHVyblxuICAgIHZhciBpdGVtcyA9IFtdXG4gICAgZm9yICh2YXIgaT0wOyBpPHRoaXMucHJvcHMucGx1Z2lucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHBsdWdpbiA9IHRoaXMucHJvcHMucGx1Z2luc1tpXS5ibG9ja3NcbiAgICAgIGlmICghcGx1Z2luIHx8ICFwbHVnaW5bcGFydF0pIGNvbnRpbnVlO1xuICAgICAgaXRlbXMucHVzaChwbHVnaW5bcGFydF0odGhpcy5wcm9wcy5zdG9yZS5hY3Rpb25zLCB0aGlzLnN0YXRlLCB0aGlzLnByb3BzLnN0b3JlKSlcbiAgICB9XG4gICAgaWYgKCFpdGVtcy5sZW5ndGgpIHJldHVybiBudWxsXG4gICAgcmV0dXJuIGl0ZW1zXG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNsYXNzTmFtZSA9ICdwYXBlciBwYXBlci0nICsgdGhpcy5zdGF0ZS5tb2RlXG4gICAgaWYgKHRoaXMuc3RhdGUuaXNBY3RpdmUpIGNsYXNzTmFtZSArPSAnIHBhcGVyLWFjdGl2ZSdcbiAgICB2YXIgYm9kaWVzID0ge1xuICAgICAgZGVmYXVsdDoge2VkaXRvcjogbnVsbCwgcmVuZGVyZXI6IG51bGx9XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BzLm5vZGVQbHVnaW5zKSB7XG4gICAgICBmb3IgKHZhciBpPTA7IGk8dGhpcy5wcm9wcy5ub2RlUGx1Z2lucy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5ub2RlUGx1Z2luc1tpXS5ib2RpZXMpIHtcbiAgICAgICAgICBib2RpZXMgPSBleHRlbmQoYm9kaWVzLCB0aGlzLnByb3BzLm5vZGVQbHVnaW5zW2ldLmJvZGllcylcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZX0+XG4gICAgICB7dGhpcy5mcm9tTWl4KCd0b3AnKX1cbiAgICAgIHtQYXBlckl0ZW0oe1xuICAgICAgICBkZXB0aDogMCxcbiAgICAgICAgc3RvcmU6IHRoaXMucHJvcHMuc3RvcmUsXG4gICAgICAgIHBsdWdpbnM6IHRoaXMucHJvcHMubm9kZVBsdWdpbnMsXG4gICAgICAgIGJvZGllczogYm9kaWVzLFxuICAgICAgICBpc1Jvb3Q6IHRydWUsXG4gICAgICAgIGlkOiB0aGlzLnN0YXRlLnJvb3RcbiAgICAgIH0pfVxuICAgICAge3RoaXMuZnJvbU1peCgnYm90dG9tJyl9XG4gICAgPC9kaXY+XG4gIH0sXG5cbn0pXG5cbm1vZHVsZS5leHBvcnRzID0gUGFwZXJWaWV3XG4iLCJcbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0L2FkZG9ucycpXG52YXIgY3ggPSBSZWFjdC5hZGRvbnMuY2xhc3NTZXRcbnZhciBQVCA9IFJlYWN0LlByb3BUeXBlc1xudmFyIG1hcmtlZCA9IHJlcXVpcmUoJ21hcmtlZCcpXG52YXIgTGlzdGVuZXIgPSByZXF1aXJlKCcuLi8uLi9saXN0ZW5lcicpXG5cbnZhciByZW5kZXJlciA9IG5ldyBtYXJrZWQuUmVuZGVyZXIoKVxucmVuZGVyZXIubGluayA9IGZ1bmN0aW9uIChocmVmLCB0aXRsZSwgdGV4dCkge1xuICByZXR1cm4gJzxhIGhyZWY9XCInICsgaHJlZiArICdcIiB0YXJnZXQ9XCJfYmxhbmtcIiB0aXRsZT1cIicgKyB0aXRsZSArICdcIj4nICsgdGV4dCArICc8L2E+Jztcbn1cblxubWFya2VkLnNldE9wdGlvbnMoe1xuICBnZm06IHRydWUsXG4gIHNhbml0aXplOiB0cnVlLFxuICB0YWJsZXM6IHRydWUsXG4gIGJyZWFrczogdHJ1ZSxcbiAgcGVkYW50aWM6IGZhbHNlLFxuICBzbWFydExpc3RzOiB0cnVlLFxuICBzbWFydHlwYW50czogdHJ1ZSxcbiAgcmVuZGVyZXI6IHJlbmRlcmVyXG59KVxuXG52YXIgUGFwZXJJdGVtID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBtaXhpbnM6IFtcbiAgICBMaXN0ZW5lcih7XG4gICAgICBzdG9yZUF0dHJzOiBmdW5jdGlvbiAoZ2V0dGVycywgcHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBub2RlOiBnZXR0ZXJzLmdldE5vZGUocHJvcHMuaWQpLFxuICAgICAgICAgIGlzQWN0aXZlVmlldzogZ2V0dGVycy5pc0FjdGl2ZVZpZXcoKSxcbiAgICAgICAgICBpc0FjdGl2ZTogZ2V0dGVycy5pc0FjdGl2ZShwcm9wcy5pZCksXG4gICAgICAgICAgaXNTZWxlY3RlZDogZ2V0dGVycy5pc1NlbGVjdGVkKHByb3BzLmlkKSxcbiAgICAgICAgICBlZGl0U3RhdGU6IGdldHRlcnMuZWRpdFN0YXRlKHByb3BzLmlkKSxcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgaW5pdFN0b3JlU3RhdGU6IGZ1bmN0aW9uIChzdGF0ZSwgZ2V0dGVycywgcHJvcHMpIHtcbiAgICAgICAgdmFyIG5vZGUgPSBzdGF0ZS5ub2RlXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbGF6eUNoaWxkcmVuOiAhcHJvcHMuaXNSb290ICYmIG5vZGUuY29sbGFwc2VkICYmIG5vZGUuY2hpbGRyZW4ubGVuZ3RoXG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIHVwZGF0ZVN0b3JlU3RhdGU6IGZ1bmN0aW9uIChzdGF0ZSwgZ2V0dGVycywgcHJvcHMpIHtcbiAgICAgICAgdmFyIG5vZGUgPSBzdGF0ZS5ub2RlXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbGF6eUNoaWxkcmVuOiB0aGlzLnN0YXRlLmxhenlDaGlsZHJlbiAmJiBub2RlLmNvbGxhcHNlZFxuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICBzaG91bGRHZXROZXc6IGZ1bmN0aW9uIChuZXh0UHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIG5leHRQcm9wcy5pZCAhPT0gdGhpcy5wcm9wcy5pZCB8fCBuZXh0UHJvcHMuc3RvcmUgIT09IHRoaXMucHJvcHMuc3RvcmVcbiAgICAgIH0sXG5cbiAgICAgIGdldExpc3RlbmVyczogZnVuY3Rpb24gKHByb3BzLCBldmVudHMpIHtcbiAgICAgICAgcmV0dXJuIFtldmVudHMubm9kZUNoYW5nZWQocHJvcHMuaWQpLCBldmVudHMubm9kZVZpZXdDaGFuZ2VkKHByb3BzLmlkKV1cbiAgICAgIH0sXG4gICAgfSlcbiAgXSxcblxuICBjb21wb25lbnRXaWxsTW91bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBnZXQgcGx1Z2luIHVwZGF0ZSBmdW5jdGlvbnNcbiAgICB0aGlzLl9wbHVnaW5fdXBkYXRlcyA9IG51bGxcbiAgICB0aGlzLnByb3BzLnBsdWdpbnMuZm9yRWFjaCgocGx1Z2luKSA9PiB7XG4gICAgICBpZiAoIXBsdWdpbi5jb21wb25lbnREaWRVcGRhdGUpIHJldHVyblxuICAgICAgaWYgKCF0aGlzLl9wbHVnaW5fdXBkYXRlcykge1xuICAgICAgICB0aGlzLl9wbHVnaW5fdXBkYXRlcyA9IFtwbHVnaW4uY29tcG9uZW50RGlkVXBkYXRlXVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fcGx1Z2luX3VwZGF0ZXMucHVzaChwbHVnaW4uY29tcG9uZW50RGlkVXBkYXRlKVxuICAgICAgfVxuICAgIH0pXG4gIH0sXG5cbiAgLyoqIFVzZSB0byBjaGVjayB3aGF0IHRoaW5ncyBhcmUgdXBkYXRpbmcgd2hlbiAqL1xuICBjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uIChwcmV2UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgIGlmICh0aGlzLl9wbHVnaW5fdXBkYXRlcykge1xuICAgICAgdGhpcy5fcGx1Z2luX3VwZGF0ZXMubWFwKChmbikgPT4gZm4uY2FsbCh0aGlzLCBwcmV2UHJvcHMsIHByZXZTdGF0ZSkpXG4gICAgfVxuICB9LFxuXG4gIC8qXG4gIGZyb21NaXg6IGZ1bmN0aW9uIChwYXJ0KSB7XG4gICAgaWYgKCF0aGlzLnByb3BzLnBsdWdpbnMpIHJldHVyblxuICAgIHZhciBpdGVtcyA9IFtdXG4gICAgZm9yICh2YXIgaT0wOyBpPHRoaXMucHJvcHMucGx1Z2lucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHBsdWdpbiA9IHRoaXMucHJvcHMucGx1Z2luc1tpXS5ibG9ja3NcbiAgICAgIGlmICghcGx1Z2luIHx8ICFwbHVnaW5bcGFydF0pIGNvbnRpbnVlO1xuICAgICAgaXRlbXMucHVzaChwbHVnaW5bcGFydF0odGhpcy5zdGF0ZS5ub2RlLCB0aGlzLnByb3BzLnN0b3JlLmFjdGlvbnMsIHRoaXMuc3RhdGUsIHRoaXMucHJvcHMuc3RvcmUpKVxuICAgIH1cbiAgICBpZiAoIWl0ZW1zLmxlbmd0aCkgcmV0dXJuIG51bGxcbiAgICByZXR1cm4gaXRlbXNcbiAgfSxcbiAgKi9cblxuICBoZWFkZXI6IGZ1bmN0aW9uICgpIHtcbiAgICBzd2l0Y2ggKHRoaXMucHJvcHMuZGVwdGgpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgcmV0dXJuIDxoMT57dGhpcy5zdGF0ZS5ub2RlLmNvbnRlbnR9PC9oMT5cbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIDxoMj57dGhpcy5zdGF0ZS5ub2RlLmNvbnRlbnR9PC9oMj5cbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcmV0dXJuIDxoMz57dGhpcy5zdGF0ZS5ub2RlLmNvbnRlbnR9PC9oMz5cbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcmV0dXJuIDxoND57dGhpcy5zdGF0ZS5ub2RlLmNvbnRlbnR9PC9oND5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiA8aDU+e3RoaXMuc3RhdGUubm9kZS5jb250ZW50fTwvaDU+XG4gICAgfVxuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnN0YXRlLm5vZGUuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnN0YXRlLm5vZGUuY2hpbGRyZW4ubWFwKChpZCwgaSkgPT5cbiAgICAgICAgUGFwZXJJdGVtKHtcbiAgICAgICAgICBkZXB0aDogdGhpcy5wcm9wcy5kZXB0aCArIDEsXG4gICAgICAgICAgcGx1Z2luczogdGhpcy5wcm9wcy5wbHVnaW5zLFxuICAgICAgICAgIHN0b3JlOiB0aGlzLnByb3BzLnN0b3JlLFxuICAgICAgICAgIGJvZGllczogdGhpcy5wcm9wcy5ib2RpZXMsXG4gICAgICAgICAgaW5kZXg6IGksXG4gICAgICAgICAga2V5OiBpZCxcbiAgICAgICAgICBpZDogaWQsXG4gICAgICAgIH0pKVxuICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPSdzZWN0aW9uJz5cbiAgICAgICAge3RoaXMuaGVhZGVyKCl9XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvZGl2PlxuICAgIH1cbiAgICB2YXIgY29udGVudCA9IHRoaXMuc3RhdGUubm9kZS5jb250ZW50XG4gICAgaWYgKCFjb250ZW50KSByZXR1cm4gPHAvPlxuICAgIGlmICh0aGlzLnN0YXRlLm5vZGUudHlwZSA9PT0gJ2lweXRob24nKSB7XG4gICAgICBjb250ZW50ID0gJ2BgYFxcbicgKyBjb250ZW50ICsgJ1xcbmBgYCdcbiAgICB9XG4gICAgcmV0dXJuIDxwIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7XG4gICAgICBfX2h0bWw6IG1hcmtlZChjb250ZW50KVxuICAgIH19Lz5cbiAgfSxcblxufSlcblxubW9kdWxlLmV4cG9ydHMgPSBQYXBlckl0ZW1cbiIsIlxuZXhwb3J0IHtUaWNrZXIsIGluaXRGb3JtYXR0ZXJzLCB0cmVlZEZyb21GaWxlfVxuXG5mdW5jdGlvbiBUaWNrZXIoKSB7XG4gIHRoaXMudGlja3MgPSBbXVxuICB0aGlzLmFkZCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhpcy50aWNrcy5wdXNoKHtcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICB0aW1lOiBwZXJmb3JtYW5jZS5ub3coKSxcbiAgICAgIHVzZWRNZW06IHBlcmZvcm1hbmNlLm1lbW9yeS51c2VkSlNIZWFwU2l6ZSxcbiAgICAgIHRvdGFsTWVtOiBwZXJmb3JtYW5jZS5tZW1vcnkudG90YWxKU0hlYXBTaXplLFxuICAgIH0pXG4gIH1cbiAgdGhpcy5zaG93ID0gZnVuY3Rpb24gKCkge1xuICAgIGZvciAobGV0IGk9MTsgaTx0aGlzLnRpY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zb2xlLmxvZyh0aGlzLnRpY2tzW2ldLm5hbWUsIHRoaXMudGlja3NbaV0udGltZSAtIHRoaXMudGlja3NbaS0xXS50aW1lKVxuICAgIH1cbiAgfVxuICBpZiAod2luZG93LmZpcnN0RE9NKSB7XG4gICAgdGhpcy50aWNrcy5wdXNoKHtcbiAgICAgIG5hbWU6ICdmaXJzdERPTScsXG4gICAgICB0aW1lOiB3aW5kb3cuZmlyc3RET00sXG4gICAgfSlcbiAgfVxuICBpZiAod2luZG93LmFmdGVyU3R5bGUpIHtcbiAgICB0aGlzLnRpY2tzLnB1c2goe1xuICAgICAgbmFtZTogJ2FmdGVyU3R5bGUnLFxuICAgICAgdGltZTogd2luZG93LmFmdGVyU3R5bGUsXG4gICAgfSlcbiAgfVxuICB0aGlzLmFkZCgnc3RhcnQnKVxufVxuXG5mdW5jdGlvbiBpbml0Rm9ybWF0dGVycygpIHtcbiAgLy8gY29uZmlndXJhdGlvbiB0aGluZ3NcbiAgY29uc3QgZm9ybWF0ID0gcmVxdWlyZSgnaXRyZWVkL2xpYi9wbHVnaW4vZm9ybWF0JylcblxuICBjb25zdCBmb3JtYXR0ZXJzID0gW1xuICAgIHJlcXVpcmUoJ2l0cmVlZC9mb3JtYXR0ZXJzL2xpdmUnKSxcbiAgICByZXF1aXJlKCdpdHJlZWQvZm9ybWF0dGVycy9saXZlLWJ1dHRvbicpLFxuICAgIHJlcXVpcmUoJ2l0cmVlZC9mb3JtYXR0ZXJzL3JlYWN0JyksXG4gICAgcmVxdWlyZSgnaXRyZWVkL2Zvcm1hdHRlcnMvdmVnYScpLFxuICAgIHJlcXVpcmUoJ2l0cmVlZC9mb3JtYXR0ZXJzL3RhYmxlJyksXG4gICAgcmVxdWlyZSgnaXRyZWVkL2Zvcm1hdHRlcnMvZG9tJyksXG4gICAgcmVxdWlyZSgnaXRyZWVkL2Zvcm1hdHRlcnMvbGF0ZXgnKSxcbiAgICByZXF1aXJlKCdpdHJlZWQvZm9ybWF0dGVycy9saXN0LWxpa2UnKSxcbiAgICByZXF1aXJlKCdpdHJlZWQvZm9ybWF0dGVycy9qcycpLFxuICBdXG5cbiAgZm9ybWF0dGVycy5tYXAocGx1Z2luID0+IHtcbiAgICBpZiAocGx1Z2luLmRpc3BsYXkpIHtcbiAgICAgIGZvcm1hdC5kaXNwbGF5ZXIocGx1Z2luLmRpc3BsYXksIHBsdWdpbi5taW1lKVxuICAgIH1cbiAgICBpZiAocGx1Z2luLmZvcm1hdCkge1xuICAgICAgZm9ybWF0LmZvcm1hdHRlcihwbHVnaW4uZm9ybWF0LCBwbHVnaW4ubWltZSlcbiAgICB9XG4gIH0pXG59XG5cbmZ1bmN0aW9uIHRyZWVkRnJvbUZpbGUoVHJlZWQsIGRhdGEsIHBsdWdpbnMsIHBsLCBkb25lKSB7XG4gIGNvbnN0IGZpbGUgPSB7fVxuICBmb3IgKGxldCBuYW1lIGluIGRhdGEpIHtcbiAgICBpZiAobmFtZSA9PT0gJ3Jvb3QnKSBjb250aW51ZTtcbiAgICBmaWxlW25hbWVdID0gZGF0YVxuICB9XG5cbiAgY29uc3QgdHJlZWQgPSBuZXcgVHJlZWQoe3BsdWdpbnN9KVxuICB0cmVlZC5pbml0U3RvcmUoZGF0YS5yb290LCB7cGx9KS50aGVuKHN0b3JlID0+IHtcbiAgICBkb25lKG51bGwsIHt0cmVlZCwgZmlsZX0pXG4gIH0pXG59XG5cbiIsIlxudmFyIE1vZGFsID0gcmVxdWlyZSgnLi4vLi4vYXBwL3VpL21vZGFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGN1cnJlbnQsIGRvbmUpIHtcbiAgTW9kYWwuc2hvdyh7XG4gICAgdGl0bGU6ICdFZGl0IEN1c3RvbSBDU1MgQ2xhc3NlcycsXG4gICAgaW5pdGlhbFN0YXRlOiB7Y2xhc3NlczogY3VycmVudH0sXG4gICAgYnV0dG9uczoge1xuICAgICAgb2s6IGZ1bmN0aW9uICgpIHt0aGlzLnByb3BzLm9uQ2xvc2UobnVsbCwgdGhpcy5zdGF0ZS5jbGFzc2VzKX0sXG4gICAgICBjYW5jZWw6IGZ1bmN0aW9uICgpIHt0aGlzLnByb3BzLm9uQ2xvc2UodHJ1ZSl9LFxuICAgIH0sXG4gICAgcmVuZGVyQm9keTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGNoYW5nZSA9IHRoaXMuX29uQ2hhbmdlRXZ0LmJpbmQobnVsbCwgJ2NsYXNzZXMnKVxuXG4gICAgICByZXR1cm4gPGRpdj5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuY2xhc3Nlc31cbiAgICAgICAgICBwbGFjZWhvbGRlcj1cIlNwYWNlLXNlcGFyYXRlZCBjc3MgY2xhc3MgbmFtZXNcIlxuICAgICAgICAgIG9uQ2hhbmdlPXtjaGFuZ2V9IC8+XG4gICAgICA8L2Rpdj5cbiAgICB9LFxuICAgIGRvbmU6IGRvbmUsXG4gIH0pXG59XG5cbiIsIi8qKlxuICogQSB2ZXJ5IHNpbXBsZSBwbHVnaW4gdGhhdCBtZXJlbHkgYXBwZW5kcyBjdXN0b20gQ1NTIGNsYXNzZXMgdG8gYSBnaXZlblxuICogbm9kZS4gVXNlZnVsIGZvciBsaWdodC13ZWlnaHQgY3VzdG9tIHN0eWxpbmcuXG4gKi9cblxudmFyIGVkaXRDdXN0b21DU1MgPSByZXF1aXJlKCcuL2VkaXQtY3VzdG9tLWNzcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgdGl0bGU6ICdDdXN0b20gQ1NTJyxcblxuICBub2RlOiB7XG4gICAgY2xhc3NlczogZnVuY3Rpb24gKG5vZGUsIHN0YXRlKSB7XG4gICAgICByZXR1cm4gbm9kZS5jdXN0b21DU1MgfHwgJydcbiAgICB9LFxuICB9LFxuXG4gIGNvbnRleHRNZW51OiBmdW5jdGlvbiAobm9kZSwgc3RvcmUpIHtcbiAgICBpZiAoIW5vZGUpIHJldHVyblxuICAgIHJldHVybiB7XG4gICAgICB0aXRsZTogJ0N1c3RvbSBDU1MnLFxuICAgICAgYWN0aW9uOiAnZWRpdEN1c3RvbUNTUycsXG4gICAgfVxuICB9LFxuXG4gIHN0b3JlOiB7XG4gICAgYWN0aW9uczoge1xuICAgICAgZWRpdEN1c3RvbUNTUzogZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5kYi5ub2Rlc1tpZF0uY3VzdG9tQ1NTXG4gICAgICAgIGVkaXRDdXN0b21DU1MoY3VycmVudCwgKGVyciwgY2xhc3NOYW1lcykgPT4ge1xuICAgICAgICAgIGlmICghZXJyKSB7XG4gICAgICAgICAgICB0aGlzLnNldChpZCwgJ2N1c3RvbUNTUycsIGNsYXNzTmFtZXMpXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgfSxcbiAgfSxcbn1cblxuIl19
